
RobotFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000127e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08012980  08012980  00022980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b28  08012b28  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08012b28  08012b28  00022b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b30  08012b30  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b30  08012b30  00022b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b34  08012b34  00022b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08012b38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000070bc  200001f8  08012d30  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200072b4  08012d30  000372b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003139e  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006239  00000000  00000000  000615c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002298  00000000  00000000  00067800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002058  00000000  00000000  00069a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000096d8  00000000  00000000  0006baf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d9f9  00000000  00000000  000751c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2955  00000000  00000000  000a2bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145516  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009580  00000000  00000000  0014556c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012968 	.word	0x08012968

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08012968 	.word	0x08012968

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96e 	b.w	8000e4c <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468c      	mov	ip, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f040 8083 	bne.w	8000c9e <__udivmoddi4+0x116>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d947      	bls.n	8000c2e <__udivmoddi4+0xa6>
 8000b9e:	fab2 f282 	clz	r2, r2
 8000ba2:	b142      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba4:	f1c2 0020 	rsb	r0, r2, #32
 8000ba8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bac:	4091      	lsls	r1, r2
 8000bae:	4097      	lsls	r7, r2
 8000bb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000bc0:	fa1f fe87 	uxth.w	lr, r7
 8000bc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bcc:	fb06 f10e 	mul.w	r1, r6, lr
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bda:	f080 8119 	bcs.w	8000e10 <__udivmoddi4+0x288>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8116 	bls.w	8000e10 <__udivmoddi4+0x288>
 8000be4:	3e02      	subs	r6, #2
 8000be6:	443b      	add	r3, r7
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	f080 8105 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8102 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c18:	eba4 040e 	sub.w	r4, r4, lr
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	b11d      	cbz	r5, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c5 4300 	strd	r4, r3, [r5]
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	b902      	cbnz	r2, 8000c32 <__udivmoddi4+0xaa>
 8000c30:	deff      	udf	#255	; 0xff
 8000c32:	fab2 f282 	clz	r2, r2
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d150      	bne.n	8000cdc <__udivmoddi4+0x154>
 8000c3a:	1bcb      	subs	r3, r1, r7
 8000c3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c40:	fa1f f887 	uxth.w	r8, r7
 8000c44:	2601      	movs	r6, #1
 8000c46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4a:	0c21      	lsrs	r1, r4, #16
 8000c4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb08 f30c 	mul.w	r3, r8, ip
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000c5c:	1879      	adds	r1, r7, r1
 8000c5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0xe2>
 8000c64:	428b      	cmp	r3, r1
 8000c66:	f200 80e9 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000c6a:	4684      	mov	ip, r0
 8000c6c:	1ac9      	subs	r1, r1, r3
 8000c6e:	b2a3      	uxth	r3, r4
 8000c70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c7c:	fb08 f800 	mul.w	r8, r8, r0
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x10c>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x10a>
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	f200 80d9 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000c92:	4618      	mov	r0, r3
 8000c94:	eba4 0408 	sub.w	r4, r4, r8
 8000c98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c9c:	e7bf      	b.n	8000c1e <__udivmoddi4+0x96>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x12e>
 8000ca2:	2d00      	cmp	r5, #0
 8000ca4:	f000 80b1 	beq.w	8000e0a <__udivmoddi4+0x282>
 8000ca8:	2600      	movs	r6, #0
 8000caa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cae:	4630      	mov	r0, r6
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f683 	clz	r6, r3
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d14a      	bne.n	8000d54 <__udivmoddi4+0x1cc>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0x140>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80b8 	bhi.w	8000e38 <__udivmoddi4+0x2b0>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0103 	sbc.w	r1, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	d0a8      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000cd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cda:	e7a5      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f603 	lsr.w	r6, r0, r3
 8000ce4:	4097      	lsls	r7, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cee:	40d9      	lsrs	r1, r3
 8000cf0:	4330      	orrs	r0, r6
 8000cf2:	0c03      	lsrs	r3, r0, #16
 8000cf4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cf8:	fa1f f887 	uxth.w	r8, r7
 8000cfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb06 f108 	mul.w	r1, r6, r8
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x19c>
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d16:	f080 808d 	bcs.w	8000e34 <__udivmoddi4+0x2ac>
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	f240 808a 	bls.w	8000e34 <__udivmoddi4+0x2ac>
 8000d20:	3e02      	subs	r6, #2
 8000d22:	443b      	add	r3, r7
 8000d24:	1a5b      	subs	r3, r3, r1
 8000d26:	b281      	uxth	r1, r0
 8000d28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb00 f308 	mul.w	r3, r0, r8
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x1c4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d42:	d273      	bcs.n	8000e2c <__udivmoddi4+0x2a4>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d971      	bls.n	8000e2c <__udivmoddi4+0x2a4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4439      	add	r1, r7
 8000d4c:	1acb      	subs	r3, r1, r3
 8000d4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d52:	e778      	b.n	8000c46 <__udivmoddi4+0xbe>
 8000d54:	f1c6 0c20 	rsb	ip, r6, #32
 8000d58:	fa03 f406 	lsl.w	r4, r3, r6
 8000d5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d60:	431c      	orrs	r4, r3
 8000d62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d66:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d72:	431f      	orrs	r7, r3
 8000d74:	0c3b      	lsrs	r3, r7, #16
 8000d76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7a:	fa1f f884 	uxth.w	r8, r4
 8000d7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d86:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8a:	458a      	cmp	sl, r1
 8000d8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000d90:	fa00 f306 	lsl.w	r3, r0, r6
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x220>
 8000d96:	1861      	adds	r1, r4, r1
 8000d98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9c:	d248      	bcs.n	8000e30 <__udivmoddi4+0x2a8>
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	d946      	bls.n	8000e30 <__udivmoddi4+0x2a8>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4421      	add	r1, r4
 8000da8:	eba1 010a 	sub.w	r1, r1, sl
 8000dac:	b2bf      	uxth	r7, r7
 8000dae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dba:	fb00 f808 	mul.w	r8, r0, r8
 8000dbe:	45b8      	cmp	r8, r7
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x24a>
 8000dc2:	19e7      	adds	r7, r4, r7
 8000dc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc8:	d22e      	bcs.n	8000e28 <__udivmoddi4+0x2a0>
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d92c      	bls.n	8000e28 <__udivmoddi4+0x2a0>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4427      	add	r7, r4
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	eba7 0708 	sub.w	r7, r7, r8
 8000dda:	fba0 8902 	umull	r8, r9, r0, r2
 8000dde:	454f      	cmp	r7, r9
 8000de0:	46c6      	mov	lr, r8
 8000de2:	4649      	mov	r1, r9
 8000de4:	d31a      	bcc.n	8000e1c <__udivmoddi4+0x294>
 8000de6:	d017      	beq.n	8000e18 <__udivmoddi4+0x290>
 8000de8:	b15d      	cbz	r5, 8000e02 <__udivmoddi4+0x27a>
 8000dea:	ebb3 020e 	subs.w	r2, r3, lr
 8000dee:	eb67 0701 	sbc.w	r7, r7, r1
 8000df2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000df6:	40f2      	lsrs	r2, r6
 8000df8:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfc:	40f7      	lsrs	r7, r6
 8000dfe:	e9c5 2700 	strd	r2, r7, [r5]
 8000e02:	2600      	movs	r6, #0
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	462e      	mov	r6, r5
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	e70b      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e10:	4606      	mov	r6, r0
 8000e12:	e6e9      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e6fd      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e5      	bcs.n	8000de8 <__udivmoddi4+0x260>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0104 	sbc.w	r1, r9, r4
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7df      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	e7d2      	b.n	8000dd2 <__udivmoddi4+0x24a>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78d      	b.n	8000d4c <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7b9      	b.n	8000da8 <__udivmoddi4+0x220>
 8000e34:	4666      	mov	r6, ip
 8000e36:	e775      	b.n	8000d24 <__udivmoddi4+0x19c>
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e74a      	b.n	8000cd2 <__udivmoddi4+0x14a>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	4439      	add	r1, r7
 8000e42:	e713      	b.n	8000c6c <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e724      	b.n	8000c94 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0ae      	sub	sp, #184	; 0xb8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8000e5a:	edc7 0a08 	vstr	s1, [r7, #32]
 8000e5e:	ed87 1a07 	vstr	s2, [r7, #28]
 8000e62:	edc7 1a06 	vstr	s3, [r7, #24]
 8000e66:	ed87 2a05 	vstr	s4, [r7, #20]
 8000e6a:	edc7 2a04 	vstr	s5, [r7, #16]
 8000e6e:	ed87 3a03 	vstr	s6, [r7, #12]
 8000e72:	edc7 3a02 	vstr	s7, [r7, #8]
 8000e76:	ed87 4a01 	vstr	s8, [r7, #4]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8000e7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e86:	d11d      	bne.n	8000ec4 <MadgwickAHRSupdate+0x74>
 8000e88:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e94:	d116      	bne.n	8000ec4 <MadgwickAHRSupdate+0x74>
 8000e96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea2:	d10f      	bne.n	8000ec4 <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8000ea4:	edd7 2a04 	vldr	s5, [r7, #16]
 8000ea8:	ed97 2a05 	vldr	s4, [r7, #20]
 8000eac:	edd7 1a06 	vldr	s3, [r7, #24]
 8000eb0:	ed97 1a07 	vldr	s2, [r7, #28]
 8000eb4:	edd7 0a08 	vldr	s1, [r7, #32]
 8000eb8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000ebc:	f000 fede 	bl	8001c7c <MadgwickAHRSupdateIMU>
		return;
 8000ec0:	f000 becc 	b.w	8001c5c <MadgwickAHRSupdate+0xe0c>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000ec4:	4be6      	ldr	r3, [pc, #920]	; (8001260 <MadgwickAHRSupdate+0x410>)
 8000ec6:	edd3 7a00 	vldr	s15, [r3]
 8000eca:	eeb1 7a67 	vneg.f32	s14, s15
 8000ece:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ed6:	4be3      	ldr	r3, [pc, #908]	; (8001264 <MadgwickAHRSupdate+0x414>)
 8000ed8:	edd3 6a00 	vldr	s13, [r3]
 8000edc:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ee4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ee8:	4bdf      	ldr	r3, [pc, #892]	; (8001268 <MadgwickAHRSupdate+0x418>)
 8000eea:	edd3 6a00 	vldr	s13, [r3]
 8000eee:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000efa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f02:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000f06:	4bd9      	ldr	r3, [pc, #868]	; (800126c <MadgwickAHRSupdate+0x41c>)
 8000f08:	ed93 7a00 	vldr	s14, [r3]
 8000f0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f14:	4bd3      	ldr	r3, [pc, #844]	; (8001264 <MadgwickAHRSupdate+0x414>)
 8000f16:	edd3 6a00 	vldr	s13, [r3]
 8000f1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f26:	4bd0      	ldr	r3, [pc, #832]	; (8001268 <MadgwickAHRSupdate+0x418>)
 8000f28:	edd3 6a00 	vldr	s13, [r3]
 8000f2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f40:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8000f44:	4bc9      	ldr	r3, [pc, #804]	; (800126c <MadgwickAHRSupdate+0x41c>)
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f52:	4bc3      	ldr	r3, [pc, #780]	; (8001260 <MadgwickAHRSupdate+0x410>)
 8000f54:	edd3 6a00 	vldr	s13, [r3]
 8000f58:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f64:	4bc0      	ldr	r3, [pc, #768]	; (8001268 <MadgwickAHRSupdate+0x418>)
 8000f66:	edd3 6a00 	vldr	s13, [r3]
 8000f6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8000f82:	4bba      	ldr	r3, [pc, #744]	; (800126c <MadgwickAHRSupdate+0x41c>)
 8000f84:	ed93 7a00 	vldr	s14, [r3]
 8000f88:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f90:	4bb3      	ldr	r3, [pc, #716]	; (8001260 <MadgwickAHRSupdate+0x410>)
 8000f92:	edd3 6a00 	vldr	s13, [r3]
 8000f96:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fa2:	4bb0      	ldr	r3, [pc, #704]	; (8001264 <MadgwickAHRSupdate+0x414>)
 8000fa4:	edd3 6a00 	vldr	s13, [r3]
 8000fa8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fbc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000fc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	d10e      	bne.n	8000fec <MadgwickAHRSupdate+0x19c>
 8000fce:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	d107      	bne.n	8000fec <MadgwickAHRSupdate+0x19c>
 8000fdc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fe0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	f000 85ac 	beq.w	8001b44 <MadgwickAHRSupdate+0xcf4>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000fec:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ff0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ff4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ff8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001000:	edd7 7a04 	vldr	s15, [r7, #16]
 8001004:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800100c:	eeb0 0a67 	vmov.f32	s0, s15
 8001010:	f001 f958 	bl	80022c4 <invSqrt>
 8001014:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 8001018:	ed97 7a06 	vldr	s14, [r7, #24]
 800101c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001024:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8001028:	ed97 7a05 	vldr	s14, [r7, #20]
 800102c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001034:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001038:	ed97 7a04 	vldr	s14, [r7, #16]
 800103c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001044:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001048:	edd7 7a03 	vldr	s15, [r7, #12]
 800104c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001050:	edd7 7a02 	vldr	s15, [r7, #8]
 8001054:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001058:	ee37 7a27 	vadd.f32	s14, s14, s15
 800105c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001060:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001068:	eeb0 0a67 	vmov.f32	s0, s15
 800106c:	f001 f92a 	bl	80022c4 <invSqrt>
 8001070:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 8001074:	ed97 7a03 	vldr	s14, [r7, #12]
 8001078:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800107c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001080:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001084:	ed97 7a02 	vldr	s14, [r7, #8]
 8001088:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800108c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001090:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001094:	ed97 7a01 	vldr	s14, [r7, #4]
 8001098:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800109c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a0:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 80010a4:	4b71      	ldr	r3, [pc, #452]	; (800126c <MadgwickAHRSupdate+0x41c>)
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80010b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 80010ba:	4b6c      	ldr	r3, [pc, #432]	; (800126c <MadgwickAHRSupdate+0x41c>)
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80010c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010cc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 80010d0:	4b66      	ldr	r3, [pc, #408]	; (800126c <MadgwickAHRSupdate+0x41c>)
 80010d2:	edd3 7a00 	vldr	s15, [r3]
 80010d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010da:	ed97 7a01 	vldr	s14, [r7, #4]
 80010de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 80010e6:	4b5e      	ldr	r3, [pc, #376]	; (8001260 <MadgwickAHRSupdate+0x410>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80010f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 80010fc:	4b5b      	ldr	r3, [pc, #364]	; (800126c <MadgwickAHRSupdate+0x41c>)
 80010fe:	edd3 7a00 	vldr	s15, [r3]
 8001102:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001106:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 800110a:	4b55      	ldr	r3, [pc, #340]	; (8001260 <MadgwickAHRSupdate+0x410>)
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001114:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 8001118:	4b52      	ldr	r3, [pc, #328]	; (8001264 <MadgwickAHRSupdate+0x414>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001122:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 8001126:	4b50      	ldr	r3, [pc, #320]	; (8001268 <MadgwickAHRSupdate+0x418>)
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001130:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8001134:	4b4d      	ldr	r3, [pc, #308]	; (800126c <MadgwickAHRSupdate+0x41c>)
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800113e:	4b49      	ldr	r3, [pc, #292]	; (8001264 <MadgwickAHRSupdate+0x414>)
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001148:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 800114c:	4b45      	ldr	r3, [pc, #276]	; (8001264 <MadgwickAHRSupdate+0x414>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001156:	4b44      	ldr	r3, [pc, #272]	; (8001268 <MadgwickAHRSupdate+0x418>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001160:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 8001164:	4b41      	ldr	r3, [pc, #260]	; (800126c <MadgwickAHRSupdate+0x41c>)
 8001166:	ed93 7a00 	vldr	s14, [r3]
 800116a:	4b40      	ldr	r3, [pc, #256]	; (800126c <MadgwickAHRSupdate+0x41c>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001174:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 8001178:	4b3c      	ldr	r3, [pc, #240]	; (800126c <MadgwickAHRSupdate+0x41c>)
 800117a:	ed93 7a00 	vldr	s14, [r3]
 800117e:	4b38      	ldr	r3, [pc, #224]	; (8001260 <MadgwickAHRSupdate+0x410>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001188:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 800118c:	4b37      	ldr	r3, [pc, #220]	; (800126c <MadgwickAHRSupdate+0x41c>)
 800118e:	ed93 7a00 	vldr	s14, [r3]
 8001192:	4b34      	ldr	r3, [pc, #208]	; (8001264 <MadgwickAHRSupdate+0x414>)
 8001194:	edd3 7a00 	vldr	s15, [r3]
 8001198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 80011a0:	4b32      	ldr	r3, [pc, #200]	; (800126c <MadgwickAHRSupdate+0x41c>)
 80011a2:	ed93 7a00 	vldr	s14, [r3]
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <MadgwickAHRSupdate+0x418>)
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 80011b4:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <MadgwickAHRSupdate+0x410>)
 80011b6:	ed93 7a00 	vldr	s14, [r3]
 80011ba:	4b29      	ldr	r3, [pc, #164]	; (8001260 <MadgwickAHRSupdate+0x410>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <MadgwickAHRSupdate+0x410>)
 80011ca:	ed93 7a00 	vldr	s14, [r3]
 80011ce:	4b25      	ldr	r3, [pc, #148]	; (8001264 <MadgwickAHRSupdate+0x414>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <MadgwickAHRSupdate+0x410>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MadgwickAHRSupdate+0x418>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ec:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MadgwickAHRSupdate+0x414>)
 80011f2:	ed93 7a00 	vldr	s14, [r3]
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MadgwickAHRSupdate+0x414>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MadgwickAHRSupdate+0x414>)
 8001206:	ed93 7a00 	vldr	s14, [r3]
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MadgwickAHRSupdate+0x418>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001214:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MadgwickAHRSupdate+0x418>)
 800121a:	ed93 7a00 	vldr	s14, [r3]
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <MadgwickAHRSupdate+0x418>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001228:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800122c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001230:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001234:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MadgwickAHRSupdate+0x418>)
 800123a:	edd3 6a00 	vldr	s13, [r3]
 800123e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001242:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001246:	ee37 7a67 	vsub.f32	s14, s14, s15
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MadgwickAHRSupdate+0x414>)
 800124c:	edd3 6a00 	vldr	s13, [r3]
 8001250:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001258:	ee37 7a27 	vadd.f32	s14, s14, s15
 800125c:	e008      	b.n	8001270 <MadgwickAHRSupdate+0x420>
 800125e:	bf00      	nop
 8001260:	20000214 	.word	0x20000214
 8001264:	20000218 	.word	0x20000218
 8001268:	2000021c 	.word	0x2000021c
 800126c:	20000004 	.word	0x20000004
 8001270:	edd7 6a03 	vldr	s13, [r7, #12]
 8001274:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001280:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001284:	edd7 7a02 	vldr	s15, [r7, #8]
 8001288:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800128c:	4bf5      	ldr	r3, [pc, #980]	; (8001664 <MadgwickAHRSupdate+0x814>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001296:	ee37 7a27 	vadd.f32	s14, s14, s15
 800129a:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800129e:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012a6:	4bf0      	ldr	r3, [pc, #960]	; (8001668 <MadgwickAHRSupdate+0x818>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012b4:	edd7 6a03 	vldr	s13, [r7, #12]
 80012b8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80012bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012c4:	edd7 6a03 	vldr	s13, [r7, #12]
 80012c8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80012d8:	4be3      	ldr	r3, [pc, #908]	; (8001668 <MadgwickAHRSupdate+0x818>)
 80012da:	ed93 7a00 	vldr	s14, [r3]
 80012de:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80012e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012e6:	edd7 6a02 	vldr	s13, [r7, #8]
 80012ea:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80012ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012f6:	4bdd      	ldr	r3, [pc, #884]	; (800166c <MadgwickAHRSupdate+0x81c>)
 80012f8:	edd3 6a00 	vldr	s13, [r3]
 80012fc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001304:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001308:	4bd6      	ldr	r3, [pc, #856]	; (8001664 <MadgwickAHRSupdate+0x814>)
 800130a:	edd3 6a00 	vldr	s13, [r3]
 800130e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001316:	ee37 7a27 	vadd.f32	s14, s14, s15
 800131a:	edd7 6a02 	vldr	s13, [r7, #8]
 800131e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001326:	ee37 7a67 	vsub.f32	s14, s14, s15
 800132a:	edd7 6a02 	vldr	s13, [r7, #8]
 800132e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001336:	ee37 7a27 	vadd.f32	s14, s14, s15
 800133a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800133e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001342:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001346:	4bc8      	ldr	r3, [pc, #800]	; (8001668 <MadgwickAHRSupdate+0x818>)
 8001348:	edd3 7a00 	vldr	s15, [r3]
 800134c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001350:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001354:	edd7 6a02 	vldr	s13, [r7, #8]
 8001358:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800135c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001364:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8001368:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800136c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001370:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001374:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137c:	ee17 0a90 	vmov	r0, s15
 8001380:	f7ff f892 	bl	80004a8 <__aeabi_f2d>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	ec43 2b10 	vmov	d0, r2, r3
 800138c:	f010 fd70 	bl	8011e70 <sqrt>
 8001390:	ec53 2b10 	vmov	r2, r3, d0
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fb8e 	bl	8000ab8 <__aeabi_d2f>
 800139c:	4603      	mov	r3, r0
 800139e:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80013a0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80013a4:	eeb1 7a67 	vneg.f32	s14, s15
 80013a8:	4bae      	ldr	r3, [pc, #696]	; (8001664 <MadgwickAHRSupdate+0x814>)
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b2:	4bae      	ldr	r3, [pc, #696]	; (800166c <MadgwickAHRSupdate+0x81c>)
 80013b4:	edd3 6a00 	vldr	s13, [r3]
 80013b8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80013bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013c4:	edd7 6a01 	vldr	s13, [r7, #4]
 80013c8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80013cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013d4:	4ba4      	ldr	r3, [pc, #656]	; (8001668 <MadgwickAHRSupdate+0x818>)
 80013d6:	edd3 6a00 	vldr	s13, [r3]
 80013da:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80013de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013e6:	edd7 6a01 	vldr	s13, [r7, #4]
 80013ea:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80013ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013f6:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80013fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80013fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001402:	4b99      	ldr	r3, [pc, #612]	; (8001668 <MadgwickAHRSupdate+0x818>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800140c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001410:	edd7 6a01 	vldr	s13, [r7, #4]
 8001414:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001420:	edd7 6a01 	vldr	s13, [r7, #4]
 8001424:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001430:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001434:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001438:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800143c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 8001440:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001444:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001448:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800144c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001450:	eeb1 7a67 	vneg.f32	s14, s15
 8001454:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001458:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800145c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001460:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001464:	edd7 7a06 	vldr	s15, [r7, #24]
 8001468:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800146c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001470:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001474:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001478:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800147c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001480:	edd7 7a05 	vldr	s15, [r7, #20]
 8001484:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001488:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800148c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	4b73      	ldr	r3, [pc, #460]	; (8001664 <MadgwickAHRSupdate+0x814>)
 8001496:	edd3 6a00 	vldr	s13, [r3]
 800149a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800149e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014a2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80014a6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80014aa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80014ae:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80014b2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80014b6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80014ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 80014be:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80014c2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80014c6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80014ca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014ce:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80014d2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80014d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014da:	ee76 7a67 	vsub.f32	s15, s12, s15
 80014de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014e6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80014ea:	eef1 6a67 	vneg.f32	s13, s15
 80014ee:	4b5e      	ldr	r3, [pc, #376]	; (8001668 <MadgwickAHRSupdate+0x818>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014f8:	4b5c      	ldr	r3, [pc, #368]	; (800166c <MadgwickAHRSupdate+0x81c>)
 80014fa:	ed93 6a00 	vldr	s12, [r3]
 80014fe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001502:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001506:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800150a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800150e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001512:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001516:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800151a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800151e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001522:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001526:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800152a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800152e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001532:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001536:	edd7 7a02 	vldr	s15, [r7, #8]
 800153a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800153e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001542:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001546:	4b47      	ldr	r3, [pc, #284]	; (8001664 <MadgwickAHRSupdate+0x814>)
 8001548:	edd3 6a00 	vldr	s13, [r3]
 800154c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001550:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001554:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001558:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800155c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001560:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001564:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001568:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800156c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001570:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001574:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001578:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800157c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001580:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001584:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001588:	edd7 7a01 	vldr	s15, [r7, #4]
 800158c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001598:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800159c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80015a0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015a4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80015a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80015b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015b4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80015b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015bc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80015c0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80015c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80015c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80015cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015d4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80015d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <MadgwickAHRSupdate+0x81c>)
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80015ea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80015ee:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80015f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80015fa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80015fe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001602:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001606:	ee36 6a67 	vsub.f32	s12, s12, s15
 800160a:	edd7 7a04 	vldr	s15, [r7, #16]
 800160e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001616:	ee37 7a67 	vsub.f32	s14, s14, s15
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <MadgwickAHRSupdate+0x818>)
 800161c:	edd3 6a00 	vldr	s13, [r3]
 8001620:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001624:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001628:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800162c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001630:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001634:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001638:	ee36 6a67 	vsub.f32	s12, s12, s15
 800163c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001640:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001644:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001648:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800164c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001650:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001654:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001658:	ee36 6a27 	vadd.f32	s12, s12, s15
 800165c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001660:	e006      	b.n	8001670 <MadgwickAHRSupdate+0x820>
 8001662:	bf00      	nop
 8001664:	20000218 	.word	0x20000218
 8001668:	2000021c 	.word	0x2000021c
 800166c:	20000214 	.word	0x20000214
 8001670:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001678:	ee37 7a27 	vadd.f32	s14, s14, s15
 800167c:	4bf6      	ldr	r3, [pc, #984]	; (8001a58 <MadgwickAHRSupdate+0xc08>)
 800167e:	edd3 6a00 	vldr	s13, [r3]
 8001682:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001686:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800168a:	4bf4      	ldr	r3, [pc, #976]	; (8001a5c <MadgwickAHRSupdate+0xc0c>)
 800168c:	ed93 6a00 	vldr	s12, [r3]
 8001690:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001694:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001698:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800169c:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80016a0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80016a4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80016a8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016b0:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80016b4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80016b8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80016bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016c0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80016c4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80016c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80016cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80016d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d8:	4be1      	ldr	r3, [pc, #900]	; (8001a60 <MadgwickAHRSupdate+0xc10>)
 80016da:	edd3 6a00 	vldr	s13, [r3]
 80016de:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016e6:	4bdf      	ldr	r3, [pc, #892]	; (8001a64 <MadgwickAHRSupdate+0xc14>)
 80016e8:	ed93 6a00 	vldr	s12, [r3]
 80016ec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80016f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016f8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80016fc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001700:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001704:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001708:	ee26 6a27 	vmul.f32	s12, s12, s15
 800170c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001710:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001714:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001718:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800171c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001720:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001724:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001728:	ee36 6a27 	vadd.f32	s12, s12, s15
 800172c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001730:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001740:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001744:	eeb1 7a67 	vneg.f32	s14, s15
 8001748:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800174c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001750:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001754:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001758:	edd7 7a06 	vldr	s15, [r7, #24]
 800175c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001760:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001764:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001768:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800176c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001770:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001774:	edd7 7a05 	vldr	s15, [r7, #20]
 8001778:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800177c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001788:	4bb3      	ldr	r3, [pc, #716]	; (8001a58 <MadgwickAHRSupdate+0xc08>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001792:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001796:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800179a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800179e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80017a2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017a6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017ae:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017b6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80017ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80017c6:	eef1 6a67 	vneg.f32	s13, s15
 80017ca:	4ba3      	ldr	r3, [pc, #652]	; (8001a58 <MadgwickAHRSupdate+0xc08>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017d4:	4ba1      	ldr	r3, [pc, #644]	; (8001a5c <MadgwickAHRSupdate+0xc0c>)
 80017d6:	ed93 6a00 	vldr	s12, [r3]
 80017da:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017e6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80017ea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017ee:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017f2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80017f6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017fa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017fe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001802:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001806:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800180a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800180e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001812:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001816:	ee36 6a27 	vadd.f32	s12, s12, s15
 800181a:	edd7 7a03 	vldr	s15, [r7, #12]
 800181e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001826:	ee37 7a27 	vadd.f32	s14, s14, s15
 800182a:	4b8e      	ldr	r3, [pc, #568]	; (8001a64 <MadgwickAHRSupdate+0xc14>)
 800182c:	edd3 6a00 	vldr	s13, [r3]
 8001830:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001834:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001838:	4b89      	ldr	r3, [pc, #548]	; (8001a60 <MadgwickAHRSupdate+0xc10>)
 800183a:	ed93 6a00 	vldr	s12, [r3]
 800183e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001842:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001846:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800184a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800184e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001852:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001856:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800185a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800185e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001862:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001866:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800186a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800186e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001872:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001876:	edd7 7a02 	vldr	s15, [r7, #8]
 800187a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800187e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001882:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001886:	4b75      	ldr	r3, [pc, #468]	; (8001a5c <MadgwickAHRSupdate+0xc0c>)
 8001888:	edd3 6a00 	vldr	s13, [r3]
 800188c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001890:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001894:	4b70      	ldr	r3, [pc, #448]	; (8001a58 <MadgwickAHRSupdate+0xc08>)
 8001896:	ed93 6a00 	vldr	s12, [r3]
 800189a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800189e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018a6:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80018aa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018ae:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018b2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018b6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018ba:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80018be:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80018c2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018c6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018ca:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018d2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018d6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018da:	edd7 7a01 	vldr	s15, [r7, #4]
 80018de:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ea:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80018ee:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018f6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80018fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001902:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001906:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800190a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001912:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001916:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800191a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800191e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001922:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001926:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800192a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800192e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001932:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001936:	eef1 6a67 	vneg.f32	s13, s15
 800193a:	4b49      	ldr	r3, [pc, #292]	; (8001a60 <MadgwickAHRSupdate+0xc10>)
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001944:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <MadgwickAHRSupdate+0xc14>)
 8001946:	ed93 6a00 	vldr	s12, [r3]
 800194a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800194e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001952:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001956:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800195a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800195e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001962:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001966:	ee36 6a67 	vsub.f32	s12, s12, s15
 800196a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800196e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001972:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001976:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800197a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800197e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001982:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001986:	ee36 6a27 	vadd.f32	s12, s12, s15
 800198a:	edd7 7a03 	vldr	s15, [r7, #12]
 800198e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001996:	ee37 7a27 	vadd.f32	s14, s14, s15
 800199a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800199e:	eef1 6a67 	vneg.f32	s13, s15
 80019a2:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <MadgwickAHRSupdate+0xc0c>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019ac:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <MadgwickAHRSupdate+0xc08>)
 80019ae:	ed93 6a00 	vldr	s12, [r3]
 80019b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019ba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019be:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80019c2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80019c6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019ca:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019ce:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019d2:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80019d6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80019da:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80019de:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019e2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019e6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ee:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MadgwickAHRSupdate+0xc14>)
 80019fc:	edd3 6a00 	vldr	s13, [r3]
 8001a00:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a08:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001a0c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a10:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a14:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a18:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a1c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001a20:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a24:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a28:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a2c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a30:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a34:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a38:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a40:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001a50:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a54:	e008      	b.n	8001a68 <MadgwickAHRSupdate+0xc18>
 8001a56:	bf00      	nop
 8001a58:	20000218 	.word	0x20000218
 8001a5c:	20000004 	.word	0x20000004
 8001a60:	2000021c 	.word	0x2000021c
 8001a64:	20000214 	.word	0x20000214
 8001a68:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a70:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a78:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a84:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a88:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a90:	eeb0 0a67 	vmov.f32	s0, s15
 8001a94:	f000 fc16 	bl	80022c4 <invSqrt>
 8001a98:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001a9c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001aa0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001aac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001ab0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001abc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001ac0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001acc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001ad0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001adc:	4b61      	ldr	r3, [pc, #388]	; (8001c64 <MadgwickAHRSupdate+0xe14>)
 8001ade:	ed93 7a00 	vldr	s14, [r3]
 8001ae2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aea:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001af6:	4b5b      	ldr	r3, [pc, #364]	; (8001c64 <MadgwickAHRSupdate+0xe14>)
 8001af8:	ed93 7a00 	vldr	s14, [r3]
 8001afc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b04:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b0c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001b10:	4b54      	ldr	r3, [pc, #336]	; (8001c64 <MadgwickAHRSupdate+0xe14>)
 8001b12:	ed93 7a00 	vldr	s14, [r3]
 8001b16:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b26:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001b2a:	4b4e      	ldr	r3, [pc, #312]	; (8001c64 <MadgwickAHRSupdate+0xe14>)
 8001b2c:	ed93 7a00 	vldr	s14, [r3]
 8001b30:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b38:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b40:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001b44:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001b48:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001c68 <MadgwickAHRSupdate+0xe18>
 8001b4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b50:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <MadgwickAHRSupdate+0xe1c>)
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5a:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <MadgwickAHRSupdate+0xe1c>)
 8001b5c:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001b60:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001b64:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001c68 <MadgwickAHRSupdate+0xe18>
 8001b68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b6c:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <MadgwickAHRSupdate+0xe20>)
 8001b6e:	edd3 7a00 	vldr	s15, [r3]
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <MadgwickAHRSupdate+0xe20>)
 8001b78:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001b7c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001b80:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001c68 <MadgwickAHRSupdate+0xe18>
 8001b84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <MadgwickAHRSupdate+0xe24>)
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b92:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <MadgwickAHRSupdate+0xe24>)
 8001b94:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001b98:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001b9c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001c68 <MadgwickAHRSupdate+0xe18>
 8001ba0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ba4:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <MadgwickAHRSupdate+0xe28>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bae:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <MadgwickAHRSupdate+0xe28>)
 8001bb0:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <MadgwickAHRSupdate+0xe1c>)
 8001bb6:	ed93 7a00 	vldr	s14, [r3]
 8001bba:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <MadgwickAHRSupdate+0xe1c>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc4:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <MadgwickAHRSupdate+0xe20>)
 8001bc6:	edd3 6a00 	vldr	s13, [r3]
 8001bca:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <MadgwickAHRSupdate+0xe20>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd8:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <MadgwickAHRSupdate+0xe24>)
 8001bda:	edd3 6a00 	vldr	s13, [r3]
 8001bde:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <MadgwickAHRSupdate+0xe24>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bec:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <MadgwickAHRSupdate+0xe28>)
 8001bee:	edd3 6a00 	vldr	s13, [r3]
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <MadgwickAHRSupdate+0xe28>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c00:	eeb0 0a67 	vmov.f32	s0, s15
 8001c04:	f000 fb5e 	bl	80022c4 <invSqrt>
 8001c08:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <MadgwickAHRSupdate+0xe1c>)
 8001c0e:	ed93 7a00 	vldr	s14, [r3]
 8001c12:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <MadgwickAHRSupdate+0xe1c>)
 8001c1c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <MadgwickAHRSupdate+0xe20>)
 8001c22:	ed93 7a00 	vldr	s14, [r3]
 8001c26:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <MadgwickAHRSupdate+0xe20>)
 8001c30:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <MadgwickAHRSupdate+0xe24>)
 8001c36:	ed93 7a00 	vldr	s14, [r3]
 8001c3a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MadgwickAHRSupdate+0xe24>)
 8001c44:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <MadgwickAHRSupdate+0xe28>)
 8001c4a:	ed93 7a00 	vldr	s14, [r3]
 8001c4e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <MadgwickAHRSupdate+0xe28>)
 8001c58:	edc3 7a00 	vstr	s15, [r3]
}
 8001c5c:	37b8      	adds	r7, #184	; 0xb8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000000 	.word	0x20000000
 8001c68:	3ba3d70a 	.word	0x3ba3d70a
 8001c6c:	20000004 	.word	0x20000004
 8001c70:	20000214 	.word	0x20000214
 8001c74:	20000218 	.word	0x20000218
 8001c78:	2000021c 	.word	0x2000021c

08001c7c <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b09c      	sub	sp, #112	; 0x70
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	ed87 0a05 	vstr	s0, [r7, #20]
 8001c86:	edc7 0a04 	vstr	s1, [r7, #16]
 8001c8a:	ed87 1a03 	vstr	s2, [r7, #12]
 8001c8e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001c92:	ed87 2a01 	vstr	s4, [r7, #4]
 8001c96:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001c9a:	4bee      	ldr	r3, [pc, #952]	; (8002054 <MadgwickAHRSupdateIMU+0x3d8>)
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	eeb1 7a67 	vneg.f32	s14, s15
 8001ca4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cac:	4bea      	ldr	r3, [pc, #936]	; (8002058 <MadgwickAHRSupdateIMU+0x3dc>)
 8001cae:	edd3 6a00 	vldr	s13, [r3]
 8001cb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cbe:	4be7      	ldr	r3, [pc, #924]	; (800205c <MadgwickAHRSupdateIMU+0x3e0>)
 8001cc0:	edd3 6a00 	vldr	s13, [r3]
 8001cc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001cdc:	4be0      	ldr	r3, [pc, #896]	; (8002060 <MadgwickAHRSupdateIMU+0x3e4>)
 8001cde:	ed93 7a00 	vldr	s14, [r3]
 8001ce2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ce6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cea:	4bdb      	ldr	r3, [pc, #876]	; (8002058 <MadgwickAHRSupdateIMU+0x3dc>)
 8001cec:	edd3 6a00 	vldr	s13, [r3]
 8001cf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cfc:	4bd7      	ldr	r3, [pc, #860]	; (800205c <MadgwickAHRSupdateIMU+0x3e0>)
 8001cfe:	edd3 6a00 	vldr	s13, [r3]
 8001d02:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d16:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001d1a:	4bd1      	ldr	r3, [pc, #836]	; (8002060 <MadgwickAHRSupdateIMU+0x3e4>)
 8001d1c:	ed93 7a00 	vldr	s14, [r3]
 8001d20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d28:	4bca      	ldr	r3, [pc, #808]	; (8002054 <MadgwickAHRSupdateIMU+0x3d8>)
 8001d2a:	edd3 6a00 	vldr	s13, [r3]
 8001d2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d3a:	4bc8      	ldr	r3, [pc, #800]	; (800205c <MadgwickAHRSupdateIMU+0x3e0>)
 8001d3c:	edd3 6a00 	vldr	s13, [r3]
 8001d40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d54:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001d58:	4bc1      	ldr	r3, [pc, #772]	; (8002060 <MadgwickAHRSupdateIMU+0x3e4>)
 8001d5a:	ed93 7a00 	vldr	s14, [r3]
 8001d5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d66:	4bbb      	ldr	r3, [pc, #748]	; (8002054 <MadgwickAHRSupdateIMU+0x3d8>)
 8001d68:	edd3 6a00 	vldr	s13, [r3]
 8001d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d78:	4bb7      	ldr	r3, [pc, #732]	; (8002058 <MadgwickAHRSupdateIMU+0x3dc>)
 8001d7a:	edd3 6a00 	vldr	s13, [r3]
 8001d7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d92:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001d96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	d10e      	bne.n	8001dc2 <MadgwickAHRSupdateIMU+0x146>
 8001da4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001da8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db0:	d107      	bne.n	8001dc2 <MadgwickAHRSupdateIMU+0x146>
 8001db2:	edd7 7a00 	vldr	s15, [r7]
 8001db6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	f000 81e5 	beq.w	800218c <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001dc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dc6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dd6:	edd7 7a00 	vldr	s15, [r7]
 8001dda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de2:	eeb0 0a67 	vmov.f32	s0, s15
 8001de6:	f000 fa6d 	bl	80022c4 <invSqrt>
 8001dea:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8001dee:	ed97 7a02 	vldr	s14, [r7, #8]
 8001df2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dfa:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8001dfe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e02:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0a:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 8001e0e:	ed97 7a00 	vldr	s14, [r7]
 8001e12:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1a:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001e1e:	4b90      	ldr	r3, [pc, #576]	; (8002060 <MadgwickAHRSupdateIMU+0x3e4>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e28:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8001e2c:	4b89      	ldr	r3, [pc, #548]	; (8002054 <MadgwickAHRSupdateIMU+0x3d8>)
 8001e2e:	edd3 7a00 	vldr	s15, [r3]
 8001e32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e36:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 8001e3a:	4b87      	ldr	r3, [pc, #540]	; (8002058 <MadgwickAHRSupdateIMU+0x3dc>)
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e44:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8001e48:	4b84      	ldr	r3, [pc, #528]	; (800205c <MadgwickAHRSupdateIMU+0x3e0>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e52:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 8001e56:	4b82      	ldr	r3, [pc, #520]	; (8002060 <MadgwickAHRSupdateIMU+0x3e4>)
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001e60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e64:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8001e68:	4b7a      	ldr	r3, [pc, #488]	; (8002054 <MadgwickAHRSupdateIMU+0x3d8>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e76:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8001e7a:	4b77      	ldr	r3, [pc, #476]	; (8002058 <MadgwickAHRSupdateIMU+0x3dc>)
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001e84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e88:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8001e8c:	4b71      	ldr	r3, [pc, #452]	; (8002054 <MadgwickAHRSupdateIMU+0x3d8>)
 8001e8e:	edd3 7a00 	vldr	s15, [r3]
 8001e92:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8001e9e:	4b6e      	ldr	r3, [pc, #440]	; (8002058 <MadgwickAHRSupdateIMU+0x3dc>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eac:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8001eb0:	4b6b      	ldr	r3, [pc, #428]	; (8002060 <MadgwickAHRSupdateIMU+0x3e4>)
 8001eb2:	ed93 7a00 	vldr	s14, [r3]
 8001eb6:	4b6a      	ldr	r3, [pc, #424]	; (8002060 <MadgwickAHRSupdateIMU+0x3e4>)
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8001ec4:	4b63      	ldr	r3, [pc, #396]	; (8002054 <MadgwickAHRSupdateIMU+0x3d8>)
 8001ec6:	ed93 7a00 	vldr	s14, [r3]
 8001eca:	4b62      	ldr	r3, [pc, #392]	; (8002054 <MadgwickAHRSupdateIMU+0x3d8>)
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8001ed8:	4b5f      	ldr	r3, [pc, #380]	; (8002058 <MadgwickAHRSupdateIMU+0x3dc>)
 8001eda:	ed93 7a00 	vldr	s14, [r3]
 8001ede:	4b5e      	ldr	r3, [pc, #376]	; (8002058 <MadgwickAHRSupdateIMU+0x3dc>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8001eec:	4b5b      	ldr	r3, [pc, #364]	; (800205c <MadgwickAHRSupdateIMU+0x3e0>)
 8001eee:	ed93 7a00 	vldr	s14, [r3]
 8001ef2:	4b5a      	ldr	r3, [pc, #360]	; (800205c <MadgwickAHRSupdateIMU+0x3e0>)
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8001f00:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001f04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f0c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001f10:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f1c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001f20:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f2c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001f30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001f40:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001f44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001f50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f5c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f60:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001f64:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001f68:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <MadgwickAHRSupdateIMU+0x3d8>)
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f76:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001f7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f86:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f8e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001f92:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f9e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001fa2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001faa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fae:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001fb2:	edd7 7a00 	vldr	s15, [r7]
 8001fb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbe:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8001fc2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fc6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001fca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fce:	4b22      	ldr	r3, [pc, #136]	; (8002058 <MadgwickAHRSupdateIMU+0x3dc>)
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001fdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fe8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001fec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ff8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001ffc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002004:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002008:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800200c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002010:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002014:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800201c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002020:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002024:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800202c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002030:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002034:	edd7 7a00 	vldr	s15, [r7]
 8002038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002040:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002044:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002048:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800204c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002050:	e008      	b.n	8002064 <MadgwickAHRSupdateIMU+0x3e8>
 8002052:	bf00      	nop
 8002054:	20000214 	.word	0x20000214
 8002058:	20000218 	.word	0x20000218
 800205c:	2000021c 	.word	0x2000021c
 8002060:	20000004 	.word	0x20000004
 8002064:	4b91      	ldr	r3, [pc, #580]	; (80022ac <MadgwickAHRSupdateIMU+0x630>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800206e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002072:	edd7 7a02 	vldr	s15, [r7, #8]
 8002076:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800207a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800207e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002082:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002086:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800208a:	4b88      	ldr	r3, [pc, #544]	; (80022ac <MadgwickAHRSupdateIMU+0x630>)
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002094:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002098:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800209c:	edd7 7a01 	vldr	s15, [r7, #4]
 80020a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a8:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80020ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020b0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80020b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80020b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80020c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d8:	eeb0 0a67 	vmov.f32	s0, s15
 80020dc:	f000 f8f2 	bl	80022c4 <invSqrt>
 80020e0:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 80020e4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80020e8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80020ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 80020f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80020f8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80020fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002100:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8002104:	ed97 7a07 	vldr	s14, [r7, #28]
 8002108:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800210c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002110:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8002114:	ed97 7a06 	vldr	s14, [r7, #24]
 8002118:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800211c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002120:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002124:	4b62      	ldr	r3, [pc, #392]	; (80022b0 <MadgwickAHRSupdateIMU+0x634>)
 8002126:	ed93 7a00 	vldr	s14, [r3]
 800212a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800212e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002132:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800213a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 800213e:	4b5c      	ldr	r3, [pc, #368]	; (80022b0 <MadgwickAHRSupdateIMU+0x634>)
 8002140:	ed93 7a00 	vldr	s14, [r3]
 8002144:	edd7 7a08 	vldr	s15, [r7, #32]
 8002148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002154:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8002158:	4b55      	ldr	r3, [pc, #340]	; (80022b0 <MadgwickAHRSupdateIMU+0x634>)
 800215a:	ed93 7a00 	vldr	s14, [r3]
 800215e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002166:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800216a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800216e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 8002172:	4b4f      	ldr	r3, [pc, #316]	; (80022b0 <MadgwickAHRSupdateIMU+0x634>)
 8002174:	ed93 7a00 	vldr	s14, [r3]
 8002178:	edd7 7a06 	vldr	s15, [r7, #24]
 800217c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002180:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002188:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 800218c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002190:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80022b4 <MadgwickAHRSupdateIMU+0x638>
 8002194:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002198:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <MadgwickAHRSupdateIMU+0x63c>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a2:	4b45      	ldr	r3, [pc, #276]	; (80022b8 <MadgwickAHRSupdateIMU+0x63c>)
 80021a4:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80021a8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80021ac:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80022b4 <MadgwickAHRSupdateIMU+0x638>
 80021b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021b4:	4b41      	ldr	r3, [pc, #260]	; (80022bc <MadgwickAHRSupdateIMU+0x640>)
 80021b6:	edd3 7a00 	vldr	s15, [r3]
 80021ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021be:	4b3f      	ldr	r3, [pc, #252]	; (80022bc <MadgwickAHRSupdateIMU+0x640>)
 80021c0:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80021c4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80021c8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80022b4 <MadgwickAHRSupdateIMU+0x638>
 80021cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021d0:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <MadgwickAHRSupdateIMU+0x644>)
 80021d2:	edd3 7a00 	vldr	s15, [r3]
 80021d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021da:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <MadgwickAHRSupdateIMU+0x644>)
 80021dc:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 80021e0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80021e4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80022b4 <MadgwickAHRSupdateIMU+0x638>
 80021e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021ec:	4b2f      	ldr	r3, [pc, #188]	; (80022ac <MadgwickAHRSupdateIMU+0x630>)
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f6:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <MadgwickAHRSupdateIMU+0x630>)
 80021f8:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80021fc:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <MadgwickAHRSupdateIMU+0x63c>)
 80021fe:	ed93 7a00 	vldr	s14, [r3]
 8002202:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <MadgwickAHRSupdateIMU+0x63c>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	ee27 7a27 	vmul.f32	s14, s14, s15
 800220c:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <MadgwickAHRSupdateIMU+0x640>)
 800220e:	edd3 6a00 	vldr	s13, [r3]
 8002212:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <MadgwickAHRSupdateIMU+0x640>)
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002220:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <MadgwickAHRSupdateIMU+0x644>)
 8002222:	edd3 6a00 	vldr	s13, [r3]
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <MadgwickAHRSupdateIMU+0x644>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002230:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <MadgwickAHRSupdateIMU+0x630>)
 8002236:	edd3 6a00 	vldr	s13, [r3]
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <MadgwickAHRSupdateIMU+0x630>)
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002248:	eeb0 0a67 	vmov.f32	s0, s15
 800224c:	f000 f83a 	bl	80022c4 <invSqrt>
 8002250:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 8002254:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <MadgwickAHRSupdateIMU+0x63c>)
 8002256:	ed93 7a00 	vldr	s14, [r3]
 800225a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800225e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <MadgwickAHRSupdateIMU+0x63c>)
 8002264:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <MadgwickAHRSupdateIMU+0x640>)
 800226a:	ed93 7a00 	vldr	s14, [r3]
 800226e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <MadgwickAHRSupdateIMU+0x640>)
 8002278:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 800227c:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <MadgwickAHRSupdateIMU+0x644>)
 800227e:	ed93 7a00 	vldr	s14, [r3]
 8002282:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <MadgwickAHRSupdateIMU+0x644>)
 800228c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <MadgwickAHRSupdateIMU+0x630>)
 8002292:	ed93 7a00 	vldr	s14, [r3]
 8002296:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800229a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229e:	4b03      	ldr	r3, [pc, #12]	; (80022ac <MadgwickAHRSupdateIMU+0x630>)
 80022a0:	edc3 7a00 	vstr	s15, [r3]
}
 80022a4:	bf00      	nop
 80022a6:	3770      	adds	r7, #112	; 0x70
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	2000021c 	.word	0x2000021c
 80022b0:	20000000 	.word	0x20000000
 80022b4:	3ba3d70a 	.word	0x3ba3d70a
 80022b8:	20000004 	.word	0x20000004
 80022bc:	20000214 	.word	0x20000214
 80022c0:	20000218 	.word	0x20000218

080022c4 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80022ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80022d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022da:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80022e2:	f107 0310 	add.w	r3, r7, #16
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	105a      	asrs	r2, r3, #1
 80022ee:	4b12      	ldr	r3, [pc, #72]	; (8002338 <invSqrt+0x74>)
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80022fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002300:	edd7 7a05 	vldr	s15, [r7, #20]
 8002304:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002308:	edd7 7a04 	vldr	s15, [r7, #16]
 800230c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002310:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002318:	edd7 7a04 	vldr	s15, [r7, #16]
 800231c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002320:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	ee07 3a90 	vmov	s15, r3
}
 800232a:	eeb0 0a67 	vmov.f32	s0, s15
 800232e:	371c      	adds	r7, #28
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	5f3759df 	.word	0x5f3759df

0800233c <nRF24_CE_H>:

static inline void nRF24_CE_L() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
}

static inline void nRF24_CE_H() {
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8002340:	2201      	movs	r2, #1
 8002342:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002346:	4802      	ldr	r0, [pc, #8]	; (8002350 <nRF24_CE_H+0x14>)
 8002348:	f003 fe6e 	bl	8006028 <HAL_GPIO_WritePin>
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40020c00 	.word	0x40020c00

08002354 <nRF24SetChip>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void nRF24SetChip(){
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	nRF24_Init();
 8002358:	f001 fec3 	bl	80040e2 <nRF24_Init>

	nRF24_DisableAA(0xFF);
 800235c:	20ff      	movs	r0, #255	; 0xff
 800235e:	f002 f875 	bl	800444c <nRF24_DisableAA>
	nRF24_SetRFChannel(115);
 8002362:	2073      	movs	r0, #115	; 0x73
 8002364:	f001 ff99 	bl	800429a <nRF24_SetRFChannel>
	nRF24_SetDataRate(nRF24_DR_1Mbps);
 8002368:	2000      	movs	r0, #0
 800236a:	f001 ffff 	bl	800436c <nRF24_SetDataRate>
	nRF24_SetCRCScheme(nRF24_CRC_off);
 800236e:	2000      	movs	r0, #0
 8002370:	f001 ff72 	bl	8004258 <nRF24_SetCRCScheme>
	nRF24_SetAddrWidth(3);
 8002374:	2003      	movs	r0, #3
 8002376:	f001 ff9e 	bl	80042b6 <nRF24_SetAddrWidth>

	static const uint8_t nRF24_ADDR[] = { 0xE7, 0x1C, 0xE3 };
	nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for RX pipe #1
 800237a:	490b      	ldr	r1, [pc, #44]	; (80023a8 <nRF24SetChip+0x54>)
 800237c:	2001      	movs	r0, #1
 800237e:	f001 ffab 	bl	80042d8 <nRF24_SetAddr>
	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, payload_length); // Auto-ACK: disabled, payload length: 5 bytes
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <nRF24SetChip+0x58>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	2100      	movs	r1, #0
 800238c:	2001      	movs	r0, #1
 800238e:	f002 f809 	bl	80043a4 <nRF24_SetRXPipe>
	nRF24_SetOperationalMode(nRF24_MODE_RX);
 8002392:	2001      	movs	r0, #1
 8002394:	f001 ff3f 	bl	8004216 <nRF24_SetOperationalMode>
	nRF24_SetPowerMode(nRF24_PWR_UP);
 8002398:	2002      	movs	r0, #2
 800239a:	f001 ff1d 	bl	80041d8 <nRF24_SetPowerMode>
	nRF24_CE_H();
 800239e:	f7ff ffcd 	bl	800233c <nRF24_CE_H>
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	08012a7c 	.word	0x08012a7c
 80023ac:	20000008 	.word	0x20000008

080023b0 <inicilizirajCipe>:

void inicilizirajCipe(){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	__HAL_I2C_ENABLE(&hi2c1); //omogocimo I2C1 za komunikacijo z vgrajenimi cipi
 80023b4:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <inicilizirajCipe+0x80>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <inicilizirajCipe+0x80>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi1); //komunikacija gyro
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <inicilizirajCipe+0x84>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <inicilizirajCipe+0x84>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d2:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi2); //komunikacija z nRF24
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <inicilizirajCipe+0x88>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b17      	ldr	r3, [pc, #92]	; (8002438 <inicilizirajCipe+0x88>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e2:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi5); //rasbery pi
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <inicilizirajCipe+0x8c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b14      	ldr	r3, [pc, #80]	; (800243c <inicilizirajCipe+0x8c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f2:	601a      	str	r2, [r3, #0]
	HAL_Delay(50);
 80023f4:	2032      	movs	r0, #50	; 0x32
 80023f6:	f003 f805 	bl	8005404 <HAL_Delay>
	nRF24SetChip();
 80023fa:	f7ff ffab 	bl	8002354 <nRF24SetChip>
	nastaviPospeskometer();
 80023fe:	f002 f9cb 	bl	8004798 <nastaviPospeskometer>
	nastaviMagnetometer();
 8002402:	f002 f9f0 	bl	80047e6 <nastaviMagnetometer>
	nastaviGiroskop();
 8002406:	f002 fa06 	bl	8004816 <nastaviGiroskop>
	//prvic preberi podatke da se generirajo interupti
	spi1_beriRegistre(0x28, (uint8_t*)&Gyro, 6);
 800240a:	2206      	movs	r2, #6
 800240c:	490c      	ldr	r1, [pc, #48]	; (8002440 <inicilizirajCipe+0x90>)
 800240e:	2028      	movs	r0, #40	; 0x28
 8002410:	f002 f996 	bl	8004740 <spi1_beriRegistre>
	i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&Acc, 6);
 8002414:	2306      	movs	r3, #6
 8002416:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <inicilizirajCipe+0x94>)
 8002418:	2128      	movs	r1, #40	; 0x28
 800241a:	2019      	movs	r0, #25
 800241c:	f002 f8f8 	bl	8004610 <i2c1_beriRegistre>
	i2c1_beriRegistre(0x1e, 0x68,(uint8_t*)&Mag, 6);
 8002420:	2306      	movs	r3, #6
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <inicilizirajCipe+0x98>)
 8002424:	2168      	movs	r1, #104	; 0x68
 8002426:	201e      	movs	r0, #30
 8002428:	f002 f8f2 	bl	8004610 <i2c1_beriRegistre>
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	2000502c 	.word	0x2000502c
 8002434:	200055b0 	.word	0x200055b0
 8002438:	20004de8 	.word	0x20004de8
 800243c:	20004ed4 	.word	0x20004ed4
 8002440:	200056a8 	.word	0x200056a8
 8002444:	20005608 	.word	0x20005608
 8002448:	200052f4 	.word	0x200052f4

0800244c <normalize_v3f>:
  	    		b->presses++;
  	    	}
  	    }
  	}
}
float normalize_v3f(float* x, float* y, float* z){
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
	float norm = sqrt( (*x) * (*x) + (*y) * (*y) + (*z) * (*z) );
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	ed93 7a00 	vldr	s14, [r3]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	edd3 6a00 	vldr	s13, [r3]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	edd3 6a00 	vldr	s13, [r3]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	edd3 7a00 	vldr	s15, [r3]
 8002488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800248c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002490:	ee17 0a90 	vmov	r0, s15
 8002494:	f7fe f808 	bl	80004a8 <__aeabi_f2d>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	ec43 2b10 	vmov	d0, r2, r3
 80024a0:	f00f fce6 	bl	8011e70 <sqrt>
 80024a4:	ec53 2b10 	vmov	r2, r3, d0
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f7fe fb04 	bl	8000ab8 <__aeabi_d2f>
 80024b0:	4603      	mov	r3, r0
 80024b2:	617b      	str	r3, [r7, #20]
	*x /= norm;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	edd3 6a00 	vldr	s13, [r3]
 80024ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80024be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	edc3 7a00 	vstr	s15, [r3]
	*y /= norm;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	edd3 6a00 	vldr	s13, [r3]
 80024ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80024d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	edc3 7a00 	vstr	s15, [r3]
	*z /= norm;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	edd3 6a00 	vldr	s13, [r3]
 80024e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80024e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	edc3 7a00 	vstr	s15, [r3]
}
 80024f0:	bf00      	nop
 80024f2:	eeb0 0a67 	vmov.f32	s0, s15
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <zgladiMotor>:

int16_t zgladiMotor(enum motor m, int16_t pwm){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	460a      	mov	r2, r1
 8002506:	71fb      	strb	r3, [r7, #7]
 8002508:	4613      	mov	r3, r2
 800250a:	80bb      	strh	r3, [r7, #4]
	switch(m){
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d82e      	bhi.n	8002570 <zgladiMotor+0x74>
 8002512:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <zgladiMotor+0x1c>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	0800254d 	.word	0x0800254d
 800251c:	0800253b 	.word	0x0800253b
 8002520:	0800255f 	.word	0x0800255f
 8002524:	08002529 	.word	0x08002529
	case LF:
		return izracunajPovprecjeInt16(&M4,pwm,5);
 8002528:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800252c:	2205      	movs	r2, #5
 800252e:	4619      	mov	r1, r3
 8002530:	4811      	ldr	r0, [pc, #68]	; (8002578 <zgladiMotor+0x7c>)
 8002532:	f002 f9c3 	bl	80048bc <izracunajPovprecjeInt16>
 8002536:	4603      	mov	r3, r0
 8002538:	e01a      	b.n	8002570 <zgladiMotor+0x74>
	case RB:
		return izracunajPovprecjeInt16(&M2,pwm,5);
 800253a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800253e:	2205      	movs	r2, #5
 8002540:	4619      	mov	r1, r3
 8002542:	480e      	ldr	r0, [pc, #56]	; (800257c <zgladiMotor+0x80>)
 8002544:	f002 f9ba 	bl	80048bc <izracunajPovprecjeInt16>
 8002548:	4603      	mov	r3, r0
 800254a:	e011      	b.n	8002570 <zgladiMotor+0x74>
	case RF:
		return izracunajPovprecjeInt16(&M1,pwm,5);
 800254c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002550:	2205      	movs	r2, #5
 8002552:	4619      	mov	r1, r3
 8002554:	480a      	ldr	r0, [pc, #40]	; (8002580 <zgladiMotor+0x84>)
 8002556:	f002 f9b1 	bl	80048bc <izracunajPovprecjeInt16>
 800255a:	4603      	mov	r3, r0
 800255c:	e008      	b.n	8002570 <zgladiMotor+0x74>
	case LB:
		return izracunajPovprecjeInt16(&M3,pwm,5);
 800255e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002562:	2205      	movs	r2, #5
 8002564:	4619      	mov	r1, r3
 8002566:	4807      	ldr	r0, [pc, #28]	; (8002584 <zgladiMotor+0x88>)
 8002568:	f002 f9a8 	bl	80048bc <izracunajPovprecjeInt16>
 800256c:	4603      	mov	r3, r0
 800256e:	e7ff      	b.n	8002570 <zgladiMotor+0x74>
	}
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20004f2c 	.word	0x20004f2c
 800257c:	20005730 	.word	0x20005730
 8002580:	200056b0 	.word	0x200056b0
 8002584:	2000537c 	.word	0x2000537c

08002588 <speedControl>:

void speedControl(struct motorData* m, float deltaT){
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	ed87 0a00 	vstr	s0, [r7]
	//premakni motor z zeljeno hitrostjo
	//izracunaj hitrost z tekocim povprecjem
	float vel = (float)((m->poz - m->prevPoz)/deltaT)/1000;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025a6:	edd7 7a00 	vldr	s15, [r7]
 80025aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ae:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8002820 <speedControl+0x298>
 80025b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025b6:	edc7 7a03 	vstr	s15, [r7, #12]
	m->prevPoz = m->poz;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	605a      	str	r2, [r3, #4]
	m->sum =  m->sum + vel - m->vals[m->index]; //pristejemo trenutno vrednost in odstejemo zadnjo
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80025c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	3306      	adds	r3, #6
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	3304      	adds	r3, #4
 80025e0:	edd3 7a00 	vldr	s15, [r3]
 80025e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	m->vals[m->index] = vel; //na zadnjo zamenjamo z novo
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	3306      	adds	r3, #6
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	3304      	adds	r3, #4
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	601a      	str	r2, [r3, #0]
	m->index++;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002608:	3301      	adds	r3, #1
 800260a:	b2da      	uxtb	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	if(m->index > 9){m->index = 0;}
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002618:	2b09      	cmp	r3, #9
 800261a:	d903      	bls.n	8002624 <speedControl+0x9c>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	vel = m->sum/10; //izracunamo povprecje
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800262a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800262e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002632:	edc7 7a03 	vstr	s15, [r7, #12]

	if(m->targetVel < 0.05 && m->targetVel > -0.05){
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd ff34 	bl	80004a8 <__aeabi_f2d>
 8002640:	a373      	add	r3, pc, #460	; (adr r3, 8002810 <speedControl+0x288>)
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	f7fe f9f9 	bl	8000a3c <__aeabi_dcmplt>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d014      	beq.n	800267a <speedControl+0xf2>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fd ff27 	bl	80004a8 <__aeabi_f2d>
 800265a:	a36f      	add	r3, pc, #444	; (adr r3, 8002818 <speedControl+0x290>)
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	f7fe fa0a 	bl	8000a78 <__aeabi_dcmpgt>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <speedControl+0xf2>
		m->targetVel = 0;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
		m->integralError = 0;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
	}

	if(PID_CONTROL == 1){
		m->error = (m->targetVel) - vel;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002680:	edd7 7a03 	vldr	s15, [r7, #12]
 8002684:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	edc3 7a04 	vstr	s15, [r3, #16]
		if(m->error > PID_P_LIMIT){m->error=PID_P_LIMIT;}
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	edd3 7a04 	vldr	s15, [r3, #16]
 8002694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800269c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a0:	dd03      	ble.n	80026aa <speedControl+0x122>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026a8:	611a      	str	r2, [r3, #16]
		if(m->error < -PID_P_LIMIT){m->error=-PID_P_LIMIT;}
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80026b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80026b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026bc:	d502      	bpl.n	80026c4 <speedControl+0x13c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a58      	ldr	r2, [pc, #352]	; (8002824 <speedControl+0x29c>)
 80026c2:	611a      	str	r2, [r3, #16]

		m->integralError = m->integralError + m->error;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80026d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	edc3 7a06 	vstr	s15, [r3, #24]
		if(m->integralError > PID_I_LIMIT){m->integralError = PID_I_LIMIT;}
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80026e0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002828 <speedControl+0x2a0>
 80026e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ec:	dd02      	ble.n	80026f4 <speedControl+0x16c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4e      	ldr	r2, [pc, #312]	; (800282c <speedControl+0x2a4>)
 80026f2:	619a      	str	r2, [r3, #24]
		if(m->integralError < -PID_I_LIMIT){m->integralError = -PID_I_LIMIT;}
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80026fa:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002830 <speedControl+0x2a8>
 80026fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002706:	d502      	bpl.n	800270e <speedControl+0x186>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a4a      	ldr	r2, [pc, #296]	; (8002834 <speedControl+0x2ac>)
 800270c:	619a      	str	r2, [r3, #24]

		float deltaE = 0.0f;
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
		if((m->error - m->prevError)>0.01f && (m->error - m->prevError)<-0.01f){deltaE=((m->error - m->prevError)/deltaT);}
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	ed93 7a04 	vldr	s14, [r3, #16]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002724:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002838 <speedControl+0x2b0>
 8002728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800272c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002730:	dd1c      	ble.n	800276c <speedControl+0x1e4>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	ed93 7a04 	vldr	s14, [r3, #16]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	edd3 7a05 	vldr	s15, [r3, #20]
 800273e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002742:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800283c <speedControl+0x2b4>
 8002746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274e:	d50d      	bpl.n	800276c <speedControl+0x1e4>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	ed93 7a04 	vldr	s14, [r3, #16]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	edd3 7a05 	vldr	s15, [r3, #20]
 800275c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002760:	ed97 7a00 	vldr	s14, [r7]
 8002764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002768:	edc7 7a05 	vstr	s15, [r7, #20]
		m->prevError = m->error;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	615a      	str	r2, [r3, #20]

		float power = PID_P*m->error + PID_I*m->integralError + PID_D*deltaE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	edd3 7a04 	vldr	s15, [r3, #16]
 800277a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002840 <speedControl+0x2b8>
 800277e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	edd3 7a06 	vldr	s15, [r3, #24]
 8002788:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002844 <speedControl+0x2bc>
 800278c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002790:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002794:	edd7 7a05 	vldr	s15, [r7, #20]
 8002798:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002848 <speedControl+0x2c0>
 800279c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a4:	edc7 7a04 	vstr	s15, [r7, #16]
		if(power > PID_LIMIT){power = PID_LIMIT;}
 80027a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80027ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b8:	dd02      	ble.n	80027c0 <speedControl+0x238>
 80027ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80027be:	613b      	str	r3, [r7, #16]
		if(power < -PID_LIMIT){power = -PID_LIMIT;}
 80027c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80027c4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80027c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d0:	d501      	bpl.n	80027d6 <speedControl+0x24e>
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <speedControl+0x29c>)
 80027d4:	613b      	str	r3, [r7, #16]
		nastaviMotor(m->num,zgladiMotor(m->num,scalePwm(power)));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	7a1c      	ldrb	r4, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7a1b      	ldrb	r3, [r3, #8]
 80027de:	edd7 7a04 	vldr	s15, [r7, #16]
 80027e2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002820 <speedControl+0x298>
 80027e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ee:	ee17 2a90 	vmov	r2, s15
 80027f2:	b212      	sxth	r2, r2
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fe80 	bl	80024fc <zgladiMotor>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4619      	mov	r1, r3
 8002800:	4620      	mov	r0, r4
 8002802:	f002 f89f 	bl	8004944 <nastaviMotor>
	}
	else{
		int Pwm = zgladiMotor(m->num,scalePwm(m->targetVel));
		nastaviMotor(m->num,Pwm);
	}
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	bd90      	pop	{r4, r7, pc}
 800280e:	bf00      	nop
 8002810:	9999999a 	.word	0x9999999a
 8002814:	3fa99999 	.word	0x3fa99999
 8002818:	9999999a 	.word	0x9999999a
 800281c:	bfa99999 	.word	0xbfa99999
 8002820:	447a0000 	.word	0x447a0000
 8002824:	bf800000 	.word	0xbf800000
 8002828:	42480000 	.word	0x42480000
 800282c:	42480000 	.word	0x42480000
 8002830:	c2480000 	.word	0xc2480000
 8002834:	c2480000 	.word	0xc2480000
 8002838:	3c23d70a 	.word	0x3c23d70a
 800283c:	bc23d70a 	.word	0xbc23d70a
 8002840:	3f4ccccd 	.word	0x3f4ccccd
 8002844:	3ca3d70a 	.word	0x3ca3d70a
 8002848:	3dcccccd 	.word	0x3dcccccd

0800284c <HAL_GPIO_EXTI_Callback>:
//void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	80fb      	strh	r3, [r7, #6]
	//kateri pin je poklical EXIT event
	if(GPIO_Pin == GPIO_PIN_14){
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800285c:	d103      	bne.n	8002866 <HAL_GPIO_EXTI_Callback+0x1a>
		nRF24_interupt = 1; //spremenil se je status register pejt pogledat kaj se je zgodilo
 800285e:	4b44      	ldr	r3, [pc, #272]	; (8002970 <HAL_GPIO_EXTI_Callback+0x124>)
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
		//data ready megnetometer
		i2c1_beriRegistre(0x1e, 0x68,(uint8_t*)&Mag, 6);
		MagReady = 1; //100Hz
	}

}
 8002864:	e07f      	b.n	8002966 <HAL_GPIO_EXTI_Callback+0x11a>
	else if(GPIO_Pin == GPIO_PIN_15){
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800286c:	d112      	bne.n	8002894 <HAL_GPIO_EXTI_Callback+0x48>
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){motorLF.poz--;}
 800286e:	2104      	movs	r1, #4
 8002870:	4840      	ldr	r0, [pc, #256]	; (8002974 <HAL_GPIO_EXTI_Callback+0x128>)
 8002872:	f003 fbc1 	bl	8005ff8 <HAL_GPIO_ReadPin>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_GPIO_EXTI_Callback+0x3c>
 800287c:	4b3e      	ldr	r3, [pc, #248]	; (8002978 <HAL_GPIO_EXTI_Callback+0x12c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	3b01      	subs	r3, #1
 8002882:	4a3d      	ldr	r2, [pc, #244]	; (8002978 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002884:	6013      	str	r3, [r2, #0]
}
 8002886:	e06e      	b.n	8002966 <HAL_GPIO_EXTI_Callback+0x11a>
		else{motorLF.poz++;}
 8002888:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <HAL_GPIO_EXTI_Callback+0x12c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	4a3a      	ldr	r2, [pc, #232]	; (8002978 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002890:	6013      	str	r3, [r2, #0]
}
 8002892:	e068      	b.n	8002966 <HAL_GPIO_EXTI_Callback+0x11a>
	else if(GPIO_Pin == GPIO_PIN_7){
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	2b80      	cmp	r3, #128	; 0x80
 8002898:	d112      	bne.n	80028c0 <HAL_GPIO_EXTI_Callback+0x74>
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_5)){motorRF.poz--;}
 800289a:	2120      	movs	r1, #32
 800289c:	4835      	ldr	r0, [pc, #212]	; (8002974 <HAL_GPIO_EXTI_Callback+0x128>)
 800289e:	f003 fbab 	bl	8005ff8 <HAL_GPIO_ReadPin>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_GPIO_EXTI_Callback+0x68>
 80028a8:	4b34      	ldr	r3, [pc, #208]	; (800297c <HAL_GPIO_EXTI_Callback+0x130>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	4a33      	ldr	r2, [pc, #204]	; (800297c <HAL_GPIO_EXTI_Callback+0x130>)
 80028b0:	6013      	str	r3, [r2, #0]
}
 80028b2:	e058      	b.n	8002966 <HAL_GPIO_EXTI_Callback+0x11a>
		else{motorRF.poz++;}
 80028b4:	4b31      	ldr	r3, [pc, #196]	; (800297c <HAL_GPIO_EXTI_Callback+0x130>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	4a30      	ldr	r2, [pc, #192]	; (800297c <HAL_GPIO_EXTI_Callback+0x130>)
 80028bc:	6013      	str	r3, [r2, #0]
}
 80028be:	e052      	b.n	8002966 <HAL_GPIO_EXTI_Callback+0x11a>
	else if(GPIO_Pin == GPIO_PIN_3){
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d113      	bne.n	80028ee <HAL_GPIO_EXTI_Callback+0xa2>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11)){motorRB.poz--;}
 80028c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028ca:	482d      	ldr	r0, [pc, #180]	; (8002980 <HAL_GPIO_EXTI_Callback+0x134>)
 80028cc:	f003 fb94 	bl	8005ff8 <HAL_GPIO_ReadPin>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <HAL_GPIO_EXTI_Callback+0x96>
 80028d6:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <HAL_GPIO_EXTI_Callback+0x138>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	3b01      	subs	r3, #1
 80028dc:	4a29      	ldr	r2, [pc, #164]	; (8002984 <HAL_GPIO_EXTI_Callback+0x138>)
 80028de:	6013      	str	r3, [r2, #0]
}
 80028e0:	e041      	b.n	8002966 <HAL_GPIO_EXTI_Callback+0x11a>
		else{motorRB.poz++;}
 80028e2:	4b28      	ldr	r3, [pc, #160]	; (8002984 <HAL_GPIO_EXTI_Callback+0x138>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	3301      	adds	r3, #1
 80028e8:	4a26      	ldr	r2, [pc, #152]	; (8002984 <HAL_GPIO_EXTI_Callback+0x138>)
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	e03b      	b.n	8002966 <HAL_GPIO_EXTI_Callback+0x11a>
	else if(GPIO_Pin == GPIO_PIN_8){
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f4:	d112      	bne.n	800291c <HAL_GPIO_EXTI_Callback+0xd0>
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_6)){motorLB.poz--;}
 80028f6:	2140      	movs	r1, #64	; 0x40
 80028f8:	481e      	ldr	r0, [pc, #120]	; (8002974 <HAL_GPIO_EXTI_Callback+0x128>)
 80028fa:	f003 fb7d 	bl	8005ff8 <HAL_GPIO_ReadPin>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_GPIO_EXTI_Callback+0xc4>
 8002904:	4b20      	ldr	r3, [pc, #128]	; (8002988 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3b01      	subs	r3, #1
 800290a:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <HAL_GPIO_EXTI_Callback+0x13c>)
 800290c:	6013      	str	r3, [r2, #0]
}
 800290e:	e02a      	b.n	8002966 <HAL_GPIO_EXTI_Callback+0x11a>
		else{motorLB.poz++;}
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	3301      	adds	r3, #1
 8002916:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002918:	6013      	str	r3, [r2, #0]
}
 800291a:	e024      	b.n	8002966 <HAL_GPIO_EXTI_Callback+0x11a>
	else if(GPIO_Pin == GPIO_PIN_1){ //vsakic ko dobis interupt posodobi podatke
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d108      	bne.n	8002934 <HAL_GPIO_EXTI_Callback+0xe8>
		spi1_beriRegistre(0x28, (uint8_t*)&Gyro, 6);
 8002922:	2206      	movs	r2, #6
 8002924:	4919      	ldr	r1, [pc, #100]	; (800298c <HAL_GPIO_EXTI_Callback+0x140>)
 8002926:	2028      	movs	r0, #40	; 0x28
 8002928:	f001 ff0a 	bl	8004740 <spi1_beriRegistre>
		GyroReady = 1; //zastavica da so na voljo novi podatki 200Hz
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <HAL_GPIO_EXTI_Callback+0x144>)
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
}
 8002932:	e018      	b.n	8002966 <HAL_GPIO_EXTI_Callback+0x11a>
	else if(GPIO_Pin == GPIO_PIN_4){
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	2b10      	cmp	r3, #16
 8002938:	d109      	bne.n	800294e <HAL_GPIO_EXTI_Callback+0x102>
		i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&Acc, 6);
 800293a:	2306      	movs	r3, #6
 800293c:	4a15      	ldr	r2, [pc, #84]	; (8002994 <HAL_GPIO_EXTI_Callback+0x148>)
 800293e:	2128      	movs	r1, #40	; 0x28
 8002940:	2019      	movs	r0, #25
 8002942:	f001 fe65 	bl	8004610 <i2c1_beriRegistre>
		AccReady = 1; //200Hz
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
}
 800294c:	e00b      	b.n	8002966 <HAL_GPIO_EXTI_Callback+0x11a>
	else if(GPIO_Pin == GPIO_PIN_2){
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	2b04      	cmp	r3, #4
 8002952:	d108      	bne.n	8002966 <HAL_GPIO_EXTI_Callback+0x11a>
		i2c1_beriRegistre(0x1e, 0x68,(uint8_t*)&Mag, 6);
 8002954:	2306      	movs	r3, #6
 8002956:	4a11      	ldr	r2, [pc, #68]	; (800299c <HAL_GPIO_EXTI_Callback+0x150>)
 8002958:	2168      	movs	r1, #104	; 0x68
 800295a:	201e      	movs	r0, #30
 800295c:	f001 fe58 	bl	8004610 <i2c1_beriRegistre>
		MagReady = 1; //100Hz
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x154>)
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000220 	.word	0x20000220
 8002974:	40020c00 	.word	0x40020c00
 8002978:	20005464 	.word	0x20005464
 800297c:	200058e4 	.word	0x200058e4
 8002980:	40020800 	.word	0x40020800
 8002984:	200057b0 	.word	0x200057b0
 8002988:	20005224 	.word	0x20005224
 800298c:	200056a8 	.word	0x200056a8
 8002990:	20000222 	.word	0x20000222
 8002994:	20005608 	.word	0x20005608
 8002998:	20000223 	.word	0x20000223
 800299c:	200052f4 	.word	0x200052f4
 80029a0:	20000224 	.word	0x20000224

080029a4 <getDrift>:
void getDrift(){
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80029aa:	2201      	movs	r2, #1
 80029ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029b0:	4845      	ldr	r0, [pc, #276]	; (8002ac8 <getDrift+0x124>)
 80029b2:	f003 fb39 	bl	8006028 <HAL_GPIO_WritePin>
	int32_t sumGyrox = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
	int32_t sumGyroy = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61bb      	str	r3, [r7, #24]
	int32_t sumGyroz = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
	int32_t sumAccx = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
	int32_t sumAccy = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
	int32_t sumAccz = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
	for(int i=0; i < 400; i++){
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	e02f      	b.n	8002a34 <getDrift+0x90>
		sumGyrox += Gyro.x;
 80029d4:	4b3d      	ldr	r3, [pc, #244]	; (8002acc <getDrift+0x128>)
 80029d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029da:	461a      	mov	r2, r3
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	4413      	add	r3, r2
 80029e0:	61fb      	str	r3, [r7, #28]
		sumGyroy += Gyro.y;
 80029e2:	4b3a      	ldr	r3, [pc, #232]	; (8002acc <getDrift+0x128>)
 80029e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029e8:	461a      	mov	r2, r3
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4413      	add	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
		sumGyroz += Gyro.z;
 80029f0:	4b36      	ldr	r3, [pc, #216]	; (8002acc <getDrift+0x128>)
 80029f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029f6:	461a      	mov	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	4413      	add	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]
		sumAccx += Acc.x;
 80029fe:	4b34      	ldr	r3, [pc, #208]	; (8002ad0 <getDrift+0x12c>)
 8002a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a04:	461a      	mov	r2, r3
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4413      	add	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
		sumAccy += Acc.y;
 8002a0c:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <getDrift+0x12c>)
 8002a0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4413      	add	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
		sumAccz += Acc.z;
 8002a1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <getDrift+0x12c>)
 8002a1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a20:	461a      	mov	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4413      	add	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
		HAL_Delay(6);
 8002a28:	2006      	movs	r0, #6
 8002a2a:	f002 fceb 	bl	8005404 <HAL_Delay>
	for(int i=0; i < 400; i++){
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3301      	adds	r3, #1
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002a3a:	dbcb      	blt.n	80029d4 <getDrift+0x30>
	}
	E.Accx = sumAccx/400; //vektor gravitacije
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4a25      	ldr	r2, [pc, #148]	; (8002ad4 <getDrift+0x130>)
 8002a40:	fb82 1203 	smull	r1, r2, r2, r3
 8002a44:	11d2      	asrs	r2, r2, #7
 8002a46:	17db      	asrs	r3, r3, #31
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	b21a      	sxth	r2, r3
 8002a4c:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <getDrift+0x134>)
 8002a4e:	841a      	strh	r2, [r3, #32]
	E.Accy = sumAccy/400;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4a20      	ldr	r2, [pc, #128]	; (8002ad4 <getDrift+0x130>)
 8002a54:	fb82 1203 	smull	r1, r2, r2, r3
 8002a58:	11d2      	asrs	r2, r2, #7
 8002a5a:	17db      	asrs	r3, r3, #31
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	b21a      	sxth	r2, r3
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <getDrift+0x134>)
 8002a62:	845a      	strh	r2, [r3, #34]	; 0x22
	E.Accz = sumAccz/400;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <getDrift+0x130>)
 8002a68:	fb82 1203 	smull	r1, r2, r2, r3
 8002a6c:	11d2      	asrs	r2, r2, #7
 8002a6e:	17db      	asrs	r3, r3, #31
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	b21a      	sxth	r2, r3
 8002a74:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <getDrift+0x134>)
 8002a76:	849a      	strh	r2, [r3, #36]	; 0x24
	E.Gyrox = sumGyrox/400;
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4a16      	ldr	r2, [pc, #88]	; (8002ad4 <getDrift+0x130>)
 8002a7c:	fb82 1203 	smull	r1, r2, r2, r3
 8002a80:	11d2      	asrs	r2, r2, #7
 8002a82:	17db      	asrs	r3, r3, #31
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	b21a      	sxth	r2, r3
 8002a88:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <getDrift+0x134>)
 8002a8a:	801a      	strh	r2, [r3, #0]
	E.Gyroy = sumGyroy/400;
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	4a11      	ldr	r2, [pc, #68]	; (8002ad4 <getDrift+0x130>)
 8002a90:	fb82 1203 	smull	r1, r2, r2, r3
 8002a94:	11d2      	asrs	r2, r2, #7
 8002a96:	17db      	asrs	r3, r3, #31
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	b21a      	sxth	r2, r3
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <getDrift+0x134>)
 8002a9e:	805a      	strh	r2, [r3, #2]
	E.Gyroz = sumGyroz/400;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	4a0c      	ldr	r2, [pc, #48]	; (8002ad4 <getDrift+0x130>)
 8002aa4:	fb82 1203 	smull	r1, r2, r2, r3
 8002aa8:	11d2      	asrs	r2, r2, #7
 8002aaa:	17db      	asrs	r3, r3, #31
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	b21a      	sxth	r2, r3
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <getDrift+0x134>)
 8002ab2:	809a      	strh	r2, [r3, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002aba:	4803      	ldr	r0, [pc, #12]	; (8002ac8 <getDrift+0x124>)
 8002abc:	f003 fab4 	bl	8006028 <HAL_GPIO_WritePin>
}
 8002ac0:	bf00      	nop
 8002ac2:	3720      	adds	r7, #32
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40020c00 	.word	0x40020c00
 8002acc:	200056a8 	.word	0x200056a8
 8002ad0:	20005608 	.word	0x20005608
 8002ad4:	51eb851f 	.word	0x51eb851f
 8002ad8:	20005618 	.word	0x20005618

08002adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ae0:	f002 fc4e 	bl	8005380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ae4:	f000 f902 	bl	8002cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ae8:	f000 fbda 	bl	80032a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002aec:	f000 fbb0 	bl	8003250 <MX_DMA_Init>
  MX_I2C1_Init();
 8002af0:	f000 f964 	bl	8002dbc <MX_I2C1_Init>
  MX_SPI1_Init();
 8002af4:	f000 f9be 	bl	8002e74 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002af8:	f000 fa5a 	bl	8002fb0 <MX_TIM2_Init>
  MX_SPI2_Init();
 8002afc:	f000 f9f0 	bl	8002ee0 <MX_SPI2_Init>
  MX_I2S3_Init();
 8002b00:	f000 f98a 	bl	8002e18 <MX_I2S3_Init>
  MX_TIM5_Init();
 8002b04:	f000 fb56 	bl	80031b4 <MX_TIM5_Init>
  MX_TIM3_Init();
 8002b08:	f000 fade 	bl	80030c8 <MX_TIM3_Init>
  MX_SPI5_Init();
 8002b0c:	f000 fa1e 	bl	8002f4c <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  //!--ce generator kode inicilizira DMA zadnje pomakni funkcijo visje da se incilizira prvo

  //iniciliziraj komunikacijo in senzorje
  HAL_Delay(100);
 8002b10:	2064      	movs	r0, #100	; 0x64
 8002b12:	f002 fc77 	bl	8005404 <HAL_Delay>
  inicilizirajCipe();
 8002b16:	f7ff fc4b 	bl	80023b0 <inicilizirajCipe>
  nRF24_status = nRF24_Check();
 8002b1a:	f001 fb2f 	bl	800417c <nRF24_Check>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <main+0x1ac>)
 8002b24:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,nRF24_status); //ce dela prizgi ledico
 8002b26:	4b58      	ldr	r3, [pc, #352]	; (8002c88 <main+0x1ac>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b32:	4856      	ldr	r0, [pc, #344]	; (8002c8c <main+0x1b0>)
 8002b34:	f003 fa78 	bl	8006028 <HAL_GPIO_WritePin>

  B1.flags = 0;
 8002b38:	4b55      	ldr	r3, [pc, #340]	; (8002c90 <main+0x1b4>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
  B1.presedConf = 0;
 8002b3e:	4b54      	ldr	r3, [pc, #336]	; (8002c90 <main+0x1b4>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	605a      	str	r2, [r3, #4]
  B1.relesedConf = 0;
 8002b44:	4b52      	ldr	r3, [pc, #328]	; (8002c90 <main+0x1b4>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
  B1.port = GPIOA;
 8002b4a:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <main+0x1b4>)
 8002b4c:	4a51      	ldr	r2, [pc, #324]	; (8002c94 <main+0x1b8>)
 8002b4e:	60da      	str	r2, [r3, #12]
  B1.pin = GPIO_PIN_0;
 8002b50:	4b4f      	ldr	r3, [pc, #316]	; (8002c90 <main+0x1b4>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	821a      	strh	r2, [r3, #16]
  B1.debaunceCycles = 10;
 8002b56:	4b4e      	ldr	r3, [pc, #312]	; (8002c90 <main+0x1b4>)
 8002b58:	220a      	movs	r2, #10
 8002b5a:	825a      	strh	r2, [r3, #18]
  B1.presses = 0;
 8002b5c:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <main+0x1b4>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	751a      	strb	r2, [r3, #20]

  HAL_TIM_Base_Start(&htim2);
 8002b62:	484d      	ldr	r0, [pc, #308]	; (8002c98 <main+0x1bc>)
 8002b64:	f007 fe80 	bl	800a868 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8002b68:	484c      	ldr	r0, [pc, #304]	; (8002c9c <main+0x1c0>)
 8002b6a:	f007 fe7d 	bl	800a868 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8002b6e:	484c      	ldr	r0, [pc, #304]	; (8002ca0 <main+0x1c4>)
 8002b70:	f007 fe7a 	bl	800a868 <HAL_TIM_Base_Start>
  // zazenemo PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002b74:	210c      	movs	r1, #12
 8002b76:	4849      	ldr	r0, [pc, #292]	; (8002c9c <main+0x1c0>)
 8002b78:	f007 ff8c 	bl	800aa94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002b7c:	2104      	movs	r1, #4
 8002b7e:	4846      	ldr	r0, [pc, #280]	; (8002c98 <main+0x1bc>)
 8002b80:	f007 ff88 	bl	800aa94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002b84:	2108      	movs	r1, #8
 8002b86:	4844      	ldr	r0, [pc, #272]	; (8002c98 <main+0x1bc>)
 8002b88:	f007 ff84 	bl	800aa94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002b8c:	210c      	movs	r1, #12
 8002b8e:	4842      	ldr	r0, [pc, #264]	; (8002c98 <main+0x1bc>)
 8002b90:	f007 ff80 	bl	800aa94 <HAL_TIM_PWM_Start>

  robotPay.x1 = 0; //nastavimo na srednje vrednosti
 8002b94:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <main+0x1c8>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
  robotPay.x2 = 0;
 8002b9a:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <main+0x1c8>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	709a      	strb	r2, [r3, #2]
  robotPay.y1 = 0;
 8002ba0:	4b40      	ldr	r3, [pc, #256]	; (8002ca4 <main+0x1c8>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	705a      	strb	r2, [r3, #1]
  robotPay.y2 = 0;
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	; (8002ca4 <main+0x1c8>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	70da      	strb	r2, [r3, #3]
  robotPay.speed = 100;
 8002bac:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <main+0x1c8>)
 8002bae:	2264      	movs	r2, #100	; 0x64
 8002bb0:	711a      	strb	r2, [r3, #4]

  nastaviMotor(RF,0);
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f001 fec5 	bl	8004944 <nastaviMotor>
  nastaviMotor(LF,0);
 8002bba:	2100      	movs	r1, #0
 8002bbc:	2003      	movs	r0, #3
 8002bbe:	f001 fec1 	bl	8004944 <nastaviMotor>
  nastaviMotor(LB,0);
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	2002      	movs	r0, #2
 8002bc6:	f001 febd 	bl	8004944 <nastaviMotor>
  nastaviMotor(RB,0);
 8002bca:	2100      	movs	r1, #0
 8002bcc:	2001      	movs	r0, #1
 8002bce:	f001 feb9 	bl	8004944 <nastaviMotor>


  motorLF.num = LF;
 8002bd2:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <main+0x1cc>)
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	721a      	strb	r2, [r3, #8]
  motorLB.num = LB;
 8002bd8:	4b34      	ldr	r3, [pc, #208]	; (8002cac <main+0x1d0>)
 8002bda:	2202      	movs	r2, #2
 8002bdc:	721a      	strb	r2, [r3, #8]
  motorRB.num = RB;
 8002bde:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <main+0x1d4>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	721a      	strb	r2, [r3, #8]
  motorRF.num = RF;
 8002be4:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <main+0x1d8>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	721a      	strb	r2, [r3, #8]

  E.Accx = 0;
 8002bea:	4b33      	ldr	r3, [pc, #204]	; (8002cb8 <main+0x1dc>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	841a      	strh	r2, [r3, #32]
  E.Accy = 0;
 8002bf0:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <main+0x1dc>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	845a      	strh	r2, [r3, #34]	; 0x22
  E.Accz = 0;
 8002bf6:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <main+0x1dc>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	849a      	strh	r2, [r3, #36]	; 0x24
  E.Gyrox = 0;
 8002bfc:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <main+0x1dc>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	801a      	strh	r2, [r3, #0]
  E.Gyroy = 0;
 8002c02:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <main+0x1dc>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	805a      	strh	r2, [r3, #2]
  E.Gyroz = 0;
 8002c08:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <main+0x1dc>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	809a      	strh	r2, [r3, #4]
  E.HardIronMagx = 0;
 8002c0e:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <main+0x1dc>)
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  E.HardIronMagy = 0;
 8002c16:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <main+0x1dc>)
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	60da      	str	r2, [r3, #12]
  E.HardIronMagz = 0;
 8002c1e:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <main+0x1dc>)
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]
  E.SoftIronMagx = 1;
 8002c26:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <main+0x1dc>)
 8002c28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c2c:	615a      	str	r2, [r3, #20]
  E.SoftIronMagy = 1;
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <main+0x1dc>)
 8002c30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c34:	619a      	str	r2, [r3, #24]
  E.SoftIronMagz = 1;
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <main+0x1dc>)
 8002c38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c3c:	61da      	str	r2, [r3, #28]

  getDrift();
 8002c3e:	f7ff feb1 	bl	80029a4 <getDrift>

  //HAL_SPI_Receive_DMA(&hspi5, (uint8_t*)&rasberyReq, rasberyReqSize);
  //HAL_SPI_TransmitReceive_DMA(&hspi5, SpiTxData, SpiRxData, SPI_BUFFER_SIZE);
  HAL_SPI_TransmitReceive_DMA(&hspi5, SpiTxData, SpiRxData, 2); //beremo po dva
 8002c42:	2302      	movs	r3, #2
 8002c44:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <main+0x1e0>)
 8002c46:	491e      	ldr	r1, [pc, #120]	; (8002cc0 <main+0x1e4>)
 8002c48:	481e      	ldr	r0, [pc, #120]	; (8002cc4 <main+0x1e8>)
 8002c4a:	f007 fa8b 	bl	800a164 <HAL_SPI_TransmitReceive_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002c4e:	f00b fe27 	bl	800e8a0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CalculatePoz */
  CalculatePozHandle = osThreadNew(StartCalculatingPoz, NULL, &CalculatePoz_attributes);
 8002c52:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <main+0x1ec>)
 8002c54:	2100      	movs	r1, #0
 8002c56:	481d      	ldr	r0, [pc, #116]	; (8002ccc <main+0x1f0>)
 8002c58:	f00b fe6c 	bl	800e934 <osThreadNew>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <main+0x1f4>)
 8002c60:	6013      	str	r3, [r2, #0]

  /* creation of ReciveCommandsN */
  ReciveCommandsNHandle = osThreadNew(StartRecivingCommandsNRF24, NULL, &ReciveCommandsN_attributes);
 8002c62:	4a1c      	ldr	r2, [pc, #112]	; (8002cd4 <main+0x1f8>)
 8002c64:	2100      	movs	r1, #0
 8002c66:	481c      	ldr	r0, [pc, #112]	; (8002cd8 <main+0x1fc>)
 8002c68:	f00b fe64 	bl	800e934 <osThreadNew>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <main+0x200>)
 8002c70:	6013      	str	r3, [r2, #0]

  /* creation of MotorControl */
  MotorControlHandle = osThreadNew(StartMotorControl, NULL, &MotorControl_attributes);
 8002c72:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <main+0x204>)
 8002c74:	2100      	movs	r1, #0
 8002c76:	481b      	ldr	r0, [pc, #108]	; (8002ce4 <main+0x208>)
 8002c78:	f00b fe5c 	bl	800e934 <osThreadNew>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <main+0x20c>)
 8002c80:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002c82:	f00b fe31 	bl	800e8e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c86:	e7fe      	b.n	8002c86 <main+0x1aa>
 8002c88:	20000221 	.word	0x20000221
 8002c8c:	40020c00 	.word	0x40020c00
 8002c90:	20005690 	.word	0x20005690
 8002c94:	40020000 	.word	0x40020000
 8002c98:	20005640 	.word	0x20005640
 8002c9c:	20005130 	.word	0x20005130
 8002ca0:	200050e0 	.word	0x200050e0
 8002ca4:	2000517c 	.word	0x2000517c
 8002ca8:	20005464 	.word	0x20005464
 8002cac:	20005224 	.word	0x20005224
 8002cb0:	200057b0 	.word	0x200057b0
 8002cb4:	200058e4 	.word	0x200058e4
 8002cb8:	20005618 	.word	0x20005618
 8002cbc:	20005184 	.word	0x20005184
 8002cc0:	2000587c 	.word	0x2000587c
 8002cc4:	20004ed4 	.word	0x20004ed4
 8002cc8:	08012a10 	.word	0x08012a10
 8002ccc:	080035d9 	.word	0x080035d9
 8002cd0:	20004d60 	.word	0x20004d60
 8002cd4:	08012a34 	.word	0x08012a34
 8002cd8:	08003c0d 	.word	0x08003c0d
 8002cdc:	200052f0 	.word	0x200052f0
 8002ce0:	08012a58 	.word	0x08012a58
 8002ce4:	08003de5 	.word	0x08003de5
 8002ce8:	20004de4 	.word	0x20004de4

08002cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b094      	sub	sp, #80	; 0x50
 8002cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cf2:	f107 0320 	add.w	r3, r7, #32
 8002cf6:	2230      	movs	r2, #48	; 0x30
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f00f f874 	bl	8011de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d00:	f107 030c 	add.w	r3, r7, #12
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <SystemClock_Config+0xc8>)
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	4a26      	ldr	r2, [pc, #152]	; (8002db4 <SystemClock_Config+0xc8>)
 8002d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <SystemClock_Config+0xc8>)
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <SystemClock_Config+0xcc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a20      	ldr	r2, [pc, #128]	; (8002db8 <SystemClock_Config+0xcc>)
 8002d36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <SystemClock_Config+0xcc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d52:	2302      	movs	r3, #2
 8002d54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002d60:	23a8      	movs	r3, #168	; 0xa8
 8002d62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002d64:	2304      	movs	r3, #4
 8002d66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d68:	2307      	movs	r3, #7
 8002d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d6c:	f107 0320 	add.w	r3, r7, #32
 8002d70:	4618      	mov	r0, r3
 8002d72:	f005 ff89 	bl	8008c88 <HAL_RCC_OscConfig>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d7c:	f001 f8ac 	bl	8003ed8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d80:	230f      	movs	r3, #15
 8002d82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d84:	2302      	movs	r3, #2
 8002d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d96:	f107 030c 	add.w	r3, r7, #12
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f006 f9eb 	bl	8009178 <HAL_RCC_ClockConfig>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002da8:	f001 f896 	bl	8003ed8 <Error_Handler>
  }
}
 8002dac:	bf00      	nop
 8002dae:	3750      	adds	r7, #80	; 0x50
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40007000 	.word	0x40007000

08002dbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <MX_I2C1_Init+0x50>)
 8002dc2:	4a13      	ldr	r2, [pc, #76]	; (8002e10 <MX_I2C1_Init+0x54>)
 8002dc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <MX_I2C1_Init+0x50>)
 8002dc8:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <MX_I2C1_Init+0x58>)
 8002dca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <MX_I2C1_Init+0x50>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <MX_I2C1_Init+0x50>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <MX_I2C1_Init+0x50>)
 8002dda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002de0:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <MX_I2C1_Init+0x50>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <MX_I2C1_Init+0x50>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dec:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <MX_I2C1_Init+0x50>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002df2:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <MX_I2C1_Init+0x50>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002df8:	4804      	ldr	r0, [pc, #16]	; (8002e0c <MX_I2C1_Init+0x50>)
 8002dfa:	f003 f961 	bl	80060c0 <HAL_I2C_Init>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e04:	f001 f868 	bl	8003ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e08:	bf00      	nop
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	2000502c 	.word	0x2000502c
 8002e10:	40005400 	.word	0x40005400
 8002e14:	00061a80 	.word	0x00061a80

08002e18 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <MX_I2S3_Init+0x54>)
 8002e1e:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <MX_I2S3_Init+0x58>)
 8002e20:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <MX_I2S3_Init+0x54>)
 8002e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e28:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <MX_I2S3_Init+0x54>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002e30:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <MX_I2S3_Init+0x54>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002e36:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <MX_I2S3_Init+0x54>)
 8002e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e3c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <MX_I2S3_Init+0x54>)
 8002e40:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002e44:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <MX_I2S3_Init+0x54>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002e4c:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <MX_I2S3_Init+0x54>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <MX_I2S3_Init+0x54>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002e58:	4804      	ldr	r0, [pc, #16]	; (8002e6c <MX_I2S3_Init+0x54>)
 8002e5a:	f004 f8f1 	bl	8007040 <HAL_I2S_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8002e64:	f001 f838 	bl	8003ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	2000589c 	.word	0x2000589c
 8002e70:	40003c00 	.word	0x40003c00

08002e74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e78:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <MX_SPI1_Init+0x64>)
 8002e7a:	4a18      	ldr	r2, [pc, #96]	; (8002edc <MX_SPI1_Init+0x68>)
 8002e7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e7e:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <MX_SPI1_Init+0x64>)
 8002e80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e86:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <MX_SPI1_Init+0x64>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e8c:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <MX_SPI1_Init+0x64>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e92:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <MX_SPI1_Init+0x64>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e98:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <MX_SPI1_Init+0x64>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <MX_SPI1_Init+0x64>)
 8002ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <MX_SPI1_Init+0x64>)
 8002ea8:	2218      	movs	r2, #24
 8002eaa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <MX_SPI1_Init+0x64>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <MX_SPI1_Init+0x64>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eb8:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <MX_SPI1_Init+0x64>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <MX_SPI1_Init+0x64>)
 8002ec0:	220a      	movs	r2, #10
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ec4:	4804      	ldr	r0, [pc, #16]	; (8002ed8 <MX_SPI1_Init+0x64>)
 8002ec6:	f006 fcd5 	bl	8009874 <HAL_SPI_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ed0:	f001 f802 	bl	8003ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ed4:	bf00      	nop
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	200055b0 	.word	0x200055b0
 8002edc:	40013000 	.word	0x40013000

08002ee0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ee4:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <MX_SPI2_Init+0x64>)
 8002ee6:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <MX_SPI2_Init+0x68>)
 8002ee8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002eea:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <MX_SPI2_Init+0x64>)
 8002eec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ef0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <MX_SPI2_Init+0x64>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <MX_SPI2_Init+0x64>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <MX_SPI2_Init+0x64>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <MX_SPI2_Init+0x64>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <MX_SPI2_Init+0x64>)
 8002f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f10:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <MX_SPI2_Init+0x64>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <MX_SPI2_Init+0x64>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <MX_SPI2_Init+0x64>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <MX_SPI2_Init+0x64>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <MX_SPI2_Init+0x64>)
 8002f2c:	220a      	movs	r2, #10
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f30:	4804      	ldr	r0, [pc, #16]	; (8002f44 <MX_SPI2_Init+0x64>)
 8002f32:	f006 fc9f 	bl	8009874 <HAL_SPI_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002f3c:	f000 ffcc 	bl	8003ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f40:	bf00      	nop
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20004de8 	.word	0x20004de8
 8002f48:	40003800 	.word	0x40003800

08002f4c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <MX_SPI5_Init+0x5c>)
 8002f52:	4a16      	ldr	r2, [pc, #88]	; (8002fac <MX_SPI5_Init+0x60>)
 8002f54:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <MX_SPI5_Init+0x5c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <MX_SPI5_Init+0x5c>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <MX_SPI5_Init+0x5c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <MX_SPI5_Init+0x5c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <MX_SPI5_Init+0x5c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <MX_SPI5_Init+0x5c>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	619a      	str	r2, [r3, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <MX_SPI5_Init+0x5c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <MX_SPI5_Init+0x5c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f86:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <MX_SPI5_Init+0x5c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <MX_SPI5_Init+0x5c>)
 8002f8e:	220a      	movs	r2, #10
 8002f90:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002f92:	4805      	ldr	r0, [pc, #20]	; (8002fa8 <MX_SPI5_Init+0x5c>)
 8002f94:	f006 fc6e 	bl	8009874 <HAL_SPI_Init>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_SPI5_Init+0x56>
  {
    Error_Handler();
 8002f9e:	f000 ff9b 	bl	8003ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20004ed4 	.word	0x20004ed4
 8002fac:	40015000 	.word	0x40015000

08002fb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08e      	sub	sp, #56	; 0x38
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
 8002fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc4:	f107 0320 	add.w	r3, r7, #32
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fce:	1d3b      	adds	r3, r7, #4
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
 8002fdc:	615a      	str	r2, [r3, #20]
 8002fde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fe0:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <MX_TIM2_Init+0x114>)
 8002fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fe6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002fe8:	4b36      	ldr	r3, [pc, #216]	; (80030c4 <MX_TIM2_Init+0x114>)
 8002fea:	2253      	movs	r2, #83	; 0x53
 8002fec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fee:	4b35      	ldr	r3, [pc, #212]	; (80030c4 <MX_TIM2_Init+0x114>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002ff4:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <MX_TIM2_Init+0x114>)
 8002ff6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ffa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ffc:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <MX_TIM2_Init+0x114>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003002:	4b30      	ldr	r3, [pc, #192]	; (80030c4 <MX_TIM2_Init+0x114>)
 8003004:	2200      	movs	r2, #0
 8003006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003008:	482e      	ldr	r0, [pc, #184]	; (80030c4 <MX_TIM2_Init+0x114>)
 800300a:	f007 fbdd 	bl	800a7c8 <HAL_TIM_Base_Init>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003014:	f000 ff60 	bl	8003ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800301e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003022:	4619      	mov	r1, r3
 8003024:	4827      	ldr	r0, [pc, #156]	; (80030c4 <MX_TIM2_Init+0x114>)
 8003026:	f007 ffaf 	bl	800af88 <HAL_TIM_ConfigClockSource>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003030:	f000 ff52 	bl	8003ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003034:	4823      	ldr	r0, [pc, #140]	; (80030c4 <MX_TIM2_Init+0x114>)
 8003036:	f007 fcd3 	bl	800a9e0 <HAL_TIM_PWM_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003040:	f000 ff4a 	bl	8003ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003044:	2300      	movs	r3, #0
 8003046:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800304c:	f107 0320 	add.w	r3, r7, #32
 8003050:	4619      	mov	r1, r3
 8003052:	481c      	ldr	r0, [pc, #112]	; (80030c4 <MX_TIM2_Init+0x114>)
 8003054:	f008 fb54 	bl	800b700 <HAL_TIMEx_MasterConfigSynchronization>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800305e:	f000 ff3b 	bl	8003ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003062:	2360      	movs	r3, #96	; 0x60
 8003064:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	2204      	movs	r2, #4
 8003076:	4619      	mov	r1, r3
 8003078:	4812      	ldr	r0, [pc, #72]	; (80030c4 <MX_TIM2_Init+0x114>)
 800307a:	f007 fec3 	bl	800ae04 <HAL_TIM_PWM_ConfigChannel>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003084:	f000 ff28 	bl	8003ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003088:	1d3b      	adds	r3, r7, #4
 800308a:	2208      	movs	r2, #8
 800308c:	4619      	mov	r1, r3
 800308e:	480d      	ldr	r0, [pc, #52]	; (80030c4 <MX_TIM2_Init+0x114>)
 8003090:	f007 feb8 	bl	800ae04 <HAL_TIM_PWM_ConfigChannel>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800309a:	f000 ff1d 	bl	8003ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	220c      	movs	r2, #12
 80030a2:	4619      	mov	r1, r3
 80030a4:	4807      	ldr	r0, [pc, #28]	; (80030c4 <MX_TIM2_Init+0x114>)
 80030a6:	f007 fead 	bl	800ae04 <HAL_TIM_PWM_ConfigChannel>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80030b0:	f000 ff12 	bl	8003ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80030b4:	4803      	ldr	r0, [pc, #12]	; (80030c4 <MX_TIM2_Init+0x114>)
 80030b6:	f001 fff3 	bl	80050a0 <HAL_TIM_MspPostInit>

}
 80030ba:	bf00      	nop
 80030bc:	3738      	adds	r7, #56	; 0x38
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20005640 	.word	0x20005640

080030c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08e      	sub	sp, #56	; 0x38
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	609a      	str	r2, [r3, #8]
 80030da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030dc:	f107 0320 	add.w	r3, r7, #32
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030e6:	1d3b      	adds	r3, r7, #4
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	611a      	str	r2, [r3, #16]
 80030f4:	615a      	str	r2, [r3, #20]
 80030f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030f8:	4b2c      	ldr	r3, [pc, #176]	; (80031ac <MX_TIM3_Init+0xe4>)
 80030fa:	4a2d      	ldr	r2, [pc, #180]	; (80031b0 <MX_TIM3_Init+0xe8>)
 80030fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 80030fe:	4b2b      	ldr	r3, [pc, #172]	; (80031ac <MX_TIM3_Init+0xe4>)
 8003100:	2254      	movs	r2, #84	; 0x54
 8003102:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003104:	4b29      	ldr	r3, [pc, #164]	; (80031ac <MX_TIM3_Init+0xe4>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800310a:	4b28      	ldr	r3, [pc, #160]	; (80031ac <MX_TIM3_Init+0xe4>)
 800310c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003110:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003112:	4b26      	ldr	r3, [pc, #152]	; (80031ac <MX_TIM3_Init+0xe4>)
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003118:	4b24      	ldr	r3, [pc, #144]	; (80031ac <MX_TIM3_Init+0xe4>)
 800311a:	2200      	movs	r2, #0
 800311c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800311e:	4823      	ldr	r0, [pc, #140]	; (80031ac <MX_TIM3_Init+0xe4>)
 8003120:	f007 fb52 	bl	800a7c8 <HAL_TIM_Base_Init>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800312a:	f000 fed5 	bl	8003ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800312e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003134:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003138:	4619      	mov	r1, r3
 800313a:	481c      	ldr	r0, [pc, #112]	; (80031ac <MX_TIM3_Init+0xe4>)
 800313c:	f007 ff24 	bl	800af88 <HAL_TIM_ConfigClockSource>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003146:	f000 fec7 	bl	8003ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800314a:	4818      	ldr	r0, [pc, #96]	; (80031ac <MX_TIM3_Init+0xe4>)
 800314c:	f007 fc48 	bl	800a9e0 <HAL_TIM_PWM_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003156:	f000 febf 	bl	8003ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800315a:	2300      	movs	r3, #0
 800315c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800315e:	2300      	movs	r3, #0
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003162:	f107 0320 	add.w	r3, r7, #32
 8003166:	4619      	mov	r1, r3
 8003168:	4810      	ldr	r0, [pc, #64]	; (80031ac <MX_TIM3_Init+0xe4>)
 800316a:	f008 fac9 	bl	800b700 <HAL_TIMEx_MasterConfigSynchronization>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003174:	f000 feb0 	bl	8003ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003178:	2360      	movs	r3, #96	; 0x60
 800317a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	220c      	movs	r2, #12
 800318c:	4619      	mov	r1, r3
 800318e:	4807      	ldr	r0, [pc, #28]	; (80031ac <MX_TIM3_Init+0xe4>)
 8003190:	f007 fe38 	bl	800ae04 <HAL_TIM_PWM_ConfigChannel>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800319a:	f000 fe9d 	bl	8003ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800319e:	4803      	ldr	r0, [pc, #12]	; (80031ac <MX_TIM3_Init+0xe4>)
 80031a0:	f001 ff7e 	bl	80050a0 <HAL_TIM_MspPostInit>

}
 80031a4:	bf00      	nop
 80031a6:	3738      	adds	r7, #56	; 0x38
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20005130 	.word	0x20005130
 80031b0:	40000400 	.word	0x40000400

080031b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ba:	f107 0308 	add.w	r3, r7, #8
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	609a      	str	r2, [r3, #8]
 80031c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031c8:	463b      	mov	r3, r7
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80031d0:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <MX_TIM5_Init+0x94>)
 80031d2:	4a1e      	ldr	r2, [pc, #120]	; (800324c <MX_TIM5_Init+0x98>)
 80031d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80031d6:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <MX_TIM5_Init+0x94>)
 80031d8:	2253      	movs	r2, #83	; 0x53
 80031da:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031dc:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <MX_TIM5_Init+0x94>)
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <MX_TIM5_Init+0x94>)
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295
 80031e8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ea:	4b17      	ldr	r3, [pc, #92]	; (8003248 <MX_TIM5_Init+0x94>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f0:	4b15      	ldr	r3, [pc, #84]	; (8003248 <MX_TIM5_Init+0x94>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80031f6:	4814      	ldr	r0, [pc, #80]	; (8003248 <MX_TIM5_Init+0x94>)
 80031f8:	f007 fae6 	bl	800a7c8 <HAL_TIM_Base_Init>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003202:	f000 fe69 	bl	8003ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800320a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800320c:	f107 0308 	add.w	r3, r7, #8
 8003210:	4619      	mov	r1, r3
 8003212:	480d      	ldr	r0, [pc, #52]	; (8003248 <MX_TIM5_Init+0x94>)
 8003214:	f007 feb8 	bl	800af88 <HAL_TIM_ConfigClockSource>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800321e:	f000 fe5b 	bl	8003ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800322a:	463b      	mov	r3, r7
 800322c:	4619      	mov	r1, r3
 800322e:	4806      	ldr	r0, [pc, #24]	; (8003248 <MX_TIM5_Init+0x94>)
 8003230:	f008 fa66 	bl	800b700 <HAL_TIMEx_MasterConfigSynchronization>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800323a:	f000 fe4d 	bl	8003ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800323e:	bf00      	nop
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	200050e0 	.word	0x200050e0
 800324c:	40000c00 	.word	0x40000c00

08003250 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <MX_DMA_Init+0x4c>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a0f      	ldr	r2, [pc, #60]	; (800329c <MX_DMA_Init+0x4c>)
 8003260:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b0d      	ldr	r3, [pc, #52]	; (800329c <MX_DMA_Init+0x4c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8003272:	2200      	movs	r2, #0
 8003274:	2105      	movs	r1, #5
 8003276:	203b      	movs	r0, #59	; 0x3b
 8003278:	f002 f9a0 	bl	80055bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800327c:	203b      	movs	r0, #59	; 0x3b
 800327e:	f002 f9b9 	bl	80055f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8003282:	2200      	movs	r2, #0
 8003284:	2105      	movs	r1, #5
 8003286:	203c      	movs	r0, #60	; 0x3c
 8003288:	f002 f998 	bl	80055bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800328c:	203c      	movs	r0, #60	; 0x3c
 800328e:	f002 f9b1 	bl	80055f4 <HAL_NVIC_EnableIRQ>

}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800

080032a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08c      	sub	sp, #48	; 0x30
 80032a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a6:	f107 031c 	add.w	r3, r7, #28
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	605a      	str	r2, [r3, #4]
 80032b0:	609a      	str	r2, [r3, #8]
 80032b2:	60da      	str	r2, [r3, #12]
 80032b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	4bb7      	ldr	r3, [pc, #732]	; (8003598 <MX_GPIO_Init+0x2f8>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	4ab6      	ldr	r2, [pc, #728]	; (8003598 <MX_GPIO_Init+0x2f8>)
 80032c0:	f043 0310 	orr.w	r3, r3, #16
 80032c4:	6313      	str	r3, [r2, #48]	; 0x30
 80032c6:	4bb4      	ldr	r3, [pc, #720]	; (8003598 <MX_GPIO_Init+0x2f8>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	61bb      	str	r3, [r7, #24]
 80032d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	4bb0      	ldr	r3, [pc, #704]	; (8003598 <MX_GPIO_Init+0x2f8>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	4aaf      	ldr	r2, [pc, #700]	; (8003598 <MX_GPIO_Init+0x2f8>)
 80032dc:	f043 0304 	orr.w	r3, r3, #4
 80032e0:	6313      	str	r3, [r2, #48]	; 0x30
 80032e2:	4bad      	ldr	r3, [pc, #692]	; (8003598 <MX_GPIO_Init+0x2f8>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	4ba9      	ldr	r3, [pc, #676]	; (8003598 <MX_GPIO_Init+0x2f8>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4aa8      	ldr	r2, [pc, #672]	; (8003598 <MX_GPIO_Init+0x2f8>)
 80032f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4ba6      	ldr	r3, [pc, #664]	; (8003598 <MX_GPIO_Init+0x2f8>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	4ba2      	ldr	r3, [pc, #648]	; (8003598 <MX_GPIO_Init+0x2f8>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	4aa1      	ldr	r2, [pc, #644]	; (8003598 <MX_GPIO_Init+0x2f8>)
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	6313      	str	r3, [r2, #48]	; 0x30
 800331a:	4b9f      	ldr	r3, [pc, #636]	; (8003598 <MX_GPIO_Init+0x2f8>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	4b9b      	ldr	r3, [pc, #620]	; (8003598 <MX_GPIO_Init+0x2f8>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a9a      	ldr	r2, [pc, #616]	; (8003598 <MX_GPIO_Init+0x2f8>)
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b98      	ldr	r3, [pc, #608]	; (8003598 <MX_GPIO_Init+0x2f8>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	4b94      	ldr	r3, [pc, #592]	; (8003598 <MX_GPIO_Init+0x2f8>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	4a93      	ldr	r2, [pc, #588]	; (8003598 <MX_GPIO_Init+0x2f8>)
 800334c:	f043 0308 	orr.w	r3, r3, #8
 8003350:	6313      	str	r3, [r2, #48]	; 0x30
 8003352:	4b91      	ldr	r3, [pc, #580]	; (8003598 <MX_GPIO_Init+0x2f8>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_SPI1_Pin|mf_lf_Pin|mb_lf_Pin|GPIO_PIN_9
 800335e:	2200      	movs	r2, #0
 8003360:	f647 7188 	movw	r1, #32648	; 0x7f88
 8003364:	488d      	ldr	r0, [pc, #564]	; (800359c <MX_GPIO_Init+0x2fc>)
 8003366:	f002 fe5f 	bl	8006028 <HAL_GPIO_WritePin>
                          |mb_rb_Pin|GPIO_PIN_11|mf_rb_Pin|GPIO_PIN_13
                          |mb_lb_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800336a:	2201      	movs	r2, #1
 800336c:	2101      	movs	r1, #1
 800336e:	488c      	ldr	r0, [pc, #560]	; (80035a0 <MX_GPIO_Init+0x300>)
 8003370:	f002 fe5a 	bl	8006028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8003374:	2200      	movs	r2, #0
 8003376:	2104      	movs	r1, #4
 8003378:	488a      	ldr	r0, [pc, #552]	; (80035a4 <MX_GPIO_Init+0x304>)
 800337a:	f002 fe55 	bl	8006028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, NRF_CSN_Pin|NRF_CE_Pin|LD4_Pin|LD3_Pin
 800337e:	2200      	movs	r2, #0
 8003380:	f24f 3113 	movw	r1, #62227	; 0xf313
 8003384:	4888      	ldr	r0, [pc, #544]	; (80035a8 <MX_GPIO_Init+0x308>)
 8003386:	f002 fe4f 	bl	8006028 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|CE1_SPI5_Pin|CSN1_SPI5_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_1;
 800338a:	2316      	movs	r3, #22
 800338c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800338e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003398:	f107 031c 	add.w	r3, r7, #28
 800339c:	4619      	mov	r1, r3
 800339e:	487f      	ldr	r0, [pc, #508]	; (800359c <MX_GPIO_Init+0x2fc>)
 80033a0:	f002 fca6 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SPI1_Pin */
  GPIO_InitStruct.Pin = CS_SPI1_Pin;
 80033a4:	2308      	movs	r3, #8
 80033a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a8:	2301      	movs	r3, #1
 80033aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033b0:	2302      	movs	r3, #2
 80033b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_SPI1_GPIO_Port, &GPIO_InitStruct);
 80033b4:	f107 031c 	add.w	r3, r7, #28
 80033b8:	4619      	mov	r1, r3
 80033ba:	4878      	ldr	r0, [pc, #480]	; (800359c <MX_GPIO_Init+0x2fc>)
 80033bc:	f002 fc98 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80033c0:	2301      	movs	r3, #1
 80033c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c4:	2301      	movs	r3, #1
 80033c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80033d0:	f107 031c 	add.w	r3, r7, #28
 80033d4:	4619      	mov	r1, r3
 80033d6:	4872      	ldr	r0, [pc, #456]	; (80035a0 <MX_GPIO_Init+0x300>)
 80033d8:	f002 fc8a 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80033dc:	2308      	movs	r3, #8
 80033de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e0:	2302      	movs	r3, #2
 80033e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e8:	2300      	movs	r3, #0
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033ec:	2305      	movs	r3, #5
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80033f0:	f107 031c 	add.w	r3, r7, #28
 80033f4:	4619      	mov	r1, r3
 80033f6:	486a      	ldr	r0, [pc, #424]	; (80035a0 <MX_GPIO_Init+0x300>)
 80033f8:	f002 fc7a 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033fc:	2301      	movs	r3, #1
 80033fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003400:	2300      	movs	r3, #0
 8003402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003408:	f107 031c 	add.w	r3, r7, #28
 800340c:	4619      	mov	r1, r3
 800340e:	4867      	ldr	r0, [pc, #412]	; (80035ac <MX_GPIO_Init+0x30c>)
 8003410:	f002 fc6e 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003414:	2304      	movs	r3, #4
 8003416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003418:	2301      	movs	r3, #1
 800341a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003420:	2300      	movs	r3, #0
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003424:	f107 031c 	add.w	r3, r7, #28
 8003428:	4619      	mov	r1, r3
 800342a:	485e      	ldr	r0, [pc, #376]	; (80035a4 <MX_GPIO_Init+0x304>)
 800342c:	f002 fc60 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : mf_lf_Pin mb_lf_Pin PE9 mb_rb_Pin
                           PE11 mf_rb_Pin PE13 mb_lb_Pin */
  GPIO_InitStruct.Pin = mf_lf_Pin|mb_lf_Pin|GPIO_PIN_9|mb_rb_Pin
 8003430:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 8003434:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|mf_rb_Pin|GPIO_PIN_13|mb_lb_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003436:	2301      	movs	r3, #1
 8003438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343e:	2300      	movs	r3, #0
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003442:	f107 031c 	add.w	r3, r7, #28
 8003446:	4619      	mov	r1, r3
 8003448:	4854      	ldr	r0, [pc, #336]	; (800359c <MX_GPIO_Init+0x2fc>)
 800344a:	f002 fc51 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800344e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345c:	2300      	movs	r3, #0
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003460:	2305      	movs	r3, #5
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003464:	f107 031c 	add.w	r3, r7, #28
 8003468:	4619      	mov	r1, r3
 800346a:	484e      	ldr	r0, [pc, #312]	; (80035a4 <MX_GPIO_Init+0x304>)
 800346c:	f002 fc40 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8003470:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003476:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800347a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003480:	f107 031c 	add.w	r3, r7, #28
 8003484:	4619      	mov	r1, r3
 8003486:	4847      	ldr	r0, [pc, #284]	; (80035a4 <MX_GPIO_Init+0x304>)
 8003488:	f002 fc32 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CSN_Pin NRF_CE_Pin LD4_Pin LD3_Pin
                           LD5_Pin LD6_Pin CE1_SPI5_Pin CSN1_SPI5_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_CE_Pin|LD4_Pin|LD3_Pin
 800348c:	f24f 3313 	movw	r3, #62227	; 0xf313
 8003490:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|CE1_SPI5_Pin|CSN1_SPI5_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003492:	2301      	movs	r3, #1
 8003494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349a:	2300      	movs	r3, #0
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800349e:	f107 031c 	add.w	r3, r7, #28
 80034a2:	4619      	mov	r1, r3
 80034a4:	4840      	ldr	r0, [pc, #256]	; (80035a8 <MX_GPIO_Init+0x308>)
 80034a6:	f002 fc23 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80034aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80034b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ba:	f107 031c 	add.w	r3, r7, #28
 80034be:	4619      	mov	r1, r3
 80034c0:	483a      	ldr	r0, [pc, #232]	; (80035ac <MX_GPIO_Init+0x30c>)
 80034c2:	f002 fc15 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034cc:	2300      	movs	r3, #0
 80034ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d4:	f107 031c 	add.w	r3, r7, #28
 80034d8:	4619      	mov	r1, r3
 80034da:	4831      	ldr	r0, [pc, #196]	; (80035a0 <MX_GPIO_Init+0x300>)
 80034dc:	f002 fc08 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80034e0:	2364      	movs	r3, #100	; 0x64
 80034e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034e4:	2300      	movs	r3, #0
 80034e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034ec:	f107 031c 	add.w	r3, r7, #28
 80034f0:	4619      	mov	r1, r3
 80034f2:	482d      	ldr	r0, [pc, #180]	; (80035a8 <MX_GPIO_Init+0x308>)
 80034f4:	f002 fbfc 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 80034f8:	2388      	movs	r3, #136	; 0x88
 80034fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003500:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	2300      	movs	r3, #0
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003506:	f107 031c 	add.w	r3, r7, #28
 800350a:	4619      	mov	r1, r3
 800350c:	4826      	ldr	r0, [pc, #152]	; (80035a8 <MX_GPIO_Init+0x308>)
 800350e:	f002 fbef 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003518:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800351c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003522:	f107 031c 	add.w	r3, r7, #28
 8003526:	4619      	mov	r1, r3
 8003528:	481e      	ldr	r0, [pc, #120]	; (80035a4 <MX_GPIO_Init+0x304>)
 800352a:	f002 fbe1 	bl	8005cf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800352e:	2200      	movs	r2, #0
 8003530:	2105      	movs	r1, #5
 8003532:	2007      	movs	r0, #7
 8003534:	f002 f842 	bl	80055bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003538:	2007      	movs	r0, #7
 800353a:	f002 f85b 	bl	80055f4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800353e:	2200      	movs	r2, #0
 8003540:	2105      	movs	r1, #5
 8003542:	2008      	movs	r0, #8
 8003544:	f002 f83a 	bl	80055bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003548:	2008      	movs	r0, #8
 800354a:	f002 f853 	bl	80055f4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800354e:	2200      	movs	r2, #0
 8003550:	2105      	movs	r1, #5
 8003552:	2009      	movs	r0, #9
 8003554:	f002 f832 	bl	80055bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003558:	2009      	movs	r0, #9
 800355a:	f002 f84b 	bl	80055f4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	2105      	movs	r1, #5
 8003562:	200a      	movs	r0, #10
 8003564:	f002 f82a 	bl	80055bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003568:	200a      	movs	r0, #10
 800356a:	f002 f843 	bl	80055f4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800356e:	2200      	movs	r2, #0
 8003570:	2105      	movs	r1, #5
 8003572:	2017      	movs	r0, #23
 8003574:	f002 f822 	bl	80055bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003578:	2017      	movs	r0, #23
 800357a:	f002 f83b 	bl	80055f4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	2105      	movs	r1, #5
 8003582:	2028      	movs	r0, #40	; 0x28
 8003584:	f002 f81a 	bl	80055bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003588:	2028      	movs	r0, #40	; 0x28
 800358a:	f002 f833 	bl	80055f4 <HAL_NVIC_EnableIRQ>

}
 800358e:	bf00      	nop
 8003590:	3730      	adds	r7, #48	; 0x30
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800
 800359c:	40021000 	.word	0x40021000
 80035a0:	40020800 	.word	0x40020800
 80035a4:	40020400 	.word	0x40020400
 80035a8:	40020c00 	.word	0x40020c00
 80035ac:	40020000 	.word	0x40020000

080035b0 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	SPIcommandRecived = 1;
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_SPI_TxRxCpltCallback+0x20>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13); //oranzna
 80035be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035c2:	4804      	ldr	r0, [pc, #16]	; (80035d4 <HAL_SPI_TxRxCpltCallback+0x24>)
 80035c4:	f002 fd49 	bl	800605a <HAL_GPIO_TogglePin>
	//..rasberyReq = *(struct recivedRasberyPiPayload*)SpiRxData;
	//if( SpiRxData[0] == 22){
	//	SPIcommandRecived = 1;
	//	//HAL_SPI_Transmit(&hspi5, (uint8_t*)&P, 28, 100);
	//}
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000225 	.word	0x20000225
 80035d4:	40020c00 	.word	0x40020c00

080035d8 <StartCalculatingPoz>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCalculatingPoz */
void StartCalculatingPoz(void *argument)
{
 80035d8:	b5b0      	push	{r4, r5, r7, lr}
 80035da:	b08e      	sub	sp, #56	; 0x38
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80035e0:	f00d feac 	bl	801133c <MX_USB_DEVICE_Init>
		  //SPIcommandRecived=0;
		  //HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)&P, 28);
		  //HAL_SPI_Transmit(&hspi5, (uint8_t*)&P, 28, 1000);
	  //}

	  if(MagReady){
 80035e4:	4bb2      	ldr	r3, [pc, #712]	; (80038b0 <StartCalculatingPoz+0x2d8>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d034      	beq.n	8003658 <StartCalculatingPoz+0x80>
		  MagF.x = izracunajPovprecjeInt16(&MagX,Mag.x,10);
 80035ee:	4bb1      	ldr	r3, [pc, #708]	; (80038b4 <StartCalculatingPoz+0x2dc>)
 80035f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f4:	220a      	movs	r2, #10
 80035f6:	4619      	mov	r1, r3
 80035f8:	48af      	ldr	r0, [pc, #700]	; (80038b8 <StartCalculatingPoz+0x2e0>)
 80035fa:	f001 f95f 	bl	80048bc <izracunajPovprecjeInt16>
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	4bae      	ldr	r3, [pc, #696]	; (80038bc <StartCalculatingPoz+0x2e4>)
 8003604:	801a      	strh	r2, [r3, #0]
		  MagF.y = izracunajPovprecjeInt16(&MagY,Mag.y,10);
 8003606:	4bab      	ldr	r3, [pc, #684]	; (80038b4 <StartCalculatingPoz+0x2dc>)
 8003608:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800360c:	220a      	movs	r2, #10
 800360e:	4619      	mov	r1, r3
 8003610:	48ab      	ldr	r0, [pc, #684]	; (80038c0 <StartCalculatingPoz+0x2e8>)
 8003612:	f001 f953 	bl	80048bc <izracunajPovprecjeInt16>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	4ba8      	ldr	r3, [pc, #672]	; (80038bc <StartCalculatingPoz+0x2e4>)
 800361c:	805a      	strh	r2, [r3, #2]
		  MagF.z = izracunajPovprecjeInt16(&MagZ,Mag.z,10);
 800361e:	4ba5      	ldr	r3, [pc, #660]	; (80038b4 <StartCalculatingPoz+0x2dc>)
 8003620:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003624:	220a      	movs	r2, #10
 8003626:	4619      	mov	r1, r3
 8003628:	48a6      	ldr	r0, [pc, #664]	; (80038c4 <StartCalculatingPoz+0x2ec>)
 800362a:	f001 f947 	bl	80048bc <izracunajPovprecjeInt16>
 800362e:	4603      	mov	r3, r0
 8003630:	461a      	mov	r2, r3
 8003632:	4ba2      	ldr	r3, [pc, #648]	; (80038bc <StartCalculatingPoz+0x2e4>)
 8003634:	809a      	strh	r2, [r3, #4]
		  MagReady = 0;
 8003636:	4b9e      	ldr	r3, [pc, #632]	; (80038b0 <StartCalculatingPoz+0x2d8>)
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]

		  P.head = 0xAAAB;
 800363c:	4ba2      	ldr	r3, [pc, #648]	; (80038c8 <StartCalculatingPoz+0x2f0>)
 800363e:	f64a 22ab 	movw	r2, #43691	; 0xaaab
 8003642:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8003644:	2201      	movs	r2, #1
 8003646:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800364a:	48a0      	ldr	r0, [pc, #640]	; (80038cc <StartCalculatingPoz+0x2f4>)
 800364c:	f002 fcec 	bl	8006028 <HAL_GPIO_WritePin>
		  CDC_Transmit_FS((uint8_t*)&P,(sizeof(float)*7)+4);
 8003650:	2120      	movs	r1, #32
 8003652:	489d      	ldr	r0, [pc, #628]	; (80038c8 <StartCalculatingPoz+0x2f0>)
 8003654:	f00d ff30 	bl	80114b8 <CDC_Transmit_FS>
	  }
	  if(AccReady){
 8003658:	4b9d      	ldr	r3, [pc, #628]	; (80038d0 <StartCalculatingPoz+0x2f8>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d040      	beq.n	80036e4 <StartCalculatingPoz+0x10c>
		  Acc.x -= E.Accx;
 8003662:	4b9c      	ldr	r3, [pc, #624]	; (80038d4 <StartCalculatingPoz+0x2fc>)
 8003664:	8c1b      	ldrh	r3, [r3, #32]
 8003666:	b219      	sxth	r1, r3
 8003668:	4b9b      	ldr	r3, [pc, #620]	; (80038d8 <StartCalculatingPoz+0x300>)
 800366a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800366e:	b29a      	uxth	r2, r3
 8003670:	b28b      	uxth	r3, r1
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	b29b      	uxth	r3, r3
 8003676:	b21a      	sxth	r2, r3
 8003678:	4b97      	ldr	r3, [pc, #604]	; (80038d8 <StartCalculatingPoz+0x300>)
 800367a:	801a      	strh	r2, [r3, #0]
		  Acc.y -= E.Accy;
 800367c:	4b95      	ldr	r3, [pc, #596]	; (80038d4 <StartCalculatingPoz+0x2fc>)
 800367e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003680:	b219      	sxth	r1, r3
 8003682:	4b95      	ldr	r3, [pc, #596]	; (80038d8 <StartCalculatingPoz+0x300>)
 8003684:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003688:	b29a      	uxth	r2, r3
 800368a:	b28b      	uxth	r3, r1
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	b29b      	uxth	r3, r3
 8003690:	b21a      	sxth	r2, r3
 8003692:	4b91      	ldr	r3, [pc, #580]	; (80038d8 <StartCalculatingPoz+0x300>)
 8003694:	805a      	strh	r2, [r3, #2]
		  AccF.x = izracunajPovprecjeInt16(&AccX,Acc.x,50);
 8003696:	4b90      	ldr	r3, [pc, #576]	; (80038d8 <StartCalculatingPoz+0x300>)
 8003698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800369c:	2232      	movs	r2, #50	; 0x32
 800369e:	4619      	mov	r1, r3
 80036a0:	488e      	ldr	r0, [pc, #568]	; (80038dc <StartCalculatingPoz+0x304>)
 80036a2:	f001 f90b 	bl	80048bc <izracunajPovprecjeInt16>
 80036a6:	4603      	mov	r3, r0
 80036a8:	461a      	mov	r2, r3
 80036aa:	4b8d      	ldr	r3, [pc, #564]	; (80038e0 <StartCalculatingPoz+0x308>)
 80036ac:	801a      	strh	r2, [r3, #0]
		  AccF.y = izracunajPovprecjeInt16(&AccY,Acc.y,50);
 80036ae:	4b8a      	ldr	r3, [pc, #552]	; (80038d8 <StartCalculatingPoz+0x300>)
 80036b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036b4:	2232      	movs	r2, #50	; 0x32
 80036b6:	4619      	mov	r1, r3
 80036b8:	488a      	ldr	r0, [pc, #552]	; (80038e4 <StartCalculatingPoz+0x30c>)
 80036ba:	f001 f8ff 	bl	80048bc <izracunajPovprecjeInt16>
 80036be:	4603      	mov	r3, r0
 80036c0:	461a      	mov	r2, r3
 80036c2:	4b87      	ldr	r3, [pc, #540]	; (80038e0 <StartCalculatingPoz+0x308>)
 80036c4:	805a      	strh	r2, [r3, #2]
		  AccF.z = izracunajPovprecjeInt16(&AccZ,Acc.z,50);
 80036c6:	4b84      	ldr	r3, [pc, #528]	; (80038d8 <StartCalculatingPoz+0x300>)
 80036c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036cc:	2232      	movs	r2, #50	; 0x32
 80036ce:	4619      	mov	r1, r3
 80036d0:	4885      	ldr	r0, [pc, #532]	; (80038e8 <StartCalculatingPoz+0x310>)
 80036d2:	f001 f8f3 	bl	80048bc <izracunajPovprecjeInt16>
 80036d6:	4603      	mov	r3, r0
 80036d8:	461a      	mov	r2, r3
 80036da:	4b81      	ldr	r3, [pc, #516]	; (80038e0 <StartCalculatingPoz+0x308>)
 80036dc:	809a      	strh	r2, [r3, #4]
		  AccReady = 0;
 80036de:	4b7c      	ldr	r3, [pc, #496]	; (80038d0 <StartCalculatingPoz+0x2f8>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
	  }
	  if(GyroReady){
 80036e4:	4b81      	ldr	r3, [pc, #516]	; (80038ec <StartCalculatingPoz+0x314>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 826f 	beq.w	8003bce <StartCalculatingPoz+0x5f6>
		  Gyro.x -= E.Gyrox;
 80036f0:	4b78      	ldr	r3, [pc, #480]	; (80038d4 <StartCalculatingPoz+0x2fc>)
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	b219      	sxth	r1, r3
 80036f6:	4b7e      	ldr	r3, [pc, #504]	; (80038f0 <StartCalculatingPoz+0x318>)
 80036f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	b28b      	uxth	r3, r1
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	b29b      	uxth	r3, r3
 8003704:	b21a      	sxth	r2, r3
 8003706:	4b7a      	ldr	r3, [pc, #488]	; (80038f0 <StartCalculatingPoz+0x318>)
 8003708:	801a      	strh	r2, [r3, #0]
		  Gyro.y -= E.Gyroy;
 800370a:	4b72      	ldr	r3, [pc, #456]	; (80038d4 <StartCalculatingPoz+0x2fc>)
 800370c:	885b      	ldrh	r3, [r3, #2]
 800370e:	b219      	sxth	r1, r3
 8003710:	4b77      	ldr	r3, [pc, #476]	; (80038f0 <StartCalculatingPoz+0x318>)
 8003712:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003716:	b29a      	uxth	r2, r3
 8003718:	b28b      	uxth	r3, r1
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	b29b      	uxth	r3, r3
 800371e:	b21a      	sxth	r2, r3
 8003720:	4b73      	ldr	r3, [pc, #460]	; (80038f0 <StartCalculatingPoz+0x318>)
 8003722:	805a      	strh	r2, [r3, #2]
		  Gyro.z -= E.Gyroz;
 8003724:	4b6b      	ldr	r3, [pc, #428]	; (80038d4 <StartCalculatingPoz+0x2fc>)
 8003726:	889b      	ldrh	r3, [r3, #4]
 8003728:	b219      	sxth	r1, r3
 800372a:	4b71      	ldr	r3, [pc, #452]	; (80038f0 <StartCalculatingPoz+0x318>)
 800372c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003730:	b29a      	uxth	r2, r3
 8003732:	b28b      	uxth	r3, r1
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	b29b      	uxth	r3, r3
 8003738:	b21a      	sxth	r2, r3
 800373a:	4b6d      	ldr	r3, [pc, #436]	; (80038f0 <StartCalculatingPoz+0x318>)
 800373c:	809a      	strh	r2, [r3, #4]
		  GyroF.x = izracunajPovprecjeInt16(&GyroX,Gyro.x,50);
 800373e:	4b6c      	ldr	r3, [pc, #432]	; (80038f0 <StartCalculatingPoz+0x318>)
 8003740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003744:	2232      	movs	r2, #50	; 0x32
 8003746:	4619      	mov	r1, r3
 8003748:	486a      	ldr	r0, [pc, #424]	; (80038f4 <StartCalculatingPoz+0x31c>)
 800374a:	f001 f8b7 	bl	80048bc <izracunajPovprecjeInt16>
 800374e:	4603      	mov	r3, r0
 8003750:	461a      	mov	r2, r3
 8003752:	4b69      	ldr	r3, [pc, #420]	; (80038f8 <StartCalculatingPoz+0x320>)
 8003754:	801a      	strh	r2, [r3, #0]
		  GyroF.y = izracunajPovprecjeInt16(&GyroY,Gyro.y,50);
 8003756:	4b66      	ldr	r3, [pc, #408]	; (80038f0 <StartCalculatingPoz+0x318>)
 8003758:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800375c:	2232      	movs	r2, #50	; 0x32
 800375e:	4619      	mov	r1, r3
 8003760:	4866      	ldr	r0, [pc, #408]	; (80038fc <StartCalculatingPoz+0x324>)
 8003762:	f001 f8ab 	bl	80048bc <izracunajPovprecjeInt16>
 8003766:	4603      	mov	r3, r0
 8003768:	461a      	mov	r2, r3
 800376a:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <StartCalculatingPoz+0x320>)
 800376c:	805a      	strh	r2, [r3, #2]
		  GyroF.z = izracunajPovprecjeInt16(&GyroZ,Gyro.z,50);
 800376e:	4b60      	ldr	r3, [pc, #384]	; (80038f0 <StartCalculatingPoz+0x318>)
 8003770:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003774:	2232      	movs	r2, #50	; 0x32
 8003776:	4619      	mov	r1, r3
 8003778:	4861      	ldr	r0, [pc, #388]	; (8003900 <StartCalculatingPoz+0x328>)
 800377a:	f001 f89f 	bl	80048bc <izracunajPovprecjeInt16>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	4b5d      	ldr	r3, [pc, #372]	; (80038f8 <StartCalculatingPoz+0x320>)
 8003784:	809a      	strh	r2, [r3, #4]
		  GyroReady = 0;
 8003786:	4b59      	ldr	r3, [pc, #356]	; (80038ec <StartCalculatingPoz+0x314>)
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
		  //poracunamo podatke
		  float gx,gy,gz,ax,ay,az,mx,my,mz;

		  if(AccF.x == 0 && AccF.y == 0 && AccF.z==0){ax=0.0f; ay=0.0f; az=1.0f;}
 800378c:	4b54      	ldr	r3, [pc, #336]	; (80038e0 <StartCalculatingPoz+0x308>)
 800378e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d113      	bne.n	80037be <StartCalculatingPoz+0x1e6>
 8003796:	4b52      	ldr	r3, [pc, #328]	; (80038e0 <StartCalculatingPoz+0x308>)
 8003798:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10e      	bne.n	80037be <StartCalculatingPoz+0x1e6>
 80037a0:	4b4f      	ldr	r3, [pc, #316]	; (80038e0 <StartCalculatingPoz+0x308>)
 80037a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <StartCalculatingPoz+0x1e6>
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	623b      	str	r3, [r7, #32]
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	e02f      	b.n	800381e <StartCalculatingPoz+0x246>
		  else{
			  ax = ((float)AccF.x) *0.0006103515f;
 80037be:	4b48      	ldr	r3, [pc, #288]	; (80038e0 <StartCalculatingPoz+0x308>)
 80037c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037c4:	ee07 3a90 	vmov	s15, r3
 80037c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037cc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003904 <StartCalculatingPoz+0x32c>
 80037d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037d4:	edc7 7a08 	vstr	s15, [r7, #32]
			  ay = ((float)AccF.y) *0.0006103515f;
 80037d8:	4b41      	ldr	r3, [pc, #260]	; (80038e0 <StartCalculatingPoz+0x308>)
 80037da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037e6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003904 <StartCalculatingPoz+0x32c>
 80037ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ee:	edc7 7a07 	vstr	s15, [r7, #28]
			  az = ((float)AccF.z) *0.0006103515f;//+-2g  2/(2^16/2)
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <StartCalculatingPoz+0x308>)
 80037f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037f8:	ee07 3a90 	vmov	s15, r3
 80037fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003800:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003904 <StartCalculatingPoz+0x32c>
 8003804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003808:	edc7 7a06 	vstr	s15, [r7, #24]
			  normalize_v3f(&ax,&ay,&az);
 800380c:	f107 0218 	add.w	r2, r7, #24
 8003810:	f107 011c 	add.w	r1, r7, #28
 8003814:	f107 0320 	add.w	r3, r7, #32
 8003818:	4618      	mov	r0, r3
 800381a:	f7fe fe17 	bl	800244c <normalize_v3f>
		  }

		  gx = ((float)GyroF.x) * 0.0175f * DEG_TO_RAD; //deg/s obcutljivost 500dps
 800381e:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <StartCalculatingPoz+0x320>)
 8003820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003824:	ee07 3a90 	vmov	s15, r3
 8003828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800382c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003908 <StartCalculatingPoz+0x330>
 8003830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003834:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800390c <StartCalculatingPoz+0x334>
 8003838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800383c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		  gy = ((float)GyroF.y) * -0.0175f * DEG_TO_RAD;
 8003840:	4b2d      	ldr	r3, [pc, #180]	; (80038f8 <StartCalculatingPoz+0x320>)
 8003842:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800384e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003910 <StartCalculatingPoz+0x338>
 8003852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003856:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800390c <StartCalculatingPoz+0x334>
 800385a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800385e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		  gz = ((float)GyroF.z) * 0.0175f * DEG_TO_RAD;
 8003862:	4b25      	ldr	r3, [pc, #148]	; (80038f8 <StartCalculatingPoz+0x320>)
 8003864:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003868:	ee07 3a90 	vmov	s15, r3
 800386c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003870:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003908 <StartCalculatingPoz+0x330>
 8003874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003878:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800390c <StartCalculatingPoz+0x334>
 800387c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003880:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		  if(MagF.x == 0 && MagF.y == 0 && MagF.z==0){mx = 0.2f; my = 0.2f; mz = 0.1f;}
 8003884:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <StartCalculatingPoz+0x2e4>)
 8003886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d146      	bne.n	800391c <StartCalculatingPoz+0x344>
 800388e:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <StartCalculatingPoz+0x2e4>)
 8003890:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d141      	bne.n	800391c <StartCalculatingPoz+0x344>
 8003898:	4b08      	ldr	r3, [pc, #32]	; (80038bc <StartCalculatingPoz+0x2e4>)
 800389a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d13c      	bne.n	800391c <StartCalculatingPoz+0x344>
 80038a2:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <StartCalculatingPoz+0x33c>)
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <StartCalculatingPoz+0x33c>)
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <StartCalculatingPoz+0x340>)
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	e05c      	b.n	800396a <StartCalculatingPoz+0x392>
 80038b0:	20000224 	.word	0x20000224
 80038b4:	200052f4 	.word	0x200052f4
 80038b8:	200051a4 	.word	0x200051a4
 80038bc:	2000545c 	.word	0x2000545c
 80038c0:	20004d64 	.word	0x20004d64
 80038c4:	200052fc 	.word	0x200052fc
 80038c8:	20005930 	.word	0x20005930
 80038cc:	40020c00 	.word	0x40020c00
 80038d0:	20000223 	.word	0x20000223
 80038d4:	20005618 	.word	0x20005618
 80038d8:	20005608 	.word	0x20005608
 80038dc:	20005530 	.word	0x20005530
 80038e0:	20005128 	.word	0x20005128
 80038e4:	20004e54 	.word	0x20004e54
 80038e8:	20005270 	.word	0x20005270
 80038ec:	20000222 	.word	0x20000222
 80038f0:	200056a8 	.word	0x200056a8
 80038f4:	20004fac 	.word	0x20004fac
 80038f8:	20005610 	.word	0x20005610
 80038fc:	200054b0 	.word	0x200054b0
 8003900:	200057fc 	.word	0x200057fc
 8003904:	3a1fffff 	.word	0x3a1fffff
 8003908:	3c8f5c29 	.word	0x3c8f5c29
 800390c:	3c8efa35 	.word	0x3c8efa35
 8003910:	bc8f5c29 	.word	0xbc8f5c29
 8003914:	3e4ccccd 	.word	0x3e4ccccd
 8003918:	3dcccccd 	.word	0x3dcccccd
		  else{
			  mx = ((float)MagF.x) * 0.0015f; //magnetic sesnetivity 1.5 mgauss/LSB
 800391c:	4bb0      	ldr	r3, [pc, #704]	; (8003be0 <StartCalculatingPoz+0x608>)
 800391e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800392a:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8003be4 <StartCalculatingPoz+0x60c>
 800392e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003932:	edc7 7a05 	vstr	s15, [r7, #20]
			  my = ((float)MagF.y) * 0.0015f;
 8003936:	4baa      	ldr	r3, [pc, #680]	; (8003be0 <StartCalculatingPoz+0x608>)
 8003938:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003944:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8003be4 <StartCalculatingPoz+0x60c>
 8003948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800394c:	edc7 7a04 	vstr	s15, [r7, #16]
			  mz = ((float)MagF.z) * 0.0015f;
 8003950:	4ba3      	ldr	r3, [pc, #652]	; (8003be0 <StartCalculatingPoz+0x608>)
 8003952:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800395e:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8003be4 <StartCalculatingPoz+0x60c>
 8003962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003966:	edc7 7a03 	vstr	s15, [r7, #12]
		  }
		  normalize_v3f(&mx,&my,&mz);
 800396a:	f107 020c 	add.w	r2, r7, #12
 800396e:	f107 0110 	add.w	r1, r7, #16
 8003972:	f107 0314 	add.w	r3, r7, #20
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe fd68 	bl	800244c <normalize_v3f>

		  MadgwickAHRSupdate(gx,gy,gz,ax,ay,az,mx,my,mz);
 800397c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003980:	ed97 7a07 	vldr	s14, [r7, #28]
 8003984:	edd7 6a06 	vldr	s13, [r7, #24]
 8003988:	ed97 6a05 	vldr	s12, [r7, #20]
 800398c:	edd7 5a04 	vldr	s11, [r7, #16]
 8003990:	ed97 5a03 	vldr	s10, [r7, #12]
 8003994:	eeb0 4a45 	vmov.f32	s8, s10
 8003998:	eef0 3a65 	vmov.f32	s7, s11
 800399c:	eeb0 3a46 	vmov.f32	s6, s12
 80039a0:	eef0 2a66 	vmov.f32	s5, s13
 80039a4:	eeb0 2a47 	vmov.f32	s4, s14
 80039a8:	eef0 1a67 	vmov.f32	s3, s15
 80039ac:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 80039b0:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 80039b4:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80039b8:	f7fd fa4a 	bl	8000e50 <MadgwickAHRSupdate>
		  P.heading = atan2(2*(q0*q3+q1*q2),1-2*(q2*q2+q3*q3))*(180/PI);
 80039bc:	4b8a      	ldr	r3, [pc, #552]	; (8003be8 <StartCalculatingPoz+0x610>)
 80039be:	ed93 7a00 	vldr	s14, [r3]
 80039c2:	4b8a      	ldr	r3, [pc, #552]	; (8003bec <StartCalculatingPoz+0x614>)
 80039c4:	edd3 7a00 	vldr	s15, [r3]
 80039c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039cc:	4b88      	ldr	r3, [pc, #544]	; (8003bf0 <StartCalculatingPoz+0x618>)
 80039ce:	edd3 6a00 	vldr	s13, [r3]
 80039d2:	4b88      	ldr	r3, [pc, #544]	; (8003bf4 <StartCalculatingPoz+0x61c>)
 80039d4:	edd3 7a00 	vldr	s15, [r3]
 80039d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80039e4:	ee17 0a90 	vmov	r0, s15
 80039e8:	f7fc fd5e 	bl	80004a8 <__aeabi_f2d>
 80039ec:	4604      	mov	r4, r0
 80039ee:	460d      	mov	r5, r1
 80039f0:	4b80      	ldr	r3, [pc, #512]	; (8003bf4 <StartCalculatingPoz+0x61c>)
 80039f2:	ed93 7a00 	vldr	s14, [r3]
 80039f6:	4b7f      	ldr	r3, [pc, #508]	; (8003bf4 <StartCalculatingPoz+0x61c>)
 80039f8:	edd3 7a00 	vldr	s15, [r3]
 80039fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a00:	4b7a      	ldr	r3, [pc, #488]	; (8003bec <StartCalculatingPoz+0x614>)
 8003a02:	edd3 6a00 	vldr	s13, [r3]
 8003a06:	4b79      	ldr	r3, [pc, #484]	; (8003bec <StartCalculatingPoz+0x614>)
 8003a08:	edd3 7a00 	vldr	s15, [r3]
 8003a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a20:	ee17 0a90 	vmov	r0, s15
 8003a24:	f7fc fd40 	bl	80004a8 <__aeabi_f2d>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	ec43 2b11 	vmov	d1, r2, r3
 8003a30:	ec45 4b10 	vmov	d0, r4, r5
 8003a34:	f00e fa1a 	bl	8011e6c <atan2>
 8003a38:	ec51 0b10 	vmov	r0, r1, d0
 8003a3c:	a366      	add	r3, pc, #408	; (adr r3, 8003bd8 <StartCalculatingPoz+0x600>)
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f7fc fd89 	bl	8000558 <__aeabi_dmul>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f7fd f833 	bl	8000ab8 <__aeabi_d2f>
 8003a52:	4603      	mov	r3, r0
 8003a54:	4a68      	ldr	r2, [pc, #416]	; (8003bf8 <StartCalculatingPoz+0x620>)
 8003a56:	60d3      	str	r3, [r2, #12]
		  P.roll = atan2(2*(q0*q1+q2*q3),1-2*(q1*q1+q2*q2))*(180/PI);
 8003a58:	4b63      	ldr	r3, [pc, #396]	; (8003be8 <StartCalculatingPoz+0x610>)
 8003a5a:	ed93 7a00 	vldr	s14, [r3]
 8003a5e:	4b64      	ldr	r3, [pc, #400]	; (8003bf0 <StartCalculatingPoz+0x618>)
 8003a60:	edd3 7a00 	vldr	s15, [r3]
 8003a64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a68:	4b62      	ldr	r3, [pc, #392]	; (8003bf4 <StartCalculatingPoz+0x61c>)
 8003a6a:	edd3 6a00 	vldr	s13, [r3]
 8003a6e:	4b5f      	ldr	r3, [pc, #380]	; (8003bec <StartCalculatingPoz+0x614>)
 8003a70:	edd3 7a00 	vldr	s15, [r3]
 8003a74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a7c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a80:	ee17 0a90 	vmov	r0, s15
 8003a84:	f7fc fd10 	bl	80004a8 <__aeabi_f2d>
 8003a88:	4604      	mov	r4, r0
 8003a8a:	460d      	mov	r5, r1
 8003a8c:	4b58      	ldr	r3, [pc, #352]	; (8003bf0 <StartCalculatingPoz+0x618>)
 8003a8e:	ed93 7a00 	vldr	s14, [r3]
 8003a92:	4b57      	ldr	r3, [pc, #348]	; (8003bf0 <StartCalculatingPoz+0x618>)
 8003a94:	edd3 7a00 	vldr	s15, [r3]
 8003a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a9c:	4b55      	ldr	r3, [pc, #340]	; (8003bf4 <StartCalculatingPoz+0x61c>)
 8003a9e:	edd3 6a00 	vldr	s13, [r3]
 8003aa2:	4b54      	ldr	r3, [pc, #336]	; (8003bf4 <StartCalculatingPoz+0x61c>)
 8003aa4:	edd3 7a00 	vldr	s15, [r3]
 8003aa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ab0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003abc:	ee17 0a90 	vmov	r0, s15
 8003ac0:	f7fc fcf2 	bl	80004a8 <__aeabi_f2d>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	ec43 2b11 	vmov	d1, r2, r3
 8003acc:	ec45 4b10 	vmov	d0, r4, r5
 8003ad0:	f00e f9cc 	bl	8011e6c <atan2>
 8003ad4:	ec51 0b10 	vmov	r0, r1, d0
 8003ad8:	a33f      	add	r3, pc, #252	; (adr r3, 8003bd8 <StartCalculatingPoz+0x600>)
 8003ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ade:	f7fc fd3b 	bl	8000558 <__aeabi_dmul>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f7fc ffe5 	bl	8000ab8 <__aeabi_d2f>
 8003aee:	4603      	mov	r3, r0
 8003af0:	4a41      	ldr	r2, [pc, #260]	; (8003bf8 <StartCalculatingPoz+0x620>)
 8003af2:	6093      	str	r3, [r2, #8]
		  P.pitch = asin(2*(q0*q2 - q3*q1))*(180/PI);
 8003af4:	4b3c      	ldr	r3, [pc, #240]	; (8003be8 <StartCalculatingPoz+0x610>)
 8003af6:	ed93 7a00 	vldr	s14, [r3]
 8003afa:	4b3e      	ldr	r3, [pc, #248]	; (8003bf4 <StartCalculatingPoz+0x61c>)
 8003afc:	edd3 7a00 	vldr	s15, [r3]
 8003b00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b04:	4b39      	ldr	r3, [pc, #228]	; (8003bec <StartCalculatingPoz+0x614>)
 8003b06:	edd3 6a00 	vldr	s13, [r3]
 8003b0a:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <StartCalculatingPoz+0x618>)
 8003b0c:	edd3 7a00 	vldr	s15, [r3]
 8003b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b1c:	ee17 0a90 	vmov	r0, s15
 8003b20:	f7fc fcc2 	bl	80004a8 <__aeabi_f2d>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	ec43 2b10 	vmov	d0, r2, r3
 8003b2c:	f00e f964 	bl	8011df8 <asin>
 8003b30:	ec51 0b10 	vmov	r0, r1, d0
 8003b34:	a328      	add	r3, pc, #160	; (adr r3, 8003bd8 <StartCalculatingPoz+0x600>)
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f7fc fd0d 	bl	8000558 <__aeabi_dmul>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	f7fc ffb7 	bl	8000ab8 <__aeabi_d2f>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4a2a      	ldr	r2, [pc, #168]	; (8003bf8 <StartCalculatingPoz+0x620>)
 8003b4e:	6053      	str	r3, [r2, #4]
		  P.Q0 = q0; P.Q1 = q1; P.Q2 = q2; P.Q3 = q3;
 8003b50:	4b25      	ldr	r3, [pc, #148]	; (8003be8 <StartCalculatingPoz+0x610>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a28      	ldr	r2, [pc, #160]	; (8003bf8 <StartCalculatingPoz+0x620>)
 8003b56:	6113      	str	r3, [r2, #16]
 8003b58:	4b25      	ldr	r3, [pc, #148]	; (8003bf0 <StartCalculatingPoz+0x618>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a26      	ldr	r2, [pc, #152]	; (8003bf8 <StartCalculatingPoz+0x620>)
 8003b5e:	6153      	str	r3, [r2, #20]
 8003b60:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <StartCalculatingPoz+0x61c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a24      	ldr	r2, [pc, #144]	; (8003bf8 <StartCalculatingPoz+0x620>)
 8003b66:	6193      	str	r3, [r2, #24]
 8003b68:	4b20      	ldr	r3, [pc, #128]	; (8003bec <StartCalculatingPoz+0x614>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a22      	ldr	r2, [pc, #136]	; (8003bf8 <StartCalculatingPoz+0x620>)
 8003b6e:	61d3      	str	r3, [r2, #28]

		  for(int n=4; n<30; n++){ //pripravi podatke za spi
 8003b70:	2304      	movs	r3, #4
 8003b72:	637b      	str	r3, [r7, #52]	; 0x34
 8003b74:	e00a      	b.n	8003b8c <StartCalculatingPoz+0x5b4>
			  SpiTxData[n-4] = ((uint8_t*)&P)[n];
 8003b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b78:	4a1f      	ldr	r2, [pc, #124]	; (8003bf8 <StartCalculatingPoz+0x620>)
 8003b7a:	441a      	add	r2, r3
 8003b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7e:	3b04      	subs	r3, #4
 8003b80:	7811      	ldrb	r1, [r2, #0]
 8003b82:	4a1e      	ldr	r2, [pc, #120]	; (8003bfc <StartCalculatingPoz+0x624>)
 8003b84:	54d1      	strb	r1, [r2, r3]
		  for(int n=4; n<30; n++){ //pripravi podatke za spi
 8003b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b88:	3301      	adds	r3, #1
 8003b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8e:	2b1d      	cmp	r3, #29
 8003b90:	ddf1      	ble.n	8003b76 <StartCalculatingPoz+0x59e>
		  }
		  HAL_SPI_TransmitReceive_DMA(&hspi5, SpiTxData, SpiRxData, 2); //beremo po dva
 8003b92:	2302      	movs	r3, #2
 8003b94:	4a1a      	ldr	r2, [pc, #104]	; (8003c00 <StartCalculatingPoz+0x628>)
 8003b96:	4919      	ldr	r1, [pc, #100]	; (8003bfc <StartCalculatingPoz+0x624>)
 8003b98:	481a      	ldr	r0, [pc, #104]	; (8003c04 <StartCalculatingPoz+0x62c>)
 8003b9a:	f006 fae3 	bl	800a164 <HAL_SPI_TransmitReceive_DMA>
		  if(SPIcommandRecived){
 8003b9e:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <StartCalculatingPoz+0x630>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d012      	beq.n	8003bce <StartCalculatingPoz+0x5f6>
			  SPIcommandRecived = 0;
 8003ba8:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <StartCalculatingPoz+0x630>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	701a      	strb	r2, [r3, #0]
			  uint8_t nbytes = SpiRxData[0];
 8003bae:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <StartCalculatingPoz+0x628>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  if(nbytes){
 8003bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <StartCalculatingPoz+0x5f6>
				  HAL_SPI_TransmitReceive_DMA(&hspi5, SpiTxData, SpiRxData, nbytes);
 8003bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	4a0e      	ldr	r2, [pc, #56]	; (8003c00 <StartCalculatingPoz+0x628>)
 8003bc6:	490d      	ldr	r1, [pc, #52]	; (8003bfc <StartCalculatingPoz+0x624>)
 8003bc8:	480e      	ldr	r0, [pc, #56]	; (8003c04 <StartCalculatingPoz+0x62c>)
 8003bca:	f006 facb 	bl	800a164 <HAL_SPI_TransmitReceive_DMA>
			  }
		  }
	  }

	  osDelay(1);
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f00a ff42 	bl	800ea58 <osDelay>
	  if(MagReady){
 8003bd4:	e506      	b.n	80035e4 <StartCalculatingPoz+0xc>
 8003bd6:	bf00      	nop
 8003bd8:	00000000 	.word	0x00000000
 8003bdc:	404ca5dc 	.word	0x404ca5dc
 8003be0:	2000545c 	.word	0x2000545c
 8003be4:	3ac49ba6 	.word	0x3ac49ba6
 8003be8:	20000004 	.word	0x20000004
 8003bec:	2000021c 	.word	0x2000021c
 8003bf0:	20000214 	.word	0x20000214
 8003bf4:	20000218 	.word	0x20000218
 8003bf8:	20005930 	.word	0x20005930
 8003bfc:	2000587c 	.word	0x2000587c
 8003c00:	20005184 	.word	0x20005184
 8003c04:	20004ed4 	.word	0x20004ed4
 8003c08:	20000225 	.word	0x20000225

08003c0c <StartRecivingCommandsNRF24>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecivingCommandsNRF24 */
void StartRecivingCommandsNRF24(void *argument)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRecivingCommandsNRF24 */
  /* Infinite loop */
  for(;;)
  {
	  if(nRF24_interupt && nRF24_status){
 8003c14:	4b66      	ldr	r3, [pc, #408]	; (8003db0 <StartRecivingCommandsNRF24+0x1a4>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80c4 	beq.w	8003da8 <StartRecivingCommandsNRF24+0x19c>
 8003c20:	4b64      	ldr	r3, [pc, #400]	; (8003db4 <StartRecivingCommandsNRF24+0x1a8>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80be 	beq.w	8003da8 <StartRecivingCommandsNRF24+0x19c>
		  uint8_t status = nRF24_GetStatus();
 8003c2c:	f000 fc35 	bl	800449a <nRF24_GetStatus>
 8003c30:	4603      	mov	r3, r0
 8003c32:	73fb      	strb	r3, [r7, #15]
		  nRF24_ClearIRQFlags();
 8003c34:	f000 fc49 	bl	80044ca <nRF24_ClearIRQFlags>
		  nRF24_interupt = 0;
 8003c38:	4b5d      	ldr	r3, [pc, #372]	; (8003db0 <StartRecivingCommandsNRF24+0x1a4>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
		  if (status != nRF24_STATUS_RXFIFO_EMPTY) {
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	f000 80b1 	beq.w	8003da8 <StartRecivingCommandsNRF24+0x19c>
			  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);

			  pipe = nRF24_ReadPayload((uint8_t*)(&robotPay), &payload_length);
 8003c46:	495c      	ldr	r1, [pc, #368]	; (8003db8 <StartRecivingCommandsNRF24+0x1ac>)
 8003c48:	485c      	ldr	r0, [pc, #368]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003c4a:	f000 fcaf 	bl	80045ac <nRF24_ReadPayload>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b5b      	ldr	r3, [pc, #364]	; (8003dc0 <StartRecivingCommandsNRF24+0x1b4>)
 8003c54:	701a      	strb	r2, [r3, #0]
			  nRF24_ClearIRQFlags();
 8003c56:	f000 fc38 	bl	80044ca <nRF24_ClearIRQFlags>

			  uint8_t CRC_calc = (robotPay.x1 + robotPay.y1 + robotPay.x2 + robotPay.y2 + robotPay.speed);
 8003c5a:	4b58      	ldr	r3, [pc, #352]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003c5c:	f993 3000 	ldrsb.w	r3, [r3]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	4b56      	ldr	r3, [pc, #344]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003c64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	4b53      	ldr	r3, [pc, #332]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003c70:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	4b50      	ldr	r3, [pc, #320]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003c7c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4b4d      	ldr	r3, [pc, #308]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003c88:	791b      	ldrb	r3, [r3, #4]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	73bb      	strb	r3, [r7, #14]
			  if(robotPay.crc == CRC_calc){
 8003c8e:	4b4b      	ldr	r3, [pc, #300]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003c90:	795b      	ldrb	r3, [r3, #5]
 8003c92:	7bba      	ldrb	r2, [r7, #14]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	f040 8087 	bne.w	8003da8 <StartRecivingCommandsNRF24+0x19c>
				  //uporabi podatke
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ca0:	4848      	ldr	r0, [pc, #288]	; (8003dc4 <StartRecivingCommandsNRF24+0x1b8>)
 8003ca2:	f002 f9c1 	bl	8006028 <HAL_GPIO_WritePin>

				  timeSinceLastCommand = HAL_GetTick();
 8003ca6:	f001 fba1 	bl	80053ec <HAL_GetTick>
 8003caa:	4603      	mov	r3, r0
 8003cac:	4a46      	ldr	r2, [pc, #280]	; (8003dc8 <StartRecivingCommandsNRF24+0x1bc>)
 8003cae:	6013      	str	r3, [r2, #0]
				  float speed = SPEEDMOD*(float)robotPay.speed/255;
 8003cb0:	4b42      	ldr	r3, [pc, #264]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003cb2:	791b      	ldrb	r3, [r3, #4]
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cbc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003cc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003cc4:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003dcc <StartRecivingCommandsNRF24+0x1c0>
 8003cc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ccc:	edc7 7a02 	vstr	s15, [r7, #8]
				  motorRF.targetVel = speed*(float)(robotPay.y1-robotPay.x1+robotPay.x2)/128;
 8003cd0:	4b3a      	ldr	r3, [pc, #232]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003cd2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4b38      	ldr	r3, [pc, #224]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003cda:	f993 3000 	ldrsb.w	r3, [r3]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	4a36      	ldr	r2, [pc, #216]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003ce2:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	ee07 3a90 	vmov	s15, r3
 8003cec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cf8:	eddf 6a35 	vldr	s13, [pc, #212]	; 8003dd0 <StartRecivingCommandsNRF24+0x1c4>
 8003cfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d00:	4b34      	ldr	r3, [pc, #208]	; (8003dd4 <StartRecivingCommandsNRF24+0x1c8>)
 8003d02:	edc3 7a03 	vstr	s15, [r3, #12]
				  motorLF.targetVel = speed*(float)(robotPay.y1+robotPay.x1-robotPay.x2)/128;
 8003d06:	4b2d      	ldr	r3, [pc, #180]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003d08:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b2b      	ldr	r3, [pc, #172]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003d10:	f993 3000 	ldrsb.w	r3, [r3]
 8003d14:	4413      	add	r3, r2
 8003d16:	4a29      	ldr	r2, [pc, #164]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003d18:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d26:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d2e:	eddf 6a28 	vldr	s13, [pc, #160]	; 8003dd0 <StartRecivingCommandsNRF24+0x1c4>
 8003d32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d36:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <StartRecivingCommandsNRF24+0x1cc>)
 8003d38:	edc3 7a03 	vstr	s15, [r3, #12]
				  motorLB.targetVel = speed*(float)(robotPay.y1+robotPay.x1+robotPay.x2)/128;
 8003d3c:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003d3e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003d42:	461a      	mov	r2, r3
 8003d44:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003d46:	f993 3000 	ldrsb.w	r3, [r3]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003d4e:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8003d52:	4413      	add	r3, r2
 8003d54:	ee07 3a90 	vmov	s15, r3
 8003d58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d64:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003dd0 <StartRecivingCommandsNRF24+0x1c4>
 8003d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <StartRecivingCommandsNRF24+0x1d0>)
 8003d6e:	edc3 7a03 	vstr	s15, [r3, #12]
				  motorRB.targetVel = speed*(float)(robotPay.y1-robotPay.x1-robotPay.x2)/128;
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003d74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003d7c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	4a0e      	ldr	r2, [pc, #56]	; (8003dbc <StartRecivingCommandsNRF24+0x1b0>)
 8003d84:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d92:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d9a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003dd0 <StartRecivingCommandsNRF24+0x1c4>
 8003d9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <StartRecivingCommandsNRF24+0x1d4>)
 8003da4:	edc3 7a03 	vstr	s15, [r3, #12]
				  motorLB.targetVel = speed*(float)(robotPay.x2)/128;
				  */
			  }
		  }
	  }
	  osDelay(50);
 8003da8:	2032      	movs	r0, #50	; 0x32
 8003daa:	f00a fe55 	bl	800ea58 <osDelay>
	  if(nRF24_interupt && nRF24_status){
 8003dae:	e731      	b.n	8003c14 <StartRecivingCommandsNRF24+0x8>
 8003db0:	20000220 	.word	0x20000220
 8003db4:	20000221 	.word	0x20000221
 8003db8:	20000008 	.word	0x20000008
 8003dbc:	2000517c 	.word	0x2000517c
 8003dc0:	20005178 	.word	0x20005178
 8003dc4:	40020c00 	.word	0x40020c00
 8003dc8:	20000228 	.word	0x20000228
 8003dcc:	437f0000 	.word	0x437f0000
 8003dd0:	43000000 	.word	0x43000000
 8003dd4:	200058e4 	.word	0x200058e4
 8003dd8:	20005464 	.word	0x20005464
 8003ddc:	20005224 	.word	0x20005224
 8003de0:	200057b0 	.word	0x200057b0

08003de4 <StartMotorControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorControl */
void StartMotorControl(void *argument)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorControl */
  /* Infinite loop */
  for(;;)
  {
	  if((HAL_GetTick() - timeSinceLastCommand)>200){
 8003dec:	f001 fafe 	bl	80053ec <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b29      	ldr	r3, [pc, #164]	; (8003e98 <StartMotorControl+0xb4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2bc8      	cmp	r3, #200	; 0xc8
 8003dfa:	d935      	bls.n	8003e68 <StartMotorControl+0x84>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e02:	4826      	ldr	r0, [pc, #152]	; (8003e9c <StartMotorControl+0xb8>)
 8003e04:	f002 f910 	bl	8006028 <HAL_GPIO_WritePin>
		  nastaviMotor(RF,0); motorRF.integralError = 0; motorRF.targetVel = 0;
 8003e08:	2100      	movs	r1, #0
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	f000 fd9a 	bl	8004944 <nastaviMotor>
 8003e10:	4b23      	ldr	r3, [pc, #140]	; (8003ea0 <StartMotorControl+0xbc>)
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	619a      	str	r2, [r3, #24]
 8003e18:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <StartMotorControl+0xbc>)
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	60da      	str	r2, [r3, #12]
		  nastaviMotor(LF,0); motorLF.integralError = 0; motorLF.targetVel = 0;
 8003e20:	2100      	movs	r1, #0
 8003e22:	2003      	movs	r0, #3
 8003e24:	f000 fd8e 	bl	8004944 <nastaviMotor>
 8003e28:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <StartMotorControl+0xc0>)
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	619a      	str	r2, [r3, #24]
 8003e30:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <StartMotorControl+0xc0>)
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	60da      	str	r2, [r3, #12]
		  nastaviMotor(LB,0); motorLB.integralError = 0; motorLB.targetVel = 0;
 8003e38:	2100      	movs	r1, #0
 8003e3a:	2002      	movs	r0, #2
 8003e3c:	f000 fd82 	bl	8004944 <nastaviMotor>
 8003e40:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <StartMotorControl+0xc4>)
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	619a      	str	r2, [r3, #24]
 8003e48:	4b17      	ldr	r3, [pc, #92]	; (8003ea8 <StartMotorControl+0xc4>)
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	60da      	str	r2, [r3, #12]
		  nastaviMotor(RB,0); motorRB.integralError = 0; motorRB.targetVel = 0;
 8003e50:	2100      	movs	r1, #0
 8003e52:	2001      	movs	r0, #1
 8003e54:	f000 fd76 	bl	8004944 <nastaviMotor>
 8003e58:	4b14      	ldr	r3, [pc, #80]	; (8003eac <StartMotorControl+0xc8>)
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	619a      	str	r2, [r3, #24]
 8003e60:	4b12      	ldr	r3, [pc, #72]	; (8003eac <StartMotorControl+0xc8>)
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	60da      	str	r2, [r3, #12]
	  }
	  speedControl(&motorLB,0.01);
 8003e68:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003eb0 <StartMotorControl+0xcc>
 8003e6c:	480e      	ldr	r0, [pc, #56]	; (8003ea8 <StartMotorControl+0xc4>)
 8003e6e:	f7fe fb8b 	bl	8002588 <speedControl>
	  speedControl(&motorLF,0.01);
 8003e72:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8003eb0 <StartMotorControl+0xcc>
 8003e76:	480b      	ldr	r0, [pc, #44]	; (8003ea4 <StartMotorControl+0xc0>)
 8003e78:	f7fe fb86 	bl	8002588 <speedControl>
	  speedControl(&motorRB,0.01);
 8003e7c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003eb0 <StartMotorControl+0xcc>
 8003e80:	480a      	ldr	r0, [pc, #40]	; (8003eac <StartMotorControl+0xc8>)
 8003e82:	f7fe fb81 	bl	8002588 <speedControl>
	  speedControl(&motorRF,0.01);
 8003e86:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8003eb0 <StartMotorControl+0xcc>
 8003e8a:	4805      	ldr	r0, [pc, #20]	; (8003ea0 <StartMotorControl+0xbc>)
 8003e8c:	f7fe fb7c 	bl	8002588 <speedControl>
	  osDelay(10);
 8003e90:	200a      	movs	r0, #10
 8003e92:	f00a fde1 	bl	800ea58 <osDelay>
	  if((HAL_GetTick() - timeSinceLastCommand)>200){
 8003e96:	e7a9      	b.n	8003dec <StartMotorControl+0x8>
 8003e98:	20000228 	.word	0x20000228
 8003e9c:	40020c00 	.word	0x40020c00
 8003ea0:	200058e4 	.word	0x200058e4
 8003ea4:	20005464 	.word	0x20005464
 8003ea8:	20005224 	.word	0x20005224
 8003eac:	200057b0 	.word	0x200057b0
 8003eb0:	3c23d70a 	.word	0x3c23d70a

08003eb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d101      	bne.n	8003eca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003ec6:	f001 fa7d 	bl	80053c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40014800 	.word	0x40014800

08003ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003edc:	b672      	cpsid	i
}
 8003ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ee6:	4815      	ldr	r0, [pc, #84]	; (8003f3c <Error_Handler+0x64>)
 8003ee8:	f002 f89e 	bl	8006028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8003eec:	2201      	movs	r2, #1
 8003eee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ef2:	4812      	ldr	r0, [pc, #72]	; (8003f3c <Error_Handler+0x64>)
 8003ef4:	f002 f898 	bl	8006028 <HAL_GPIO_WritePin>
  nastaviMotor(RF,0); motorRF.integralError = 0;
 8003ef8:	2100      	movs	r1, #0
 8003efa:	2000      	movs	r0, #0
 8003efc:	f000 fd22 	bl	8004944 <nastaviMotor>
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <Error_Handler+0x68>)
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	619a      	str	r2, [r3, #24]
  nastaviMotor(LF,0); motorLF.integralError = 0;
 8003f08:	2100      	movs	r1, #0
 8003f0a:	2003      	movs	r0, #3
 8003f0c:	f000 fd1a 	bl	8004944 <nastaviMotor>
 8003f10:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <Error_Handler+0x6c>)
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	619a      	str	r2, [r3, #24]
  nastaviMotor(LB,0); motorLB.integralError = 0;
 8003f18:	2100      	movs	r1, #0
 8003f1a:	2002      	movs	r0, #2
 8003f1c:	f000 fd12 	bl	8004944 <nastaviMotor>
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <Error_Handler+0x70>)
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	619a      	str	r2, [r3, #24]
  nastaviMotor(RB,0); motorRB.integralError = 0;
 8003f28:	2100      	movs	r1, #0
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f000 fd0a 	bl	8004944 <nastaviMotor>
 8003f30:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <Error_Handler+0x74>)
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
  while (1)
 8003f38:	e7fe      	b.n	8003f38 <Error_Handler+0x60>
 8003f3a:	bf00      	nop
 8003f3c:	40020c00 	.word	0x40020c00
 8003f40:	200058e4 	.word	0x200058e4
 8003f44:	20005464 	.word	0x20005464
 8003f48:	20005224 	.word	0x20005224
 8003f4c:	200057b0 	.word	0x200057b0

08003f50 <nRF24_CSN_L>:

static inline void nRF24_CSN_L() {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8003f54:	2200      	movs	r2, #0
 8003f56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f5a:	4802      	ldr	r0, [pc, #8]	; (8003f64 <nRF24_CSN_L+0x14>)
 8003f5c:	f002 f864 	bl	8006028 <HAL_GPIO_WritePin>
}
 8003f60:	bf00      	nop
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40020c00 	.word	0x40020c00

08003f68 <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f72:	4802      	ldr	r0, [pc, #8]	; (8003f7c <nRF24_CSN_H+0x14>)
 8003f74:	f002 f858 	bl	8006028 <HAL_GPIO_WritePin>
}
 8003f78:	bf00      	nop
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40020c00 	.word	0x40020c00

08003f80 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	4603      	mov	r3, r0
 8003f88:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi2,&data,&result,1,2000)!=HAL_OK) {  //<-spi handle --------change
 8003f8a:	f107 020f 	add.w	r2, r7, #15
 8003f8e:	1df9      	adds	r1, r7, #7
 8003f90:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	2301      	movs	r3, #1
 8003f98:	4806      	ldr	r0, [pc, #24]	; (8003fb4 <nRF24_LL_RW+0x34>)
 8003f9a:	f005 ff41 	bl	8009e20 <HAL_SPI_TransmitReceive>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <nRF24_LL_RW+0x28>
        Error_Handler();
 8003fa4:	f7ff ff98 	bl	8003ed8 <Error_Handler>
    };
    return result;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20004de8 	.word	0x20004de8

08003fb8 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8003fc2:	f7ff ffc5 	bl	8003f50 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ffd6 	bl	8003f80 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8003fd4:	20ff      	movs	r0, #255	; 0xff
 8003fd6:	f7ff ffd3 	bl	8003f80 <nRF24_LL_RW>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8003fde:	f7ff ffc3 	bl	8003f68 <nRF24_CSN_H>

	return value;
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	460a      	mov	r2, r1
 8003ff6:	71fb      	strb	r3, [r7, #7]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8003ffc:	f7ff ffa8 	bl	8003f50 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	2b1f      	cmp	r3, #31
 8004004:	d810      	bhi.n	8004028 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8004006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	b25b      	sxtb	r3, r3
 8004010:	f043 0320 	orr.w	r3, r3, #32
 8004014:	b25b      	sxtb	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ffb1 	bl	8003f80 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 800401e:	79bb      	ldrb	r3, [r7, #6]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ffad 	bl	8003f80 <nRF24_LL_RW>
 8004026:	e013      	b.n	8004050 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ffa8 	bl	8003f80 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	2be1      	cmp	r3, #225	; 0xe1
 8004034:	d00c      	beq.n	8004050 <nRF24_WriteReg+0x64>
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	2be2      	cmp	r3, #226	; 0xe2
 800403a:	d009      	beq.n	8004050 <nRF24_WriteReg+0x64>
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	2be3      	cmp	r3, #227	; 0xe3
 8004040:	d006      	beq.n	8004050 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	2bff      	cmp	r3, #255	; 0xff
 8004046:	d003      	beq.n	8004050 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8004048:	79bb      	ldrb	r3, [r7, #6]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff ff98 	bl	8003f80 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8004050:	f7ff ff8a 	bl	8003f68 <nRF24_CSN_H>
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 800405c:	b590      	push	{r4, r7, lr}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	6039      	str	r1, [r7, #0]
 8004066:	71fb      	strb	r3, [r7, #7]
 8004068:	4613      	mov	r3, r2
 800406a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 800406c:	f7ff ff70 	bl	8003f50 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff ff84 	bl	8003f80 <nRF24_LL_RW>
	while (count--) {
 8004078:	e007      	b.n	800408a <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 800407a:	683c      	ldr	r4, [r7, #0]
 800407c:	1c63      	adds	r3, r4, #1
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	20ff      	movs	r0, #255	; 0xff
 8004082:	f7ff ff7d 	bl	8003f80 <nRF24_LL_RW>
 8004086:	4603      	mov	r3, r0
 8004088:	7023      	strb	r3, [r4, #0]
	while (count--) {
 800408a:	79bb      	ldrb	r3, [r7, #6]
 800408c:	1e5a      	subs	r2, r3, #1
 800408e:	71ba      	strb	r2, [r7, #6]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f2      	bne.n	800407a <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8004094:	f7ff ff68 	bl	8003f68 <nRF24_CSN_H>
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	bd90      	pop	{r4, r7, pc}

080040a0 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	6039      	str	r1, [r7, #0]
 80040aa:	71fb      	strb	r3, [r7, #7]
 80040ac:	4613      	mov	r3, r2
 80040ae:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80040b0:	f7ff ff4e 	bl	8003f50 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff ff62 	bl	8003f80 <nRF24_LL_RW>
	while (count--) {
 80040bc:	e006      	b.n	80040cc <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	603a      	str	r2, [r7, #0]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff ff5a 	bl	8003f80 <nRF24_LL_RW>
	while (count--) {
 80040cc:	79bb      	ldrb	r3, [r7, #6]
 80040ce:	1e5a      	subs	r2, r3, #1
 80040d0:	71ba      	strb	r2, [r7, #6]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f3      	bne.n	80040be <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 80040d6:	f7ff ff47 	bl	8003f68 <nRF24_CSN_H>
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 80040e2:	b580      	push	{r7, lr}
 80040e4:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 80040e6:	2108      	movs	r1, #8
 80040e8:	2000      	movs	r0, #0
 80040ea:	f7ff ff7f 	bl	8003fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 80040ee:	213f      	movs	r1, #63	; 0x3f
 80040f0:	2001      	movs	r0, #1
 80040f2:	f7ff ff7b 	bl	8003fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 80040f6:	2103      	movs	r1, #3
 80040f8:	2002      	movs	r0, #2
 80040fa:	f7ff ff77 	bl	8003fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 80040fe:	2103      	movs	r1, #3
 8004100:	2003      	movs	r0, #3
 8004102:	f7ff ff73 	bl	8003fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8004106:	2103      	movs	r1, #3
 8004108:	2004      	movs	r0, #4
 800410a:	f7ff ff6f 	bl	8003fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 800410e:	2102      	movs	r1, #2
 8004110:	2005      	movs	r0, #5
 8004112:	f7ff ff6b 	bl	8003fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8004116:	210e      	movs	r1, #14
 8004118:	2006      	movs	r0, #6
 800411a:	f7ff ff67 	bl	8003fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 800411e:	2100      	movs	r1, #0
 8004120:	2007      	movs	r0, #7
 8004122:	f7ff ff63 	bl	8003fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8004126:	2100      	movs	r1, #0
 8004128:	2011      	movs	r0, #17
 800412a:	f7ff ff5f 	bl	8003fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800412e:	2100      	movs	r1, #0
 8004130:	2012      	movs	r0, #18
 8004132:	f7ff ff5b 	bl	8003fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8004136:	2100      	movs	r1, #0
 8004138:	2013      	movs	r0, #19
 800413a:	f7ff ff57 	bl	8003fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800413e:	2100      	movs	r1, #0
 8004140:	2014      	movs	r0, #20
 8004142:	f7ff ff53 	bl	8003fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8004146:	2100      	movs	r1, #0
 8004148:	2015      	movs	r0, #21
 800414a:	f7ff ff4f 	bl	8003fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800414e:	2100      	movs	r1, #0
 8004150:	2016      	movs	r0, #22
 8004152:	f7ff ff4b 	bl	8003fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8004156:	2100      	movs	r1, #0
 8004158:	201c      	movs	r0, #28
 800415a:	f7ff ff47 	bl	8003fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 800415e:	2100      	movs	r1, #0
 8004160:	201d      	movs	r0, #29
 8004162:	f7ff ff43 	bl	8003fec <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8004166:	f000 f9a8 	bl	80044ba <nRF24_FlushRX>
	nRF24_FlushTX();
 800416a:	f000 f99e 	bl	80044aa <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 800416e:	f000 f9ac 	bl	80044ca <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8004172:	f7ff fef9 	bl	8003f68 <nRF24_CSN_H>
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8004182:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <nRF24_Check+0x58>)
 8004184:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8004186:	2205      	movs	r2, #5
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	2030      	movs	r0, #48	; 0x30
 800418c:	f7ff ff88 	bl	80040a0 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8004190:	463b      	mov	r3, r7
 8004192:	2205      	movs	r2, #5
 8004194:	4619      	mov	r1, r3
 8004196:	2010      	movs	r0, #16
 8004198:	f7ff ff60 	bl	800405c <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]
 80041a0:	e010      	b.n	80041c4 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	f107 0210 	add.w	r2, r7, #16
 80041a8:	4413      	add	r3, r2
 80041aa:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	1c59      	adds	r1, r3, #1
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d001      	beq.n	80041be <nRF24_Check+0x42>
 80041ba:	2300      	movs	r3, #0
 80041bc:	e006      	b.n	80041cc <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	3301      	adds	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d9eb      	bls.n	80041a2 <nRF24_Check+0x26>
	}

	return 1;
 80041ca:	2301      	movs	r3, #1
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	080129b0 	.word	0x080129b0

080041d8 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80041e2:	2000      	movs	r0, #0
 80041e4:	f7ff fee8 	bl	8003fb8 <nRF24_ReadReg>
 80041e8:	4603      	mov	r3, r0
 80041ea:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d104      	bne.n	80041fc <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	f043 0302 	orr.w	r3, r3, #2
 80041f8:	73fb      	strb	r3, [r7, #15]
 80041fa:	e003      	b.n	8004204 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	f023 0302 	bic.w	r3, r3, #2
 8004202:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	4619      	mov	r1, r3
 8004208:	2000      	movs	r0, #0
 800420a:	f7ff feef 	bl	8003fec <nRF24_WriteReg>
}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	4603      	mov	r3, r0
 800421e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8004220:	2000      	movs	r0, #0
 8004222:	f7ff fec9 	bl	8003fb8 <nRF24_ReadReg>
 8004226:	4603      	mov	r3, r0
 8004228:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8004232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	b25a      	sxtb	r2, r3
 800423c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004240:	4313      	orrs	r3, r2
 8004242:	b25b      	sxtb	r3, r3
 8004244:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	4619      	mov	r1, r3
 800424a:	2000      	movs	r0, #0
 800424c:	f7ff fece 	bl	8003fec <nRF24_WriteReg>
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8004262:	2000      	movs	r0, #0
 8004264:	f7ff fea8 	bl	8003fb8 <nRF24_ReadReg>
 8004268:	4603      	mov	r3, r0
 800426a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	f023 030c 	bic.w	r3, r3, #12
 8004272:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8004274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004278:	f003 030c 	and.w	r3, r3, #12
 800427c:	b25a      	sxtb	r2, r3
 800427e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004282:	4313      	orrs	r3, r2
 8004284:	b25b      	sxtb	r3, r3
 8004286:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	4619      	mov	r1, r3
 800428c:	2000      	movs	r0, #0
 800428e:	f7ff fead 	bl	8003fec <nRF24_WriteReg>
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	4603      	mov	r3, r0
 80042a2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	4619      	mov	r1, r3
 80042a8:	2005      	movs	r0, #5
 80042aa:	f7ff fe9f 	bl	8003fec <nRF24_WriteReg>
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	4603      	mov	r3, r0
 80042be:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	3b02      	subs	r3, #2
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	4619      	mov	r1, r3
 80042c8:	2003      	movs	r0, #3
 80042ca:	f7ff fe8f 	bl	8003fec <nRF24_WriteReg>
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	6039      	str	r1, [r7, #0]
 80042e2:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d00a      	beq.n	8004300 <nRF24_SetAddr+0x28>
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	dc36      	bgt.n	800435c <nRF24_SetAddr+0x84>
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	dc02      	bgt.n	80042f8 <nRF24_SetAddr+0x20>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	da04      	bge.n	8004300 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 80042f6:	e031      	b.n	800435c <nRF24_SetAddr+0x84>
 80042f8:	3b02      	subs	r3, #2
	switch (pipe) {
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d82e      	bhi.n	800435c <nRF24_SetAddr+0x84>
 80042fe:	e023      	b.n	8004348 <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8004300:	2003      	movs	r0, #3
 8004302:	f7ff fe59 	bl	8003fb8 <nRF24_ReadReg>
 8004306:	4603      	mov	r3, r0
 8004308:	3301      	adds	r3, #1
 800430a:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	4413      	add	r3, r2
 8004312:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8004314:	f7ff fe1c 	bl	8003f50 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	4a13      	ldr	r2, [pc, #76]	; (8004368 <nRF24_SetAddr+0x90>)
 800431c:	5cd3      	ldrb	r3, [r2, r3]
 800431e:	f043 0320 	orr.w	r3, r3, #32
 8004322:	b2db      	uxtb	r3, r3
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fe2b 	bl	8003f80 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	1e5a      	subs	r2, r3, #1
 800432e:	603a      	str	r2, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fe24 	bl	8003f80 <nRF24_LL_RW>
			} while (addr_width--);
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	1e5a      	subs	r2, r3, #1
 800433c:	73fa      	strb	r2, [r7, #15]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f3      	bne.n	800432a <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 8004342:	f7ff fe11 	bl	8003f68 <nRF24_CSN_H>
			break;
 8004346:	e00a      	b.n	800435e <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	4a07      	ldr	r2, [pc, #28]	; (8004368 <nRF24_SetAddr+0x90>)
 800434c:	5cd2      	ldrb	r2, [r2, r3]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f7ff fe49 	bl	8003fec <nRF24_WriteReg>
			break;
 800435a:	e000      	b.n	800435e <nRF24_SetAddr+0x86>
			break;
 800435c:	bf00      	nop
	}
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	08012a88 	.word	0x08012a88

0800436c <nRF24_SetDataRate>:
}

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8004376:	2006      	movs	r0, #6
 8004378:	f7ff fe1e 	bl	8003fb8 <nRF24_ReadReg>
 800437c:	4603      	mov	r3, r0
 800437e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004386:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8004388:	7bfa      	ldrb	r2, [r7, #15]
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	4313      	orrs	r3, r2
 800438e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	4619      	mov	r1, r3
 8004394:	2006      	movs	r0, #6
 8004396:	f7ff fe29 	bl	8003fec <nRF24_WriteReg>
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	71fb      	strb	r3, [r7, #7]
 80043ae:	460b      	mov	r3, r1
 80043b0:	71bb      	strb	r3, [r7, #6]
 80043b2:	4613      	mov	r3, r2
 80043b4:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 80043b6:	2002      	movs	r0, #2
 80043b8:	f7ff fdfe 	bl	8003fb8 <nRF24_ReadReg>
 80043bc:	4603      	mov	r3, r0
 80043be:	b25a      	sxtb	r2, r3
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	2101      	movs	r1, #1
 80043c4:	fa01 f303 	lsl.w	r3, r1, r3
 80043c8:	b25b      	sxtb	r3, r3
 80043ca:	4313      	orrs	r3, r2
 80043cc:	b25b      	sxtb	r3, r3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
 80043d8:	4619      	mov	r1, r3
 80043da:	2002      	movs	r0, #2
 80043dc:	f7ff fe06 	bl	8003fec <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	4a19      	ldr	r2, [pc, #100]	; (8004448 <nRF24_SetRXPipe+0xa4>)
 80043e4:	5cd2      	ldrb	r2, [r2, r3]
 80043e6:	797b      	ldrb	r3, [r7, #5]
 80043e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	4619      	mov	r1, r3
 80043f0:	4610      	mov	r0, r2
 80043f2:	f7ff fdfb 	bl	8003fec <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 80043f6:	2001      	movs	r0, #1
 80043f8:	f7ff fdde 	bl	8003fb8 <nRF24_ReadReg>
 80043fc:	4603      	mov	r3, r0
 80043fe:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8004400:	79bb      	ldrb	r3, [r7, #6]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d10a      	bne.n	800441c <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	2201      	movs	r2, #1
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	b25a      	sxtb	r2, r3
 8004410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004414:	4313      	orrs	r3, r2
 8004416:	b25b      	sxtb	r3, r3
 8004418:	73fb      	strb	r3, [r7, #15]
 800441a:	e00b      	b.n	8004434 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	2201      	movs	r2, #1
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	b25b      	sxtb	r3, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	b25a      	sxtb	r2, r3
 800442a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800442e:	4013      	ands	r3, r2
 8004430:	b25b      	sxtb	r3, r3
 8004432:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	4619      	mov	r1, r3
 8004438:	2001      	movs	r0, #1
 800443a:	f7ff fdd7 	bl	8003fec <nRF24_WriteReg>
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	08012a80 	.word	0x08012a80

0800444c <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	2b05      	cmp	r3, #5
 800445a:	d904      	bls.n	8004466 <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 800445c:	2100      	movs	r1, #0
 800445e:	2001      	movs	r0, #1
 8004460:	f7ff fdc4 	bl	8003fec <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8004464:	e015      	b.n	8004492 <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8004466:	2001      	movs	r0, #1
 8004468:	f7ff fda6 	bl	8003fb8 <nRF24_ReadReg>
 800446c:	4603      	mov	r3, r0
 800446e:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	2201      	movs	r2, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	b25b      	sxtb	r3, r3
 800447a:	43db      	mvns	r3, r3
 800447c:	b25a      	sxtb	r2, r3
 800447e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004482:	4013      	ands	r3, r2
 8004484:	b25b      	sxtb	r3, r3
 8004486:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	4619      	mov	r1, r3
 800448c:	2001      	movs	r0, #1
 800448e:	f7ff fdad 	bl	8003fec <nRF24_WriteReg>
}
 8004492:	bf00      	nop
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 800449a:	b580      	push	{r7, lr}
 800449c:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 800449e:	2007      	movs	r0, #7
 80044a0:	f7ff fd8a 	bl	8003fb8 <nRF24_ReadReg>
 80044a4:	4603      	mov	r3, r0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	bd80      	pop	{r7, pc}

080044aa <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 80044aa:	b580      	push	{r7, lr}
 80044ac:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 80044ae:	21ff      	movs	r1, #255	; 0xff
 80044b0:	20e1      	movs	r0, #225	; 0xe1
 80044b2:	f7ff fd9b 	bl	8003fec <nRF24_WriteReg>
}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}

080044ba <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 80044ba:	b580      	push	{r7, lr}
 80044bc:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 80044be:	21ff      	movs	r1, #255	; 0xff
 80044c0:	20e2      	movs	r0, #226	; 0xe2
 80044c2:	f7ff fd93 	bl	8003fec <nRF24_WriteReg>
}
 80044c6:	bf00      	nop
 80044c8:	bd80      	pop	{r7, pc}

080044ca <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 80044d0:	2007      	movs	r0, #7
 80044d2:	f7ff fd71 	bl	8003fb8 <nRF24_ReadReg>
 80044d6:	4603      	mov	r3, r0
 80044d8:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80044e0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	4619      	mov	r1, r3
 80044e6:	2007      	movs	r0, #7
 80044e8:	f7ff fd80 	bl	8003fec <nRF24_WriteReg>
}
 80044ec:	bf00      	nop
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <nRF24_GetRxDplPayloadWidth>:
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

static uint8_t nRF24_GetRxDplPayloadWidth() {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 80044fa:	f7ff fd29 	bl	8003f50 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 80044fe:	2060      	movs	r0, #96	; 0x60
 8004500:	f7ff fd3e 	bl	8003f80 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8004504:	20ff      	movs	r0, #255	; 0xff
 8004506:	f7ff fd3b 	bl	8003f80 <nRF24_LL_RW>
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 800450e:	f7ff fd2b 	bl	8003f68 <nRF24_CSN_H>

	return value;
 8004512:	79fb      	ldrb	r3, [r7, #7]

}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	4613      	mov	r3, r2
 8004528:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800452a:	2007      	movs	r0, #7
 800452c:	f7ff fd44 	bl	8003fb8 <nRF24_ReadReg>
 8004530:	4603      	mov	r3, r0
 8004532:	105b      	asrs	r3, r3, #1
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	2b05      	cmp	r3, #5
 8004540:	d829      	bhi.n	8004596 <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00f      	beq.n	8004568 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 8004548:	f7ff ffd4 	bl	80044f4 <nRF24_GetRxDplPayloadWidth>
 800454c:	4603      	mov	r3, r0
 800454e:	461a      	mov	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b20      	cmp	r3, #32
 800455a:	d90f      	bls.n	800457c <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8004562:	f7ff ffaa 	bl	80044ba <nRF24_FlushRX>
 8004566:	e009      	b.n	800457c <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8004568:	7dfb      	ldrb	r3, [r7, #23]
 800456a:	4a0f      	ldr	r2, [pc, #60]	; (80045a8 <nRF24_ReadPayloadGeneric+0x8c>)
 800456c:	5cd3      	ldrb	r3, [r2, r3]
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff fd22 	bl	8003fb8 <nRF24_ReadReg>
 8004574:	4603      	mov	r3, r0
 8004576:	461a      	mov	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d006      	beq.n	8004592 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	68f9      	ldr	r1, [r7, #12]
 800458c:	2061      	movs	r0, #97	; 0x61
 800458e:	f7ff fd65 	bl	800405c <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8004592:	7dfb      	ldrb	r3, [r7, #23]
 8004594:	e003      	b.n	800459e <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2200      	movs	r2, #0
 800459a:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 800459c:	23ff      	movs	r3, #255	; 0xff
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	08012a80 	.word	0x08012a80

080045ac <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
 80045b6:	2200      	movs	r2, #0
 80045b8:	6839      	ldr	r1, [r7, #0]
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff ffae 	bl	800451c <nRF24_ReadPayloadGeneric>
 80045c0:	4603      	mov	r3, r0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <i2c1_pisiRegister>:
 *  Created on: Dec 5, 2021
 *      Author: ddomi
 */
#include "setup.h"

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af04      	add	r7, sp, #16
 80045d2:	4603      	mov	r3, r0
 80045d4:	71fb      	strb	r3, [r7, #7]
 80045d6:	460b      	mov	r3, r1
 80045d8:	71bb      	strb	r3, [r7, #6]
 80045da:	4613      	mov	r3, r2
 80045dc:	717b      	strb	r3, [r7, #5]
  naprava <<= 1;
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	71fb      	strb	r3, [r7, #7]
  return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	b299      	uxth	r1, r3
 80045e8:	79bb      	ldrb	r3, [r7, #6]
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	230a      	movs	r3, #10
 80045ee:	9302      	str	r3, [sp, #8]
 80045f0:	2301      	movs	r3, #1
 80045f2:	9301      	str	r3, [sp, #4]
 80045f4:	1d7b      	adds	r3, r7, #5
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	2301      	movs	r3, #1
 80045fa:	4804      	ldr	r0, [pc, #16]	; (800460c <i2c1_pisiRegister+0x40>)
 80045fc:	f001 fea4 	bl	8006348 <HAL_I2C_Mem_Write>
 8004600:	4603      	mov	r3, r0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	2000502c 	.word	0x2000502c

08004610 <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af04      	add	r7, sp, #16
 8004616:	603a      	str	r2, [r7, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	4603      	mov	r3, r0
 800461c:	71fb      	strb	r3, [r7, #7]
 800461e:	460b      	mov	r3, r1
 8004620:	71bb      	strb	r3, [r7, #6]
 8004622:	4613      	mov	r3, r2
 8004624:	717b      	strb	r3, [r7, #5]
  if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8004626:	797b      	ldrb	r3, [r7, #5]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d906      	bls.n	800463a <i2c1_beriRegistre+0x2a>
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	2b19      	cmp	r3, #25
 8004630:	d103      	bne.n	800463a <i2c1_beriRegistre+0x2a>
    reg |= 0x80;
 8004632:	79bb      	ldrb	r3, [r7, #6]
 8004634:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004638:	71bb      	strb	r3, [r7, #6]
  naprava <<= 1;
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	b299      	uxth	r1, r3
 8004644:	79bb      	ldrb	r3, [r7, #6]
 8004646:	b298      	uxth	r0, r3
 8004648:	797b      	ldrb	r3, [r7, #5]
 800464a:	b29b      	uxth	r3, r3
 800464c:	797a      	ldrb	r2, [r7, #5]
 800464e:	9202      	str	r2, [sp, #8]
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	2301      	movs	r3, #1
 8004658:	4602      	mov	r2, r0
 800465a:	4803      	ldr	r0, [pc, #12]	; (8004668 <i2c1_beriRegistre+0x58>)
 800465c:	f001 ff6e 	bl	800653c <HAL_I2C_Mem_Read>
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	2000502c 	.word	0x2000502c

0800466c <spi1_beriRegister>:

uint8_t spi1_beriRegister(uint8_t reg) {
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af02      	add	r7, sp, #8
 8004672:	4603      	mov	r3, r0
 8004674:	71fb      	strb	r3, [r7, #7]
	uint16_t buf_out, buf_in;
	reg |= 0x80; // najpomembnejsi bit na 1
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800467c:	71fb      	strb	r3, [r7, #7]
	buf_out = reg; // little endian, se postavi na pravo mesto ....
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	b29b      	uxth	r3, r3
 8004682:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8004684:	2200      	movs	r2, #0
 8004686:	2108      	movs	r1, #8
 8004688:	4812      	ldr	r0, [pc, #72]	; (80046d4 <spi1_beriRegister+0x68>)
 800468a:	f001 fccd 	bl	8006028 <HAL_GPIO_WritePin>
	//HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
	HAL_SPI_TransmitReceive(&hspi1, &((uint8_t*)&buf_out)[0], &((uint8_t*)&buf_in)[0], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 800468e:	f107 020c 	add.w	r2, r7, #12
 8004692:	f107 010e 	add.w	r1, r7, #14
 8004696:	2302      	movs	r3, #2
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	2301      	movs	r3, #1
 800469c:	480e      	ldr	r0, [pc, #56]	; (80046d8 <spi1_beriRegister+0x6c>)
 800469e:	f005 fbbf 	bl	8009e20 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, &((uint8_t*)&buf_out)[1], &((uint8_t*)&buf_in)[1], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 80046a2:	f107 010e 	add.w	r1, r7, #14
 80046a6:	3101      	adds	r1, #1
 80046a8:	f107 020c 	add.w	r2, r7, #12
 80046ac:	3201      	adds	r2, #1
 80046ae:	2302      	movs	r3, #2
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	2301      	movs	r3, #1
 80046b4:	4808      	ldr	r0, [pc, #32]	; (80046d8 <spi1_beriRegister+0x6c>)
 80046b6:	f005 fbb3 	bl	8009e20 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80046ba:	2201      	movs	r2, #1
 80046bc:	2108      	movs	r1, #8
 80046be:	4805      	ldr	r0, [pc, #20]	; (80046d4 <spi1_beriRegister+0x68>)
 80046c0:	f001 fcb2 	bl	8006028 <HAL_GPIO_WritePin>
	return buf_in >> 8; // little endian...
 80046c4:	89bb      	ldrh	r3, [r7, #12]
 80046c6:	0a1b      	lsrs	r3, r3, #8
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	b2db      	uxtb	r3, r3
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40021000 	.word	0x40021000
 80046d8:	200055b0 	.word	0x200055b0

080046dc <spi1_pisiRegister>:

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	460a      	mov	r2, r1
 80046e6:	71fb      	strb	r3, [r7, #7]
 80046e8:	4613      	mov	r3, r2
 80046ea:	71bb      	strb	r3, [r7, #6]
  uint16_t buf_out;
  buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	b21a      	sxth	r2, r3
 80046f0:	79bb      	ldrb	r3, [r7, #6]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	b21b      	sxth	r3, r3
 80046f6:	4313      	orrs	r3, r2
 80046f8:	b21b      	sxth	r3, r3
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	81fb      	strh	r3, [r7, #14]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80046fe:	2200      	movs	r2, #0
 8004700:	2108      	movs	r1, #8
 8004702:	480d      	ldr	r0, [pc, #52]	; (8004738 <spi1_pisiRegister+0x5c>)
 8004704:	f001 fc90 	bl	8006028 <HAL_GPIO_WritePin>
  //HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
  HAL_SPI_Transmit(&hspi1, &((uint8_t*)&buf_out)[0], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 8004708:	f107 010e 	add.w	r1, r7, #14
 800470c:	2302      	movs	r3, #2
 800470e:	2201      	movs	r2, #1
 8004710:	480a      	ldr	r0, [pc, #40]	; (800473c <spi1_pisiRegister+0x60>)
 8004712:	f005 f938 	bl	8009986 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &((uint8_t*)&buf_out)[1], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 8004716:	f107 010e 	add.w	r1, r7, #14
 800471a:	3101      	adds	r1, #1
 800471c:	2302      	movs	r3, #2
 800471e:	2201      	movs	r2, #1
 8004720:	4806      	ldr	r0, [pc, #24]	; (800473c <spi1_pisiRegister+0x60>)
 8004722:	f005 f930 	bl	8009986 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8004726:	2201      	movs	r2, #1
 8004728:	2108      	movs	r1, #8
 800472a:	4803      	ldr	r0, [pc, #12]	; (8004738 <spi1_pisiRegister+0x5c>)
 800472c:	f001 fc7c 	bl	8006028 <HAL_GPIO_WritePin>
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40021000 	.word	0x40021000
 800473c:	200055b0 	.word	0x200055b0

08004740 <spi1_beriRegistre>:

void spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	6039      	str	r1, [r7, #0]
 800474a:	71fb      	strb	r3, [r7, #7]
 800474c:	4613      	mov	r3, r2
 800474e:	71bb      	strb	r3, [r7, #6]
  reg |= 0xC0; // najpomembnejsa bita na 1
 8004750:	79fb      	ldrb	r3, [r7, #7]
 8004752:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004756:	b2db      	uxtb	r3, r3
 8004758:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800475a:	2200      	movs	r2, #0
 800475c:	2108      	movs	r1, #8
 800475e:	480c      	ldr	r0, [pc, #48]	; (8004790 <spi1_beriRegistre+0x50>)
 8004760:	f001 fc62 	bl	8006028 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 8004764:	1df9      	adds	r1, r7, #7
 8004766:	230a      	movs	r3, #10
 8004768:	2201      	movs	r2, #1
 800476a:	480a      	ldr	r0, [pc, #40]	; (8004794 <spi1_beriRegistre+0x54>)
 800476c:	f005 f90b 	bl	8009986 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 8004770:	79bb      	ldrb	r3, [r7, #6]
 8004772:	b29a      	uxth	r2, r3
 8004774:	79bb      	ldrb	r3, [r7, #6]
 8004776:	6839      	ldr	r1, [r7, #0]
 8004778:	4806      	ldr	r0, [pc, #24]	; (8004794 <spi1_beriRegistre+0x54>)
 800477a:	f005 fa40 	bl	8009bfe <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800477e:	2201      	movs	r2, #1
 8004780:	2108      	movs	r1, #8
 8004782:	4803      	ldr	r0, [pc, #12]	; (8004790 <spi1_beriRegistre+0x50>)
 8004784:	f001 fc50 	bl	8006028 <HAL_GPIO_WritePin>
}
 8004788:	bf00      	nop
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40021000 	.word	0x40021000
 8004794:	200055b0 	.word	0x200055b0

08004798 <nastaviPospeskometer>:

void nastaviPospeskometer(){
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
	//register maping lsm303agr.pdf page(43)
	//0x23 0x40 BLE litle endian
	i2c1_pisiRegister(0x19, 0x21, 0x0);
 800479c:	2200      	movs	r2, #0
 800479e:	2121      	movs	r1, #33	; 0x21
 80047a0:	2019      	movs	r0, #25
 80047a2:	f7ff ff13 	bl	80045cc <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x24, 0x0);
 80047a6:	2200      	movs	r2, #0
 80047a8:	2124      	movs	r1, #36	; 0x24
 80047aa:	2019      	movs	r0, #25
 80047ac:	f7ff ff0e 	bl	80045cc <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x25, 0x0);
 80047b0:	2200      	movs	r2, #0
 80047b2:	2125      	movs	r1, #37	; 0x25
 80047b4:	2019      	movs	r0, #25
 80047b6:	f7ff ff09 	bl	80045cc <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x26, 0x0);
 80047ba:	2200      	movs	r2, #0
 80047bc:	2126      	movs	r1, #38	; 0x26
 80047be:	2019      	movs	r0, #25
 80047c0:	f7ff ff04 	bl	80045cc <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x20, 0x67);  //ctrl_reg1 zbudi pospeskometer in omogoci osi //0x20 0x67 200Hz enable XYZ
 80047c4:	2267      	movs	r2, #103	; 0x67
 80047c6:	2120      	movs	r1, #32
 80047c8:	2019      	movs	r0, #25
 80047ca:	f7ff feff 	bl	80045cc <i2c1_pisiRegister>
	//block data update HR=1 oprating mode selection 12bit data output LPen = 0 (low power mode disabled) FS0 = 1(+-4g obcutljivost)
	i2c1_pisiRegister(0x19, 0x23, 0x8);  //ctrl_reg4 nastavi posodobitev samo ko se prebere vrednost ter locljivost +-2g
 80047ce:	2208      	movs	r2, #8
 80047d0:	2123      	movs	r1, #35	; 0x23
 80047d2:	2019      	movs	r0, #25
 80047d4:	f7ff fefa 	bl	80045cc <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x22, 0x10);  //0x22 0x10 DRDY1 INT1 pin enable pe4
 80047d8:	2210      	movs	r2, #16
 80047da:	2122      	movs	r1, #34	; 0x22
 80047dc:	2019      	movs	r0, #25
 80047de:	f7ff fef5 	bl	80045cc <i2c1_pisiRegister>
}
 80047e2:	bf00      	nop
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <nastaviMagnetometer>:
void nastaviMagnetometer(){
 80047e6:	b580      	push	{r7, lr}
 80047e8:	af00      	add	r7, sp, #0
	i2c1_pisiRegister(0x1e, 0x60, 0xC); //cfg_reg_a_m ODR= 100HZ
 80047ea:	220c      	movs	r2, #12
 80047ec:	2160      	movs	r1, #96	; 0x60
 80047ee:	201e      	movs	r0, #30
 80047f0:	f7ff feec 	bl	80045cc <i2c1_pisiRegister>
	i2c1_pisiRegister(0x1e, 0x61, 0x0); //cfg_reg_b_m
 80047f4:	2200      	movs	r2, #0
 80047f6:	2161      	movs	r1, #97	; 0x61
 80047f8:	201e      	movs	r0, #30
 80047fa:	f7ff fee7 	bl	80045cc <i2c1_pisiRegister>
	i2c1_pisiRegister(0x1e, 0x62, 0x1); //cfg_reg_c_m INT_MAG=1 INT_MAG_PIN=0 BDU=0
 80047fe:	2201      	movs	r2, #1
 8004800:	2162      	movs	r1, #98	; 0x62
 8004802:	201e      	movs	r0, #30
 8004804:	f7ff fee2 	bl	80045cc <i2c1_pisiRegister>
	i2c1_pisiRegister(0x1e, 0x63, 0xE5); //int_ctrl_reg_m enable XYZ in IEN=1 interupt generation enable IEA=1
 8004808:	22e5      	movs	r2, #229	; 0xe5
 800480a:	2163      	movs	r1, #99	; 0x63
 800480c:	201e      	movs	r0, #30
 800480e:	f7ff fedd 	bl	80045cc <i2c1_pisiRegister>
}
 8004812:	bf00      	nop
 8004814:	bd80      	pop	{r7, pc}

08004816 <nastaviGiroskop>:

void nastaviGiroskop() {
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
  // preverimo ali smo "poklicali" pravi senzor
  uint8_t cip = spi1_beriRegister(0x0F);
 800481c:	200f      	movs	r0, #15
 800481e:	f7ff ff25 	bl	800466c <spi1_beriRegister>
 8004822:	4603      	mov	r3, r0
 8004824:	71fb      	strb	r3, [r7, #7]
  if (cip!=0xD4 && cip!=0xD3) {
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	2bd4      	cmp	r3, #212	; 0xd4
 800482a:	d003      	beq.n	8004834 <nastaviGiroskop+0x1e>
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	2bd3      	cmp	r3, #211	; 0xd3
 8004830:	d000      	beq.n	8004834 <nastaviGiroskop+0x1e>
	for (;;); //napaka ni senzorja
 8004832:	e7fe      	b.n	8004832 <nastaviGiroskop+0x1c>
  }
  spi1_pisiRegister(0x21,0);//REG2 register za high pass filter
 8004834:	2100      	movs	r1, #0
 8004836:	2021      	movs	r0, #33	; 0x21
 8004838:	f7ff ff50 	bl	80046dc <spi1_pisiRegister>
  spi1_pisiRegister(0x22,0x8);//REG3 interupt INT1 disable DRDY/INT2 enable
 800483c:	2108      	movs	r1, #8
 800483e:	2022      	movs	r0, #34	; 0x22
 8004840:	f7ff ff4c 	bl	80046dc <spi1_pisiRegister>
    //0001 0000 FS-01 500dps
  spi1_pisiRegister(0x23,0x10);//REG4 MSB@lower addres 500deg/s 0x10 BLE = 0 BIGendian
 8004844:	2110      	movs	r1, #16
 8004846:	2023      	movs	r0, #35	; 0x23
 8004848:	f7ff ff48 	bl	80046dc <spi1_pisiRegister>

  spi1_pisiRegister(0x25,0);//REFRENCE
 800484c:	2100      	movs	r1, #0
 800484e:	2025      	movs	r0, #37	; 0x25
 8004850:	f7ff ff44 	bl	80046dc <spi1_pisiRegister>
  spi1_pisiRegister(0x2e,0);//FIFO_CTRL
 8004854:	2100      	movs	r1, #0
 8004856:	202e      	movs	r0, #46	; 0x2e
 8004858:	f7ff ff40 	bl	80046dc <spi1_pisiRegister>
  spi1_pisiRegister(0x32,0);//INT1_THS
 800485c:	2100      	movs	r1, #0
 800485e:	2032      	movs	r0, #50	; 0x32
 8004860:	f7ff ff3c 	bl	80046dc <spi1_pisiRegister>
  spi1_pisiRegister(0x33,0);//INT1_THS
 8004864:	2100      	movs	r1, #0
 8004866:	2033      	movs	r0, #51	; 0x33
 8004868:	f7ff ff38 	bl	80046dc <spi1_pisiRegister>
  spi1_pisiRegister(0x34,0);//INT1_THS
 800486c:	2100      	movs	r1, #0
 800486e:	2034      	movs	r0, #52	; 0x34
 8004870:	f7ff ff34 	bl	80046dc <spi1_pisiRegister>
  spi1_pisiRegister(0x35,0);//INT1_THS
 8004874:	2100      	movs	r1, #0
 8004876:	2035      	movs	r0, #53	; 0x35
 8004878:	f7ff ff30 	bl	80046dc <spi1_pisiRegister>
  spi1_pisiRegister(0x36,0);//INT1_THS
 800487c:	2100      	movs	r1, #0
 800487e:	2036      	movs	r0, #54	; 0x36
 8004880:	f7ff ff2c 	bl	80046dc <spi1_pisiRegister>
  spi1_pisiRegister(0x37,0);//INT1_THS
 8004884:	2100      	movs	r1, #0
 8004886:	2037      	movs	r0, #55	; 0x37
 8004888:	f7ff ff28 	bl	80046dc <spi1_pisiRegister>
  spi1_pisiRegister(0x38,0);//INT1_DUR
 800488c:	2100      	movs	r1, #0
 800488e:	2038      	movs	r0, #56	; 0x38
 8004890:	f7ff ff24 	bl	80046dc <spi1_pisiRegister>
  spi1_pisiRegister(0x30,0);//INT1_CFG
 8004894:	2100      	movs	r1, #0
 8004896:	2030      	movs	r0, #48	; 0x30
 8004898:	f7ff ff20 	bl	80046dc <spi1_pisiRegister>


  spi1_pisiRegister(0x24,0);//REG5
 800489c:	2100      	movs	r1, #0
 800489e:	2024      	movs	r0, #36	; 0x24
 80048a0:	f7ff ff1c 	bl	80046dc <spi1_pisiRegister>
  //0101 1111 : (1111)=(PD,Zen,Yen,Xen)
  spi1_pisiRegister(0x20,0x5f);//CTRL_REG1 omogoci x-1,y-1,z-1,PD-1(normal mode) DR = 01 BW = 10 cutof=25 200hz
 80048a4:	215f      	movs	r1, #95	; 0x5f
 80048a6:	2020      	movs	r0, #32
 80048a8:	f7ff ff18 	bl	80046dc <spi1_pisiRegister>

  spi1_pisiRegister(0x20, 0x0F);//CTRL REG1 zbudi ziroskop in omogoci osi
 80048ac:	210f      	movs	r1, #15
 80048ae:	2020      	movs	r0, #32
 80048b0:	f7ff ff14 	bl	80046dc <spi1_pisiRegister>
}
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <izracunajPovprecjeInt16>:



int16_t izracunajPovprecjeInt16(struct tekocePovprecjeInt16* data,int16_t nov, uint8_t cleni){
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	807b      	strh	r3, [r7, #2]
 80048c8:	4613      	mov	r3, r2
 80048ca:	707b      	strb	r3, [r7, #1]
	data->sum =  data->sum + nov - data->vals[data->index]; //pristejemo trenutno vrednost in odstejemo zadnjo
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048d4:	4413      	add	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	7812      	ldrb	r2, [r2, #0]
 80048da:	4611      	mov	r1, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	3104      	adds	r1, #4
 80048e0:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80048e4:	1a9a      	subs	r2, r3, r2
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	605a      	str	r2, [r3, #4]
	data->vals[data->index] = nov; //na zadnjo zamenjamo z novo
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3204      	adds	r2, #4
 80048f4:	8879      	ldrh	r1, [r7, #2]
 80048f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	data->index++;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	3301      	adds	r3, #1
 8004900:	b2da      	uxtb	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	701a      	strb	r2, [r3, #0]
	if(cleni > STEVILO_CLENOV_TP){cleni = STEVILO_CLENOV_TP;}
 8004906:	787b      	ldrb	r3, [r7, #1]
 8004908:	2b3c      	cmp	r3, #60	; 0x3c
 800490a:	d901      	bls.n	8004910 <izracunajPovprecjeInt16+0x54>
 800490c:	233c      	movs	r3, #60	; 0x3c
 800490e:	707b      	strb	r3, [r7, #1]
	if(data->index >= cleni){data->index = 0;}
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	787a      	ldrb	r2, [r7, #1]
 8004916:	429a      	cmp	r2, r3
 8004918:	d802      	bhi.n	8004920 <izracunajPovprecjeInt16+0x64>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	701a      	strb	r2, [r3, #0]
	data->avrage =  data->sum/cleni;//izracunamo povprecje
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	787b      	ldrb	r3, [r7, #1]
 8004926:	fb92 f3f3 	sdiv	r3, r2, r3
 800492a:	b21a      	sxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	805a      	strh	r2, [r3, #2]
	return data->avrage;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <nastaviMotor>:

void nastaviMotor(enum motor m,int16_t pwm){
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	460a      	mov	r2, r1
 800494e:	71fb      	strb	r3, [r7, #7]
 8004950:	4613      	mov	r3, r2
 8004952:	80bb      	strh	r3, [r7, #4]
	int8_t foward = 1;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
	if(pwm < 0){
 8004958:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	da05      	bge.n	800496c <nastaviMotor+0x28>
		pwm = (~(pwm)+1); foward=0;
 8004960:	88bb      	ldrh	r3, [r7, #4]
 8004962:	425b      	negs	r3, r3
 8004964:	b29b      	uxth	r3, r3
 8004966:	80bb      	strh	r3, [r7, #4]
 8004968:	2300      	movs	r3, #0
 800496a:	73fb      	strb	r3, [r7, #15]
	}
	if(pwm > 999){pwm = 999;}
 800496c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004970:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004974:	db02      	blt.n	800497c <nastaviMotor+0x38>
 8004976:	f240 33e7 	movw	r3, #999	; 0x3e7
 800497a:	80bb      	strh	r3, [r7, #4]
	if(pwm == 0){foward = -1;}
 800497c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <nastaviMotor+0x44>
 8004984:	23ff      	movs	r3, #255	; 0xff
 8004986:	73fb      	strb	r3, [r7, #15]
	switch(m){
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	2b03      	cmp	r3, #3
 800498c:	f200 80db 	bhi.w	8004b46 <nastaviMotor+0x202>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <nastaviMotor+0x54>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	08004a77 	.word	0x08004a77
 800499c:	08004a0f 	.word	0x08004a0f
 80049a0:	08004adf 	.word	0x08004adf
 80049a4:	080049a9 	.word	0x080049a9
	case LF:
		//TIM3->CCR4 = izracunajPovprecjeInt16(&M1,pwm,MOTORJI_IZHOD_TP_CLENI);
		TIM3->CCR4 = pwm;
 80049a8:	4a6a      	ldr	r2, [pc, #424]	; (8004b54 <nastaviMotor+0x210>)
 80049aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80049ae:	6413      	str	r3, [r2, #64]	; 0x40
		if(foward == 1){GPIOE->ODR |= (1<<10); GPIOE->ODR &= ~(1<<12);}
 80049b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d10c      	bne.n	80049d2 <nastaviMotor+0x8e>
 80049b8:	4b67      	ldr	r3, [pc, #412]	; (8004b58 <nastaviMotor+0x214>)
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	4a66      	ldr	r2, [pc, #408]	; (8004b58 <nastaviMotor+0x214>)
 80049be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049c2:	6153      	str	r3, [r2, #20]
 80049c4:	4b64      	ldr	r3, [pc, #400]	; (8004b58 <nastaviMotor+0x214>)
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	4a63      	ldr	r2, [pc, #396]	; (8004b58 <nastaviMotor+0x214>)
 80049ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049ce:	6153      	str	r3, [r2, #20]
		else if(foward < 0){GPIOE->ODR &= ~(1<<10); GPIOE->ODR &= ~(1<<12);}
		else{GPIOE->ODR &= ~(1<<10); GPIOE->ODR |= (1<<12);}
		break;
 80049d0:	e0b9      	b.n	8004b46 <nastaviMotor+0x202>
		else if(foward < 0){GPIOE->ODR &= ~(1<<10); GPIOE->ODR &= ~(1<<12);}
 80049d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	da0c      	bge.n	80049f4 <nastaviMotor+0xb0>
 80049da:	4b5f      	ldr	r3, [pc, #380]	; (8004b58 <nastaviMotor+0x214>)
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	4a5e      	ldr	r2, [pc, #376]	; (8004b58 <nastaviMotor+0x214>)
 80049e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049e4:	6153      	str	r3, [r2, #20]
 80049e6:	4b5c      	ldr	r3, [pc, #368]	; (8004b58 <nastaviMotor+0x214>)
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	4a5b      	ldr	r2, [pc, #364]	; (8004b58 <nastaviMotor+0x214>)
 80049ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049f0:	6153      	str	r3, [r2, #20]
		break;
 80049f2:	e0a8      	b.n	8004b46 <nastaviMotor+0x202>
		else{GPIOE->ODR &= ~(1<<10); GPIOE->ODR |= (1<<12);}
 80049f4:	4b58      	ldr	r3, [pc, #352]	; (8004b58 <nastaviMotor+0x214>)
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	4a57      	ldr	r2, [pc, #348]	; (8004b58 <nastaviMotor+0x214>)
 80049fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049fe:	6153      	str	r3, [r2, #20]
 8004a00:	4b55      	ldr	r3, [pc, #340]	; (8004b58 <nastaviMotor+0x214>)
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	4a54      	ldr	r2, [pc, #336]	; (8004b58 <nastaviMotor+0x214>)
 8004a06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a0a:	6153      	str	r3, [r2, #20]
		break;
 8004a0c:	e09b      	b.n	8004b46 <nastaviMotor+0x202>
	case RB:
		//TIM2->CCR4 = izracunajPovprecjeInt16(&M2,pwm,MOTORJI_IZHOD_TP_CLENI);
		TIM2->CCR4 = pwm;
 8004a0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a16:	6413      	str	r3, [r2, #64]	; 0x40
		if(foward == 1){GPIOE->ODR |= (1<<14); GPIOE->ODR &= ~(1<<13);}
 8004a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d10c      	bne.n	8004a3a <nastaviMotor+0xf6>
 8004a20:	4b4d      	ldr	r3, [pc, #308]	; (8004b58 <nastaviMotor+0x214>)
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	4a4c      	ldr	r2, [pc, #304]	; (8004b58 <nastaviMotor+0x214>)
 8004a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a2a:	6153      	str	r3, [r2, #20]
 8004a2c:	4b4a      	ldr	r3, [pc, #296]	; (8004b58 <nastaviMotor+0x214>)
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	4a49      	ldr	r2, [pc, #292]	; (8004b58 <nastaviMotor+0x214>)
 8004a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a36:	6153      	str	r3, [r2, #20]
		else if(foward < 0){GPIOE->ODR &= ~(1<<14); GPIOE->ODR &= ~(1<<13);}
		else{GPIOE->ODR &= ~(1<<14); GPIOE->ODR |= (1<<13);}
		break;
 8004a38:	e085      	b.n	8004b46 <nastaviMotor+0x202>
		else if(foward < 0){GPIOE->ODR &= ~(1<<14); GPIOE->ODR &= ~(1<<13);}
 8004a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	da0c      	bge.n	8004a5c <nastaviMotor+0x118>
 8004a42:	4b45      	ldr	r3, [pc, #276]	; (8004b58 <nastaviMotor+0x214>)
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	4a44      	ldr	r2, [pc, #272]	; (8004b58 <nastaviMotor+0x214>)
 8004a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a4c:	6153      	str	r3, [r2, #20]
 8004a4e:	4b42      	ldr	r3, [pc, #264]	; (8004b58 <nastaviMotor+0x214>)
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	4a41      	ldr	r2, [pc, #260]	; (8004b58 <nastaviMotor+0x214>)
 8004a54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a58:	6153      	str	r3, [r2, #20]
		break;
 8004a5a:	e074      	b.n	8004b46 <nastaviMotor+0x202>
		else{GPIOE->ODR &= ~(1<<14); GPIOE->ODR |= (1<<13);}
 8004a5c:	4b3e      	ldr	r3, [pc, #248]	; (8004b58 <nastaviMotor+0x214>)
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	4a3d      	ldr	r2, [pc, #244]	; (8004b58 <nastaviMotor+0x214>)
 8004a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a66:	6153      	str	r3, [r2, #20]
 8004a68:	4b3b      	ldr	r3, [pc, #236]	; (8004b58 <nastaviMotor+0x214>)
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	4a3a      	ldr	r2, [pc, #232]	; (8004b58 <nastaviMotor+0x214>)
 8004a6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a72:	6153      	str	r3, [r2, #20]
		break;
 8004a74:	e067      	b.n	8004b46 <nastaviMotor+0x202>
	case RF:
		//TIM2->CCR3 = izracunajPovprecjeInt16(&M3,pwm,MOTORJI_IZHOD_TP_CLENI);
		TIM2->CCR3 = pwm;
 8004a76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a7e:	63d3      	str	r3, [r2, #60]	; 0x3c
		if(foward == 1){GPIOE->ODR |= (1<<8); GPIOE->ODR &= ~(1<<7);}
 8004a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d10c      	bne.n	8004aa2 <nastaviMotor+0x15e>
 8004a88:	4b33      	ldr	r3, [pc, #204]	; (8004b58 <nastaviMotor+0x214>)
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	4a32      	ldr	r2, [pc, #200]	; (8004b58 <nastaviMotor+0x214>)
 8004a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a92:	6153      	str	r3, [r2, #20]
 8004a94:	4b30      	ldr	r3, [pc, #192]	; (8004b58 <nastaviMotor+0x214>)
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	4a2f      	ldr	r2, [pc, #188]	; (8004b58 <nastaviMotor+0x214>)
 8004a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a9e:	6153      	str	r3, [r2, #20]
		else if(foward < 0){GPIOE->ODR &= ~(1<<8); GPIOE->ODR &= ~(1<<7);}
		else{GPIOE->ODR &= ~(1<<8); GPIOE->ODR |= (1<<7);}
		break;
 8004aa0:	e051      	b.n	8004b46 <nastaviMotor+0x202>
		else if(foward < 0){GPIOE->ODR &= ~(1<<8); GPIOE->ODR &= ~(1<<7);}
 8004aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da0c      	bge.n	8004ac4 <nastaviMotor+0x180>
 8004aaa:	4b2b      	ldr	r3, [pc, #172]	; (8004b58 <nastaviMotor+0x214>)
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	4a2a      	ldr	r2, [pc, #168]	; (8004b58 <nastaviMotor+0x214>)
 8004ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab4:	6153      	str	r3, [r2, #20]
 8004ab6:	4b28      	ldr	r3, [pc, #160]	; (8004b58 <nastaviMotor+0x214>)
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	4a27      	ldr	r2, [pc, #156]	; (8004b58 <nastaviMotor+0x214>)
 8004abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac0:	6153      	str	r3, [r2, #20]
		break;
 8004ac2:	e040      	b.n	8004b46 <nastaviMotor+0x202>
		else{GPIOE->ODR &= ~(1<<8); GPIOE->ODR |= (1<<7);}
 8004ac4:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <nastaviMotor+0x214>)
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	4a23      	ldr	r2, [pc, #140]	; (8004b58 <nastaviMotor+0x214>)
 8004aca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ace:	6153      	str	r3, [r2, #20]
 8004ad0:	4b21      	ldr	r3, [pc, #132]	; (8004b58 <nastaviMotor+0x214>)
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	4a20      	ldr	r2, [pc, #128]	; (8004b58 <nastaviMotor+0x214>)
 8004ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ada:	6153      	str	r3, [r2, #20]
		break;
 8004adc:	e033      	b.n	8004b46 <nastaviMotor+0x202>
	case LB:
		//TIM2->CCR2 = izracunajPovprecjeInt16(&M4,pwm,MOTORJI_IZHOD_TP_CLENI);
		TIM2->CCR2 = pwm;
 8004ade:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ae2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ae6:	6393      	str	r3, [r2, #56]	; 0x38
		if(foward == 1){GPIOE->ODR |= (1<<9); GPIOE->ODR &= ~(1<<11);}
 8004ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d10c      	bne.n	8004b0a <nastaviMotor+0x1c6>
 8004af0:	4b19      	ldr	r3, [pc, #100]	; (8004b58 <nastaviMotor+0x214>)
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <nastaviMotor+0x214>)
 8004af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004afa:	6153      	str	r3, [r2, #20]
 8004afc:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <nastaviMotor+0x214>)
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	4a15      	ldr	r2, [pc, #84]	; (8004b58 <nastaviMotor+0x214>)
 8004b02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b06:	6153      	str	r3, [r2, #20]
		else if(foward < 0){GPIOE->ODR &= ~(1<<9); GPIOE->ODR &= ~(1<<11);}
		else{GPIOE->ODR &= ~(1<<9); GPIOE->ODR |= (1<<11);}
		break;
 8004b08:	e01c      	b.n	8004b44 <nastaviMotor+0x200>
		else if(foward < 0){GPIOE->ODR &= ~(1<<9); GPIOE->ODR &= ~(1<<11);}
 8004b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	da0c      	bge.n	8004b2c <nastaviMotor+0x1e8>
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <nastaviMotor+0x214>)
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	4a10      	ldr	r2, [pc, #64]	; (8004b58 <nastaviMotor+0x214>)
 8004b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b1c:	6153      	str	r3, [r2, #20]
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <nastaviMotor+0x214>)
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	4a0d      	ldr	r2, [pc, #52]	; (8004b58 <nastaviMotor+0x214>)
 8004b24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b28:	6153      	str	r3, [r2, #20]
		break;
 8004b2a:	e00b      	b.n	8004b44 <nastaviMotor+0x200>
		else{GPIOE->ODR &= ~(1<<9); GPIOE->ODR |= (1<<11);}
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <nastaviMotor+0x214>)
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	4a09      	ldr	r2, [pc, #36]	; (8004b58 <nastaviMotor+0x214>)
 8004b32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b36:	6153      	str	r3, [r2, #20]
 8004b38:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <nastaviMotor+0x214>)
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	4a06      	ldr	r2, [pc, #24]	; (8004b58 <nastaviMotor+0x214>)
 8004b3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b42:	6153      	str	r3, [r2, #20]
		break;
 8004b44:	bf00      	nop
	}
}
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40021000 	.word	0x40021000

08004b5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <HAL_MspInit+0x54>)
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <HAL_MspInit+0x54>)
 8004b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b70:	6453      	str	r3, [r2, #68]	; 0x44
 8004b72:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <HAL_MspInit+0x54>)
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b7e:	2300      	movs	r3, #0
 8004b80:	603b      	str	r3, [r7, #0]
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_MspInit+0x54>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	4a0a      	ldr	r2, [pc, #40]	; (8004bb0 <HAL_MspInit+0x54>)
 8004b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8e:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <HAL_MspInit+0x54>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	210f      	movs	r1, #15
 8004b9e:	f06f 0001 	mvn.w	r0, #1
 8004ba2:	f000 fd0b 	bl	80055bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40023800 	.word	0x40023800

08004bb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bbc:	f107 0314 	add.w	r3, r7, #20
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	605a      	str	r2, [r3, #4]
 8004bc6:	609a      	str	r2, [r3, #8]
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a19      	ldr	r2, [pc, #100]	; (8004c38 <HAL_I2C_MspInit+0x84>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d12c      	bne.n	8004c30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	613b      	str	r3, [r7, #16]
 8004bda:	4b18      	ldr	r3, [pc, #96]	; (8004c3c <HAL_I2C_MspInit+0x88>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	4a17      	ldr	r2, [pc, #92]	; (8004c3c <HAL_I2C_MspInit+0x88>)
 8004be0:	f043 0302 	orr.w	r3, r3, #2
 8004be4:	6313      	str	r3, [r2, #48]	; 0x30
 8004be6:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <HAL_I2C_MspInit+0x88>)
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004bf2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bf8:	2312      	movs	r3, #18
 8004bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c00:	2300      	movs	r3, #0
 8004c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c04:	2304      	movs	r3, #4
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c08:	f107 0314 	add.w	r3, r7, #20
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	480c      	ldr	r0, [pc, #48]	; (8004c40 <HAL_I2C_MspInit+0x8c>)
 8004c10:	f001 f86e 	bl	8005cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	4b08      	ldr	r3, [pc, #32]	; (8004c3c <HAL_I2C_MspInit+0x88>)
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	4a07      	ldr	r2, [pc, #28]	; (8004c3c <HAL_I2C_MspInit+0x88>)
 8004c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c22:	6413      	str	r3, [r2, #64]	; 0x40
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_I2C_MspInit+0x88>)
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c30:	bf00      	nop
 8004c32:	3728      	adds	r7, #40	; 0x28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40005400 	.word	0x40005400
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	40020400 	.word	0x40020400

08004c44 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b090      	sub	sp, #64	; 0x40
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	605a      	str	r2, [r3, #4]
 8004c56:	609a      	str	r2, [r3, #8]
 8004c58:	60da      	str	r2, [r3, #12]
 8004c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c5c:	f107 0314 	add.w	r3, r7, #20
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	605a      	str	r2, [r3, #4]
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	60da      	str	r2, [r3, #12]
 8004c6a:	611a      	str	r2, [r3, #16]
 8004c6c:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a32      	ldr	r2, [pc, #200]	; (8004d3c <HAL_I2S_MspInit+0xf8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d15c      	bne.n	8004d32 <HAL_I2S_MspInit+0xee>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8004c7c:	23c8      	movs	r3, #200	; 0xc8
 8004c7e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8004c80:	2305      	movs	r3, #5
 8004c82:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004c84:	2302      	movs	r3, #2
 8004c86:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c88:	f107 0314 	add.w	r3, r7, #20
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f004 fca1 	bl	80095d4 <HAL_RCCEx_PeriphCLKConfig>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8004c98:	f7ff f91e 	bl	8003ed8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <HAL_I2S_MspInit+0xfc>)
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	4a26      	ldr	r2, [pc, #152]	; (8004d40 <HAL_I2S_MspInit+0xfc>)
 8004ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004caa:	6413      	str	r3, [r2, #64]	; 0x40
 8004cac:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <HAL_I2S_MspInit+0xfc>)
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	4b20      	ldr	r3, [pc, #128]	; (8004d40 <HAL_I2S_MspInit+0xfc>)
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	4a1f      	ldr	r2, [pc, #124]	; (8004d40 <HAL_I2S_MspInit+0xfc>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <HAL_I2S_MspInit+0xfc>)
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	4b19      	ldr	r3, [pc, #100]	; (8004d40 <HAL_I2S_MspInit+0xfc>)
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	4a18      	ldr	r2, [pc, #96]	; (8004d40 <HAL_I2S_MspInit+0xfc>)
 8004cde:	f043 0304 	orr.w	r3, r3, #4
 8004ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce4:	4b16      	ldr	r3, [pc, #88]	; (8004d40 <HAL_I2S_MspInit+0xfc>)
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8004cf0:	2310      	movs	r3, #16
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004d00:	2306      	movs	r3, #6
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d08:	4619      	mov	r1, r3
 8004d0a:	480e      	ldr	r0, [pc, #56]	; (8004d44 <HAL_I2S_MspInit+0x100>)
 8004d0c:	f000 fff0 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8004d10:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8004d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d16:	2302      	movs	r3, #2
 8004d18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004d22:	2306      	movs	r3, #6
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4806      	ldr	r0, [pc, #24]	; (8004d48 <HAL_I2S_MspInit+0x104>)
 8004d2e:	f000 ffdf 	bl	8005cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004d32:	bf00      	nop
 8004d34:	3740      	adds	r7, #64	; 0x40
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40003c00 	.word	0x40003c00
 8004d40:	40023800 	.word	0x40023800
 8004d44:	40020000 	.word	0x40020000
 8004d48:	40020800 	.word	0x40020800

08004d4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b090      	sub	sp, #64	; 0x40
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	605a      	str	r2, [r3, #4]
 8004d5e:	609a      	str	r2, [r3, #8]
 8004d60:	60da      	str	r2, [r3, #12]
 8004d62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a98      	ldr	r2, [pc, #608]	; (8004fcc <HAL_SPI_MspInit+0x280>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d12c      	bne.n	8004dc8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d6e:	2300      	movs	r3, #0
 8004d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d72:	4b97      	ldr	r3, [pc, #604]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	4a96      	ldr	r2, [pc, #600]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004d78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d7e:	4b94      	ldr	r3, [pc, #592]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8e:	4b90      	ldr	r3, [pc, #576]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	4a8f      	ldr	r2, [pc, #572]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	6313      	str	r3, [r2, #48]	; 0x30
 8004d9a:	4b8d      	ldr	r3, [pc, #564]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004da6:	23e0      	movs	r3, #224	; 0xe0
 8004da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004daa:	2302      	movs	r3, #2
 8004dac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004db2:	2303      	movs	r3, #3
 8004db4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004db6:	2305      	movs	r3, #5
 8004db8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4884      	ldr	r0, [pc, #528]	; (8004fd4 <HAL_SPI_MspInit+0x288>)
 8004dc2:	f000 ff95 	bl	8005cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8004dc6:	e0fc      	b.n	8004fc2 <HAL_SPI_MspInit+0x276>
  else if(hspi->Instance==SPI2)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a82      	ldr	r2, [pc, #520]	; (8004fd8 <HAL_SPI_MspInit+0x28c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d14b      	bne.n	8004e6a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	623b      	str	r3, [r7, #32]
 8004dd6:	4b7e      	ldr	r3, [pc, #504]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	4a7d      	ldr	r2, [pc, #500]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004de0:	6413      	str	r3, [r2, #64]	; 0x40
 8004de2:	4b7b      	ldr	r3, [pc, #492]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dea:	623b      	str	r3, [r7, #32]
 8004dec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
 8004df2:	4b77      	ldr	r3, [pc, #476]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	4a76      	ldr	r2, [pc, #472]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004df8:	f043 0304 	orr.w	r3, r3, #4
 8004dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dfe:	4b74      	ldr	r3, [pc, #464]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	61fb      	str	r3, [r7, #28]
 8004e08:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	4b70      	ldr	r3, [pc, #448]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	4a6f      	ldr	r2, [pc, #444]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004e14:	f043 0302 	orr.w	r3, r3, #2
 8004e18:	6313      	str	r3, [r2, #48]	; 0x30
 8004e1a:	4b6d      	ldr	r3, [pc, #436]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e26:	2304      	movs	r3, #4
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e32:	2303      	movs	r3, #3
 8004e34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e36:	2305      	movs	r3, #5
 8004e38:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4866      	ldr	r0, [pc, #408]	; (8004fdc <HAL_SPI_MspInit+0x290>)
 8004e42:	f000 ff55 	bl	8005cf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004e46:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e54:	2303      	movs	r3, #3
 8004e56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e58:	2305      	movs	r3, #5
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e60:	4619      	mov	r1, r3
 8004e62:	485f      	ldr	r0, [pc, #380]	; (8004fe0 <HAL_SPI_MspInit+0x294>)
 8004e64:	f000 ff44 	bl	8005cf0 <HAL_GPIO_Init>
}
 8004e68:	e0ab      	b.n	8004fc2 <HAL_SPI_MspInit+0x276>
  else if(hspi->Instance==SPI5)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a5d      	ldr	r2, [pc, #372]	; (8004fe4 <HAL_SPI_MspInit+0x298>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	f040 80a6 	bne.w	8004fc2 <HAL_SPI_MspInit+0x276>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	4b55      	ldr	r3, [pc, #340]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	4a54      	ldr	r2, [pc, #336]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e84:	6453      	str	r3, [r2, #68]	; 0x44
 8004e86:	4b52      	ldr	r3, [pc, #328]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	4b4e      	ldr	r3, [pc, #312]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	4a4d      	ldr	r2, [pc, #308]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004e9c:	f043 0310 	orr.w	r3, r3, #16
 8004ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ea2:	4b4b      	ldr	r3, [pc, #300]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	613b      	str	r3, [r7, #16]
 8004eac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	4b47      	ldr	r3, [pc, #284]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	4a46      	ldr	r2, [pc, #280]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004eb8:	f043 0302 	orr.w	r3, r3, #2
 8004ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ebe:	4b44      	ldr	r3, [pc, #272]	; (8004fd0 <HAL_SPI_MspInit+0x284>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004eca:	2360      	movs	r3, #96	; 0x60
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004eda:	2306      	movs	r3, #6
 8004edc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4840      	ldr	r0, [pc, #256]	; (8004fe8 <HAL_SPI_MspInit+0x29c>)
 8004ee6:	f000 ff03 	bl	8005cf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004eea:	2303      	movs	r3, #3
 8004eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eee:	2302      	movs	r3, #2
 8004ef0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004efa:	2306      	movs	r3, #6
 8004efc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f02:	4619      	mov	r1, r3
 8004f04:	4836      	ldr	r0, [pc, #216]	; (8004fe0 <HAL_SPI_MspInit+0x294>)
 8004f06:	f000 fef3 	bl	8005cf0 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA2_Stream3;
 8004f0a:	4b38      	ldr	r3, [pc, #224]	; (8004fec <HAL_SPI_MspInit+0x2a0>)
 8004f0c:	4a38      	ldr	r2, [pc, #224]	; (8004ff0 <HAL_SPI_MspInit+0x2a4>)
 8004f0e:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 8004f10:	4b36      	ldr	r3, [pc, #216]	; (8004fec <HAL_SPI_MspInit+0x2a0>)
 8004f12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004f16:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f18:	4b34      	ldr	r3, [pc, #208]	; (8004fec <HAL_SPI_MspInit+0x2a0>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f1e:	4b33      	ldr	r3, [pc, #204]	; (8004fec <HAL_SPI_MspInit+0x2a0>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f24:	4b31      	ldr	r3, [pc, #196]	; (8004fec <HAL_SPI_MspInit+0x2a0>)
 8004f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f2a:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f2c:	4b2f      	ldr	r3, [pc, #188]	; (8004fec <HAL_SPI_MspInit+0x2a0>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f32:	4b2e      	ldr	r3, [pc, #184]	; (8004fec <HAL_SPI_MspInit+0x2a0>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 8004f38:	4b2c      	ldr	r3, [pc, #176]	; (8004fec <HAL_SPI_MspInit+0x2a0>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004f3e:	4b2b      	ldr	r3, [pc, #172]	; (8004fec <HAL_SPI_MspInit+0x2a0>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f44:	4b29      	ldr	r3, [pc, #164]	; (8004fec <HAL_SPI_MspInit+0x2a0>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8004f4a:	4828      	ldr	r0, [pc, #160]	; (8004fec <HAL_SPI_MspInit+0x2a0>)
 8004f4c:	f000 fb60 	bl	8005610 <HAL_DMA_Init>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <HAL_SPI_MspInit+0x20e>
      Error_Handler();
 8004f56:	f7fe ffbf 	bl	8003ed8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a23      	ldr	r2, [pc, #140]	; (8004fec <HAL_SPI_MspInit+0x2a0>)
 8004f5e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f60:	4a22      	ldr	r2, [pc, #136]	; (8004fec <HAL_SPI_MspInit+0x2a0>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi5_tx.Instance = DMA2_Stream4;
 8004f66:	4b23      	ldr	r3, [pc, #140]	; (8004ff4 <HAL_SPI_MspInit+0x2a8>)
 8004f68:	4a23      	ldr	r2, [pc, #140]	; (8004ff8 <HAL_SPI_MspInit+0x2ac>)
 8004f6a:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8004f6c:	4b21      	ldr	r3, [pc, #132]	; (8004ff4 <HAL_SPI_MspInit+0x2a8>)
 8004f6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004f72:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f74:	4b1f      	ldr	r3, [pc, #124]	; (8004ff4 <HAL_SPI_MspInit+0x2a8>)
 8004f76:	2240      	movs	r2, #64	; 0x40
 8004f78:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f7a:	4b1e      	ldr	r3, [pc, #120]	; (8004ff4 <HAL_SPI_MspInit+0x2a8>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f80:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <HAL_SPI_MspInit+0x2a8>)
 8004f82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f86:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f88:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <HAL_SPI_MspInit+0x2a8>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f8e:	4b19      	ldr	r3, [pc, #100]	; (8004ff4 <HAL_SPI_MspInit+0x2a8>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8004f94:	4b17      	ldr	r3, [pc, #92]	; (8004ff4 <HAL_SPI_MspInit+0x2a8>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f9a:	4b16      	ldr	r3, [pc, #88]	; (8004ff4 <HAL_SPI_MspInit+0x2a8>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fa0:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <HAL_SPI_MspInit+0x2a8>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8004fa6:	4813      	ldr	r0, [pc, #76]	; (8004ff4 <HAL_SPI_MspInit+0x2a8>)
 8004fa8:	f000 fb32 	bl	8005610 <HAL_DMA_Init>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_SPI_MspInit+0x26a>
      Error_Handler();
 8004fb2:	f7fe ff91 	bl	8003ed8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi5_tx);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a0e      	ldr	r2, [pc, #56]	; (8004ff4 <HAL_SPI_MspInit+0x2a8>)
 8004fba:	649a      	str	r2, [r3, #72]	; 0x48
 8004fbc:	4a0d      	ldr	r2, [pc, #52]	; (8004ff4 <HAL_SPI_MspInit+0x2a8>)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004fc2:	bf00      	nop
 8004fc4:	3740      	adds	r7, #64	; 0x40
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40013000 	.word	0x40013000
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	40020000 	.word	0x40020000
 8004fd8:	40003800 	.word	0x40003800
 8004fdc:	40020800 	.word	0x40020800
 8004fe0:	40020400 	.word	0x40020400
 8004fe4:	40015000 	.word	0x40015000
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	20005080 	.word	0x20005080
 8004ff0:	40026458 	.word	0x40026458
 8004ff4:	200053fc 	.word	0x200053fc
 8004ff8:	40026470 	.word	0x40026470

08004ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500c:	d116      	bne.n	800503c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	4b20      	ldr	r3, [pc, #128]	; (8005094 <HAL_TIM_Base_MspInit+0x98>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	4a1f      	ldr	r2, [pc, #124]	; (8005094 <HAL_TIM_Base_MspInit+0x98>)
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	6413      	str	r3, [r2, #64]	; 0x40
 800501e:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <HAL_TIM_Base_MspInit+0x98>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800502a:	2200      	movs	r2, #0
 800502c:	2105      	movs	r1, #5
 800502e:	201c      	movs	r0, #28
 8005030:	f000 fac4 	bl	80055bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005034:	201c      	movs	r0, #28
 8005036:	f000 fadd 	bl	80055f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800503a:	e026      	b.n	800508a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a15      	ldr	r2, [pc, #84]	; (8005098 <HAL_TIM_Base_MspInit+0x9c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d10e      	bne.n	8005064 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005046:	2300      	movs	r3, #0
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	4b12      	ldr	r3, [pc, #72]	; (8005094 <HAL_TIM_Base_MspInit+0x98>)
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	4a11      	ldr	r2, [pc, #68]	; (8005094 <HAL_TIM_Base_MspInit+0x98>)
 8005050:	f043 0302 	orr.w	r3, r3, #2
 8005054:	6413      	str	r3, [r2, #64]	; 0x40
 8005056:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <HAL_TIM_Base_MspInit+0x98>)
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	693b      	ldr	r3, [r7, #16]
}
 8005062:	e012      	b.n	800508a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a0c      	ldr	r2, [pc, #48]	; (800509c <HAL_TIM_Base_MspInit+0xa0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d10d      	bne.n	800508a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	4b08      	ldr	r3, [pc, #32]	; (8005094 <HAL_TIM_Base_MspInit+0x98>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	4a07      	ldr	r2, [pc, #28]	; (8005094 <HAL_TIM_Base_MspInit+0x98>)
 8005078:	f043 0308 	orr.w	r3, r3, #8
 800507c:	6413      	str	r3, [r2, #64]	; 0x40
 800507e:	4b05      	ldr	r3, [pc, #20]	; (8005094 <HAL_TIM_Base_MspInit+0x98>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
}
 800508a:	bf00      	nop
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40023800 	.word	0x40023800
 8005098:	40000400 	.word	0x40000400
 800509c:	40000c00 	.word	0x40000c00

080050a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08a      	sub	sp, #40	; 0x28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050a8:	f107 0314 	add.w	r3, r7, #20
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	605a      	str	r2, [r3, #4]
 80050b2:	609a      	str	r2, [r3, #8]
 80050b4:	60da      	str	r2, [r3, #12]
 80050b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c0:	d11e      	bne.n	8005100 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050c2:	2300      	movs	r3, #0
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	4b22      	ldr	r3, [pc, #136]	; (8005150 <HAL_TIM_MspPostInit+0xb0>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	4a21      	ldr	r2, [pc, #132]	; (8005150 <HAL_TIM_MspPostInit+0xb0>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	6313      	str	r3, [r2, #48]	; 0x30
 80050d2:	4b1f      	ldr	r3, [pc, #124]	; (8005150 <HAL_TIM_MspPostInit+0xb0>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = me_rb_Pin|me_lb_Pin|me_lf_Pin;
 80050de:	230e      	movs	r3, #14
 80050e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e2:	2302      	movs	r3, #2
 80050e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ea:	2300      	movs	r3, #0
 80050ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80050ee:	2301      	movs	r3, #1
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050f2:	f107 0314 	add.w	r3, r7, #20
 80050f6:	4619      	mov	r1, r3
 80050f8:	4816      	ldr	r0, [pc, #88]	; (8005154 <HAL_TIM_MspPostInit+0xb4>)
 80050fa:	f000 fdf9 	bl	8005cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80050fe:	e023      	b.n	8005148 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a14      	ldr	r2, [pc, #80]	; (8005158 <HAL_TIM_MspPostInit+0xb8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d11e      	bne.n	8005148 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	4b10      	ldr	r3, [pc, #64]	; (8005150 <HAL_TIM_MspPostInit+0xb0>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	4a0f      	ldr	r2, [pc, #60]	; (8005150 <HAL_TIM_MspPostInit+0xb0>)
 8005114:	f043 0304 	orr.w	r3, r3, #4
 8005118:	6313      	str	r3, [r2, #48]	; 0x30
 800511a:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <HAL_TIM_MspPostInit+0xb0>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800512a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800512c:	2302      	movs	r3, #2
 800512e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005130:	2300      	movs	r3, #0
 8005132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005134:	2300      	movs	r3, #0
 8005136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005138:	2302      	movs	r3, #2
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800513c:	f107 0314 	add.w	r3, r7, #20
 8005140:	4619      	mov	r1, r3
 8005142:	4806      	ldr	r0, [pc, #24]	; (800515c <HAL_TIM_MspPostInit+0xbc>)
 8005144:	f000 fdd4 	bl	8005cf0 <HAL_GPIO_Init>
}
 8005148:	bf00      	nop
 800514a:	3728      	adds	r7, #40	; 0x28
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40023800 	.word	0x40023800
 8005154:	40020000 	.word	0x40020000
 8005158:	40000400 	.word	0x40000400
 800515c:	40020800 	.word	0x40020800

08005160 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08c      	sub	sp, #48	; 0x30
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800516c:	2300      	movs	r3, #0
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8005170:	2200      	movs	r2, #0
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	201a      	movs	r0, #26
 8005176:	f000 fa21 	bl	80055bc <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800517a:	201a      	movs	r0, #26
 800517c:	f000 fa3a 	bl	80055f4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	4b1e      	ldr	r3, [pc, #120]	; (8005200 <HAL_InitTick+0xa0>)
 8005186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005188:	4a1d      	ldr	r2, [pc, #116]	; (8005200 <HAL_InitTick+0xa0>)
 800518a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800518e:	6453      	str	r3, [r2, #68]	; 0x44
 8005190:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <HAL_InitTick+0xa0>)
 8005192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800519c:	f107 0210 	add.w	r2, r7, #16
 80051a0:	f107 0314 	add.w	r3, r7, #20
 80051a4:	4611      	mov	r1, r2
 80051a6:	4618      	mov	r0, r3
 80051a8:	f004 f9e2 	bl	8009570 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80051ac:	f004 f9cc 	bl	8009548 <HAL_RCC_GetPCLK2Freq>
 80051b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	4a13      	ldr	r2, [pc, #76]	; (8005204 <HAL_InitTick+0xa4>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	0c9b      	lsrs	r3, r3, #18
 80051bc:	3b01      	subs	r3, #1
 80051be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80051c0:	4b11      	ldr	r3, [pc, #68]	; (8005208 <HAL_InitTick+0xa8>)
 80051c2:	4a12      	ldr	r2, [pc, #72]	; (800520c <HAL_InitTick+0xac>)
 80051c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <HAL_InitTick+0xa8>)
 80051c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80051cc:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80051ce:	4a0e      	ldr	r2, [pc, #56]	; (8005208 <HAL_InitTick+0xa8>)
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80051d4:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <HAL_InitTick+0xa8>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051da:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <HAL_InitTick+0xa8>)
 80051dc:	2200      	movs	r2, #0
 80051de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80051e0:	4809      	ldr	r0, [pc, #36]	; (8005208 <HAL_InitTick+0xa8>)
 80051e2:	f005 faf1 	bl	800a7c8 <HAL_TIM_Base_Init>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d104      	bne.n	80051f6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 80051ec:	4806      	ldr	r0, [pc, #24]	; (8005208 <HAL_InitTick+0xa8>)
 80051ee:	f005 fb95 	bl	800a91c <HAL_TIM_Base_Start_IT>
 80051f2:	4603      	mov	r3, r0
 80051f4:	e000      	b.n	80051f8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3730      	adds	r7, #48	; 0x30
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40023800 	.word	0x40023800
 8005204:	431bde83 	.word	0x431bde83
 8005208:	20005950 	.word	0x20005950
 800520c:	40014800 	.word	0x40014800

08005210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005214:	e7fe      	b.n	8005214 <NMI_Handler+0x4>

08005216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005216:	b480      	push	{r7}
 8005218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800521a:	e7fe      	b.n	800521a <HardFault_Handler+0x4>

0800521c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005220:	e7fe      	b.n	8005220 <MemManage_Handler+0x4>

08005222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005222:	b480      	push	{r7}
 8005224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005226:	e7fe      	b.n	8005226 <BusFault_Handler+0x4>

08005228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800522c:	e7fe      	b.n	800522c <UsageFault_Handler+0x4>

0800522e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800522e:	b480      	push	{r7}
 8005230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005232:	bf00      	nop
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005240:	2002      	movs	r0, #2
 8005242:	f000 ff25 	bl	8006090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005246:	bf00      	nop
 8005248:	bd80      	pop	{r7, pc}

0800524a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800524e:	2004      	movs	r0, #4
 8005250:	f000 ff1e 	bl	8006090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005254:	bf00      	nop
 8005256:	bd80      	pop	{r7, pc}

08005258 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800525c:	2008      	movs	r0, #8
 800525e:	f000 ff17 	bl	8006090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005262:	bf00      	nop
 8005264:	bd80      	pop	{r7, pc}

08005266 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800526a:	2010      	movs	r0, #16
 800526c:	f000 ff10 	bl	8006090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005270:	bf00      	nop
 8005272:	bd80      	pop	{r7, pc}

08005274 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005278:	2080      	movs	r0, #128	; 0x80
 800527a:	f000 ff09 	bl	8006090 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800527e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005282:	f000 ff05 	bl	8006090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005286:	bf00      	nop
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8005290:	4802      	ldr	r0, [pc, #8]	; (800529c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8005292:	f005 fcaf 	bl	800abf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005296:	bf00      	nop
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20005950 	.word	0x20005950

080052a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80052a4:	4802      	ldr	r0, [pc, #8]	; (80052b0 <TIM2_IRQHandler+0x10>)
 80052a6:	f005 fca5 	bl	800abf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20005640 	.word	0x20005640

080052b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80052b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80052bc:	f000 fee8 	bl	8006090 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80052c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80052c4:	f000 fee4 	bl	8006090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80052c8:	bf00      	nop
 80052ca:	bd80      	pop	{r7, pc}

080052cc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 80052d0:	4802      	ldr	r0, [pc, #8]	; (80052dc <DMA2_Stream3_IRQHandler+0x10>)
 80052d2:	f000 faa3 	bl	800581c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20005080 	.word	0x20005080

080052e0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 80052e4:	4802      	ldr	r0, [pc, #8]	; (80052f0 <DMA2_Stream4_IRQHandler+0x10>)
 80052e6:	f000 fa99 	bl	800581c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80052ea:	bf00      	nop
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	200053fc 	.word	0x200053fc

080052f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80052f8:	4802      	ldr	r0, [pc, #8]	; (8005304 <OTG_FS_IRQHandler+0x10>)
 80052fa:	f002 fc91 	bl	8007c20 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80052fe:	bf00      	nop
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20006eac 	.word	0x20006eac

08005308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <SystemInit+0x20>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005312:	4a05      	ldr	r2, [pc, #20]	; (8005328 <SystemInit+0x20>)
 8005314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	e000ed00 	.word	0xe000ed00

0800532c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800532c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005364 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005330:	480d      	ldr	r0, [pc, #52]	; (8005368 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005332:	490e      	ldr	r1, [pc, #56]	; (800536c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005334:	4a0e      	ldr	r2, [pc, #56]	; (8005370 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005338:	e002      	b.n	8005340 <LoopCopyDataInit>

0800533a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800533a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800533c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800533e:	3304      	adds	r3, #4

08005340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005344:	d3f9      	bcc.n	800533a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005346:	4a0b      	ldr	r2, [pc, #44]	; (8005374 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005348:	4c0b      	ldr	r4, [pc, #44]	; (8005378 <LoopFillZerobss+0x26>)
  movs r3, #0
 800534a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800534c:	e001      	b.n	8005352 <LoopFillZerobss>

0800534e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800534e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005350:	3204      	adds	r2, #4

08005352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005354:	d3fb      	bcc.n	800534e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005356:	f7ff ffd7 	bl	8005308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800535a:	f00c fd13 	bl	8011d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800535e:	f7fd fbbd 	bl	8002adc <main>
  bx  lr    
 8005362:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800536c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8005370:	08012b38 	.word	0x08012b38
  ldr r2, =_sbss
 8005374:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8005378:	200072b4 	.word	0x200072b4

0800537c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800537c:	e7fe      	b.n	800537c <ADC_IRQHandler>
	...

08005380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005384:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <HAL_Init+0x40>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a0d      	ldr	r2, [pc, #52]	; (80053c0 <HAL_Init+0x40>)
 800538a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800538e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <HAL_Init+0x40>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <HAL_Init+0x40>)
 8005396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800539a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800539c:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <HAL_Init+0x40>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a07      	ldr	r2, [pc, #28]	; (80053c0 <HAL_Init+0x40>)
 80053a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053a8:	2003      	movs	r0, #3
 80053aa:	f000 f8fc 	bl	80055a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053ae:	200f      	movs	r0, #15
 80053b0:	f7ff fed6 	bl	8005160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053b4:	f7ff fbd2 	bl	8004b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	40023c00 	.word	0x40023c00

080053c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053c8:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <HAL_IncTick+0x20>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <HAL_IncTick+0x24>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4413      	add	r3, r2
 80053d4:	4a04      	ldr	r2, [pc, #16]	; (80053e8 <HAL_IncTick+0x24>)
 80053d6:	6013      	str	r3, [r2, #0]
}
 80053d8:	bf00      	nop
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20000014 	.word	0x20000014
 80053e8:	20005998 	.word	0x20005998

080053ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  return uwTick;
 80053f0:	4b03      	ldr	r3, [pc, #12]	; (8005400 <HAL_GetTick+0x14>)
 80053f2:	681b      	ldr	r3, [r3, #0]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	20005998 	.word	0x20005998

08005404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800540c:	f7ff ffee 	bl	80053ec <HAL_GetTick>
 8005410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541c:	d005      	beq.n	800542a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800541e:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <HAL_Delay+0x44>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800542a:	bf00      	nop
 800542c:	f7ff ffde 	bl	80053ec <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	429a      	cmp	r2, r3
 800543a:	d8f7      	bhi.n	800542c <HAL_Delay+0x28>
  {
  }
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000014 	.word	0x20000014

0800544c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800545c:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <__NVIC_SetPriorityGrouping+0x44>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005468:	4013      	ands	r3, r2
 800546a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800547c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800547e:	4a04      	ldr	r2, [pc, #16]	; (8005490 <__NVIC_SetPriorityGrouping+0x44>)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	60d3      	str	r3, [r2, #12]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	e000ed00 	.word	0xe000ed00

08005494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005498:	4b04      	ldr	r3, [pc, #16]	; (80054ac <__NVIC_GetPriorityGrouping+0x18>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	0a1b      	lsrs	r3, r3, #8
 800549e:	f003 0307 	and.w	r3, r3, #7
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	e000ed00 	.word	0xe000ed00

080054b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	4603      	mov	r3, r0
 80054b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	db0b      	blt.n	80054da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054c2:	79fb      	ldrb	r3, [r7, #7]
 80054c4:	f003 021f 	and.w	r2, r3, #31
 80054c8:	4907      	ldr	r1, [pc, #28]	; (80054e8 <__NVIC_EnableIRQ+0x38>)
 80054ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	2001      	movs	r0, #1
 80054d2:	fa00 f202 	lsl.w	r2, r0, r2
 80054d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	e000e100 	.word	0xe000e100

080054ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	6039      	str	r1, [r7, #0]
 80054f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	db0a      	blt.n	8005516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	b2da      	uxtb	r2, r3
 8005504:	490c      	ldr	r1, [pc, #48]	; (8005538 <__NVIC_SetPriority+0x4c>)
 8005506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800550a:	0112      	lsls	r2, r2, #4
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	440b      	add	r3, r1
 8005510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005514:	e00a      	b.n	800552c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	b2da      	uxtb	r2, r3
 800551a:	4908      	ldr	r1, [pc, #32]	; (800553c <__NVIC_SetPriority+0x50>)
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	3b04      	subs	r3, #4
 8005524:	0112      	lsls	r2, r2, #4
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	440b      	add	r3, r1
 800552a:	761a      	strb	r2, [r3, #24]
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	e000e100 	.word	0xe000e100
 800553c:	e000ed00 	.word	0xe000ed00

08005540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005540:	b480      	push	{r7}
 8005542:	b089      	sub	sp, #36	; 0x24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f1c3 0307 	rsb	r3, r3, #7
 800555a:	2b04      	cmp	r3, #4
 800555c:	bf28      	it	cs
 800555e:	2304      	movcs	r3, #4
 8005560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	3304      	adds	r3, #4
 8005566:	2b06      	cmp	r3, #6
 8005568:	d902      	bls.n	8005570 <NVIC_EncodePriority+0x30>
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	3b03      	subs	r3, #3
 800556e:	e000      	b.n	8005572 <NVIC_EncodePriority+0x32>
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005574:	f04f 32ff 	mov.w	r2, #4294967295
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	43da      	mvns	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	401a      	ands	r2, r3
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005588:	f04f 31ff 	mov.w	r1, #4294967295
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	fa01 f303 	lsl.w	r3, r1, r3
 8005592:	43d9      	mvns	r1, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005598:	4313      	orrs	r3, r2
         );
}
 800559a:	4618      	mov	r0, r3
 800559c:	3724      	adds	r7, #36	; 0x24
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff ff4c 	bl	800544c <__NVIC_SetPriorityGrouping>
}
 80055b4:	bf00      	nop
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055ce:	f7ff ff61 	bl	8005494 <__NVIC_GetPriorityGrouping>
 80055d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	6978      	ldr	r0, [r7, #20]
 80055da:	f7ff ffb1 	bl	8005540 <NVIC_EncodePriority>
 80055de:	4602      	mov	r2, r0
 80055e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055e4:	4611      	mov	r1, r2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff ff80 	bl	80054ec <__NVIC_SetPriority>
}
 80055ec:	bf00      	nop
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	4603      	mov	r3, r0
 80055fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff ff54 	bl	80054b0 <__NVIC_EnableIRQ>
}
 8005608:	bf00      	nop
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800561c:	f7ff fee6 	bl	80053ec <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e099      	b.n	8005760 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0201 	bic.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800564c:	e00f      	b.n	800566e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800564e:	f7ff fecd 	bl	80053ec <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b05      	cmp	r3, #5
 800565a:	d908      	bls.n	800566e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2203      	movs	r2, #3
 8005666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e078      	b.n	8005760 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e8      	bne.n	800564e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4b38      	ldr	r3, [pc, #224]	; (8005768 <HAL_DMA_Init+0x158>)
 8005688:	4013      	ands	r3, r2
 800568a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800569a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d107      	bne.n	80056d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	4313      	orrs	r3, r2
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 0307 	bic.w	r3, r3, #7
 80056ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d117      	bne.n	8005732 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00e      	beq.n	8005732 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fa6f 	bl	8005bf8 <DMA_CheckFifoParam>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d008      	beq.n	8005732 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2240      	movs	r2, #64	; 0x40
 8005724:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800572e:	2301      	movs	r3, #1
 8005730:	e016      	b.n	8005760 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fa26 	bl	8005b8c <DMA_CalcBaseAndBitshift>
 8005740:	4603      	mov	r3, r0
 8005742:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005748:	223f      	movs	r2, #63	; 0x3f
 800574a:	409a      	lsls	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	f010803f 	.word	0xf010803f

0800576c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005782:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_DMA_Start_IT+0x26>
 800578e:	2302      	movs	r3, #2
 8005790:	e040      	b.n	8005814 <HAL_DMA_Start_IT+0xa8>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d12f      	bne.n	8005806 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 f9b8 	bl	8005b30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c4:	223f      	movs	r2, #63	; 0x3f
 80057c6:	409a      	lsls	r2, r3
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0216 	orr.w	r2, r2, #22
 80057da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d007      	beq.n	80057f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0208 	orr.w	r2, r2, #8
 80057f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0201 	orr.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	e005      	b.n	8005812 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800580e:	2302      	movs	r3, #2
 8005810:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005812:	7dfb      	ldrb	r3, [r7, #23]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005828:	4b92      	ldr	r3, [pc, #584]	; (8005a74 <HAL_DMA_IRQHandler+0x258>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a92      	ldr	r2, [pc, #584]	; (8005a78 <HAL_DMA_IRQHandler+0x25c>)
 800582e:	fba2 2303 	umull	r2, r3, r2, r3
 8005832:	0a9b      	lsrs	r3, r3, #10
 8005834:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005846:	2208      	movs	r2, #8
 8005848:	409a      	lsls	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4013      	ands	r3, r2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d01a      	beq.n	8005888 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d013      	beq.n	8005888 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0204 	bic.w	r2, r2, #4
 800586e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005874:	2208      	movs	r2, #8
 8005876:	409a      	lsls	r2, r3
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005880:	f043 0201 	orr.w	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588c:	2201      	movs	r2, #1
 800588e:	409a      	lsls	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4013      	ands	r3, r2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d012      	beq.n	80058be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058aa:	2201      	movs	r2, #1
 80058ac:	409a      	lsls	r2, r3
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	f043 0202 	orr.w	r2, r3, #2
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c2:	2204      	movs	r2, #4
 80058c4:	409a      	lsls	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4013      	ands	r3, r2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d012      	beq.n	80058f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00b      	beq.n	80058f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e0:	2204      	movs	r2, #4
 80058e2:	409a      	lsls	r2, r3
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ec:	f043 0204 	orr.w	r2, r3, #4
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f8:	2210      	movs	r2, #16
 80058fa:	409a      	lsls	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4013      	ands	r3, r2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d043      	beq.n	800598c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d03c      	beq.n	800598c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005916:	2210      	movs	r2, #16
 8005918:	409a      	lsls	r2, r3
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d018      	beq.n	800595e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d108      	bne.n	800594c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d024      	beq.n	800598c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	4798      	blx	r3
 800594a:	e01f      	b.n	800598c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01b      	beq.n	800598c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	4798      	blx	r3
 800595c:	e016      	b.n	800598c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005968:	2b00      	cmp	r3, #0
 800596a:	d107      	bne.n	800597c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0208 	bic.w	r2, r2, #8
 800597a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005990:	2220      	movs	r2, #32
 8005992:	409a      	lsls	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4013      	ands	r3, r2
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 808e 	beq.w	8005aba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 8086 	beq.w	8005aba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b2:	2220      	movs	r2, #32
 80059b4:	409a      	lsls	r2, r3
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b05      	cmp	r3, #5
 80059c4:	d136      	bne.n	8005a34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0216 	bic.w	r2, r2, #22
 80059d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695a      	ldr	r2, [r3, #20]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d103      	bne.n	80059f6 <HAL_DMA_IRQHandler+0x1da>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0208 	bic.w	r2, r2, #8
 8005a04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0a:	223f      	movs	r2, #63	; 0x3f
 8005a0c:	409a      	lsls	r2, r3
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d07d      	beq.n	8005b26 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	4798      	blx	r3
        }
        return;
 8005a32:	e078      	b.n	8005b26 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d01c      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d108      	bne.n	8005a62 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d030      	beq.n	8005aba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
 8005a60:	e02b      	b.n	8005aba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d027      	beq.n	8005aba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	4798      	blx	r3
 8005a72:	e022      	b.n	8005aba <HAL_DMA_IRQHandler+0x29e>
 8005a74:	2000000c 	.word	0x2000000c
 8005a78:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10f      	bne.n	8005aaa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0210 	bic.w	r2, r2, #16
 8005a98:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d032      	beq.n	8005b28 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d022      	beq.n	8005b14 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2205      	movs	r2, #5
 8005ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0201 	bic.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	60bb      	str	r3, [r7, #8]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d307      	bcc.n	8005b02 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1f2      	bne.n	8005ae6 <HAL_DMA_IRQHandler+0x2ca>
 8005b00:	e000      	b.n	8005b04 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005b02:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d005      	beq.n	8005b28 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	4798      	blx	r3
 8005b24:	e000      	b.n	8005b28 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005b26:	bf00      	nop
    }
  }
}
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop

08005b30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
 8005b3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2b40      	cmp	r3, #64	; 0x40
 8005b5c:	d108      	bne.n	8005b70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b6e:	e007      	b.n	8005b80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	60da      	str	r2, [r3, #12]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	3b10      	subs	r3, #16
 8005b9c:	4a14      	ldr	r2, [pc, #80]	; (8005bf0 <DMA_CalcBaseAndBitshift+0x64>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	091b      	lsrs	r3, r3, #4
 8005ba4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ba6:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <DMA_CalcBaseAndBitshift+0x68>)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d909      	bls.n	8005bce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bc2:	f023 0303 	bic.w	r3, r3, #3
 8005bc6:	1d1a      	adds	r2, r3, #4
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	659a      	str	r2, [r3, #88]	; 0x58
 8005bcc:	e007      	b.n	8005bde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	aaaaaaab 	.word	0xaaaaaaab
 8005bf4:	08012aa8 	.word	0x08012aa8

08005bf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d11f      	bne.n	8005c52 <DMA_CheckFifoParam+0x5a>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d856      	bhi.n	8005cc6 <DMA_CheckFifoParam+0xce>
 8005c18:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <DMA_CheckFifoParam+0x28>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c31 	.word	0x08005c31
 8005c24:	08005c43 	.word	0x08005c43
 8005c28:	08005c31 	.word	0x08005c31
 8005c2c:	08005cc7 	.word	0x08005cc7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d046      	beq.n	8005cca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c40:	e043      	b.n	8005cca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c4a:	d140      	bne.n	8005cce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c50:	e03d      	b.n	8005cce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5a:	d121      	bne.n	8005ca0 <DMA_CheckFifoParam+0xa8>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d837      	bhi.n	8005cd2 <DMA_CheckFifoParam+0xda>
 8005c62:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <DMA_CheckFifoParam+0x70>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005c79 	.word	0x08005c79
 8005c6c:	08005c7f 	.word	0x08005c7f
 8005c70:	08005c79 	.word	0x08005c79
 8005c74:	08005c91 	.word	0x08005c91
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7c:	e030      	b.n	8005ce0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d025      	beq.n	8005cd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c8e:	e022      	b.n	8005cd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c98:	d11f      	bne.n	8005cda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c9e:	e01c      	b.n	8005cda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d903      	bls.n	8005cae <DMA_CheckFifoParam+0xb6>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d003      	beq.n	8005cb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005cac:	e018      	b.n	8005ce0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb2:	e015      	b.n	8005ce0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00e      	beq.n	8005cde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc4:	e00b      	b.n	8005cde <DMA_CheckFifoParam+0xe6>
      break;
 8005cc6:	bf00      	nop
 8005cc8:	e00a      	b.n	8005ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8005cca:	bf00      	nop
 8005ccc:	e008      	b.n	8005ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8005cce:	bf00      	nop
 8005cd0:	e006      	b.n	8005ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8005cd2:	bf00      	nop
 8005cd4:	e004      	b.n	8005ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8005cd6:	bf00      	nop
 8005cd8:	e002      	b.n	8005ce0 <DMA_CheckFifoParam+0xe8>
      break;   
 8005cda:	bf00      	nop
 8005cdc:	e000      	b.n	8005ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8005cde:	bf00      	nop
    }
  } 
  
  return status; 
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop

08005cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b089      	sub	sp, #36	; 0x24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d06:	2300      	movs	r3, #0
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	e159      	b.n	8005fc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	f040 8148 	bne.w	8005fba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d005      	beq.n	8005d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d130      	bne.n	8005da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	43db      	mvns	r3, r3
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4013      	ands	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d78:	2201      	movs	r2, #1
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	43db      	mvns	r3, r3
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	4013      	ands	r3, r2
 8005d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	091b      	lsrs	r3, r3, #4
 8005d8e:	f003 0201 	and.w	r2, r3, #1
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f003 0303 	and.w	r3, r3, #3
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d017      	beq.n	8005de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	2203      	movs	r2, #3
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	43db      	mvns	r3, r3
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f003 0303 	and.w	r3, r3, #3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d123      	bne.n	8005e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	08da      	lsrs	r2, r3, #3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3208      	adds	r2, #8
 8005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	220f      	movs	r2, #15
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	08da      	lsrs	r2, r3, #3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3208      	adds	r2, #8
 8005e2e:	69b9      	ldr	r1, [r7, #24]
 8005e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	2203      	movs	r2, #3
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	43db      	mvns	r3, r3
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f003 0203 	and.w	r2, r3, #3
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 80a2 	beq.w	8005fba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	4b57      	ldr	r3, [pc, #348]	; (8005fd8 <HAL_GPIO_Init+0x2e8>)
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7e:	4a56      	ldr	r2, [pc, #344]	; (8005fd8 <HAL_GPIO_Init+0x2e8>)
 8005e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e84:	6453      	str	r3, [r2, #68]	; 0x44
 8005e86:	4b54      	ldr	r3, [pc, #336]	; (8005fd8 <HAL_GPIO_Init+0x2e8>)
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e92:	4a52      	ldr	r2, [pc, #328]	; (8005fdc <HAL_GPIO_Init+0x2ec>)
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	089b      	lsrs	r3, r3, #2
 8005e98:	3302      	adds	r3, #2
 8005e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	220f      	movs	r2, #15
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	43db      	mvns	r3, r3
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a49      	ldr	r2, [pc, #292]	; (8005fe0 <HAL_GPIO_Init+0x2f0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d019      	beq.n	8005ef2 <HAL_GPIO_Init+0x202>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a48      	ldr	r2, [pc, #288]	; (8005fe4 <HAL_GPIO_Init+0x2f4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d013      	beq.n	8005eee <HAL_GPIO_Init+0x1fe>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a47      	ldr	r2, [pc, #284]	; (8005fe8 <HAL_GPIO_Init+0x2f8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00d      	beq.n	8005eea <HAL_GPIO_Init+0x1fa>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a46      	ldr	r2, [pc, #280]	; (8005fec <HAL_GPIO_Init+0x2fc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d007      	beq.n	8005ee6 <HAL_GPIO_Init+0x1f6>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a45      	ldr	r2, [pc, #276]	; (8005ff0 <HAL_GPIO_Init+0x300>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d101      	bne.n	8005ee2 <HAL_GPIO_Init+0x1f2>
 8005ede:	2304      	movs	r3, #4
 8005ee0:	e008      	b.n	8005ef4 <HAL_GPIO_Init+0x204>
 8005ee2:	2307      	movs	r3, #7
 8005ee4:	e006      	b.n	8005ef4 <HAL_GPIO_Init+0x204>
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e004      	b.n	8005ef4 <HAL_GPIO_Init+0x204>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e002      	b.n	8005ef4 <HAL_GPIO_Init+0x204>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <HAL_GPIO_Init+0x204>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	69fa      	ldr	r2, [r7, #28]
 8005ef6:	f002 0203 	and.w	r2, r2, #3
 8005efa:	0092      	lsls	r2, r2, #2
 8005efc:	4093      	lsls	r3, r2
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f04:	4935      	ldr	r1, [pc, #212]	; (8005fdc <HAL_GPIO_Init+0x2ec>)
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	089b      	lsrs	r3, r3, #2
 8005f0a:	3302      	adds	r3, #2
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f12:	4b38      	ldr	r3, [pc, #224]	; (8005ff4 <HAL_GPIO_Init+0x304>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f36:	4a2f      	ldr	r2, [pc, #188]	; (8005ff4 <HAL_GPIO_Init+0x304>)
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f3c:	4b2d      	ldr	r3, [pc, #180]	; (8005ff4 <HAL_GPIO_Init+0x304>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	43db      	mvns	r3, r3
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f60:	4a24      	ldr	r2, [pc, #144]	; (8005ff4 <HAL_GPIO_Init+0x304>)
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f66:	4b23      	ldr	r3, [pc, #140]	; (8005ff4 <HAL_GPIO_Init+0x304>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	43db      	mvns	r3, r3
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	4013      	ands	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f8a:	4a1a      	ldr	r2, [pc, #104]	; (8005ff4 <HAL_GPIO_Init+0x304>)
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f90:	4b18      	ldr	r3, [pc, #96]	; (8005ff4 <HAL_GPIO_Init+0x304>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	43db      	mvns	r3, r3
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fb4:	4a0f      	ldr	r2, [pc, #60]	; (8005ff4 <HAL_GPIO_Init+0x304>)
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	61fb      	str	r3, [r7, #28]
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	2b0f      	cmp	r3, #15
 8005fc4:	f67f aea2 	bls.w	8005d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005fc8:	bf00      	nop
 8005fca:	bf00      	nop
 8005fcc:	3724      	adds	r7, #36	; 0x24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	40013800 	.word	0x40013800
 8005fe0:	40020000 	.word	0x40020000
 8005fe4:	40020400 	.word	0x40020400
 8005fe8:	40020800 	.word	0x40020800
 8005fec:	40020c00 	.word	0x40020c00
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	40013c00 	.word	0x40013c00

08005ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	887b      	ldrh	r3, [r7, #2]
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006010:	2301      	movs	r3, #1
 8006012:	73fb      	strb	r3, [r7, #15]
 8006014:	e001      	b.n	800601a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006016:	2300      	movs	r3, #0
 8006018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800601a:	7bfb      	ldrb	r3, [r7, #15]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	807b      	strh	r3, [r7, #2]
 8006034:	4613      	mov	r3, r2
 8006036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006038:	787b      	ldrb	r3, [r7, #1]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800603e:	887a      	ldrh	r2, [r7, #2]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006044:	e003      	b.n	800604e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006046:	887b      	ldrh	r3, [r7, #2]
 8006048:	041a      	lsls	r2, r3, #16
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	619a      	str	r2, [r3, #24]
}
 800604e:	bf00      	nop
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800605a:	b480      	push	{r7}
 800605c:	b085      	sub	sp, #20
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	460b      	mov	r3, r1
 8006064:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800606c:	887a      	ldrh	r2, [r7, #2]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4013      	ands	r3, r2
 8006072:	041a      	lsls	r2, r3, #16
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	43d9      	mvns	r1, r3
 8006078:	887b      	ldrh	r3, [r7, #2]
 800607a:	400b      	ands	r3, r1
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	619a      	str	r2, [r3, #24]
}
 8006082:	bf00      	nop
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
	...

08006090 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	4603      	mov	r3, r0
 8006098:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800609a:	4b08      	ldr	r3, [pc, #32]	; (80060bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800609c:	695a      	ldr	r2, [r3, #20]
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d006      	beq.n	80060b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060a6:	4a05      	ldr	r2, [pc, #20]	; (80060bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060a8:	88fb      	ldrh	r3, [r7, #6]
 80060aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fc fbcc 	bl	800284c <HAL_GPIO_EXTI_Callback>
  }
}
 80060b4:	bf00      	nop
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40013c00 	.word	0x40013c00

080060c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e12b      	b.n	800632a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fe fd64 	bl	8004bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2224      	movs	r2, #36	; 0x24
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0201 	bic.w	r2, r2, #1
 8006102:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006112:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006122:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006124:	f003 f9fc 	bl	8009520 <HAL_RCC_GetPCLK1Freq>
 8006128:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4a81      	ldr	r2, [pc, #516]	; (8006334 <HAL_I2C_Init+0x274>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d807      	bhi.n	8006144 <HAL_I2C_Init+0x84>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4a80      	ldr	r2, [pc, #512]	; (8006338 <HAL_I2C_Init+0x278>)
 8006138:	4293      	cmp	r3, r2
 800613a:	bf94      	ite	ls
 800613c:	2301      	movls	r3, #1
 800613e:	2300      	movhi	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	e006      	b.n	8006152 <HAL_I2C_Init+0x92>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4a7d      	ldr	r2, [pc, #500]	; (800633c <HAL_I2C_Init+0x27c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	bf94      	ite	ls
 800614c:	2301      	movls	r3, #1
 800614e:	2300      	movhi	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e0e7      	b.n	800632a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4a78      	ldr	r2, [pc, #480]	; (8006340 <HAL_I2C_Init+0x280>)
 800615e:	fba2 2303 	umull	r2, r3, r2, r3
 8006162:	0c9b      	lsrs	r3, r3, #18
 8006164:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	4a6a      	ldr	r2, [pc, #424]	; (8006334 <HAL_I2C_Init+0x274>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d802      	bhi.n	8006194 <HAL_I2C_Init+0xd4>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	3301      	adds	r3, #1
 8006192:	e009      	b.n	80061a8 <HAL_I2C_Init+0xe8>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	4a69      	ldr	r2, [pc, #420]	; (8006344 <HAL_I2C_Init+0x284>)
 80061a0:	fba2 2303 	umull	r2, r3, r2, r3
 80061a4:	099b      	lsrs	r3, r3, #6
 80061a6:	3301      	adds	r3, #1
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6812      	ldr	r2, [r2, #0]
 80061ac:	430b      	orrs	r3, r1
 80061ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80061ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	495c      	ldr	r1, [pc, #368]	; (8006334 <HAL_I2C_Init+0x274>)
 80061c4:	428b      	cmp	r3, r1
 80061c6:	d819      	bhi.n	80061fc <HAL_I2C_Init+0x13c>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	1e59      	subs	r1, r3, #1
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80061d6:	1c59      	adds	r1, r3, #1
 80061d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80061dc:	400b      	ands	r3, r1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <HAL_I2C_Init+0x138>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1e59      	subs	r1, r3, #1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80061f0:	3301      	adds	r3, #1
 80061f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f6:	e051      	b.n	800629c <HAL_I2C_Init+0x1dc>
 80061f8:	2304      	movs	r3, #4
 80061fa:	e04f      	b.n	800629c <HAL_I2C_Init+0x1dc>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d111      	bne.n	8006228 <HAL_I2C_Init+0x168>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	1e58      	subs	r0, r3, #1
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6859      	ldr	r1, [r3, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	440b      	add	r3, r1
 8006212:	fbb0 f3f3 	udiv	r3, r0, r3
 8006216:	3301      	adds	r3, #1
 8006218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800621c:	2b00      	cmp	r3, #0
 800621e:	bf0c      	ite	eq
 8006220:	2301      	moveq	r3, #1
 8006222:	2300      	movne	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	e012      	b.n	800624e <HAL_I2C_Init+0x18e>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	1e58      	subs	r0, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6859      	ldr	r1, [r3, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	0099      	lsls	r1, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	fbb0 f3f3 	udiv	r3, r0, r3
 800623e:	3301      	adds	r3, #1
 8006240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006244:	2b00      	cmp	r3, #0
 8006246:	bf0c      	ite	eq
 8006248:	2301      	moveq	r3, #1
 800624a:	2300      	movne	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <HAL_I2C_Init+0x196>
 8006252:	2301      	movs	r3, #1
 8006254:	e022      	b.n	800629c <HAL_I2C_Init+0x1dc>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10e      	bne.n	800627c <HAL_I2C_Init+0x1bc>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1e58      	subs	r0, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6859      	ldr	r1, [r3, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	440b      	add	r3, r1
 800626c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006270:	3301      	adds	r3, #1
 8006272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627a:	e00f      	b.n	800629c <HAL_I2C_Init+0x1dc>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	1e58      	subs	r0, r3, #1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6859      	ldr	r1, [r3, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	440b      	add	r3, r1
 800628a:	0099      	lsls	r1, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006292:	3301      	adds	r3, #1
 8006294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	6809      	ldr	r1, [r1, #0]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69da      	ldr	r2, [r3, #28]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80062ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6911      	ldr	r1, [r2, #16]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	68d2      	ldr	r2, [r2, #12]
 80062d6:	4311      	orrs	r1, r2
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6812      	ldr	r2, [r2, #0]
 80062dc:	430b      	orrs	r3, r1
 80062de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695a      	ldr	r2, [r3, #20]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	000186a0 	.word	0x000186a0
 8006338:	001e847f 	.word	0x001e847f
 800633c:	003d08ff 	.word	0x003d08ff
 8006340:	431bde83 	.word	0x431bde83
 8006344:	10624dd3 	.word	0x10624dd3

08006348 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	4608      	mov	r0, r1
 8006352:	4611      	mov	r1, r2
 8006354:	461a      	mov	r2, r3
 8006356:	4603      	mov	r3, r0
 8006358:	817b      	strh	r3, [r7, #10]
 800635a:	460b      	mov	r3, r1
 800635c:	813b      	strh	r3, [r7, #8]
 800635e:	4613      	mov	r3, r2
 8006360:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006362:	f7ff f843 	bl	80053ec <HAL_GetTick>
 8006366:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b20      	cmp	r3, #32
 8006372:	f040 80d9 	bne.w	8006528 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	2319      	movs	r3, #25
 800637c:	2201      	movs	r2, #1
 800637e:	496d      	ldr	r1, [pc, #436]	; (8006534 <HAL_I2C_Mem_Write+0x1ec>)
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 fc7f 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800638c:	2302      	movs	r3, #2
 800638e:	e0cc      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_I2C_Mem_Write+0x56>
 800639a:	2302      	movs	r3, #2
 800639c:	e0c5      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d007      	beq.n	80063c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2221      	movs	r2, #33	; 0x21
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2240      	movs	r2, #64	; 0x40
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a3a      	ldr	r2, [r7, #32]
 80063ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a4d      	ldr	r2, [pc, #308]	; (8006538 <HAL_I2C_Mem_Write+0x1f0>)
 8006404:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006406:	88f8      	ldrh	r0, [r7, #6]
 8006408:	893a      	ldrh	r2, [r7, #8]
 800640a:	8979      	ldrh	r1, [r7, #10]
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	4603      	mov	r3, r0
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fab6 	bl	8006988 <I2C_RequestMemoryWrite>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d052      	beq.n	80064c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e081      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 fd00 	bl	8006e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00d      	beq.n	8006452 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	2b04      	cmp	r3, #4
 800643c:	d107      	bne.n	800644e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800644c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e06b      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	781a      	ldrb	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b04      	cmp	r3, #4
 800648e:	d11b      	bne.n	80064c8 <HAL_I2C_Mem_Write+0x180>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006494:	2b00      	cmp	r3, #0
 8006496:	d017      	beq.n	80064c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	781a      	ldrb	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1aa      	bne.n	8006426 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 fcec 	bl	8006eb2 <I2C_WaitOnBTFFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00d      	beq.n	80064fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d107      	bne.n	80064f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e016      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	e000      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006528:	2302      	movs	r3, #2
  }
}
 800652a:	4618      	mov	r0, r3
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	00100002 	.word	0x00100002
 8006538:	ffff0000 	.word	0xffff0000

0800653c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08c      	sub	sp, #48	; 0x30
 8006540:	af02      	add	r7, sp, #8
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	4608      	mov	r0, r1
 8006546:	4611      	mov	r1, r2
 8006548:	461a      	mov	r2, r3
 800654a:	4603      	mov	r3, r0
 800654c:	817b      	strh	r3, [r7, #10]
 800654e:	460b      	mov	r3, r1
 8006550:	813b      	strh	r3, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006556:	f7fe ff49 	bl	80053ec <HAL_GetTick>
 800655a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b20      	cmp	r3, #32
 8006566:	f040 8208 	bne.w	800697a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	2319      	movs	r3, #25
 8006570:	2201      	movs	r2, #1
 8006572:	497b      	ldr	r1, [pc, #492]	; (8006760 <HAL_I2C_Mem_Read+0x224>)
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fb85 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006580:	2302      	movs	r3, #2
 8006582:	e1fb      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_I2C_Mem_Read+0x56>
 800658e:	2302      	movs	r3, #2
 8006590:	e1f4      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d007      	beq.n	80065b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2222      	movs	r2, #34	; 0x22
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2240      	movs	r2, #64	; 0x40
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80065e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4a5b      	ldr	r2, [pc, #364]	; (8006764 <HAL_I2C_Mem_Read+0x228>)
 80065f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065fa:	88f8      	ldrh	r0, [r7, #6]
 80065fc:	893a      	ldrh	r2, [r7, #8]
 80065fe:	8979      	ldrh	r1, [r7, #10]
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	9301      	str	r3, [sp, #4]
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	4603      	mov	r3, r0
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fa52 	bl	8006ab4 <I2C_RequestMemoryRead>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e1b0      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661e:	2b00      	cmp	r3, #0
 8006620:	d113      	bne.n	800664a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006622:	2300      	movs	r3, #0
 8006624:	623b      	str	r3, [r7, #32]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	623b      	str	r3, [r7, #32]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	623b      	str	r3, [r7, #32]
 8006636:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e184      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664e:	2b01      	cmp	r3, #1
 8006650:	d11b      	bne.n	800668a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006660:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006662:	2300      	movs	r3, #0
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	61fb      	str	r3, [r7, #28]
 8006676:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	e164      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668e:	2b02      	cmp	r3, #2
 8006690:	d11b      	bne.n	80066ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066b2:	2300      	movs	r3, #0
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	61bb      	str	r3, [r7, #24]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	e144      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ca:	2300      	movs	r3, #0
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	617b      	str	r3, [r7, #20]
 80066de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80066e0:	e138      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	f200 80f1 	bhi.w	80068ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d123      	bne.n	800673c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 fc1b 	bl	8006f34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e139      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	855a      	strh	r2, [r3, #42]	; 0x2a
 800673a:	e10b      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006740:	2b02      	cmp	r3, #2
 8006742:	d14e      	bne.n	80067e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	2200      	movs	r2, #0
 800674c:	4906      	ldr	r1, [pc, #24]	; (8006768 <HAL_I2C_Mem_Read+0x22c>)
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 fa98 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d008      	beq.n	800676c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e10e      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
 800675e:	bf00      	nop
 8006760:	00100002 	.word	0x00100002
 8006764:	ffff0000 	.word	0xffff0000
 8006768:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800677a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067e0:	e0b8      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e8:	2200      	movs	r2, #0
 80067ea:	4966      	ldr	r1, [pc, #408]	; (8006984 <HAL_I2C_Mem_Read+0x448>)
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 fa49 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e0bf      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800680a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	2200      	movs	r2, #0
 8006846:	494f      	ldr	r1, [pc, #316]	; (8006984 <HAL_I2C_Mem_Read+0x448>)
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fa1b 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e091      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068cc:	e042      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 fb2e 	bl	8006f34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e04c      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	f003 0304 	and.w	r3, r3, #4
 800691e:	2b04      	cmp	r3, #4
 8006920:	d118      	bne.n	8006954 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800693e:	3b01      	subs	r3, #1
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006958:	2b00      	cmp	r3, #0
 800695a:	f47f aec2 	bne.w	80066e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2220      	movs	r2, #32
 8006962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e000      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800697a:	2302      	movs	r3, #2
  }
}
 800697c:	4618      	mov	r0, r3
 800697e:	3728      	adds	r7, #40	; 0x28
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	00010004 	.word	0x00010004

08006988 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	4608      	mov	r0, r1
 8006992:	4611      	mov	r1, r2
 8006994:	461a      	mov	r2, r3
 8006996:	4603      	mov	r3, r0
 8006998:	817b      	strh	r3, [r7, #10]
 800699a:	460b      	mov	r3, r1
 800699c:	813b      	strh	r3, [r7, #8]
 800699e:	4613      	mov	r3, r2
 80069a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 f960 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00d      	beq.n	80069e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069d8:	d103      	bne.n	80069e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e05f      	b.n	8006aa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069e6:	897b      	ldrh	r3, [r7, #10]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	461a      	mov	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	6a3a      	ldr	r2, [r7, #32]
 80069fa:	492d      	ldr	r1, [pc, #180]	; (8006ab0 <I2C_RequestMemoryWrite+0x128>)
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 f998 	bl	8006d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e04c      	b.n	8006aa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a24:	6a39      	ldr	r1, [r7, #32]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 fa02 	bl	8006e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00d      	beq.n	8006a4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d107      	bne.n	8006a4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e02b      	b.n	8006aa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a4e:	88fb      	ldrh	r3, [r7, #6]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d105      	bne.n	8006a60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a54:	893b      	ldrh	r3, [r7, #8]
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	611a      	str	r2, [r3, #16]
 8006a5e:	e021      	b.n	8006aa4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a60:	893b      	ldrh	r3, [r7, #8]
 8006a62:	0a1b      	lsrs	r3, r3, #8
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a70:	6a39      	ldr	r1, [r7, #32]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f9dc 	bl	8006e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00d      	beq.n	8006a9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d107      	bne.n	8006a96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e005      	b.n	8006aa6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a9a:	893b      	ldrh	r3, [r7, #8]
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	00010002 	.word	0x00010002

08006ab4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	4608      	mov	r0, r1
 8006abe:	4611      	mov	r1, r2
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	817b      	strh	r3, [r7, #10]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	813b      	strh	r3, [r7, #8]
 8006aca:	4613      	mov	r3, r2
 8006acc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006adc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 f8c2 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00d      	beq.n	8006b22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b14:	d103      	bne.n	8006b1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e0aa      	b.n	8006c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b22:	897b      	ldrh	r3, [r7, #10]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	6a3a      	ldr	r2, [r7, #32]
 8006b36:	4952      	ldr	r1, [pc, #328]	; (8006c80 <I2C_RequestMemoryRead+0x1cc>)
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f8fa 	bl	8006d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e097      	b.n	8006c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b48:	2300      	movs	r3, #0
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b60:	6a39      	ldr	r1, [r7, #32]
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 f964 	bl	8006e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00d      	beq.n	8006b8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d107      	bne.n	8006b86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e076      	b.n	8006c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b8a:	88fb      	ldrh	r3, [r7, #6]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d105      	bne.n	8006b9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b90:	893b      	ldrh	r3, [r7, #8]
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	611a      	str	r2, [r3, #16]
 8006b9a:	e021      	b.n	8006be0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b9c:	893b      	ldrh	r3, [r7, #8]
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bac:	6a39      	ldr	r1, [r7, #32]
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 f93e 	bl	8006e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00d      	beq.n	8006bd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d107      	bne.n	8006bd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e050      	b.n	8006c78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bd6:	893b      	ldrh	r3, [r7, #8]
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be2:	6a39      	ldr	r1, [r7, #32]
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 f923 	bl	8006e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00d      	beq.n	8006c0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d107      	bne.n	8006c08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e035      	b.n	8006c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f82b 	bl	8006c84 <I2C_WaitOnFlagUntilTimeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00d      	beq.n	8006c50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c42:	d103      	bne.n	8006c4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e013      	b.n	8006c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c50:	897b      	ldrh	r3, [r7, #10]
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	f043 0301 	orr.w	r3, r3, #1
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	6a3a      	ldr	r2, [r7, #32]
 8006c64:	4906      	ldr	r1, [pc, #24]	; (8006c80 <I2C_RequestMemoryRead+0x1cc>)
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f863 	bl	8006d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e000      	b.n	8006c78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	00010002 	.word	0x00010002

08006c84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	4613      	mov	r3, r2
 8006c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c94:	e025      	b.n	8006ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d021      	beq.n	8006ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9e:	f7fe fba5 	bl	80053ec <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d302      	bcc.n	8006cb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d116      	bne.n	8006ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	f043 0220 	orr.w	r2, r3, #32
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e023      	b.n	8006d2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	0c1b      	lsrs	r3, r3, #16
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d10d      	bne.n	8006d08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	43da      	mvns	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	bf0c      	ite	eq
 8006cfe:	2301      	moveq	r3, #1
 8006d00:	2300      	movne	r3, #0
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	e00c      	b.n	8006d22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	43da      	mvns	r2, r3
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4013      	ands	r3, r2
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	bf0c      	ite	eq
 8006d1a:	2301      	moveq	r3, #1
 8006d1c:	2300      	movne	r3, #0
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	461a      	mov	r2, r3
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d0b6      	beq.n	8006c96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	60f8      	str	r0, [r7, #12]
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	607a      	str	r2, [r7, #4]
 8006d3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d40:	e051      	b.n	8006de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d50:	d123      	bne.n	8006d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	f043 0204 	orr.w	r2, r3, #4
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e046      	b.n	8006e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da0:	d021      	beq.n	8006de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006da2:	f7fe fb23 	bl	80053ec <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d302      	bcc.n	8006db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d116      	bne.n	8006de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	f043 0220 	orr.w	r2, r3, #32
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e020      	b.n	8006e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	0c1b      	lsrs	r3, r3, #16
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d10c      	bne.n	8006e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	43da      	mvns	r2, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf14      	ite	ne
 8006e02:	2301      	movne	r3, #1
 8006e04:	2300      	moveq	r3, #0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	e00b      	b.n	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	43da      	mvns	r2, r3
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	4013      	ands	r3, r2
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	bf14      	ite	ne
 8006e1c:	2301      	movne	r3, #1
 8006e1e:	2300      	moveq	r3, #0
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d18d      	bne.n	8006d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e3c:	e02d      	b.n	8006e9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 f8ce 	bl	8006fe0 <I2C_IsAcknowledgeFailed>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e02d      	b.n	8006eaa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e54:	d021      	beq.n	8006e9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e56:	f7fe fac9 	bl	80053ec <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d302      	bcc.n	8006e6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d116      	bne.n	8006e9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	f043 0220 	orr.w	r2, r3, #32
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e007      	b.n	8006eaa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea4:	2b80      	cmp	r3, #128	; 0x80
 8006ea6:	d1ca      	bne.n	8006e3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ebe:	e02d      	b.n	8006f1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 f88d 	bl	8006fe0 <I2C_IsAcknowledgeFailed>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e02d      	b.n	8006f2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d021      	beq.n	8006f1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ed8:	f7fe fa88 	bl	80053ec <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d302      	bcc.n	8006eee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d116      	bne.n	8006f1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	f043 0220 	orr.w	r2, r3, #32
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e007      	b.n	8006f2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d1ca      	bne.n	8006ec0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f40:	e042      	b.n	8006fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	f003 0310 	and.w	r3, r3, #16
 8006f4c:	2b10      	cmp	r3, #16
 8006f4e:	d119      	bne.n	8006f84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f06f 0210 	mvn.w	r2, #16
 8006f58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e029      	b.n	8006fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f84:	f7fe fa32 	bl	80053ec <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d302      	bcc.n	8006f9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d116      	bne.n	8006fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb4:	f043 0220 	orr.w	r2, r3, #32
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e007      	b.n	8006fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd2:	2b40      	cmp	r3, #64	; 0x40
 8006fd4:	d1b5      	bne.n	8006f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff6:	d11b      	bne.n	8007030 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007000:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	f043 0204 	orr.w	r2, r3, #4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e000      	b.n	8007032 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
	...

08007040 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e128      	b.n	80072a4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d109      	bne.n	8007072 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a90      	ldr	r2, [pc, #576]	; (80072ac <HAL_I2S_Init+0x26c>)
 800706a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7fd fde9 	bl	8004c44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2202      	movs	r2, #2
 8007076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6812      	ldr	r2, [r2, #0]
 8007084:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007088:	f023 030f 	bic.w	r3, r3, #15
 800708c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2202      	movs	r2, #2
 8007094:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	2b02      	cmp	r3, #2
 800709c:	d060      	beq.n	8007160 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d102      	bne.n	80070ac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80070a6:	2310      	movs	r3, #16
 80070a8:	617b      	str	r3, [r7, #20]
 80070aa:	e001      	b.n	80070b0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80070ac:	2320      	movs	r3, #32
 80070ae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d802      	bhi.n	80070be <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80070be:	2001      	movs	r0, #1
 80070c0:	f002 fb78 	bl	80097b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80070c4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ce:	d125      	bne.n	800711c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d010      	beq.n	80070fa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	fbb2 f2f3 	udiv	r2, r2, r3
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	461a      	mov	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f4:	3305      	adds	r3, #5
 80070f6:	613b      	str	r3, [r7, #16]
 80070f8:	e01f      	b.n	800713a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	00db      	lsls	r3, r3, #3
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	fbb2 f2f3 	udiv	r2, r2, r3
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	005b      	lsls	r3, r3, #1
 800710c:	461a      	mov	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	fbb2 f3f3 	udiv	r3, r2, r3
 8007116:	3305      	adds	r3, #5
 8007118:	613b      	str	r3, [r7, #16]
 800711a:	e00e      	b.n	800713a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	fbb2 f2f3 	udiv	r2, r2, r3
 8007124:	4613      	mov	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	005b      	lsls	r3, r3, #1
 800712c:	461a      	mov	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	fbb2 f3f3 	udiv	r3, r2, r3
 8007136:	3305      	adds	r3, #5
 8007138:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	4a5c      	ldr	r2, [pc, #368]	; (80072b0 <HAL_I2S_Init+0x270>)
 800713e:	fba2 2303 	umull	r2, r3, r2, r3
 8007142:	08db      	lsrs	r3, r3, #3
 8007144:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	085b      	lsrs	r3, r3, #1
 8007156:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	021b      	lsls	r3, r3, #8
 800715c:	61bb      	str	r3, [r7, #24]
 800715e:	e003      	b.n	8007168 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007160:	2302      	movs	r3, #2
 8007162:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d902      	bls.n	8007174 <HAL_I2S_Init+0x134>
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	2bff      	cmp	r3, #255	; 0xff
 8007172:	d907      	bls.n	8007184 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007178:	f043 0210 	orr.w	r2, r3, #16
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e08f      	b.n	80072a4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	691a      	ldr	r2, [r3, #16]
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	ea42 0103 	orr.w	r1, r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69fa      	ldr	r2, [r7, #28]
 8007194:	430a      	orrs	r2, r1
 8007196:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80071a2:	f023 030f 	bic.w	r3, r3, #15
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	6851      	ldr	r1, [r2, #4]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	6892      	ldr	r2, [r2, #8]
 80071ae:	4311      	orrs	r1, r2
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	68d2      	ldr	r2, [r2, #12]
 80071b4:	4311      	orrs	r1, r2
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	6992      	ldr	r2, [r2, #24]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	431a      	orrs	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071c6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d161      	bne.n	8007294 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a38      	ldr	r2, [pc, #224]	; (80072b4 <HAL_I2S_Init+0x274>)
 80071d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a37      	ldr	r2, [pc, #220]	; (80072b8 <HAL_I2S_Init+0x278>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d101      	bne.n	80071e4 <HAL_I2S_Init+0x1a4>
 80071e0:	4b36      	ldr	r3, [pc, #216]	; (80072bc <HAL_I2S_Init+0x27c>)
 80071e2:	e001      	b.n	80071e8 <HAL_I2S_Init+0x1a8>
 80071e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	4932      	ldr	r1, [pc, #200]	; (80072b8 <HAL_I2S_Init+0x278>)
 80071f0:	428a      	cmp	r2, r1
 80071f2:	d101      	bne.n	80071f8 <HAL_I2S_Init+0x1b8>
 80071f4:	4a31      	ldr	r2, [pc, #196]	; (80072bc <HAL_I2S_Init+0x27c>)
 80071f6:	e001      	b.n	80071fc <HAL_I2S_Init+0x1bc>
 80071f8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80071fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007200:	f023 030f 	bic.w	r3, r3, #15
 8007204:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a2b      	ldr	r2, [pc, #172]	; (80072b8 <HAL_I2S_Init+0x278>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d101      	bne.n	8007214 <HAL_I2S_Init+0x1d4>
 8007210:	4b2a      	ldr	r3, [pc, #168]	; (80072bc <HAL_I2S_Init+0x27c>)
 8007212:	e001      	b.n	8007218 <HAL_I2S_Init+0x1d8>
 8007214:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007218:	2202      	movs	r2, #2
 800721a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a25      	ldr	r2, [pc, #148]	; (80072b8 <HAL_I2S_Init+0x278>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d101      	bne.n	800722a <HAL_I2S_Init+0x1ea>
 8007226:	4b25      	ldr	r3, [pc, #148]	; (80072bc <HAL_I2S_Init+0x27c>)
 8007228:	e001      	b.n	800722e <HAL_I2S_Init+0x1ee>
 800722a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800723a:	d003      	beq.n	8007244 <HAL_I2S_Init+0x204>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d103      	bne.n	800724c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8007244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	e001      	b.n	8007250 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800724c:	2300      	movs	r3, #0
 800724e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800725a:	4313      	orrs	r3, r2
 800725c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007264:	4313      	orrs	r3, r2
 8007266:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800726e:	4313      	orrs	r3, r2
 8007270:	b29a      	uxth	r2, r3
 8007272:	897b      	ldrh	r3, [r7, #10]
 8007274:	4313      	orrs	r3, r2
 8007276:	b29b      	uxth	r3, r3
 8007278:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800727c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a0d      	ldr	r2, [pc, #52]	; (80072b8 <HAL_I2S_Init+0x278>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d101      	bne.n	800728c <HAL_I2S_Init+0x24c>
 8007288:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <HAL_I2S_Init+0x27c>)
 800728a:	e001      	b.n	8007290 <HAL_I2S_Init+0x250>
 800728c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007290:	897a      	ldrh	r2, [r7, #10]
 8007292:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3720      	adds	r7, #32
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	080073b7 	.word	0x080073b7
 80072b0:	cccccccd 	.word	0xcccccccd
 80072b4:	080074cd 	.word	0x080074cd
 80072b8:	40003800 	.word	0x40003800
 80072bc:	40003400 	.word	0x40003400

080072c0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	881a      	ldrh	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	1c9a      	adds	r2, r3, #2
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731e:	b29b      	uxth	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	b29a      	uxth	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732c:	b29b      	uxth	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10e      	bne.n	8007350 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007340:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff ffb8 	bl	80072c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736a:	b292      	uxth	r2, r2
 800736c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007372:	1c9a      	adds	r2, r3, #2
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800737c:	b29b      	uxth	r3, r3
 800737e:	3b01      	subs	r3, #1
 8007380:	b29a      	uxth	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800738a:	b29b      	uxth	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10e      	bne.n	80073ae <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800739e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff ff93 	bl	80072d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80073ae:	bf00      	nop
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b086      	sub	sp, #24
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b04      	cmp	r3, #4
 80073d0:	d13a      	bne.n	8007448 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d109      	bne.n	80073f0 <I2S_IRQHandler+0x3a>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e6:	2b40      	cmp	r3, #64	; 0x40
 80073e8:	d102      	bne.n	80073f0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff ffb4 	bl	8007358 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	d126      	bne.n	8007448 <I2S_IRQHandler+0x92>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f003 0320 	and.w	r3, r3, #32
 8007404:	2b20      	cmp	r3, #32
 8007406:	d11f      	bne.n	8007448 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007416:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007418:	2300      	movs	r3, #0
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	613b      	str	r3, [r7, #16]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	613b      	str	r3, [r7, #16]
 800742c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743a:	f043 0202 	orr.w	r2, r3, #2
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff ff50 	bl	80072e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b03      	cmp	r3, #3
 8007452:	d136      	bne.n	80074c2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b02      	cmp	r3, #2
 800745c:	d109      	bne.n	8007472 <I2S_IRQHandler+0xbc>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007468:	2b80      	cmp	r3, #128	; 0x80
 800746a:	d102      	bne.n	8007472 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7ff ff45 	bl	80072fc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b08      	cmp	r3, #8
 800747a:	d122      	bne.n	80074c2 <I2S_IRQHandler+0x10c>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f003 0320 	and.w	r3, r3, #32
 8007486:	2b20      	cmp	r3, #32
 8007488:	d11b      	bne.n	80074c2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007498:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b4:	f043 0204 	orr.w	r2, r3, #4
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7ff ff13 	bl	80072e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80074c2:	bf00      	nop
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4aa2      	ldr	r2, [pc, #648]	; (800776c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d101      	bne.n	80074ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80074e6:	4ba2      	ldr	r3, [pc, #648]	; (8007770 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80074e8:	e001      	b.n	80074ee <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80074ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a9b      	ldr	r2, [pc, #620]	; (800776c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d101      	bne.n	8007508 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007504:	4b9a      	ldr	r3, [pc, #616]	; (8007770 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007506:	e001      	b.n	800750c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007508:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007518:	d004      	beq.n	8007524 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	f040 8099 	bne.w	8007656 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b02      	cmp	r3, #2
 800752c:	d107      	bne.n	800753e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f925 	bl	8007788 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b01      	cmp	r3, #1
 8007546:	d107      	bne.n	8007558 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d002      	beq.n	8007558 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f9c8 	bl	80078e8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d13a      	bne.n	80075d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	f003 0320 	and.w	r3, r3, #32
 8007568:	2b00      	cmp	r3, #0
 800756a:	d035      	beq.n	80075d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a7e      	ldr	r2, [pc, #504]	; (800776c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d101      	bne.n	800757a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007576:	4b7e      	ldr	r3, [pc, #504]	; (8007770 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007578:	e001      	b.n	800757e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800757a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4979      	ldr	r1, [pc, #484]	; (800776c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007586:	428b      	cmp	r3, r1
 8007588:	d101      	bne.n	800758e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800758a:	4b79      	ldr	r3, [pc, #484]	; (8007770 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800758c:	e001      	b.n	8007592 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800758e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007592:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007596:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80075a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	60fb      	str	r3, [r7, #12]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ca:	f043 0202 	orr.w	r2, r3, #2
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff fe88 	bl	80072e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	f003 0308 	and.w	r3, r3, #8
 80075de:	2b08      	cmp	r3, #8
 80075e0:	f040 80be 	bne.w	8007760 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f003 0320 	and.w	r3, r3, #32
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 80b8 	beq.w	8007760 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80075fe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a59      	ldr	r2, [pc, #356]	; (800776c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d101      	bne.n	800760e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800760a:	4b59      	ldr	r3, [pc, #356]	; (8007770 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800760c:	e001      	b.n	8007612 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800760e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4954      	ldr	r1, [pc, #336]	; (800776c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800761a:	428b      	cmp	r3, r1
 800761c:	d101      	bne.n	8007622 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800761e:	4b54      	ldr	r3, [pc, #336]	; (8007770 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007620:	e001      	b.n	8007626 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007626:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800762a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800762c:	2300      	movs	r3, #0
 800762e:	60bb      	str	r3, [r7, #8]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	60bb      	str	r3, [r7, #8]
 8007638:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007646:	f043 0204 	orr.w	r2, r3, #4
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff fe4a 	bl	80072e8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007654:	e084      	b.n	8007760 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b02      	cmp	r3, #2
 800765e:	d107      	bne.n	8007670 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f8be 	bl	80077ec <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b01      	cmp	r3, #1
 8007678:	d107      	bne.n	800768a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f8fd 	bl	8007884 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007690:	2b40      	cmp	r3, #64	; 0x40
 8007692:	d12f      	bne.n	80076f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f003 0320 	and.w	r3, r3, #32
 800769a:	2b00      	cmp	r3, #0
 800769c:	d02a      	beq.n	80076f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80076ac:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a2e      	ldr	r2, [pc, #184]	; (800776c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d101      	bne.n	80076bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80076b8:	4b2d      	ldr	r3, [pc, #180]	; (8007770 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80076ba:	e001      	b.n	80076c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80076bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4929      	ldr	r1, [pc, #164]	; (800776c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80076c8:	428b      	cmp	r3, r1
 80076ca:	d101      	bne.n	80076d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80076cc:	4b28      	ldr	r3, [pc, #160]	; (8007770 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80076ce:	e001      	b.n	80076d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80076d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80076d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076d8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e6:	f043 0202 	orr.w	r2, r3, #2
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff fdfa 	bl	80072e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	f003 0308 	and.w	r3, r3, #8
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d131      	bne.n	8007762 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f003 0320 	and.w	r3, r3, #32
 8007704:	2b00      	cmp	r3, #0
 8007706:	d02c      	beq.n	8007762 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a17      	ldr	r2, [pc, #92]	; (800776c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d101      	bne.n	8007716 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007712:	4b17      	ldr	r3, [pc, #92]	; (8007770 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007714:	e001      	b.n	800771a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007716:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4912      	ldr	r1, [pc, #72]	; (800776c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007722:	428b      	cmp	r3, r1
 8007724:	d101      	bne.n	800772a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007726:	4b12      	ldr	r3, [pc, #72]	; (8007770 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007728:	e001      	b.n	800772e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800772a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800772e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007732:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007742:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007750:	f043 0204 	orr.w	r2, r3, #4
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff fdc5 	bl	80072e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800775e:	e000      	b.n	8007762 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007760:	bf00      	nop
}
 8007762:	bf00      	nop
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	40003800 	.word	0x40003800
 8007770:	40003400 	.word	0x40003400

08007774 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	1c99      	adds	r1, r3, #2
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	6251      	str	r1, [r2, #36]	; 0x24
 800779a:	881a      	ldrh	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d113      	bne.n	80077e2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80077c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d106      	bne.n	80077e2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff ffc9 	bl	8007774 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80077e2:	bf00      	nop
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
	...

080077ec <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	1c99      	adds	r1, r3, #2
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6251      	str	r1, [r2, #36]	; 0x24
 80077fe:	8819      	ldrh	r1, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a1d      	ldr	r2, [pc, #116]	; (800787c <I2SEx_TxISR_I2SExt+0x90>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d101      	bne.n	800780e <I2SEx_TxISR_I2SExt+0x22>
 800780a:	4b1d      	ldr	r3, [pc, #116]	; (8007880 <I2SEx_TxISR_I2SExt+0x94>)
 800780c:	e001      	b.n	8007812 <I2SEx_TxISR_I2SExt+0x26>
 800780e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007812:	460a      	mov	r2, r1
 8007814:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781a:	b29b      	uxth	r3, r3
 800781c:	3b01      	subs	r3, #1
 800781e:	b29a      	uxth	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007828:	b29b      	uxth	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d121      	bne.n	8007872 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a12      	ldr	r2, [pc, #72]	; (800787c <I2SEx_TxISR_I2SExt+0x90>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d101      	bne.n	800783c <I2SEx_TxISR_I2SExt+0x50>
 8007838:	4b11      	ldr	r3, [pc, #68]	; (8007880 <I2SEx_TxISR_I2SExt+0x94>)
 800783a:	e001      	b.n	8007840 <I2SEx_TxISR_I2SExt+0x54>
 800783c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	490d      	ldr	r1, [pc, #52]	; (800787c <I2SEx_TxISR_I2SExt+0x90>)
 8007848:	428b      	cmp	r3, r1
 800784a:	d101      	bne.n	8007850 <I2SEx_TxISR_I2SExt+0x64>
 800784c:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <I2SEx_TxISR_I2SExt+0x94>)
 800784e:	e001      	b.n	8007854 <I2SEx_TxISR_I2SExt+0x68>
 8007850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007854:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007858:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800785e:	b29b      	uxth	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d106      	bne.n	8007872 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff ff81 	bl	8007774 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	40003800 	.word	0x40003800
 8007880:	40003400 	.word	0x40003400

08007884 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68d8      	ldr	r0, [r3, #12]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007896:	1c99      	adds	r1, r3, #2
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800789c:	b282      	uxth	r2, r0
 800789e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d113      	bne.n	80078e0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80078c6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7ff ff4a 	bl	8007774 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a20      	ldr	r2, [pc, #128]	; (8007978 <I2SEx_RxISR_I2SExt+0x90>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d101      	bne.n	80078fe <I2SEx_RxISR_I2SExt+0x16>
 80078fa:	4b20      	ldr	r3, [pc, #128]	; (800797c <I2SEx_RxISR_I2SExt+0x94>)
 80078fc:	e001      	b.n	8007902 <I2SEx_RxISR_I2SExt+0x1a>
 80078fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007902:	68d8      	ldr	r0, [r3, #12]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007908:	1c99      	adds	r1, r3, #2
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800790e:	b282      	uxth	r2, r0
 8007910:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d121      	bne.n	800796e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a12      	ldr	r2, [pc, #72]	; (8007978 <I2SEx_RxISR_I2SExt+0x90>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d101      	bne.n	8007938 <I2SEx_RxISR_I2SExt+0x50>
 8007934:	4b11      	ldr	r3, [pc, #68]	; (800797c <I2SEx_RxISR_I2SExt+0x94>)
 8007936:	e001      	b.n	800793c <I2SEx_RxISR_I2SExt+0x54>
 8007938:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	490d      	ldr	r1, [pc, #52]	; (8007978 <I2SEx_RxISR_I2SExt+0x90>)
 8007944:	428b      	cmp	r3, r1
 8007946:	d101      	bne.n	800794c <I2SEx_RxISR_I2SExt+0x64>
 8007948:	4b0c      	ldr	r3, [pc, #48]	; (800797c <I2SEx_RxISR_I2SExt+0x94>)
 800794a:	e001      	b.n	8007950 <I2SEx_RxISR_I2SExt+0x68>
 800794c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007950:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007954:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800795a:	b29b      	uxth	r3, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	d106      	bne.n	800796e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7ff ff03 	bl	8007774 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800796e:	bf00      	nop
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	40003800 	.word	0x40003800
 800797c:	40003400 	.word	0x40003400

08007980 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007982:	b08f      	sub	sp, #60	; 0x3c
 8007984:	af0a      	add	r7, sp, #40	; 0x28
 8007986:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e10f      	b.n	8007bb2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d106      	bne.n	80079b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f009 fecb 	bl	8011748 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2203      	movs	r2, #3
 80079b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d102      	bne.n	80079cc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f004 f82c 	bl	800ba2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	603b      	str	r3, [r7, #0]
 80079dc:	687e      	ldr	r6, [r7, #4]
 80079de:	466d      	mov	r5, sp
 80079e0:	f106 0410 	add.w	r4, r6, #16
 80079e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80079e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80079ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80079f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80079f4:	1d33      	adds	r3, r6, #4
 80079f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079f8:	6838      	ldr	r0, [r7, #0]
 80079fa:	f003 ff03 	bl	800b804 <USB_CoreInit>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d005      	beq.n	8007a10 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e0d0      	b.n	8007bb2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2100      	movs	r1, #0
 8007a16:	4618      	mov	r0, r3
 8007a18:	f004 f81a 	bl	800ba50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
 8007a20:	e04a      	b.n	8007ab8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007a22:	7bfa      	ldrb	r2, [r7, #15]
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	4613      	mov	r3, r2
 8007a28:	00db      	lsls	r3, r3, #3
 8007a2a:	1a9b      	subs	r3, r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	440b      	add	r3, r1
 8007a30:	333d      	adds	r3, #61	; 0x3d
 8007a32:	2201      	movs	r2, #1
 8007a34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007a36:	7bfa      	ldrb	r2, [r7, #15]
 8007a38:	6879      	ldr	r1, [r7, #4]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	00db      	lsls	r3, r3, #3
 8007a3e:	1a9b      	subs	r3, r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	440b      	add	r3, r1
 8007a44:	333c      	adds	r3, #60	; 0x3c
 8007a46:	7bfa      	ldrb	r2, [r7, #15]
 8007a48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007a4a:	7bfa      	ldrb	r2, [r7, #15]
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
 8007a4e:	b298      	uxth	r0, r3
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	4613      	mov	r3, r2
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	1a9b      	subs	r3, r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	440b      	add	r3, r1
 8007a5c:	3342      	adds	r3, #66	; 0x42
 8007a5e:	4602      	mov	r2, r0
 8007a60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007a62:	7bfa      	ldrb	r2, [r7, #15]
 8007a64:	6879      	ldr	r1, [r7, #4]
 8007a66:	4613      	mov	r3, r2
 8007a68:	00db      	lsls	r3, r3, #3
 8007a6a:	1a9b      	subs	r3, r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	440b      	add	r3, r1
 8007a70:	333f      	adds	r3, #63	; 0x3f
 8007a72:	2200      	movs	r2, #0
 8007a74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007a76:	7bfa      	ldrb	r2, [r7, #15]
 8007a78:	6879      	ldr	r1, [r7, #4]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	00db      	lsls	r3, r3, #3
 8007a7e:	1a9b      	subs	r3, r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	440b      	add	r3, r1
 8007a84:	3344      	adds	r3, #68	; 0x44
 8007a86:	2200      	movs	r2, #0
 8007a88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007a8a:	7bfa      	ldrb	r2, [r7, #15]
 8007a8c:	6879      	ldr	r1, [r7, #4]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	00db      	lsls	r3, r3, #3
 8007a92:	1a9b      	subs	r3, r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	440b      	add	r3, r1
 8007a98:	3348      	adds	r3, #72	; 0x48
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007a9e:	7bfa      	ldrb	r2, [r7, #15]
 8007aa0:	6879      	ldr	r1, [r7, #4]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	1a9b      	subs	r3, r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	3350      	adds	r3, #80	; 0x50
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
 8007ab8:	7bfa      	ldrb	r2, [r7, #15]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d3af      	bcc.n	8007a22 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]
 8007ac6:	e044      	b.n	8007b52 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007ac8:	7bfa      	ldrb	r2, [r7, #15]
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	4613      	mov	r3, r2
 8007ace:	00db      	lsls	r3, r3, #3
 8007ad0:	1a9b      	subs	r3, r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	440b      	add	r3, r1
 8007ad6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007ada:	2200      	movs	r2, #0
 8007adc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007ade:	7bfa      	ldrb	r2, [r7, #15]
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	1a9b      	subs	r3, r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	440b      	add	r3, r1
 8007aec:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007af0:	7bfa      	ldrb	r2, [r7, #15]
 8007af2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007af4:	7bfa      	ldrb	r2, [r7, #15]
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	4613      	mov	r3, r2
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	1a9b      	subs	r3, r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	440b      	add	r3, r1
 8007b02:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007b06:	2200      	movs	r2, #0
 8007b08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007b0a:	7bfa      	ldrb	r2, [r7, #15]
 8007b0c:	6879      	ldr	r1, [r7, #4]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	1a9b      	subs	r3, r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	440b      	add	r3, r1
 8007b18:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007b20:	7bfa      	ldrb	r2, [r7, #15]
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	4613      	mov	r3, r2
 8007b26:	00db      	lsls	r3, r3, #3
 8007b28:	1a9b      	subs	r3, r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	440b      	add	r3, r1
 8007b2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007b36:	7bfa      	ldrb	r2, [r7, #15]
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	00db      	lsls	r3, r3, #3
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	73fb      	strb	r3, [r7, #15]
 8007b52:	7bfa      	ldrb	r2, [r7, #15]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d3b5      	bcc.n	8007ac8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	603b      	str	r3, [r7, #0]
 8007b62:	687e      	ldr	r6, [r7, #4]
 8007b64:	466d      	mov	r5, sp
 8007b66:	f106 0410 	add.w	r4, r6, #16
 8007b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007b76:	e885 0003 	stmia.w	r5, {r0, r1}
 8007b7a:	1d33      	adds	r3, r6, #4
 8007b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b7e:	6838      	ldr	r0, [r7, #0]
 8007b80:	f003 ffb2 	bl	800bae8 <USB_DevInit>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d005      	beq.n	8007b96 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e00d      	b.n	8007bb2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f005 f82e 	bl	800cc0c <USB_DevDisconnect>

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d101      	bne.n	8007bd6 <HAL_PCD_Start+0x1c>
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	e020      	b.n	8007c18 <HAL_PCD_Start+0x5e>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d109      	bne.n	8007bfa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d005      	beq.n	8007bfa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f003 ff04 	bl	800ba0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f004 ffde 	bl	800cbca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007c20:	b590      	push	{r4, r7, lr}
 8007c22:	b08d      	sub	sp, #52	; 0x34
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f005 f89c 	bl	800cd74 <USB_GetMode>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f040 839d 	bne.w	800837e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f005 f800 	bl	800cc4e <USB_ReadInterrupts>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 8393 	beq.w	800837c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f004 fff7 	bl	800cc4e <USB_ReadInterrupts>
 8007c60:	4603      	mov	r3, r0
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d107      	bne.n	8007c7a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	695a      	ldr	r2, [r3, #20]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f002 0202 	and.w	r2, r2, #2
 8007c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f004 ffe5 	bl	800cc4e <USB_ReadInterrupts>
 8007c84:	4603      	mov	r3, r0
 8007c86:	f003 0310 	and.w	r3, r3, #16
 8007c8a:	2b10      	cmp	r3, #16
 8007c8c:	d161      	bne.n	8007d52 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	699a      	ldr	r2, [r3, #24]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0210 	bic.w	r2, r2, #16
 8007c9c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	f003 020f 	and.w	r2, r3, #15
 8007caa:	4613      	mov	r3, r2
 8007cac:	00db      	lsls	r3, r3, #3
 8007cae:	1a9b      	subs	r3, r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	4413      	add	r3, r2
 8007cba:	3304      	adds	r3, #4
 8007cbc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	0c5b      	lsrs	r3, r3, #17
 8007cc2:	f003 030f 	and.w	r3, r3, #15
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d124      	bne.n	8007d14 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d035      	beq.n	8007d42 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	091b      	lsrs	r3, r3, #4
 8007cde:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007ce0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6a38      	ldr	r0, [r7, #32]
 8007cea:	f004 fe1c 	bl	800c926 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	091b      	lsrs	r3, r3, #4
 8007cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007cfa:	441a      	add	r2, r3
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	699a      	ldr	r2, [r3, #24]
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	091b      	lsrs	r3, r3, #4
 8007d08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d0c:	441a      	add	r2, r3
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	619a      	str	r2, [r3, #24]
 8007d12:	e016      	b.n	8007d42 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	0c5b      	lsrs	r3, r3, #17
 8007d18:	f003 030f 	and.w	r3, r3, #15
 8007d1c:	2b06      	cmp	r3, #6
 8007d1e:	d110      	bne.n	8007d42 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d26:	2208      	movs	r2, #8
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6a38      	ldr	r0, [r7, #32]
 8007d2c:	f004 fdfb 	bl	800c926 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	091b      	lsrs	r3, r3, #4
 8007d38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d3c:	441a      	add	r2, r3
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	699a      	ldr	r2, [r3, #24]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f042 0210 	orr.w	r2, r2, #16
 8007d50:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f004 ff79 	bl	800cc4e <USB_ReadInterrupts>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d66:	d16e      	bne.n	8007e46 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f004 ff7f 	bl	800cc74 <USB_ReadDevAllOutEpInterrupt>
 8007d76:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007d78:	e062      	b.n	8007e40 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d057      	beq.n	8007e34 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d8a:	b2d2      	uxtb	r2, r2
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f004 ffa4 	bl	800ccdc <USB_ReadDevOutEPInterrupt>
 8007d94:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00c      	beq.n	8007dba <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dac:	461a      	mov	r2, r3
 8007dae:	2301      	movs	r3, #1
 8007db0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007db2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fdb1 	bl	800891c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f003 0308 	and.w	r3, r3, #8
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00c      	beq.n	8007dde <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	2308      	movs	r3, #8
 8007dd4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007dd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 feab 	bl	8008b34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f003 0310 	and.w	r3, r3, #16
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d008      	beq.n	8007dfa <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df4:	461a      	mov	r2, r3
 8007df6:	2310      	movs	r3, #16
 8007df8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f003 0320 	and.w	r3, r3, #32
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d008      	beq.n	8007e16 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e10:	461a      	mov	r2, r3
 8007e12:	2320      	movs	r3, #32
 8007e14:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d009      	beq.n	8007e34 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e32:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	3301      	adds	r3, #1
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	085b      	lsrs	r3, r3, #1
 8007e3e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d199      	bne.n	8007d7a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f004 feff 	bl	800cc4e <USB_ReadInterrupts>
 8007e50:	4603      	mov	r3, r0
 8007e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e5a:	f040 80c0 	bne.w	8007fde <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f004 ff20 	bl	800cca8 <USB_ReadDevAllInEpInterrupt>
 8007e68:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007e6e:	e0b2      	b.n	8007fd6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 80a7 	beq.w	8007fca <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e82:	b2d2      	uxtb	r2, r2
 8007e84:	4611      	mov	r1, r2
 8007e86:	4618      	mov	r0, r3
 8007e88:	f004 ff46 	bl	800cd18 <USB_ReadDevInEPInterrupt>
 8007e8c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d057      	beq.n	8007f48 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	43db      	mvns	r3, r3
 8007eb2:	69f9      	ldr	r1, [r7, #28]
 8007eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007eb8:	4013      	ands	r3, r2
 8007eba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec8:	461a      	mov	r2, r3
 8007eca:	2301      	movs	r3, #1
 8007ecc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d132      	bne.n	8007f3c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eda:	4613      	mov	r3, r2
 8007edc:	00db      	lsls	r3, r3, #3
 8007ede:	1a9b      	subs	r3, r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	440b      	add	r3, r1
 8007ee4:	3348      	adds	r3, #72	; 0x48
 8007ee6:	6819      	ldr	r1, [r3, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eec:	4613      	mov	r3, r2
 8007eee:	00db      	lsls	r3, r3, #3
 8007ef0:	1a9b      	subs	r3, r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4403      	add	r3, r0
 8007ef6:	3344      	adds	r3, #68	; 0x44
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4419      	add	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f00:	4613      	mov	r3, r2
 8007f02:	00db      	lsls	r3, r3, #3
 8007f04:	1a9b      	subs	r3, r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4403      	add	r3, r0
 8007f0a:	3348      	adds	r3, #72	; 0x48
 8007f0c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d113      	bne.n	8007f3c <HAL_PCD_IRQHandler+0x31c>
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f18:	4613      	mov	r3, r2
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	1a9b      	subs	r3, r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	440b      	add	r3, r1
 8007f22:	3350      	adds	r3, #80	; 0x50
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d108      	bne.n	8007f3c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6818      	ldr	r0, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f34:	461a      	mov	r2, r3
 8007f36:	2101      	movs	r1, #1
 8007f38:	f004 ff4e 	bl	800cdd8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f009 fc8f 	bl	8011866 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d008      	beq.n	8007f64 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5e:	461a      	mov	r2, r3
 8007f60:	2308      	movs	r3, #8
 8007f62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	f003 0310 	and.w	r3, r3, #16
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d008      	beq.n	8007f80 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	2310      	movs	r3, #16
 8007f7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d008      	beq.n	8007f9c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f96:	461a      	mov	r2, r3
 8007f98:	2340      	movs	r3, #64	; 0x40
 8007f9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d008      	beq.n	8007fb8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fc1b 	bl	8008800 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	3301      	adds	r3, #1
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd2:	085b      	lsrs	r3, r3, #1
 8007fd4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f47f af49 	bne.w	8007e70 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f004 fe33 	bl	800cc4e <USB_ReadInterrupts>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ff2:	d122      	bne.n	800803a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	69fa      	ldr	r2, [r7, #28]
 8007ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008002:	f023 0301 	bic.w	r3, r3, #1
 8008006:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800800e:	2b01      	cmp	r3, #1
 8008010:	d108      	bne.n	8008024 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800801a:	2100      	movs	r1, #0
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fe27 	bl	8008c70 <HAL_PCDEx_LPM_Callback>
 8008022:	e002      	b.n	800802a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f009 fc8b 	bl	8011940 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	695a      	ldr	r2, [r3, #20]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008038:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4618      	mov	r0, r3
 8008040:	f004 fe05 	bl	800cc4e <USB_ReadInterrupts>
 8008044:	4603      	mov	r3, r0
 8008046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800804a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800804e:	d112      	bne.n	8008076 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b01      	cmp	r3, #1
 800805e:	d102      	bne.n	8008066 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f009 fc47 	bl	80118f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	695a      	ldr	r2, [r3, #20]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008074:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4618      	mov	r0, r3
 800807c:	f004 fde7 	bl	800cc4e <USB_ReadInterrupts>
 8008080:	4603      	mov	r3, r0
 8008082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800808a:	f040 80c7 	bne.w	800821c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800809c:	f023 0301 	bic.w	r3, r3, #1
 80080a0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2110      	movs	r1, #16
 80080a8:	4618      	mov	r0, r3
 80080aa:	f003 fe81 	bl	800bdb0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080ae:	2300      	movs	r3, #0
 80080b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080b2:	e056      	b.n	8008162 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80080b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c0:	461a      	mov	r2, r3
 80080c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080c6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80080c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080d8:	0151      	lsls	r1, r2, #5
 80080da:	69fa      	ldr	r2, [r7, #28]
 80080dc:	440a      	add	r2, r1
 80080de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080e6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80080e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080f8:	0151      	lsls	r1, r2, #5
 80080fa:	69fa      	ldr	r2, [r7, #28]
 80080fc:	440a      	add	r2, r1
 80080fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008102:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008106:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008114:	461a      	mov	r2, r3
 8008116:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800811a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800811c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	4413      	add	r3, r2
 8008124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800812c:	0151      	lsls	r1, r2, #5
 800812e:	69fa      	ldr	r2, [r7, #28]
 8008130:	440a      	add	r2, r1
 8008132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008136:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800813a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800814c:	0151      	lsls	r1, r2, #5
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	440a      	add	r2, r1
 8008152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008156:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800815a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815e:	3301      	adds	r3, #1
 8008160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008168:	429a      	cmp	r2, r3
 800816a:	d3a3      	bcc.n	80080b4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	69fa      	ldr	r2, [r7, #28]
 8008176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800817a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800817e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008184:	2b00      	cmp	r3, #0
 8008186:	d016      	beq.n	80081b6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800818e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008192:	69fa      	ldr	r2, [r7, #28]
 8008194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008198:	f043 030b 	orr.w	r3, r3, #11
 800819c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a8:	69fa      	ldr	r2, [r7, #28]
 80081aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081ae:	f043 030b 	orr.w	r3, r3, #11
 80081b2:	6453      	str	r3, [r2, #68]	; 0x44
 80081b4:	e015      	b.n	80081e2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	69fa      	ldr	r2, [r7, #28]
 80081c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081c8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80081cc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	69fa      	ldr	r2, [r7, #28]
 80081d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081dc:	f043 030b 	orr.w	r3, r3, #11
 80081e0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	69fa      	ldr	r2, [r7, #28]
 80081ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80081f4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008206:	461a      	mov	r2, r3
 8008208:	f004 fde6 	bl	800cdd8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	695a      	ldr	r2, [r3, #20]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800821a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4618      	mov	r0, r3
 8008222:	f004 fd14 	bl	800cc4e <USB_ReadInterrupts>
 8008226:	4603      	mov	r3, r0
 8008228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800822c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008230:	d124      	bne.n	800827c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f004 fdaa 	bl	800cd90 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4618      	mov	r0, r3
 8008242:	f003 fe12 	bl	800be6a <USB_GetDevSpeed>
 8008246:	4603      	mov	r3, r0
 8008248:	461a      	mov	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681c      	ldr	r4, [r3, #0]
 8008252:	f001 f959 	bl	8009508 <HAL_RCC_GetHCLKFreq>
 8008256:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800825c:	b2db      	uxtb	r3, r3
 800825e:	461a      	mov	r2, r3
 8008260:	4620      	mov	r0, r4
 8008262:	f003 fb31 	bl	800b8c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f009 fb25 	bl	80118b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	695a      	ldr	r2, [r3, #20]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800827a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4618      	mov	r0, r3
 8008282:	f004 fce4 	bl	800cc4e <USB_ReadInterrupts>
 8008286:	4603      	mov	r3, r0
 8008288:	f003 0308 	and.w	r3, r3, #8
 800828c:	2b08      	cmp	r3, #8
 800828e:	d10a      	bne.n	80082a6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f009 fb02 	bl	801189a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	695a      	ldr	r2, [r3, #20]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f002 0208 	and.w	r2, r2, #8
 80082a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f004 fccf 	bl	800cc4e <USB_ReadInterrupts>
 80082b0:	4603      	mov	r3, r0
 80082b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082ba:	d10f      	bne.n	80082dc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f009 fb5a 	bl	8011980 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	695a      	ldr	r2, [r3, #20]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80082da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f004 fcb4 	bl	800cc4e <USB_ReadInterrupts>
 80082e6:	4603      	mov	r3, r0
 80082e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082f0:	d10f      	bne.n	8008312 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f009 fb2d 	bl	801195c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	695a      	ldr	r2, [r3, #20]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008310:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4618      	mov	r0, r3
 8008318:	f004 fc99 	bl	800cc4e <USB_ReadInterrupts>
 800831c:	4603      	mov	r3, r0
 800831e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008326:	d10a      	bne.n	800833e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f009 fb3b 	bl	80119a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	695a      	ldr	r2, [r3, #20]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800833c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4618      	mov	r0, r3
 8008344:	f004 fc83 	bl	800cc4e <USB_ReadInterrupts>
 8008348:	4603      	mov	r3, r0
 800834a:	f003 0304 	and.w	r3, r3, #4
 800834e:	2b04      	cmp	r3, #4
 8008350:	d115      	bne.n	800837e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	f003 0304 	and.w	r3, r3, #4
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f009 fb2b 	bl	80119c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6859      	ldr	r1, [r3, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	430a      	orrs	r2, r1
 8008378:	605a      	str	r2, [r3, #4]
 800837a:	e000      	b.n	800837e <HAL_PCD_IRQHandler+0x75e>
      return;
 800837c:	bf00      	nop
    }
  }
}
 800837e:	3734      	adds	r7, #52	; 0x34
 8008380:	46bd      	mov	sp, r7
 8008382:	bd90      	pop	{r4, r7, pc}

08008384 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008396:	2b01      	cmp	r3, #1
 8008398:	d101      	bne.n	800839e <HAL_PCD_SetAddress+0x1a>
 800839a:	2302      	movs	r3, #2
 800839c:	e013      	b.n	80083c6 <HAL_PCD_SetAddress+0x42>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	78fa      	ldrb	r2, [r7, #3]
 80083aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	78fa      	ldrb	r2, [r7, #3]
 80083b4:	4611      	mov	r1, r2
 80083b6:	4618      	mov	r0, r3
 80083b8:	f004 fbe1 	bl	800cb7e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	4608      	mov	r0, r1
 80083d8:	4611      	mov	r1, r2
 80083da:	461a      	mov	r2, r3
 80083dc:	4603      	mov	r3, r0
 80083de:	70fb      	strb	r3, [r7, #3]
 80083e0:	460b      	mov	r3, r1
 80083e2:	803b      	strh	r3, [r7, #0]
 80083e4:	4613      	mov	r3, r2
 80083e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80083ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	da0f      	bge.n	8008414 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083f4:	78fb      	ldrb	r3, [r7, #3]
 80083f6:	f003 020f 	and.w	r2, r3, #15
 80083fa:	4613      	mov	r3, r2
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	1a9b      	subs	r3, r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	3338      	adds	r3, #56	; 0x38
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	4413      	add	r3, r2
 8008408:	3304      	adds	r3, #4
 800840a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	705a      	strb	r2, [r3, #1]
 8008412:	e00f      	b.n	8008434 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008414:	78fb      	ldrb	r3, [r7, #3]
 8008416:	f003 020f 	and.w	r2, r3, #15
 800841a:	4613      	mov	r3, r2
 800841c:	00db      	lsls	r3, r3, #3
 800841e:	1a9b      	subs	r3, r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	4413      	add	r3, r2
 800842a:	3304      	adds	r3, #4
 800842c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008434:	78fb      	ldrb	r3, [r7, #3]
 8008436:	f003 030f 	and.w	r3, r3, #15
 800843a:	b2da      	uxtb	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008440:	883a      	ldrh	r2, [r7, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	78ba      	ldrb	r2, [r7, #2]
 800844a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	785b      	ldrb	r3, [r3, #1]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	b29a      	uxth	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800845e:	78bb      	ldrb	r3, [r7, #2]
 8008460:	2b02      	cmp	r3, #2
 8008462:	d102      	bne.n	800846a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008470:	2b01      	cmp	r3, #1
 8008472:	d101      	bne.n	8008478 <HAL_PCD_EP_Open+0xaa>
 8008474:	2302      	movs	r3, #2
 8008476:	e00e      	b.n	8008496 <HAL_PCD_EP_Open+0xc8>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68f9      	ldr	r1, [r7, #12]
 8008486:	4618      	mov	r0, r3
 8008488:	f003 fd14 	bl	800beb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008494:	7afb      	ldrb	r3, [r7, #11]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	460b      	mov	r3, r1
 80084a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80084aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	da0f      	bge.n	80084d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084b2:	78fb      	ldrb	r3, [r7, #3]
 80084b4:	f003 020f 	and.w	r2, r3, #15
 80084b8:	4613      	mov	r3, r2
 80084ba:	00db      	lsls	r3, r3, #3
 80084bc:	1a9b      	subs	r3, r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	3338      	adds	r3, #56	; 0x38
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	4413      	add	r3, r2
 80084c6:	3304      	adds	r3, #4
 80084c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	705a      	strb	r2, [r3, #1]
 80084d0:	e00f      	b.n	80084f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084d2:	78fb      	ldrb	r3, [r7, #3]
 80084d4:	f003 020f 	and.w	r2, r3, #15
 80084d8:	4613      	mov	r3, r2
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	1a9b      	subs	r3, r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	4413      	add	r3, r2
 80084e8:	3304      	adds	r3, #4
 80084ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	f003 030f 	and.w	r3, r3, #15
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008504:	2b01      	cmp	r3, #1
 8008506:	d101      	bne.n	800850c <HAL_PCD_EP_Close+0x6e>
 8008508:	2302      	movs	r3, #2
 800850a:	e00e      	b.n	800852a <HAL_PCD_EP_Close+0x8c>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68f9      	ldr	r1, [r7, #12]
 800851a:	4618      	mov	r0, r3
 800851c:	f003 fd52 	bl	800bfc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b086      	sub	sp, #24
 8008536:	af00      	add	r7, sp, #0
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
 800853e:	460b      	mov	r3, r1
 8008540:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008542:	7afb      	ldrb	r3, [r7, #11]
 8008544:	f003 020f 	and.w	r2, r3, #15
 8008548:	4613      	mov	r3, r2
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	1a9b      	subs	r3, r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	4413      	add	r3, r2
 8008558:	3304      	adds	r3, #4
 800855a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	2200      	movs	r2, #0
 800856c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2200      	movs	r2, #0
 8008572:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008574:	7afb      	ldrb	r3, [r7, #11]
 8008576:	f003 030f 	and.w	r3, r3, #15
 800857a:	b2da      	uxtb	r2, r3
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d102      	bne.n	800858e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800858e:	7afb      	ldrb	r3, [r7, #11]
 8008590:	f003 030f 	and.w	r3, r3, #15
 8008594:	2b00      	cmp	r3, #0
 8008596:	d109      	bne.n	80085ac <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6818      	ldr	r0, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	461a      	mov	r2, r3
 80085a4:	6979      	ldr	r1, [r7, #20]
 80085a6:	f004 f82d 	bl	800c604 <USB_EP0StartXfer>
 80085aa:	e008      	b.n	80085be <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	461a      	mov	r2, r3
 80085b8:	6979      	ldr	r1, [r7, #20]
 80085ba:	f003 fddf 	bl	800c17c <USB_EPStartXfer>
  }

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3718      	adds	r7, #24
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80085d4:	78fb      	ldrb	r3, [r7, #3]
 80085d6:	f003 020f 	and.w	r2, r3, #15
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	4613      	mov	r3, r2
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	1a9b      	subs	r3, r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	440b      	add	r3, r1
 80085e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80085ea:	681b      	ldr	r3, [r3, #0]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	460b      	mov	r3, r1
 8008606:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008608:	7afb      	ldrb	r3, [r7, #11]
 800860a:	f003 020f 	and.w	r2, r3, #15
 800860e:	4613      	mov	r3, r2
 8008610:	00db      	lsls	r3, r3, #3
 8008612:	1a9b      	subs	r3, r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	3338      	adds	r3, #56	; 0x38
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	4413      	add	r3, r2
 800861c:	3304      	adds	r3, #4
 800861e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2200      	movs	r2, #0
 8008630:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	2201      	movs	r2, #1
 8008636:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008638:	7afb      	ldrb	r3, [r7, #11]
 800863a:	f003 030f 	and.w	r3, r3, #15
 800863e:	b2da      	uxtb	r2, r3
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d102      	bne.n	8008652 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008652:	7afb      	ldrb	r3, [r7, #11]
 8008654:	f003 030f 	and.w	r3, r3, #15
 8008658:	2b00      	cmp	r3, #0
 800865a:	d109      	bne.n	8008670 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6818      	ldr	r0, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	b2db      	uxtb	r3, r3
 8008666:	461a      	mov	r2, r3
 8008668:	6979      	ldr	r1, [r7, #20]
 800866a:	f003 ffcb 	bl	800c604 <USB_EP0StartXfer>
 800866e:	e008      	b.n	8008682 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	b2db      	uxtb	r3, r3
 800867a:	461a      	mov	r2, r3
 800867c:	6979      	ldr	r1, [r7, #20]
 800867e:	f003 fd7d 	bl	800c17c <USB_EPStartXfer>
  }

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	460b      	mov	r3, r1
 8008696:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	f003 020f 	and.w	r2, r3, #15
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d901      	bls.n	80086aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e050      	b.n	800874c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80086aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	da0f      	bge.n	80086d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086b2:	78fb      	ldrb	r3, [r7, #3]
 80086b4:	f003 020f 	and.w	r2, r3, #15
 80086b8:	4613      	mov	r3, r2
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	1a9b      	subs	r3, r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	3338      	adds	r3, #56	; 0x38
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	4413      	add	r3, r2
 80086c6:	3304      	adds	r3, #4
 80086c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2201      	movs	r2, #1
 80086ce:	705a      	strb	r2, [r3, #1]
 80086d0:	e00d      	b.n	80086ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	4613      	mov	r3, r2
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	1a9b      	subs	r3, r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	4413      	add	r3, r2
 80086e4:	3304      	adds	r3, #4
 80086e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2201      	movs	r2, #1
 80086f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086f4:	78fb      	ldrb	r3, [r7, #3]
 80086f6:	f003 030f 	and.w	r3, r3, #15
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008706:	2b01      	cmp	r3, #1
 8008708:	d101      	bne.n	800870e <HAL_PCD_EP_SetStall+0x82>
 800870a:	2302      	movs	r3, #2
 800870c:	e01e      	b.n	800874c <HAL_PCD_EP_SetStall+0xc0>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68f9      	ldr	r1, [r7, #12]
 800871c:	4618      	mov	r0, r3
 800871e:	f004 f95a 	bl	800c9d6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008722:	78fb      	ldrb	r3, [r7, #3]
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10a      	bne.n	8008742 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6818      	ldr	r0, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	b2d9      	uxtb	r1, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800873c:	461a      	mov	r2, r3
 800873e:	f004 fb4b 	bl	800cdd8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	f003 020f 	and.w	r2, r3, #15
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	429a      	cmp	r2, r3
 800876c:	d901      	bls.n	8008772 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e042      	b.n	80087f8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008776:	2b00      	cmp	r3, #0
 8008778:	da0f      	bge.n	800879a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	f003 020f 	and.w	r2, r3, #15
 8008780:	4613      	mov	r3, r2
 8008782:	00db      	lsls	r3, r3, #3
 8008784:	1a9b      	subs	r3, r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	3338      	adds	r3, #56	; 0x38
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	4413      	add	r3, r2
 800878e:	3304      	adds	r3, #4
 8008790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2201      	movs	r2, #1
 8008796:	705a      	strb	r2, [r3, #1]
 8008798:	e00f      	b.n	80087ba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	f003 020f 	and.w	r2, r3, #15
 80087a0:	4613      	mov	r3, r2
 80087a2:	00db      	lsls	r3, r3, #3
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	4413      	add	r3, r2
 80087b0:	3304      	adds	r3, #4
 80087b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	f003 030f 	and.w	r3, r3, #15
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d101      	bne.n	80087da <HAL_PCD_EP_ClrStall+0x86>
 80087d6:	2302      	movs	r3, #2
 80087d8:	e00e      	b.n	80087f8 <HAL_PCD_EP_ClrStall+0xa4>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68f9      	ldr	r1, [r7, #12]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f004 f962 	bl	800cab2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08a      	sub	sp, #40	; 0x28
 8008804:	af02      	add	r7, sp, #8
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	4613      	mov	r3, r2
 8008818:	00db      	lsls	r3, r3, #3
 800881a:	1a9b      	subs	r3, r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	3338      	adds	r3, #56	; 0x38
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	4413      	add	r3, r2
 8008824:	3304      	adds	r3, #4
 8008826:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	699a      	ldr	r2, [r3, #24]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	429a      	cmp	r2, r3
 8008832:	d901      	bls.n	8008838 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e06c      	b.n	8008912 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	695a      	ldr	r2, [r3, #20]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	69fa      	ldr	r2, [r7, #28]
 800884a:	429a      	cmp	r2, r3
 800884c:	d902      	bls.n	8008854 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	3303      	adds	r3, #3
 8008858:	089b      	lsrs	r3, r3, #2
 800885a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800885c:	e02b      	b.n	80088b6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	695a      	ldr	r2, [r3, #20]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	69fa      	ldr	r2, [r7, #28]
 8008870:	429a      	cmp	r2, r3
 8008872:	d902      	bls.n	800887a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	3303      	adds	r3, #3
 800887e:	089b      	lsrs	r3, r3, #2
 8008880:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	68d9      	ldr	r1, [r3, #12]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	b2da      	uxtb	r2, r3
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008892:	b2db      	uxtb	r3, r3
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	4603      	mov	r3, r0
 8008898:	6978      	ldr	r0, [r7, #20]
 800889a:	f004 f806 	bl	800c8aa <USB_WritePacket>

    ep->xfer_buff  += len;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	441a      	add	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	699a      	ldr	r2, [r3, #24]
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	441a      	add	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d809      	bhi.n	80088e0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	699a      	ldr	r2, [r3, #24]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d203      	bcs.n	80088e0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1be      	bne.n	800885e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	695a      	ldr	r2, [r3, #20]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d811      	bhi.n	8008910 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	f003 030f 	and.w	r3, r3, #15
 80088f2:	2201      	movs	r2, #1
 80088f4:	fa02 f303 	lsl.w	r3, r2, r3
 80088f8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	43db      	mvns	r3, r3
 8008906:	6939      	ldr	r1, [r7, #16]
 8008908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800890c:	4013      	ands	r3, r2
 800890e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3720      	adds	r7, #32
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	333c      	adds	r3, #60	; 0x3c
 8008934:	3304      	adds	r3, #4
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	4413      	add	r3, r2
 8008942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	2b01      	cmp	r3, #1
 8008950:	f040 80a0 	bne.w	8008a94 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	f003 0308 	and.w	r3, r3, #8
 800895a:	2b00      	cmp	r3, #0
 800895c:	d015      	beq.n	800898a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	4a72      	ldr	r2, [pc, #456]	; (8008b2c <PCD_EP_OutXfrComplete_int+0x210>)
 8008962:	4293      	cmp	r3, r2
 8008964:	f240 80dd 	bls.w	8008b22 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800896e:	2b00      	cmp	r3, #0
 8008970:	f000 80d7 	beq.w	8008b22 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008980:	461a      	mov	r2, r3
 8008982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008986:	6093      	str	r3, [r2, #8]
 8008988:	e0cb      	b.n	8008b22 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	f003 0320 	and.w	r3, r3, #32
 8008990:	2b00      	cmp	r3, #0
 8008992:	d009      	beq.n	80089a8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a0:	461a      	mov	r2, r3
 80089a2:	2320      	movs	r3, #32
 80089a4:	6093      	str	r3, [r2, #8]
 80089a6:	e0bc      	b.n	8008b22 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f040 80b7 	bne.w	8008b22 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4a5d      	ldr	r2, [pc, #372]	; (8008b2c <PCD_EP_OutXfrComplete_int+0x210>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d90f      	bls.n	80089dc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00a      	beq.n	80089dc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d2:	461a      	mov	r2, r3
 80089d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089d8:	6093      	str	r3, [r2, #8]
 80089da:	e0a2      	b.n	8008b22 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80089dc:	6879      	ldr	r1, [r7, #4]
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	4613      	mov	r3, r2
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	1a9b      	subs	r3, r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	440b      	add	r3, r1
 80089ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80089ee:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	0159      	lsls	r1, r3, #5
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	440b      	add	r3, r1
 80089f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008a02:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	1a9b      	subs	r3, r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4403      	add	r3, r0
 8008a12:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008a16:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	00db      	lsls	r3, r3, #3
 8008a20:	1a9b      	subs	r3, r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	440b      	add	r3, r1
 8008a26:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008a2a:	6819      	ldr	r1, [r3, #0]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	4613      	mov	r3, r2
 8008a32:	00db      	lsls	r3, r3, #3
 8008a34:	1a9b      	subs	r3, r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4403      	add	r3, r0
 8008a3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4419      	add	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	4613      	mov	r3, r2
 8008a48:	00db      	lsls	r3, r3, #3
 8008a4a:	1a9b      	subs	r3, r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4403      	add	r3, r0
 8008a50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008a54:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d114      	bne.n	8008a86 <PCD_EP_OutXfrComplete_int+0x16a>
 8008a5c:	6879      	ldr	r1, [r7, #4]
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	4613      	mov	r3, r2
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	1a9b      	subs	r3, r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	440b      	add	r3, r1
 8008a6a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d108      	bne.n	8008a86 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6818      	ldr	r0, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008a7e:	461a      	mov	r2, r3
 8008a80:	2101      	movs	r1, #1
 8008a82:	f004 f9a9 	bl	800cdd8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f008 fecf 	bl	8011830 <HAL_PCD_DataOutStageCallback>
 8008a92:	e046      	b.n	8008b22 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4a26      	ldr	r2, [pc, #152]	; (8008b30 <PCD_EP_OutXfrComplete_int+0x214>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d124      	bne.n	8008ae6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00a      	beq.n	8008abc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ab8:	6093      	str	r3, [r2, #8]
 8008aba:	e032      	b.n	8008b22 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f003 0320 	and.w	r3, r3, #32
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d008      	beq.n	8008ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	2320      	movs	r3, #32
 8008ad6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f008 fea6 	bl	8011830 <HAL_PCD_DataOutStageCallback>
 8008ae4:	e01d      	b.n	8008b22 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d114      	bne.n	8008b16 <PCD_EP_OutXfrComplete_int+0x1fa>
 8008aec:	6879      	ldr	r1, [r7, #4]
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	4613      	mov	r3, r2
 8008af2:	00db      	lsls	r3, r3, #3
 8008af4:	1a9b      	subs	r3, r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	440b      	add	r3, r1
 8008afa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d108      	bne.n	8008b16 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6818      	ldr	r0, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008b0e:	461a      	mov	r2, r3
 8008b10:	2100      	movs	r1, #0
 8008b12:	f004 f961 	bl	800cdd8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f008 fe87 	bl	8011830 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	4f54300a 	.word	0x4f54300a
 8008b30:	4f54310a 	.word	0x4f54310a

08008b34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	333c      	adds	r3, #60	; 0x3c
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	4a15      	ldr	r2, [pc, #84]	; (8008bbc <PCD_EP_OutSetupPacket_int+0x88>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d90e      	bls.n	8008b88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d009      	beq.n	8008b88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b80:	461a      	mov	r2, r3
 8008b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f008 fe3f 	bl	801180c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4a0a      	ldr	r2, [pc, #40]	; (8008bbc <PCD_EP_OutSetupPacket_int+0x88>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d90c      	bls.n	8008bb0 <PCD_EP_OutSetupPacket_int+0x7c>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d108      	bne.n	8008bb0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6818      	ldr	r0, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ba8:	461a      	mov	r2, r3
 8008baa:	2101      	movs	r1, #1
 8008bac:	f004 f914 	bl	800cdd8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3718      	adds	r7, #24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	4f54300a 	.word	0x4f54300a

08008bc0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008bd8:	78fb      	ldrb	r3, [r7, #3]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d107      	bne.n	8008bee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008bde:	883b      	ldrh	r3, [r7, #0]
 8008be0:	0419      	lsls	r1, r3, #16
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	629a      	str	r2, [r3, #40]	; 0x28
 8008bec:	e028      	b.n	8008c40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf4:	0c1b      	lsrs	r3, r3, #16
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	73fb      	strb	r3, [r7, #15]
 8008c00:	e00d      	b.n	8008c1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	3340      	adds	r3, #64	; 0x40
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	0c1b      	lsrs	r3, r3, #16
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	4413      	add	r3, r2
 8008c16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	73fb      	strb	r3, [r7, #15]
 8008c1e:	7bfa      	ldrb	r2, [r7, #15]
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d3ec      	bcc.n	8008c02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008c28:	883b      	ldrh	r3, [r7, #0]
 8008c2a:	0418      	lsls	r0, r3, #16
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6819      	ldr	r1, [r3, #0]
 8008c30:	78fb      	ldrb	r3, [r7, #3]
 8008c32:	3b01      	subs	r3, #1
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	4302      	orrs	r2, r0
 8008c38:	3340      	adds	r3, #64	; 0x40
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	440b      	add	r3, r1
 8008c3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	460b      	mov	r3, r1
 8008c58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	887a      	ldrh	r2, [r7, #2]
 8008c60:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d101      	bne.n	8008c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e264      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d075      	beq.n	8008d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ca6:	4ba3      	ldr	r3, [pc, #652]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f003 030c 	and.w	r3, r3, #12
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d00c      	beq.n	8008ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008cb2:	4ba0      	ldr	r3, [pc, #640]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008cba:	2b08      	cmp	r3, #8
 8008cbc:	d112      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008cbe:	4b9d      	ldr	r3, [pc, #628]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cca:	d10b      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ccc:	4b99      	ldr	r3, [pc, #612]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d05b      	beq.n	8008d90 <HAL_RCC_OscConfig+0x108>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d157      	bne.n	8008d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e23f      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cec:	d106      	bne.n	8008cfc <HAL_RCC_OscConfig+0x74>
 8008cee:	4b91      	ldr	r3, [pc, #580]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a90      	ldr	r2, [pc, #576]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	e01d      	b.n	8008d38 <HAL_RCC_OscConfig+0xb0>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d04:	d10c      	bne.n	8008d20 <HAL_RCC_OscConfig+0x98>
 8008d06:	4b8b      	ldr	r3, [pc, #556]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a8a      	ldr	r2, [pc, #552]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d10:	6013      	str	r3, [r2, #0]
 8008d12:	4b88      	ldr	r3, [pc, #544]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a87      	ldr	r2, [pc, #540]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	e00b      	b.n	8008d38 <HAL_RCC_OscConfig+0xb0>
 8008d20:	4b84      	ldr	r3, [pc, #528]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a83      	ldr	r2, [pc, #524]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d2a:	6013      	str	r3, [r2, #0]
 8008d2c:	4b81      	ldr	r3, [pc, #516]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a80      	ldr	r2, [pc, #512]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d013      	beq.n	8008d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d40:	f7fc fb54 	bl	80053ec <HAL_GetTick>
 8008d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d46:	e008      	b.n	8008d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d48:	f7fc fb50 	bl	80053ec <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	2b64      	cmp	r3, #100	; 0x64
 8008d54:	d901      	bls.n	8008d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e204      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d5a:	4b76      	ldr	r3, [pc, #472]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0f0      	beq.n	8008d48 <HAL_RCC_OscConfig+0xc0>
 8008d66:	e014      	b.n	8008d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d68:	f7fc fb40 	bl	80053ec <HAL_GetTick>
 8008d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d6e:	e008      	b.n	8008d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d70:	f7fc fb3c 	bl	80053ec <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	2b64      	cmp	r3, #100	; 0x64
 8008d7c:	d901      	bls.n	8008d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e1f0      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d82:	4b6c      	ldr	r3, [pc, #432]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1f0      	bne.n	8008d70 <HAL_RCC_OscConfig+0xe8>
 8008d8e:	e000      	b.n	8008d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d063      	beq.n	8008e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d9e:	4b65      	ldr	r3, [pc, #404]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f003 030c 	and.w	r3, r3, #12
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00b      	beq.n	8008dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008daa:	4b62      	ldr	r3, [pc, #392]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008db2:	2b08      	cmp	r3, #8
 8008db4:	d11c      	bne.n	8008df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008db6:	4b5f      	ldr	r3, [pc, #380]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d116      	bne.n	8008df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dc2:	4b5c      	ldr	r3, [pc, #368]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0302 	and.w	r3, r3, #2
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d005      	beq.n	8008dda <HAL_RCC_OscConfig+0x152>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d001      	beq.n	8008dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e1c4      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dda:	4b56      	ldr	r3, [pc, #344]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	4952      	ldr	r1, [pc, #328]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dee:	e03a      	b.n	8008e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d020      	beq.n	8008e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008df8:	4b4f      	ldr	r3, [pc, #316]	; (8008f38 <HAL_RCC_OscConfig+0x2b0>)
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dfe:	f7fc faf5 	bl	80053ec <HAL_GetTick>
 8008e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e04:	e008      	b.n	8008e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e06:	f7fc faf1 	bl	80053ec <HAL_GetTick>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d901      	bls.n	8008e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e1a5      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e18:	4b46      	ldr	r3, [pc, #280]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0302 	and.w	r3, r3, #2
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0f0      	beq.n	8008e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e24:	4b43      	ldr	r3, [pc, #268]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	00db      	lsls	r3, r3, #3
 8008e32:	4940      	ldr	r1, [pc, #256]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	600b      	str	r3, [r1, #0]
 8008e38:	e015      	b.n	8008e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e3a:	4b3f      	ldr	r3, [pc, #252]	; (8008f38 <HAL_RCC_OscConfig+0x2b0>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e40:	f7fc fad4 	bl	80053ec <HAL_GetTick>
 8008e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e46:	e008      	b.n	8008e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e48:	f7fc fad0 	bl	80053ec <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d901      	bls.n	8008e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e184      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e5a:	4b36      	ldr	r3, [pc, #216]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1f0      	bne.n	8008e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0308 	and.w	r3, r3, #8
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d030      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d016      	beq.n	8008ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e7a:	4b30      	ldr	r3, [pc, #192]	; (8008f3c <HAL_RCC_OscConfig+0x2b4>)
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e80:	f7fc fab4 	bl	80053ec <HAL_GetTick>
 8008e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e86:	e008      	b.n	8008e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e88:	f7fc fab0 	bl	80053ec <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d901      	bls.n	8008e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e164      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e9a:	4b26      	ldr	r3, [pc, #152]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0f0      	beq.n	8008e88 <HAL_RCC_OscConfig+0x200>
 8008ea6:	e015      	b.n	8008ed4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ea8:	4b24      	ldr	r3, [pc, #144]	; (8008f3c <HAL_RCC_OscConfig+0x2b4>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008eae:	f7fc fa9d 	bl	80053ec <HAL_GetTick>
 8008eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008eb4:	e008      	b.n	8008ec8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008eb6:	f7fc fa99 	bl	80053ec <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d901      	bls.n	8008ec8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e14d      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ec8:	4b1a      	ldr	r3, [pc, #104]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ecc:	f003 0302 	and.w	r3, r3, #2
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1f0      	bne.n	8008eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 0304 	and.w	r3, r3, #4
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 80a0 	beq.w	8009022 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ee6:	4b13      	ldr	r3, [pc, #76]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10f      	bne.n	8008f12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60bb      	str	r3, [r7, #8]
 8008ef6:	4b0f      	ldr	r3, [pc, #60]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efa:	4a0e      	ldr	r2, [pc, #56]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f00:	6413      	str	r3, [r2, #64]	; 0x40
 8008f02:	4b0c      	ldr	r3, [pc, #48]	; (8008f34 <HAL_RCC_OscConfig+0x2ac>)
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f0a:	60bb      	str	r3, [r7, #8]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f12:	4b0b      	ldr	r3, [pc, #44]	; (8008f40 <HAL_RCC_OscConfig+0x2b8>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d121      	bne.n	8008f62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f1e:	4b08      	ldr	r3, [pc, #32]	; (8008f40 <HAL_RCC_OscConfig+0x2b8>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a07      	ldr	r2, [pc, #28]	; (8008f40 <HAL_RCC_OscConfig+0x2b8>)
 8008f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f2a:	f7fc fa5f 	bl	80053ec <HAL_GetTick>
 8008f2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f30:	e011      	b.n	8008f56 <HAL_RCC_OscConfig+0x2ce>
 8008f32:	bf00      	nop
 8008f34:	40023800 	.word	0x40023800
 8008f38:	42470000 	.word	0x42470000
 8008f3c:	42470e80 	.word	0x42470e80
 8008f40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f44:	f7fc fa52 	bl	80053ec <HAL_GetTick>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d901      	bls.n	8008f56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e106      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f56:	4b85      	ldr	r3, [pc, #532]	; (800916c <HAL_RCC_OscConfig+0x4e4>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d0f0      	beq.n	8008f44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d106      	bne.n	8008f78 <HAL_RCC_OscConfig+0x2f0>
 8008f6a:	4b81      	ldr	r3, [pc, #516]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8008f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6e:	4a80      	ldr	r2, [pc, #512]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8008f70:	f043 0301 	orr.w	r3, r3, #1
 8008f74:	6713      	str	r3, [r2, #112]	; 0x70
 8008f76:	e01c      	b.n	8008fb2 <HAL_RCC_OscConfig+0x32a>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	2b05      	cmp	r3, #5
 8008f7e:	d10c      	bne.n	8008f9a <HAL_RCC_OscConfig+0x312>
 8008f80:	4b7b      	ldr	r3, [pc, #492]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8008f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f84:	4a7a      	ldr	r2, [pc, #488]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8008f86:	f043 0304 	orr.w	r3, r3, #4
 8008f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8008f8c:	4b78      	ldr	r3, [pc, #480]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8008f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f90:	4a77      	ldr	r2, [pc, #476]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8008f92:	f043 0301 	orr.w	r3, r3, #1
 8008f96:	6713      	str	r3, [r2, #112]	; 0x70
 8008f98:	e00b      	b.n	8008fb2 <HAL_RCC_OscConfig+0x32a>
 8008f9a:	4b75      	ldr	r3, [pc, #468]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8008f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f9e:	4a74      	ldr	r2, [pc, #464]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8008fa0:	f023 0301 	bic.w	r3, r3, #1
 8008fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8008fa6:	4b72      	ldr	r3, [pc, #456]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8008fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008faa:	4a71      	ldr	r2, [pc, #452]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8008fac:	f023 0304 	bic.w	r3, r3, #4
 8008fb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d015      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fba:	f7fc fa17 	bl	80053ec <HAL_GetTick>
 8008fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fc0:	e00a      	b.n	8008fd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fc2:	f7fc fa13 	bl	80053ec <HAL_GetTick>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d901      	bls.n	8008fd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e0c5      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fd8:	4b65      	ldr	r3, [pc, #404]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8008fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d0ee      	beq.n	8008fc2 <HAL_RCC_OscConfig+0x33a>
 8008fe4:	e014      	b.n	8009010 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fe6:	f7fc fa01 	bl	80053ec <HAL_GetTick>
 8008fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fec:	e00a      	b.n	8009004 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fee:	f7fc f9fd 	bl	80053ec <HAL_GetTick>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d901      	bls.n	8009004 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e0af      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009004:	4b5a      	ldr	r3, [pc, #360]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8009006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009008:	f003 0302 	and.w	r3, r3, #2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1ee      	bne.n	8008fee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009010:	7dfb      	ldrb	r3, [r7, #23]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d105      	bne.n	8009022 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009016:	4b56      	ldr	r3, [pc, #344]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8009018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901a:	4a55      	ldr	r2, [pc, #340]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 800901c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009020:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 809b 	beq.w	8009162 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800902c:	4b50      	ldr	r3, [pc, #320]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f003 030c 	and.w	r3, r3, #12
 8009034:	2b08      	cmp	r3, #8
 8009036:	d05c      	beq.n	80090f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	2b02      	cmp	r3, #2
 800903e:	d141      	bne.n	80090c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009040:	4b4c      	ldr	r3, [pc, #304]	; (8009174 <HAL_RCC_OscConfig+0x4ec>)
 8009042:	2200      	movs	r2, #0
 8009044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009046:	f7fc f9d1 	bl	80053ec <HAL_GetTick>
 800904a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800904c:	e008      	b.n	8009060 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800904e:	f7fc f9cd 	bl	80053ec <HAL_GetTick>
 8009052:	4602      	mov	r2, r0
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	2b02      	cmp	r3, #2
 800905a:	d901      	bls.n	8009060 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e081      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009060:	4b43      	ldr	r3, [pc, #268]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1f0      	bne.n	800904e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	69da      	ldr	r2, [r3, #28]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	019b      	lsls	r3, r3, #6
 800907c:	431a      	orrs	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009082:	085b      	lsrs	r3, r3, #1
 8009084:	3b01      	subs	r3, #1
 8009086:	041b      	lsls	r3, r3, #16
 8009088:	431a      	orrs	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908e:	061b      	lsls	r3, r3, #24
 8009090:	4937      	ldr	r1, [pc, #220]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8009092:	4313      	orrs	r3, r2
 8009094:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009096:	4b37      	ldr	r3, [pc, #220]	; (8009174 <HAL_RCC_OscConfig+0x4ec>)
 8009098:	2201      	movs	r2, #1
 800909a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800909c:	f7fc f9a6 	bl	80053ec <HAL_GetTick>
 80090a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090a2:	e008      	b.n	80090b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090a4:	f7fc f9a2 	bl	80053ec <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d901      	bls.n	80090b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e056      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090b6:	4b2e      	ldr	r3, [pc, #184]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d0f0      	beq.n	80090a4 <HAL_RCC_OscConfig+0x41c>
 80090c2:	e04e      	b.n	8009162 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090c4:	4b2b      	ldr	r3, [pc, #172]	; (8009174 <HAL_RCC_OscConfig+0x4ec>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090ca:	f7fc f98f 	bl	80053ec <HAL_GetTick>
 80090ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090d0:	e008      	b.n	80090e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090d2:	f7fc f98b 	bl	80053ec <HAL_GetTick>
 80090d6:	4602      	mov	r2, r0
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d901      	bls.n	80090e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e03f      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090e4:	4b22      	ldr	r3, [pc, #136]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1f0      	bne.n	80090d2 <HAL_RCC_OscConfig+0x44a>
 80090f0:	e037      	b.n	8009162 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d101      	bne.n	80090fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e032      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80090fe:	4b1c      	ldr	r3, [pc, #112]	; (8009170 <HAL_RCC_OscConfig+0x4e8>)
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d028      	beq.n	800915e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009116:	429a      	cmp	r2, r3
 8009118:	d121      	bne.n	800915e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009124:	429a      	cmp	r2, r3
 8009126:	d11a      	bne.n	800915e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800912e:	4013      	ands	r3, r2
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009134:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009136:	4293      	cmp	r3, r2
 8009138:	d111      	bne.n	800915e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009144:	085b      	lsrs	r3, r3, #1
 8009146:	3b01      	subs	r3, #1
 8009148:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800914a:	429a      	cmp	r2, r3
 800914c:	d107      	bne.n	800915e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800915a:	429a      	cmp	r2, r3
 800915c:	d001      	beq.n	8009162 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	e000      	b.n	8009164 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	40007000 	.word	0x40007000
 8009170:	40023800 	.word	0x40023800
 8009174:	42470060 	.word	0x42470060

08009178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e0cc      	b.n	8009326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800918c:	4b68      	ldr	r3, [pc, #416]	; (8009330 <HAL_RCC_ClockConfig+0x1b8>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0307 	and.w	r3, r3, #7
 8009194:	683a      	ldr	r2, [r7, #0]
 8009196:	429a      	cmp	r2, r3
 8009198:	d90c      	bls.n	80091b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800919a:	4b65      	ldr	r3, [pc, #404]	; (8009330 <HAL_RCC_ClockConfig+0x1b8>)
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	b2d2      	uxtb	r2, r2
 80091a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091a2:	4b63      	ldr	r3, [pc, #396]	; (8009330 <HAL_RCC_ClockConfig+0x1b8>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0307 	and.w	r3, r3, #7
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d001      	beq.n	80091b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e0b8      	b.n	8009326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0302 	and.w	r3, r3, #2
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d020      	beq.n	8009202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d005      	beq.n	80091d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091cc:	4b59      	ldr	r3, [pc, #356]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	4a58      	ldr	r2, [pc, #352]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 80091d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80091d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0308 	and.w	r3, r3, #8
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d005      	beq.n	80091f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091e4:	4b53      	ldr	r3, [pc, #332]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	4a52      	ldr	r2, [pc, #328]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 80091ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80091ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091f0:	4b50      	ldr	r3, [pc, #320]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	494d      	ldr	r1, [pc, #308]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 80091fe:	4313      	orrs	r3, r2
 8009200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d044      	beq.n	8009298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d107      	bne.n	8009226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009216:	4b47      	ldr	r3, [pc, #284]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d119      	bne.n	8009256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e07f      	b.n	8009326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	2b02      	cmp	r3, #2
 800922c:	d003      	beq.n	8009236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009232:	2b03      	cmp	r3, #3
 8009234:	d107      	bne.n	8009246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009236:	4b3f      	ldr	r3, [pc, #252]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800923e:	2b00      	cmp	r3, #0
 8009240:	d109      	bne.n	8009256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e06f      	b.n	8009326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009246:	4b3b      	ldr	r3, [pc, #236]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 0302 	and.w	r3, r3, #2
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e067      	b.n	8009326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009256:	4b37      	ldr	r3, [pc, #220]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f023 0203 	bic.w	r2, r3, #3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	4934      	ldr	r1, [pc, #208]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 8009264:	4313      	orrs	r3, r2
 8009266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009268:	f7fc f8c0 	bl	80053ec <HAL_GetTick>
 800926c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800926e:	e00a      	b.n	8009286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009270:	f7fc f8bc 	bl	80053ec <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	f241 3288 	movw	r2, #5000	; 0x1388
 800927e:	4293      	cmp	r3, r2
 8009280:	d901      	bls.n	8009286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e04f      	b.n	8009326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009286:	4b2b      	ldr	r3, [pc, #172]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	f003 020c 	and.w	r2, r3, #12
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	429a      	cmp	r2, r3
 8009296:	d1eb      	bne.n	8009270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009298:	4b25      	ldr	r3, [pc, #148]	; (8009330 <HAL_RCC_ClockConfig+0x1b8>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 0307 	and.w	r3, r3, #7
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d20c      	bcs.n	80092c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092a6:	4b22      	ldr	r3, [pc, #136]	; (8009330 <HAL_RCC_ClockConfig+0x1b8>)
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	b2d2      	uxtb	r2, r2
 80092ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092ae:	4b20      	ldr	r3, [pc, #128]	; (8009330 <HAL_RCC_ClockConfig+0x1b8>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0307 	and.w	r3, r3, #7
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d001      	beq.n	80092c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e032      	b.n	8009326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f003 0304 	and.w	r3, r3, #4
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d008      	beq.n	80092de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092cc:	4b19      	ldr	r3, [pc, #100]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	4916      	ldr	r1, [pc, #88]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 80092da:	4313      	orrs	r3, r2
 80092dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 0308 	and.w	r3, r3, #8
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d009      	beq.n	80092fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092ea:	4b12      	ldr	r3, [pc, #72]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	00db      	lsls	r3, r3, #3
 80092f8:	490e      	ldr	r1, [pc, #56]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 80092fa:	4313      	orrs	r3, r2
 80092fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80092fe:	f000 f821 	bl	8009344 <HAL_RCC_GetSysClockFreq>
 8009302:	4602      	mov	r2, r0
 8009304:	4b0b      	ldr	r3, [pc, #44]	; (8009334 <HAL_RCC_ClockConfig+0x1bc>)
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	091b      	lsrs	r3, r3, #4
 800930a:	f003 030f 	and.w	r3, r3, #15
 800930e:	490a      	ldr	r1, [pc, #40]	; (8009338 <HAL_RCC_ClockConfig+0x1c0>)
 8009310:	5ccb      	ldrb	r3, [r1, r3]
 8009312:	fa22 f303 	lsr.w	r3, r2, r3
 8009316:	4a09      	ldr	r2, [pc, #36]	; (800933c <HAL_RCC_ClockConfig+0x1c4>)
 8009318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800931a:	4b09      	ldr	r3, [pc, #36]	; (8009340 <HAL_RCC_ClockConfig+0x1c8>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4618      	mov	r0, r3
 8009320:	f7fb ff1e 	bl	8005160 <HAL_InitTick>

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	40023c00 	.word	0x40023c00
 8009334:	40023800 	.word	0x40023800
 8009338:	08012a90 	.word	0x08012a90
 800933c:	2000000c 	.word	0x2000000c
 8009340:	20000010 	.word	0x20000010

08009344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009344:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	607b      	str	r3, [r7, #4]
 8009350:	2300      	movs	r3, #0
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	2300      	movs	r3, #0
 8009356:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009358:	2300      	movs	r3, #0
 800935a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800935c:	4b67      	ldr	r3, [pc, #412]	; (80094fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f003 030c 	and.w	r3, r3, #12
 8009364:	2b08      	cmp	r3, #8
 8009366:	d00d      	beq.n	8009384 <HAL_RCC_GetSysClockFreq+0x40>
 8009368:	2b08      	cmp	r3, #8
 800936a:	f200 80bd 	bhi.w	80094e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800936e:	2b00      	cmp	r3, #0
 8009370:	d002      	beq.n	8009378 <HAL_RCC_GetSysClockFreq+0x34>
 8009372:	2b04      	cmp	r3, #4
 8009374:	d003      	beq.n	800937e <HAL_RCC_GetSysClockFreq+0x3a>
 8009376:	e0b7      	b.n	80094e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009378:	4b61      	ldr	r3, [pc, #388]	; (8009500 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800937a:	60bb      	str	r3, [r7, #8]
       break;
 800937c:	e0b7      	b.n	80094ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800937e:	4b61      	ldr	r3, [pc, #388]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009380:	60bb      	str	r3, [r7, #8]
      break;
 8009382:	e0b4      	b.n	80094ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009384:	4b5d      	ldr	r3, [pc, #372]	; (80094fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800938c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800938e:	4b5b      	ldr	r3, [pc, #364]	; (80094fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d04d      	beq.n	8009436 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800939a:	4b58      	ldr	r3, [pc, #352]	; (80094fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	099b      	lsrs	r3, r3, #6
 80093a0:	461a      	mov	r2, r3
 80093a2:	f04f 0300 	mov.w	r3, #0
 80093a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80093aa:	f04f 0100 	mov.w	r1, #0
 80093ae:	ea02 0800 	and.w	r8, r2, r0
 80093b2:	ea03 0901 	and.w	r9, r3, r1
 80093b6:	4640      	mov	r0, r8
 80093b8:	4649      	mov	r1, r9
 80093ba:	f04f 0200 	mov.w	r2, #0
 80093be:	f04f 0300 	mov.w	r3, #0
 80093c2:	014b      	lsls	r3, r1, #5
 80093c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80093c8:	0142      	lsls	r2, r0, #5
 80093ca:	4610      	mov	r0, r2
 80093cc:	4619      	mov	r1, r3
 80093ce:	ebb0 0008 	subs.w	r0, r0, r8
 80093d2:	eb61 0109 	sbc.w	r1, r1, r9
 80093d6:	f04f 0200 	mov.w	r2, #0
 80093da:	f04f 0300 	mov.w	r3, #0
 80093de:	018b      	lsls	r3, r1, #6
 80093e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80093e4:	0182      	lsls	r2, r0, #6
 80093e6:	1a12      	subs	r2, r2, r0
 80093e8:	eb63 0301 	sbc.w	r3, r3, r1
 80093ec:	f04f 0000 	mov.w	r0, #0
 80093f0:	f04f 0100 	mov.w	r1, #0
 80093f4:	00d9      	lsls	r1, r3, #3
 80093f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093fa:	00d0      	lsls	r0, r2, #3
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	eb12 0208 	adds.w	r2, r2, r8
 8009404:	eb43 0309 	adc.w	r3, r3, r9
 8009408:	f04f 0000 	mov.w	r0, #0
 800940c:	f04f 0100 	mov.w	r1, #0
 8009410:	0259      	lsls	r1, r3, #9
 8009412:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009416:	0250      	lsls	r0, r2, #9
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	4610      	mov	r0, r2
 800941e:	4619      	mov	r1, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	461a      	mov	r2, r3
 8009424:	f04f 0300 	mov.w	r3, #0
 8009428:	f7f7 fb96 	bl	8000b58 <__aeabi_uldivmod>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4613      	mov	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]
 8009434:	e04a      	b.n	80094cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009436:	4b31      	ldr	r3, [pc, #196]	; (80094fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	099b      	lsrs	r3, r3, #6
 800943c:	461a      	mov	r2, r3
 800943e:	f04f 0300 	mov.w	r3, #0
 8009442:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009446:	f04f 0100 	mov.w	r1, #0
 800944a:	ea02 0400 	and.w	r4, r2, r0
 800944e:	ea03 0501 	and.w	r5, r3, r1
 8009452:	4620      	mov	r0, r4
 8009454:	4629      	mov	r1, r5
 8009456:	f04f 0200 	mov.w	r2, #0
 800945a:	f04f 0300 	mov.w	r3, #0
 800945e:	014b      	lsls	r3, r1, #5
 8009460:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009464:	0142      	lsls	r2, r0, #5
 8009466:	4610      	mov	r0, r2
 8009468:	4619      	mov	r1, r3
 800946a:	1b00      	subs	r0, r0, r4
 800946c:	eb61 0105 	sbc.w	r1, r1, r5
 8009470:	f04f 0200 	mov.w	r2, #0
 8009474:	f04f 0300 	mov.w	r3, #0
 8009478:	018b      	lsls	r3, r1, #6
 800947a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800947e:	0182      	lsls	r2, r0, #6
 8009480:	1a12      	subs	r2, r2, r0
 8009482:	eb63 0301 	sbc.w	r3, r3, r1
 8009486:	f04f 0000 	mov.w	r0, #0
 800948a:	f04f 0100 	mov.w	r1, #0
 800948e:	00d9      	lsls	r1, r3, #3
 8009490:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009494:	00d0      	lsls	r0, r2, #3
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	1912      	adds	r2, r2, r4
 800949c:	eb45 0303 	adc.w	r3, r5, r3
 80094a0:	f04f 0000 	mov.w	r0, #0
 80094a4:	f04f 0100 	mov.w	r1, #0
 80094a8:	0299      	lsls	r1, r3, #10
 80094aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80094ae:	0290      	lsls	r0, r2, #10
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	4610      	mov	r0, r2
 80094b6:	4619      	mov	r1, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	461a      	mov	r2, r3
 80094bc:	f04f 0300 	mov.w	r3, #0
 80094c0:	f7f7 fb4a 	bl	8000b58 <__aeabi_uldivmod>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4613      	mov	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80094cc:	4b0b      	ldr	r3, [pc, #44]	; (80094fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	0c1b      	lsrs	r3, r3, #16
 80094d2:	f003 0303 	and.w	r3, r3, #3
 80094d6:	3301      	adds	r3, #1
 80094d8:	005b      	lsls	r3, r3, #1
 80094da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e4:	60bb      	str	r3, [r7, #8]
      break;
 80094e6:	e002      	b.n	80094ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80094e8:	4b05      	ldr	r3, [pc, #20]	; (8009500 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80094ea:	60bb      	str	r3, [r7, #8]
      break;
 80094ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80094ee:	68bb      	ldr	r3, [r7, #8]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80094fa:	bf00      	nop
 80094fc:	40023800 	.word	0x40023800
 8009500:	00f42400 	.word	0x00f42400
 8009504:	007a1200 	.word	0x007a1200

08009508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009508:	b480      	push	{r7}
 800950a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800950c:	4b03      	ldr	r3, [pc, #12]	; (800951c <HAL_RCC_GetHCLKFreq+0x14>)
 800950e:	681b      	ldr	r3, [r3, #0]
}
 8009510:	4618      	mov	r0, r3
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	2000000c 	.word	0x2000000c

08009520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009524:	f7ff fff0 	bl	8009508 <HAL_RCC_GetHCLKFreq>
 8009528:	4602      	mov	r2, r0
 800952a:	4b05      	ldr	r3, [pc, #20]	; (8009540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	0a9b      	lsrs	r3, r3, #10
 8009530:	f003 0307 	and.w	r3, r3, #7
 8009534:	4903      	ldr	r1, [pc, #12]	; (8009544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009536:	5ccb      	ldrb	r3, [r1, r3]
 8009538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800953c:	4618      	mov	r0, r3
 800953e:	bd80      	pop	{r7, pc}
 8009540:	40023800 	.word	0x40023800
 8009544:	08012aa0 	.word	0x08012aa0

08009548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800954c:	f7ff ffdc 	bl	8009508 <HAL_RCC_GetHCLKFreq>
 8009550:	4602      	mov	r2, r0
 8009552:	4b05      	ldr	r3, [pc, #20]	; (8009568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	0b5b      	lsrs	r3, r3, #13
 8009558:	f003 0307 	and.w	r3, r3, #7
 800955c:	4903      	ldr	r1, [pc, #12]	; (800956c <HAL_RCC_GetPCLK2Freq+0x24>)
 800955e:	5ccb      	ldrb	r3, [r1, r3]
 8009560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009564:	4618      	mov	r0, r3
 8009566:	bd80      	pop	{r7, pc}
 8009568:	40023800 	.word	0x40023800
 800956c:	08012aa0 	.word	0x08012aa0

08009570 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	220f      	movs	r2, #15
 800957e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009580:	4b12      	ldr	r3, [pc, #72]	; (80095cc <HAL_RCC_GetClockConfig+0x5c>)
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f003 0203 	and.w	r2, r3, #3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800958c:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <HAL_RCC_GetClockConfig+0x5c>)
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009598:	4b0c      	ldr	r3, [pc, #48]	; (80095cc <HAL_RCC_GetClockConfig+0x5c>)
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80095a4:	4b09      	ldr	r3, [pc, #36]	; (80095cc <HAL_RCC_GetClockConfig+0x5c>)
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	08db      	lsrs	r3, r3, #3
 80095aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80095b2:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <HAL_RCC_GetClockConfig+0x60>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 0207 	and.w	r2, r3, #7
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	601a      	str	r2, [r3, #0]
}
 80095be:	bf00      	nop
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	40023800 	.word	0x40023800
 80095d0:	40023c00 	.word	0x40023c00

080095d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095dc:	2300      	movs	r3, #0
 80095de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80095e0:	2300      	movs	r3, #0
 80095e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0301 	and.w	r3, r3, #1
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d105      	bne.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d038      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80095fc:	4b68      	ldr	r3, [pc, #416]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80095fe:	2200      	movs	r2, #0
 8009600:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009602:	f7fb fef3 	bl	80053ec <HAL_GetTick>
 8009606:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009608:	e008      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800960a:	f7fb feef 	bl	80053ec <HAL_GetTick>
 800960e:	4602      	mov	r2, r0
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	2b02      	cmp	r3, #2
 8009616:	d901      	bls.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009618:	2303      	movs	r3, #3
 800961a:	e0bd      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800961c:	4b61      	ldr	r3, [pc, #388]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1f0      	bne.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	019b      	lsls	r3, r3, #6
 8009632:	431a      	orrs	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	071b      	lsls	r3, r3, #28
 800963a:	495a      	ldr	r1, [pc, #360]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800963c:	4313      	orrs	r3, r2
 800963e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009642:	4b57      	ldr	r3, [pc, #348]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009644:	2201      	movs	r2, #1
 8009646:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009648:	f7fb fed0 	bl	80053ec <HAL_GetTick>
 800964c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800964e:	e008      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009650:	f7fb fecc 	bl	80053ec <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	2b02      	cmp	r3, #2
 800965c:	d901      	bls.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	e09a      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009662:	4b50      	ldr	r3, [pc, #320]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0f0      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0302 	and.w	r3, r3, #2
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 8083 	beq.w	8009782 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800967c:	2300      	movs	r3, #0
 800967e:	60fb      	str	r3, [r7, #12]
 8009680:	4b48      	ldr	r3, [pc, #288]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009684:	4a47      	ldr	r2, [pc, #284]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800968a:	6413      	str	r3, [r2, #64]	; 0x40
 800968c:	4b45      	ldr	r3, [pc, #276]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800968e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009694:	60fb      	str	r3, [r7, #12]
 8009696:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009698:	4b43      	ldr	r3, [pc, #268]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a42      	ldr	r2, [pc, #264]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800969e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096a2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80096a4:	f7fb fea2 	bl	80053ec <HAL_GetTick>
 80096a8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80096aa:	e008      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80096ac:	f7fb fe9e 	bl	80053ec <HAL_GetTick>
 80096b0:	4602      	mov	r2, r0
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	1ad3      	subs	r3, r2, r3
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d901      	bls.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80096ba:	2303      	movs	r3, #3
 80096bc:	e06c      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80096be:	4b3a      	ldr	r3, [pc, #232]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0f0      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80096ca:	4b36      	ldr	r3, [pc, #216]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096d2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d02f      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d028      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096e8:	4b2e      	ldr	r3, [pc, #184]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096f0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80096f2:	4b2e      	ldr	r3, [pc, #184]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80096f4:	2201      	movs	r2, #1
 80096f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80096f8:	4b2c      	ldr	r3, [pc, #176]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80096fe:	4a29      	ldr	r2, [pc, #164]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009704:	4b27      	ldr	r3, [pc, #156]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b01      	cmp	r3, #1
 800970e:	d114      	bne.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009710:	f7fb fe6c 	bl	80053ec <HAL_GetTick>
 8009714:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009716:	e00a      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009718:	f7fb fe68 	bl	80053ec <HAL_GetTick>
 800971c:	4602      	mov	r2, r0
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	f241 3288 	movw	r2, #5000	; 0x1388
 8009726:	4293      	cmp	r3, r2
 8009728:	d901      	bls.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800972a:	2303      	movs	r3, #3
 800972c:	e034      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800972e:	4b1d      	ldr	r3, [pc, #116]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009732:	f003 0302 	and.w	r3, r3, #2
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0ee      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009746:	d10d      	bne.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8009748:	4b16      	ldr	r3, [pc, #88]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800975c:	4911      	ldr	r1, [pc, #68]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800975e:	4313      	orrs	r3, r2
 8009760:	608b      	str	r3, [r1, #8]
 8009762:	e005      	b.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8009764:	4b0f      	ldr	r3, [pc, #60]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	4a0e      	ldr	r2, [pc, #56]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800976a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800976e:	6093      	str	r3, [r2, #8]
 8009770:	4b0c      	ldr	r3, [pc, #48]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009772:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800977c:	4909      	ldr	r1, [pc, #36]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800977e:	4313      	orrs	r3, r2
 8009780:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0308 	and.w	r3, r3, #8
 800978a:	2b00      	cmp	r3, #0
 800978c:	d003      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	7d1a      	ldrb	r2, [r3, #20]
 8009792:	4b07      	ldr	r3, [pc, #28]	; (80097b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009794:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3718      	adds	r7, #24
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	42470068 	.word	0x42470068
 80097a4:	40023800 	.word	0x40023800
 80097a8:	40007000 	.word	0x40007000
 80097ac:	42470e40 	.word	0x42470e40
 80097b0:	424711e0 	.word	0x424711e0

080097b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80097bc:	2300      	movs	r3, #0
 80097be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80097c0:	2300      	movs	r3, #0
 80097c2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80097c4:	2300      	movs	r3, #0
 80097c6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80097c8:	2300      	movs	r3, #0
 80097ca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d140      	bne.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80097d2:	4b24      	ldr	r3, [pc, #144]	; (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d005      	beq.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d131      	bne.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80097e8:	4b1f      	ldr	r3, [pc, #124]	; (8009868 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80097ea:	617b      	str	r3, [r7, #20]
          break;
 80097ec:	e031      	b.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80097ee:	4b1d      	ldr	r3, [pc, #116]	; (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097fa:	d109      	bne.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80097fc:	4b19      	ldr	r3, [pc, #100]	; (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80097fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009802:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009806:	4a19      	ldr	r2, [pc, #100]	; (800986c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8009808:	fbb2 f3f3 	udiv	r3, r2, r3
 800980c:	613b      	str	r3, [r7, #16]
 800980e:	e008      	b.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009810:	4b14      	ldr	r3, [pc, #80]	; (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800981a:	4a15      	ldr	r2, [pc, #84]	; (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800981c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009820:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8009822:	4b10      	ldr	r3, [pc, #64]	; (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009828:	099b      	lsrs	r3, r3, #6
 800982a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	fb02 f303 	mul.w	r3, r2, r3
 8009834:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8009836:	4b0b      	ldr	r3, [pc, #44]	; (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800983c:	0f1b      	lsrs	r3, r3, #28
 800983e:	f003 0307 	and.w	r3, r3, #7
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	fbb2 f3f3 	udiv	r3, r2, r3
 8009848:	617b      	str	r3, [r7, #20]
          break;
 800984a:	e002      	b.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	617b      	str	r3, [r7, #20]
          break;
 8009850:	bf00      	nop
        }
      }
      break;
 8009852:	bf00      	nop
    }
  }
  return frequency;
 8009854:	697b      	ldr	r3, [r7, #20]
}
 8009856:	4618      	mov	r0, r3
 8009858:	371c      	adds	r7, #28
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	40023800 	.word	0x40023800
 8009868:	00bb8000 	.word	0x00bb8000
 800986c:	007a1200 	.word	0x007a1200
 8009870:	00f42400 	.word	0x00f42400

08009874 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d101      	bne.n	8009886 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e07b      	b.n	800997e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988a:	2b00      	cmp	r3, #0
 800988c:	d108      	bne.n	80098a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009896:	d009      	beq.n	80098ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	61da      	str	r2, [r3, #28]
 800989e:	e005      	b.n	80098ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d106      	bne.n	80098cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7fb fa40 	bl	8004d4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80098f4:	431a      	orrs	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098fe:	431a      	orrs	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	f003 0302 	and.w	r3, r3, #2
 8009908:	431a      	orrs	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	431a      	orrs	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800991c:	431a      	orrs	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	69db      	ldr	r3, [r3, #28]
 8009922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009926:	431a      	orrs	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a1b      	ldr	r3, [r3, #32]
 800992c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009930:	ea42 0103 	orr.w	r1, r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009938:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	430a      	orrs	r2, r1
 8009942:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	0c1b      	lsrs	r3, r3, #16
 800994a:	f003 0104 	and.w	r1, r3, #4
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009952:	f003 0210 	and.w	r2, r3, #16
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	69da      	ldr	r2, [r3, #28]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800996c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b088      	sub	sp, #32
 800998a:	af00      	add	r7, sp, #0
 800998c:	60f8      	str	r0, [r7, #12]
 800998e:	60b9      	str	r1, [r7, #8]
 8009990:	603b      	str	r3, [r7, #0]
 8009992:	4613      	mov	r3, r2
 8009994:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d101      	bne.n	80099a8 <HAL_SPI_Transmit+0x22>
 80099a4:	2302      	movs	r3, #2
 80099a6:	e126      	b.n	8009bf6 <HAL_SPI_Transmit+0x270>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099b0:	f7fb fd1c 	bl	80053ec <HAL_GetTick>
 80099b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80099b6:	88fb      	ldrh	r3, [r7, #6]
 80099b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d002      	beq.n	80099cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80099c6:	2302      	movs	r3, #2
 80099c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80099ca:	e10b      	b.n	8009be4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d002      	beq.n	80099d8 <HAL_SPI_Transmit+0x52>
 80099d2:	88fb      	ldrh	r3, [r7, #6]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d102      	bne.n	80099de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80099dc:	e102      	b.n	8009be4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2203      	movs	r2, #3
 80099e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	88fa      	ldrh	r2, [r7, #6]
 80099f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	88fa      	ldrh	r2, [r7, #6]
 80099fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a24:	d10f      	bne.n	8009a46 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a50:	2b40      	cmp	r3, #64	; 0x40
 8009a52:	d007      	beq.n	8009a64 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a6c:	d14b      	bne.n	8009b06 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d002      	beq.n	8009a7c <HAL_SPI_Transmit+0xf6>
 8009a76:	8afb      	ldrh	r3, [r7, #22]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d13e      	bne.n	8009afa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a80:	881a      	ldrh	r2, [r3, #0]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8c:	1c9a      	adds	r2, r3, #2
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009aa0:	e02b      	b.n	8009afa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f003 0302 	and.w	r3, r3, #2
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d112      	bne.n	8009ad6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab4:	881a      	ldrh	r2, [r3, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac0:	1c9a      	adds	r2, r3, #2
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	3b01      	subs	r3, #1
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	86da      	strh	r2, [r3, #54]	; 0x36
 8009ad4:	e011      	b.n	8009afa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ad6:	f7fb fc89 	bl	80053ec <HAL_GetTick>
 8009ada:	4602      	mov	r2, r0
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	683a      	ldr	r2, [r7, #0]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d803      	bhi.n	8009aee <HAL_SPI_Transmit+0x168>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aec:	d102      	bne.n	8009af4 <HAL_SPI_Transmit+0x16e>
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d102      	bne.n	8009afa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009af8:	e074      	b.n	8009be4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1ce      	bne.n	8009aa2 <HAL_SPI_Transmit+0x11c>
 8009b04:	e04c      	b.n	8009ba0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d002      	beq.n	8009b14 <HAL_SPI_Transmit+0x18e>
 8009b0e:	8afb      	ldrh	r3, [r7, #22]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d140      	bne.n	8009b96 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	330c      	adds	r3, #12
 8009b1e:	7812      	ldrb	r2, [r2, #0]
 8009b20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	3b01      	subs	r3, #1
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009b3a:	e02c      	b.n	8009b96 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f003 0302 	and.w	r3, r3, #2
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d113      	bne.n	8009b72 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	330c      	adds	r3, #12
 8009b54:	7812      	ldrb	r2, [r2, #0]
 8009b56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5c:	1c5a      	adds	r2, r3, #1
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009b70:	e011      	b.n	8009b96 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b72:	f7fb fc3b 	bl	80053ec <HAL_GetTick>
 8009b76:	4602      	mov	r2, r0
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d803      	bhi.n	8009b8a <HAL_SPI_Transmit+0x204>
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b88:	d102      	bne.n	8009b90 <HAL_SPI_Transmit+0x20a>
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d102      	bne.n	8009b96 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009b90:	2303      	movs	r3, #3
 8009b92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009b94:	e026      	b.n	8009be4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1cd      	bne.n	8009b3c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ba0:	69ba      	ldr	r2, [r7, #24]
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f000 fdcd 	bl	800a744 <SPI_EndRxTxTransaction>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d002      	beq.n	8009bb6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2220      	movs	r2, #32
 8009bb4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10a      	bne.n	8009bd4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	613b      	str	r3, [r7, #16]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	613b      	str	r3, [r7, #16]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	613b      	str	r3, [r7, #16]
 8009bd2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	77fb      	strb	r3, [r7, #31]
 8009be0:	e000      	b.n	8009be4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009be2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009bf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3720      	adds	r7, #32
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b088      	sub	sp, #32
 8009c02:	af02      	add	r7, sp, #8
 8009c04:	60f8      	str	r0, [r7, #12]
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	603b      	str	r3, [r7, #0]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c1a:	d112      	bne.n	8009c42 <HAL_SPI_Receive+0x44>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10e      	bne.n	8009c42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2204      	movs	r2, #4
 8009c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009c2c:	88fa      	ldrh	r2, [r7, #6]
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	4613      	mov	r3, r2
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	68b9      	ldr	r1, [r7, #8]
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 f8f1 	bl	8009e20 <HAL_SPI_TransmitReceive>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	e0ea      	b.n	8009e18 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d101      	bne.n	8009c50 <HAL_SPI_Receive+0x52>
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	e0e3      	b.n	8009e18 <HAL_SPI_Receive+0x21a>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c58:	f7fb fbc8 	bl	80053ec <HAL_GetTick>
 8009c5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d002      	beq.n	8009c70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009c6a:	2302      	movs	r3, #2
 8009c6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009c6e:	e0ca      	b.n	8009e06 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d002      	beq.n	8009c7c <HAL_SPI_Receive+0x7e>
 8009c76:	88fb      	ldrh	r3, [r7, #6]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d102      	bne.n	8009c82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009c80:	e0c1      	b.n	8009e06 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2204      	movs	r2, #4
 8009c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	88fa      	ldrh	r2, [r7, #6]
 8009c9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	88fa      	ldrh	r2, [r7, #6]
 8009ca0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cc8:	d10f      	bne.n	8009cea <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ce8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf4:	2b40      	cmp	r3, #64	; 0x40
 8009cf6:	d007      	beq.n	8009d08 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d06:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d162      	bne.n	8009dd6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009d10:	e02e      	b.n	8009d70 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	f003 0301 	and.w	r3, r3, #1
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d115      	bne.n	8009d4c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f103 020c 	add.w	r2, r3, #12
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2c:	7812      	ldrb	r2, [r2, #0]
 8009d2e:	b2d2      	uxtb	r2, r2
 8009d30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	3b01      	subs	r3, #1
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009d4a:	e011      	b.n	8009d70 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d4c:	f7fb fb4e 	bl	80053ec <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d803      	bhi.n	8009d64 <HAL_SPI_Receive+0x166>
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d62:	d102      	bne.n	8009d6a <HAL_SPI_Receive+0x16c>
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d102      	bne.n	8009d70 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009d6e:	e04a      	b.n	8009e06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1cb      	bne.n	8009d12 <HAL_SPI_Receive+0x114>
 8009d7a:	e031      	b.n	8009de0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	f003 0301 	and.w	r3, r3, #1
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d113      	bne.n	8009db2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68da      	ldr	r2, [r3, #12]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d94:	b292      	uxth	r2, r2
 8009d96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9c:	1c9a      	adds	r2, r3, #2
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	3b01      	subs	r3, #1
 8009daa:	b29a      	uxth	r2, r3
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009db0:	e011      	b.n	8009dd6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009db2:	f7fb fb1b 	bl	80053ec <HAL_GetTick>
 8009db6:	4602      	mov	r2, r0
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	683a      	ldr	r2, [r7, #0]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d803      	bhi.n	8009dca <HAL_SPI_Receive+0x1cc>
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc8:	d102      	bne.n	8009dd0 <HAL_SPI_Receive+0x1d2>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d102      	bne.n	8009dd6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009dd4:	e017      	b.n	8009e06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1cd      	bne.n	8009d7c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f000 fc47 	bl	800a678 <SPI_EndRxTransaction>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2220      	movs	r2, #32
 8009df4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	75fb      	strb	r3, [r7, #23]
 8009e02:	e000      	b.n	8009e06 <HAL_SPI_Receive+0x208>
  }

error :
 8009e04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3718      	adds	r7, #24
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08c      	sub	sp, #48	; 0x30
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d101      	bne.n	8009e46 <HAL_SPI_TransmitReceive+0x26>
 8009e42:	2302      	movs	r3, #2
 8009e44:	e18a      	b.n	800a15c <HAL_SPI_TransmitReceive+0x33c>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e4e:	f7fb facd 	bl	80053ec <HAL_GetTick>
 8009e52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009e64:	887b      	ldrh	r3, [r7, #2]
 8009e66:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d00f      	beq.n	8009e90 <HAL_SPI_TransmitReceive+0x70>
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e76:	d107      	bne.n	8009e88 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d103      	bne.n	8009e88 <HAL_SPI_TransmitReceive+0x68>
 8009e80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e84:	2b04      	cmp	r3, #4
 8009e86:	d003      	beq.n	8009e90 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009e88:	2302      	movs	r3, #2
 8009e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009e8e:	e15b      	b.n	800a148 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d005      	beq.n	8009ea2 <HAL_SPI_TransmitReceive+0x82>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <HAL_SPI_TransmitReceive+0x82>
 8009e9c:	887b      	ldrh	r3, [r7, #2]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d103      	bne.n	8009eaa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009ea8:	e14e      	b.n	800a148 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	2b04      	cmp	r3, #4
 8009eb4:	d003      	beq.n	8009ebe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2205      	movs	r2, #5
 8009eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	887a      	ldrh	r2, [r7, #2]
 8009ece:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	887a      	ldrh	r2, [r7, #2]
 8009ed4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	887a      	ldrh	r2, [r7, #2]
 8009ee0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	887a      	ldrh	r2, [r7, #2]
 8009ee6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009efe:	2b40      	cmp	r3, #64	; 0x40
 8009f00:	d007      	beq.n	8009f12 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f1a:	d178      	bne.n	800a00e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <HAL_SPI_TransmitReceive+0x10a>
 8009f24:	8b7b      	ldrh	r3, [r7, #26]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d166      	bne.n	8009ff8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f2e:	881a      	ldrh	r2, [r3, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3a:	1c9a      	adds	r2, r3, #2
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	3b01      	subs	r3, #1
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f4e:	e053      	b.n	8009ff8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f003 0302 	and.w	r3, r3, #2
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d11b      	bne.n	8009f96 <HAL_SPI_TransmitReceive+0x176>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d016      	beq.n	8009f96 <HAL_SPI_TransmitReceive+0x176>
 8009f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d113      	bne.n	8009f96 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f72:	881a      	ldrh	r2, [r3, #0]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7e:	1c9a      	adds	r2, r3, #2
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f92:	2300      	movs	r3, #0
 8009f94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	f003 0301 	and.w	r3, r3, #1
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d119      	bne.n	8009fd8 <HAL_SPI_TransmitReceive+0x1b8>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d014      	beq.n	8009fd8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68da      	ldr	r2, [r3, #12]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb8:	b292      	uxth	r2, r2
 8009fba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc0:	1c9a      	adds	r2, r3, #2
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009fd8:	f7fb fa08 	bl	80053ec <HAL_GetTick>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d807      	bhi.n	8009ff8 <HAL_SPI_TransmitReceive+0x1d8>
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fee:	d003      	beq.n	8009ff8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009ff6:	e0a7      	b.n	800a148 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1a6      	bne.n	8009f50 <HAL_SPI_TransmitReceive+0x130>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a006:	b29b      	uxth	r3, r3
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1a1      	bne.n	8009f50 <HAL_SPI_TransmitReceive+0x130>
 800a00c:	e07c      	b.n	800a108 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d002      	beq.n	800a01c <HAL_SPI_TransmitReceive+0x1fc>
 800a016:	8b7b      	ldrh	r3, [r7, #26]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d16b      	bne.n	800a0f4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	330c      	adds	r3, #12
 800a026:	7812      	ldrb	r2, [r2, #0]
 800a028:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a038:	b29b      	uxth	r3, r3
 800a03a:	3b01      	subs	r3, #1
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a042:	e057      	b.n	800a0f4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	f003 0302 	and.w	r3, r3, #2
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d11c      	bne.n	800a08c <HAL_SPI_TransmitReceive+0x26c>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a056:	b29b      	uxth	r3, r3
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d017      	beq.n	800a08c <HAL_SPI_TransmitReceive+0x26c>
 800a05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d114      	bne.n	800a08c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	330c      	adds	r3, #12
 800a06c:	7812      	ldrb	r2, [r2, #0]
 800a06e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a074:	1c5a      	adds	r2, r3, #1
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a07e:	b29b      	uxth	r3, r3
 800a080:	3b01      	subs	r3, #1
 800a082:	b29a      	uxth	r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a088:	2300      	movs	r3, #0
 800a08a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	2b01      	cmp	r3, #1
 800a098:	d119      	bne.n	800a0ce <HAL_SPI_TransmitReceive+0x2ae>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d014      	beq.n	800a0ce <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68da      	ldr	r2, [r3, #12]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ae:	b2d2      	uxtb	r2, r2
 800a0b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b6:	1c5a      	adds	r2, r3, #1
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a0ce:	f7fb f98d 	bl	80053ec <HAL_GetTick>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d803      	bhi.n	800a0e6 <HAL_SPI_TransmitReceive+0x2c6>
 800a0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e4:	d102      	bne.n	800a0ec <HAL_SPI_TransmitReceive+0x2cc>
 800a0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d103      	bne.n	800a0f4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a0f2:	e029      	b.n	800a148 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1a2      	bne.n	800a044 <HAL_SPI_TransmitReceive+0x224>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a102:	b29b      	uxth	r3, r3
 800a104:	2b00      	cmp	r3, #0
 800a106:	d19d      	bne.n	800a044 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a10a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 fb19 	bl	800a744 <SPI_EndRxTxTransaction>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d006      	beq.n	800a126 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2220      	movs	r2, #32
 800a122:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a124:	e010      	b.n	800a148 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10b      	bne.n	800a146 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a12e:	2300      	movs	r3, #0
 800a130:	617b      	str	r3, [r7, #20]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	617b      	str	r3, [r7, #20]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	617b      	str	r3, [r7, #20]
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	e000      	b.n	800a148 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a146:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a158:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3730      	adds	r7, #48	; 0x30
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b086      	sub	sp, #24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
 800a170:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d101      	bne.n	800a184 <HAL_SPI_TransmitReceive_DMA+0x20>
 800a180:	2302      	movs	r3, #2
 800a182:	e0e3      	b.n	800a34c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a192:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a19a:	7dbb      	ldrb	r3, [r7, #22]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d00d      	beq.n	800a1bc <HAL_SPI_TransmitReceive_DMA+0x58>
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1a6:	d106      	bne.n	800a1b6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d102      	bne.n	800a1b6 <HAL_SPI_TransmitReceive_DMA+0x52>
 800a1b0:	7dbb      	ldrb	r3, [r7, #22]
 800a1b2:	2b04      	cmp	r3, #4
 800a1b4:	d002      	beq.n	800a1bc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a1ba:	e0c2      	b.n	800a342 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d005      	beq.n	800a1ce <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a1c8:	887b      	ldrh	r3, [r7, #2]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d102      	bne.n	800a1d4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a1d2:	e0b6      	b.n	800a342 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b04      	cmp	r3, #4
 800a1de:	d003      	beq.n	800a1e8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2205      	movs	r2, #5
 800a1e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	887a      	ldrh	r2, [r7, #2]
 800a1f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	887a      	ldrh	r2, [r7, #2]
 800a1fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	887a      	ldrh	r2, [r7, #2]
 800a20a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	887a      	ldrh	r2, [r7, #2]
 800a210:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2200      	movs	r2, #0
 800a21c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a224:	b2db      	uxtb	r3, r3
 800a226:	2b04      	cmp	r3, #4
 800a228:	d108      	bne.n	800a23c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a22e:	4a49      	ldr	r2, [pc, #292]	; (800a354 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800a230:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a236:	4a48      	ldr	r2, [pc, #288]	; (800a358 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800a238:	63da      	str	r2, [r3, #60]	; 0x3c
 800a23a:	e007      	b.n	800a24c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a240:	4a46      	ldr	r2, [pc, #280]	; (800a35c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800a242:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a248:	4a45      	ldr	r2, [pc, #276]	; (800a360 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800a24a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a250:	4a44      	ldr	r2, [pc, #272]	; (800a364 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800a252:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a258:	2200      	movs	r2, #0
 800a25a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	330c      	adds	r3, #12
 800a266:	4619      	mov	r1, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a272:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a274:	f7fb fa7a 	bl	800576c <HAL_DMA_Start_IT>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00c      	beq.n	800a298 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a282:	f043 0210 	orr.w	r2, r3, #16
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a296:	e054      	b.n	800a342 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f042 0201 	orr.w	r2, r2, #1
 800a2a6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2bc:	2200      	movs	r2, #0
 800a2be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	330c      	adds	r3, #12
 800a2d8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a2e0:	f7fb fa44 	bl	800576c <HAL_DMA_Start_IT>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00c      	beq.n	800a304 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ee:	f043 0210 	orr.w	r2, r3, #16
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a302:	e01e      	b.n	800a342 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30e:	2b40      	cmp	r3, #64	; 0x40
 800a310:	d007      	beq.n	800a322 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a320:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f042 0220 	orr.w	r2, r2, #32
 800a330:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f042 0202 	orr.w	r2, r2, #2
 800a340:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	0800a4f1 	.word	0x0800a4f1
 800a358:	0800a3b9 	.word	0x0800a3b9
 800a35c:	0800a50d 	.word	0x0800a50d
 800a360:	0800a461 	.word	0x0800a461
 800a364:	0800a529 	.word	0x0800a529

0800a368 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a398:	bf00      	nop
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a3ac:	bf00      	nop
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3c6:	f7fb f811 	bl	80053ec <HAL_GetTick>
 800a3ca:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3da:	d03b      	beq.n	800a454 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685a      	ldr	r2, [r3, #4]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f022 0220 	bic.w	r2, r2, #32
 800a3ea:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10d      	bne.n	800a410 <SPI_DMAReceiveCplt+0x58>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3fc:	d108      	bne.n	800a410 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f022 0203 	bic.w	r2, r2, #3
 800a40c:	605a      	str	r2, [r3, #4]
 800a40e:	e007      	b.n	800a420 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	685a      	ldr	r2, [r3, #4]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f022 0201 	bic.w	r2, r2, #1
 800a41e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	2164      	movs	r1, #100	; 0x64
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 f927 	bl	800a678 <SPI_EndRxTransaction>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2220      	movs	r2, #32
 800a434:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d003      	beq.n	800a454 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f7ff ffa9 	bl	800a3a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a452:	e002      	b.n	800a45a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f7ff ff87 	bl	800a368 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a46e:	f7fa ffbd 	bl	80053ec <HAL_GetTick>
 800a472:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a47e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a482:	d02f      	beq.n	800a4e4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	685a      	ldr	r2, [r3, #4]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f022 0220 	bic.w	r2, r2, #32
 800a492:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	2164      	movs	r1, #100	; 0x64
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 f953 	bl	800a744 <SPI_EndRxTxTransaction>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d005      	beq.n	800a4b0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4a8:	f043 0220 	orr.w	r2, r3, #32
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f022 0203 	bic.w	r2, r2, #3
 800a4be:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d003      	beq.n	800a4e4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f7ff ff61 	bl	800a3a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a4e2:	e002      	b.n	800a4ea <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f7f9 f863 	bl	80035b0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f7ff ff3c 	bl	800a37c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a504:	bf00      	nop
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a518:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f7ff ff38 	bl	800a390 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a520:	bf00      	nop
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a534:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f022 0203 	bic.w	r2, r2, #3
 800a544:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a54a:	f043 0210 	orr.w	r2, r3, #16
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f7ff ff22 	bl	800a3a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a560:	bf00      	nop
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b088      	sub	sp, #32
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	603b      	str	r3, [r7, #0]
 800a574:	4613      	mov	r3, r2
 800a576:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a578:	f7fa ff38 	bl	80053ec <HAL_GetTick>
 800a57c:	4602      	mov	r2, r0
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	1a9b      	subs	r3, r3, r2
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	4413      	add	r3, r2
 800a586:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a588:	f7fa ff30 	bl	80053ec <HAL_GetTick>
 800a58c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a58e:	4b39      	ldr	r3, [pc, #228]	; (800a674 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	015b      	lsls	r3, r3, #5
 800a594:	0d1b      	lsrs	r3, r3, #20
 800a596:	69fa      	ldr	r2, [r7, #28]
 800a598:	fb02 f303 	mul.w	r3, r2, r3
 800a59c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a59e:	e054      	b.n	800a64a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a6:	d050      	beq.n	800a64a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a5a8:	f7fa ff20 	bl	80053ec <HAL_GetTick>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	69fa      	ldr	r2, [r7, #28]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d902      	bls.n	800a5be <SPI_WaitFlagStateUntilTimeout+0x56>
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d13d      	bne.n	800a63a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a5cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5d6:	d111      	bne.n	800a5fc <SPI_WaitFlagStateUntilTimeout+0x94>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5e0:	d004      	beq.n	800a5ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5ea:	d107      	bne.n	800a5fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a604:	d10f      	bne.n	800a626 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a614:	601a      	str	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a624:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a636:	2303      	movs	r3, #3
 800a638:	e017      	b.n	800a66a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a640:	2300      	movs	r3, #0
 800a642:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	3b01      	subs	r3, #1
 800a648:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	689a      	ldr	r2, [r3, #8]
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	4013      	ands	r3, r2
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	429a      	cmp	r2, r3
 800a658:	bf0c      	ite	eq
 800a65a:	2301      	moveq	r3, #1
 800a65c:	2300      	movne	r3, #0
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	461a      	mov	r2, r3
 800a662:	79fb      	ldrb	r3, [r7, #7]
 800a664:	429a      	cmp	r2, r3
 800a666:	d19b      	bne.n	800a5a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3720      	adds	r7, #32
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	2000000c 	.word	0x2000000c

0800a678 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af02      	add	r7, sp, #8
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a68c:	d111      	bne.n	800a6b2 <SPI_EndRxTransaction+0x3a>
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a696:	d004      	beq.n	800a6a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6a0:	d107      	bne.n	800a6b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6ba:	d12a      	bne.n	800a712 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6c4:	d012      	beq.n	800a6ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	2180      	movs	r1, #128	; 0x80
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f7ff ff49 	bl	800a568 <SPI_WaitFlagStateUntilTimeout>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d02d      	beq.n	800a738 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6e0:	f043 0220 	orr.w	r2, r3, #32
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a6e8:	2303      	movs	r3, #3
 800a6ea:	e026      	b.n	800a73a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7ff ff36 	bl	800a568 <SPI_WaitFlagStateUntilTimeout>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d01a      	beq.n	800a738 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a706:	f043 0220 	orr.w	r2, r3, #32
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a70e:	2303      	movs	r3, #3
 800a710:	e013      	b.n	800a73a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	2200      	movs	r2, #0
 800a71a:	2101      	movs	r1, #1
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f7ff ff23 	bl	800a568 <SPI_WaitFlagStateUntilTimeout>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d007      	beq.n	800a738 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a72c:	f043 0220 	orr.w	r2, r3, #32
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a734:	2303      	movs	r3, #3
 800a736:	e000      	b.n	800a73a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
	...

0800a744 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b088      	sub	sp, #32
 800a748:	af02      	add	r7, sp, #8
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a750:	4b1b      	ldr	r3, [pc, #108]	; (800a7c0 <SPI_EndRxTxTransaction+0x7c>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a1b      	ldr	r2, [pc, #108]	; (800a7c4 <SPI_EndRxTxTransaction+0x80>)
 800a756:	fba2 2303 	umull	r2, r3, r2, r3
 800a75a:	0d5b      	lsrs	r3, r3, #21
 800a75c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a760:	fb02 f303 	mul.w	r3, r2, r3
 800a764:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a76e:	d112      	bne.n	800a796 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	2200      	movs	r2, #0
 800a778:	2180      	movs	r1, #128	; 0x80
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f7ff fef4 	bl	800a568 <SPI_WaitFlagStateUntilTimeout>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d016      	beq.n	800a7b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a78a:	f043 0220 	orr.w	r2, r3, #32
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a792:	2303      	movs	r3, #3
 800a794:	e00f      	b.n	800a7b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00a      	beq.n	800a7b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ac:	2b80      	cmp	r3, #128	; 0x80
 800a7ae:	d0f2      	beq.n	800a796 <SPI_EndRxTxTransaction+0x52>
 800a7b0:	e000      	b.n	800a7b4 <SPI_EndRxTxTransaction+0x70>
        break;
 800a7b2:	bf00      	nop
  }

  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	2000000c 	.word	0x2000000c
 800a7c4:	165e9f81 	.word	0x165e9f81

0800a7c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d101      	bne.n	800a7da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e041      	b.n	800a85e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d106      	bne.n	800a7f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7fa fc04 	bl	8004ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3304      	adds	r3, #4
 800a804:	4619      	mov	r1, r3
 800a806:	4610      	mov	r0, r2
 800a808:	f000 fcae 	bl	800b168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
	...

0800a868 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a876:	b2db      	uxtb	r3, r3
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d001      	beq.n	800a880 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	e03c      	b.n	800a8fa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2202      	movs	r2, #2
 800a884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a1e      	ldr	r2, [pc, #120]	; (800a908 <HAL_TIM_Base_Start+0xa0>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d018      	beq.n	800a8c4 <HAL_TIM_Base_Start+0x5c>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a89a:	d013      	beq.n	800a8c4 <HAL_TIM_Base_Start+0x5c>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a1a      	ldr	r2, [pc, #104]	; (800a90c <HAL_TIM_Base_Start+0xa4>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d00e      	beq.n	800a8c4 <HAL_TIM_Base_Start+0x5c>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a19      	ldr	r2, [pc, #100]	; (800a910 <HAL_TIM_Base_Start+0xa8>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d009      	beq.n	800a8c4 <HAL_TIM_Base_Start+0x5c>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a17      	ldr	r2, [pc, #92]	; (800a914 <HAL_TIM_Base_Start+0xac>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d004      	beq.n	800a8c4 <HAL_TIM_Base_Start+0x5c>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a16      	ldr	r2, [pc, #88]	; (800a918 <HAL_TIM_Base_Start+0xb0>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d111      	bne.n	800a8e8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	f003 0307 	and.w	r3, r3, #7
 800a8ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2b06      	cmp	r3, #6
 800a8d4:	d010      	beq.n	800a8f8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f042 0201 	orr.w	r2, r2, #1
 800a8e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8e6:	e007      	b.n	800a8f8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f042 0201 	orr.w	r2, r2, #1
 800a8f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3714      	adds	r7, #20
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	40010000 	.word	0x40010000
 800a90c:	40000400 	.word	0x40000400
 800a910:	40000800 	.word	0x40000800
 800a914:	40000c00 	.word	0x40000c00
 800a918:	40014000 	.word	0x40014000

0800a91c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d001      	beq.n	800a934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	e044      	b.n	800a9be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2202      	movs	r2, #2
 800a938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68da      	ldr	r2, [r3, #12]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f042 0201 	orr.w	r2, r2, #1
 800a94a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a1e      	ldr	r2, [pc, #120]	; (800a9cc <HAL_TIM_Base_Start_IT+0xb0>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d018      	beq.n	800a988 <HAL_TIM_Base_Start_IT+0x6c>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a95e:	d013      	beq.n	800a988 <HAL_TIM_Base_Start_IT+0x6c>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a1a      	ldr	r2, [pc, #104]	; (800a9d0 <HAL_TIM_Base_Start_IT+0xb4>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d00e      	beq.n	800a988 <HAL_TIM_Base_Start_IT+0x6c>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a19      	ldr	r2, [pc, #100]	; (800a9d4 <HAL_TIM_Base_Start_IT+0xb8>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d009      	beq.n	800a988 <HAL_TIM_Base_Start_IT+0x6c>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a17      	ldr	r2, [pc, #92]	; (800a9d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d004      	beq.n	800a988 <HAL_TIM_Base_Start_IT+0x6c>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a16      	ldr	r2, [pc, #88]	; (800a9dc <HAL_TIM_Base_Start_IT+0xc0>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d111      	bne.n	800a9ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	f003 0307 	and.w	r3, r3, #7
 800a992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2b06      	cmp	r3, #6
 800a998:	d010      	beq.n	800a9bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f042 0201 	orr.w	r2, r2, #1
 800a9a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9aa:	e007      	b.n	800a9bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f042 0201 	orr.w	r2, r2, #1
 800a9ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	40010000 	.word	0x40010000
 800a9d0:	40000400 	.word	0x40000400
 800a9d4:	40000800 	.word	0x40000800
 800a9d8:	40000c00 	.word	0x40000c00
 800a9dc:	40014000 	.word	0x40014000

0800a9e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e041      	b.n	800aa76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d106      	bne.n	800aa0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f839 	bl	800aa7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2202      	movs	r2, #2
 800aa10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4610      	mov	r0, r2
 800aa20:	f000 fba2 	bl	800b168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aa7e:	b480      	push	{r7}
 800aa80:	b083      	sub	sp, #12
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aa86:	bf00      	nop
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
	...

0800aa94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d109      	bne.n	800aab8 <HAL_TIM_PWM_Start+0x24>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	bf14      	ite	ne
 800aab0:	2301      	movne	r3, #1
 800aab2:	2300      	moveq	r3, #0
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	e022      	b.n	800aafe <HAL_TIM_PWM_Start+0x6a>
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	2b04      	cmp	r3, #4
 800aabc:	d109      	bne.n	800aad2 <HAL_TIM_PWM_Start+0x3e>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	bf14      	ite	ne
 800aaca:	2301      	movne	r3, #1
 800aacc:	2300      	moveq	r3, #0
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	e015      	b.n	800aafe <HAL_TIM_PWM_Start+0x6a>
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	2b08      	cmp	r3, #8
 800aad6:	d109      	bne.n	800aaec <HAL_TIM_PWM_Start+0x58>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	bf14      	ite	ne
 800aae4:	2301      	movne	r3, #1
 800aae6:	2300      	moveq	r3, #0
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	e008      	b.n	800aafe <HAL_TIM_PWM_Start+0x6a>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	bf14      	ite	ne
 800aaf8:	2301      	movne	r3, #1
 800aafa:	2300      	moveq	r3, #0
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d001      	beq.n	800ab06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e068      	b.n	800abd8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d104      	bne.n	800ab16 <HAL_TIM_PWM_Start+0x82>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab14:	e013      	b.n	800ab3e <HAL_TIM_PWM_Start+0xaa>
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	d104      	bne.n	800ab26 <HAL_TIM_PWM_Start+0x92>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2202      	movs	r2, #2
 800ab20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab24:	e00b      	b.n	800ab3e <HAL_TIM_PWM_Start+0xaa>
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b08      	cmp	r3, #8
 800ab2a:	d104      	bne.n	800ab36 <HAL_TIM_PWM_Start+0xa2>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2202      	movs	r2, #2
 800ab30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab34:	e003      	b.n	800ab3e <HAL_TIM_PWM_Start+0xaa>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2202      	movs	r2, #2
 800ab3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2201      	movs	r2, #1
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 fdb4 	bl	800b6b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a23      	ldr	r2, [pc, #140]	; (800abe0 <HAL_TIM_PWM_Start+0x14c>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d107      	bne.n	800ab66 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a1d      	ldr	r2, [pc, #116]	; (800abe0 <HAL_TIM_PWM_Start+0x14c>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d018      	beq.n	800aba2 <HAL_TIM_PWM_Start+0x10e>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab78:	d013      	beq.n	800aba2 <HAL_TIM_PWM_Start+0x10e>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a19      	ldr	r2, [pc, #100]	; (800abe4 <HAL_TIM_PWM_Start+0x150>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d00e      	beq.n	800aba2 <HAL_TIM_PWM_Start+0x10e>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a17      	ldr	r2, [pc, #92]	; (800abe8 <HAL_TIM_PWM_Start+0x154>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d009      	beq.n	800aba2 <HAL_TIM_PWM_Start+0x10e>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a16      	ldr	r2, [pc, #88]	; (800abec <HAL_TIM_PWM_Start+0x158>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d004      	beq.n	800aba2 <HAL_TIM_PWM_Start+0x10e>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a14      	ldr	r2, [pc, #80]	; (800abf0 <HAL_TIM_PWM_Start+0x15c>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d111      	bne.n	800abc6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	f003 0307 	and.w	r3, r3, #7
 800abac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2b06      	cmp	r3, #6
 800abb2:	d010      	beq.n	800abd6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f042 0201 	orr.w	r2, r2, #1
 800abc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abc4:	e007      	b.n	800abd6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f042 0201 	orr.w	r2, r2, #1
 800abd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	40010000 	.word	0x40010000
 800abe4:	40000400 	.word	0x40000400
 800abe8:	40000800 	.word	0x40000800
 800abec:	40000c00 	.word	0x40000c00
 800abf0:	40014000 	.word	0x40014000

0800abf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	f003 0302 	and.w	r3, r3, #2
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d122      	bne.n	800ac50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	f003 0302 	and.w	r3, r3, #2
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d11b      	bne.n	800ac50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f06f 0202 	mvn.w	r2, #2
 800ac20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2201      	movs	r2, #1
 800ac26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	699b      	ldr	r3, [r3, #24]
 800ac2e:	f003 0303 	and.w	r3, r3, #3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 fa77 	bl	800b12a <HAL_TIM_IC_CaptureCallback>
 800ac3c:	e005      	b.n	800ac4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 fa69 	bl	800b116 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fa7a 	bl	800b13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	f003 0304 	and.w	r3, r3, #4
 800ac5a:	2b04      	cmp	r3, #4
 800ac5c:	d122      	bne.n	800aca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	f003 0304 	and.w	r3, r3, #4
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	d11b      	bne.n	800aca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f06f 0204 	mvn.w	r2, #4
 800ac74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2202      	movs	r2, #2
 800ac7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	699b      	ldr	r3, [r3, #24]
 800ac82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d003      	beq.n	800ac92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fa4d 	bl	800b12a <HAL_TIM_IC_CaptureCallback>
 800ac90:	e005      	b.n	800ac9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fa3f 	bl	800b116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fa50 	bl	800b13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	f003 0308 	and.w	r3, r3, #8
 800acae:	2b08      	cmp	r3, #8
 800acb0:	d122      	bne.n	800acf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	f003 0308 	and.w	r3, r3, #8
 800acbc:	2b08      	cmp	r3, #8
 800acbe:	d11b      	bne.n	800acf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f06f 0208 	mvn.w	r2, #8
 800acc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2204      	movs	r2, #4
 800acce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	69db      	ldr	r3, [r3, #28]
 800acd6:	f003 0303 	and.w	r3, r3, #3
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d003      	beq.n	800ace6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fa23 	bl	800b12a <HAL_TIM_IC_CaptureCallback>
 800ace4:	e005      	b.n	800acf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fa15 	bl	800b116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fa26 	bl	800b13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	f003 0310 	and.w	r3, r3, #16
 800ad02:	2b10      	cmp	r3, #16
 800ad04:	d122      	bne.n	800ad4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	f003 0310 	and.w	r3, r3, #16
 800ad10:	2b10      	cmp	r3, #16
 800ad12:	d11b      	bne.n	800ad4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f06f 0210 	mvn.w	r2, #16
 800ad1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2208      	movs	r2, #8
 800ad22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	69db      	ldr	r3, [r3, #28]
 800ad2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d003      	beq.n	800ad3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 f9f9 	bl	800b12a <HAL_TIM_IC_CaptureCallback>
 800ad38:	e005      	b.n	800ad46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 f9eb 	bl	800b116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f9fc 	bl	800b13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	f003 0301 	and.w	r3, r3, #1
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d10e      	bne.n	800ad78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	f003 0301 	and.w	r3, r3, #1
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d107      	bne.n	800ad78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f06f 0201 	mvn.w	r2, #1
 800ad70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7f9 f89e 	bl	8003eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad82:	2b80      	cmp	r3, #128	; 0x80
 800ad84:	d10e      	bne.n	800ada4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad90:	2b80      	cmp	r3, #128	; 0x80
 800ad92:	d107      	bne.n	800ada4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fd26 	bl	800b7f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adae:	2b40      	cmp	r3, #64	; 0x40
 800adb0:	d10e      	bne.n	800add0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adbc:	2b40      	cmp	r3, #64	; 0x40
 800adbe:	d107      	bne.n	800add0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800adc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f9c1 	bl	800b152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	f003 0320 	and.w	r3, r3, #32
 800adda:	2b20      	cmp	r3, #32
 800addc:	d10e      	bne.n	800adfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	f003 0320 	and.w	r3, r3, #32
 800ade8:	2b20      	cmp	r3, #32
 800adea:	d107      	bne.n	800adfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f06f 0220 	mvn.w	r2, #32
 800adf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 fcf0 	bl	800b7dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800adfc:	bf00      	nop
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae10:	2300      	movs	r3, #0
 800ae12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d101      	bne.n	800ae22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae1e:	2302      	movs	r3, #2
 800ae20:	e0ae      	b.n	800af80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2b0c      	cmp	r3, #12
 800ae2e:	f200 809f 	bhi.w	800af70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ae32:	a201      	add	r2, pc, #4	; (adr r2, 800ae38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae38:	0800ae6d 	.word	0x0800ae6d
 800ae3c:	0800af71 	.word	0x0800af71
 800ae40:	0800af71 	.word	0x0800af71
 800ae44:	0800af71 	.word	0x0800af71
 800ae48:	0800aead 	.word	0x0800aead
 800ae4c:	0800af71 	.word	0x0800af71
 800ae50:	0800af71 	.word	0x0800af71
 800ae54:	0800af71 	.word	0x0800af71
 800ae58:	0800aeef 	.word	0x0800aeef
 800ae5c:	0800af71 	.word	0x0800af71
 800ae60:	0800af71 	.word	0x0800af71
 800ae64:	0800af71 	.word	0x0800af71
 800ae68:	0800af2f 	.word	0x0800af2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68b9      	ldr	r1, [r7, #8]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f000 f9f8 	bl	800b268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	699a      	ldr	r2, [r3, #24]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f042 0208 	orr.w	r2, r2, #8
 800ae86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	699a      	ldr	r2, [r3, #24]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f022 0204 	bic.w	r2, r2, #4
 800ae96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	6999      	ldr	r1, [r3, #24]
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	691a      	ldr	r2, [r3, #16]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	430a      	orrs	r2, r1
 800aea8:	619a      	str	r2, [r3, #24]
      break;
 800aeaa:	e064      	b.n	800af76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	68b9      	ldr	r1, [r7, #8]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 fa3e 	bl	800b334 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	699a      	ldr	r2, [r3, #24]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	699a      	ldr	r2, [r3, #24]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6999      	ldr	r1, [r3, #24]
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	021a      	lsls	r2, r3, #8
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	430a      	orrs	r2, r1
 800aeea:	619a      	str	r2, [r3, #24]
      break;
 800aeec:	e043      	b.n	800af76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68b9      	ldr	r1, [r7, #8]
 800aef4:	4618      	mov	r0, r3
 800aef6:	f000 fa89 	bl	800b40c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	69da      	ldr	r2, [r3, #28]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f042 0208 	orr.w	r2, r2, #8
 800af08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	69da      	ldr	r2, [r3, #28]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f022 0204 	bic.w	r2, r2, #4
 800af18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	69d9      	ldr	r1, [r3, #28]
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	691a      	ldr	r2, [r3, #16]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	430a      	orrs	r2, r1
 800af2a:	61da      	str	r2, [r3, #28]
      break;
 800af2c:	e023      	b.n	800af76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68b9      	ldr	r1, [r7, #8]
 800af34:	4618      	mov	r0, r3
 800af36:	f000 fad3 	bl	800b4e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	69da      	ldr	r2, [r3, #28]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	69da      	ldr	r2, [r3, #28]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	69d9      	ldr	r1, [r3, #28]
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	021a      	lsls	r2, r3, #8
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	430a      	orrs	r2, r1
 800af6c:	61da      	str	r2, [r3, #28]
      break;
 800af6e:	e002      	b.n	800af76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	75fb      	strb	r3, [r7, #23]
      break;
 800af74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800af7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3718      	adds	r7, #24
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af92:	2300      	movs	r3, #0
 800af94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d101      	bne.n	800afa4 <HAL_TIM_ConfigClockSource+0x1c>
 800afa0:	2302      	movs	r3, #2
 800afa2:	e0b4      	b.n	800b10e <HAL_TIM_ConfigClockSource+0x186>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2202      	movs	r2, #2
 800afb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800afc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afdc:	d03e      	beq.n	800b05c <HAL_TIM_ConfigClockSource+0xd4>
 800afde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afe2:	f200 8087 	bhi.w	800b0f4 <HAL_TIM_ConfigClockSource+0x16c>
 800afe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afea:	f000 8086 	beq.w	800b0fa <HAL_TIM_ConfigClockSource+0x172>
 800afee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aff2:	d87f      	bhi.n	800b0f4 <HAL_TIM_ConfigClockSource+0x16c>
 800aff4:	2b70      	cmp	r3, #112	; 0x70
 800aff6:	d01a      	beq.n	800b02e <HAL_TIM_ConfigClockSource+0xa6>
 800aff8:	2b70      	cmp	r3, #112	; 0x70
 800affa:	d87b      	bhi.n	800b0f4 <HAL_TIM_ConfigClockSource+0x16c>
 800affc:	2b60      	cmp	r3, #96	; 0x60
 800affe:	d050      	beq.n	800b0a2 <HAL_TIM_ConfigClockSource+0x11a>
 800b000:	2b60      	cmp	r3, #96	; 0x60
 800b002:	d877      	bhi.n	800b0f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b004:	2b50      	cmp	r3, #80	; 0x50
 800b006:	d03c      	beq.n	800b082 <HAL_TIM_ConfigClockSource+0xfa>
 800b008:	2b50      	cmp	r3, #80	; 0x50
 800b00a:	d873      	bhi.n	800b0f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b00c:	2b40      	cmp	r3, #64	; 0x40
 800b00e:	d058      	beq.n	800b0c2 <HAL_TIM_ConfigClockSource+0x13a>
 800b010:	2b40      	cmp	r3, #64	; 0x40
 800b012:	d86f      	bhi.n	800b0f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b014:	2b30      	cmp	r3, #48	; 0x30
 800b016:	d064      	beq.n	800b0e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b018:	2b30      	cmp	r3, #48	; 0x30
 800b01a:	d86b      	bhi.n	800b0f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b01c:	2b20      	cmp	r3, #32
 800b01e:	d060      	beq.n	800b0e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b020:	2b20      	cmp	r3, #32
 800b022:	d867      	bhi.n	800b0f4 <HAL_TIM_ConfigClockSource+0x16c>
 800b024:	2b00      	cmp	r3, #0
 800b026:	d05c      	beq.n	800b0e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b028:	2b10      	cmp	r3, #16
 800b02a:	d05a      	beq.n	800b0e2 <HAL_TIM_ConfigClockSource+0x15a>
 800b02c:	e062      	b.n	800b0f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6818      	ldr	r0, [r3, #0]
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	6899      	ldr	r1, [r3, #8]
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	f000 fb19 	bl	800b674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b050:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	68ba      	ldr	r2, [r7, #8]
 800b058:	609a      	str	r2, [r3, #8]
      break;
 800b05a:	e04f      	b.n	800b0fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6818      	ldr	r0, [r3, #0]
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	6899      	ldr	r1, [r3, #8]
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	685a      	ldr	r2, [r3, #4]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	f000 fb02 	bl	800b674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	689a      	ldr	r2, [r3, #8]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b07e:	609a      	str	r2, [r3, #8]
      break;
 800b080:	e03c      	b.n	800b0fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	6859      	ldr	r1, [r3, #4]
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	461a      	mov	r2, r3
 800b090:	f000 fa76 	bl	800b580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2150      	movs	r1, #80	; 0x50
 800b09a:	4618      	mov	r0, r3
 800b09c:	f000 facf 	bl	800b63e <TIM_ITRx_SetConfig>
      break;
 800b0a0:	e02c      	b.n	800b0fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6818      	ldr	r0, [r3, #0]
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	6859      	ldr	r1, [r3, #4]
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	f000 fa95 	bl	800b5de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2160      	movs	r1, #96	; 0x60
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f000 fabf 	bl	800b63e <TIM_ITRx_SetConfig>
      break;
 800b0c0:	e01c      	b.n	800b0fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6818      	ldr	r0, [r3, #0]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	6859      	ldr	r1, [r3, #4]
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	f000 fa56 	bl	800b580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2140      	movs	r1, #64	; 0x40
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 faaf 	bl	800b63e <TIM_ITRx_SetConfig>
      break;
 800b0e0:	e00c      	b.n	800b0fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	4610      	mov	r0, r2
 800b0ee:	f000 faa6 	bl	800b63e <TIM_ITRx_SetConfig>
      break;
 800b0f2:	e003      	b.n	800b0fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b0f8:	e000      	b.n	800b0fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b0fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b116:	b480      	push	{r7}
 800b118:	b083      	sub	sp, #12
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b11e:	bf00      	nop
 800b120:	370c      	adds	r7, #12
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b12a:	b480      	push	{r7}
 800b12c:	b083      	sub	sp, #12
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b132:	bf00      	nop
 800b134:	370c      	adds	r7, #12
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b13e:	b480      	push	{r7}
 800b140:	b083      	sub	sp, #12
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b146:	bf00      	nop
 800b148:	370c      	adds	r7, #12
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b152:	b480      	push	{r7}
 800b154:	b083      	sub	sp, #12
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b15a:	bf00      	nop
 800b15c:	370c      	adds	r7, #12
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
	...

0800b168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b168:	b480      	push	{r7}
 800b16a:	b085      	sub	sp, #20
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a34      	ldr	r2, [pc, #208]	; (800b24c <TIM_Base_SetConfig+0xe4>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d00f      	beq.n	800b1a0 <TIM_Base_SetConfig+0x38>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b186:	d00b      	beq.n	800b1a0 <TIM_Base_SetConfig+0x38>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4a31      	ldr	r2, [pc, #196]	; (800b250 <TIM_Base_SetConfig+0xe8>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d007      	beq.n	800b1a0 <TIM_Base_SetConfig+0x38>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4a30      	ldr	r2, [pc, #192]	; (800b254 <TIM_Base_SetConfig+0xec>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d003      	beq.n	800b1a0 <TIM_Base_SetConfig+0x38>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4a2f      	ldr	r2, [pc, #188]	; (800b258 <TIM_Base_SetConfig+0xf0>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d108      	bne.n	800b1b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4a25      	ldr	r2, [pc, #148]	; (800b24c <TIM_Base_SetConfig+0xe4>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d01b      	beq.n	800b1f2 <TIM_Base_SetConfig+0x8a>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1c0:	d017      	beq.n	800b1f2 <TIM_Base_SetConfig+0x8a>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4a22      	ldr	r2, [pc, #136]	; (800b250 <TIM_Base_SetConfig+0xe8>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d013      	beq.n	800b1f2 <TIM_Base_SetConfig+0x8a>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a21      	ldr	r2, [pc, #132]	; (800b254 <TIM_Base_SetConfig+0xec>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d00f      	beq.n	800b1f2 <TIM_Base_SetConfig+0x8a>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a20      	ldr	r2, [pc, #128]	; (800b258 <TIM_Base_SetConfig+0xf0>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d00b      	beq.n	800b1f2 <TIM_Base_SetConfig+0x8a>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a1f      	ldr	r2, [pc, #124]	; (800b25c <TIM_Base_SetConfig+0xf4>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d007      	beq.n	800b1f2 <TIM_Base_SetConfig+0x8a>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a1e      	ldr	r2, [pc, #120]	; (800b260 <TIM_Base_SetConfig+0xf8>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d003      	beq.n	800b1f2 <TIM_Base_SetConfig+0x8a>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a1d      	ldr	r2, [pc, #116]	; (800b264 <TIM_Base_SetConfig+0xfc>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d108      	bne.n	800b204 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	4313      	orrs	r3, r2
 800b202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	695b      	ldr	r3, [r3, #20]
 800b20e:	4313      	orrs	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	689a      	ldr	r2, [r3, #8]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a08      	ldr	r2, [pc, #32]	; (800b24c <TIM_Base_SetConfig+0xe4>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d103      	bne.n	800b238 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	691a      	ldr	r2, [r3, #16]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	615a      	str	r2, [r3, #20]
}
 800b23e:	bf00      	nop
 800b240:	3714      	adds	r7, #20
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	40010000 	.word	0x40010000
 800b250:	40000400 	.word	0x40000400
 800b254:	40000800 	.word	0x40000800
 800b258:	40000c00 	.word	0x40000c00
 800b25c:	40014000 	.word	0x40014000
 800b260:	40014400 	.word	0x40014400
 800b264:	40014800 	.word	0x40014800

0800b268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b268:	b480      	push	{r7}
 800b26a:	b087      	sub	sp, #28
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a1b      	ldr	r3, [r3, #32]
 800b276:	f023 0201 	bic.w	r2, r3, #1
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	699b      	ldr	r3, [r3, #24]
 800b28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f023 0303 	bic.w	r3, r3, #3
 800b29e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	f023 0302 	bic.w	r3, r3, #2
 800b2b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	4a1c      	ldr	r2, [pc, #112]	; (800b330 <TIM_OC1_SetConfig+0xc8>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d10c      	bne.n	800b2de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	f023 0308 	bic.w	r3, r3, #8
 800b2ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f023 0304 	bic.w	r3, r3, #4
 800b2dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a13      	ldr	r2, [pc, #76]	; (800b330 <TIM_OC1_SetConfig+0xc8>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d111      	bne.n	800b30a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	693a      	ldr	r2, [r7, #16]
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	699b      	ldr	r3, [r3, #24]
 800b304:	693a      	ldr	r2, [r7, #16]
 800b306:	4313      	orrs	r3, r2
 800b308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	693a      	ldr	r2, [r7, #16]
 800b30e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	685a      	ldr	r2, [r3, #4]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	697a      	ldr	r2, [r7, #20]
 800b322:	621a      	str	r2, [r3, #32]
}
 800b324:	bf00      	nop
 800b326:	371c      	adds	r7, #28
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	40010000 	.word	0x40010000

0800b334 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b334:	b480      	push	{r7}
 800b336:	b087      	sub	sp, #28
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6a1b      	ldr	r3, [r3, #32]
 800b342:	f023 0210 	bic.w	r2, r3, #16
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	699b      	ldr	r3, [r3, #24]
 800b35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b36a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	021b      	lsls	r3, r3, #8
 800b372:	68fa      	ldr	r2, [r7, #12]
 800b374:	4313      	orrs	r3, r2
 800b376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	f023 0320 	bic.w	r3, r3, #32
 800b37e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	011b      	lsls	r3, r3, #4
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	4313      	orrs	r3, r2
 800b38a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a1e      	ldr	r2, [pc, #120]	; (800b408 <TIM_OC2_SetConfig+0xd4>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d10d      	bne.n	800b3b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b39a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	011b      	lsls	r3, r3, #4
 800b3a2:	697a      	ldr	r2, [r7, #20]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a15      	ldr	r2, [pc, #84]	; (800b408 <TIM_OC2_SetConfig+0xd4>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d113      	bne.n	800b3e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	695b      	ldr	r3, [r3, #20]
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	693a      	ldr	r2, [r7, #16]
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	693a      	ldr	r2, [r7, #16]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	693a      	ldr	r2, [r7, #16]
 800b3e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	685a      	ldr	r2, [r3, #4]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	697a      	ldr	r2, [r7, #20]
 800b3f8:	621a      	str	r2, [r3, #32]
}
 800b3fa:	bf00      	nop
 800b3fc:	371c      	adds	r7, #28
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	40010000 	.word	0x40010000

0800b40c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b087      	sub	sp, #28
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a1b      	ldr	r3, [r3, #32]
 800b426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	69db      	ldr	r3, [r3, #28]
 800b432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b43a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f023 0303 	bic.w	r3, r3, #3
 800b442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	021b      	lsls	r3, r3, #8
 800b45c:	697a      	ldr	r2, [r7, #20]
 800b45e:	4313      	orrs	r3, r2
 800b460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a1d      	ldr	r2, [pc, #116]	; (800b4dc <TIM_OC3_SetConfig+0xd0>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d10d      	bne.n	800b486 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	021b      	lsls	r3, r3, #8
 800b478:	697a      	ldr	r2, [r7, #20]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a14      	ldr	r2, [pc, #80]	; (800b4dc <TIM_OC3_SetConfig+0xd0>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d113      	bne.n	800b4b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b49c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	695b      	ldr	r3, [r3, #20]
 800b4a2:	011b      	lsls	r3, r3, #4
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	011b      	lsls	r3, r3, #4
 800b4b0:	693a      	ldr	r2, [r7, #16]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	685a      	ldr	r2, [r3, #4]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	697a      	ldr	r2, [r7, #20]
 800b4ce:	621a      	str	r2, [r3, #32]
}
 800b4d0:	bf00      	nop
 800b4d2:	371c      	adds	r7, #28
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr
 800b4dc:	40010000 	.word	0x40010000

0800b4e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b087      	sub	sp, #28
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a1b      	ldr	r3, [r3, #32]
 800b4ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	69db      	ldr	r3, [r3, #28]
 800b506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b50e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	021b      	lsls	r3, r3, #8
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	4313      	orrs	r3, r2
 800b522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b52a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	031b      	lsls	r3, r3, #12
 800b532:	693a      	ldr	r2, [r7, #16]
 800b534:	4313      	orrs	r3, r2
 800b536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a10      	ldr	r2, [pc, #64]	; (800b57c <TIM_OC4_SetConfig+0x9c>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d109      	bne.n	800b554 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	695b      	ldr	r3, [r3, #20]
 800b54c:	019b      	lsls	r3, r3, #6
 800b54e:	697a      	ldr	r2, [r7, #20]
 800b550:	4313      	orrs	r3, r2
 800b552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	685a      	ldr	r2, [r3, #4]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	693a      	ldr	r2, [r7, #16]
 800b56c:	621a      	str	r2, [r3, #32]
}
 800b56e:	bf00      	nop
 800b570:	371c      	adds	r7, #28
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	40010000 	.word	0x40010000

0800b580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b580:	b480      	push	{r7}
 800b582:	b087      	sub	sp, #28
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6a1b      	ldr	r3, [r3, #32]
 800b590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6a1b      	ldr	r3, [r3, #32]
 800b596:	f023 0201 	bic.w	r2, r3, #1
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	699b      	ldr	r3, [r3, #24]
 800b5a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	011b      	lsls	r3, r3, #4
 800b5b0:	693a      	ldr	r2, [r7, #16]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f023 030a 	bic.w	r3, r3, #10
 800b5bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	693a      	ldr	r2, [r7, #16]
 800b5ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	621a      	str	r2, [r3, #32]
}
 800b5d2:	bf00      	nop
 800b5d4:	371c      	adds	r7, #28
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr

0800b5de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5de:	b480      	push	{r7}
 800b5e0:	b087      	sub	sp, #28
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	60f8      	str	r0, [r7, #12]
 800b5e6:	60b9      	str	r1, [r7, #8]
 800b5e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	6a1b      	ldr	r3, [r3, #32]
 800b5ee:	f023 0210 	bic.w	r2, r3, #16
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	699b      	ldr	r3, [r3, #24]
 800b5fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6a1b      	ldr	r3, [r3, #32]
 800b600:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b608:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	031b      	lsls	r3, r3, #12
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	4313      	orrs	r3, r2
 800b612:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b61a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	011b      	lsls	r3, r3, #4
 800b620:	693a      	ldr	r2, [r7, #16]
 800b622:	4313      	orrs	r3, r2
 800b624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	697a      	ldr	r2, [r7, #20]
 800b62a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	693a      	ldr	r2, [r7, #16]
 800b630:	621a      	str	r2, [r3, #32]
}
 800b632:	bf00      	nop
 800b634:	371c      	adds	r7, #28
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr

0800b63e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b63e:	b480      	push	{r7}
 800b640:	b085      	sub	sp, #20
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
 800b646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	f043 0307 	orr.w	r3, r3, #7
 800b660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	609a      	str	r2, [r3, #8]
}
 800b668:	bf00      	nop
 800b66a:	3714      	adds	r7, #20
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b674:	b480      	push	{r7}
 800b676:	b087      	sub	sp, #28
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
 800b680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b68e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	021a      	lsls	r2, r3, #8
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	431a      	orrs	r2, r3
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	697a      	ldr	r2, [r7, #20]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	697a      	ldr	r2, [r7, #20]
 800b6a6:	609a      	str	r2, [r3, #8]
}
 800b6a8:	bf00      	nop
 800b6aa:	371c      	adds	r7, #28
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b087      	sub	sp, #28
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	f003 031f 	and.w	r3, r3, #31
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6a1a      	ldr	r2, [r3, #32]
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	43db      	mvns	r3, r3
 800b6d6:	401a      	ands	r2, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6a1a      	ldr	r2, [r3, #32]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	f003 031f 	and.w	r3, r3, #31
 800b6e6:	6879      	ldr	r1, [r7, #4]
 800b6e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b6ec:	431a      	orrs	r2, r3
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	621a      	str	r2, [r3, #32]
}
 800b6f2:	bf00      	nop
 800b6f4:	371c      	adds	r7, #28
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
	...

0800b700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b710:	2b01      	cmp	r3, #1
 800b712:	d101      	bne.n	800b718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b714:	2302      	movs	r3, #2
 800b716:	e050      	b.n	800b7ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2201      	movs	r2, #1
 800b71c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2202      	movs	r2, #2
 800b724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b73e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	4313      	orrs	r3, r2
 800b748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a1c      	ldr	r2, [pc, #112]	; (800b7c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d018      	beq.n	800b78e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b764:	d013      	beq.n	800b78e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a18      	ldr	r2, [pc, #96]	; (800b7cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d00e      	beq.n	800b78e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a16      	ldr	r2, [pc, #88]	; (800b7d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d009      	beq.n	800b78e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a15      	ldr	r2, [pc, #84]	; (800b7d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d004      	beq.n	800b78e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a13      	ldr	r2, [pc, #76]	; (800b7d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d10c      	bne.n	800b7a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	68ba      	ldr	r2, [r7, #8]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3714      	adds	r7, #20
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	40010000 	.word	0x40010000
 800b7cc:	40000400 	.word	0x40000400
 800b7d0:	40000800 	.word	0x40000800
 800b7d4:	40000c00 	.word	0x40000c00
 800b7d8:	40014000 	.word	0x40014000

0800b7dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b804:	b084      	sub	sp, #16
 800b806:	b580      	push	{r7, lr}
 800b808:	b084      	sub	sp, #16
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	f107 001c 	add.w	r0, r7, #28
 800b812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d122      	bne.n	800b862 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b820:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b846:	2b01      	cmp	r3, #1
 800b848:	d105      	bne.n	800b856 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f001 fb1c 	bl	800ce94 <USB_CoreReset>
 800b85c:	4603      	mov	r3, r0
 800b85e:	73fb      	strb	r3, [r7, #15]
 800b860:	e01a      	b.n	800b898 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f001 fb10 	bl	800ce94 <USB_CoreReset>
 800b874:	4603      	mov	r3, r0
 800b876:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d106      	bne.n	800b88c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b882:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	639a      	str	r2, [r3, #56]	; 0x38
 800b88a:	e005      	b.n	800b898 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b890:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d10b      	bne.n	800b8b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	f043 0206 	orr.w	r2, r3, #6
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	f043 0220 	orr.w	r2, r3, #32
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b8c2:	b004      	add	sp, #16
 800b8c4:	4770      	bx	lr
	...

0800b8c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b087      	sub	sp, #28
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b8d6:	79fb      	ldrb	r3, [r7, #7]
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d165      	bne.n	800b9a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	4a41      	ldr	r2, [pc, #260]	; (800b9e4 <USB_SetTurnaroundTime+0x11c>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d906      	bls.n	800b8f2 <USB_SetTurnaroundTime+0x2a>
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	4a40      	ldr	r2, [pc, #256]	; (800b9e8 <USB_SetTurnaroundTime+0x120>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d202      	bcs.n	800b8f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b8ec:	230f      	movs	r3, #15
 800b8ee:	617b      	str	r3, [r7, #20]
 800b8f0:	e062      	b.n	800b9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	4a3c      	ldr	r2, [pc, #240]	; (800b9e8 <USB_SetTurnaroundTime+0x120>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d306      	bcc.n	800b908 <USB_SetTurnaroundTime+0x40>
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	4a3b      	ldr	r2, [pc, #236]	; (800b9ec <USB_SetTurnaroundTime+0x124>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d202      	bcs.n	800b908 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b902:	230e      	movs	r3, #14
 800b904:	617b      	str	r3, [r7, #20]
 800b906:	e057      	b.n	800b9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	4a38      	ldr	r2, [pc, #224]	; (800b9ec <USB_SetTurnaroundTime+0x124>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d306      	bcc.n	800b91e <USB_SetTurnaroundTime+0x56>
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	4a37      	ldr	r2, [pc, #220]	; (800b9f0 <USB_SetTurnaroundTime+0x128>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d202      	bcs.n	800b91e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b918:	230d      	movs	r3, #13
 800b91a:	617b      	str	r3, [r7, #20]
 800b91c:	e04c      	b.n	800b9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	4a33      	ldr	r2, [pc, #204]	; (800b9f0 <USB_SetTurnaroundTime+0x128>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d306      	bcc.n	800b934 <USB_SetTurnaroundTime+0x6c>
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	4a32      	ldr	r2, [pc, #200]	; (800b9f4 <USB_SetTurnaroundTime+0x12c>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d802      	bhi.n	800b934 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b92e:	230c      	movs	r3, #12
 800b930:	617b      	str	r3, [r7, #20]
 800b932:	e041      	b.n	800b9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	4a2f      	ldr	r2, [pc, #188]	; (800b9f4 <USB_SetTurnaroundTime+0x12c>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d906      	bls.n	800b94a <USB_SetTurnaroundTime+0x82>
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	4a2e      	ldr	r2, [pc, #184]	; (800b9f8 <USB_SetTurnaroundTime+0x130>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d802      	bhi.n	800b94a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b944:	230b      	movs	r3, #11
 800b946:	617b      	str	r3, [r7, #20]
 800b948:	e036      	b.n	800b9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	4a2a      	ldr	r2, [pc, #168]	; (800b9f8 <USB_SetTurnaroundTime+0x130>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d906      	bls.n	800b960 <USB_SetTurnaroundTime+0x98>
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	4a29      	ldr	r2, [pc, #164]	; (800b9fc <USB_SetTurnaroundTime+0x134>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d802      	bhi.n	800b960 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b95a:	230a      	movs	r3, #10
 800b95c:	617b      	str	r3, [r7, #20]
 800b95e:	e02b      	b.n	800b9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	4a26      	ldr	r2, [pc, #152]	; (800b9fc <USB_SetTurnaroundTime+0x134>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d906      	bls.n	800b976 <USB_SetTurnaroundTime+0xae>
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	4a25      	ldr	r2, [pc, #148]	; (800ba00 <USB_SetTurnaroundTime+0x138>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d202      	bcs.n	800b976 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b970:	2309      	movs	r3, #9
 800b972:	617b      	str	r3, [r7, #20]
 800b974:	e020      	b.n	800b9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	4a21      	ldr	r2, [pc, #132]	; (800ba00 <USB_SetTurnaroundTime+0x138>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d306      	bcc.n	800b98c <USB_SetTurnaroundTime+0xc4>
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	4a20      	ldr	r2, [pc, #128]	; (800ba04 <USB_SetTurnaroundTime+0x13c>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d802      	bhi.n	800b98c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b986:	2308      	movs	r3, #8
 800b988:	617b      	str	r3, [r7, #20]
 800b98a:	e015      	b.n	800b9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	4a1d      	ldr	r2, [pc, #116]	; (800ba04 <USB_SetTurnaroundTime+0x13c>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d906      	bls.n	800b9a2 <USB_SetTurnaroundTime+0xda>
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	4a1c      	ldr	r2, [pc, #112]	; (800ba08 <USB_SetTurnaroundTime+0x140>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d202      	bcs.n	800b9a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b99c:	2307      	movs	r3, #7
 800b99e:	617b      	str	r3, [r7, #20]
 800b9a0:	e00a      	b.n	800b9b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b9a2:	2306      	movs	r3, #6
 800b9a4:	617b      	str	r3, [r7, #20]
 800b9a6:	e007      	b.n	800b9b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b9a8:	79fb      	ldrb	r3, [r7, #7]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d102      	bne.n	800b9b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b9ae:	2309      	movs	r3, #9
 800b9b0:	617b      	str	r3, [r7, #20]
 800b9b2:	e001      	b.n	800b9b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b9b4:	2309      	movs	r3, #9
 800b9b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	68da      	ldr	r2, [r3, #12]
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	029b      	lsls	r3, r3, #10
 800b9cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b9d0:	431a      	orrs	r2, r3
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	371c      	adds	r7, #28
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	00d8acbf 	.word	0x00d8acbf
 800b9e8:	00e4e1c0 	.word	0x00e4e1c0
 800b9ec:	00f42400 	.word	0x00f42400
 800b9f0:	01067380 	.word	0x01067380
 800b9f4:	011a499f 	.word	0x011a499f
 800b9f8:	01312cff 	.word	0x01312cff
 800b9fc:	014ca43f 	.word	0x014ca43f
 800ba00:	016e3600 	.word	0x016e3600
 800ba04:	01a6ab1f 	.word	0x01a6ab1f
 800ba08:	01e84800 	.word	0x01e84800

0800ba0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	f043 0201 	orr.w	r2, r3, #1
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	370c      	adds	r7, #12
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b083      	sub	sp, #12
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	f023 0201 	bic.w	r2, r3, #1
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba42:	2300      	movs	r3, #0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	460b      	mov	r3, r1
 800ba5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ba6c:	78fb      	ldrb	r3, [r7, #3]
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d115      	bne.n	800ba9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba7e:	2001      	movs	r0, #1
 800ba80:	f7f9 fcc0 	bl	8005404 <HAL_Delay>
      ms++;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	3301      	adds	r3, #1
 800ba88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f001 f972 	bl	800cd74 <USB_GetMode>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d01e      	beq.n	800bad4 <USB_SetCurrentMode+0x84>
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2b31      	cmp	r3, #49	; 0x31
 800ba9a:	d9f0      	bls.n	800ba7e <USB_SetCurrentMode+0x2e>
 800ba9c:	e01a      	b.n	800bad4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ba9e:	78fb      	ldrb	r3, [r7, #3]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d115      	bne.n	800bad0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bab0:	2001      	movs	r0, #1
 800bab2:	f7f9 fca7 	bl	8005404 <HAL_Delay>
      ms++;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	3301      	adds	r3, #1
 800baba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f001 f959 	bl	800cd74 <USB_GetMode>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d005      	beq.n	800bad4 <USB_SetCurrentMode+0x84>
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2b31      	cmp	r3, #49	; 0x31
 800bacc:	d9f0      	bls.n	800bab0 <USB_SetCurrentMode+0x60>
 800bace:	e001      	b.n	800bad4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	e005      	b.n	800bae0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2b32      	cmp	r3, #50	; 0x32
 800bad8:	d101      	bne.n	800bade <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	e000      	b.n	800bae0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bae8:	b084      	sub	sp, #16
 800baea:	b580      	push	{r7, lr}
 800baec:	b086      	sub	sp, #24
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800baf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bafa:	2300      	movs	r3, #0
 800bafc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bb02:	2300      	movs	r3, #0
 800bb04:	613b      	str	r3, [r7, #16]
 800bb06:	e009      	b.n	800bb1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	3340      	adds	r3, #64	; 0x40
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	4413      	add	r3, r2
 800bb12:	2200      	movs	r2, #0
 800bb14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	613b      	str	r3, [r7, #16]
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	2b0e      	cmp	r3, #14
 800bb20:	d9f2      	bls.n	800bb08 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bb22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d11c      	bne.n	800bb62 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb36:	f043 0302 	orr.w	r3, r3, #2
 800bb3a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb4c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb58:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	639a      	str	r2, [r3, #56]	; 0x38
 800bb60:	e00b      	b.n	800bb7a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb66:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb72:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb80:	461a      	mov	r2, r3
 800bb82:	2300      	movs	r3, #0
 800bb84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb94:	461a      	mov	r2, r3
 800bb96:	680b      	ldr	r3, [r1, #0]
 800bb98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d10c      	bne.n	800bbba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d104      	bne.n	800bbb0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bba6:	2100      	movs	r1, #0
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f945 	bl	800be38 <USB_SetDevSpeed>
 800bbae:	e008      	b.n	800bbc2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bbb0:	2101      	movs	r1, #1
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f940 	bl	800be38 <USB_SetDevSpeed>
 800bbb8:	e003      	b.n	800bbc2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bbba:	2103      	movs	r1, #3
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f93b 	bl	800be38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bbc2:	2110      	movs	r1, #16
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 f8f3 	bl	800bdb0 <USB_FlushTxFifo>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d001      	beq.n	800bbd4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f90f 	bl	800bdf8 <USB_FlushRxFifo>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d001      	beq.n	800bbe4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbea:	461a      	mov	r2, r3
 800bbec:	2300      	movs	r3, #0
 800bbee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc02:	461a      	mov	r2, r3
 800bc04:	2300      	movs	r3, #0
 800bc06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc08:	2300      	movs	r3, #0
 800bc0a:	613b      	str	r3, [r7, #16]
 800bc0c:	e043      	b.n	800bc96 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	015a      	lsls	r2, r3, #5
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	4413      	add	r3, r2
 800bc16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc24:	d118      	bne.n	800bc58 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10a      	bne.n	800bc42 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	015a      	lsls	r2, r3, #5
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4413      	add	r3, r2
 800bc34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc38:	461a      	mov	r2, r3
 800bc3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc3e:	6013      	str	r3, [r2, #0]
 800bc40:	e013      	b.n	800bc6a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	015a      	lsls	r2, r3, #5
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	4413      	add	r3, r2
 800bc4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc4e:	461a      	mov	r2, r3
 800bc50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bc54:	6013      	str	r3, [r2, #0]
 800bc56:	e008      	b.n	800bc6a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	015a      	lsls	r2, r3, #5
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	4413      	add	r3, r2
 800bc60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc64:	461a      	mov	r2, r3
 800bc66:	2300      	movs	r3, #0
 800bc68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	015a      	lsls	r2, r3, #5
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	4413      	add	r3, r2
 800bc72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc76:	461a      	mov	r2, r3
 800bc78:	2300      	movs	r3, #0
 800bc7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	015a      	lsls	r2, r3, #5
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	4413      	add	r3, r2
 800bc84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc88:	461a      	mov	r2, r3
 800bc8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bc8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	3301      	adds	r3, #1
 800bc94:	613b      	str	r3, [r7, #16]
 800bc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc98:	693a      	ldr	r2, [r7, #16]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d3b7      	bcc.n	800bc0e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc9e:	2300      	movs	r3, #0
 800bca0:	613b      	str	r3, [r7, #16]
 800bca2:	e043      	b.n	800bd2c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	015a      	lsls	r2, r3, #5
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	4413      	add	r3, r2
 800bcac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcba:	d118      	bne.n	800bcee <USB_DevInit+0x206>
    {
      if (i == 0U)
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d10a      	bne.n	800bcd8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	015a      	lsls	r2, r3, #5
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	4413      	add	r3, r2
 800bcca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcce:	461a      	mov	r2, r3
 800bcd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bcd4:	6013      	str	r3, [r2, #0]
 800bcd6:	e013      	b.n	800bd00 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	015a      	lsls	r2, r3, #5
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	4413      	add	r3, r2
 800bce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce4:	461a      	mov	r2, r3
 800bce6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bcea:	6013      	str	r3, [r2, #0]
 800bcec:	e008      	b.n	800bd00 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	015a      	lsls	r2, r3, #5
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	015a      	lsls	r2, r3, #5
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	4413      	add	r3, r2
 800bd08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	2300      	movs	r3, #0
 800bd10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	015a      	lsls	r2, r3, #5
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	4413      	add	r3, r2
 800bd1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd1e:	461a      	mov	r2, r3
 800bd20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	3301      	adds	r3, #1
 800bd2a:	613b      	str	r3, [r7, #16]
 800bd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2e:	693a      	ldr	r2, [r7, #16]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d3b7      	bcc.n	800bca4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bd54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d105      	bne.n	800bd68 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	699b      	ldr	r3, [r3, #24]
 800bd60:	f043 0210 	orr.w	r2, r3, #16
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	699a      	ldr	r2, [r3, #24]
 800bd6c:	4b0f      	ldr	r3, [pc, #60]	; (800bdac <USB_DevInit+0x2c4>)
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bd74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d005      	beq.n	800bd86 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	f043 0208 	orr.w	r2, r3, #8
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bd86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d107      	bne.n	800bd9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	699b      	ldr	r3, [r3, #24]
 800bd90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd94:	f043 0304 	orr.w	r3, r3, #4
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bd9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bda8:	b004      	add	sp, #16
 800bdaa:	4770      	bx	lr
 800bdac:	803c3800 	.word	0x803c3800

0800bdb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	019b      	lsls	r3, r3, #6
 800bdc2:	f043 0220 	orr.w	r2, r3, #32
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	60fb      	str	r3, [r7, #12]
 800bdd0:	4a08      	ldr	r2, [pc, #32]	; (800bdf4 <USB_FlushTxFifo+0x44>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d901      	bls.n	800bdda <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	e006      	b.n	800bde8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	f003 0320 	and.w	r3, r3, #32
 800bde2:	2b20      	cmp	r3, #32
 800bde4:	d0f1      	beq.n	800bdca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3714      	adds	r7, #20
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr
 800bdf4:	00030d40 	.word	0x00030d40

0800bdf8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be00:	2300      	movs	r3, #0
 800be02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2210      	movs	r2, #16
 800be08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	3301      	adds	r3, #1
 800be0e:	60fb      	str	r3, [r7, #12]
 800be10:	4a08      	ldr	r2, [pc, #32]	; (800be34 <USB_FlushRxFifo+0x3c>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d901      	bls.n	800be1a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800be16:	2303      	movs	r3, #3
 800be18:	e006      	b.n	800be28 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	f003 0310 	and.w	r3, r3, #16
 800be22:	2b10      	cmp	r3, #16
 800be24:	d0f1      	beq.n	800be0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800be26:	2300      	movs	r3, #0
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3714      	adds	r7, #20
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr
 800be34:	00030d40 	.word	0x00030d40

0800be38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	460b      	mov	r3, r1
 800be42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	78fb      	ldrb	r3, [r7, #3]
 800be52:	68f9      	ldr	r1, [r7, #12]
 800be54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be58:	4313      	orrs	r3, r2
 800be5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3714      	adds	r7, #20
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr

0800be6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800be6a:	b480      	push	{r7}
 800be6c:	b087      	sub	sp, #28
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	f003 0306 	and.w	r3, r3, #6
 800be82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d102      	bne.n	800be90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800be8a:	2300      	movs	r3, #0
 800be8c:	75fb      	strb	r3, [r7, #23]
 800be8e:	e00a      	b.n	800bea6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2b02      	cmp	r3, #2
 800be94:	d002      	beq.n	800be9c <USB_GetDevSpeed+0x32>
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2b06      	cmp	r3, #6
 800be9a:	d102      	bne.n	800bea2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800be9c:	2302      	movs	r3, #2
 800be9e:	75fb      	strb	r3, [r7, #23]
 800bea0:	e001      	b.n	800bea6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bea2:	230f      	movs	r3, #15
 800bea4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bea6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	371c      	adds	r7, #28
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b085      	sub	sp, #20
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	785b      	ldrb	r3, [r3, #1]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d13a      	bne.n	800bf46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bed6:	69da      	ldr	r2, [r3, #28]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	f003 030f 	and.w	r3, r3, #15
 800bee0:	2101      	movs	r1, #1
 800bee2:	fa01 f303 	lsl.w	r3, r1, r3
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	68f9      	ldr	r1, [r7, #12]
 800beea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800beee:	4313      	orrs	r3, r2
 800bef0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	015a      	lsls	r2, r3, #5
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	4413      	add	r3, r2
 800befa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d155      	bne.n	800bfb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	015a      	lsls	r2, r3, #5
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	4413      	add	r3, r2
 800bf10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	78db      	ldrb	r3, [r3, #3]
 800bf22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	059b      	lsls	r3, r3, #22
 800bf2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	68ba      	ldr	r2, [r7, #8]
 800bf30:	0151      	lsls	r1, r2, #5
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	440a      	add	r2, r1
 800bf36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf42:	6013      	str	r3, [r2, #0]
 800bf44:	e036      	b.n	800bfb4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf4c:	69da      	ldr	r2, [r3, #28]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	f003 030f 	and.w	r3, r3, #15
 800bf56:	2101      	movs	r1, #1
 800bf58:	fa01 f303 	lsl.w	r3, r1, r3
 800bf5c:	041b      	lsls	r3, r3, #16
 800bf5e:	68f9      	ldr	r1, [r7, #12]
 800bf60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf64:	4313      	orrs	r3, r2
 800bf66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	015a      	lsls	r2, r3, #5
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	4413      	add	r3, r2
 800bf70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d11a      	bne.n	800bfb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	015a      	lsls	r2, r3, #5
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	4413      	add	r3, r2
 800bf86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	78db      	ldrb	r3, [r3, #3]
 800bf98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf9a:	430b      	orrs	r3, r1
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	0151      	lsls	r1, r2, #5
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	440a      	add	r2, r1
 800bfa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfb2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3714      	adds	r7, #20
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr
	...

0800bfc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	785b      	ldrb	r3, [r3, #1]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d161      	bne.n	800c0a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	015a      	lsls	r2, r3, #5
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bff6:	d11f      	bne.n	800c038 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	015a      	lsls	r2, r3, #5
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	4413      	add	r3, r2
 800c000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	68ba      	ldr	r2, [r7, #8]
 800c008:	0151      	lsls	r1, r2, #5
 800c00a:	68fa      	ldr	r2, [r7, #12]
 800c00c:	440a      	add	r2, r1
 800c00e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c012:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c016:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	015a      	lsls	r2, r3, #5
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	4413      	add	r3, r2
 800c020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	0151      	lsls	r1, r2, #5
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	440a      	add	r2, r1
 800c02e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c032:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c036:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c03e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	f003 030f 	and.w	r3, r3, #15
 800c048:	2101      	movs	r1, #1
 800c04a:	fa01 f303 	lsl.w	r3, r1, r3
 800c04e:	b29b      	uxth	r3, r3
 800c050:	43db      	mvns	r3, r3
 800c052:	68f9      	ldr	r1, [r7, #12]
 800c054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c058:	4013      	ands	r3, r2
 800c05a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c062:	69da      	ldr	r2, [r3, #28]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	f003 030f 	and.w	r3, r3, #15
 800c06c:	2101      	movs	r1, #1
 800c06e:	fa01 f303 	lsl.w	r3, r1, r3
 800c072:	b29b      	uxth	r3, r3
 800c074:	43db      	mvns	r3, r3
 800c076:	68f9      	ldr	r1, [r7, #12]
 800c078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c07c:	4013      	ands	r3, r2
 800c07e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	015a      	lsls	r2, r3, #5
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	4413      	add	r3, r2
 800c088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	0159      	lsls	r1, r3, #5
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	440b      	add	r3, r1
 800c096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c09a:	4619      	mov	r1, r3
 800c09c:	4b35      	ldr	r3, [pc, #212]	; (800c174 <USB_DeactivateEndpoint+0x1b0>)
 800c09e:	4013      	ands	r3, r2
 800c0a0:	600b      	str	r3, [r1, #0]
 800c0a2:	e060      	b.n	800c166 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	015a      	lsls	r2, r3, #5
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0ba:	d11f      	bne.n	800c0fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	015a      	lsls	r2, r3, #5
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68ba      	ldr	r2, [r7, #8]
 800c0cc:	0151      	lsls	r1, r2, #5
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	440a      	add	r2, r1
 800c0d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c0da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	015a      	lsls	r2, r3, #5
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68ba      	ldr	r2, [r7, #8]
 800c0ec:	0151      	lsls	r1, r2, #5
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	440a      	add	r2, r1
 800c0f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	f003 030f 	and.w	r3, r3, #15
 800c10c:	2101      	movs	r1, #1
 800c10e:	fa01 f303 	lsl.w	r3, r1, r3
 800c112:	041b      	lsls	r3, r3, #16
 800c114:	43db      	mvns	r3, r3
 800c116:	68f9      	ldr	r1, [r7, #12]
 800c118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c11c:	4013      	ands	r3, r2
 800c11e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c126:	69da      	ldr	r2, [r3, #28]
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	f003 030f 	and.w	r3, r3, #15
 800c130:	2101      	movs	r1, #1
 800c132:	fa01 f303 	lsl.w	r3, r1, r3
 800c136:	041b      	lsls	r3, r3, #16
 800c138:	43db      	mvns	r3, r3
 800c13a:	68f9      	ldr	r1, [r7, #12]
 800c13c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c140:	4013      	ands	r3, r2
 800c142:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	015a      	lsls	r2, r3, #5
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	4413      	add	r3, r2
 800c14c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	0159      	lsls	r1, r3, #5
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	440b      	add	r3, r1
 800c15a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c15e:	4619      	mov	r1, r3
 800c160:	4b05      	ldr	r3, [pc, #20]	; (800c178 <USB_DeactivateEndpoint+0x1b4>)
 800c162:	4013      	ands	r3, r2
 800c164:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c166:	2300      	movs	r3, #0
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3714      	adds	r7, #20
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr
 800c174:	ec337800 	.word	0xec337800
 800c178:	eff37800 	.word	0xeff37800

0800c17c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b08a      	sub	sp, #40	; 0x28
 800c180:	af02      	add	r7, sp, #8
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	4613      	mov	r3, r2
 800c188:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	785b      	ldrb	r3, [r3, #1]
 800c198:	2b01      	cmp	r3, #1
 800c19a:	f040 815c 	bne.w	800c456 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	695b      	ldr	r3, [r3, #20]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d132      	bne.n	800c20c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	015a      	lsls	r2, r3, #5
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	69ba      	ldr	r2, [r7, #24]
 800c1b6:	0151      	lsls	r1, r2, #5
 800c1b8:	69fa      	ldr	r2, [r7, #28]
 800c1ba:	440a      	add	r2, r1
 800c1bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c1c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c1c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	015a      	lsls	r2, r3, #5
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1d6:	691b      	ldr	r3, [r3, #16]
 800c1d8:	69ba      	ldr	r2, [r7, #24]
 800c1da:	0151      	lsls	r1, r2, #5
 800c1dc:	69fa      	ldr	r2, [r7, #28]
 800c1de:	440a      	add	r2, r1
 800c1e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	015a      	lsls	r2, r3, #5
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1f6:	691b      	ldr	r3, [r3, #16]
 800c1f8:	69ba      	ldr	r2, [r7, #24]
 800c1fa:	0151      	lsls	r1, r2, #5
 800c1fc:	69fa      	ldr	r2, [r7, #28]
 800c1fe:	440a      	add	r2, r1
 800c200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c204:	0cdb      	lsrs	r3, r3, #19
 800c206:	04db      	lsls	r3, r3, #19
 800c208:	6113      	str	r3, [r2, #16]
 800c20a:	e074      	b.n	800c2f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	015a      	lsls	r2, r3, #5
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	4413      	add	r3, r2
 800c214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	69ba      	ldr	r2, [r7, #24]
 800c21c:	0151      	lsls	r1, r2, #5
 800c21e:	69fa      	ldr	r2, [r7, #28]
 800c220:	440a      	add	r2, r1
 800c222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c226:	0cdb      	lsrs	r3, r3, #19
 800c228:	04db      	lsls	r3, r3, #19
 800c22a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	015a      	lsls	r2, r3, #5
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	4413      	add	r3, r2
 800c234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	69ba      	ldr	r2, [r7, #24]
 800c23c:	0151      	lsls	r1, r2, #5
 800c23e:	69fa      	ldr	r2, [r7, #28]
 800c240:	440a      	add	r2, r1
 800c242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c246:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c24a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c24e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	015a      	lsls	r2, r3, #5
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	4413      	add	r3, r2
 800c258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c25c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	6959      	ldr	r1, [r3, #20]
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	440b      	add	r3, r1
 800c268:	1e59      	subs	r1, r3, #1
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c272:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c274:	4b9d      	ldr	r3, [pc, #628]	; (800c4ec <USB_EPStartXfer+0x370>)
 800c276:	400b      	ands	r3, r1
 800c278:	69b9      	ldr	r1, [r7, #24]
 800c27a:	0148      	lsls	r0, r1, #5
 800c27c:	69f9      	ldr	r1, [r7, #28]
 800c27e:	4401      	add	r1, r0
 800c280:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c284:	4313      	orrs	r3, r2
 800c286:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	015a      	lsls	r2, r3, #5
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	4413      	add	r3, r2
 800c290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c294:	691a      	ldr	r2, [r3, #16]
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c29e:	69b9      	ldr	r1, [r7, #24]
 800c2a0:	0148      	lsls	r0, r1, #5
 800c2a2:	69f9      	ldr	r1, [r7, #28]
 800c2a4:	4401      	add	r1, r0
 800c2a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	78db      	ldrb	r3, [r3, #3]
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d11f      	bne.n	800c2f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	015a      	lsls	r2, r3, #5
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	4413      	add	r3, r2
 800c2be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	69ba      	ldr	r2, [r7, #24]
 800c2c6:	0151      	lsls	r1, r2, #5
 800c2c8:	69fa      	ldr	r2, [r7, #28]
 800c2ca:	440a      	add	r2, r1
 800c2cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c2d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	015a      	lsls	r2, r3, #5
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	4413      	add	r3, r2
 800c2de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	69ba      	ldr	r2, [r7, #24]
 800c2e6:	0151      	lsls	r1, r2, #5
 800c2e8:	69fa      	ldr	r2, [r7, #28]
 800c2ea:	440a      	add	r2, r1
 800c2ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c2f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c2f6:	79fb      	ldrb	r3, [r7, #7]
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d14b      	bne.n	800c394 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d009      	beq.n	800c318 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	015a      	lsls	r2, r3, #5
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	4413      	add	r3, r2
 800c30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c310:	461a      	mov	r2, r3
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	78db      	ldrb	r3, [r3, #3]
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d128      	bne.n	800c372 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d110      	bne.n	800c352 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	015a      	lsls	r2, r3, #5
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	4413      	add	r3, r2
 800c338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	69ba      	ldr	r2, [r7, #24]
 800c340:	0151      	lsls	r1, r2, #5
 800c342:	69fa      	ldr	r2, [r7, #28]
 800c344:	440a      	add	r2, r1
 800c346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c34a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c34e:	6013      	str	r3, [r2, #0]
 800c350:	e00f      	b.n	800c372 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	015a      	lsls	r2, r3, #5
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	4413      	add	r3, r2
 800c35a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	69ba      	ldr	r2, [r7, #24]
 800c362:	0151      	lsls	r1, r2, #5
 800c364:	69fa      	ldr	r2, [r7, #28]
 800c366:	440a      	add	r2, r1
 800c368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c36c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c370:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	015a      	lsls	r2, r3, #5
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	4413      	add	r3, r2
 800c37a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	69ba      	ldr	r2, [r7, #24]
 800c382:	0151      	lsls	r1, r2, #5
 800c384:	69fa      	ldr	r2, [r7, #28]
 800c386:	440a      	add	r2, r1
 800c388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c38c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c390:	6013      	str	r3, [r2, #0]
 800c392:	e12f      	b.n	800c5f4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	015a      	lsls	r2, r3, #5
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	4413      	add	r3, r2
 800c39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	69ba      	ldr	r2, [r7, #24]
 800c3a4:	0151      	lsls	r1, r2, #5
 800c3a6:	69fa      	ldr	r2, [r7, #28]
 800c3a8:	440a      	add	r2, r1
 800c3aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	78db      	ldrb	r3, [r3, #3]
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d015      	beq.n	800c3e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	695b      	ldr	r3, [r3, #20]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	f000 8117 	beq.w	800c5f4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	f003 030f 	and.w	r3, r3, #15
 800c3d6:	2101      	movs	r1, #1
 800c3d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c3dc:	69f9      	ldr	r1, [r7, #28]
 800c3de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	634b      	str	r3, [r1, #52]	; 0x34
 800c3e6:	e105      	b.n	800c5f4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d110      	bne.n	800c41a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	015a      	lsls	r2, r3, #5
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	4413      	add	r3, r2
 800c400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	69ba      	ldr	r2, [r7, #24]
 800c408:	0151      	lsls	r1, r2, #5
 800c40a:	69fa      	ldr	r2, [r7, #28]
 800c40c:	440a      	add	r2, r1
 800c40e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c412:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c416:	6013      	str	r3, [r2, #0]
 800c418:	e00f      	b.n	800c43a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	015a      	lsls	r2, r3, #5
 800c41e:	69fb      	ldr	r3, [r7, #28]
 800c420:	4413      	add	r3, r2
 800c422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	69ba      	ldr	r2, [r7, #24]
 800c42a:	0151      	lsls	r1, r2, #5
 800c42c:	69fa      	ldr	r2, [r7, #28]
 800c42e:	440a      	add	r2, r1
 800c430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c438:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	68d9      	ldr	r1, [r3, #12]
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	781a      	ldrb	r2, [r3, #0]
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	695b      	ldr	r3, [r3, #20]
 800c446:	b298      	uxth	r0, r3
 800c448:	79fb      	ldrb	r3, [r7, #7]
 800c44a:	9300      	str	r3, [sp, #0]
 800c44c:	4603      	mov	r3, r0
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f000 fa2b 	bl	800c8aa <USB_WritePacket>
 800c454:	e0ce      	b.n	800c5f4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	015a      	lsls	r2, r3, #5
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	4413      	add	r3, r2
 800c45e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c462:	691b      	ldr	r3, [r3, #16]
 800c464:	69ba      	ldr	r2, [r7, #24]
 800c466:	0151      	lsls	r1, r2, #5
 800c468:	69fa      	ldr	r2, [r7, #28]
 800c46a:	440a      	add	r2, r1
 800c46c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c470:	0cdb      	lsrs	r3, r3, #19
 800c472:	04db      	lsls	r3, r3, #19
 800c474:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	015a      	lsls	r2, r3, #5
 800c47a:	69fb      	ldr	r3, [r7, #28]
 800c47c:	4413      	add	r3, r2
 800c47e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	69ba      	ldr	r2, [r7, #24]
 800c486:	0151      	lsls	r1, r2, #5
 800c488:	69fa      	ldr	r2, [r7, #28]
 800c48a:	440a      	add	r2, r1
 800c48c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c490:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c494:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c498:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	695b      	ldr	r3, [r3, #20]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d126      	bne.n	800c4f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	015a      	lsls	r2, r3, #5
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ae:	691a      	ldr	r2, [r3, #16]
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4b8:	69b9      	ldr	r1, [r7, #24]
 800c4ba:	0148      	lsls	r0, r1, #5
 800c4bc:	69f9      	ldr	r1, [r7, #28]
 800c4be:	4401      	add	r1, r0
 800c4c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	015a      	lsls	r2, r3, #5
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	69ba      	ldr	r2, [r7, #24]
 800c4d8:	0151      	lsls	r1, r2, #5
 800c4da:	69fa      	ldr	r2, [r7, #28]
 800c4dc:	440a      	add	r2, r1
 800c4de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c4e6:	6113      	str	r3, [r2, #16]
 800c4e8:	e036      	b.n	800c558 <USB_EPStartXfer+0x3dc>
 800c4ea:	bf00      	nop
 800c4ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	695a      	ldr	r2, [r3, #20]
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	1e5a      	subs	r2, r3, #1
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	fbb2 f3f3 	udiv	r3, r2, r3
 800c504:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	015a      	lsls	r2, r3, #5
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	4413      	add	r3, r2
 800c50e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c512:	691a      	ldr	r2, [r3, #16]
 800c514:	8afb      	ldrh	r3, [r7, #22]
 800c516:	04d9      	lsls	r1, r3, #19
 800c518:	4b39      	ldr	r3, [pc, #228]	; (800c600 <USB_EPStartXfer+0x484>)
 800c51a:	400b      	ands	r3, r1
 800c51c:	69b9      	ldr	r1, [r7, #24]
 800c51e:	0148      	lsls	r0, r1, #5
 800c520:	69f9      	ldr	r1, [r7, #28]
 800c522:	4401      	add	r1, r0
 800c524:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c528:	4313      	orrs	r3, r2
 800c52a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	015a      	lsls	r2, r3, #5
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	4413      	add	r3, r2
 800c534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c538:	691a      	ldr	r2, [r3, #16]
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	8af9      	ldrh	r1, [r7, #22]
 800c540:	fb01 f303 	mul.w	r3, r1, r3
 800c544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c548:	69b9      	ldr	r1, [r7, #24]
 800c54a:	0148      	lsls	r0, r1, #5
 800c54c:	69f9      	ldr	r1, [r7, #28]
 800c54e:	4401      	add	r1, r0
 800c550:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c554:	4313      	orrs	r3, r2
 800c556:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c558:	79fb      	ldrb	r3, [r7, #7]
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	d10d      	bne.n	800c57a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d009      	beq.n	800c57a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	68d9      	ldr	r1, [r3, #12]
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	015a      	lsls	r2, r3, #5
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	4413      	add	r3, r2
 800c572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c576:	460a      	mov	r2, r1
 800c578:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	78db      	ldrb	r3, [r3, #3]
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d128      	bne.n	800c5d4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d110      	bne.n	800c5b4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	015a      	lsls	r2, r3, #5
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	4413      	add	r3, r2
 800c59a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	69ba      	ldr	r2, [r7, #24]
 800c5a2:	0151      	lsls	r1, r2, #5
 800c5a4:	69fa      	ldr	r2, [r7, #28]
 800c5a6:	440a      	add	r2, r1
 800c5a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5b0:	6013      	str	r3, [r2, #0]
 800c5b2:	e00f      	b.n	800c5d4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	015a      	lsls	r2, r3, #5
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	69ba      	ldr	r2, [r7, #24]
 800c5c4:	0151      	lsls	r1, r2, #5
 800c5c6:	69fa      	ldr	r2, [r7, #28]
 800c5c8:	440a      	add	r2, r1
 800c5ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	015a      	lsls	r2, r3, #5
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	4413      	add	r3, r2
 800c5dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	69ba      	ldr	r2, [r7, #24]
 800c5e4:	0151      	lsls	r1, r2, #5
 800c5e6:	69fa      	ldr	r2, [r7, #28]
 800c5e8:	440a      	add	r2, r1
 800c5ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3720      	adds	r7, #32
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	1ff80000 	.word	0x1ff80000

0800c604 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c604:	b480      	push	{r7}
 800c606:	b087      	sub	sp, #28
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	4613      	mov	r3, r2
 800c610:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	785b      	ldrb	r3, [r3, #1]
 800c620:	2b01      	cmp	r3, #1
 800c622:	f040 80cd 	bne.w	800c7c0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d132      	bne.n	800c694 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	015a      	lsls	r2, r3, #5
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	4413      	add	r3, r2
 800c636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	693a      	ldr	r2, [r7, #16]
 800c63e:	0151      	lsls	r1, r2, #5
 800c640:	697a      	ldr	r2, [r7, #20]
 800c642:	440a      	add	r2, r1
 800c644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c648:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c64c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c650:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	015a      	lsls	r2, r3, #5
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	4413      	add	r3, r2
 800c65a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	693a      	ldr	r2, [r7, #16]
 800c662:	0151      	lsls	r1, r2, #5
 800c664:	697a      	ldr	r2, [r7, #20]
 800c666:	440a      	add	r2, r1
 800c668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c66c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c670:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	015a      	lsls	r2, r3, #5
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	4413      	add	r3, r2
 800c67a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	693a      	ldr	r2, [r7, #16]
 800c682:	0151      	lsls	r1, r2, #5
 800c684:	697a      	ldr	r2, [r7, #20]
 800c686:	440a      	add	r2, r1
 800c688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c68c:	0cdb      	lsrs	r3, r3, #19
 800c68e:	04db      	lsls	r3, r3, #19
 800c690:	6113      	str	r3, [r2, #16]
 800c692:	e04e      	b.n	800c732 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	015a      	lsls	r2, r3, #5
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	4413      	add	r3, r2
 800c69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6a0:	691b      	ldr	r3, [r3, #16]
 800c6a2:	693a      	ldr	r2, [r7, #16]
 800c6a4:	0151      	lsls	r1, r2, #5
 800c6a6:	697a      	ldr	r2, [r7, #20]
 800c6a8:	440a      	add	r2, r1
 800c6aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6ae:	0cdb      	lsrs	r3, r3, #19
 800c6b0:	04db      	lsls	r3, r3, #19
 800c6b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	015a      	lsls	r2, r3, #5
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	4413      	add	r3, r2
 800c6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6c0:	691b      	ldr	r3, [r3, #16]
 800c6c2:	693a      	ldr	r2, [r7, #16]
 800c6c4:	0151      	lsls	r1, r2, #5
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	440a      	add	r2, r1
 800c6ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c6d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c6d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	695a      	ldr	r2, [r3, #20]
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d903      	bls.n	800c6ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	689a      	ldr	r2, [r3, #8]
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	015a      	lsls	r2, r3, #5
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	4413      	add	r3, r2
 800c6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	693a      	ldr	r2, [r7, #16]
 800c6fc:	0151      	lsls	r1, r2, #5
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	440a      	add	r2, r1
 800c702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c70a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	015a      	lsls	r2, r3, #5
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	4413      	add	r3, r2
 800c714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c718:	691a      	ldr	r2, [r3, #16]
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	695b      	ldr	r3, [r3, #20]
 800c71e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c722:	6939      	ldr	r1, [r7, #16]
 800c724:	0148      	lsls	r0, r1, #5
 800c726:	6979      	ldr	r1, [r7, #20]
 800c728:	4401      	add	r1, r0
 800c72a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c72e:	4313      	orrs	r3, r2
 800c730:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c732:	79fb      	ldrb	r3, [r7, #7]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d11e      	bne.n	800c776 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d009      	beq.n	800c754 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	015a      	lsls	r2, r3, #5
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	4413      	add	r3, r2
 800c748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c74c:	461a      	mov	r2, r3
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	015a      	lsls	r2, r3, #5
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	4413      	add	r3, r2
 800c75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	693a      	ldr	r2, [r7, #16]
 800c764:	0151      	lsls	r1, r2, #5
 800c766:	697a      	ldr	r2, [r7, #20]
 800c768:	440a      	add	r2, r1
 800c76a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c76e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c772:	6013      	str	r3, [r2, #0]
 800c774:	e092      	b.n	800c89c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	015a      	lsls	r2, r3, #5
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	4413      	add	r3, r2
 800c77e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	693a      	ldr	r2, [r7, #16]
 800c786:	0151      	lsls	r1, r2, #5
 800c788:	697a      	ldr	r2, [r7, #20]
 800c78a:	440a      	add	r2, r1
 800c78c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c790:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c794:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	695b      	ldr	r3, [r3, #20]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d07e      	beq.n	800c89c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	f003 030f 	and.w	r3, r3, #15
 800c7ae:	2101      	movs	r1, #1
 800c7b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c7b4:	6979      	ldr	r1, [r7, #20]
 800c7b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	634b      	str	r3, [r1, #52]	; 0x34
 800c7be:	e06d      	b.n	800c89c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	015a      	lsls	r2, r3, #5
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7cc:	691b      	ldr	r3, [r3, #16]
 800c7ce:	693a      	ldr	r2, [r7, #16]
 800c7d0:	0151      	lsls	r1, r2, #5
 800c7d2:	697a      	ldr	r2, [r7, #20]
 800c7d4:	440a      	add	r2, r1
 800c7d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7da:	0cdb      	lsrs	r3, r3, #19
 800c7dc:	04db      	lsls	r3, r3, #19
 800c7de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	015a      	lsls	r2, r3, #5
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	4413      	add	r3, r2
 800c7e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ec:	691b      	ldr	r3, [r3, #16]
 800c7ee:	693a      	ldr	r2, [r7, #16]
 800c7f0:	0151      	lsls	r1, r2, #5
 800c7f2:	697a      	ldr	r2, [r7, #20]
 800c7f4:	440a      	add	r2, r1
 800c7f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c7fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c802:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	695b      	ldr	r3, [r3, #20]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d003      	beq.n	800c814 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	689a      	ldr	r2, [r3, #8]
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	015a      	lsls	r2, r3, #5
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	4413      	add	r3, r2
 800c81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	693a      	ldr	r2, [r7, #16]
 800c824:	0151      	lsls	r1, r2, #5
 800c826:	697a      	ldr	r2, [r7, #20]
 800c828:	440a      	add	r2, r1
 800c82a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c82e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c832:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	015a      	lsls	r2, r3, #5
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	4413      	add	r3, r2
 800c83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c840:	691a      	ldr	r2, [r3, #16]
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	689b      	ldr	r3, [r3, #8]
 800c846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c84a:	6939      	ldr	r1, [r7, #16]
 800c84c:	0148      	lsls	r0, r1, #5
 800c84e:	6979      	ldr	r1, [r7, #20]
 800c850:	4401      	add	r1, r0
 800c852:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c856:	4313      	orrs	r3, r2
 800c858:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c85a:	79fb      	ldrb	r3, [r7, #7]
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d10d      	bne.n	800c87c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d009      	beq.n	800c87c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	68d9      	ldr	r1, [r3, #12]
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	015a      	lsls	r2, r3, #5
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	4413      	add	r3, r2
 800c874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c878:	460a      	mov	r2, r1
 800c87a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	015a      	lsls	r2, r3, #5
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	4413      	add	r3, r2
 800c884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	693a      	ldr	r2, [r7, #16]
 800c88c:	0151      	lsls	r1, r2, #5
 800c88e:	697a      	ldr	r2, [r7, #20]
 800c890:	440a      	add	r2, r1
 800c892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c896:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c89a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	371c      	adds	r7, #28
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c8aa:	b480      	push	{r7}
 800c8ac:	b089      	sub	sp, #36	; 0x24
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	60f8      	str	r0, [r7, #12]
 800c8b2:	60b9      	str	r1, [r7, #8]
 800c8b4:	4611      	mov	r1, r2
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	71fb      	strb	r3, [r7, #7]
 800c8bc:	4613      	mov	r3, r2
 800c8be:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c8c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d123      	bne.n	800c918 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c8d0:	88bb      	ldrh	r3, [r7, #4]
 800c8d2:	3303      	adds	r3, #3
 800c8d4:	089b      	lsrs	r3, r3, #2
 800c8d6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c8d8:	2300      	movs	r3, #0
 800c8da:	61bb      	str	r3, [r7, #24]
 800c8dc:	e018      	b.n	800c910 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c8de:	79fb      	ldrb	r3, [r7, #7]
 800c8e0:	031a      	lsls	r2, r3, #12
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	3301      	adds	r3, #1
 800c902:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	3301      	adds	r3, #1
 800c908:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	3301      	adds	r3, #1
 800c90e:	61bb      	str	r3, [r7, #24]
 800c910:	69ba      	ldr	r2, [r7, #24]
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	429a      	cmp	r2, r3
 800c916:	d3e2      	bcc.n	800c8de <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3724      	adds	r7, #36	; 0x24
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr

0800c926 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c926:	b480      	push	{r7}
 800c928:	b08b      	sub	sp, #44	; 0x2c
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	60f8      	str	r0, [r7, #12]
 800c92e:	60b9      	str	r1, [r7, #8]
 800c930:	4613      	mov	r3, r2
 800c932:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c93c:	88fb      	ldrh	r3, [r7, #6]
 800c93e:	089b      	lsrs	r3, r3, #2
 800c940:	b29b      	uxth	r3, r3
 800c942:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c944:	88fb      	ldrh	r3, [r7, #6]
 800c946:	f003 0303 	and.w	r3, r3, #3
 800c94a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c94c:	2300      	movs	r3, #0
 800c94e:	623b      	str	r3, [r7, #32]
 800c950:	e014      	b.n	800c97c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c952:	69bb      	ldr	r3, [r7, #24]
 800c954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95c:	601a      	str	r2, [r3, #0]
    pDest++;
 800c95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c960:	3301      	adds	r3, #1
 800c962:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c966:	3301      	adds	r3, #1
 800c968:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96c:	3301      	adds	r3, #1
 800c96e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	3301      	adds	r3, #1
 800c974:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c976:	6a3b      	ldr	r3, [r7, #32]
 800c978:	3301      	adds	r3, #1
 800c97a:	623b      	str	r3, [r7, #32]
 800c97c:	6a3a      	ldr	r2, [r7, #32]
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	429a      	cmp	r2, r3
 800c982:	d3e6      	bcc.n	800c952 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c984:	8bfb      	ldrh	r3, [r7, #30]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d01e      	beq.n	800c9c8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c98a:	2300      	movs	r3, #0
 800c98c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c994:	461a      	mov	r2, r3
 800c996:	f107 0310 	add.w	r3, r7, #16
 800c99a:	6812      	ldr	r2, [r2, #0]
 800c99c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c99e:	693a      	ldr	r2, [r7, #16]
 800c9a0:	6a3b      	ldr	r3, [r7, #32]
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	00db      	lsls	r3, r3, #3
 800c9a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c9aa:	b2da      	uxtb	r2, r3
 800c9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ae:	701a      	strb	r2, [r3, #0]
      i++;
 800c9b0:	6a3b      	ldr	r3, [r7, #32]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	623b      	str	r3, [r7, #32]
      pDest++;
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c9bc:	8bfb      	ldrh	r3, [r7, #30]
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c9c2:	8bfb      	ldrh	r3, [r7, #30]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d1ea      	bne.n	800c99e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	372c      	adds	r7, #44	; 0x2c
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr

0800c9d6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c9d6:	b480      	push	{r7}
 800c9d8:	b085      	sub	sp, #20
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
 800c9de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	785b      	ldrb	r3, [r3, #1]
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d12c      	bne.n	800ca4c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	015a      	lsls	r2, r3, #5
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	db12      	blt.n	800ca2a <USB_EPSetStall+0x54>
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00f      	beq.n	800ca2a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	015a      	lsls	r2, r3, #5
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	4413      	add	r3, r2
 800ca12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	68ba      	ldr	r2, [r7, #8]
 800ca1a:	0151      	lsls	r1, r2, #5
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	440a      	add	r2, r1
 800ca20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca28:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	015a      	lsls	r2, r3, #5
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	4413      	add	r3, r2
 800ca32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	0151      	lsls	r1, r2, #5
 800ca3c:	68fa      	ldr	r2, [r7, #12]
 800ca3e:	440a      	add	r2, r1
 800ca40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca48:	6013      	str	r3, [r2, #0]
 800ca4a:	e02b      	b.n	800caa4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	015a      	lsls	r2, r3, #5
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	4413      	add	r3, r2
 800ca54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	db12      	blt.n	800ca84 <USB_EPSetStall+0xae>
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d00f      	beq.n	800ca84 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	015a      	lsls	r2, r3, #5
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	0151      	lsls	r1, r2, #5
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	440a      	add	r2, r1
 800ca7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca82:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	015a      	lsls	r2, r3, #5
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	68ba      	ldr	r2, [r7, #8]
 800ca94:	0151      	lsls	r1, r2, #5
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	440a      	add	r2, r1
 800ca9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800caa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cab2:	b480      	push	{r7}
 800cab4:	b085      	sub	sp, #20
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
 800caba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	785b      	ldrb	r3, [r3, #1]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d128      	bne.n	800cb20 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	015a      	lsls	r2, r3, #5
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	4413      	add	r3, r2
 800cad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	0151      	lsls	r1, r2, #5
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	440a      	add	r2, r1
 800cae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cae8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800caec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	78db      	ldrb	r3, [r3, #3]
 800caf2:	2b03      	cmp	r3, #3
 800caf4:	d003      	beq.n	800cafe <USB_EPClearStall+0x4c>
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	78db      	ldrb	r3, [r3, #3]
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d138      	bne.n	800cb70 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	015a      	lsls	r2, r3, #5
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	4413      	add	r3, r2
 800cb06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	0151      	lsls	r1, r2, #5
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	440a      	add	r2, r1
 800cb14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb1c:	6013      	str	r3, [r2, #0]
 800cb1e:	e027      	b.n	800cb70 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	015a      	lsls	r2, r3, #5
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	4413      	add	r3, r2
 800cb28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	0151      	lsls	r1, r2, #5
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	440a      	add	r2, r1
 800cb36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	78db      	ldrb	r3, [r3, #3]
 800cb44:	2b03      	cmp	r3, #3
 800cb46:	d003      	beq.n	800cb50 <USB_EPClearStall+0x9e>
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	78db      	ldrb	r3, [r3, #3]
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	d10f      	bne.n	800cb70 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	015a      	lsls	r2, r3, #5
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	4413      	add	r3, r2
 800cb58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	68ba      	ldr	r2, [r7, #8]
 800cb60:	0151      	lsls	r1, r2, #5
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	440a      	add	r2, r1
 800cb66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb6e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr

0800cb7e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cb7e:	b480      	push	{r7}
 800cb80:	b085      	sub	sp, #20
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
 800cb86:	460b      	mov	r3, r1
 800cb88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb9c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cba0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	78fb      	ldrb	r3, [r7, #3]
 800cbac:	011b      	lsls	r3, r3, #4
 800cbae:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cbb2:	68f9      	ldr	r1, [r7, #12]
 800cbb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cbbc:	2300      	movs	r3, #0
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3714      	adds	r7, #20
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr

0800cbca <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cbca:	b480      	push	{r7}
 800cbcc:	b085      	sub	sp, #20
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	68fa      	ldr	r2, [r7, #12]
 800cbe0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cbe4:	f023 0303 	bic.w	r3, r3, #3
 800cbe8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	68fa      	ldr	r2, [r7, #12]
 800cbf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbf8:	f023 0302 	bic.w	r3, r3, #2
 800cbfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cbfe:	2300      	movs	r3, #0
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3714      	adds	r7, #20
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	68fa      	ldr	r2, [r7, #12]
 800cc22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc26:	f023 0303 	bic.w	r3, r3, #3
 800cc2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc3a:	f043 0302 	orr.w	r3, r3, #2
 800cc3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc40:	2300      	movs	r3, #0
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3714      	adds	r7, #20
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr

0800cc4e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cc4e:	b480      	push	{r7}
 800cc50:	b085      	sub	sp, #20
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	695b      	ldr	r3, [r3, #20]
 800cc5a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	699b      	ldr	r3, [r3, #24]
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	4013      	ands	r3, r2
 800cc64:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cc66:	68fb      	ldr	r3, [r7, #12]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3714      	adds	r7, #20
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b085      	sub	sp, #20
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc86:	699b      	ldr	r3, [r3, #24]
 800cc88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc90:	69db      	ldr	r3, [r3, #28]
 800cc92:	68ba      	ldr	r2, [r7, #8]
 800cc94:	4013      	ands	r3, r2
 800cc96:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	0c1b      	lsrs	r3, r3, #16
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3714      	adds	r7, #20
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccba:	699b      	ldr	r3, [r3, #24]
 800ccbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccc4:	69db      	ldr	r3, [r3, #28]
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	4013      	ands	r3, r2
 800ccca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	b29b      	uxth	r3, r3
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3714      	adds	r7, #20
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b085      	sub	sp, #20
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	460b      	mov	r3, r1
 800cce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ccec:	78fb      	ldrb	r3, [r7, #3]
 800ccee:	015a      	lsls	r2, r3, #5
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd02:	695b      	ldr	r3, [r3, #20]
 800cd04:	68ba      	ldr	r2, [r7, #8]
 800cd06:	4013      	ands	r3, r2
 800cd08:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cd0a:	68bb      	ldr	r3, [r7, #8]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3714      	adds	r7, #20
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b087      	sub	sp, #28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	460b      	mov	r3, r1
 800cd22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd2e:	691b      	ldr	r3, [r3, #16]
 800cd30:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd3a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cd3c:	78fb      	ldrb	r3, [r7, #3]
 800cd3e:	f003 030f 	and.w	r3, r3, #15
 800cd42:	68fa      	ldr	r2, [r7, #12]
 800cd44:	fa22 f303 	lsr.w	r3, r2, r3
 800cd48:	01db      	lsls	r3, r3, #7
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	693a      	ldr	r2, [r7, #16]
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cd52:	78fb      	ldrb	r3, [r7, #3]
 800cd54:	015a      	lsls	r2, r3, #5
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	4413      	add	r3, r2
 800cd5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	693a      	ldr	r2, [r7, #16]
 800cd62:	4013      	ands	r3, r2
 800cd64:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cd66:	68bb      	ldr	r3, [r7, #8]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	371c      	adds	r7, #28
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	695b      	ldr	r3, [r3, #20]
 800cd80:	f003 0301 	and.w	r3, r3, #1
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdaa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cdae:	f023 0307 	bic.w	r3, r3, #7
 800cdb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	68fa      	ldr	r2, [r7, #12]
 800cdbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cdc8:	2300      	movs	r3, #0
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3714      	adds	r7, #20
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr
	...

0800cdd8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b087      	sub	sp, #28
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	460b      	mov	r3, r1
 800cde2:	607a      	str	r2, [r7, #4]
 800cde4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	333c      	adds	r3, #60	; 0x3c
 800cdee:	3304      	adds	r3, #4
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	4a26      	ldr	r2, [pc, #152]	; (800ce90 <USB_EP0_OutStart+0xb8>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d90a      	bls.n	800ce12 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce0c:	d101      	bne.n	800ce12 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	e037      	b.n	800ce82 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce18:	461a      	mov	r2, r3
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce24:	691b      	ldr	r3, [r3, #16]
 800ce26:	697a      	ldr	r2, [r7, #20]
 800ce28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce38:	691b      	ldr	r3, [r3, #16]
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce40:	f043 0318 	orr.w	r3, r3, #24
 800ce44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce4c:	691b      	ldr	r3, [r3, #16]
 800ce4e:	697a      	ldr	r2, [r7, #20]
 800ce50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce54:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ce58:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ce5a:	7afb      	ldrb	r3, [r7, #11]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d10f      	bne.n	800ce80 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce66:	461a      	mov	r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	697a      	ldr	r2, [r7, #20]
 800ce76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce7a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ce7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce80:	2300      	movs	r3, #0
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	371c      	adds	r7, #28
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop
 800ce90:	4f54300a 	.word	0x4f54300a

0800ce94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b085      	sub	sp, #20
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	3301      	adds	r3, #1
 800cea4:	60fb      	str	r3, [r7, #12]
 800cea6:	4a13      	ldr	r2, [pc, #76]	; (800cef4 <USB_CoreReset+0x60>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d901      	bls.n	800ceb0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800ceac:	2303      	movs	r3, #3
 800ceae:	e01a      	b.n	800cee6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	691b      	ldr	r3, [r3, #16]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	daf3      	bge.n	800cea0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	691b      	ldr	r3, [r3, #16]
 800cec0:	f043 0201 	orr.w	r2, r3, #1
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	3301      	adds	r3, #1
 800cecc:	60fb      	str	r3, [r7, #12]
 800cece:	4a09      	ldr	r2, [pc, #36]	; (800cef4 <USB_CoreReset+0x60>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d901      	bls.n	800ced8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800ced4:	2303      	movs	r3, #3
 800ced6:	e006      	b.n	800cee6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	691b      	ldr	r3, [r3, #16]
 800cedc:	f003 0301 	and.w	r3, r3, #1
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d0f1      	beq.n	800cec8 <USB_CoreReset+0x34>

  return HAL_OK;
 800cee4:	2300      	movs	r3, #0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3714      	adds	r7, #20
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop
 800cef4:	00030d40 	.word	0x00030d40

0800cef8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	460b      	mov	r3, r1
 800cf02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cf04:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cf08:	f004 fef2 	bl	8011cf0 <USBD_static_malloc>
 800cf0c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d105      	bne.n	800cf20 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cf1c:	2302      	movs	r3, #2
 800cf1e:	e066      	b.n	800cfee <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	68fa      	ldr	r2, [r7, #12]
 800cf24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	7c1b      	ldrb	r3, [r3, #16]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d119      	bne.n	800cf64 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cf30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf34:	2202      	movs	r2, #2
 800cf36:	2181      	movs	r1, #129	; 0x81
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f004 fdb6 	bl	8011aaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2201      	movs	r2, #1
 800cf42:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cf44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf48:	2202      	movs	r2, #2
 800cf4a:	2101      	movs	r1, #1
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f004 fdac 	bl	8011aaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2201      	movs	r2, #1
 800cf56:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2210      	movs	r2, #16
 800cf5e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cf62:	e016      	b.n	800cf92 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cf64:	2340      	movs	r3, #64	; 0x40
 800cf66:	2202      	movs	r2, #2
 800cf68:	2181      	movs	r1, #129	; 0x81
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f004 fd9d 	bl	8011aaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cf76:	2340      	movs	r3, #64	; 0x40
 800cf78:	2202      	movs	r2, #2
 800cf7a:	2101      	movs	r1, #1
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f004 fd94 	bl	8011aaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2210      	movs	r2, #16
 800cf8e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cf92:	2308      	movs	r3, #8
 800cf94:	2203      	movs	r2, #3
 800cf96:	2182      	movs	r1, #130	; 0x82
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f004 fd86 	bl	8011aaa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	7c1b      	ldrb	r3, [r3, #16]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d109      	bne.n	800cfdc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cfce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfd2:	2101      	movs	r1, #1
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f004 fe57 	bl	8011c88 <USBD_LL_PrepareReceive>
 800cfda:	e007      	b.n	800cfec <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cfe2:	2340      	movs	r3, #64	; 0x40
 800cfe4:	2101      	movs	r1, #1
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f004 fe4e 	bl	8011c88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cfec:	2300      	movs	r3, #0
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3710      	adds	r7, #16
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}

0800cff6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cff6:	b580      	push	{r7, lr}
 800cff8:	b082      	sub	sp, #8
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6078      	str	r0, [r7, #4]
 800cffe:	460b      	mov	r3, r1
 800d000:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d002:	2181      	movs	r1, #129	; 0x81
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f004 fd76 	bl	8011af6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d010:	2101      	movs	r1, #1
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f004 fd6f 	bl	8011af6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d020:	2182      	movs	r1, #130	; 0x82
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f004 fd67 	bl	8011af6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2200      	movs	r2, #0
 800d034:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d00e      	beq.n	800d060 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d052:	4618      	mov	r0, r3
 800d054:	f004 fe5a 	bl	8011d0c <USBD_static_free>
    pdev->pClassData = NULL;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d060:	2300      	movs	r3, #0
}
 800d062:	4618      	mov	r0, r3
 800d064:	3708      	adds	r7, #8
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
	...

0800d06c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b086      	sub	sp, #24
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d07c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d07e:	2300      	movs	r3, #0
 800d080:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d082:	2300      	movs	r3, #0
 800d084:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d086:	2300      	movs	r3, #0
 800d088:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d101      	bne.n	800d094 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d090:	2303      	movs	r3, #3
 800d092:	e0af      	b.n	800d1f4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d03f      	beq.n	800d120 <USBD_CDC_Setup+0xb4>
 800d0a0:	2b20      	cmp	r3, #32
 800d0a2:	f040 809f 	bne.w	800d1e4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	88db      	ldrh	r3, [r3, #6]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d02e      	beq.n	800d10c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	b25b      	sxtb	r3, r3
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	da16      	bge.n	800d0e6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	683a      	ldr	r2, [r7, #0]
 800d0c2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d0c4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d0c6:	683a      	ldr	r2, [r7, #0]
 800d0c8:	88d2      	ldrh	r2, [r2, #6]
 800d0ca:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	88db      	ldrh	r3, [r3, #6]
 800d0d0:	2b07      	cmp	r3, #7
 800d0d2:	bf28      	it	cs
 800d0d4:	2307      	movcs	r3, #7
 800d0d6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	89fa      	ldrh	r2, [r7, #14]
 800d0dc:	4619      	mov	r1, r3
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f001 fb19 	bl	800e716 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d0e4:	e085      	b.n	800d1f2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	785a      	ldrb	r2, [r3, #1]
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	88db      	ldrh	r3, [r3, #6]
 800d0f4:	b2da      	uxtb	r2, r3
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d0fc:	6939      	ldr	r1, [r7, #16]
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	88db      	ldrh	r3, [r3, #6]
 800d102:	461a      	mov	r2, r3
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f001 fb32 	bl	800e76e <USBD_CtlPrepareRx>
      break;
 800d10a:	e072      	b.n	800d1f2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	683a      	ldr	r2, [r7, #0]
 800d116:	7850      	ldrb	r0, [r2, #1]
 800d118:	2200      	movs	r2, #0
 800d11a:	6839      	ldr	r1, [r7, #0]
 800d11c:	4798      	blx	r3
      break;
 800d11e:	e068      	b.n	800d1f2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	785b      	ldrb	r3, [r3, #1]
 800d124:	2b0b      	cmp	r3, #11
 800d126:	d852      	bhi.n	800d1ce <USBD_CDC_Setup+0x162>
 800d128:	a201      	add	r2, pc, #4	; (adr r2, 800d130 <USBD_CDC_Setup+0xc4>)
 800d12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d12e:	bf00      	nop
 800d130:	0800d161 	.word	0x0800d161
 800d134:	0800d1dd 	.word	0x0800d1dd
 800d138:	0800d1cf 	.word	0x0800d1cf
 800d13c:	0800d1cf 	.word	0x0800d1cf
 800d140:	0800d1cf 	.word	0x0800d1cf
 800d144:	0800d1cf 	.word	0x0800d1cf
 800d148:	0800d1cf 	.word	0x0800d1cf
 800d14c:	0800d1cf 	.word	0x0800d1cf
 800d150:	0800d1cf 	.word	0x0800d1cf
 800d154:	0800d1cf 	.word	0x0800d1cf
 800d158:	0800d18b 	.word	0x0800d18b
 800d15c:	0800d1b5 	.word	0x0800d1b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d166:	b2db      	uxtb	r3, r3
 800d168:	2b03      	cmp	r3, #3
 800d16a:	d107      	bne.n	800d17c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d16c:	f107 030a 	add.w	r3, r7, #10
 800d170:	2202      	movs	r2, #2
 800d172:	4619      	mov	r1, r3
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f001 face 	bl	800e716 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d17a:	e032      	b.n	800d1e2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d17c:	6839      	ldr	r1, [r7, #0]
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f001 fa58 	bl	800e634 <USBD_CtlError>
            ret = USBD_FAIL;
 800d184:	2303      	movs	r3, #3
 800d186:	75fb      	strb	r3, [r7, #23]
          break;
 800d188:	e02b      	b.n	800d1e2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d190:	b2db      	uxtb	r3, r3
 800d192:	2b03      	cmp	r3, #3
 800d194:	d107      	bne.n	800d1a6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d196:	f107 030d 	add.w	r3, r7, #13
 800d19a:	2201      	movs	r2, #1
 800d19c:	4619      	mov	r1, r3
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f001 fab9 	bl	800e716 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d1a4:	e01d      	b.n	800d1e2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d1a6:	6839      	ldr	r1, [r7, #0]
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f001 fa43 	bl	800e634 <USBD_CtlError>
            ret = USBD_FAIL;
 800d1ae:	2303      	movs	r3, #3
 800d1b0:	75fb      	strb	r3, [r7, #23]
          break;
 800d1b2:	e016      	b.n	800d1e2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	2b03      	cmp	r3, #3
 800d1be:	d00f      	beq.n	800d1e0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d1c0:	6839      	ldr	r1, [r7, #0]
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f001 fa36 	bl	800e634 <USBD_CtlError>
            ret = USBD_FAIL;
 800d1c8:	2303      	movs	r3, #3
 800d1ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d1cc:	e008      	b.n	800d1e0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d1ce:	6839      	ldr	r1, [r7, #0]
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f001 fa2f 	bl	800e634 <USBD_CtlError>
          ret = USBD_FAIL;
 800d1d6:	2303      	movs	r3, #3
 800d1d8:	75fb      	strb	r3, [r7, #23]
          break;
 800d1da:	e002      	b.n	800d1e2 <USBD_CDC_Setup+0x176>
          break;
 800d1dc:	bf00      	nop
 800d1de:	e008      	b.n	800d1f2 <USBD_CDC_Setup+0x186>
          break;
 800d1e0:	bf00      	nop
      }
      break;
 800d1e2:	e006      	b.n	800d1f2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d1e4:	6839      	ldr	r1, [r7, #0]
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f001 fa24 	bl	800e634 <USBD_CtlError>
      ret = USBD_FAIL;
 800d1ec:	2303      	movs	r3, #3
 800d1ee:	75fb      	strb	r3, [r7, #23]
      break;
 800d1f0:	bf00      	nop
  }

  return (uint8_t)ret;
 800d1f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3718      	adds	r7, #24
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	460b      	mov	r3, r1
 800d206:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d20e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d216:	2b00      	cmp	r3, #0
 800d218:	d101      	bne.n	800d21e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d21a:	2303      	movs	r3, #3
 800d21c:	e04f      	b.n	800d2be <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d224:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d226:	78fa      	ldrb	r2, [r7, #3]
 800d228:	6879      	ldr	r1, [r7, #4]
 800d22a:	4613      	mov	r3, r2
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	4413      	add	r3, r2
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	440b      	add	r3, r1
 800d234:	3318      	adds	r3, #24
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d029      	beq.n	800d290 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d23c:	78fa      	ldrb	r2, [r7, #3]
 800d23e:	6879      	ldr	r1, [r7, #4]
 800d240:	4613      	mov	r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4413      	add	r3, r2
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	440b      	add	r3, r1
 800d24a:	3318      	adds	r3, #24
 800d24c:	681a      	ldr	r2, [r3, #0]
 800d24e:	78f9      	ldrb	r1, [r7, #3]
 800d250:	68f8      	ldr	r0, [r7, #12]
 800d252:	460b      	mov	r3, r1
 800d254:	00db      	lsls	r3, r3, #3
 800d256:	1a5b      	subs	r3, r3, r1
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	4403      	add	r3, r0
 800d25c:	3344      	adds	r3, #68	; 0x44
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	fbb2 f1f3 	udiv	r1, r2, r3
 800d264:	fb03 f301 	mul.w	r3, r3, r1
 800d268:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d110      	bne.n	800d290 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d26e:	78fa      	ldrb	r2, [r7, #3]
 800d270:	6879      	ldr	r1, [r7, #4]
 800d272:	4613      	mov	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	440b      	add	r3, r1
 800d27c:	3318      	adds	r3, #24
 800d27e:	2200      	movs	r2, #0
 800d280:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d282:	78f9      	ldrb	r1, [r7, #3]
 800d284:	2300      	movs	r3, #0
 800d286:	2200      	movs	r2, #0
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f004 fcdc 	bl	8011c46 <USBD_LL_Transmit>
 800d28e:	e015      	b.n	800d2bc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	2200      	movs	r2, #0
 800d294:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d29e:	691b      	ldr	r3, [r3, #16]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d00b      	beq.n	800d2bc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2aa:	691b      	ldr	r3, [r3, #16]
 800d2ac:	68ba      	ldr	r2, [r7, #8]
 800d2ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d2b2:	68ba      	ldr	r2, [r7, #8]
 800d2b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d2b8:	78fa      	ldrb	r2, [r7, #3]
 800d2ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d2bc:	2300      	movs	r3, #0
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b084      	sub	sp, #16
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d101      	bne.n	800d2e8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d2e4:	2303      	movs	r3, #3
 800d2e6:	e015      	b.n	800d314 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d2e8:	78fb      	ldrb	r3, [r7, #3]
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f004 fcec 	bl	8011cca <USBD_LL_GetRxDataSize>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	68fa      	ldr	r2, [r7, #12]
 800d304:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d30e:	4611      	mov	r1, r2
 800d310:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3710      	adds	r7, #16
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d32a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d101      	bne.n	800d336 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d332:	2303      	movs	r3, #3
 800d334:	e01b      	b.n	800d36e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d015      	beq.n	800d36c <USBD_CDC_EP0_RxReady+0x50>
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d346:	2bff      	cmp	r3, #255	; 0xff
 800d348:	d010      	beq.n	800d36c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	68fa      	ldr	r2, [r7, #12]
 800d354:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d358:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d35a:	68fa      	ldr	r2, [r7, #12]
 800d35c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d360:	b292      	uxth	r2, r2
 800d362:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	22ff      	movs	r2, #255	; 0xff
 800d368:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
	...

0800d378 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2243      	movs	r2, #67	; 0x43
 800d384:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d386:	4b03      	ldr	r3, [pc, #12]	; (800d394 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d388:	4618      	mov	r0, r3
 800d38a:	370c      	adds	r7, #12
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr
 800d394:	200000a0 	.word	0x200000a0

0800d398 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d398:	b480      	push	{r7}
 800d39a:	b083      	sub	sp, #12
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2243      	movs	r2, #67	; 0x43
 800d3a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d3a6:	4b03      	ldr	r3, [pc, #12]	; (800d3b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	370c      	adds	r7, #12
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr
 800d3b4:	2000005c 	.word	0x2000005c

0800d3b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2243      	movs	r2, #67	; 0x43
 800d3c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d3c6:	4b03      	ldr	r3, [pc, #12]	; (800d3d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	370c      	adds	r7, #12
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr
 800d3d4:	200000e4 	.word	0x200000e4

0800d3d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b083      	sub	sp, #12
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	220a      	movs	r2, #10
 800d3e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d3e6:	4b03      	ldr	r3, [pc, #12]	; (800d3f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	370c      	adds	r7, #12
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr
 800d3f4:	20000018 	.word	0x20000018

0800d3f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d101      	bne.n	800d40c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d408:	2303      	movs	r3, #3
 800d40a:	e004      	b.n	800d416 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	683a      	ldr	r2, [r7, #0]
 800d410:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	370c      	adds	r7, #12
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr

0800d422 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d422:	b480      	push	{r7}
 800d424:	b087      	sub	sp, #28
 800d426:	af00      	add	r7, sp, #0
 800d428:	60f8      	str	r0, [r7, #12]
 800d42a:	60b9      	str	r1, [r7, #8]
 800d42c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d434:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d101      	bne.n	800d440 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d43c:	2303      	movs	r3, #3
 800d43e:	e008      	b.n	800d452 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	68ba      	ldr	r2, [r7, #8]
 800d444:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	371c      	adds	r7, #28
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr

0800d45e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d45e:	b480      	push	{r7}
 800d460:	b085      	sub	sp, #20
 800d462:	af00      	add	r7, sp, #0
 800d464:	6078      	str	r0, [r7, #4]
 800d466:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d46e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d476:	2303      	movs	r3, #3
 800d478:	e004      	b.n	800d484 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	683a      	ldr	r2, [r7, #0]
 800d47e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d482:	2300      	movs	r3, #0
}
 800d484:	4618      	mov	r0, r3
 800d486:	3714      	adds	r7, #20
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d49e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d101      	bne.n	800d4b2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d4ae:	2303      	movs	r3, #3
 800d4b0:	e01a      	b.n	800d4e8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d114      	bne.n	800d4e6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d4da:	2181      	movs	r1, #129	; 0x81
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f004 fbb2 	bl	8011c46 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d506:	2b00      	cmp	r3, #0
 800d508:	d101      	bne.n	800d50e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d50a:	2303      	movs	r3, #3
 800d50c:	e016      	b.n	800d53c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	7c1b      	ldrb	r3, [r3, #16]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d109      	bne.n	800d52a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d51c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d520:	2101      	movs	r1, #1
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f004 fbb0 	bl	8011c88 <USBD_LL_PrepareReceive>
 800d528:	e007      	b.n	800d53a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d530:	2340      	movs	r3, #64	; 0x40
 800d532:	2101      	movs	r1, #1
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f004 fba7 	bl	8011c88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d53a:	2300      	movs	r3, #0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3710      	adds	r7, #16
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b086      	sub	sp, #24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	4613      	mov	r3, r2
 800d550:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d101      	bne.n	800d55c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d558:	2303      	movs	r3, #3
 800d55a:	e01f      	b.n	800d59c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2200      	movs	r2, #0
 800d560:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2200      	movs	r2, #0
 800d568:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2200      	movs	r2, #0
 800d570:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d003      	beq.n	800d582 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	68ba      	ldr	r2, [r7, #8]
 800d57e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2201      	movs	r2, #1
 800d586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	79fa      	ldrb	r2, [r7, #7]
 800d58e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d590:	68f8      	ldr	r0, [r7, #12]
 800d592:	f004 fa23 	bl	80119dc <USBD_LL_Init>
 800d596:	4603      	mov	r3, r0
 800d598:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3718      	adds	r7, #24
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d101      	bne.n	800d5bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	e016      	b.n	800d5ea <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00b      	beq.n	800d5e8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d8:	f107 020e 	add.w	r2, r7, #14
 800d5dc:	4610      	mov	r0, r2
 800d5de:	4798      	blx	r3
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d5e8:	2300      	movs	r3, #0
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3710      	adds	r7, #16
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b082      	sub	sp, #8
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f004 fa3a 	bl	8011a74 <USBD_LL_Start>
 800d600:	4603      	mov	r3, r0
}
 800d602:	4618      	mov	r0, r3
 800d604:	3708      	adds	r7, #8
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d60a:	b480      	push	{r7}
 800d60c:	b083      	sub	sp, #12
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d612:	2300      	movs	r3, #0
}
 800d614:	4618      	mov	r0, r3
 800d616:	370c      	adds	r7, #12
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr

0800d620 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	460b      	mov	r3, r1
 800d62a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d62c:	2303      	movs	r3, #3
 800d62e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d636:	2b00      	cmp	r3, #0
 800d638:	d009      	beq.n	800d64e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	78fa      	ldrb	r2, [r7, #3]
 800d644:	4611      	mov	r1, r2
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	4798      	blx	r3
 800d64a:	4603      	mov	r3, r0
 800d64c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3710      	adds	r7, #16
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	460b      	mov	r3, r1
 800d662:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d007      	beq.n	800d67e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	78fa      	ldrb	r2, [r7, #3]
 800d678:	4611      	mov	r1, r2
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	4798      	blx	r3
  }

  return USBD_OK;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d698:	6839      	ldr	r1, [r7, #0]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f000 ff90 	bl	800e5c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d6bc:	f003 031f 	and.w	r3, r3, #31
 800d6c0:	2b02      	cmp	r3, #2
 800d6c2:	d01a      	beq.n	800d6fa <USBD_LL_SetupStage+0x72>
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d822      	bhi.n	800d70e <USBD_LL_SetupStage+0x86>
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d002      	beq.n	800d6d2 <USBD_LL_SetupStage+0x4a>
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d00a      	beq.n	800d6e6 <USBD_LL_SetupStage+0x5e>
 800d6d0:	e01d      	b.n	800d70e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d6d8:	4619      	mov	r1, r3
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 fa62 	bl	800dba4 <USBD_StdDevReq>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	73fb      	strb	r3, [r7, #15]
      break;
 800d6e4:	e020      	b.n	800d728 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 fac6 	bl	800dc80 <USBD_StdItfReq>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	73fb      	strb	r3, [r7, #15]
      break;
 800d6f8:	e016      	b.n	800d728 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d700:	4619      	mov	r1, r3
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 fb05 	bl	800dd12 <USBD_StdEPReq>
 800d708:	4603      	mov	r3, r0
 800d70a:	73fb      	strb	r3, [r7, #15]
      break;
 800d70c:	e00c      	b.n	800d728 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d714:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	4619      	mov	r1, r3
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f004 fa09 	bl	8011b34 <USBD_LL_StallEP>
 800d722:	4603      	mov	r3, r0
 800d724:	73fb      	strb	r3, [r7, #15]
      break;
 800d726:	bf00      	nop
  }

  return ret;
 800d728:	7bfb      	ldrb	r3, [r7, #15]
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b086      	sub	sp, #24
 800d736:	af00      	add	r7, sp, #0
 800d738:	60f8      	str	r0, [r7, #12]
 800d73a:	460b      	mov	r3, r1
 800d73c:	607a      	str	r2, [r7, #4]
 800d73e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d740:	7afb      	ldrb	r3, [r7, #11]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d138      	bne.n	800d7b8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d74c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d754:	2b03      	cmp	r3, #3
 800d756:	d14a      	bne.n	800d7ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	689a      	ldr	r2, [r3, #8]
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	429a      	cmp	r2, r3
 800d762:	d913      	bls.n	800d78c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	689a      	ldr	r2, [r3, #8]
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	1ad2      	subs	r2, r2, r3
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	68da      	ldr	r2, [r3, #12]
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	4293      	cmp	r3, r2
 800d77c:	bf28      	it	cs
 800d77e:	4613      	movcs	r3, r2
 800d780:	461a      	mov	r2, r3
 800d782:	6879      	ldr	r1, [r7, #4]
 800d784:	68f8      	ldr	r0, [r7, #12]
 800d786:	f001 f80f 	bl	800e7a8 <USBD_CtlContinueRx>
 800d78a:	e030      	b.n	800d7ee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d792:	b2db      	uxtb	r3, r3
 800d794:	2b03      	cmp	r3, #3
 800d796:	d10b      	bne.n	800d7b0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d79e:	691b      	ldr	r3, [r3, #16]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d005      	beq.n	800d7b0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7aa:	691b      	ldr	r3, [r3, #16]
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d7b0:	68f8      	ldr	r0, [r7, #12]
 800d7b2:	f001 f80a 	bl	800e7ca <USBD_CtlSendStatus>
 800d7b6:	e01a      	b.n	800d7ee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	2b03      	cmp	r3, #3
 800d7c2:	d114      	bne.n	800d7ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7ca:	699b      	ldr	r3, [r3, #24]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d00e      	beq.n	800d7ee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7d6:	699b      	ldr	r3, [r3, #24]
 800d7d8:	7afa      	ldrb	r2, [r7, #11]
 800d7da:	4611      	mov	r1, r2
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	4798      	blx	r3
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d7e4:	7dfb      	ldrb	r3, [r7, #23]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d001      	beq.n	800d7ee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d7ea:	7dfb      	ldrb	r3, [r7, #23]
 800d7ec:	e000      	b.n	800d7f0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d7ee:	2300      	movs	r3, #0
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3718      	adds	r7, #24
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b086      	sub	sp, #24
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	460b      	mov	r3, r1
 800d802:	607a      	str	r2, [r7, #4]
 800d804:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d806:	7afb      	ldrb	r3, [r7, #11]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d16b      	bne.n	800d8e4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	3314      	adds	r3, #20
 800d810:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d818:	2b02      	cmp	r3, #2
 800d81a:	d156      	bne.n	800d8ca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	689a      	ldr	r2, [r3, #8]
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	429a      	cmp	r2, r3
 800d826:	d914      	bls.n	800d852 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	689a      	ldr	r2, [r3, #8]
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	68db      	ldr	r3, [r3, #12]
 800d830:	1ad2      	subs	r2, r2, r3
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	689b      	ldr	r3, [r3, #8]
 800d83a:	461a      	mov	r2, r3
 800d83c:	6879      	ldr	r1, [r7, #4]
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	f000 ff84 	bl	800e74c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d844:	2300      	movs	r3, #0
 800d846:	2200      	movs	r2, #0
 800d848:	2100      	movs	r1, #0
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f004 fa1c 	bl	8011c88 <USBD_LL_PrepareReceive>
 800d850:	e03b      	b.n	800d8ca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	68da      	ldr	r2, [r3, #12]
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d11c      	bne.n	800d898 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	685a      	ldr	r2, [r3, #4]
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d866:	429a      	cmp	r2, r3
 800d868:	d316      	bcc.n	800d898 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	685a      	ldr	r2, [r3, #4]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d874:	429a      	cmp	r2, r3
 800d876:	d20f      	bcs.n	800d898 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d878:	2200      	movs	r2, #0
 800d87a:	2100      	movs	r1, #0
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	f000 ff65 	bl	800e74c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2200      	movs	r2, #0
 800d886:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d88a:	2300      	movs	r3, #0
 800d88c:	2200      	movs	r2, #0
 800d88e:	2100      	movs	r1, #0
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f004 f9f9 	bl	8011c88 <USBD_LL_PrepareReceive>
 800d896:	e018      	b.n	800d8ca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	2b03      	cmp	r3, #3
 800d8a2:	d10b      	bne.n	800d8bc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8aa:	68db      	ldr	r3, [r3, #12]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d005      	beq.n	800d8bc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8b6:	68db      	ldr	r3, [r3, #12]
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8bc:	2180      	movs	r1, #128	; 0x80
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	f004 f938 	bl	8011b34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f000 ff93 	bl	800e7f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d122      	bne.n	800d91a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f7ff fe98 	bl	800d60a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d8e2:	e01a      	b.n	800d91a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	2b03      	cmp	r3, #3
 800d8ee:	d114      	bne.n	800d91a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8f6:	695b      	ldr	r3, [r3, #20]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00e      	beq.n	800d91a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d902:	695b      	ldr	r3, [r3, #20]
 800d904:	7afa      	ldrb	r2, [r7, #11]
 800d906:	4611      	mov	r1, r2
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	4798      	blx	r3
 800d90c:	4603      	mov	r3, r0
 800d90e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d910:	7dfb      	ldrb	r3, [r7, #23]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d001      	beq.n	800d91a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d916:	7dfb      	ldrb	r3, [r7, #23]
 800d918:	e000      	b.n	800d91c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d91a:	2300      	movs	r3, #0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3718      	adds	r7, #24
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2201      	movs	r2, #1
 800d930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2200      	movs	r2, #0
 800d940:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2200      	movs	r2, #0
 800d946:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d950:	2b00      	cmp	r3, #0
 800d952:	d101      	bne.n	800d958 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d954:	2303      	movs	r3, #3
 800d956:	e02f      	b.n	800d9b8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00f      	beq.n	800d982 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d009      	beq.n	800d982 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	687a      	ldr	r2, [r7, #4]
 800d978:	6852      	ldr	r2, [r2, #4]
 800d97a:	b2d2      	uxtb	r2, r2
 800d97c:	4611      	mov	r1, r2
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d982:	2340      	movs	r3, #64	; 0x40
 800d984:	2200      	movs	r2, #0
 800d986:	2100      	movs	r1, #0
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f004 f88e 	bl	8011aaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2201      	movs	r2, #1
 800d992:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2240      	movs	r2, #64	; 0x40
 800d99a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d99e:	2340      	movs	r3, #64	; 0x40
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	2180      	movs	r1, #128	; 0x80
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f004 f880 	bl	8011aaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2240      	movs	r2, #64	; 0x40
 800d9b4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d9b6:	2300      	movs	r3, #0
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3708      	adds	r7, #8
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b083      	sub	sp, #12
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	78fa      	ldrb	r2, [r7, #3]
 800d9d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d9d2:	2300      	movs	r3, #0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	370c      	adds	r7, #12
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9ee:	b2da      	uxtb	r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2204      	movs	r2, #4
 800d9fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d9fe:	2300      	movs	r3, #0
}
 800da00:	4618      	mov	r0, r3
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b083      	sub	sp, #12
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	2b04      	cmp	r3, #4
 800da1e:	d106      	bne.n	800da2e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800da26:	b2da      	uxtb	r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800da2e:	2300      	movs	r3, #0
}
 800da30:	4618      	mov	r0, r3
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d101      	bne.n	800da52 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800da4e:	2303      	movs	r3, #3
 800da50:	e012      	b.n	800da78 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	2b03      	cmp	r3, #3
 800da5c:	d10b      	bne.n	800da76 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da64:	69db      	ldr	r3, [r3, #28]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d005      	beq.n	800da76 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da70:	69db      	ldr	r3, [r3, #28]
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da76:	2300      	movs	r3, #0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3708      	adds	r7, #8
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b082      	sub	sp, #8
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	460b      	mov	r3, r1
 800da8a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da92:	2b00      	cmp	r3, #0
 800da94:	d101      	bne.n	800da9a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800da96:	2303      	movs	r3, #3
 800da98:	e014      	b.n	800dac4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	2b03      	cmp	r3, #3
 800daa4:	d10d      	bne.n	800dac2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daac:	6a1b      	ldr	r3, [r3, #32]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d007      	beq.n	800dac2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dab8:	6a1b      	ldr	r3, [r3, #32]
 800daba:	78fa      	ldrb	r2, [r7, #3]
 800dabc:	4611      	mov	r1, r2
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dac2:	2300      	movs	r3, #0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3708      	adds	r7, #8
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	460b      	mov	r3, r1
 800dad6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d101      	bne.n	800dae6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800dae2:	2303      	movs	r3, #3
 800dae4:	e014      	b.n	800db10 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daec:	b2db      	uxtb	r3, r3
 800daee:	2b03      	cmp	r3, #3
 800daf0:	d10d      	bne.n	800db0e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d007      	beq.n	800db0e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db06:	78fa      	ldrb	r2, [r7, #3]
 800db08:	4611      	mov	r1, r2
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800db0e:	2300      	movs	r3, #0
}
 800db10:	4618      	mov	r0, r3
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800db20:	2300      	movs	r3, #0
}
 800db22:	4618      	mov	r0, r3
 800db24:	370c      	adds	r7, #12
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr

0800db2e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800db2e:	b580      	push	{r7, lr}
 800db30:	b082      	sub	sp, #8
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2201      	movs	r2, #1
 800db3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db44:	2b00      	cmp	r3, #0
 800db46:	d009      	beq.n	800db5c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	6852      	ldr	r2, [r2, #4]
 800db54:	b2d2      	uxtb	r2, r2
 800db56:	4611      	mov	r1, r2
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	4798      	blx	r3
  }

  return USBD_OK;
 800db5c:	2300      	movs	r3, #0
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3708      	adds	r7, #8
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800db66:	b480      	push	{r7}
 800db68:	b087      	sub	sp, #28
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	3301      	adds	r3, #1
 800db7c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800db84:	8a3b      	ldrh	r3, [r7, #16]
 800db86:	021b      	lsls	r3, r3, #8
 800db88:	b21a      	sxth	r2, r3
 800db8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800db8e:	4313      	orrs	r3, r2
 800db90:	b21b      	sxth	r3, r3
 800db92:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800db94:	89fb      	ldrh	r3, [r7, #14]
}
 800db96:	4618      	mov	r0, r3
 800db98:	371c      	adds	r7, #28
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr
	...

0800dba4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dbba:	2b40      	cmp	r3, #64	; 0x40
 800dbbc:	d005      	beq.n	800dbca <USBD_StdDevReq+0x26>
 800dbbe:	2b40      	cmp	r3, #64	; 0x40
 800dbc0:	d853      	bhi.n	800dc6a <USBD_StdDevReq+0xc6>
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d00b      	beq.n	800dbde <USBD_StdDevReq+0x3a>
 800dbc6:	2b20      	cmp	r3, #32
 800dbc8:	d14f      	bne.n	800dc6a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbd0:	689b      	ldr	r3, [r3, #8]
 800dbd2:	6839      	ldr	r1, [r7, #0]
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	4798      	blx	r3
 800dbd8:	4603      	mov	r3, r0
 800dbda:	73fb      	strb	r3, [r7, #15]
      break;
 800dbdc:	e04a      	b.n	800dc74 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	785b      	ldrb	r3, [r3, #1]
 800dbe2:	2b09      	cmp	r3, #9
 800dbe4:	d83b      	bhi.n	800dc5e <USBD_StdDevReq+0xba>
 800dbe6:	a201      	add	r2, pc, #4	; (adr r2, 800dbec <USBD_StdDevReq+0x48>)
 800dbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbec:	0800dc41 	.word	0x0800dc41
 800dbf0:	0800dc55 	.word	0x0800dc55
 800dbf4:	0800dc5f 	.word	0x0800dc5f
 800dbf8:	0800dc4b 	.word	0x0800dc4b
 800dbfc:	0800dc5f 	.word	0x0800dc5f
 800dc00:	0800dc1f 	.word	0x0800dc1f
 800dc04:	0800dc15 	.word	0x0800dc15
 800dc08:	0800dc5f 	.word	0x0800dc5f
 800dc0c:	0800dc37 	.word	0x0800dc37
 800dc10:	0800dc29 	.word	0x0800dc29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dc14:	6839      	ldr	r1, [r7, #0]
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 f9de 	bl	800dfd8 <USBD_GetDescriptor>
          break;
 800dc1c:	e024      	b.n	800dc68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dc1e:	6839      	ldr	r1, [r7, #0]
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 fb43 	bl	800e2ac <USBD_SetAddress>
          break;
 800dc26:	e01f      	b.n	800dc68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dc28:	6839      	ldr	r1, [r7, #0]
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 fb82 	bl	800e334 <USBD_SetConfig>
 800dc30:	4603      	mov	r3, r0
 800dc32:	73fb      	strb	r3, [r7, #15]
          break;
 800dc34:	e018      	b.n	800dc68 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dc36:	6839      	ldr	r1, [r7, #0]
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 fc21 	bl	800e480 <USBD_GetConfig>
          break;
 800dc3e:	e013      	b.n	800dc68 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dc40:	6839      	ldr	r1, [r7, #0]
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 fc52 	bl	800e4ec <USBD_GetStatus>
          break;
 800dc48:	e00e      	b.n	800dc68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dc4a:	6839      	ldr	r1, [r7, #0]
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 fc81 	bl	800e554 <USBD_SetFeature>
          break;
 800dc52:	e009      	b.n	800dc68 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dc54:	6839      	ldr	r1, [r7, #0]
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 fc90 	bl	800e57c <USBD_ClrFeature>
          break;
 800dc5c:	e004      	b.n	800dc68 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800dc5e:	6839      	ldr	r1, [r7, #0]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 fce7 	bl	800e634 <USBD_CtlError>
          break;
 800dc66:	bf00      	nop
      }
      break;
 800dc68:	e004      	b.n	800dc74 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dc6a:	6839      	ldr	r1, [r7, #0]
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 fce1 	bl	800e634 <USBD_CtlError>
      break;
 800dc72:	bf00      	nop
  }

  return ret;
 800dc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop

0800dc80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc96:	2b40      	cmp	r3, #64	; 0x40
 800dc98:	d005      	beq.n	800dca6 <USBD_StdItfReq+0x26>
 800dc9a:	2b40      	cmp	r3, #64	; 0x40
 800dc9c:	d82f      	bhi.n	800dcfe <USBD_StdItfReq+0x7e>
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d001      	beq.n	800dca6 <USBD_StdItfReq+0x26>
 800dca2:	2b20      	cmp	r3, #32
 800dca4:	d12b      	bne.n	800dcfe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	3b01      	subs	r3, #1
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	d81d      	bhi.n	800dcf0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	889b      	ldrh	r3, [r3, #4]
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d813      	bhi.n	800dce6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	6839      	ldr	r1, [r7, #0]
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	4798      	blx	r3
 800dccc:	4603      	mov	r3, r0
 800dcce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	88db      	ldrh	r3, [r3, #6]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d110      	bne.n	800dcfa <USBD_StdItfReq+0x7a>
 800dcd8:	7bfb      	ldrb	r3, [r7, #15]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d10d      	bne.n	800dcfa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 fd73 	bl	800e7ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dce4:	e009      	b.n	800dcfa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800dce6:	6839      	ldr	r1, [r7, #0]
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 fca3 	bl	800e634 <USBD_CtlError>
          break;
 800dcee:	e004      	b.n	800dcfa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800dcf0:	6839      	ldr	r1, [r7, #0]
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 fc9e 	bl	800e634 <USBD_CtlError>
          break;
 800dcf8:	e000      	b.n	800dcfc <USBD_StdItfReq+0x7c>
          break;
 800dcfa:	bf00      	nop
      }
      break;
 800dcfc:	e004      	b.n	800dd08 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800dcfe:	6839      	ldr	r1, [r7, #0]
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 fc97 	bl	800e634 <USBD_CtlError>
      break;
 800dd06:	bf00      	nop
  }

  return ret;
 800dd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b084      	sub	sp, #16
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
 800dd1a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	889b      	ldrh	r3, [r3, #4]
 800dd24:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd2e:	2b40      	cmp	r3, #64	; 0x40
 800dd30:	d007      	beq.n	800dd42 <USBD_StdEPReq+0x30>
 800dd32:	2b40      	cmp	r3, #64	; 0x40
 800dd34:	f200 8145 	bhi.w	800dfc2 <USBD_StdEPReq+0x2b0>
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d00c      	beq.n	800dd56 <USBD_StdEPReq+0x44>
 800dd3c:	2b20      	cmp	r3, #32
 800dd3e:	f040 8140 	bne.w	800dfc2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd48:	689b      	ldr	r3, [r3, #8]
 800dd4a:	6839      	ldr	r1, [r7, #0]
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	4798      	blx	r3
 800dd50:	4603      	mov	r3, r0
 800dd52:	73fb      	strb	r3, [r7, #15]
      break;
 800dd54:	e13a      	b.n	800dfcc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	785b      	ldrb	r3, [r3, #1]
 800dd5a:	2b03      	cmp	r3, #3
 800dd5c:	d007      	beq.n	800dd6e <USBD_StdEPReq+0x5c>
 800dd5e:	2b03      	cmp	r3, #3
 800dd60:	f300 8129 	bgt.w	800dfb6 <USBD_StdEPReq+0x2a4>
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d07f      	beq.n	800de68 <USBD_StdEPReq+0x156>
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	d03c      	beq.n	800dde6 <USBD_StdEPReq+0xd4>
 800dd6c:	e123      	b.n	800dfb6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b02      	cmp	r3, #2
 800dd78:	d002      	beq.n	800dd80 <USBD_StdEPReq+0x6e>
 800dd7a:	2b03      	cmp	r3, #3
 800dd7c:	d016      	beq.n	800ddac <USBD_StdEPReq+0x9a>
 800dd7e:	e02c      	b.n	800ddda <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd80:	7bbb      	ldrb	r3, [r7, #14]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d00d      	beq.n	800dda2 <USBD_StdEPReq+0x90>
 800dd86:	7bbb      	ldrb	r3, [r7, #14]
 800dd88:	2b80      	cmp	r3, #128	; 0x80
 800dd8a:	d00a      	beq.n	800dda2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd8c:	7bbb      	ldrb	r3, [r7, #14]
 800dd8e:	4619      	mov	r1, r3
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f003 fecf 	bl	8011b34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd96:	2180      	movs	r1, #128	; 0x80
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f003 fecb 	bl	8011b34 <USBD_LL_StallEP>
 800dd9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dda0:	e020      	b.n	800dde4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800dda2:	6839      	ldr	r1, [r7, #0]
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f000 fc45 	bl	800e634 <USBD_CtlError>
              break;
 800ddaa:	e01b      	b.n	800dde4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	885b      	ldrh	r3, [r3, #2]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d10e      	bne.n	800ddd2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ddb4:	7bbb      	ldrb	r3, [r7, #14]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00b      	beq.n	800ddd2 <USBD_StdEPReq+0xc0>
 800ddba:	7bbb      	ldrb	r3, [r7, #14]
 800ddbc:	2b80      	cmp	r3, #128	; 0x80
 800ddbe:	d008      	beq.n	800ddd2 <USBD_StdEPReq+0xc0>
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	88db      	ldrh	r3, [r3, #6]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d104      	bne.n	800ddd2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ddc8:	7bbb      	ldrb	r3, [r7, #14]
 800ddca:	4619      	mov	r1, r3
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f003 feb1 	bl	8011b34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f000 fcf9 	bl	800e7ca <USBD_CtlSendStatus>

              break;
 800ddd8:	e004      	b.n	800dde4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ddda:	6839      	ldr	r1, [r7, #0]
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 fc29 	bl	800e634 <USBD_CtlError>
              break;
 800dde2:	bf00      	nop
          }
          break;
 800dde4:	e0ec      	b.n	800dfc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	2b02      	cmp	r3, #2
 800ddf0:	d002      	beq.n	800ddf8 <USBD_StdEPReq+0xe6>
 800ddf2:	2b03      	cmp	r3, #3
 800ddf4:	d016      	beq.n	800de24 <USBD_StdEPReq+0x112>
 800ddf6:	e030      	b.n	800de5a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ddf8:	7bbb      	ldrb	r3, [r7, #14]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00d      	beq.n	800de1a <USBD_StdEPReq+0x108>
 800ddfe:	7bbb      	ldrb	r3, [r7, #14]
 800de00:	2b80      	cmp	r3, #128	; 0x80
 800de02:	d00a      	beq.n	800de1a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800de04:	7bbb      	ldrb	r3, [r7, #14]
 800de06:	4619      	mov	r1, r3
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f003 fe93 	bl	8011b34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800de0e:	2180      	movs	r1, #128	; 0x80
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f003 fe8f 	bl	8011b34 <USBD_LL_StallEP>
 800de16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de18:	e025      	b.n	800de66 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800de1a:	6839      	ldr	r1, [r7, #0]
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 fc09 	bl	800e634 <USBD_CtlError>
              break;
 800de22:	e020      	b.n	800de66 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	885b      	ldrh	r3, [r3, #2]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d11b      	bne.n	800de64 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800de2c:	7bbb      	ldrb	r3, [r7, #14]
 800de2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de32:	2b00      	cmp	r3, #0
 800de34:	d004      	beq.n	800de40 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800de36:	7bbb      	ldrb	r3, [r7, #14]
 800de38:	4619      	mov	r1, r3
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f003 fe99 	bl	8011b72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 fcc2 	bl	800e7ca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	6839      	ldr	r1, [r7, #0]
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	4798      	blx	r3
 800de54:	4603      	mov	r3, r0
 800de56:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800de58:	e004      	b.n	800de64 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800de5a:	6839      	ldr	r1, [r7, #0]
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 fbe9 	bl	800e634 <USBD_CtlError>
              break;
 800de62:	e000      	b.n	800de66 <USBD_StdEPReq+0x154>
              break;
 800de64:	bf00      	nop
          }
          break;
 800de66:	e0ab      	b.n	800dfc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	2b02      	cmp	r3, #2
 800de72:	d002      	beq.n	800de7a <USBD_StdEPReq+0x168>
 800de74:	2b03      	cmp	r3, #3
 800de76:	d032      	beq.n	800dede <USBD_StdEPReq+0x1cc>
 800de78:	e097      	b.n	800dfaa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de7a:	7bbb      	ldrb	r3, [r7, #14]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d007      	beq.n	800de90 <USBD_StdEPReq+0x17e>
 800de80:	7bbb      	ldrb	r3, [r7, #14]
 800de82:	2b80      	cmp	r3, #128	; 0x80
 800de84:	d004      	beq.n	800de90 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800de86:	6839      	ldr	r1, [r7, #0]
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 fbd3 	bl	800e634 <USBD_CtlError>
                break;
 800de8e:	e091      	b.n	800dfb4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de94:	2b00      	cmp	r3, #0
 800de96:	da0b      	bge.n	800deb0 <USBD_StdEPReq+0x19e>
 800de98:	7bbb      	ldrb	r3, [r7, #14]
 800de9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de9e:	4613      	mov	r3, r2
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	4413      	add	r3, r2
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	3310      	adds	r3, #16
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	4413      	add	r3, r2
 800deac:	3304      	adds	r3, #4
 800deae:	e00b      	b.n	800dec8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800deb0:	7bbb      	ldrb	r3, [r7, #14]
 800deb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800deb6:	4613      	mov	r3, r2
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	4413      	add	r3, r2
 800debc:	009b      	lsls	r3, r3, #2
 800debe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	4413      	add	r3, r2
 800dec6:	3304      	adds	r3, #4
 800dec8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	2200      	movs	r2, #0
 800dece:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	2202      	movs	r2, #2
 800ded4:	4619      	mov	r1, r3
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f000 fc1d 	bl	800e716 <USBD_CtlSendData>
              break;
 800dedc:	e06a      	b.n	800dfb4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dede:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	da11      	bge.n	800df0a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dee6:	7bbb      	ldrb	r3, [r7, #14]
 800dee8:	f003 020f 	and.w	r2, r3, #15
 800deec:	6879      	ldr	r1, [r7, #4]
 800deee:	4613      	mov	r3, r2
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	4413      	add	r3, r2
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	440b      	add	r3, r1
 800def8:	3324      	adds	r3, #36	; 0x24
 800defa:	881b      	ldrh	r3, [r3, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d117      	bne.n	800df30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800df00:	6839      	ldr	r1, [r7, #0]
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 fb96 	bl	800e634 <USBD_CtlError>
                  break;
 800df08:	e054      	b.n	800dfb4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800df0a:	7bbb      	ldrb	r3, [r7, #14]
 800df0c:	f003 020f 	and.w	r2, r3, #15
 800df10:	6879      	ldr	r1, [r7, #4]
 800df12:	4613      	mov	r3, r2
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	4413      	add	r3, r2
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	440b      	add	r3, r1
 800df1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800df20:	881b      	ldrh	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d104      	bne.n	800df30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800df26:	6839      	ldr	r1, [r7, #0]
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f000 fb83 	bl	800e634 <USBD_CtlError>
                  break;
 800df2e:	e041      	b.n	800dfb4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df34:	2b00      	cmp	r3, #0
 800df36:	da0b      	bge.n	800df50 <USBD_StdEPReq+0x23e>
 800df38:	7bbb      	ldrb	r3, [r7, #14]
 800df3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df3e:	4613      	mov	r3, r2
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	4413      	add	r3, r2
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	3310      	adds	r3, #16
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	4413      	add	r3, r2
 800df4c:	3304      	adds	r3, #4
 800df4e:	e00b      	b.n	800df68 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df50:	7bbb      	ldrb	r3, [r7, #14]
 800df52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df56:	4613      	mov	r3, r2
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	4413      	add	r3, r2
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	4413      	add	r3, r2
 800df66:	3304      	adds	r3, #4
 800df68:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800df6a:	7bbb      	ldrb	r3, [r7, #14]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <USBD_StdEPReq+0x264>
 800df70:	7bbb      	ldrb	r3, [r7, #14]
 800df72:	2b80      	cmp	r3, #128	; 0x80
 800df74:	d103      	bne.n	800df7e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	2200      	movs	r2, #0
 800df7a:	601a      	str	r2, [r3, #0]
 800df7c:	e00e      	b.n	800df9c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800df7e:	7bbb      	ldrb	r3, [r7, #14]
 800df80:	4619      	mov	r1, r3
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f003 fe14 	bl	8011bb0 <USBD_LL_IsStallEP>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d003      	beq.n	800df96 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	2201      	movs	r2, #1
 800df92:	601a      	str	r2, [r3, #0]
 800df94:	e002      	b.n	800df9c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	2200      	movs	r2, #0
 800df9a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	2202      	movs	r2, #2
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 fbb7 	bl	800e716 <USBD_CtlSendData>
              break;
 800dfa8:	e004      	b.n	800dfb4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800dfaa:	6839      	ldr	r1, [r7, #0]
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 fb41 	bl	800e634 <USBD_CtlError>
              break;
 800dfb2:	bf00      	nop
          }
          break;
 800dfb4:	e004      	b.n	800dfc0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800dfb6:	6839      	ldr	r1, [r7, #0]
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f000 fb3b 	bl	800e634 <USBD_CtlError>
          break;
 800dfbe:	bf00      	nop
      }
      break;
 800dfc0:	e004      	b.n	800dfcc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800dfc2:	6839      	ldr	r1, [r7, #0]
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f000 fb35 	bl	800e634 <USBD_CtlError>
      break;
 800dfca:	bf00      	nop
  }

  return ret;
 800dfcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
	...

0800dfd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dfea:	2300      	movs	r3, #0
 800dfec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	885b      	ldrh	r3, [r3, #2]
 800dff2:	0a1b      	lsrs	r3, r3, #8
 800dff4:	b29b      	uxth	r3, r3
 800dff6:	3b01      	subs	r3, #1
 800dff8:	2b06      	cmp	r3, #6
 800dffa:	f200 8128 	bhi.w	800e24e <USBD_GetDescriptor+0x276>
 800dffe:	a201      	add	r2, pc, #4	; (adr r2, 800e004 <USBD_GetDescriptor+0x2c>)
 800e000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e004:	0800e021 	.word	0x0800e021
 800e008:	0800e039 	.word	0x0800e039
 800e00c:	0800e079 	.word	0x0800e079
 800e010:	0800e24f 	.word	0x0800e24f
 800e014:	0800e24f 	.word	0x0800e24f
 800e018:	0800e1ef 	.word	0x0800e1ef
 800e01c:	0800e21b 	.word	0x0800e21b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	7c12      	ldrb	r2, [r2, #16]
 800e02c:	f107 0108 	add.w	r1, r7, #8
 800e030:	4610      	mov	r0, r2
 800e032:	4798      	blx	r3
 800e034:	60f8      	str	r0, [r7, #12]
      break;
 800e036:	e112      	b.n	800e25e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	7c1b      	ldrb	r3, [r3, #16]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10d      	bne.n	800e05c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e048:	f107 0208 	add.w	r2, r7, #8
 800e04c:	4610      	mov	r0, r2
 800e04e:	4798      	blx	r3
 800e050:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	3301      	adds	r3, #1
 800e056:	2202      	movs	r2, #2
 800e058:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e05a:	e100      	b.n	800e25e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e064:	f107 0208 	add.w	r2, r7, #8
 800e068:	4610      	mov	r0, r2
 800e06a:	4798      	blx	r3
 800e06c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	3301      	adds	r3, #1
 800e072:	2202      	movs	r2, #2
 800e074:	701a      	strb	r2, [r3, #0]
      break;
 800e076:	e0f2      	b.n	800e25e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	885b      	ldrh	r3, [r3, #2]
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	2b05      	cmp	r3, #5
 800e080:	f200 80ac 	bhi.w	800e1dc <USBD_GetDescriptor+0x204>
 800e084:	a201      	add	r2, pc, #4	; (adr r2, 800e08c <USBD_GetDescriptor+0xb4>)
 800e086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e08a:	bf00      	nop
 800e08c:	0800e0a5 	.word	0x0800e0a5
 800e090:	0800e0d9 	.word	0x0800e0d9
 800e094:	0800e10d 	.word	0x0800e10d
 800e098:	0800e141 	.word	0x0800e141
 800e09c:	0800e175 	.word	0x0800e175
 800e0a0:	0800e1a9 	.word	0x0800e1a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d00b      	beq.n	800e0c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	7c12      	ldrb	r2, [r2, #16]
 800e0bc:	f107 0108 	add.w	r1, r7, #8
 800e0c0:	4610      	mov	r0, r2
 800e0c2:	4798      	blx	r3
 800e0c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0c6:	e091      	b.n	800e1ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e0c8:	6839      	ldr	r1, [r7, #0]
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 fab2 	bl	800e634 <USBD_CtlError>
            err++;
 800e0d0:	7afb      	ldrb	r3, [r7, #11]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	72fb      	strb	r3, [r7, #11]
          break;
 800e0d6:	e089      	b.n	800e1ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0de:	689b      	ldr	r3, [r3, #8]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00b      	beq.n	800e0fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ea:	689b      	ldr	r3, [r3, #8]
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	7c12      	ldrb	r2, [r2, #16]
 800e0f0:	f107 0108 	add.w	r1, r7, #8
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	4798      	blx	r3
 800e0f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0fa:	e077      	b.n	800e1ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e0fc:	6839      	ldr	r1, [r7, #0]
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 fa98 	bl	800e634 <USBD_CtlError>
            err++;
 800e104:	7afb      	ldrb	r3, [r7, #11]
 800e106:	3301      	adds	r3, #1
 800e108:	72fb      	strb	r3, [r7, #11]
          break;
 800e10a:	e06f      	b.n	800e1ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d00b      	beq.n	800e130 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	7c12      	ldrb	r2, [r2, #16]
 800e124:	f107 0108 	add.w	r1, r7, #8
 800e128:	4610      	mov	r0, r2
 800e12a:	4798      	blx	r3
 800e12c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e12e:	e05d      	b.n	800e1ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fa7e 	bl	800e634 <USBD_CtlError>
            err++;
 800e138:	7afb      	ldrb	r3, [r7, #11]
 800e13a:	3301      	adds	r3, #1
 800e13c:	72fb      	strb	r3, [r7, #11]
          break;
 800e13e:	e055      	b.n	800e1ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e146:	691b      	ldr	r3, [r3, #16]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d00b      	beq.n	800e164 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e152:	691b      	ldr	r3, [r3, #16]
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	7c12      	ldrb	r2, [r2, #16]
 800e158:	f107 0108 	add.w	r1, r7, #8
 800e15c:	4610      	mov	r0, r2
 800e15e:	4798      	blx	r3
 800e160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e162:	e043      	b.n	800e1ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e164:	6839      	ldr	r1, [r7, #0]
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 fa64 	bl	800e634 <USBD_CtlError>
            err++;
 800e16c:	7afb      	ldrb	r3, [r7, #11]
 800e16e:	3301      	adds	r3, #1
 800e170:	72fb      	strb	r3, [r7, #11]
          break;
 800e172:	e03b      	b.n	800e1ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e17a:	695b      	ldr	r3, [r3, #20]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d00b      	beq.n	800e198 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e186:	695b      	ldr	r3, [r3, #20]
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	7c12      	ldrb	r2, [r2, #16]
 800e18c:	f107 0108 	add.w	r1, r7, #8
 800e190:	4610      	mov	r0, r2
 800e192:	4798      	blx	r3
 800e194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e196:	e029      	b.n	800e1ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e198:	6839      	ldr	r1, [r7, #0]
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f000 fa4a 	bl	800e634 <USBD_CtlError>
            err++;
 800e1a0:	7afb      	ldrb	r3, [r7, #11]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	72fb      	strb	r3, [r7, #11]
          break;
 800e1a6:	e021      	b.n	800e1ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ae:	699b      	ldr	r3, [r3, #24]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d00b      	beq.n	800e1cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ba:	699b      	ldr	r3, [r3, #24]
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	7c12      	ldrb	r2, [r2, #16]
 800e1c0:	f107 0108 	add.w	r1, r7, #8
 800e1c4:	4610      	mov	r0, r2
 800e1c6:	4798      	blx	r3
 800e1c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1ca:	e00f      	b.n	800e1ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e1cc:	6839      	ldr	r1, [r7, #0]
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f000 fa30 	bl	800e634 <USBD_CtlError>
            err++;
 800e1d4:	7afb      	ldrb	r3, [r7, #11]
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	72fb      	strb	r3, [r7, #11]
          break;
 800e1da:	e007      	b.n	800e1ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e1dc:	6839      	ldr	r1, [r7, #0]
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 fa28 	bl	800e634 <USBD_CtlError>
          err++;
 800e1e4:	7afb      	ldrb	r3, [r7, #11]
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e1ea:	bf00      	nop
      }
      break;
 800e1ec:	e037      	b.n	800e25e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	7c1b      	ldrb	r3, [r3, #16]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d109      	bne.n	800e20a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1fe:	f107 0208 	add.w	r2, r7, #8
 800e202:	4610      	mov	r0, r2
 800e204:	4798      	blx	r3
 800e206:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e208:	e029      	b.n	800e25e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e20a:	6839      	ldr	r1, [r7, #0]
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f000 fa11 	bl	800e634 <USBD_CtlError>
        err++;
 800e212:	7afb      	ldrb	r3, [r7, #11]
 800e214:	3301      	adds	r3, #1
 800e216:	72fb      	strb	r3, [r7, #11]
      break;
 800e218:	e021      	b.n	800e25e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	7c1b      	ldrb	r3, [r3, #16]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d10d      	bne.n	800e23e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e22a:	f107 0208 	add.w	r2, r7, #8
 800e22e:	4610      	mov	r0, r2
 800e230:	4798      	blx	r3
 800e232:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	3301      	adds	r3, #1
 800e238:	2207      	movs	r2, #7
 800e23a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e23c:	e00f      	b.n	800e25e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e23e:	6839      	ldr	r1, [r7, #0]
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 f9f7 	bl	800e634 <USBD_CtlError>
        err++;
 800e246:	7afb      	ldrb	r3, [r7, #11]
 800e248:	3301      	adds	r3, #1
 800e24a:	72fb      	strb	r3, [r7, #11]
      break;
 800e24c:	e007      	b.n	800e25e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e24e:	6839      	ldr	r1, [r7, #0]
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f000 f9ef 	bl	800e634 <USBD_CtlError>
      err++;
 800e256:	7afb      	ldrb	r3, [r7, #11]
 800e258:	3301      	adds	r3, #1
 800e25a:	72fb      	strb	r3, [r7, #11]
      break;
 800e25c:	bf00      	nop
  }

  if (err != 0U)
 800e25e:	7afb      	ldrb	r3, [r7, #11]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d11e      	bne.n	800e2a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	88db      	ldrh	r3, [r3, #6]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d016      	beq.n	800e29a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e26c:	893b      	ldrh	r3, [r7, #8]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d00e      	beq.n	800e290 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	88da      	ldrh	r2, [r3, #6]
 800e276:	893b      	ldrh	r3, [r7, #8]
 800e278:	4293      	cmp	r3, r2
 800e27a:	bf28      	it	cs
 800e27c:	4613      	movcs	r3, r2
 800e27e:	b29b      	uxth	r3, r3
 800e280:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e282:	893b      	ldrh	r3, [r7, #8]
 800e284:	461a      	mov	r2, r3
 800e286:	68f9      	ldr	r1, [r7, #12]
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 fa44 	bl	800e716 <USBD_CtlSendData>
 800e28e:	e009      	b.n	800e2a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e290:	6839      	ldr	r1, [r7, #0]
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f000 f9ce 	bl	800e634 <USBD_CtlError>
 800e298:	e004      	b.n	800e2a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 fa95 	bl	800e7ca <USBD_CtlSendStatus>
 800e2a0:	e000      	b.n	800e2a4 <USBD_GetDescriptor+0x2cc>
    return;
 800e2a2:	bf00      	nop
  }
}
 800e2a4:	3710      	adds	r7, #16
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop

0800e2ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b084      	sub	sp, #16
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	889b      	ldrh	r3, [r3, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d131      	bne.n	800e322 <USBD_SetAddress+0x76>
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	88db      	ldrh	r3, [r3, #6]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d12d      	bne.n	800e322 <USBD_SetAddress+0x76>
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	885b      	ldrh	r3, [r3, #2]
 800e2ca:	2b7f      	cmp	r3, #127	; 0x7f
 800e2cc:	d829      	bhi.n	800e322 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	885b      	ldrh	r3, [r3, #2]
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	2b03      	cmp	r3, #3
 800e2e4:	d104      	bne.n	800e2f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e2e6:	6839      	ldr	r1, [r7, #0]
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f000 f9a3 	bl	800e634 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2ee:	e01d      	b.n	800e32c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	7bfa      	ldrb	r2, [r7, #15]
 800e2f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e2f8:	7bfb      	ldrb	r3, [r7, #15]
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f003 fc83 	bl	8011c08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 fa61 	bl	800e7ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e308:	7bfb      	ldrb	r3, [r7, #15]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d004      	beq.n	800e318 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2202      	movs	r2, #2
 800e312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e316:	e009      	b.n	800e32c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e320:	e004      	b.n	800e32c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e322:	6839      	ldr	r1, [r7, #0]
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f000 f985 	bl	800e634 <USBD_CtlError>
  }
}
 800e32a:	bf00      	nop
 800e32c:	bf00      	nop
 800e32e:	3710      	adds	r7, #16
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e33e:	2300      	movs	r3, #0
 800e340:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	885b      	ldrh	r3, [r3, #2]
 800e346:	b2da      	uxtb	r2, r3
 800e348:	4b4c      	ldr	r3, [pc, #304]	; (800e47c <USBD_SetConfig+0x148>)
 800e34a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e34c:	4b4b      	ldr	r3, [pc, #300]	; (800e47c <USBD_SetConfig+0x148>)
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d905      	bls.n	800e360 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e354:	6839      	ldr	r1, [r7, #0]
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 f96c 	bl	800e634 <USBD_CtlError>
    return USBD_FAIL;
 800e35c:	2303      	movs	r3, #3
 800e35e:	e088      	b.n	800e472 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e366:	b2db      	uxtb	r3, r3
 800e368:	2b02      	cmp	r3, #2
 800e36a:	d002      	beq.n	800e372 <USBD_SetConfig+0x3e>
 800e36c:	2b03      	cmp	r3, #3
 800e36e:	d025      	beq.n	800e3bc <USBD_SetConfig+0x88>
 800e370:	e071      	b.n	800e456 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e372:	4b42      	ldr	r3, [pc, #264]	; (800e47c <USBD_SetConfig+0x148>)
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d01c      	beq.n	800e3b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e37a:	4b40      	ldr	r3, [pc, #256]	; (800e47c <USBD_SetConfig+0x148>)
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	461a      	mov	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e384:	4b3d      	ldr	r3, [pc, #244]	; (800e47c <USBD_SetConfig+0x148>)
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	4619      	mov	r1, r3
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f7ff f948 	bl	800d620 <USBD_SetClassConfig>
 800e390:	4603      	mov	r3, r0
 800e392:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e394:	7bfb      	ldrb	r3, [r7, #15]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d004      	beq.n	800e3a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e39a:	6839      	ldr	r1, [r7, #0]
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 f949 	bl	800e634 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e3a2:	e065      	b.n	800e470 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f000 fa10 	bl	800e7ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2203      	movs	r2, #3
 800e3ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e3b2:	e05d      	b.n	800e470 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f000 fa08 	bl	800e7ca <USBD_CtlSendStatus>
      break;
 800e3ba:	e059      	b.n	800e470 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e3bc:	4b2f      	ldr	r3, [pc, #188]	; (800e47c <USBD_SetConfig+0x148>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d112      	bne.n	800e3ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2202      	movs	r2, #2
 800e3c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e3cc:	4b2b      	ldr	r3, [pc, #172]	; (800e47c <USBD_SetConfig+0x148>)
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e3d6:	4b29      	ldr	r3, [pc, #164]	; (800e47c <USBD_SetConfig+0x148>)
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	4619      	mov	r1, r3
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7ff f93b 	bl	800d658 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 f9f1 	bl	800e7ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e3e8:	e042      	b.n	800e470 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e3ea:	4b24      	ldr	r3, [pc, #144]	; (800e47c <USBD_SetConfig+0x148>)
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d02a      	beq.n	800e44e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	4619      	mov	r1, r3
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f7ff f929 	bl	800d658 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e406:	4b1d      	ldr	r3, [pc, #116]	; (800e47c <USBD_SetConfig+0x148>)
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	461a      	mov	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e410:	4b1a      	ldr	r3, [pc, #104]	; (800e47c <USBD_SetConfig+0x148>)
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	4619      	mov	r1, r3
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f7ff f902 	bl	800d620 <USBD_SetClassConfig>
 800e41c:	4603      	mov	r3, r0
 800e41e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e420:	7bfb      	ldrb	r3, [r7, #15]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00f      	beq.n	800e446 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e426:	6839      	ldr	r1, [r7, #0]
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 f903 	bl	800e634 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	b2db      	uxtb	r3, r3
 800e434:	4619      	mov	r1, r3
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f7ff f90e 	bl	800d658 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2202      	movs	r2, #2
 800e440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e444:	e014      	b.n	800e470 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f000 f9bf 	bl	800e7ca <USBD_CtlSendStatus>
      break;
 800e44c:	e010      	b.n	800e470 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f000 f9bb 	bl	800e7ca <USBD_CtlSendStatus>
      break;
 800e454:	e00c      	b.n	800e470 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e456:	6839      	ldr	r1, [r7, #0]
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 f8eb 	bl	800e634 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e45e:	4b07      	ldr	r3, [pc, #28]	; (800e47c <USBD_SetConfig+0x148>)
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	4619      	mov	r1, r3
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f7ff f8f7 	bl	800d658 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e46a:	2303      	movs	r3, #3
 800e46c:	73fb      	strb	r3, [r7, #15]
      break;
 800e46e:	bf00      	nop
  }

  return ret;
 800e470:	7bfb      	ldrb	r3, [r7, #15]
}
 800e472:	4618      	mov	r0, r3
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	2000022c 	.word	0x2000022c

0800e480 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	88db      	ldrh	r3, [r3, #6]
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d004      	beq.n	800e49c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e492:	6839      	ldr	r1, [r7, #0]
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 f8cd 	bl	800e634 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e49a:	e023      	b.n	800e4e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	2b02      	cmp	r3, #2
 800e4a6:	dc02      	bgt.n	800e4ae <USBD_GetConfig+0x2e>
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	dc03      	bgt.n	800e4b4 <USBD_GetConfig+0x34>
 800e4ac:	e015      	b.n	800e4da <USBD_GetConfig+0x5a>
 800e4ae:	2b03      	cmp	r3, #3
 800e4b0:	d00b      	beq.n	800e4ca <USBD_GetConfig+0x4a>
 800e4b2:	e012      	b.n	800e4da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	3308      	adds	r3, #8
 800e4be:	2201      	movs	r2, #1
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 f927 	bl	800e716 <USBD_CtlSendData>
        break;
 800e4c8:	e00c      	b.n	800e4e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	3304      	adds	r3, #4
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 f91f 	bl	800e716 <USBD_CtlSendData>
        break;
 800e4d8:	e004      	b.n	800e4e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e4da:	6839      	ldr	r1, [r7, #0]
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 f8a9 	bl	800e634 <USBD_CtlError>
        break;
 800e4e2:	bf00      	nop
}
 800e4e4:	bf00      	nop
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	3b01      	subs	r3, #1
 800e500:	2b02      	cmp	r3, #2
 800e502:	d81e      	bhi.n	800e542 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	88db      	ldrh	r3, [r3, #6]
 800e508:	2b02      	cmp	r3, #2
 800e50a:	d004      	beq.n	800e516 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e50c:	6839      	ldr	r1, [r7, #0]
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 f890 	bl	800e634 <USBD_CtlError>
        break;
 800e514:	e01a      	b.n	800e54c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2201      	movs	r2, #1
 800e51a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e522:	2b00      	cmp	r3, #0
 800e524:	d005      	beq.n	800e532 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	68db      	ldr	r3, [r3, #12]
 800e52a:	f043 0202 	orr.w	r2, r3, #2
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	330c      	adds	r3, #12
 800e536:	2202      	movs	r2, #2
 800e538:	4619      	mov	r1, r3
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 f8eb 	bl	800e716 <USBD_CtlSendData>
      break;
 800e540:	e004      	b.n	800e54c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e542:	6839      	ldr	r1, [r7, #0]
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f000 f875 	bl	800e634 <USBD_CtlError>
      break;
 800e54a:	bf00      	nop
  }
}
 800e54c:	bf00      	nop
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	885b      	ldrh	r3, [r3, #2]
 800e562:	2b01      	cmp	r3, #1
 800e564:	d106      	bne.n	800e574 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2201      	movs	r2, #1
 800e56a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f000 f92b 	bl	800e7ca <USBD_CtlSendStatus>
  }
}
 800e574:	bf00      	nop
 800e576:	3708      	adds	r7, #8
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	3b01      	subs	r3, #1
 800e590:	2b02      	cmp	r3, #2
 800e592:	d80b      	bhi.n	800e5ac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	885b      	ldrh	r3, [r3, #2]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d10c      	bne.n	800e5b6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f000 f910 	bl	800e7ca <USBD_CtlSendStatus>
      }
      break;
 800e5aa:	e004      	b.n	800e5b6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e5ac:	6839      	ldr	r1, [r7, #0]
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 f840 	bl	800e634 <USBD_CtlError>
      break;
 800e5b4:	e000      	b.n	800e5b8 <USBD_ClrFeature+0x3c>
      break;
 800e5b6:	bf00      	nop
  }
}
 800e5b8:	bf00      	nop
 800e5ba:	3708      	adds	r7, #8
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	781a      	ldrb	r2, [r3, #0]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	3301      	adds	r3, #1
 800e5da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	781a      	ldrb	r2, [r3, #0]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e5ea:	68f8      	ldr	r0, [r7, #12]
 800e5ec:	f7ff fabb 	bl	800db66 <SWAPBYTE>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	3301      	adds	r3, #1
 800e602:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e604:	68f8      	ldr	r0, [r7, #12]
 800e606:	f7ff faae 	bl	800db66 <SWAPBYTE>
 800e60a:	4603      	mov	r3, r0
 800e60c:	461a      	mov	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	3301      	adds	r3, #1
 800e616:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	3301      	adds	r3, #1
 800e61c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e61e:	68f8      	ldr	r0, [r7, #12]
 800e620:	f7ff faa1 	bl	800db66 <SWAPBYTE>
 800e624:	4603      	mov	r3, r0
 800e626:	461a      	mov	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	80da      	strh	r2, [r3, #6]
}
 800e62c:	bf00      	nop
 800e62e:	3710      	adds	r7, #16
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e63e:	2180      	movs	r1, #128	; 0x80
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f003 fa77 	bl	8011b34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e646:	2100      	movs	r1, #0
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f003 fa73 	bl	8011b34 <USBD_LL_StallEP>
}
 800e64e:	bf00      	nop
 800e650:	3708      	adds	r7, #8
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}

0800e656 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e656:	b580      	push	{r7, lr}
 800e658:	b086      	sub	sp, #24
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	60f8      	str	r0, [r7, #12]
 800e65e:	60b9      	str	r1, [r7, #8]
 800e660:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e662:	2300      	movs	r3, #0
 800e664:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d036      	beq.n	800e6da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e670:	6938      	ldr	r0, [r7, #16]
 800e672:	f000 f836 	bl	800e6e2 <USBD_GetLen>
 800e676:	4603      	mov	r3, r0
 800e678:	3301      	adds	r3, #1
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	005b      	lsls	r3, r3, #1
 800e67e:	b29a      	uxth	r2, r3
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e684:	7dfb      	ldrb	r3, [r7, #23]
 800e686:	68ba      	ldr	r2, [r7, #8]
 800e688:	4413      	add	r3, r2
 800e68a:	687a      	ldr	r2, [r7, #4]
 800e68c:	7812      	ldrb	r2, [r2, #0]
 800e68e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e690:	7dfb      	ldrb	r3, [r7, #23]
 800e692:	3301      	adds	r3, #1
 800e694:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e696:	7dfb      	ldrb	r3, [r7, #23]
 800e698:	68ba      	ldr	r2, [r7, #8]
 800e69a:	4413      	add	r3, r2
 800e69c:	2203      	movs	r2, #3
 800e69e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e6a0:	7dfb      	ldrb	r3, [r7, #23]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e6a6:	e013      	b.n	800e6d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e6a8:	7dfb      	ldrb	r3, [r7, #23]
 800e6aa:	68ba      	ldr	r2, [r7, #8]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	693a      	ldr	r2, [r7, #16]
 800e6b0:	7812      	ldrb	r2, [r2, #0]
 800e6b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	613b      	str	r3, [r7, #16]
    idx++;
 800e6ba:	7dfb      	ldrb	r3, [r7, #23]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e6c0:	7dfb      	ldrb	r3, [r7, #23]
 800e6c2:	68ba      	ldr	r2, [r7, #8]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	701a      	strb	r2, [r3, #0]
    idx++;
 800e6ca:	7dfb      	ldrb	r3, [r7, #23]
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d1e7      	bne.n	800e6a8 <USBD_GetString+0x52>
 800e6d8:	e000      	b.n	800e6dc <USBD_GetString+0x86>
    return;
 800e6da:	bf00      	nop
  }
}
 800e6dc:	3718      	adds	r7, #24
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e6e2:	b480      	push	{r7}
 800e6e4:	b085      	sub	sp, #20
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e6f2:	e005      	b.n	800e700 <USBD_GetLen+0x1e>
  {
    len++;
 800e6f4:	7bfb      	ldrb	r3, [r7, #15]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d1f5      	bne.n	800e6f4 <USBD_GetLen+0x12>
  }

  return len;
 800e708:	7bfb      	ldrb	r3, [r7, #15]
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3714      	adds	r7, #20
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr

0800e716 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e716:	b580      	push	{r7, lr}
 800e718:	b084      	sub	sp, #16
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	60f8      	str	r0, [r7, #12]
 800e71e:	60b9      	str	r1, [r7, #8]
 800e720:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	2202      	movs	r2, #2
 800e726:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	687a      	ldr	r2, [r7, #4]
 800e734:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	68ba      	ldr	r2, [r7, #8]
 800e73a:	2100      	movs	r1, #0
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f003 fa82 	bl	8011c46 <USBD_LL_Transmit>

  return USBD_OK;
 800e742:	2300      	movs	r3, #0
}
 800e744:	4618      	mov	r0, r3
 800e746:	3710      	adds	r7, #16
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	68ba      	ldr	r2, [r7, #8]
 800e75c:	2100      	movs	r1, #0
 800e75e:	68f8      	ldr	r0, [r7, #12]
 800e760:	f003 fa71 	bl	8011c46 <USBD_LL_Transmit>

  return USBD_OK;
 800e764:	2300      	movs	r3, #0
}
 800e766:	4618      	mov	r0, r3
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}

0800e76e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	b084      	sub	sp, #16
 800e772:	af00      	add	r7, sp, #0
 800e774:	60f8      	str	r0, [r7, #12]
 800e776:	60b9      	str	r1, [r7, #8]
 800e778:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2203      	movs	r2, #3
 800e77e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	68ba      	ldr	r2, [r7, #8]
 800e796:	2100      	movs	r1, #0
 800e798:	68f8      	ldr	r0, [r7, #12]
 800e79a:	f003 fa75 	bl	8011c88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e79e:	2300      	movs	r3, #0
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3710      	adds	r7, #16
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	60f8      	str	r0, [r7, #12]
 800e7b0:	60b9      	str	r1, [r7, #8]
 800e7b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	68ba      	ldr	r2, [r7, #8]
 800e7b8:	2100      	movs	r1, #0
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f003 fa64 	bl	8011c88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b082      	sub	sp, #8
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2204      	movs	r2, #4
 800e7d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e7da:	2300      	movs	r3, #0
 800e7dc:	2200      	movs	r2, #0
 800e7de:	2100      	movs	r1, #0
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f003 fa30 	bl	8011c46 <USBD_LL_Transmit>

  return USBD_OK;
 800e7e6:	2300      	movs	r3, #0
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3708      	adds	r7, #8
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2205      	movs	r2, #5
 800e7fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e800:	2300      	movs	r3, #0
 800e802:	2200      	movs	r2, #0
 800e804:	2100      	movs	r1, #0
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f003 fa3e 	bl	8011c88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e80c:	2300      	movs	r3, #0
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3708      	adds	r7, #8
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
	...

0800e818 <__NVIC_SetPriority>:
{
 800e818:	b480      	push	{r7}
 800e81a:	b083      	sub	sp, #12
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	4603      	mov	r3, r0
 800e820:	6039      	str	r1, [r7, #0]
 800e822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	db0a      	blt.n	800e842 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	b2da      	uxtb	r2, r3
 800e830:	490c      	ldr	r1, [pc, #48]	; (800e864 <__NVIC_SetPriority+0x4c>)
 800e832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e836:	0112      	lsls	r2, r2, #4
 800e838:	b2d2      	uxtb	r2, r2
 800e83a:	440b      	add	r3, r1
 800e83c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e840:	e00a      	b.n	800e858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	b2da      	uxtb	r2, r3
 800e846:	4908      	ldr	r1, [pc, #32]	; (800e868 <__NVIC_SetPriority+0x50>)
 800e848:	79fb      	ldrb	r3, [r7, #7]
 800e84a:	f003 030f 	and.w	r3, r3, #15
 800e84e:	3b04      	subs	r3, #4
 800e850:	0112      	lsls	r2, r2, #4
 800e852:	b2d2      	uxtb	r2, r2
 800e854:	440b      	add	r3, r1
 800e856:	761a      	strb	r2, [r3, #24]
}
 800e858:	bf00      	nop
 800e85a:	370c      	adds	r7, #12
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr
 800e864:	e000e100 	.word	0xe000e100
 800e868:	e000ed00 	.word	0xe000ed00

0800e86c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e86c:	b580      	push	{r7, lr}
 800e86e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e870:	4b05      	ldr	r3, [pc, #20]	; (800e888 <SysTick_Handler+0x1c>)
 800e872:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e874:	f001 fcfe 	bl	8010274 <xTaskGetSchedulerState>
 800e878:	4603      	mov	r3, r0
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d001      	beq.n	800e882 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e87e:	f002 fae3 	bl	8010e48 <xPortSysTickHandler>
  }
}
 800e882:	bf00      	nop
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	e000e010 	.word	0xe000e010

0800e88c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e88c:	b580      	push	{r7, lr}
 800e88e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e890:	2100      	movs	r1, #0
 800e892:	f06f 0004 	mvn.w	r0, #4
 800e896:	f7ff ffbf 	bl	800e818 <__NVIC_SetPriority>
#endif
}
 800e89a:	bf00      	nop
 800e89c:	bd80      	pop	{r7, pc}
	...

0800e8a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8a6:	f3ef 8305 	mrs	r3, IPSR
 800e8aa:	603b      	str	r3, [r7, #0]
  return(result);
 800e8ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d003      	beq.n	800e8ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e8b2:	f06f 0305 	mvn.w	r3, #5
 800e8b6:	607b      	str	r3, [r7, #4]
 800e8b8:	e00c      	b.n	800e8d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e8ba:	4b0a      	ldr	r3, [pc, #40]	; (800e8e4 <osKernelInitialize+0x44>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d105      	bne.n	800e8ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e8c2:	4b08      	ldr	r3, [pc, #32]	; (800e8e4 <osKernelInitialize+0x44>)
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	607b      	str	r3, [r7, #4]
 800e8cc:	e002      	b.n	800e8d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e8d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e8d4:	687b      	ldr	r3, [r7, #4]
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	370c      	adds	r7, #12
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop
 800e8e4:	20000230 	.word	0x20000230

0800e8e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8ee:	f3ef 8305 	mrs	r3, IPSR
 800e8f2:	603b      	str	r3, [r7, #0]
  return(result);
 800e8f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d003      	beq.n	800e902 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e8fa:	f06f 0305 	mvn.w	r3, #5
 800e8fe:	607b      	str	r3, [r7, #4]
 800e900:	e010      	b.n	800e924 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e902:	4b0b      	ldr	r3, [pc, #44]	; (800e930 <osKernelStart+0x48>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	2b01      	cmp	r3, #1
 800e908:	d109      	bne.n	800e91e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e90a:	f7ff ffbf 	bl	800e88c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e90e:	4b08      	ldr	r3, [pc, #32]	; (800e930 <osKernelStart+0x48>)
 800e910:	2202      	movs	r2, #2
 800e912:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e914:	f001 f866 	bl	800f9e4 <vTaskStartScheduler>
      stat = osOK;
 800e918:	2300      	movs	r3, #0
 800e91a:	607b      	str	r3, [r7, #4]
 800e91c:	e002      	b.n	800e924 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e91e:	f04f 33ff 	mov.w	r3, #4294967295
 800e922:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e924:	687b      	ldr	r3, [r7, #4]
}
 800e926:	4618      	mov	r0, r3
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	20000230 	.word	0x20000230

0800e934 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e934:	b580      	push	{r7, lr}
 800e936:	b08e      	sub	sp, #56	; 0x38
 800e938:	af04      	add	r7, sp, #16
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e940:	2300      	movs	r3, #0
 800e942:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e944:	f3ef 8305 	mrs	r3, IPSR
 800e948:	617b      	str	r3, [r7, #20]
  return(result);
 800e94a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d17e      	bne.n	800ea4e <osThreadNew+0x11a>
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d07b      	beq.n	800ea4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e956:	2380      	movs	r3, #128	; 0x80
 800e958:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e95a:	2318      	movs	r3, #24
 800e95c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e95e:	2300      	movs	r3, #0
 800e960:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e962:	f04f 33ff 	mov.w	r3, #4294967295
 800e966:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d045      	beq.n	800e9fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d002      	beq.n	800e97c <osThreadNew+0x48>
        name = attr->name;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	699b      	ldr	r3, [r3, #24]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d002      	beq.n	800e98a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	699b      	ldr	r3, [r3, #24]
 800e988:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d008      	beq.n	800e9a2 <osThreadNew+0x6e>
 800e990:	69fb      	ldr	r3, [r7, #28]
 800e992:	2b38      	cmp	r3, #56	; 0x38
 800e994:	d805      	bhi.n	800e9a2 <osThreadNew+0x6e>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	f003 0301 	and.w	r3, r3, #1
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d001      	beq.n	800e9a6 <osThreadNew+0x72>
        return (NULL);
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	e054      	b.n	800ea50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	695b      	ldr	r3, [r3, #20]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d003      	beq.n	800e9b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	695b      	ldr	r3, [r3, #20]
 800e9b2:	089b      	lsrs	r3, r3, #2
 800e9b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	689b      	ldr	r3, [r3, #8]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d00e      	beq.n	800e9dc <osThreadNew+0xa8>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	68db      	ldr	r3, [r3, #12]
 800e9c2:	2b5b      	cmp	r3, #91	; 0x5b
 800e9c4:	d90a      	bls.n	800e9dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d006      	beq.n	800e9dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	695b      	ldr	r3, [r3, #20]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d002      	beq.n	800e9dc <osThreadNew+0xa8>
        mem = 1;
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	61bb      	str	r3, [r7, #24]
 800e9da:	e010      	b.n	800e9fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	689b      	ldr	r3, [r3, #8]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d10c      	bne.n	800e9fe <osThreadNew+0xca>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	68db      	ldr	r3, [r3, #12]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d108      	bne.n	800e9fe <osThreadNew+0xca>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	691b      	ldr	r3, [r3, #16]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d104      	bne.n	800e9fe <osThreadNew+0xca>
          mem = 0;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	61bb      	str	r3, [r7, #24]
 800e9f8:	e001      	b.n	800e9fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e9fe:	69bb      	ldr	r3, [r7, #24]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d110      	bne.n	800ea26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ea0c:	9202      	str	r2, [sp, #8]
 800ea0e:	9301      	str	r3, [sp, #4]
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	9300      	str	r3, [sp, #0]
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	6a3a      	ldr	r2, [r7, #32]
 800ea18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ea1a:	68f8      	ldr	r0, [r7, #12]
 800ea1c:	f000 fe0c 	bl	800f638 <xTaskCreateStatic>
 800ea20:	4603      	mov	r3, r0
 800ea22:	613b      	str	r3, [r7, #16]
 800ea24:	e013      	b.n	800ea4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ea26:	69bb      	ldr	r3, [r7, #24]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d110      	bne.n	800ea4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ea2c:	6a3b      	ldr	r3, [r7, #32]
 800ea2e:	b29a      	uxth	r2, r3
 800ea30:	f107 0310 	add.w	r3, r7, #16
 800ea34:	9301      	str	r3, [sp, #4]
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	9300      	str	r3, [sp, #0]
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f000 fe57 	bl	800f6f2 <xTaskCreate>
 800ea44:	4603      	mov	r3, r0
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d001      	beq.n	800ea4e <osThreadNew+0x11a>
            hTask = NULL;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ea4e:	693b      	ldr	r3, [r7, #16]
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3728      	adds	r7, #40	; 0x28
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea60:	f3ef 8305 	mrs	r3, IPSR
 800ea64:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d003      	beq.n	800ea74 <osDelay+0x1c>
    stat = osErrorISR;
 800ea6c:	f06f 0305 	mvn.w	r3, #5
 800ea70:	60fb      	str	r3, [r7, #12]
 800ea72:	e007      	b.n	800ea84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ea74:	2300      	movs	r3, #0
 800ea76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d002      	beq.n	800ea84 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 ff7c 	bl	800f97c <vTaskDelay>
    }
  }

  return (stat);
 800ea84:	68fb      	ldr	r3, [r7, #12]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
	...

0800ea90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ea90:	b480      	push	{r7}
 800ea92:	b085      	sub	sp, #20
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	60f8      	str	r0, [r7, #12]
 800ea98:	60b9      	str	r1, [r7, #8]
 800ea9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	4a07      	ldr	r2, [pc, #28]	; (800eabc <vApplicationGetIdleTaskMemory+0x2c>)
 800eaa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	4a06      	ldr	r2, [pc, #24]	; (800eac0 <vApplicationGetIdleTaskMemory+0x30>)
 800eaa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2280      	movs	r2, #128	; 0x80
 800eaac:	601a      	str	r2, [r3, #0]
}
 800eaae:	bf00      	nop
 800eab0:	3714      	adds	r7, #20
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr
 800eaba:	bf00      	nop
 800eabc:	20000234 	.word	0x20000234
 800eac0:	20000290 	.word	0x20000290

0800eac4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800eac4:	b480      	push	{r7}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	4a07      	ldr	r2, [pc, #28]	; (800eaf0 <vApplicationGetTimerTaskMemory+0x2c>)
 800ead4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	4a06      	ldr	r2, [pc, #24]	; (800eaf4 <vApplicationGetTimerTaskMemory+0x30>)
 800eada:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eae2:	601a      	str	r2, [r3, #0]
}
 800eae4:	bf00      	nop
 800eae6:	3714      	adds	r7, #20
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr
 800eaf0:	20000490 	.word	0x20000490
 800eaf4:	200004ec 	.word	0x200004ec

0800eaf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f103 0208 	add.w	r2, r3, #8
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f103 0208 	add.w	r2, r3, #8
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f103 0208 	add.w	r2, r3, #8
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eb2c:	bf00      	nop
 800eb2e:	370c      	adds	r7, #12
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr

0800eb38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b083      	sub	sp, #12
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2200      	movs	r2, #0
 800eb44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eb46:	bf00      	nop
 800eb48:	370c      	adds	r7, #12
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr

0800eb52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb52:	b480      	push	{r7}
 800eb54:	b085      	sub	sp, #20
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
 800eb5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	68fa      	ldr	r2, [r7, #12]
 800eb66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	689a      	ldr	r2, [r3, #8]
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	689b      	ldr	r3, [r3, #8]
 800eb74:	683a      	ldr	r2, [r7, #0]
 800eb76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	683a      	ldr	r2, [r7, #0]
 800eb7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	1c5a      	adds	r2, r3, #1
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	601a      	str	r2, [r3, #0]
}
 800eb8e:	bf00      	nop
 800eb90:	3714      	adds	r7, #20
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr

0800eb9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb9a:	b480      	push	{r7}
 800eb9c:	b085      	sub	sp, #20
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
 800eba2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebb0:	d103      	bne.n	800ebba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	691b      	ldr	r3, [r3, #16]
 800ebb6:	60fb      	str	r3, [r7, #12]
 800ebb8:	e00c      	b.n	800ebd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	3308      	adds	r3, #8
 800ebbe:	60fb      	str	r3, [r7, #12]
 800ebc0:	e002      	b.n	800ebc8 <vListInsert+0x2e>
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	60fb      	str	r3, [r7, #12]
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d2f6      	bcs.n	800ebc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	685a      	ldr	r2, [r3, #4]
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	683a      	ldr	r2, [r7, #0]
 800ebe2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	68fa      	ldr	r2, [r7, #12]
 800ebe8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	683a      	ldr	r2, [r7, #0]
 800ebee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	1c5a      	adds	r2, r3, #1
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	601a      	str	r2, [r3, #0]
}
 800ec00:	bf00      	nop
 800ec02:	3714      	adds	r7, #20
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b085      	sub	sp, #20
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	691b      	ldr	r3, [r3, #16]
 800ec18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	6892      	ldr	r2, [r2, #8]
 800ec22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	689b      	ldr	r3, [r3, #8]
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	6852      	ldr	r2, [r2, #4]
 800ec2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d103      	bne.n	800ec40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	689a      	ldr	r2, [r3, #8]
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2200      	movs	r2, #0
 800ec44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	1e5a      	subs	r2, r3, #1
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3714      	adds	r7, #20
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d10a      	bne.n	800ec8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ec74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec78:	f383 8811 	msr	BASEPRI, r3
 800ec7c:	f3bf 8f6f 	isb	sy
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ec86:	bf00      	nop
 800ec88:	e7fe      	b.n	800ec88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ec8a:	f002 f84b 	bl	8010d24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681a      	ldr	r2, [r3, #0]
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec96:	68f9      	ldr	r1, [r7, #12]
 800ec98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ec9a:	fb01 f303 	mul.w	r3, r1, r3
 800ec9e:	441a      	add	r2, r3
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2200      	movs	r2, #0
 800eca8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	681a      	ldr	r2, [r3, #0]
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecba:	3b01      	subs	r3, #1
 800ecbc:	68f9      	ldr	r1, [r7, #12]
 800ecbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ecc0:	fb01 f303 	mul.w	r3, r1, r3
 800ecc4:	441a      	add	r2, r3
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	22ff      	movs	r2, #255	; 0xff
 800ecce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	22ff      	movs	r2, #255	; 0xff
 800ecd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d114      	bne.n	800ed0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	691b      	ldr	r3, [r3, #16]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d01a      	beq.n	800ed1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	3310      	adds	r3, #16
 800ecec:	4618      	mov	r0, r3
 800ecee:	f001 f903 	bl	800fef8 <xTaskRemoveFromEventList>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d012      	beq.n	800ed1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ecf8:	4b0c      	ldr	r3, [pc, #48]	; (800ed2c <xQueueGenericReset+0xcc>)
 800ecfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecfe:	601a      	str	r2, [r3, #0]
 800ed00:	f3bf 8f4f 	dsb	sy
 800ed04:	f3bf 8f6f 	isb	sy
 800ed08:	e009      	b.n	800ed1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	3310      	adds	r3, #16
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7ff fef2 	bl	800eaf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	3324      	adds	r3, #36	; 0x24
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7ff feed 	bl	800eaf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ed1e:	f002 f831 	bl	8010d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ed22:	2301      	movs	r3, #1
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3710      	adds	r7, #16
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	e000ed04 	.word	0xe000ed04

0800ed30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b08e      	sub	sp, #56	; 0x38
 800ed34:	af02      	add	r7, sp, #8
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	607a      	str	r2, [r7, #4]
 800ed3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d10a      	bne.n	800ed5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ed44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed48:	f383 8811 	msr	BASEPRI, r3
 800ed4c:	f3bf 8f6f 	isb	sy
 800ed50:	f3bf 8f4f 	dsb	sy
 800ed54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ed56:	bf00      	nop
 800ed58:	e7fe      	b.n	800ed58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d10a      	bne.n	800ed76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ed60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed64:	f383 8811 	msr	BASEPRI, r3
 800ed68:	f3bf 8f6f 	isb	sy
 800ed6c:	f3bf 8f4f 	dsb	sy
 800ed70:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed72:	bf00      	nop
 800ed74:	e7fe      	b.n	800ed74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d002      	beq.n	800ed82 <xQueueGenericCreateStatic+0x52>
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d001      	beq.n	800ed86 <xQueueGenericCreateStatic+0x56>
 800ed82:	2301      	movs	r3, #1
 800ed84:	e000      	b.n	800ed88 <xQueueGenericCreateStatic+0x58>
 800ed86:	2300      	movs	r3, #0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d10a      	bne.n	800eda2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ed8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed90:	f383 8811 	msr	BASEPRI, r3
 800ed94:	f3bf 8f6f 	isb	sy
 800ed98:	f3bf 8f4f 	dsb	sy
 800ed9c:	623b      	str	r3, [r7, #32]
}
 800ed9e:	bf00      	nop
 800eda0:	e7fe      	b.n	800eda0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d102      	bne.n	800edae <xQueueGenericCreateStatic+0x7e>
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d101      	bne.n	800edb2 <xQueueGenericCreateStatic+0x82>
 800edae:	2301      	movs	r3, #1
 800edb0:	e000      	b.n	800edb4 <xQueueGenericCreateStatic+0x84>
 800edb2:	2300      	movs	r3, #0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d10a      	bne.n	800edce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800edb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edbc:	f383 8811 	msr	BASEPRI, r3
 800edc0:	f3bf 8f6f 	isb	sy
 800edc4:	f3bf 8f4f 	dsb	sy
 800edc8:	61fb      	str	r3, [r7, #28]
}
 800edca:	bf00      	nop
 800edcc:	e7fe      	b.n	800edcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800edce:	2350      	movs	r3, #80	; 0x50
 800edd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	2b50      	cmp	r3, #80	; 0x50
 800edd6:	d00a      	beq.n	800edee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800edd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eddc:	f383 8811 	msr	BASEPRI, r3
 800ede0:	f3bf 8f6f 	isb	sy
 800ede4:	f3bf 8f4f 	dsb	sy
 800ede8:	61bb      	str	r3, [r7, #24]
}
 800edea:	bf00      	nop
 800edec:	e7fe      	b.n	800edec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800edee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800edf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d00d      	beq.n	800ee16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800edfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfc:	2201      	movs	r2, #1
 800edfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ee02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ee06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee08:	9300      	str	r3, [sp, #0]
 800ee0a:	4613      	mov	r3, r2
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	68b9      	ldr	r1, [r7, #8]
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	f000 f805 	bl	800ee20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ee16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3730      	adds	r7, #48	; 0x30
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
 800ee2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d103      	bne.n	800ee3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ee34:	69bb      	ldr	r3, [r7, #24]
 800ee36:	69ba      	ldr	r2, [r7, #24]
 800ee38:	601a      	str	r2, [r3, #0]
 800ee3a:	e002      	b.n	800ee42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ee3c:	69bb      	ldr	r3, [r7, #24]
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ee42:	69bb      	ldr	r3, [r7, #24]
 800ee44:	68fa      	ldr	r2, [r7, #12]
 800ee46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	68ba      	ldr	r2, [r7, #8]
 800ee4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ee4e:	2101      	movs	r1, #1
 800ee50:	69b8      	ldr	r0, [r7, #24]
 800ee52:	f7ff ff05 	bl	800ec60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	78fa      	ldrb	r2, [r7, #3]
 800ee5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ee5e:	bf00      	nop
 800ee60:	3710      	adds	r7, #16
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
	...

0800ee68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b08e      	sub	sp, #56	; 0x38
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	607a      	str	r2, [r7, #4]
 800ee74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ee76:	2300      	movs	r3, #0
 800ee78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ee7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d10a      	bne.n	800ee9a <xQueueGenericSend+0x32>
	__asm volatile
 800ee84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee88:	f383 8811 	msr	BASEPRI, r3
 800ee8c:	f3bf 8f6f 	isb	sy
 800ee90:	f3bf 8f4f 	dsb	sy
 800ee94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ee96:	bf00      	nop
 800ee98:	e7fe      	b.n	800ee98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d103      	bne.n	800eea8 <xQueueGenericSend+0x40>
 800eea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d101      	bne.n	800eeac <xQueueGenericSend+0x44>
 800eea8:	2301      	movs	r3, #1
 800eeaa:	e000      	b.n	800eeae <xQueueGenericSend+0x46>
 800eeac:	2300      	movs	r3, #0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d10a      	bne.n	800eec8 <xQueueGenericSend+0x60>
	__asm volatile
 800eeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eec4:	bf00      	nop
 800eec6:	e7fe      	b.n	800eec6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	2b02      	cmp	r3, #2
 800eecc:	d103      	bne.n	800eed6 <xQueueGenericSend+0x6e>
 800eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d101      	bne.n	800eeda <xQueueGenericSend+0x72>
 800eed6:	2301      	movs	r3, #1
 800eed8:	e000      	b.n	800eedc <xQueueGenericSend+0x74>
 800eeda:	2300      	movs	r3, #0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d10a      	bne.n	800eef6 <xQueueGenericSend+0x8e>
	__asm volatile
 800eee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee4:	f383 8811 	msr	BASEPRI, r3
 800eee8:	f3bf 8f6f 	isb	sy
 800eeec:	f3bf 8f4f 	dsb	sy
 800eef0:	623b      	str	r3, [r7, #32]
}
 800eef2:	bf00      	nop
 800eef4:	e7fe      	b.n	800eef4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eef6:	f001 f9bd 	bl	8010274 <xTaskGetSchedulerState>
 800eefa:	4603      	mov	r3, r0
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d102      	bne.n	800ef06 <xQueueGenericSend+0x9e>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d101      	bne.n	800ef0a <xQueueGenericSend+0xa2>
 800ef06:	2301      	movs	r3, #1
 800ef08:	e000      	b.n	800ef0c <xQueueGenericSend+0xa4>
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d10a      	bne.n	800ef26 <xQueueGenericSend+0xbe>
	__asm volatile
 800ef10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef14:	f383 8811 	msr	BASEPRI, r3
 800ef18:	f3bf 8f6f 	isb	sy
 800ef1c:	f3bf 8f4f 	dsb	sy
 800ef20:	61fb      	str	r3, [r7, #28]
}
 800ef22:	bf00      	nop
 800ef24:	e7fe      	b.n	800ef24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef26:	f001 fefd 	bl	8010d24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d302      	bcc.n	800ef3c <xQueueGenericSend+0xd4>
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	2b02      	cmp	r3, #2
 800ef3a:	d129      	bne.n	800ef90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef3c:	683a      	ldr	r2, [r7, #0]
 800ef3e:	68b9      	ldr	r1, [r7, #8]
 800ef40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef42:	f000 fa0b 	bl	800f35c <prvCopyDataToQueue>
 800ef46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d010      	beq.n	800ef72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef52:	3324      	adds	r3, #36	; 0x24
 800ef54:	4618      	mov	r0, r3
 800ef56:	f000 ffcf 	bl	800fef8 <xTaskRemoveFromEventList>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d013      	beq.n	800ef88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ef60:	4b3f      	ldr	r3, [pc, #252]	; (800f060 <xQueueGenericSend+0x1f8>)
 800ef62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef66:	601a      	str	r2, [r3, #0]
 800ef68:	f3bf 8f4f 	dsb	sy
 800ef6c:	f3bf 8f6f 	isb	sy
 800ef70:	e00a      	b.n	800ef88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ef72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d007      	beq.n	800ef88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ef78:	4b39      	ldr	r3, [pc, #228]	; (800f060 <xQueueGenericSend+0x1f8>)
 800ef7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef7e:	601a      	str	r2, [r3, #0]
 800ef80:	f3bf 8f4f 	dsb	sy
 800ef84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ef88:	f001 fefc 	bl	8010d84 <vPortExitCritical>
				return pdPASS;
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	e063      	b.n	800f058 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d103      	bne.n	800ef9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef96:	f001 fef5 	bl	8010d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	e05c      	b.n	800f058 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d106      	bne.n	800efb2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800efa4:	f107 0314 	add.w	r3, r7, #20
 800efa8:	4618      	mov	r0, r3
 800efaa:	f001 f809 	bl	800ffc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800efae:	2301      	movs	r3, #1
 800efb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800efb2:	f001 fee7 	bl	8010d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800efb6:	f000 fd7b 	bl	800fab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800efba:	f001 feb3 	bl	8010d24 <vPortEnterCritical>
 800efbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800efc4:	b25b      	sxtb	r3, r3
 800efc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efca:	d103      	bne.n	800efd4 <xQueueGenericSend+0x16c>
 800efcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efce:	2200      	movs	r2, #0
 800efd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800efd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800efda:	b25b      	sxtb	r3, r3
 800efdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efe0:	d103      	bne.n	800efea <xQueueGenericSend+0x182>
 800efe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe4:	2200      	movs	r2, #0
 800efe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800efea:	f001 fecb 	bl	8010d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efee:	1d3a      	adds	r2, r7, #4
 800eff0:	f107 0314 	add.w	r3, r7, #20
 800eff4:	4611      	mov	r1, r2
 800eff6:	4618      	mov	r0, r3
 800eff8:	f000 fff8 	bl	800ffec <xTaskCheckForTimeOut>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d124      	bne.n	800f04c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f004:	f000 faa2 	bl	800f54c <prvIsQueueFull>
 800f008:	4603      	mov	r3, r0
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d018      	beq.n	800f040 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f010:	3310      	adds	r3, #16
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	4611      	mov	r1, r2
 800f016:	4618      	mov	r0, r3
 800f018:	f000 ff1e 	bl	800fe58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f01c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f01e:	f000 fa2d 	bl	800f47c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f022:	f000 fd53 	bl	800facc <xTaskResumeAll>
 800f026:	4603      	mov	r3, r0
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f47f af7c 	bne.w	800ef26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f02e:	4b0c      	ldr	r3, [pc, #48]	; (800f060 <xQueueGenericSend+0x1f8>)
 800f030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f034:	601a      	str	r2, [r3, #0]
 800f036:	f3bf 8f4f 	dsb	sy
 800f03a:	f3bf 8f6f 	isb	sy
 800f03e:	e772      	b.n	800ef26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f042:	f000 fa1b 	bl	800f47c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f046:	f000 fd41 	bl	800facc <xTaskResumeAll>
 800f04a:	e76c      	b.n	800ef26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f04c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f04e:	f000 fa15 	bl	800f47c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f052:	f000 fd3b 	bl	800facc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f056:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3738      	adds	r7, #56	; 0x38
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	e000ed04 	.word	0xe000ed04

0800f064 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b090      	sub	sp, #64	; 0x40
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	607a      	str	r2, [r7, #4]
 800f070:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d10a      	bne.n	800f092 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f080:	f383 8811 	msr	BASEPRI, r3
 800f084:	f3bf 8f6f 	isb	sy
 800f088:	f3bf 8f4f 	dsb	sy
 800f08c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f08e:	bf00      	nop
 800f090:	e7fe      	b.n	800f090 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d103      	bne.n	800f0a0 <xQueueGenericSendFromISR+0x3c>
 800f098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d101      	bne.n	800f0a4 <xQueueGenericSendFromISR+0x40>
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	e000      	b.n	800f0a6 <xQueueGenericSendFromISR+0x42>
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d10a      	bne.n	800f0c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ae:	f383 8811 	msr	BASEPRI, r3
 800f0b2:	f3bf 8f6f 	isb	sy
 800f0b6:	f3bf 8f4f 	dsb	sy
 800f0ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f0bc:	bf00      	nop
 800f0be:	e7fe      	b.n	800f0be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	2b02      	cmp	r3, #2
 800f0c4:	d103      	bne.n	800f0ce <xQueueGenericSendFromISR+0x6a>
 800f0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0ca:	2b01      	cmp	r3, #1
 800f0cc:	d101      	bne.n	800f0d2 <xQueueGenericSendFromISR+0x6e>
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e000      	b.n	800f0d4 <xQueueGenericSendFromISR+0x70>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d10a      	bne.n	800f0ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0dc:	f383 8811 	msr	BASEPRI, r3
 800f0e0:	f3bf 8f6f 	isb	sy
 800f0e4:	f3bf 8f4f 	dsb	sy
 800f0e8:	623b      	str	r3, [r7, #32]
}
 800f0ea:	bf00      	nop
 800f0ec:	e7fe      	b.n	800f0ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f0ee:	f001 fefb 	bl	8010ee8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f0f2:	f3ef 8211 	mrs	r2, BASEPRI
 800f0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fa:	f383 8811 	msr	BASEPRI, r3
 800f0fe:	f3bf 8f6f 	isb	sy
 800f102:	f3bf 8f4f 	dsb	sy
 800f106:	61fa      	str	r2, [r7, #28]
 800f108:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f10a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f10c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f116:	429a      	cmp	r2, r3
 800f118:	d302      	bcc.n	800f120 <xQueueGenericSendFromISR+0xbc>
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d12f      	bne.n	800f180 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f12e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f130:	683a      	ldr	r2, [r7, #0]
 800f132:	68b9      	ldr	r1, [r7, #8]
 800f134:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f136:	f000 f911 	bl	800f35c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f13a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f142:	d112      	bne.n	800f16a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d016      	beq.n	800f17a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14e:	3324      	adds	r3, #36	; 0x24
 800f150:	4618      	mov	r0, r3
 800f152:	f000 fed1 	bl	800fef8 <xTaskRemoveFromEventList>
 800f156:	4603      	mov	r3, r0
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d00e      	beq.n	800f17a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d00b      	beq.n	800f17a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2201      	movs	r2, #1
 800f166:	601a      	str	r2, [r3, #0]
 800f168:	e007      	b.n	800f17a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f16a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f16e:	3301      	adds	r3, #1
 800f170:	b2db      	uxtb	r3, r3
 800f172:	b25a      	sxtb	r2, r3
 800f174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f17a:	2301      	movs	r3, #1
 800f17c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f17e:	e001      	b.n	800f184 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f180:	2300      	movs	r3, #0
 800f182:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f186:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f18e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f192:	4618      	mov	r0, r3
 800f194:	3740      	adds	r7, #64	; 0x40
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
	...

0800f19c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b08c      	sub	sp, #48	; 0x30
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d10a      	bne.n	800f1cc <xQueueReceive+0x30>
	__asm volatile
 800f1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ba:	f383 8811 	msr	BASEPRI, r3
 800f1be:	f3bf 8f6f 	isb	sy
 800f1c2:	f3bf 8f4f 	dsb	sy
 800f1c6:	623b      	str	r3, [r7, #32]
}
 800f1c8:	bf00      	nop
 800f1ca:	e7fe      	b.n	800f1ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d103      	bne.n	800f1da <xQueueReceive+0x3e>
 800f1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d101      	bne.n	800f1de <xQueueReceive+0x42>
 800f1da:	2301      	movs	r3, #1
 800f1dc:	e000      	b.n	800f1e0 <xQueueReceive+0x44>
 800f1de:	2300      	movs	r3, #0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d10a      	bne.n	800f1fa <xQueueReceive+0x5e>
	__asm volatile
 800f1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e8:	f383 8811 	msr	BASEPRI, r3
 800f1ec:	f3bf 8f6f 	isb	sy
 800f1f0:	f3bf 8f4f 	dsb	sy
 800f1f4:	61fb      	str	r3, [r7, #28]
}
 800f1f6:	bf00      	nop
 800f1f8:	e7fe      	b.n	800f1f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f1fa:	f001 f83b 	bl	8010274 <xTaskGetSchedulerState>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	d102      	bne.n	800f20a <xQueueReceive+0x6e>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d101      	bne.n	800f20e <xQueueReceive+0x72>
 800f20a:	2301      	movs	r3, #1
 800f20c:	e000      	b.n	800f210 <xQueueReceive+0x74>
 800f20e:	2300      	movs	r3, #0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d10a      	bne.n	800f22a <xQueueReceive+0x8e>
	__asm volatile
 800f214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f218:	f383 8811 	msr	BASEPRI, r3
 800f21c:	f3bf 8f6f 	isb	sy
 800f220:	f3bf 8f4f 	dsb	sy
 800f224:	61bb      	str	r3, [r7, #24]
}
 800f226:	bf00      	nop
 800f228:	e7fe      	b.n	800f228 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f22a:	f001 fd7b 	bl	8010d24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f232:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f236:	2b00      	cmp	r3, #0
 800f238:	d01f      	beq.n	800f27a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f23a:	68b9      	ldr	r1, [r7, #8]
 800f23c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f23e:	f000 f8f7 	bl	800f430 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f244:	1e5a      	subs	r2, r3, #1
 800f246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f248:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24c:	691b      	ldr	r3, [r3, #16]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d00f      	beq.n	800f272 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f254:	3310      	adds	r3, #16
 800f256:	4618      	mov	r0, r3
 800f258:	f000 fe4e 	bl	800fef8 <xTaskRemoveFromEventList>
 800f25c:	4603      	mov	r3, r0
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d007      	beq.n	800f272 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f262:	4b3d      	ldr	r3, [pc, #244]	; (800f358 <xQueueReceive+0x1bc>)
 800f264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f268:	601a      	str	r2, [r3, #0]
 800f26a:	f3bf 8f4f 	dsb	sy
 800f26e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f272:	f001 fd87 	bl	8010d84 <vPortExitCritical>
				return pdPASS;
 800f276:	2301      	movs	r3, #1
 800f278:	e069      	b.n	800f34e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d103      	bne.n	800f288 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f280:	f001 fd80 	bl	8010d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f284:	2300      	movs	r3, #0
 800f286:	e062      	b.n	800f34e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d106      	bne.n	800f29c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f28e:	f107 0310 	add.w	r3, r7, #16
 800f292:	4618      	mov	r0, r3
 800f294:	f000 fe94 	bl	800ffc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f298:	2301      	movs	r3, #1
 800f29a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f29c:	f001 fd72 	bl	8010d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f2a0:	f000 fc06 	bl	800fab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f2a4:	f001 fd3e 	bl	8010d24 <vPortEnterCritical>
 800f2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2ae:	b25b      	sxtb	r3, r3
 800f2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2b4:	d103      	bne.n	800f2be <xQueueReceive+0x122>
 800f2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2c4:	b25b      	sxtb	r3, r3
 800f2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ca:	d103      	bne.n	800f2d4 <xQueueReceive+0x138>
 800f2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f2d4:	f001 fd56 	bl	8010d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f2d8:	1d3a      	adds	r2, r7, #4
 800f2da:	f107 0310 	add.w	r3, r7, #16
 800f2de:	4611      	mov	r1, r2
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f000 fe83 	bl	800ffec <xTaskCheckForTimeOut>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d123      	bne.n	800f334 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ee:	f000 f917 	bl	800f520 <prvIsQueueEmpty>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d017      	beq.n	800f328 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fa:	3324      	adds	r3, #36	; 0x24
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	4611      	mov	r1, r2
 800f300:	4618      	mov	r0, r3
 800f302:	f000 fda9 	bl	800fe58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f308:	f000 f8b8 	bl	800f47c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f30c:	f000 fbde 	bl	800facc <xTaskResumeAll>
 800f310:	4603      	mov	r3, r0
 800f312:	2b00      	cmp	r3, #0
 800f314:	d189      	bne.n	800f22a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f316:	4b10      	ldr	r3, [pc, #64]	; (800f358 <xQueueReceive+0x1bc>)
 800f318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f31c:	601a      	str	r2, [r3, #0]
 800f31e:	f3bf 8f4f 	dsb	sy
 800f322:	f3bf 8f6f 	isb	sy
 800f326:	e780      	b.n	800f22a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f32a:	f000 f8a7 	bl	800f47c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f32e:	f000 fbcd 	bl	800facc <xTaskResumeAll>
 800f332:	e77a      	b.n	800f22a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f336:	f000 f8a1 	bl	800f47c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f33a:	f000 fbc7 	bl	800facc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f33e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f340:	f000 f8ee 	bl	800f520 <prvIsQueueEmpty>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	f43f af6f 	beq.w	800f22a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f34c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3730      	adds	r7, #48	; 0x30
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
 800f356:	bf00      	nop
 800f358:	e000ed04 	.word	0xe000ed04

0800f35c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b086      	sub	sp, #24
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f368:	2300      	movs	r3, #0
 800f36a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f370:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f376:	2b00      	cmp	r3, #0
 800f378:	d10d      	bne.n	800f396 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d14d      	bne.n	800f41e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	689b      	ldr	r3, [r3, #8]
 800f386:	4618      	mov	r0, r3
 800f388:	f000 ff92 	bl	80102b0 <xTaskPriorityDisinherit>
 800f38c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2200      	movs	r2, #0
 800f392:	609a      	str	r2, [r3, #8]
 800f394:	e043      	b.n	800f41e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d119      	bne.n	800f3d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	6858      	ldr	r0, [r3, #4]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a4:	461a      	mov	r2, r3
 800f3a6:	68b9      	ldr	r1, [r7, #8]
 800f3a8:	f002 fd10 	bl	8011dcc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	685a      	ldr	r2, [r3, #4]
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3b4:	441a      	add	r2, r3
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	685a      	ldr	r2, [r3, #4]
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	689b      	ldr	r3, [r3, #8]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d32b      	bcc.n	800f41e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681a      	ldr	r2, [r3, #0]
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	605a      	str	r2, [r3, #4]
 800f3ce:	e026      	b.n	800f41e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	68d8      	ldr	r0, [r3, #12]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d8:	461a      	mov	r2, r3
 800f3da:	68b9      	ldr	r1, [r7, #8]
 800f3dc:	f002 fcf6 	bl	8011dcc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	68da      	ldr	r2, [r3, #12]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e8:	425b      	negs	r3, r3
 800f3ea:	441a      	add	r2, r3
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	68da      	ldr	r2, [r3, #12]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d207      	bcs.n	800f40c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	689a      	ldr	r2, [r3, #8]
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f404:	425b      	negs	r3, r3
 800f406:	441a      	add	r2, r3
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2b02      	cmp	r3, #2
 800f410:	d105      	bne.n	800f41e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d002      	beq.n	800f41e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	3b01      	subs	r3, #1
 800f41c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	1c5a      	adds	r2, r3, #1
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f426:	697b      	ldr	r3, [r7, #20]
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3718      	adds	r7, #24
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d018      	beq.n	800f474 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	68da      	ldr	r2, [r3, #12]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f44a:	441a      	add	r2, r3
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	68da      	ldr	r2, [r3, #12]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	689b      	ldr	r3, [r3, #8]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d303      	bcc.n	800f464 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	68d9      	ldr	r1, [r3, #12]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f46c:	461a      	mov	r2, r3
 800f46e:	6838      	ldr	r0, [r7, #0]
 800f470:	f002 fcac 	bl	8011dcc <memcpy>
	}
}
 800f474:	bf00      	nop
 800f476:	3708      	adds	r7, #8
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b084      	sub	sp, #16
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f484:	f001 fc4e 	bl	8010d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f48e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f490:	e011      	b.n	800f4b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f496:	2b00      	cmp	r3, #0
 800f498:	d012      	beq.n	800f4c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	3324      	adds	r3, #36	; 0x24
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f000 fd2a 	bl	800fef8 <xTaskRemoveFromEventList>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d001      	beq.n	800f4ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f4aa:	f000 fe01 	bl	80100b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f4ae:	7bfb      	ldrb	r3, [r7, #15]
 800f4b0:	3b01      	subs	r3, #1
 800f4b2:	b2db      	uxtb	r3, r3
 800f4b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f4b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	dce9      	bgt.n	800f492 <prvUnlockQueue+0x16>
 800f4be:	e000      	b.n	800f4c2 <prvUnlockQueue+0x46>
					break;
 800f4c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	22ff      	movs	r2, #255	; 0xff
 800f4c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f4ca:	f001 fc5b 	bl	8010d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f4ce:	f001 fc29 	bl	8010d24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4da:	e011      	b.n	800f500 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	691b      	ldr	r3, [r3, #16]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d012      	beq.n	800f50a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	3310      	adds	r3, #16
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f000 fd05 	bl	800fef8 <xTaskRemoveFromEventList>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d001      	beq.n	800f4f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f4f4:	f000 fddc 	bl	80100b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f4f8:	7bbb      	ldrb	r3, [r7, #14]
 800f4fa:	3b01      	subs	r3, #1
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f504:	2b00      	cmp	r3, #0
 800f506:	dce9      	bgt.n	800f4dc <prvUnlockQueue+0x60>
 800f508:	e000      	b.n	800f50c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f50a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	22ff      	movs	r2, #255	; 0xff
 800f510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f514:	f001 fc36 	bl	8010d84 <vPortExitCritical>
}
 800f518:	bf00      	nop
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f528:	f001 fbfc 	bl	8010d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f530:	2b00      	cmp	r3, #0
 800f532:	d102      	bne.n	800f53a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f534:	2301      	movs	r3, #1
 800f536:	60fb      	str	r3, [r7, #12]
 800f538:	e001      	b.n	800f53e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f53a:	2300      	movs	r3, #0
 800f53c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f53e:	f001 fc21 	bl	8010d84 <vPortExitCritical>

	return xReturn;
 800f542:	68fb      	ldr	r3, [r7, #12]
}
 800f544:	4618      	mov	r0, r3
 800f546:	3710      	adds	r7, #16
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b084      	sub	sp, #16
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f554:	f001 fbe6 	bl	8010d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f560:	429a      	cmp	r2, r3
 800f562:	d102      	bne.n	800f56a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f564:	2301      	movs	r3, #1
 800f566:	60fb      	str	r3, [r7, #12]
 800f568:	e001      	b.n	800f56e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f56a:	2300      	movs	r3, #0
 800f56c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f56e:	f001 fc09 	bl	8010d84 <vPortExitCritical>

	return xReturn;
 800f572:	68fb      	ldr	r3, [r7, #12]
}
 800f574:	4618      	mov	r0, r3
 800f576:	3710      	adds	r7, #16
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f57c:	b480      	push	{r7}
 800f57e:	b085      	sub	sp, #20
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f586:	2300      	movs	r3, #0
 800f588:	60fb      	str	r3, [r7, #12]
 800f58a:	e014      	b.n	800f5b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f58c:	4a0f      	ldr	r2, [pc, #60]	; (800f5cc <vQueueAddToRegistry+0x50>)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d10b      	bne.n	800f5b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f598:	490c      	ldr	r1, [pc, #48]	; (800f5cc <vQueueAddToRegistry+0x50>)
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	683a      	ldr	r2, [r7, #0]
 800f59e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f5a2:	4a0a      	ldr	r2, [pc, #40]	; (800f5cc <vQueueAddToRegistry+0x50>)
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	00db      	lsls	r3, r3, #3
 800f5a8:	4413      	add	r3, r2
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f5ae:	e006      	b.n	800f5be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	60fb      	str	r3, [r7, #12]
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2b07      	cmp	r3, #7
 800f5ba:	d9e7      	bls.n	800f58c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f5bc:	bf00      	nop
 800f5be:	bf00      	nop
 800f5c0:	3714      	adds	r7, #20
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c8:	4770      	bx	lr
 800f5ca:	bf00      	nop
 800f5cc:	2000599c 	.word	0x2000599c

0800f5d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b086      	sub	sp, #24
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	60b9      	str	r1, [r7, #8]
 800f5da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f5e0:	f001 fba0 	bl	8010d24 <vPortEnterCritical>
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f5ea:	b25b      	sxtb	r3, r3
 800f5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f0:	d103      	bne.n	800f5fa <vQueueWaitForMessageRestricted+0x2a>
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f600:	b25b      	sxtb	r3, r3
 800f602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f606:	d103      	bne.n	800f610 <vQueueWaitForMessageRestricted+0x40>
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	2200      	movs	r2, #0
 800f60c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f610:	f001 fbb8 	bl	8010d84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d106      	bne.n	800f62a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	3324      	adds	r3, #36	; 0x24
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	68b9      	ldr	r1, [r7, #8]
 800f624:	4618      	mov	r0, r3
 800f626:	f000 fc3b 	bl	800fea0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f62a:	6978      	ldr	r0, [r7, #20]
 800f62c:	f7ff ff26 	bl	800f47c <prvUnlockQueue>
	}
 800f630:	bf00      	nop
 800f632:	3718      	adds	r7, #24
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b08e      	sub	sp, #56	; 0x38
 800f63c:	af04      	add	r7, sp, #16
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	607a      	str	r2, [r7, #4]
 800f644:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d10a      	bne.n	800f662 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f650:	f383 8811 	msr	BASEPRI, r3
 800f654:	f3bf 8f6f 	isb	sy
 800f658:	f3bf 8f4f 	dsb	sy
 800f65c:	623b      	str	r3, [r7, #32]
}
 800f65e:	bf00      	nop
 800f660:	e7fe      	b.n	800f660 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f664:	2b00      	cmp	r3, #0
 800f666:	d10a      	bne.n	800f67e <xTaskCreateStatic+0x46>
	__asm volatile
 800f668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f66c:	f383 8811 	msr	BASEPRI, r3
 800f670:	f3bf 8f6f 	isb	sy
 800f674:	f3bf 8f4f 	dsb	sy
 800f678:	61fb      	str	r3, [r7, #28]
}
 800f67a:	bf00      	nop
 800f67c:	e7fe      	b.n	800f67c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f67e:	235c      	movs	r3, #92	; 0x5c
 800f680:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	2b5c      	cmp	r3, #92	; 0x5c
 800f686:	d00a      	beq.n	800f69e <xTaskCreateStatic+0x66>
	__asm volatile
 800f688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68c:	f383 8811 	msr	BASEPRI, r3
 800f690:	f3bf 8f6f 	isb	sy
 800f694:	f3bf 8f4f 	dsb	sy
 800f698:	61bb      	str	r3, [r7, #24]
}
 800f69a:	bf00      	nop
 800f69c:	e7fe      	b.n	800f69c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f69e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d01e      	beq.n	800f6e4 <xTaskCreateStatic+0xac>
 800f6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d01b      	beq.n	800f6e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b8:	2202      	movs	r2, #2
 800f6ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f6be:	2300      	movs	r3, #0
 800f6c0:	9303      	str	r3, [sp, #12]
 800f6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c4:	9302      	str	r3, [sp, #8]
 800f6c6:	f107 0314 	add.w	r3, r7, #20
 800f6ca:	9301      	str	r3, [sp, #4]
 800f6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	687a      	ldr	r2, [r7, #4]
 800f6d4:	68b9      	ldr	r1, [r7, #8]
 800f6d6:	68f8      	ldr	r0, [r7, #12]
 800f6d8:	f000 f850 	bl	800f77c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f6dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6de:	f000 f8dd 	bl	800f89c <prvAddNewTaskToReadyList>
 800f6e2:	e001      	b.n	800f6e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f6e8:	697b      	ldr	r3, [r7, #20]
	}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3728      	adds	r7, #40	; 0x28
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}

0800f6f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f6f2:	b580      	push	{r7, lr}
 800f6f4:	b08c      	sub	sp, #48	; 0x30
 800f6f6:	af04      	add	r7, sp, #16
 800f6f8:	60f8      	str	r0, [r7, #12]
 800f6fa:	60b9      	str	r1, [r7, #8]
 800f6fc:	603b      	str	r3, [r7, #0]
 800f6fe:	4613      	mov	r3, r2
 800f700:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f702:	88fb      	ldrh	r3, [r7, #6]
 800f704:	009b      	lsls	r3, r3, #2
 800f706:	4618      	mov	r0, r3
 800f708:	f001 fc2e 	bl	8010f68 <pvPortMalloc>
 800f70c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d00e      	beq.n	800f732 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f714:	205c      	movs	r0, #92	; 0x5c
 800f716:	f001 fc27 	bl	8010f68 <pvPortMalloc>
 800f71a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d003      	beq.n	800f72a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	697a      	ldr	r2, [r7, #20]
 800f726:	631a      	str	r2, [r3, #48]	; 0x30
 800f728:	e005      	b.n	800f736 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f72a:	6978      	ldr	r0, [r7, #20]
 800f72c:	f001 fce8 	bl	8011100 <vPortFree>
 800f730:	e001      	b.n	800f736 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f732:	2300      	movs	r3, #0
 800f734:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d017      	beq.n	800f76c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f73c:	69fb      	ldr	r3, [r7, #28]
 800f73e:	2200      	movs	r2, #0
 800f740:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f744:	88fa      	ldrh	r2, [r7, #6]
 800f746:	2300      	movs	r3, #0
 800f748:	9303      	str	r3, [sp, #12]
 800f74a:	69fb      	ldr	r3, [r7, #28]
 800f74c:	9302      	str	r3, [sp, #8]
 800f74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f750:	9301      	str	r3, [sp, #4]
 800f752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f754:	9300      	str	r3, [sp, #0]
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	68b9      	ldr	r1, [r7, #8]
 800f75a:	68f8      	ldr	r0, [r7, #12]
 800f75c:	f000 f80e 	bl	800f77c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f760:	69f8      	ldr	r0, [r7, #28]
 800f762:	f000 f89b 	bl	800f89c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f766:	2301      	movs	r3, #1
 800f768:	61bb      	str	r3, [r7, #24]
 800f76a:	e002      	b.n	800f772 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f76c:	f04f 33ff 	mov.w	r3, #4294967295
 800f770:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f772:	69bb      	ldr	r3, [r7, #24]
	}
 800f774:	4618      	mov	r0, r3
 800f776:	3720      	adds	r7, #32
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b088      	sub	sp, #32
 800f780:	af00      	add	r7, sp, #0
 800f782:	60f8      	str	r0, [r7, #12]
 800f784:	60b9      	str	r1, [r7, #8]
 800f786:	607a      	str	r2, [r7, #4]
 800f788:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	009b      	lsls	r3, r3, #2
 800f792:	461a      	mov	r2, r3
 800f794:	21a5      	movs	r1, #165	; 0xa5
 800f796:	f002 fb27 	bl	8011de8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f7a4:	3b01      	subs	r3, #1
 800f7a6:	009b      	lsls	r3, r3, #2
 800f7a8:	4413      	add	r3, r2
 800f7aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f7ac:	69bb      	ldr	r3, [r7, #24]
 800f7ae:	f023 0307 	bic.w	r3, r3, #7
 800f7b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f7b4:	69bb      	ldr	r3, [r7, #24]
 800f7b6:	f003 0307 	and.w	r3, r3, #7
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d00a      	beq.n	800f7d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c2:	f383 8811 	msr	BASEPRI, r3
 800f7c6:	f3bf 8f6f 	isb	sy
 800f7ca:	f3bf 8f4f 	dsb	sy
 800f7ce:	617b      	str	r3, [r7, #20]
}
 800f7d0:	bf00      	nop
 800f7d2:	e7fe      	b.n	800f7d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d01f      	beq.n	800f81a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7da:	2300      	movs	r3, #0
 800f7dc:	61fb      	str	r3, [r7, #28]
 800f7de:	e012      	b.n	800f806 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f7e0:	68ba      	ldr	r2, [r7, #8]
 800f7e2:	69fb      	ldr	r3, [r7, #28]
 800f7e4:	4413      	add	r3, r2
 800f7e6:	7819      	ldrb	r1, [r3, #0]
 800f7e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7ea:	69fb      	ldr	r3, [r7, #28]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	3334      	adds	r3, #52	; 0x34
 800f7f0:	460a      	mov	r2, r1
 800f7f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f7f4:	68ba      	ldr	r2, [r7, #8]
 800f7f6:	69fb      	ldr	r3, [r7, #28]
 800f7f8:	4413      	add	r3, r2
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d006      	beq.n	800f80e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	3301      	adds	r3, #1
 800f804:	61fb      	str	r3, [r7, #28]
 800f806:	69fb      	ldr	r3, [r7, #28]
 800f808:	2b0f      	cmp	r3, #15
 800f80a:	d9e9      	bls.n	800f7e0 <prvInitialiseNewTask+0x64>
 800f80c:	e000      	b.n	800f810 <prvInitialiseNewTask+0x94>
			{
				break;
 800f80e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f812:	2200      	movs	r2, #0
 800f814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f818:	e003      	b.n	800f822 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81c:	2200      	movs	r2, #0
 800f81e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f824:	2b37      	cmp	r3, #55	; 0x37
 800f826:	d901      	bls.n	800f82c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f828:	2337      	movs	r3, #55	; 0x37
 800f82a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f830:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f836:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83a:	2200      	movs	r2, #0
 800f83c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f840:	3304      	adds	r3, #4
 800f842:	4618      	mov	r0, r3
 800f844:	f7ff f978 	bl	800eb38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84a:	3318      	adds	r3, #24
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7ff f973 	bl	800eb38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f856:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f860:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f866:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86a:	2200      	movs	r2, #0
 800f86c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f870:	2200      	movs	r2, #0
 800f872:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f876:	683a      	ldr	r2, [r7, #0]
 800f878:	68f9      	ldr	r1, [r7, #12]
 800f87a:	69b8      	ldr	r0, [r7, #24]
 800f87c:	f001 f928 	bl	8010ad0 <pxPortInitialiseStack>
 800f880:	4602      	mov	r2, r0
 800f882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f884:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d002      	beq.n	800f892 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f890:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f892:	bf00      	nop
 800f894:	3720      	adds	r7, #32
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
	...

0800f89c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f8a4:	f001 fa3e 	bl	8010d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f8a8:	4b2d      	ldr	r3, [pc, #180]	; (800f960 <prvAddNewTaskToReadyList+0xc4>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	4a2c      	ldr	r2, [pc, #176]	; (800f960 <prvAddNewTaskToReadyList+0xc4>)
 800f8b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f8b2:	4b2c      	ldr	r3, [pc, #176]	; (800f964 <prvAddNewTaskToReadyList+0xc8>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d109      	bne.n	800f8ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f8ba:	4a2a      	ldr	r2, [pc, #168]	; (800f964 <prvAddNewTaskToReadyList+0xc8>)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f8c0:	4b27      	ldr	r3, [pc, #156]	; (800f960 <prvAddNewTaskToReadyList+0xc4>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d110      	bne.n	800f8ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f8c8:	f000 fc16 	bl	80100f8 <prvInitialiseTaskLists>
 800f8cc:	e00d      	b.n	800f8ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f8ce:	4b26      	ldr	r3, [pc, #152]	; (800f968 <prvAddNewTaskToReadyList+0xcc>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d109      	bne.n	800f8ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f8d6:	4b23      	ldr	r3, [pc, #140]	; (800f964 <prvAddNewTaskToReadyList+0xc8>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d802      	bhi.n	800f8ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f8e4:	4a1f      	ldr	r2, [pc, #124]	; (800f964 <prvAddNewTaskToReadyList+0xc8>)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f8ea:	4b20      	ldr	r3, [pc, #128]	; (800f96c <prvAddNewTaskToReadyList+0xd0>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	4a1e      	ldr	r2, [pc, #120]	; (800f96c <prvAddNewTaskToReadyList+0xd0>)
 800f8f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f8f4:	4b1d      	ldr	r3, [pc, #116]	; (800f96c <prvAddNewTaskToReadyList+0xd0>)
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f900:	4b1b      	ldr	r3, [pc, #108]	; (800f970 <prvAddNewTaskToReadyList+0xd4>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	429a      	cmp	r2, r3
 800f906:	d903      	bls.n	800f910 <prvAddNewTaskToReadyList+0x74>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f90c:	4a18      	ldr	r2, [pc, #96]	; (800f970 <prvAddNewTaskToReadyList+0xd4>)
 800f90e:	6013      	str	r3, [r2, #0]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f914:	4613      	mov	r3, r2
 800f916:	009b      	lsls	r3, r3, #2
 800f918:	4413      	add	r3, r2
 800f91a:	009b      	lsls	r3, r3, #2
 800f91c:	4a15      	ldr	r2, [pc, #84]	; (800f974 <prvAddNewTaskToReadyList+0xd8>)
 800f91e:	441a      	add	r2, r3
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	3304      	adds	r3, #4
 800f924:	4619      	mov	r1, r3
 800f926:	4610      	mov	r0, r2
 800f928:	f7ff f913 	bl	800eb52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f92c:	f001 fa2a 	bl	8010d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f930:	4b0d      	ldr	r3, [pc, #52]	; (800f968 <prvAddNewTaskToReadyList+0xcc>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d00e      	beq.n	800f956 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f938:	4b0a      	ldr	r3, [pc, #40]	; (800f964 <prvAddNewTaskToReadyList+0xc8>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f942:	429a      	cmp	r2, r3
 800f944:	d207      	bcs.n	800f956 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f946:	4b0c      	ldr	r3, [pc, #48]	; (800f978 <prvAddNewTaskToReadyList+0xdc>)
 800f948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f94c:	601a      	str	r2, [r3, #0]
 800f94e:	f3bf 8f4f 	dsb	sy
 800f952:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f956:	bf00      	nop
 800f958:	3708      	adds	r7, #8
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop
 800f960:	20000dc0 	.word	0x20000dc0
 800f964:	200008ec 	.word	0x200008ec
 800f968:	20000dcc 	.word	0x20000dcc
 800f96c:	20000ddc 	.word	0x20000ddc
 800f970:	20000dc8 	.word	0x20000dc8
 800f974:	200008f0 	.word	0x200008f0
 800f978:	e000ed04 	.word	0xe000ed04

0800f97c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f984:	2300      	movs	r3, #0
 800f986:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d017      	beq.n	800f9be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f98e:	4b13      	ldr	r3, [pc, #76]	; (800f9dc <vTaskDelay+0x60>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d00a      	beq.n	800f9ac <vTaskDelay+0x30>
	__asm volatile
 800f996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f99a:	f383 8811 	msr	BASEPRI, r3
 800f99e:	f3bf 8f6f 	isb	sy
 800f9a2:	f3bf 8f4f 	dsb	sy
 800f9a6:	60bb      	str	r3, [r7, #8]
}
 800f9a8:	bf00      	nop
 800f9aa:	e7fe      	b.n	800f9aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f9ac:	f000 f880 	bl	800fab0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f9b0:	2100      	movs	r1, #0
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f000 fcea 	bl	801038c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f9b8:	f000 f888 	bl	800facc <xTaskResumeAll>
 800f9bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d107      	bne.n	800f9d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f9c4:	4b06      	ldr	r3, [pc, #24]	; (800f9e0 <vTaskDelay+0x64>)
 800f9c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9ca:	601a      	str	r2, [r3, #0]
 800f9cc:	f3bf 8f4f 	dsb	sy
 800f9d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9d4:	bf00      	nop
 800f9d6:	3710      	adds	r7, #16
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}
 800f9dc:	20000de8 	.word	0x20000de8
 800f9e0:	e000ed04 	.word	0xe000ed04

0800f9e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b08a      	sub	sp, #40	; 0x28
 800f9e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f9f2:	463a      	mov	r2, r7
 800f9f4:	1d39      	adds	r1, r7, #4
 800f9f6:	f107 0308 	add.w	r3, r7, #8
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7ff f848 	bl	800ea90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fa00:	6839      	ldr	r1, [r7, #0]
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	68ba      	ldr	r2, [r7, #8]
 800fa06:	9202      	str	r2, [sp, #8]
 800fa08:	9301      	str	r3, [sp, #4]
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	9300      	str	r3, [sp, #0]
 800fa0e:	2300      	movs	r3, #0
 800fa10:	460a      	mov	r2, r1
 800fa12:	4921      	ldr	r1, [pc, #132]	; (800fa98 <vTaskStartScheduler+0xb4>)
 800fa14:	4821      	ldr	r0, [pc, #132]	; (800fa9c <vTaskStartScheduler+0xb8>)
 800fa16:	f7ff fe0f 	bl	800f638 <xTaskCreateStatic>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	4a20      	ldr	r2, [pc, #128]	; (800faa0 <vTaskStartScheduler+0xbc>)
 800fa1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fa20:	4b1f      	ldr	r3, [pc, #124]	; (800faa0 <vTaskStartScheduler+0xbc>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d002      	beq.n	800fa2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fa28:	2301      	movs	r3, #1
 800fa2a:	617b      	str	r3, [r7, #20]
 800fa2c:	e001      	b.n	800fa32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d102      	bne.n	800fa3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fa38:	f000 fcfc 	bl	8010434 <xTimerCreateTimerTask>
 800fa3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	2b01      	cmp	r3, #1
 800fa42:	d116      	bne.n	800fa72 <vTaskStartScheduler+0x8e>
	__asm volatile
 800fa44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa48:	f383 8811 	msr	BASEPRI, r3
 800fa4c:	f3bf 8f6f 	isb	sy
 800fa50:	f3bf 8f4f 	dsb	sy
 800fa54:	613b      	str	r3, [r7, #16]
}
 800fa56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa58:	4b12      	ldr	r3, [pc, #72]	; (800faa4 <vTaskStartScheduler+0xc0>)
 800fa5a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa60:	4b11      	ldr	r3, [pc, #68]	; (800faa8 <vTaskStartScheduler+0xc4>)
 800fa62:	2201      	movs	r2, #1
 800fa64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa66:	4b11      	ldr	r3, [pc, #68]	; (800faac <vTaskStartScheduler+0xc8>)
 800fa68:	2200      	movs	r2, #0
 800fa6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa6c:	f001 f8b8 	bl	8010be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fa70:	e00e      	b.n	800fa90 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa78:	d10a      	bne.n	800fa90 <vTaskStartScheduler+0xac>
	__asm volatile
 800fa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa7e:	f383 8811 	msr	BASEPRI, r3
 800fa82:	f3bf 8f6f 	isb	sy
 800fa86:	f3bf 8f4f 	dsb	sy
 800fa8a:	60fb      	str	r3, [r7, #12]
}
 800fa8c:	bf00      	nop
 800fa8e:	e7fe      	b.n	800fa8e <vTaskStartScheduler+0xaa>
}
 800fa90:	bf00      	nop
 800fa92:	3718      	adds	r7, #24
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	080129b8 	.word	0x080129b8
 800fa9c:	080100c9 	.word	0x080100c9
 800faa0:	20000de4 	.word	0x20000de4
 800faa4:	20000de0 	.word	0x20000de0
 800faa8:	20000dcc 	.word	0x20000dcc
 800faac:	20000dc4 	.word	0x20000dc4

0800fab0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fab0:	b480      	push	{r7}
 800fab2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fab4:	4b04      	ldr	r3, [pc, #16]	; (800fac8 <vTaskSuspendAll+0x18>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	3301      	adds	r3, #1
 800faba:	4a03      	ldr	r2, [pc, #12]	; (800fac8 <vTaskSuspendAll+0x18>)
 800fabc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fabe:	bf00      	nop
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr
 800fac8:	20000de8 	.word	0x20000de8

0800facc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fad2:	2300      	movs	r3, #0
 800fad4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fad6:	2300      	movs	r3, #0
 800fad8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fada:	4b42      	ldr	r3, [pc, #264]	; (800fbe4 <xTaskResumeAll+0x118>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d10a      	bne.n	800faf8 <xTaskResumeAll+0x2c>
	__asm volatile
 800fae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae6:	f383 8811 	msr	BASEPRI, r3
 800faea:	f3bf 8f6f 	isb	sy
 800faee:	f3bf 8f4f 	dsb	sy
 800faf2:	603b      	str	r3, [r7, #0]
}
 800faf4:	bf00      	nop
 800faf6:	e7fe      	b.n	800faf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800faf8:	f001 f914 	bl	8010d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fafc:	4b39      	ldr	r3, [pc, #228]	; (800fbe4 <xTaskResumeAll+0x118>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	3b01      	subs	r3, #1
 800fb02:	4a38      	ldr	r2, [pc, #224]	; (800fbe4 <xTaskResumeAll+0x118>)
 800fb04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb06:	4b37      	ldr	r3, [pc, #220]	; (800fbe4 <xTaskResumeAll+0x118>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d162      	bne.n	800fbd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb0e:	4b36      	ldr	r3, [pc, #216]	; (800fbe8 <xTaskResumeAll+0x11c>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d05e      	beq.n	800fbd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb16:	e02f      	b.n	800fb78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb18:	4b34      	ldr	r3, [pc, #208]	; (800fbec <xTaskResumeAll+0x120>)
 800fb1a:	68db      	ldr	r3, [r3, #12]
 800fb1c:	68db      	ldr	r3, [r3, #12]
 800fb1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	3318      	adds	r3, #24
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7ff f871 	bl	800ec0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	3304      	adds	r3, #4
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7ff f86c 	bl	800ec0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb38:	4b2d      	ldr	r3, [pc, #180]	; (800fbf0 <xTaskResumeAll+0x124>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	d903      	bls.n	800fb48 <xTaskResumeAll+0x7c>
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb44:	4a2a      	ldr	r2, [pc, #168]	; (800fbf0 <xTaskResumeAll+0x124>)
 800fb46:	6013      	str	r3, [r2, #0]
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb4c:	4613      	mov	r3, r2
 800fb4e:	009b      	lsls	r3, r3, #2
 800fb50:	4413      	add	r3, r2
 800fb52:	009b      	lsls	r3, r3, #2
 800fb54:	4a27      	ldr	r2, [pc, #156]	; (800fbf4 <xTaskResumeAll+0x128>)
 800fb56:	441a      	add	r2, r3
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	3304      	adds	r3, #4
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	4610      	mov	r0, r2
 800fb60:	f7fe fff7 	bl	800eb52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb68:	4b23      	ldr	r3, [pc, #140]	; (800fbf8 <xTaskResumeAll+0x12c>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d302      	bcc.n	800fb78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fb72:	4b22      	ldr	r3, [pc, #136]	; (800fbfc <xTaskResumeAll+0x130>)
 800fb74:	2201      	movs	r2, #1
 800fb76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb78:	4b1c      	ldr	r3, [pc, #112]	; (800fbec <xTaskResumeAll+0x120>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d1cb      	bne.n	800fb18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d001      	beq.n	800fb8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fb86:	f000 fb55 	bl	8010234 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fb8a:	4b1d      	ldr	r3, [pc, #116]	; (800fc00 <xTaskResumeAll+0x134>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d010      	beq.n	800fbb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fb96:	f000 f847 	bl	800fc28 <xTaskIncrementTick>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d002      	beq.n	800fba6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fba0:	4b16      	ldr	r3, [pc, #88]	; (800fbfc <xTaskResumeAll+0x130>)
 800fba2:	2201      	movs	r2, #1
 800fba4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	3b01      	subs	r3, #1
 800fbaa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d1f1      	bne.n	800fb96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fbb2:	4b13      	ldr	r3, [pc, #76]	; (800fc00 <xTaskResumeAll+0x134>)
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fbb8:	4b10      	ldr	r3, [pc, #64]	; (800fbfc <xTaskResumeAll+0x130>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d009      	beq.n	800fbd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fbc4:	4b0f      	ldr	r3, [pc, #60]	; (800fc04 <xTaskResumeAll+0x138>)
 800fbc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbca:	601a      	str	r2, [r3, #0]
 800fbcc:	f3bf 8f4f 	dsb	sy
 800fbd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fbd4:	f001 f8d6 	bl	8010d84 <vPortExitCritical>

	return xAlreadyYielded;
 800fbd8:	68bb      	ldr	r3, [r7, #8]
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	20000de8 	.word	0x20000de8
 800fbe8:	20000dc0 	.word	0x20000dc0
 800fbec:	20000d80 	.word	0x20000d80
 800fbf0:	20000dc8 	.word	0x20000dc8
 800fbf4:	200008f0 	.word	0x200008f0
 800fbf8:	200008ec 	.word	0x200008ec
 800fbfc:	20000dd4 	.word	0x20000dd4
 800fc00:	20000dd0 	.word	0x20000dd0
 800fc04:	e000ed04 	.word	0xe000ed04

0800fc08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b083      	sub	sp, #12
 800fc0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fc0e:	4b05      	ldr	r3, [pc, #20]	; (800fc24 <xTaskGetTickCount+0x1c>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc14:	687b      	ldr	r3, [r7, #4]
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	370c      	adds	r7, #12
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc20:	4770      	bx	lr
 800fc22:	bf00      	nop
 800fc24:	20000dc4 	.word	0x20000dc4

0800fc28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b086      	sub	sp, #24
 800fc2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc32:	4b4f      	ldr	r3, [pc, #316]	; (800fd70 <xTaskIncrementTick+0x148>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	f040 808f 	bne.w	800fd5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc3c:	4b4d      	ldr	r3, [pc, #308]	; (800fd74 <xTaskIncrementTick+0x14c>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	3301      	adds	r3, #1
 800fc42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fc44:	4a4b      	ldr	r2, [pc, #300]	; (800fd74 <xTaskIncrementTick+0x14c>)
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d120      	bne.n	800fc92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fc50:	4b49      	ldr	r3, [pc, #292]	; (800fd78 <xTaskIncrementTick+0x150>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d00a      	beq.n	800fc70 <xTaskIncrementTick+0x48>
	__asm volatile
 800fc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc5e:	f383 8811 	msr	BASEPRI, r3
 800fc62:	f3bf 8f6f 	isb	sy
 800fc66:	f3bf 8f4f 	dsb	sy
 800fc6a:	603b      	str	r3, [r7, #0]
}
 800fc6c:	bf00      	nop
 800fc6e:	e7fe      	b.n	800fc6e <xTaskIncrementTick+0x46>
 800fc70:	4b41      	ldr	r3, [pc, #260]	; (800fd78 <xTaskIncrementTick+0x150>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	60fb      	str	r3, [r7, #12]
 800fc76:	4b41      	ldr	r3, [pc, #260]	; (800fd7c <xTaskIncrementTick+0x154>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	4a3f      	ldr	r2, [pc, #252]	; (800fd78 <xTaskIncrementTick+0x150>)
 800fc7c:	6013      	str	r3, [r2, #0]
 800fc7e:	4a3f      	ldr	r2, [pc, #252]	; (800fd7c <xTaskIncrementTick+0x154>)
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	6013      	str	r3, [r2, #0]
 800fc84:	4b3e      	ldr	r3, [pc, #248]	; (800fd80 <xTaskIncrementTick+0x158>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	3301      	adds	r3, #1
 800fc8a:	4a3d      	ldr	r2, [pc, #244]	; (800fd80 <xTaskIncrementTick+0x158>)
 800fc8c:	6013      	str	r3, [r2, #0]
 800fc8e:	f000 fad1 	bl	8010234 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fc92:	4b3c      	ldr	r3, [pc, #240]	; (800fd84 <xTaskIncrementTick+0x15c>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	693a      	ldr	r2, [r7, #16]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d349      	bcc.n	800fd30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc9c:	4b36      	ldr	r3, [pc, #216]	; (800fd78 <xTaskIncrementTick+0x150>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d104      	bne.n	800fcb0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fca6:	4b37      	ldr	r3, [pc, #220]	; (800fd84 <xTaskIncrementTick+0x15c>)
 800fca8:	f04f 32ff 	mov.w	r2, #4294967295
 800fcac:	601a      	str	r2, [r3, #0]
					break;
 800fcae:	e03f      	b.n	800fd30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcb0:	4b31      	ldr	r3, [pc, #196]	; (800fd78 <xTaskIncrementTick+0x150>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	68db      	ldr	r3, [r3, #12]
 800fcb6:	68db      	ldr	r3, [r3, #12]
 800fcb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fcc0:	693a      	ldr	r2, [r7, #16]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d203      	bcs.n	800fcd0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fcc8:	4a2e      	ldr	r2, [pc, #184]	; (800fd84 <xTaskIncrementTick+0x15c>)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fcce:	e02f      	b.n	800fd30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	3304      	adds	r3, #4
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7fe ff99 	bl	800ec0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d004      	beq.n	800fcec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	3318      	adds	r3, #24
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7fe ff90 	bl	800ec0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcf0:	4b25      	ldr	r3, [pc, #148]	; (800fd88 <xTaskIncrementTick+0x160>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d903      	bls.n	800fd00 <xTaskIncrementTick+0xd8>
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcfc:	4a22      	ldr	r2, [pc, #136]	; (800fd88 <xTaskIncrementTick+0x160>)
 800fcfe:	6013      	str	r3, [r2, #0]
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd04:	4613      	mov	r3, r2
 800fd06:	009b      	lsls	r3, r3, #2
 800fd08:	4413      	add	r3, r2
 800fd0a:	009b      	lsls	r3, r3, #2
 800fd0c:	4a1f      	ldr	r2, [pc, #124]	; (800fd8c <xTaskIncrementTick+0x164>)
 800fd0e:	441a      	add	r2, r3
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	3304      	adds	r3, #4
 800fd14:	4619      	mov	r1, r3
 800fd16:	4610      	mov	r0, r2
 800fd18:	f7fe ff1b 	bl	800eb52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd20:	4b1b      	ldr	r3, [pc, #108]	; (800fd90 <xTaskIncrementTick+0x168>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d3b8      	bcc.n	800fc9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd2e:	e7b5      	b.n	800fc9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd30:	4b17      	ldr	r3, [pc, #92]	; (800fd90 <xTaskIncrementTick+0x168>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd36:	4915      	ldr	r1, [pc, #84]	; (800fd8c <xTaskIncrementTick+0x164>)
 800fd38:	4613      	mov	r3, r2
 800fd3a:	009b      	lsls	r3, r3, #2
 800fd3c:	4413      	add	r3, r2
 800fd3e:	009b      	lsls	r3, r3, #2
 800fd40:	440b      	add	r3, r1
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d901      	bls.n	800fd4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fd48:	2301      	movs	r3, #1
 800fd4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fd4c:	4b11      	ldr	r3, [pc, #68]	; (800fd94 <xTaskIncrementTick+0x16c>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d007      	beq.n	800fd64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fd54:	2301      	movs	r3, #1
 800fd56:	617b      	str	r3, [r7, #20]
 800fd58:	e004      	b.n	800fd64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fd5a:	4b0f      	ldr	r3, [pc, #60]	; (800fd98 <xTaskIncrementTick+0x170>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	3301      	adds	r3, #1
 800fd60:	4a0d      	ldr	r2, [pc, #52]	; (800fd98 <xTaskIncrementTick+0x170>)
 800fd62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fd64:	697b      	ldr	r3, [r7, #20]
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3718      	adds	r7, #24
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
 800fd6e:	bf00      	nop
 800fd70:	20000de8 	.word	0x20000de8
 800fd74:	20000dc4 	.word	0x20000dc4
 800fd78:	20000d78 	.word	0x20000d78
 800fd7c:	20000d7c 	.word	0x20000d7c
 800fd80:	20000dd8 	.word	0x20000dd8
 800fd84:	20000de0 	.word	0x20000de0
 800fd88:	20000dc8 	.word	0x20000dc8
 800fd8c:	200008f0 	.word	0x200008f0
 800fd90:	200008ec 	.word	0x200008ec
 800fd94:	20000dd4 	.word	0x20000dd4
 800fd98:	20000dd0 	.word	0x20000dd0

0800fd9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b085      	sub	sp, #20
 800fda0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fda2:	4b28      	ldr	r3, [pc, #160]	; (800fe44 <vTaskSwitchContext+0xa8>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d003      	beq.n	800fdb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fdaa:	4b27      	ldr	r3, [pc, #156]	; (800fe48 <vTaskSwitchContext+0xac>)
 800fdac:	2201      	movs	r2, #1
 800fdae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fdb0:	e041      	b.n	800fe36 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800fdb2:	4b25      	ldr	r3, [pc, #148]	; (800fe48 <vTaskSwitchContext+0xac>)
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdb8:	4b24      	ldr	r3, [pc, #144]	; (800fe4c <vTaskSwitchContext+0xb0>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	60fb      	str	r3, [r7, #12]
 800fdbe:	e010      	b.n	800fde2 <vTaskSwitchContext+0x46>
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d10a      	bne.n	800fddc <vTaskSwitchContext+0x40>
	__asm volatile
 800fdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdca:	f383 8811 	msr	BASEPRI, r3
 800fdce:	f3bf 8f6f 	isb	sy
 800fdd2:	f3bf 8f4f 	dsb	sy
 800fdd6:	607b      	str	r3, [r7, #4]
}
 800fdd8:	bf00      	nop
 800fdda:	e7fe      	b.n	800fdda <vTaskSwitchContext+0x3e>
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	3b01      	subs	r3, #1
 800fde0:	60fb      	str	r3, [r7, #12]
 800fde2:	491b      	ldr	r1, [pc, #108]	; (800fe50 <vTaskSwitchContext+0xb4>)
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	4613      	mov	r3, r2
 800fde8:	009b      	lsls	r3, r3, #2
 800fdea:	4413      	add	r3, r2
 800fdec:	009b      	lsls	r3, r3, #2
 800fdee:	440b      	add	r3, r1
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d0e4      	beq.n	800fdc0 <vTaskSwitchContext+0x24>
 800fdf6:	68fa      	ldr	r2, [r7, #12]
 800fdf8:	4613      	mov	r3, r2
 800fdfa:	009b      	lsls	r3, r3, #2
 800fdfc:	4413      	add	r3, r2
 800fdfe:	009b      	lsls	r3, r3, #2
 800fe00:	4a13      	ldr	r2, [pc, #76]	; (800fe50 <vTaskSwitchContext+0xb4>)
 800fe02:	4413      	add	r3, r2
 800fe04:	60bb      	str	r3, [r7, #8]
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	685b      	ldr	r3, [r3, #4]
 800fe0a:	685a      	ldr	r2, [r3, #4]
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	605a      	str	r2, [r3, #4]
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	685a      	ldr	r2, [r3, #4]
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	3308      	adds	r3, #8
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d104      	bne.n	800fe26 <vTaskSwitchContext+0x8a>
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	685a      	ldr	r2, [r3, #4]
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	605a      	str	r2, [r3, #4]
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	685b      	ldr	r3, [r3, #4]
 800fe2a:	68db      	ldr	r3, [r3, #12]
 800fe2c:	4a09      	ldr	r2, [pc, #36]	; (800fe54 <vTaskSwitchContext+0xb8>)
 800fe2e:	6013      	str	r3, [r2, #0]
 800fe30:	4a06      	ldr	r2, [pc, #24]	; (800fe4c <vTaskSwitchContext+0xb0>)
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	6013      	str	r3, [r2, #0]
}
 800fe36:	bf00      	nop
 800fe38:	3714      	adds	r7, #20
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr
 800fe42:	bf00      	nop
 800fe44:	20000de8 	.word	0x20000de8
 800fe48:	20000dd4 	.word	0x20000dd4
 800fe4c:	20000dc8 	.word	0x20000dc8
 800fe50:	200008f0 	.word	0x200008f0
 800fe54:	200008ec 	.word	0x200008ec

0800fe58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d10a      	bne.n	800fe7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fe68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe6c:	f383 8811 	msr	BASEPRI, r3
 800fe70:	f3bf 8f6f 	isb	sy
 800fe74:	f3bf 8f4f 	dsb	sy
 800fe78:	60fb      	str	r3, [r7, #12]
}
 800fe7a:	bf00      	nop
 800fe7c:	e7fe      	b.n	800fe7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe7e:	4b07      	ldr	r3, [pc, #28]	; (800fe9c <vTaskPlaceOnEventList+0x44>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	3318      	adds	r3, #24
 800fe84:	4619      	mov	r1, r3
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f7fe fe87 	bl	800eb9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe8c:	2101      	movs	r1, #1
 800fe8e:	6838      	ldr	r0, [r7, #0]
 800fe90:	f000 fa7c 	bl	801038c <prvAddCurrentTaskToDelayedList>
}
 800fe94:	bf00      	nop
 800fe96:	3710      	adds	r7, #16
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	200008ec 	.word	0x200008ec

0800fea0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b086      	sub	sp, #24
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	60b9      	str	r1, [r7, #8]
 800feaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d10a      	bne.n	800fec8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800feb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb6:	f383 8811 	msr	BASEPRI, r3
 800feba:	f3bf 8f6f 	isb	sy
 800febe:	f3bf 8f4f 	dsb	sy
 800fec2:	617b      	str	r3, [r7, #20]
}
 800fec4:	bf00      	nop
 800fec6:	e7fe      	b.n	800fec6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fec8:	4b0a      	ldr	r3, [pc, #40]	; (800fef4 <vTaskPlaceOnEventListRestricted+0x54>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	3318      	adds	r3, #24
 800fece:	4619      	mov	r1, r3
 800fed0:	68f8      	ldr	r0, [r7, #12]
 800fed2:	f7fe fe3e 	bl	800eb52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d002      	beq.n	800fee2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fedc:	f04f 33ff 	mov.w	r3, #4294967295
 800fee0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fee2:	6879      	ldr	r1, [r7, #4]
 800fee4:	68b8      	ldr	r0, [r7, #8]
 800fee6:	f000 fa51 	bl	801038c <prvAddCurrentTaskToDelayedList>
	}
 800feea:	bf00      	nop
 800feec:	3718      	adds	r7, #24
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}
 800fef2:	bf00      	nop
 800fef4:	200008ec 	.word	0x200008ec

0800fef8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b086      	sub	sp, #24
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	68db      	ldr	r3, [r3, #12]
 800ff04:	68db      	ldr	r3, [r3, #12]
 800ff06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d10a      	bne.n	800ff24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ff0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff12:	f383 8811 	msr	BASEPRI, r3
 800ff16:	f3bf 8f6f 	isb	sy
 800ff1a:	f3bf 8f4f 	dsb	sy
 800ff1e:	60fb      	str	r3, [r7, #12]
}
 800ff20:	bf00      	nop
 800ff22:	e7fe      	b.n	800ff22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	3318      	adds	r3, #24
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7fe fe6f 	bl	800ec0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff2e:	4b1e      	ldr	r3, [pc, #120]	; (800ffa8 <xTaskRemoveFromEventList+0xb0>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d11d      	bne.n	800ff72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	3304      	adds	r3, #4
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7fe fe66 	bl	800ec0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff44:	4b19      	ldr	r3, [pc, #100]	; (800ffac <xTaskRemoveFromEventList+0xb4>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d903      	bls.n	800ff54 <xTaskRemoveFromEventList+0x5c>
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff50:	4a16      	ldr	r2, [pc, #88]	; (800ffac <xTaskRemoveFromEventList+0xb4>)
 800ff52:	6013      	str	r3, [r2, #0]
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff58:	4613      	mov	r3, r2
 800ff5a:	009b      	lsls	r3, r3, #2
 800ff5c:	4413      	add	r3, r2
 800ff5e:	009b      	lsls	r3, r3, #2
 800ff60:	4a13      	ldr	r2, [pc, #76]	; (800ffb0 <xTaskRemoveFromEventList+0xb8>)
 800ff62:	441a      	add	r2, r3
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	3304      	adds	r3, #4
 800ff68:	4619      	mov	r1, r3
 800ff6a:	4610      	mov	r0, r2
 800ff6c:	f7fe fdf1 	bl	800eb52 <vListInsertEnd>
 800ff70:	e005      	b.n	800ff7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	3318      	adds	r3, #24
 800ff76:	4619      	mov	r1, r3
 800ff78:	480e      	ldr	r0, [pc, #56]	; (800ffb4 <xTaskRemoveFromEventList+0xbc>)
 800ff7a:	f7fe fdea 	bl	800eb52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff82:	4b0d      	ldr	r3, [pc, #52]	; (800ffb8 <xTaskRemoveFromEventList+0xc0>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d905      	bls.n	800ff98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ff90:	4b0a      	ldr	r3, [pc, #40]	; (800ffbc <xTaskRemoveFromEventList+0xc4>)
 800ff92:	2201      	movs	r2, #1
 800ff94:	601a      	str	r2, [r3, #0]
 800ff96:	e001      	b.n	800ff9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ff9c:	697b      	ldr	r3, [r7, #20]
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3718      	adds	r7, #24
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	20000de8 	.word	0x20000de8
 800ffac:	20000dc8 	.word	0x20000dc8
 800ffb0:	200008f0 	.word	0x200008f0
 800ffb4:	20000d80 	.word	0x20000d80
 800ffb8:	200008ec 	.word	0x200008ec
 800ffbc:	20000dd4 	.word	0x20000dd4

0800ffc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b083      	sub	sp, #12
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ffc8:	4b06      	ldr	r3, [pc, #24]	; (800ffe4 <vTaskInternalSetTimeOutState+0x24>)
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ffd0:	4b05      	ldr	r3, [pc, #20]	; (800ffe8 <vTaskInternalSetTimeOutState+0x28>)
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	605a      	str	r2, [r3, #4]
}
 800ffd8:	bf00      	nop
 800ffda:	370c      	adds	r7, #12
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr
 800ffe4:	20000dd8 	.word	0x20000dd8
 800ffe8:	20000dc4 	.word	0x20000dc4

0800ffec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b088      	sub	sp, #32
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d10a      	bne.n	8010012 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010000:	f383 8811 	msr	BASEPRI, r3
 8010004:	f3bf 8f6f 	isb	sy
 8010008:	f3bf 8f4f 	dsb	sy
 801000c:	613b      	str	r3, [r7, #16]
}
 801000e:	bf00      	nop
 8010010:	e7fe      	b.n	8010010 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d10a      	bne.n	801002e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801001c:	f383 8811 	msr	BASEPRI, r3
 8010020:	f3bf 8f6f 	isb	sy
 8010024:	f3bf 8f4f 	dsb	sy
 8010028:	60fb      	str	r3, [r7, #12]
}
 801002a:	bf00      	nop
 801002c:	e7fe      	b.n	801002c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801002e:	f000 fe79 	bl	8010d24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010032:	4b1d      	ldr	r3, [pc, #116]	; (80100a8 <xTaskCheckForTimeOut+0xbc>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	685b      	ldr	r3, [r3, #4]
 801003c:	69ba      	ldr	r2, [r7, #24]
 801003e:	1ad3      	subs	r3, r2, r3
 8010040:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f1b3 3fff 	cmp.w	r3, #4294967295
 801004a:	d102      	bne.n	8010052 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801004c:	2300      	movs	r3, #0
 801004e:	61fb      	str	r3, [r7, #28]
 8010050:	e023      	b.n	801009a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	4b15      	ldr	r3, [pc, #84]	; (80100ac <xTaskCheckForTimeOut+0xc0>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	429a      	cmp	r2, r3
 801005c:	d007      	beq.n	801006e <xTaskCheckForTimeOut+0x82>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	685b      	ldr	r3, [r3, #4]
 8010062:	69ba      	ldr	r2, [r7, #24]
 8010064:	429a      	cmp	r2, r3
 8010066:	d302      	bcc.n	801006e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010068:	2301      	movs	r3, #1
 801006a:	61fb      	str	r3, [r7, #28]
 801006c:	e015      	b.n	801009a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	697a      	ldr	r2, [r7, #20]
 8010074:	429a      	cmp	r2, r3
 8010076:	d20b      	bcs.n	8010090 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	681a      	ldr	r2, [r3, #0]
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	1ad2      	subs	r2, r2, r3
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f7ff ff9b 	bl	800ffc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801008a:	2300      	movs	r3, #0
 801008c:	61fb      	str	r3, [r7, #28]
 801008e:	e004      	b.n	801009a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	2200      	movs	r2, #0
 8010094:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010096:	2301      	movs	r3, #1
 8010098:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801009a:	f000 fe73 	bl	8010d84 <vPortExitCritical>

	return xReturn;
 801009e:	69fb      	ldr	r3, [r7, #28]
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3720      	adds	r7, #32
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	20000dc4 	.word	0x20000dc4
 80100ac:	20000dd8 	.word	0x20000dd8

080100b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80100b0:	b480      	push	{r7}
 80100b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80100b4:	4b03      	ldr	r3, [pc, #12]	; (80100c4 <vTaskMissedYield+0x14>)
 80100b6:	2201      	movs	r2, #1
 80100b8:	601a      	str	r2, [r3, #0]
}
 80100ba:	bf00      	nop
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr
 80100c4:	20000dd4 	.word	0x20000dd4

080100c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80100d0:	f000 f852 	bl	8010178 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80100d4:	4b06      	ldr	r3, [pc, #24]	; (80100f0 <prvIdleTask+0x28>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	2b01      	cmp	r3, #1
 80100da:	d9f9      	bls.n	80100d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80100dc:	4b05      	ldr	r3, [pc, #20]	; (80100f4 <prvIdleTask+0x2c>)
 80100de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100e2:	601a      	str	r2, [r3, #0]
 80100e4:	f3bf 8f4f 	dsb	sy
 80100e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80100ec:	e7f0      	b.n	80100d0 <prvIdleTask+0x8>
 80100ee:	bf00      	nop
 80100f0:	200008f0 	.word	0x200008f0
 80100f4:	e000ed04 	.word	0xe000ed04

080100f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b082      	sub	sp, #8
 80100fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80100fe:	2300      	movs	r3, #0
 8010100:	607b      	str	r3, [r7, #4]
 8010102:	e00c      	b.n	801011e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010104:	687a      	ldr	r2, [r7, #4]
 8010106:	4613      	mov	r3, r2
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	4413      	add	r3, r2
 801010c:	009b      	lsls	r3, r3, #2
 801010e:	4a12      	ldr	r2, [pc, #72]	; (8010158 <prvInitialiseTaskLists+0x60>)
 8010110:	4413      	add	r3, r2
 8010112:	4618      	mov	r0, r3
 8010114:	f7fe fcf0 	bl	800eaf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	3301      	adds	r3, #1
 801011c:	607b      	str	r3, [r7, #4]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2b37      	cmp	r3, #55	; 0x37
 8010122:	d9ef      	bls.n	8010104 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010124:	480d      	ldr	r0, [pc, #52]	; (801015c <prvInitialiseTaskLists+0x64>)
 8010126:	f7fe fce7 	bl	800eaf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801012a:	480d      	ldr	r0, [pc, #52]	; (8010160 <prvInitialiseTaskLists+0x68>)
 801012c:	f7fe fce4 	bl	800eaf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010130:	480c      	ldr	r0, [pc, #48]	; (8010164 <prvInitialiseTaskLists+0x6c>)
 8010132:	f7fe fce1 	bl	800eaf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010136:	480c      	ldr	r0, [pc, #48]	; (8010168 <prvInitialiseTaskLists+0x70>)
 8010138:	f7fe fcde 	bl	800eaf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801013c:	480b      	ldr	r0, [pc, #44]	; (801016c <prvInitialiseTaskLists+0x74>)
 801013e:	f7fe fcdb 	bl	800eaf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010142:	4b0b      	ldr	r3, [pc, #44]	; (8010170 <prvInitialiseTaskLists+0x78>)
 8010144:	4a05      	ldr	r2, [pc, #20]	; (801015c <prvInitialiseTaskLists+0x64>)
 8010146:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010148:	4b0a      	ldr	r3, [pc, #40]	; (8010174 <prvInitialiseTaskLists+0x7c>)
 801014a:	4a05      	ldr	r2, [pc, #20]	; (8010160 <prvInitialiseTaskLists+0x68>)
 801014c:	601a      	str	r2, [r3, #0]
}
 801014e:	bf00      	nop
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	200008f0 	.word	0x200008f0
 801015c:	20000d50 	.word	0x20000d50
 8010160:	20000d64 	.word	0x20000d64
 8010164:	20000d80 	.word	0x20000d80
 8010168:	20000d94 	.word	0x20000d94
 801016c:	20000dac 	.word	0x20000dac
 8010170:	20000d78 	.word	0x20000d78
 8010174:	20000d7c 	.word	0x20000d7c

08010178 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801017e:	e019      	b.n	80101b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010180:	f000 fdd0 	bl	8010d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010184:	4b10      	ldr	r3, [pc, #64]	; (80101c8 <prvCheckTasksWaitingTermination+0x50>)
 8010186:	68db      	ldr	r3, [r3, #12]
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	3304      	adds	r3, #4
 8010190:	4618      	mov	r0, r3
 8010192:	f7fe fd3b 	bl	800ec0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010196:	4b0d      	ldr	r3, [pc, #52]	; (80101cc <prvCheckTasksWaitingTermination+0x54>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	3b01      	subs	r3, #1
 801019c:	4a0b      	ldr	r2, [pc, #44]	; (80101cc <prvCheckTasksWaitingTermination+0x54>)
 801019e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80101a0:	4b0b      	ldr	r3, [pc, #44]	; (80101d0 <prvCheckTasksWaitingTermination+0x58>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	3b01      	subs	r3, #1
 80101a6:	4a0a      	ldr	r2, [pc, #40]	; (80101d0 <prvCheckTasksWaitingTermination+0x58>)
 80101a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80101aa:	f000 fdeb 	bl	8010d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f000 f810 	bl	80101d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101b4:	4b06      	ldr	r3, [pc, #24]	; (80101d0 <prvCheckTasksWaitingTermination+0x58>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d1e1      	bne.n	8010180 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80101bc:	bf00      	nop
 80101be:	bf00      	nop
 80101c0:	3708      	adds	r7, #8
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}
 80101c6:	bf00      	nop
 80101c8:	20000d94 	.word	0x20000d94
 80101cc:	20000dc0 	.word	0x20000dc0
 80101d0:	20000da8 	.word	0x20000da8

080101d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b084      	sub	sp, #16
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d108      	bne.n	80101f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ea:	4618      	mov	r0, r3
 80101ec:	f000 ff88 	bl	8011100 <vPortFree>
				vPortFree( pxTCB );
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f000 ff85 	bl	8011100 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80101f6:	e018      	b.n	801022a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80101fe:	2b01      	cmp	r3, #1
 8010200:	d103      	bne.n	801020a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f000 ff7c 	bl	8011100 <vPortFree>
	}
 8010208:	e00f      	b.n	801022a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010210:	2b02      	cmp	r3, #2
 8010212:	d00a      	beq.n	801022a <prvDeleteTCB+0x56>
	__asm volatile
 8010214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010218:	f383 8811 	msr	BASEPRI, r3
 801021c:	f3bf 8f6f 	isb	sy
 8010220:	f3bf 8f4f 	dsb	sy
 8010224:	60fb      	str	r3, [r7, #12]
}
 8010226:	bf00      	nop
 8010228:	e7fe      	b.n	8010228 <prvDeleteTCB+0x54>
	}
 801022a:	bf00      	nop
 801022c:	3710      	adds	r7, #16
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
	...

08010234 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010234:	b480      	push	{r7}
 8010236:	b083      	sub	sp, #12
 8010238:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801023a:	4b0c      	ldr	r3, [pc, #48]	; (801026c <prvResetNextTaskUnblockTime+0x38>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d104      	bne.n	801024e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010244:	4b0a      	ldr	r3, [pc, #40]	; (8010270 <prvResetNextTaskUnblockTime+0x3c>)
 8010246:	f04f 32ff 	mov.w	r2, #4294967295
 801024a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801024c:	e008      	b.n	8010260 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801024e:	4b07      	ldr	r3, [pc, #28]	; (801026c <prvResetNextTaskUnblockTime+0x38>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	68db      	ldr	r3, [r3, #12]
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	4a04      	ldr	r2, [pc, #16]	; (8010270 <prvResetNextTaskUnblockTime+0x3c>)
 801025e:	6013      	str	r3, [r2, #0]
}
 8010260:	bf00      	nop
 8010262:	370c      	adds	r7, #12
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr
 801026c:	20000d78 	.word	0x20000d78
 8010270:	20000de0 	.word	0x20000de0

08010274 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010274:	b480      	push	{r7}
 8010276:	b083      	sub	sp, #12
 8010278:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801027a:	4b0b      	ldr	r3, [pc, #44]	; (80102a8 <xTaskGetSchedulerState+0x34>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d102      	bne.n	8010288 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010282:	2301      	movs	r3, #1
 8010284:	607b      	str	r3, [r7, #4]
 8010286:	e008      	b.n	801029a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010288:	4b08      	ldr	r3, [pc, #32]	; (80102ac <xTaskGetSchedulerState+0x38>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d102      	bne.n	8010296 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010290:	2302      	movs	r3, #2
 8010292:	607b      	str	r3, [r7, #4]
 8010294:	e001      	b.n	801029a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010296:	2300      	movs	r3, #0
 8010298:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801029a:	687b      	ldr	r3, [r7, #4]
	}
 801029c:	4618      	mov	r0, r3
 801029e:	370c      	adds	r7, #12
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr
 80102a8:	20000dcc 	.word	0x20000dcc
 80102ac:	20000de8 	.word	0x20000de8

080102b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b086      	sub	sp, #24
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80102bc:	2300      	movs	r3, #0
 80102be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d056      	beq.n	8010374 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80102c6:	4b2e      	ldr	r3, [pc, #184]	; (8010380 <xTaskPriorityDisinherit+0xd0>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	693a      	ldr	r2, [r7, #16]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d00a      	beq.n	80102e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80102d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d4:	f383 8811 	msr	BASEPRI, r3
 80102d8:	f3bf 8f6f 	isb	sy
 80102dc:	f3bf 8f4f 	dsb	sy
 80102e0:	60fb      	str	r3, [r7, #12]
}
 80102e2:	bf00      	nop
 80102e4:	e7fe      	b.n	80102e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d10a      	bne.n	8010304 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80102ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f2:	f383 8811 	msr	BASEPRI, r3
 80102f6:	f3bf 8f6f 	isb	sy
 80102fa:	f3bf 8f4f 	dsb	sy
 80102fe:	60bb      	str	r3, [r7, #8]
}
 8010300:	bf00      	nop
 8010302:	e7fe      	b.n	8010302 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010308:	1e5a      	subs	r2, r3, #1
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801030e:	693b      	ldr	r3, [r7, #16]
 8010310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010316:	429a      	cmp	r2, r3
 8010318:	d02c      	beq.n	8010374 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801031e:	2b00      	cmp	r3, #0
 8010320:	d128      	bne.n	8010374 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010322:	693b      	ldr	r3, [r7, #16]
 8010324:	3304      	adds	r3, #4
 8010326:	4618      	mov	r0, r3
 8010328:	f7fe fc70 	bl	800ec0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010338:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010344:	4b0f      	ldr	r3, [pc, #60]	; (8010384 <xTaskPriorityDisinherit+0xd4>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	429a      	cmp	r2, r3
 801034a:	d903      	bls.n	8010354 <xTaskPriorityDisinherit+0xa4>
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010350:	4a0c      	ldr	r2, [pc, #48]	; (8010384 <xTaskPriorityDisinherit+0xd4>)
 8010352:	6013      	str	r3, [r2, #0]
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010358:	4613      	mov	r3, r2
 801035a:	009b      	lsls	r3, r3, #2
 801035c:	4413      	add	r3, r2
 801035e:	009b      	lsls	r3, r3, #2
 8010360:	4a09      	ldr	r2, [pc, #36]	; (8010388 <xTaskPriorityDisinherit+0xd8>)
 8010362:	441a      	add	r2, r3
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	3304      	adds	r3, #4
 8010368:	4619      	mov	r1, r3
 801036a:	4610      	mov	r0, r2
 801036c:	f7fe fbf1 	bl	800eb52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010370:	2301      	movs	r3, #1
 8010372:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010374:	697b      	ldr	r3, [r7, #20]
	}
 8010376:	4618      	mov	r0, r3
 8010378:	3718      	adds	r7, #24
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	200008ec 	.word	0x200008ec
 8010384:	20000dc8 	.word	0x20000dc8
 8010388:	200008f0 	.word	0x200008f0

0801038c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b084      	sub	sp, #16
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010396:	4b21      	ldr	r3, [pc, #132]	; (801041c <prvAddCurrentTaskToDelayedList+0x90>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801039c:	4b20      	ldr	r3, [pc, #128]	; (8010420 <prvAddCurrentTaskToDelayedList+0x94>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	3304      	adds	r3, #4
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7fe fc32 	bl	800ec0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ae:	d10a      	bne.n	80103c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d007      	beq.n	80103c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103b6:	4b1a      	ldr	r3, [pc, #104]	; (8010420 <prvAddCurrentTaskToDelayedList+0x94>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	3304      	adds	r3, #4
 80103bc:	4619      	mov	r1, r3
 80103be:	4819      	ldr	r0, [pc, #100]	; (8010424 <prvAddCurrentTaskToDelayedList+0x98>)
 80103c0:	f7fe fbc7 	bl	800eb52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80103c4:	e026      	b.n	8010414 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80103c6:	68fa      	ldr	r2, [r7, #12]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	4413      	add	r3, r2
 80103cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80103ce:	4b14      	ldr	r3, [pc, #80]	; (8010420 <prvAddCurrentTaskToDelayedList+0x94>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	68ba      	ldr	r2, [r7, #8]
 80103d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80103d6:	68ba      	ldr	r2, [r7, #8]
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	429a      	cmp	r2, r3
 80103dc:	d209      	bcs.n	80103f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103de:	4b12      	ldr	r3, [pc, #72]	; (8010428 <prvAddCurrentTaskToDelayedList+0x9c>)
 80103e0:	681a      	ldr	r2, [r3, #0]
 80103e2:	4b0f      	ldr	r3, [pc, #60]	; (8010420 <prvAddCurrentTaskToDelayedList+0x94>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	3304      	adds	r3, #4
 80103e8:	4619      	mov	r1, r3
 80103ea:	4610      	mov	r0, r2
 80103ec:	f7fe fbd5 	bl	800eb9a <vListInsert>
}
 80103f0:	e010      	b.n	8010414 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103f2:	4b0e      	ldr	r3, [pc, #56]	; (801042c <prvAddCurrentTaskToDelayedList+0xa0>)
 80103f4:	681a      	ldr	r2, [r3, #0]
 80103f6:	4b0a      	ldr	r3, [pc, #40]	; (8010420 <prvAddCurrentTaskToDelayedList+0x94>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	3304      	adds	r3, #4
 80103fc:	4619      	mov	r1, r3
 80103fe:	4610      	mov	r0, r2
 8010400:	f7fe fbcb 	bl	800eb9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010404:	4b0a      	ldr	r3, [pc, #40]	; (8010430 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	68ba      	ldr	r2, [r7, #8]
 801040a:	429a      	cmp	r2, r3
 801040c:	d202      	bcs.n	8010414 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801040e:	4a08      	ldr	r2, [pc, #32]	; (8010430 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	6013      	str	r3, [r2, #0]
}
 8010414:	bf00      	nop
 8010416:	3710      	adds	r7, #16
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}
 801041c:	20000dc4 	.word	0x20000dc4
 8010420:	200008ec 	.word	0x200008ec
 8010424:	20000dac 	.word	0x20000dac
 8010428:	20000d7c 	.word	0x20000d7c
 801042c:	20000d78 	.word	0x20000d78
 8010430:	20000de0 	.word	0x20000de0

08010434 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b08a      	sub	sp, #40	; 0x28
 8010438:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801043a:	2300      	movs	r3, #0
 801043c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801043e:	f000 fb07 	bl	8010a50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010442:	4b1c      	ldr	r3, [pc, #112]	; (80104b4 <xTimerCreateTimerTask+0x80>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d021      	beq.n	801048e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801044a:	2300      	movs	r3, #0
 801044c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801044e:	2300      	movs	r3, #0
 8010450:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010452:	1d3a      	adds	r2, r7, #4
 8010454:	f107 0108 	add.w	r1, r7, #8
 8010458:	f107 030c 	add.w	r3, r7, #12
 801045c:	4618      	mov	r0, r3
 801045e:	f7fe fb31 	bl	800eac4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010462:	6879      	ldr	r1, [r7, #4]
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	68fa      	ldr	r2, [r7, #12]
 8010468:	9202      	str	r2, [sp, #8]
 801046a:	9301      	str	r3, [sp, #4]
 801046c:	2302      	movs	r3, #2
 801046e:	9300      	str	r3, [sp, #0]
 8010470:	2300      	movs	r3, #0
 8010472:	460a      	mov	r2, r1
 8010474:	4910      	ldr	r1, [pc, #64]	; (80104b8 <xTimerCreateTimerTask+0x84>)
 8010476:	4811      	ldr	r0, [pc, #68]	; (80104bc <xTimerCreateTimerTask+0x88>)
 8010478:	f7ff f8de 	bl	800f638 <xTaskCreateStatic>
 801047c:	4603      	mov	r3, r0
 801047e:	4a10      	ldr	r2, [pc, #64]	; (80104c0 <xTimerCreateTimerTask+0x8c>)
 8010480:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010482:	4b0f      	ldr	r3, [pc, #60]	; (80104c0 <xTimerCreateTimerTask+0x8c>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d001      	beq.n	801048e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801048a:	2301      	movs	r3, #1
 801048c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801048e:	697b      	ldr	r3, [r7, #20]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d10a      	bne.n	80104aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010498:	f383 8811 	msr	BASEPRI, r3
 801049c:	f3bf 8f6f 	isb	sy
 80104a0:	f3bf 8f4f 	dsb	sy
 80104a4:	613b      	str	r3, [r7, #16]
}
 80104a6:	bf00      	nop
 80104a8:	e7fe      	b.n	80104a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80104aa:	697b      	ldr	r3, [r7, #20]
}
 80104ac:	4618      	mov	r0, r3
 80104ae:	3718      	adds	r7, #24
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	20000e1c 	.word	0x20000e1c
 80104b8:	080129c0 	.word	0x080129c0
 80104bc:	080105f9 	.word	0x080105f9
 80104c0:	20000e20 	.word	0x20000e20

080104c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b08a      	sub	sp, #40	; 0x28
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	607a      	str	r2, [r7, #4]
 80104d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80104d2:	2300      	movs	r3, #0
 80104d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d10a      	bne.n	80104f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80104dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e0:	f383 8811 	msr	BASEPRI, r3
 80104e4:	f3bf 8f6f 	isb	sy
 80104e8:	f3bf 8f4f 	dsb	sy
 80104ec:	623b      	str	r3, [r7, #32]
}
 80104ee:	bf00      	nop
 80104f0:	e7fe      	b.n	80104f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80104f2:	4b1a      	ldr	r3, [pc, #104]	; (801055c <xTimerGenericCommand+0x98>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d02a      	beq.n	8010550 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	2b05      	cmp	r3, #5
 801050a:	dc18      	bgt.n	801053e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801050c:	f7ff feb2 	bl	8010274 <xTaskGetSchedulerState>
 8010510:	4603      	mov	r3, r0
 8010512:	2b02      	cmp	r3, #2
 8010514:	d109      	bne.n	801052a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010516:	4b11      	ldr	r3, [pc, #68]	; (801055c <xTimerGenericCommand+0x98>)
 8010518:	6818      	ldr	r0, [r3, #0]
 801051a:	f107 0110 	add.w	r1, r7, #16
 801051e:	2300      	movs	r3, #0
 8010520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010522:	f7fe fca1 	bl	800ee68 <xQueueGenericSend>
 8010526:	6278      	str	r0, [r7, #36]	; 0x24
 8010528:	e012      	b.n	8010550 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801052a:	4b0c      	ldr	r3, [pc, #48]	; (801055c <xTimerGenericCommand+0x98>)
 801052c:	6818      	ldr	r0, [r3, #0]
 801052e:	f107 0110 	add.w	r1, r7, #16
 8010532:	2300      	movs	r3, #0
 8010534:	2200      	movs	r2, #0
 8010536:	f7fe fc97 	bl	800ee68 <xQueueGenericSend>
 801053a:	6278      	str	r0, [r7, #36]	; 0x24
 801053c:	e008      	b.n	8010550 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801053e:	4b07      	ldr	r3, [pc, #28]	; (801055c <xTimerGenericCommand+0x98>)
 8010540:	6818      	ldr	r0, [r3, #0]
 8010542:	f107 0110 	add.w	r1, r7, #16
 8010546:	2300      	movs	r3, #0
 8010548:	683a      	ldr	r2, [r7, #0]
 801054a:	f7fe fd8b 	bl	800f064 <xQueueGenericSendFromISR>
 801054e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010552:	4618      	mov	r0, r3
 8010554:	3728      	adds	r7, #40	; 0x28
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	20000e1c 	.word	0x20000e1c

08010560 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b088      	sub	sp, #32
 8010564:	af02      	add	r7, sp, #8
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801056a:	4b22      	ldr	r3, [pc, #136]	; (80105f4 <prvProcessExpiredTimer+0x94>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	68db      	ldr	r3, [r3, #12]
 8010570:	68db      	ldr	r3, [r3, #12]
 8010572:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	3304      	adds	r3, #4
 8010578:	4618      	mov	r0, r3
 801057a:	f7fe fb47 	bl	800ec0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010584:	f003 0304 	and.w	r3, r3, #4
 8010588:	2b00      	cmp	r3, #0
 801058a:	d022      	beq.n	80105d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	699a      	ldr	r2, [r3, #24]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	18d1      	adds	r1, r2, r3
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	683a      	ldr	r2, [r7, #0]
 8010598:	6978      	ldr	r0, [r7, #20]
 801059a:	f000 f8d1 	bl	8010740 <prvInsertTimerInActiveList>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d01f      	beq.n	80105e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80105a4:	2300      	movs	r3, #0
 80105a6:	9300      	str	r3, [sp, #0]
 80105a8:	2300      	movs	r3, #0
 80105aa:	687a      	ldr	r2, [r7, #4]
 80105ac:	2100      	movs	r1, #0
 80105ae:	6978      	ldr	r0, [r7, #20]
 80105b0:	f7ff ff88 	bl	80104c4 <xTimerGenericCommand>
 80105b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d113      	bne.n	80105e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80105bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c0:	f383 8811 	msr	BASEPRI, r3
 80105c4:	f3bf 8f6f 	isb	sy
 80105c8:	f3bf 8f4f 	dsb	sy
 80105cc:	60fb      	str	r3, [r7, #12]
}
 80105ce:	bf00      	nop
 80105d0:	e7fe      	b.n	80105d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105d8:	f023 0301 	bic.w	r3, r3, #1
 80105dc:	b2da      	uxtb	r2, r3
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	6a1b      	ldr	r3, [r3, #32]
 80105e8:	6978      	ldr	r0, [r7, #20]
 80105ea:	4798      	blx	r3
}
 80105ec:	bf00      	nop
 80105ee:	3718      	adds	r7, #24
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}
 80105f4:	20000e14 	.word	0x20000e14

080105f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b084      	sub	sp, #16
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010600:	f107 0308 	add.w	r3, r7, #8
 8010604:	4618      	mov	r0, r3
 8010606:	f000 f857 	bl	80106b8 <prvGetNextExpireTime>
 801060a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	4619      	mov	r1, r3
 8010610:	68f8      	ldr	r0, [r7, #12]
 8010612:	f000 f803 	bl	801061c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010616:	f000 f8d5 	bl	80107c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801061a:	e7f1      	b.n	8010600 <prvTimerTask+0x8>

0801061c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010626:	f7ff fa43 	bl	800fab0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801062a:	f107 0308 	add.w	r3, r7, #8
 801062e:	4618      	mov	r0, r3
 8010630:	f000 f866 	bl	8010700 <prvSampleTimeNow>
 8010634:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d130      	bne.n	801069e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d10a      	bne.n	8010658 <prvProcessTimerOrBlockTask+0x3c>
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	429a      	cmp	r2, r3
 8010648:	d806      	bhi.n	8010658 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801064a:	f7ff fa3f 	bl	800facc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801064e:	68f9      	ldr	r1, [r7, #12]
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f7ff ff85 	bl	8010560 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010656:	e024      	b.n	80106a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d008      	beq.n	8010670 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801065e:	4b13      	ldr	r3, [pc, #76]	; (80106ac <prvProcessTimerOrBlockTask+0x90>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d101      	bne.n	801066c <prvProcessTimerOrBlockTask+0x50>
 8010668:	2301      	movs	r3, #1
 801066a:	e000      	b.n	801066e <prvProcessTimerOrBlockTask+0x52>
 801066c:	2300      	movs	r3, #0
 801066e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010670:	4b0f      	ldr	r3, [pc, #60]	; (80106b0 <prvProcessTimerOrBlockTask+0x94>)
 8010672:	6818      	ldr	r0, [r3, #0]
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	1ad3      	subs	r3, r2, r3
 801067a:	683a      	ldr	r2, [r7, #0]
 801067c:	4619      	mov	r1, r3
 801067e:	f7fe ffa7 	bl	800f5d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010682:	f7ff fa23 	bl	800facc <xTaskResumeAll>
 8010686:	4603      	mov	r3, r0
 8010688:	2b00      	cmp	r3, #0
 801068a:	d10a      	bne.n	80106a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801068c:	4b09      	ldr	r3, [pc, #36]	; (80106b4 <prvProcessTimerOrBlockTask+0x98>)
 801068e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010692:	601a      	str	r2, [r3, #0]
 8010694:	f3bf 8f4f 	dsb	sy
 8010698:	f3bf 8f6f 	isb	sy
}
 801069c:	e001      	b.n	80106a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801069e:	f7ff fa15 	bl	800facc <xTaskResumeAll>
}
 80106a2:	bf00      	nop
 80106a4:	3710      	adds	r7, #16
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	20000e18 	.word	0x20000e18
 80106b0:	20000e1c 	.word	0x20000e1c
 80106b4:	e000ed04 	.word	0xe000ed04

080106b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80106b8:	b480      	push	{r7}
 80106ba:	b085      	sub	sp, #20
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80106c0:	4b0e      	ldr	r3, [pc, #56]	; (80106fc <prvGetNextExpireTime+0x44>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d101      	bne.n	80106ce <prvGetNextExpireTime+0x16>
 80106ca:	2201      	movs	r2, #1
 80106cc:	e000      	b.n	80106d0 <prvGetNextExpireTime+0x18>
 80106ce:	2200      	movs	r2, #0
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d105      	bne.n	80106e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106dc:	4b07      	ldr	r3, [pc, #28]	; (80106fc <prvGetNextExpireTime+0x44>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	68db      	ldr	r3, [r3, #12]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	60fb      	str	r3, [r7, #12]
 80106e6:	e001      	b.n	80106ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80106e8:	2300      	movs	r3, #0
 80106ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80106ec:	68fb      	ldr	r3, [r7, #12]
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3714      	adds	r7, #20
 80106f2:	46bd      	mov	sp, r7
 80106f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f8:	4770      	bx	lr
 80106fa:	bf00      	nop
 80106fc:	20000e14 	.word	0x20000e14

08010700 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010708:	f7ff fa7e 	bl	800fc08 <xTaskGetTickCount>
 801070c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801070e:	4b0b      	ldr	r3, [pc, #44]	; (801073c <prvSampleTimeNow+0x3c>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	68fa      	ldr	r2, [r7, #12]
 8010714:	429a      	cmp	r2, r3
 8010716:	d205      	bcs.n	8010724 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010718:	f000 f936 	bl	8010988 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2201      	movs	r2, #1
 8010720:	601a      	str	r2, [r3, #0]
 8010722:	e002      	b.n	801072a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2200      	movs	r2, #0
 8010728:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801072a:	4a04      	ldr	r2, [pc, #16]	; (801073c <prvSampleTimeNow+0x3c>)
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010730:	68fb      	ldr	r3, [r7, #12]
}
 8010732:	4618      	mov	r0, r3
 8010734:	3710      	adds	r7, #16
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	20000e24 	.word	0x20000e24

08010740 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b086      	sub	sp, #24
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
 801074c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801074e:	2300      	movs	r3, #0
 8010750:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	68ba      	ldr	r2, [r7, #8]
 8010756:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	68fa      	ldr	r2, [r7, #12]
 801075c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801075e:	68ba      	ldr	r2, [r7, #8]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	429a      	cmp	r2, r3
 8010764:	d812      	bhi.n	801078c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	1ad2      	subs	r2, r2, r3
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	699b      	ldr	r3, [r3, #24]
 8010770:	429a      	cmp	r2, r3
 8010772:	d302      	bcc.n	801077a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010774:	2301      	movs	r3, #1
 8010776:	617b      	str	r3, [r7, #20]
 8010778:	e01b      	b.n	80107b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801077a:	4b10      	ldr	r3, [pc, #64]	; (80107bc <prvInsertTimerInActiveList+0x7c>)
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	3304      	adds	r3, #4
 8010782:	4619      	mov	r1, r3
 8010784:	4610      	mov	r0, r2
 8010786:	f7fe fa08 	bl	800eb9a <vListInsert>
 801078a:	e012      	b.n	80107b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801078c:	687a      	ldr	r2, [r7, #4]
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	429a      	cmp	r2, r3
 8010792:	d206      	bcs.n	80107a2 <prvInsertTimerInActiveList+0x62>
 8010794:	68ba      	ldr	r2, [r7, #8]
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	429a      	cmp	r2, r3
 801079a:	d302      	bcc.n	80107a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801079c:	2301      	movs	r3, #1
 801079e:	617b      	str	r3, [r7, #20]
 80107a0:	e007      	b.n	80107b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80107a2:	4b07      	ldr	r3, [pc, #28]	; (80107c0 <prvInsertTimerInActiveList+0x80>)
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	3304      	adds	r3, #4
 80107aa:	4619      	mov	r1, r3
 80107ac:	4610      	mov	r0, r2
 80107ae:	f7fe f9f4 	bl	800eb9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80107b2:	697b      	ldr	r3, [r7, #20]
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3718      	adds	r7, #24
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	20000e18 	.word	0x20000e18
 80107c0:	20000e14 	.word	0x20000e14

080107c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b08e      	sub	sp, #56	; 0x38
 80107c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80107ca:	e0ca      	b.n	8010962 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	da18      	bge.n	8010804 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80107d2:	1d3b      	adds	r3, r7, #4
 80107d4:	3304      	adds	r3, #4
 80107d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80107d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d10a      	bne.n	80107f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80107de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e2:	f383 8811 	msr	BASEPRI, r3
 80107e6:	f3bf 8f6f 	isb	sy
 80107ea:	f3bf 8f4f 	dsb	sy
 80107ee:	61fb      	str	r3, [r7, #28]
}
 80107f0:	bf00      	nop
 80107f2:	e7fe      	b.n	80107f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80107f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107fa:	6850      	ldr	r0, [r2, #4]
 80107fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107fe:	6892      	ldr	r2, [r2, #8]
 8010800:	4611      	mov	r1, r2
 8010802:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2b00      	cmp	r3, #0
 8010808:	f2c0 80aa 	blt.w	8010960 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010812:	695b      	ldr	r3, [r3, #20]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d004      	beq.n	8010822 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801081a:	3304      	adds	r3, #4
 801081c:	4618      	mov	r0, r3
 801081e:	f7fe f9f5 	bl	800ec0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010822:	463b      	mov	r3, r7
 8010824:	4618      	mov	r0, r3
 8010826:	f7ff ff6b 	bl	8010700 <prvSampleTimeNow>
 801082a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2b09      	cmp	r3, #9
 8010830:	f200 8097 	bhi.w	8010962 <prvProcessReceivedCommands+0x19e>
 8010834:	a201      	add	r2, pc, #4	; (adr r2, 801083c <prvProcessReceivedCommands+0x78>)
 8010836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801083a:	bf00      	nop
 801083c:	08010865 	.word	0x08010865
 8010840:	08010865 	.word	0x08010865
 8010844:	08010865 	.word	0x08010865
 8010848:	080108d9 	.word	0x080108d9
 801084c:	080108ed 	.word	0x080108ed
 8010850:	08010937 	.word	0x08010937
 8010854:	08010865 	.word	0x08010865
 8010858:	08010865 	.word	0x08010865
 801085c:	080108d9 	.word	0x080108d9
 8010860:	080108ed 	.word	0x080108ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801086a:	f043 0301 	orr.w	r3, r3, #1
 801086e:	b2da      	uxtb	r2, r3
 8010870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010876:	68ba      	ldr	r2, [r7, #8]
 8010878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087a:	699b      	ldr	r3, [r3, #24]
 801087c:	18d1      	adds	r1, r2, r3
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010884:	f7ff ff5c 	bl	8010740 <prvInsertTimerInActiveList>
 8010888:	4603      	mov	r3, r0
 801088a:	2b00      	cmp	r3, #0
 801088c:	d069      	beq.n	8010962 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801088e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010890:	6a1b      	ldr	r3, [r3, #32]
 8010892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010894:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801089c:	f003 0304 	and.w	r3, r3, #4
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d05e      	beq.n	8010962 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80108a4:	68ba      	ldr	r2, [r7, #8]
 80108a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a8:	699b      	ldr	r3, [r3, #24]
 80108aa:	441a      	add	r2, r3
 80108ac:	2300      	movs	r3, #0
 80108ae:	9300      	str	r3, [sp, #0]
 80108b0:	2300      	movs	r3, #0
 80108b2:	2100      	movs	r1, #0
 80108b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108b6:	f7ff fe05 	bl	80104c4 <xTimerGenericCommand>
 80108ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80108bc:	6a3b      	ldr	r3, [r7, #32]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d14f      	bne.n	8010962 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80108c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c6:	f383 8811 	msr	BASEPRI, r3
 80108ca:	f3bf 8f6f 	isb	sy
 80108ce:	f3bf 8f4f 	dsb	sy
 80108d2:	61bb      	str	r3, [r7, #24]
}
 80108d4:	bf00      	nop
 80108d6:	e7fe      	b.n	80108d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80108d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108de:	f023 0301 	bic.w	r3, r3, #1
 80108e2:	b2da      	uxtb	r2, r3
 80108e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80108ea:	e03a      	b.n	8010962 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80108ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108f2:	f043 0301 	orr.w	r3, r3, #1
 80108f6:	b2da      	uxtb	r2, r3
 80108f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80108fe:	68ba      	ldr	r2, [r7, #8]
 8010900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010902:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010906:	699b      	ldr	r3, [r3, #24]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d10a      	bne.n	8010922 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801090c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010910:	f383 8811 	msr	BASEPRI, r3
 8010914:	f3bf 8f6f 	isb	sy
 8010918:	f3bf 8f4f 	dsb	sy
 801091c:	617b      	str	r3, [r7, #20]
}
 801091e:	bf00      	nop
 8010920:	e7fe      	b.n	8010920 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010924:	699a      	ldr	r2, [r3, #24]
 8010926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010928:	18d1      	adds	r1, r2, r3
 801092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801092e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010930:	f7ff ff06 	bl	8010740 <prvInsertTimerInActiveList>
					break;
 8010934:	e015      	b.n	8010962 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801093c:	f003 0302 	and.w	r3, r3, #2
 8010940:	2b00      	cmp	r3, #0
 8010942:	d103      	bne.n	801094c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010946:	f000 fbdb 	bl	8011100 <vPortFree>
 801094a:	e00a      	b.n	8010962 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801094c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010952:	f023 0301 	bic.w	r3, r3, #1
 8010956:	b2da      	uxtb	r2, r3
 8010958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801095a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801095e:	e000      	b.n	8010962 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010960:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010962:	4b08      	ldr	r3, [pc, #32]	; (8010984 <prvProcessReceivedCommands+0x1c0>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	1d39      	adds	r1, r7, #4
 8010968:	2200      	movs	r2, #0
 801096a:	4618      	mov	r0, r3
 801096c:	f7fe fc16 	bl	800f19c <xQueueReceive>
 8010970:	4603      	mov	r3, r0
 8010972:	2b00      	cmp	r3, #0
 8010974:	f47f af2a 	bne.w	80107cc <prvProcessReceivedCommands+0x8>
	}
}
 8010978:	bf00      	nop
 801097a:	bf00      	nop
 801097c:	3730      	adds	r7, #48	; 0x30
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	20000e1c 	.word	0x20000e1c

08010988 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b088      	sub	sp, #32
 801098c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801098e:	e048      	b.n	8010a22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010990:	4b2d      	ldr	r3, [pc, #180]	; (8010a48 <prvSwitchTimerLists+0xc0>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	68db      	ldr	r3, [r3, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801099a:	4b2b      	ldr	r3, [pc, #172]	; (8010a48 <prvSwitchTimerLists+0xc0>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	68db      	ldr	r3, [r3, #12]
 80109a0:	68db      	ldr	r3, [r3, #12]
 80109a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	3304      	adds	r3, #4
 80109a8:	4618      	mov	r0, r3
 80109aa:	f7fe f92f 	bl	800ec0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	6a1b      	ldr	r3, [r3, #32]
 80109b2:	68f8      	ldr	r0, [r7, #12]
 80109b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109bc:	f003 0304 	and.w	r3, r3, #4
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d02e      	beq.n	8010a22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	699b      	ldr	r3, [r3, #24]
 80109c8:	693a      	ldr	r2, [r7, #16]
 80109ca:	4413      	add	r3, r2
 80109cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80109ce:	68ba      	ldr	r2, [r7, #8]
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d90e      	bls.n	80109f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	68ba      	ldr	r2, [r7, #8]
 80109da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	68fa      	ldr	r2, [r7, #12]
 80109e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80109e2:	4b19      	ldr	r3, [pc, #100]	; (8010a48 <prvSwitchTimerLists+0xc0>)
 80109e4:	681a      	ldr	r2, [r3, #0]
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	3304      	adds	r3, #4
 80109ea:	4619      	mov	r1, r3
 80109ec:	4610      	mov	r0, r2
 80109ee:	f7fe f8d4 	bl	800eb9a <vListInsert>
 80109f2:	e016      	b.n	8010a22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80109f4:	2300      	movs	r3, #0
 80109f6:	9300      	str	r3, [sp, #0]
 80109f8:	2300      	movs	r3, #0
 80109fa:	693a      	ldr	r2, [r7, #16]
 80109fc:	2100      	movs	r1, #0
 80109fe:	68f8      	ldr	r0, [r7, #12]
 8010a00:	f7ff fd60 	bl	80104c4 <xTimerGenericCommand>
 8010a04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d10a      	bne.n	8010a22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a10:	f383 8811 	msr	BASEPRI, r3
 8010a14:	f3bf 8f6f 	isb	sy
 8010a18:	f3bf 8f4f 	dsb	sy
 8010a1c:	603b      	str	r3, [r7, #0]
}
 8010a1e:	bf00      	nop
 8010a20:	e7fe      	b.n	8010a20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a22:	4b09      	ldr	r3, [pc, #36]	; (8010a48 <prvSwitchTimerLists+0xc0>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d1b1      	bne.n	8010990 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010a2c:	4b06      	ldr	r3, [pc, #24]	; (8010a48 <prvSwitchTimerLists+0xc0>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010a32:	4b06      	ldr	r3, [pc, #24]	; (8010a4c <prvSwitchTimerLists+0xc4>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4a04      	ldr	r2, [pc, #16]	; (8010a48 <prvSwitchTimerLists+0xc0>)
 8010a38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010a3a:	4a04      	ldr	r2, [pc, #16]	; (8010a4c <prvSwitchTimerLists+0xc4>)
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	6013      	str	r3, [r2, #0]
}
 8010a40:	bf00      	nop
 8010a42:	3718      	adds	r7, #24
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}
 8010a48:	20000e14 	.word	0x20000e14
 8010a4c:	20000e18 	.word	0x20000e18

08010a50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b082      	sub	sp, #8
 8010a54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010a56:	f000 f965 	bl	8010d24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010a5a:	4b15      	ldr	r3, [pc, #84]	; (8010ab0 <prvCheckForValidListAndQueue+0x60>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d120      	bne.n	8010aa4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010a62:	4814      	ldr	r0, [pc, #80]	; (8010ab4 <prvCheckForValidListAndQueue+0x64>)
 8010a64:	f7fe f848 	bl	800eaf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010a68:	4813      	ldr	r0, [pc, #76]	; (8010ab8 <prvCheckForValidListAndQueue+0x68>)
 8010a6a:	f7fe f845 	bl	800eaf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010a6e:	4b13      	ldr	r3, [pc, #76]	; (8010abc <prvCheckForValidListAndQueue+0x6c>)
 8010a70:	4a10      	ldr	r2, [pc, #64]	; (8010ab4 <prvCheckForValidListAndQueue+0x64>)
 8010a72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010a74:	4b12      	ldr	r3, [pc, #72]	; (8010ac0 <prvCheckForValidListAndQueue+0x70>)
 8010a76:	4a10      	ldr	r2, [pc, #64]	; (8010ab8 <prvCheckForValidListAndQueue+0x68>)
 8010a78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	9300      	str	r3, [sp, #0]
 8010a7e:	4b11      	ldr	r3, [pc, #68]	; (8010ac4 <prvCheckForValidListAndQueue+0x74>)
 8010a80:	4a11      	ldr	r2, [pc, #68]	; (8010ac8 <prvCheckForValidListAndQueue+0x78>)
 8010a82:	2110      	movs	r1, #16
 8010a84:	200a      	movs	r0, #10
 8010a86:	f7fe f953 	bl	800ed30 <xQueueGenericCreateStatic>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	4a08      	ldr	r2, [pc, #32]	; (8010ab0 <prvCheckForValidListAndQueue+0x60>)
 8010a8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010a90:	4b07      	ldr	r3, [pc, #28]	; (8010ab0 <prvCheckForValidListAndQueue+0x60>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d005      	beq.n	8010aa4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010a98:	4b05      	ldr	r3, [pc, #20]	; (8010ab0 <prvCheckForValidListAndQueue+0x60>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	490b      	ldr	r1, [pc, #44]	; (8010acc <prvCheckForValidListAndQueue+0x7c>)
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7fe fd6c 	bl	800f57c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010aa4:	f000 f96e 	bl	8010d84 <vPortExitCritical>
}
 8010aa8:	bf00      	nop
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	20000e1c 	.word	0x20000e1c
 8010ab4:	20000dec 	.word	0x20000dec
 8010ab8:	20000e00 	.word	0x20000e00
 8010abc:	20000e14 	.word	0x20000e14
 8010ac0:	20000e18 	.word	0x20000e18
 8010ac4:	20000ec8 	.word	0x20000ec8
 8010ac8:	20000e28 	.word	0x20000e28
 8010acc:	080129c8 	.word	0x080129c8

08010ad0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b085      	sub	sp, #20
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	60b9      	str	r1, [r7, #8]
 8010ada:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	3b04      	subs	r3, #4
 8010ae0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	3b04      	subs	r3, #4
 8010aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	f023 0201 	bic.w	r2, r3, #1
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	3b04      	subs	r3, #4
 8010afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010b00:	4a0c      	ldr	r2, [pc, #48]	; (8010b34 <pxPortInitialiseStack+0x64>)
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	3b14      	subs	r3, #20
 8010b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010b0c:	687a      	ldr	r2, [r7, #4]
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	3b04      	subs	r3, #4
 8010b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	f06f 0202 	mvn.w	r2, #2
 8010b1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	3b20      	subs	r3, #32
 8010b24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010b26:	68fb      	ldr	r3, [r7, #12]
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3714      	adds	r7, #20
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b32:	4770      	bx	lr
 8010b34:	08010b39 	.word	0x08010b39

08010b38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b085      	sub	sp, #20
 8010b3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010b42:	4b12      	ldr	r3, [pc, #72]	; (8010b8c <prvTaskExitError+0x54>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b4a:	d00a      	beq.n	8010b62 <prvTaskExitError+0x2a>
	__asm volatile
 8010b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b50:	f383 8811 	msr	BASEPRI, r3
 8010b54:	f3bf 8f6f 	isb	sy
 8010b58:	f3bf 8f4f 	dsb	sy
 8010b5c:	60fb      	str	r3, [r7, #12]
}
 8010b5e:	bf00      	nop
 8010b60:	e7fe      	b.n	8010b60 <prvTaskExitError+0x28>
	__asm volatile
 8010b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b66:	f383 8811 	msr	BASEPRI, r3
 8010b6a:	f3bf 8f6f 	isb	sy
 8010b6e:	f3bf 8f4f 	dsb	sy
 8010b72:	60bb      	str	r3, [r7, #8]
}
 8010b74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010b76:	bf00      	nop
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d0fc      	beq.n	8010b78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010b7e:	bf00      	nop
 8010b80:	bf00      	nop
 8010b82:	3714      	adds	r7, #20
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr
 8010b8c:	20000128 	.word	0x20000128

08010b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010b90:	4b07      	ldr	r3, [pc, #28]	; (8010bb0 <pxCurrentTCBConst2>)
 8010b92:	6819      	ldr	r1, [r3, #0]
 8010b94:	6808      	ldr	r0, [r1, #0]
 8010b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9a:	f380 8809 	msr	PSP, r0
 8010b9e:	f3bf 8f6f 	isb	sy
 8010ba2:	f04f 0000 	mov.w	r0, #0
 8010ba6:	f380 8811 	msr	BASEPRI, r0
 8010baa:	4770      	bx	lr
 8010bac:	f3af 8000 	nop.w

08010bb0 <pxCurrentTCBConst2>:
 8010bb0:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010bb4:	bf00      	nop
 8010bb6:	bf00      	nop

08010bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010bb8:	4808      	ldr	r0, [pc, #32]	; (8010bdc <prvPortStartFirstTask+0x24>)
 8010bba:	6800      	ldr	r0, [r0, #0]
 8010bbc:	6800      	ldr	r0, [r0, #0]
 8010bbe:	f380 8808 	msr	MSP, r0
 8010bc2:	f04f 0000 	mov.w	r0, #0
 8010bc6:	f380 8814 	msr	CONTROL, r0
 8010bca:	b662      	cpsie	i
 8010bcc:	b661      	cpsie	f
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	f3bf 8f6f 	isb	sy
 8010bd6:	df00      	svc	0
 8010bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010bda:	bf00      	nop
 8010bdc:	e000ed08 	.word	0xe000ed08

08010be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b086      	sub	sp, #24
 8010be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010be6:	4b46      	ldr	r3, [pc, #280]	; (8010d00 <xPortStartScheduler+0x120>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	4a46      	ldr	r2, [pc, #280]	; (8010d04 <xPortStartScheduler+0x124>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d10a      	bne.n	8010c06 <xPortStartScheduler+0x26>
	__asm volatile
 8010bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf4:	f383 8811 	msr	BASEPRI, r3
 8010bf8:	f3bf 8f6f 	isb	sy
 8010bfc:	f3bf 8f4f 	dsb	sy
 8010c00:	613b      	str	r3, [r7, #16]
}
 8010c02:	bf00      	nop
 8010c04:	e7fe      	b.n	8010c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010c06:	4b3e      	ldr	r3, [pc, #248]	; (8010d00 <xPortStartScheduler+0x120>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	4a3f      	ldr	r2, [pc, #252]	; (8010d08 <xPortStartScheduler+0x128>)
 8010c0c:	4293      	cmp	r3, r2
 8010c0e:	d10a      	bne.n	8010c26 <xPortStartScheduler+0x46>
	__asm volatile
 8010c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c14:	f383 8811 	msr	BASEPRI, r3
 8010c18:	f3bf 8f6f 	isb	sy
 8010c1c:	f3bf 8f4f 	dsb	sy
 8010c20:	60fb      	str	r3, [r7, #12]
}
 8010c22:	bf00      	nop
 8010c24:	e7fe      	b.n	8010c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010c26:	4b39      	ldr	r3, [pc, #228]	; (8010d0c <xPortStartScheduler+0x12c>)
 8010c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	b2db      	uxtb	r3, r3
 8010c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	22ff      	movs	r2, #255	; 0xff
 8010c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	b2db      	uxtb	r3, r3
 8010c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010c40:	78fb      	ldrb	r3, [r7, #3]
 8010c42:	b2db      	uxtb	r3, r3
 8010c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010c48:	b2da      	uxtb	r2, r3
 8010c4a:	4b31      	ldr	r3, [pc, #196]	; (8010d10 <xPortStartScheduler+0x130>)
 8010c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010c4e:	4b31      	ldr	r3, [pc, #196]	; (8010d14 <xPortStartScheduler+0x134>)
 8010c50:	2207      	movs	r2, #7
 8010c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c54:	e009      	b.n	8010c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010c56:	4b2f      	ldr	r3, [pc, #188]	; (8010d14 <xPortStartScheduler+0x134>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	3b01      	subs	r3, #1
 8010c5c:	4a2d      	ldr	r2, [pc, #180]	; (8010d14 <xPortStartScheduler+0x134>)
 8010c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010c60:	78fb      	ldrb	r3, [r7, #3]
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	005b      	lsls	r3, r3, #1
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c6a:	78fb      	ldrb	r3, [r7, #3]
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c72:	2b80      	cmp	r3, #128	; 0x80
 8010c74:	d0ef      	beq.n	8010c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010c76:	4b27      	ldr	r3, [pc, #156]	; (8010d14 <xPortStartScheduler+0x134>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f1c3 0307 	rsb	r3, r3, #7
 8010c7e:	2b04      	cmp	r3, #4
 8010c80:	d00a      	beq.n	8010c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8010c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c86:	f383 8811 	msr	BASEPRI, r3
 8010c8a:	f3bf 8f6f 	isb	sy
 8010c8e:	f3bf 8f4f 	dsb	sy
 8010c92:	60bb      	str	r3, [r7, #8]
}
 8010c94:	bf00      	nop
 8010c96:	e7fe      	b.n	8010c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010c98:	4b1e      	ldr	r3, [pc, #120]	; (8010d14 <xPortStartScheduler+0x134>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	021b      	lsls	r3, r3, #8
 8010c9e:	4a1d      	ldr	r2, [pc, #116]	; (8010d14 <xPortStartScheduler+0x134>)
 8010ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010ca2:	4b1c      	ldr	r3, [pc, #112]	; (8010d14 <xPortStartScheduler+0x134>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010caa:	4a1a      	ldr	r2, [pc, #104]	; (8010d14 <xPortStartScheduler+0x134>)
 8010cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	b2da      	uxtb	r2, r3
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010cb6:	4b18      	ldr	r3, [pc, #96]	; (8010d18 <xPortStartScheduler+0x138>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	4a17      	ldr	r2, [pc, #92]	; (8010d18 <xPortStartScheduler+0x138>)
 8010cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010cc2:	4b15      	ldr	r3, [pc, #84]	; (8010d18 <xPortStartScheduler+0x138>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	4a14      	ldr	r2, [pc, #80]	; (8010d18 <xPortStartScheduler+0x138>)
 8010cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010cce:	f000 f8dd 	bl	8010e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010cd2:	4b12      	ldr	r3, [pc, #72]	; (8010d1c <xPortStartScheduler+0x13c>)
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010cd8:	f000 f8fc 	bl	8010ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010cdc:	4b10      	ldr	r3, [pc, #64]	; (8010d20 <xPortStartScheduler+0x140>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	4a0f      	ldr	r2, [pc, #60]	; (8010d20 <xPortStartScheduler+0x140>)
 8010ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010ce8:	f7ff ff66 	bl	8010bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010cec:	f7ff f856 	bl	800fd9c <vTaskSwitchContext>
	prvTaskExitError();
 8010cf0:	f7ff ff22 	bl	8010b38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010cf4:	2300      	movs	r3, #0
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3718      	adds	r7, #24
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	e000ed00 	.word	0xe000ed00
 8010d04:	410fc271 	.word	0x410fc271
 8010d08:	410fc270 	.word	0x410fc270
 8010d0c:	e000e400 	.word	0xe000e400
 8010d10:	20000f18 	.word	0x20000f18
 8010d14:	20000f1c 	.word	0x20000f1c
 8010d18:	e000ed20 	.word	0xe000ed20
 8010d1c:	20000128 	.word	0x20000128
 8010d20:	e000ef34 	.word	0xe000ef34

08010d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010d24:	b480      	push	{r7}
 8010d26:	b083      	sub	sp, #12
 8010d28:	af00      	add	r7, sp, #0
	__asm volatile
 8010d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d2e:	f383 8811 	msr	BASEPRI, r3
 8010d32:	f3bf 8f6f 	isb	sy
 8010d36:	f3bf 8f4f 	dsb	sy
 8010d3a:	607b      	str	r3, [r7, #4]
}
 8010d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010d3e:	4b0f      	ldr	r3, [pc, #60]	; (8010d7c <vPortEnterCritical+0x58>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	3301      	adds	r3, #1
 8010d44:	4a0d      	ldr	r2, [pc, #52]	; (8010d7c <vPortEnterCritical+0x58>)
 8010d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010d48:	4b0c      	ldr	r3, [pc, #48]	; (8010d7c <vPortEnterCritical+0x58>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2b01      	cmp	r3, #1
 8010d4e:	d10f      	bne.n	8010d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010d50:	4b0b      	ldr	r3, [pc, #44]	; (8010d80 <vPortEnterCritical+0x5c>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	b2db      	uxtb	r3, r3
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d00a      	beq.n	8010d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8010d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d5e:	f383 8811 	msr	BASEPRI, r3
 8010d62:	f3bf 8f6f 	isb	sy
 8010d66:	f3bf 8f4f 	dsb	sy
 8010d6a:	603b      	str	r3, [r7, #0]
}
 8010d6c:	bf00      	nop
 8010d6e:	e7fe      	b.n	8010d6e <vPortEnterCritical+0x4a>
	}
}
 8010d70:	bf00      	nop
 8010d72:	370c      	adds	r7, #12
 8010d74:	46bd      	mov	sp, r7
 8010d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7a:	4770      	bx	lr
 8010d7c:	20000128 	.word	0x20000128
 8010d80:	e000ed04 	.word	0xe000ed04

08010d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010d84:	b480      	push	{r7}
 8010d86:	b083      	sub	sp, #12
 8010d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010d8a:	4b12      	ldr	r3, [pc, #72]	; (8010dd4 <vPortExitCritical+0x50>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d10a      	bne.n	8010da8 <vPortExitCritical+0x24>
	__asm volatile
 8010d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d96:	f383 8811 	msr	BASEPRI, r3
 8010d9a:	f3bf 8f6f 	isb	sy
 8010d9e:	f3bf 8f4f 	dsb	sy
 8010da2:	607b      	str	r3, [r7, #4]
}
 8010da4:	bf00      	nop
 8010da6:	e7fe      	b.n	8010da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010da8:	4b0a      	ldr	r3, [pc, #40]	; (8010dd4 <vPortExitCritical+0x50>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	3b01      	subs	r3, #1
 8010dae:	4a09      	ldr	r2, [pc, #36]	; (8010dd4 <vPortExitCritical+0x50>)
 8010db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010db2:	4b08      	ldr	r3, [pc, #32]	; (8010dd4 <vPortExitCritical+0x50>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d105      	bne.n	8010dc6 <vPortExitCritical+0x42>
 8010dba:	2300      	movs	r3, #0
 8010dbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	f383 8811 	msr	BASEPRI, r3
}
 8010dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010dc6:	bf00      	nop
 8010dc8:	370c      	adds	r7, #12
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr
 8010dd2:	bf00      	nop
 8010dd4:	20000128 	.word	0x20000128
	...

08010de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010de0:	f3ef 8009 	mrs	r0, PSP
 8010de4:	f3bf 8f6f 	isb	sy
 8010de8:	4b15      	ldr	r3, [pc, #84]	; (8010e40 <pxCurrentTCBConst>)
 8010dea:	681a      	ldr	r2, [r3, #0]
 8010dec:	f01e 0f10 	tst.w	lr, #16
 8010df0:	bf08      	it	eq
 8010df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dfa:	6010      	str	r0, [r2, #0]
 8010dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010e04:	f380 8811 	msr	BASEPRI, r0
 8010e08:	f3bf 8f4f 	dsb	sy
 8010e0c:	f3bf 8f6f 	isb	sy
 8010e10:	f7fe ffc4 	bl	800fd9c <vTaskSwitchContext>
 8010e14:	f04f 0000 	mov.w	r0, #0
 8010e18:	f380 8811 	msr	BASEPRI, r0
 8010e1c:	bc09      	pop	{r0, r3}
 8010e1e:	6819      	ldr	r1, [r3, #0]
 8010e20:	6808      	ldr	r0, [r1, #0]
 8010e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e26:	f01e 0f10 	tst.w	lr, #16
 8010e2a:	bf08      	it	eq
 8010e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010e30:	f380 8809 	msr	PSP, r0
 8010e34:	f3bf 8f6f 	isb	sy
 8010e38:	4770      	bx	lr
 8010e3a:	bf00      	nop
 8010e3c:	f3af 8000 	nop.w

08010e40 <pxCurrentTCBConst>:
 8010e40:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010e44:	bf00      	nop
 8010e46:	bf00      	nop

08010e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8010e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e52:	f383 8811 	msr	BASEPRI, r3
 8010e56:	f3bf 8f6f 	isb	sy
 8010e5a:	f3bf 8f4f 	dsb	sy
 8010e5e:	607b      	str	r3, [r7, #4]
}
 8010e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010e62:	f7fe fee1 	bl	800fc28 <xTaskIncrementTick>
 8010e66:	4603      	mov	r3, r0
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d003      	beq.n	8010e74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010e6c:	4b06      	ldr	r3, [pc, #24]	; (8010e88 <xPortSysTickHandler+0x40>)
 8010e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e72:	601a      	str	r2, [r3, #0]
 8010e74:	2300      	movs	r3, #0
 8010e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	f383 8811 	msr	BASEPRI, r3
}
 8010e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010e80:	bf00      	nop
 8010e82:	3708      	adds	r7, #8
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	e000ed04 	.word	0xe000ed04

08010e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010e90:	4b0b      	ldr	r3, [pc, #44]	; (8010ec0 <vPortSetupTimerInterrupt+0x34>)
 8010e92:	2200      	movs	r2, #0
 8010e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010e96:	4b0b      	ldr	r3, [pc, #44]	; (8010ec4 <vPortSetupTimerInterrupt+0x38>)
 8010e98:	2200      	movs	r2, #0
 8010e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e9c:	4b0a      	ldr	r3, [pc, #40]	; (8010ec8 <vPortSetupTimerInterrupt+0x3c>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	4a0a      	ldr	r2, [pc, #40]	; (8010ecc <vPortSetupTimerInterrupt+0x40>)
 8010ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ea6:	099b      	lsrs	r3, r3, #6
 8010ea8:	4a09      	ldr	r2, [pc, #36]	; (8010ed0 <vPortSetupTimerInterrupt+0x44>)
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010eae:	4b04      	ldr	r3, [pc, #16]	; (8010ec0 <vPortSetupTimerInterrupt+0x34>)
 8010eb0:	2207      	movs	r2, #7
 8010eb2:	601a      	str	r2, [r3, #0]
}
 8010eb4:	bf00      	nop
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr
 8010ebe:	bf00      	nop
 8010ec0:	e000e010 	.word	0xe000e010
 8010ec4:	e000e018 	.word	0xe000e018
 8010ec8:	2000000c 	.word	0x2000000c
 8010ecc:	10624dd3 	.word	0x10624dd3
 8010ed0:	e000e014 	.word	0xe000e014

08010ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010ee4 <vPortEnableVFP+0x10>
 8010ed8:	6801      	ldr	r1, [r0, #0]
 8010eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010ede:	6001      	str	r1, [r0, #0]
 8010ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010ee2:	bf00      	nop
 8010ee4:	e000ed88 	.word	0xe000ed88

08010ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010ee8:	b480      	push	{r7}
 8010eea:	b085      	sub	sp, #20
 8010eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010eee:	f3ef 8305 	mrs	r3, IPSR
 8010ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	2b0f      	cmp	r3, #15
 8010ef8:	d914      	bls.n	8010f24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010efa:	4a17      	ldr	r2, [pc, #92]	; (8010f58 <vPortValidateInterruptPriority+0x70>)
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	4413      	add	r3, r2
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010f04:	4b15      	ldr	r3, [pc, #84]	; (8010f5c <vPortValidateInterruptPriority+0x74>)
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	7afa      	ldrb	r2, [r7, #11]
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d20a      	bcs.n	8010f24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f12:	f383 8811 	msr	BASEPRI, r3
 8010f16:	f3bf 8f6f 	isb	sy
 8010f1a:	f3bf 8f4f 	dsb	sy
 8010f1e:	607b      	str	r3, [r7, #4]
}
 8010f20:	bf00      	nop
 8010f22:	e7fe      	b.n	8010f22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010f24:	4b0e      	ldr	r3, [pc, #56]	; (8010f60 <vPortValidateInterruptPriority+0x78>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010f2c:	4b0d      	ldr	r3, [pc, #52]	; (8010f64 <vPortValidateInterruptPriority+0x7c>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	429a      	cmp	r2, r3
 8010f32:	d90a      	bls.n	8010f4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f38:	f383 8811 	msr	BASEPRI, r3
 8010f3c:	f3bf 8f6f 	isb	sy
 8010f40:	f3bf 8f4f 	dsb	sy
 8010f44:	603b      	str	r3, [r7, #0]
}
 8010f46:	bf00      	nop
 8010f48:	e7fe      	b.n	8010f48 <vPortValidateInterruptPriority+0x60>
	}
 8010f4a:	bf00      	nop
 8010f4c:	3714      	adds	r7, #20
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f54:	4770      	bx	lr
 8010f56:	bf00      	nop
 8010f58:	e000e3f0 	.word	0xe000e3f0
 8010f5c:	20000f18 	.word	0x20000f18
 8010f60:	e000ed0c 	.word	0xe000ed0c
 8010f64:	20000f1c 	.word	0x20000f1c

08010f68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b08a      	sub	sp, #40	; 0x28
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010f70:	2300      	movs	r3, #0
 8010f72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010f74:	f7fe fd9c 	bl	800fab0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010f78:	4b5b      	ldr	r3, [pc, #364]	; (80110e8 <pvPortMalloc+0x180>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d101      	bne.n	8010f84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010f80:	f000 f920 	bl	80111c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010f84:	4b59      	ldr	r3, [pc, #356]	; (80110ec <pvPortMalloc+0x184>)
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	4013      	ands	r3, r2
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	f040 8093 	bne.w	80110b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d01d      	beq.n	8010fd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010f98:	2208      	movs	r2, #8
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	4413      	add	r3, r2
 8010f9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f003 0307 	and.w	r3, r3, #7
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d014      	beq.n	8010fd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f023 0307 	bic.w	r3, r3, #7
 8010fb0:	3308      	adds	r3, #8
 8010fb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f003 0307 	and.w	r3, r3, #7
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d00a      	beq.n	8010fd4 <pvPortMalloc+0x6c>
	__asm volatile
 8010fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc2:	f383 8811 	msr	BASEPRI, r3
 8010fc6:	f3bf 8f6f 	isb	sy
 8010fca:	f3bf 8f4f 	dsb	sy
 8010fce:	617b      	str	r3, [r7, #20]
}
 8010fd0:	bf00      	nop
 8010fd2:	e7fe      	b.n	8010fd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d06e      	beq.n	80110b8 <pvPortMalloc+0x150>
 8010fda:	4b45      	ldr	r3, [pc, #276]	; (80110f0 <pvPortMalloc+0x188>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	687a      	ldr	r2, [r7, #4]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d869      	bhi.n	80110b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010fe4:	4b43      	ldr	r3, [pc, #268]	; (80110f4 <pvPortMalloc+0x18c>)
 8010fe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010fe8:	4b42      	ldr	r3, [pc, #264]	; (80110f4 <pvPortMalloc+0x18c>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010fee:	e004      	b.n	8010ffa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	429a      	cmp	r2, r3
 8011002:	d903      	bls.n	801100c <pvPortMalloc+0xa4>
 8011004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d1f1      	bne.n	8010ff0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801100c:	4b36      	ldr	r3, [pc, #216]	; (80110e8 <pvPortMalloc+0x180>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011012:	429a      	cmp	r2, r3
 8011014:	d050      	beq.n	80110b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011016:	6a3b      	ldr	r3, [r7, #32]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	2208      	movs	r2, #8
 801101c:	4413      	add	r3, r2
 801101e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011022:	681a      	ldr	r2, [r3, #0]
 8011024:	6a3b      	ldr	r3, [r7, #32]
 8011026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102a:	685a      	ldr	r2, [r3, #4]
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	1ad2      	subs	r2, r2, r3
 8011030:	2308      	movs	r3, #8
 8011032:	005b      	lsls	r3, r3, #1
 8011034:	429a      	cmp	r2, r3
 8011036:	d91f      	bls.n	8011078 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	4413      	add	r3, r2
 801103e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011040:	69bb      	ldr	r3, [r7, #24]
 8011042:	f003 0307 	and.w	r3, r3, #7
 8011046:	2b00      	cmp	r3, #0
 8011048:	d00a      	beq.n	8011060 <pvPortMalloc+0xf8>
	__asm volatile
 801104a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801104e:	f383 8811 	msr	BASEPRI, r3
 8011052:	f3bf 8f6f 	isb	sy
 8011056:	f3bf 8f4f 	dsb	sy
 801105a:	613b      	str	r3, [r7, #16]
}
 801105c:	bf00      	nop
 801105e:	e7fe      	b.n	801105e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011062:	685a      	ldr	r2, [r3, #4]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	1ad2      	subs	r2, r2, r3
 8011068:	69bb      	ldr	r3, [r7, #24]
 801106a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106e:	687a      	ldr	r2, [r7, #4]
 8011070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011072:	69b8      	ldr	r0, [r7, #24]
 8011074:	f000 f908 	bl	8011288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011078:	4b1d      	ldr	r3, [pc, #116]	; (80110f0 <pvPortMalloc+0x188>)
 801107a:	681a      	ldr	r2, [r3, #0]
 801107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	1ad3      	subs	r3, r2, r3
 8011082:	4a1b      	ldr	r2, [pc, #108]	; (80110f0 <pvPortMalloc+0x188>)
 8011084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011086:	4b1a      	ldr	r3, [pc, #104]	; (80110f0 <pvPortMalloc+0x188>)
 8011088:	681a      	ldr	r2, [r3, #0]
 801108a:	4b1b      	ldr	r3, [pc, #108]	; (80110f8 <pvPortMalloc+0x190>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	429a      	cmp	r2, r3
 8011090:	d203      	bcs.n	801109a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011092:	4b17      	ldr	r3, [pc, #92]	; (80110f0 <pvPortMalloc+0x188>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	4a18      	ldr	r2, [pc, #96]	; (80110f8 <pvPortMalloc+0x190>)
 8011098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801109c:	685a      	ldr	r2, [r3, #4]
 801109e:	4b13      	ldr	r3, [pc, #76]	; (80110ec <pvPortMalloc+0x184>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	431a      	orrs	r2, r3
 80110a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80110a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110aa:	2200      	movs	r2, #0
 80110ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80110ae:	4b13      	ldr	r3, [pc, #76]	; (80110fc <pvPortMalloc+0x194>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	3301      	adds	r3, #1
 80110b4:	4a11      	ldr	r2, [pc, #68]	; (80110fc <pvPortMalloc+0x194>)
 80110b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80110b8:	f7fe fd08 	bl	800facc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80110bc:	69fb      	ldr	r3, [r7, #28]
 80110be:	f003 0307 	and.w	r3, r3, #7
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d00a      	beq.n	80110dc <pvPortMalloc+0x174>
	__asm volatile
 80110c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ca:	f383 8811 	msr	BASEPRI, r3
 80110ce:	f3bf 8f6f 	isb	sy
 80110d2:	f3bf 8f4f 	dsb	sy
 80110d6:	60fb      	str	r3, [r7, #12]
}
 80110d8:	bf00      	nop
 80110da:	e7fe      	b.n	80110da <pvPortMalloc+0x172>
	return pvReturn;
 80110dc:	69fb      	ldr	r3, [r7, #28]
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3728      	adds	r7, #40	; 0x28
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	20004b28 	.word	0x20004b28
 80110ec:	20004b3c 	.word	0x20004b3c
 80110f0:	20004b2c 	.word	0x20004b2c
 80110f4:	20004b20 	.word	0x20004b20
 80110f8:	20004b30 	.word	0x20004b30
 80110fc:	20004b34 	.word	0x20004b34

08011100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b086      	sub	sp, #24
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d04d      	beq.n	80111ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011112:	2308      	movs	r3, #8
 8011114:	425b      	negs	r3, r3
 8011116:	697a      	ldr	r2, [r7, #20]
 8011118:	4413      	add	r3, r2
 801111a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	685a      	ldr	r2, [r3, #4]
 8011124:	4b24      	ldr	r3, [pc, #144]	; (80111b8 <vPortFree+0xb8>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	4013      	ands	r3, r2
 801112a:	2b00      	cmp	r3, #0
 801112c:	d10a      	bne.n	8011144 <vPortFree+0x44>
	__asm volatile
 801112e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011132:	f383 8811 	msr	BASEPRI, r3
 8011136:	f3bf 8f6f 	isb	sy
 801113a:	f3bf 8f4f 	dsb	sy
 801113e:	60fb      	str	r3, [r7, #12]
}
 8011140:	bf00      	nop
 8011142:	e7fe      	b.n	8011142 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011144:	693b      	ldr	r3, [r7, #16]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d00a      	beq.n	8011162 <vPortFree+0x62>
	__asm volatile
 801114c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011150:	f383 8811 	msr	BASEPRI, r3
 8011154:	f3bf 8f6f 	isb	sy
 8011158:	f3bf 8f4f 	dsb	sy
 801115c:	60bb      	str	r3, [r7, #8]
}
 801115e:	bf00      	nop
 8011160:	e7fe      	b.n	8011160 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	685a      	ldr	r2, [r3, #4]
 8011166:	4b14      	ldr	r3, [pc, #80]	; (80111b8 <vPortFree+0xb8>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	4013      	ands	r3, r2
 801116c:	2b00      	cmp	r3, #0
 801116e:	d01e      	beq.n	80111ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011170:	693b      	ldr	r3, [r7, #16]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d11a      	bne.n	80111ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011178:	693b      	ldr	r3, [r7, #16]
 801117a:	685a      	ldr	r2, [r3, #4]
 801117c:	4b0e      	ldr	r3, [pc, #56]	; (80111b8 <vPortFree+0xb8>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	43db      	mvns	r3, r3
 8011182:	401a      	ands	r2, r3
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011188:	f7fe fc92 	bl	800fab0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801118c:	693b      	ldr	r3, [r7, #16]
 801118e:	685a      	ldr	r2, [r3, #4]
 8011190:	4b0a      	ldr	r3, [pc, #40]	; (80111bc <vPortFree+0xbc>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	4413      	add	r3, r2
 8011196:	4a09      	ldr	r2, [pc, #36]	; (80111bc <vPortFree+0xbc>)
 8011198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801119a:	6938      	ldr	r0, [r7, #16]
 801119c:	f000 f874 	bl	8011288 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80111a0:	4b07      	ldr	r3, [pc, #28]	; (80111c0 <vPortFree+0xc0>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	3301      	adds	r3, #1
 80111a6:	4a06      	ldr	r2, [pc, #24]	; (80111c0 <vPortFree+0xc0>)
 80111a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80111aa:	f7fe fc8f 	bl	800facc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80111ae:	bf00      	nop
 80111b0:	3718      	adds	r7, #24
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}
 80111b6:	bf00      	nop
 80111b8:	20004b3c 	.word	0x20004b3c
 80111bc:	20004b2c 	.word	0x20004b2c
 80111c0:	20004b38 	.word	0x20004b38

080111c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80111c4:	b480      	push	{r7}
 80111c6:	b085      	sub	sp, #20
 80111c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80111ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80111ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80111d0:	4b27      	ldr	r3, [pc, #156]	; (8011270 <prvHeapInit+0xac>)
 80111d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	f003 0307 	and.w	r3, r3, #7
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d00c      	beq.n	80111f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	3307      	adds	r3, #7
 80111e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	f023 0307 	bic.w	r3, r3, #7
 80111ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80111ec:	68ba      	ldr	r2, [r7, #8]
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	1ad3      	subs	r3, r2, r3
 80111f2:	4a1f      	ldr	r2, [pc, #124]	; (8011270 <prvHeapInit+0xac>)
 80111f4:	4413      	add	r3, r2
 80111f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80111fc:	4a1d      	ldr	r2, [pc, #116]	; (8011274 <prvHeapInit+0xb0>)
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011202:	4b1c      	ldr	r3, [pc, #112]	; (8011274 <prvHeapInit+0xb0>)
 8011204:	2200      	movs	r2, #0
 8011206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	68ba      	ldr	r2, [r7, #8]
 801120c:	4413      	add	r3, r2
 801120e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011210:	2208      	movs	r2, #8
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	1a9b      	subs	r3, r3, r2
 8011216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f023 0307 	bic.w	r3, r3, #7
 801121e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	4a15      	ldr	r2, [pc, #84]	; (8011278 <prvHeapInit+0xb4>)
 8011224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011226:	4b14      	ldr	r3, [pc, #80]	; (8011278 <prvHeapInit+0xb4>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	2200      	movs	r2, #0
 801122c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801122e:	4b12      	ldr	r3, [pc, #72]	; (8011278 <prvHeapInit+0xb4>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	2200      	movs	r2, #0
 8011234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	68fa      	ldr	r2, [r7, #12]
 801123e:	1ad2      	subs	r2, r2, r3
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011244:	4b0c      	ldr	r3, [pc, #48]	; (8011278 <prvHeapInit+0xb4>)
 8011246:	681a      	ldr	r2, [r3, #0]
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	4a0a      	ldr	r2, [pc, #40]	; (801127c <prvHeapInit+0xb8>)
 8011252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	685b      	ldr	r3, [r3, #4]
 8011258:	4a09      	ldr	r2, [pc, #36]	; (8011280 <prvHeapInit+0xbc>)
 801125a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801125c:	4b09      	ldr	r3, [pc, #36]	; (8011284 <prvHeapInit+0xc0>)
 801125e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011262:	601a      	str	r2, [r3, #0]
}
 8011264:	bf00      	nop
 8011266:	3714      	adds	r7, #20
 8011268:	46bd      	mov	sp, r7
 801126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126e:	4770      	bx	lr
 8011270:	20000f20 	.word	0x20000f20
 8011274:	20004b20 	.word	0x20004b20
 8011278:	20004b28 	.word	0x20004b28
 801127c:	20004b30 	.word	0x20004b30
 8011280:	20004b2c 	.word	0x20004b2c
 8011284:	20004b3c 	.word	0x20004b3c

08011288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011288:	b480      	push	{r7}
 801128a:	b085      	sub	sp, #20
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011290:	4b28      	ldr	r3, [pc, #160]	; (8011334 <prvInsertBlockIntoFreeList+0xac>)
 8011292:	60fb      	str	r3, [r7, #12]
 8011294:	e002      	b.n	801129c <prvInsertBlockIntoFreeList+0x14>
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	60fb      	str	r3, [r7, #12]
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	687a      	ldr	r2, [r7, #4]
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d8f7      	bhi.n	8011296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	685b      	ldr	r3, [r3, #4]
 80112ae:	68ba      	ldr	r2, [r7, #8]
 80112b0:	4413      	add	r3, r2
 80112b2:	687a      	ldr	r2, [r7, #4]
 80112b4:	429a      	cmp	r2, r3
 80112b6:	d108      	bne.n	80112ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	685a      	ldr	r2, [r3, #4]
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	685b      	ldr	r3, [r3, #4]
 80112c0:	441a      	add	r2, r3
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	685b      	ldr	r3, [r3, #4]
 80112d2:	68ba      	ldr	r2, [r7, #8]
 80112d4:	441a      	add	r2, r3
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d118      	bne.n	8011310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	681a      	ldr	r2, [r3, #0]
 80112e2:	4b15      	ldr	r3, [pc, #84]	; (8011338 <prvInsertBlockIntoFreeList+0xb0>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d00d      	beq.n	8011306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	685a      	ldr	r2, [r3, #4]
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	441a      	add	r2, r3
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	681a      	ldr	r2, [r3, #0]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	601a      	str	r2, [r3, #0]
 8011304:	e008      	b.n	8011318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011306:	4b0c      	ldr	r3, [pc, #48]	; (8011338 <prvInsertBlockIntoFreeList+0xb0>)
 8011308:	681a      	ldr	r2, [r3, #0]
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	601a      	str	r2, [r3, #0]
 801130e:	e003      	b.n	8011318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	681a      	ldr	r2, [r3, #0]
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011318:	68fa      	ldr	r2, [r7, #12]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	429a      	cmp	r2, r3
 801131e:	d002      	beq.n	8011326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011326:	bf00      	nop
 8011328:	3714      	adds	r7, #20
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr
 8011332:	bf00      	nop
 8011334:	20004b20 	.word	0x20004b20
 8011338:	20004b28 	.word	0x20004b28

0801133c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011340:	2200      	movs	r2, #0
 8011342:	4912      	ldr	r1, [pc, #72]	; (801138c <MX_USB_DEVICE_Init+0x50>)
 8011344:	4812      	ldr	r0, [pc, #72]	; (8011390 <MX_USB_DEVICE_Init+0x54>)
 8011346:	f7fc f8fd 	bl	800d544 <USBD_Init>
 801134a:	4603      	mov	r3, r0
 801134c:	2b00      	cmp	r3, #0
 801134e:	d001      	beq.n	8011354 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011350:	f7f2 fdc2 	bl	8003ed8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011354:	490f      	ldr	r1, [pc, #60]	; (8011394 <MX_USB_DEVICE_Init+0x58>)
 8011356:	480e      	ldr	r0, [pc, #56]	; (8011390 <MX_USB_DEVICE_Init+0x54>)
 8011358:	f7fc f924 	bl	800d5a4 <USBD_RegisterClass>
 801135c:	4603      	mov	r3, r0
 801135e:	2b00      	cmp	r3, #0
 8011360:	d001      	beq.n	8011366 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011362:	f7f2 fdb9 	bl	8003ed8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011366:	490c      	ldr	r1, [pc, #48]	; (8011398 <MX_USB_DEVICE_Init+0x5c>)
 8011368:	4809      	ldr	r0, [pc, #36]	; (8011390 <MX_USB_DEVICE_Init+0x54>)
 801136a:	f7fc f845 	bl	800d3f8 <USBD_CDC_RegisterInterface>
 801136e:	4603      	mov	r3, r0
 8011370:	2b00      	cmp	r3, #0
 8011372:	d001      	beq.n	8011378 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011374:	f7f2 fdb0 	bl	8003ed8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011378:	4805      	ldr	r0, [pc, #20]	; (8011390 <MX_USB_DEVICE_Init+0x54>)
 801137a:	f7fc f93a 	bl	800d5f2 <USBD_Start>
 801137e:	4603      	mov	r3, r0
 8011380:	2b00      	cmp	r3, #0
 8011382:	d001      	beq.n	8011388 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011384:	f7f2 fda8 	bl	8003ed8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011388:	bf00      	nop
 801138a:	bd80      	pop	{r7, pc}
 801138c:	20000140 	.word	0x20000140
 8011390:	200059dc 	.word	0x200059dc
 8011394:	20000024 	.word	0x20000024
 8011398:	2000012c 	.word	0x2000012c

0801139c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80113a0:	2200      	movs	r2, #0
 80113a2:	4905      	ldr	r1, [pc, #20]	; (80113b8 <CDC_Init_FS+0x1c>)
 80113a4:	4805      	ldr	r0, [pc, #20]	; (80113bc <CDC_Init_FS+0x20>)
 80113a6:	f7fc f83c 	bl	800d422 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80113aa:	4905      	ldr	r1, [pc, #20]	; (80113c0 <CDC_Init_FS+0x24>)
 80113ac:	4803      	ldr	r0, [pc, #12]	; (80113bc <CDC_Init_FS+0x20>)
 80113ae:	f7fc f856 	bl	800d45e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80113b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	bd80      	pop	{r7, pc}
 80113b8:	200064ac 	.word	0x200064ac
 80113bc:	200059dc 	.word	0x200059dc
 80113c0:	20005cac 	.word	0x20005cac

080113c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80113c4:	b480      	push	{r7}
 80113c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80113c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	46bd      	mov	sp, r7
 80113ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d2:	4770      	bx	lr

080113d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80113d4:	b480      	push	{r7}
 80113d6:	b083      	sub	sp, #12
 80113d8:	af00      	add	r7, sp, #0
 80113da:	4603      	mov	r3, r0
 80113dc:	6039      	str	r1, [r7, #0]
 80113de:	71fb      	strb	r3, [r7, #7]
 80113e0:	4613      	mov	r3, r2
 80113e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80113e4:	79fb      	ldrb	r3, [r7, #7]
 80113e6:	2b23      	cmp	r3, #35	; 0x23
 80113e8:	d84a      	bhi.n	8011480 <CDC_Control_FS+0xac>
 80113ea:	a201      	add	r2, pc, #4	; (adr r2, 80113f0 <CDC_Control_FS+0x1c>)
 80113ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f0:	08011481 	.word	0x08011481
 80113f4:	08011481 	.word	0x08011481
 80113f8:	08011481 	.word	0x08011481
 80113fc:	08011481 	.word	0x08011481
 8011400:	08011481 	.word	0x08011481
 8011404:	08011481 	.word	0x08011481
 8011408:	08011481 	.word	0x08011481
 801140c:	08011481 	.word	0x08011481
 8011410:	08011481 	.word	0x08011481
 8011414:	08011481 	.word	0x08011481
 8011418:	08011481 	.word	0x08011481
 801141c:	08011481 	.word	0x08011481
 8011420:	08011481 	.word	0x08011481
 8011424:	08011481 	.word	0x08011481
 8011428:	08011481 	.word	0x08011481
 801142c:	08011481 	.word	0x08011481
 8011430:	08011481 	.word	0x08011481
 8011434:	08011481 	.word	0x08011481
 8011438:	08011481 	.word	0x08011481
 801143c:	08011481 	.word	0x08011481
 8011440:	08011481 	.word	0x08011481
 8011444:	08011481 	.word	0x08011481
 8011448:	08011481 	.word	0x08011481
 801144c:	08011481 	.word	0x08011481
 8011450:	08011481 	.word	0x08011481
 8011454:	08011481 	.word	0x08011481
 8011458:	08011481 	.word	0x08011481
 801145c:	08011481 	.word	0x08011481
 8011460:	08011481 	.word	0x08011481
 8011464:	08011481 	.word	0x08011481
 8011468:	08011481 	.word	0x08011481
 801146c:	08011481 	.word	0x08011481
 8011470:	08011481 	.word	0x08011481
 8011474:	08011481 	.word	0x08011481
 8011478:	08011481 	.word	0x08011481
 801147c:	08011481 	.word	0x08011481
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011480:	bf00      	nop
  }

  return (USBD_OK);
 8011482:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011484:	4618      	mov	r0, r3
 8011486:	370c      	adds	r7, #12
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr

08011490 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b082      	sub	sp, #8
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801149a:	6879      	ldr	r1, [r7, #4]
 801149c:	4805      	ldr	r0, [pc, #20]	; (80114b4 <CDC_Receive_FS+0x24>)
 801149e:	f7fb ffde 	bl	800d45e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80114a2:	4804      	ldr	r0, [pc, #16]	; (80114b4 <CDC_Receive_FS+0x24>)
 80114a4:	f7fc f824 	bl	800d4f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80114a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3708      	adds	r7, #8
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
 80114b2:	bf00      	nop
 80114b4:	200059dc 	.word	0x200059dc

080114b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	460b      	mov	r3, r1
 80114c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80114c4:	2300      	movs	r3, #0
 80114c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80114c8:	4b0d      	ldr	r3, [pc, #52]	; (8011500 <CDC_Transmit_FS+0x48>)
 80114ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d001      	beq.n	80114de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80114da:	2301      	movs	r3, #1
 80114dc:	e00b      	b.n	80114f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80114de:	887b      	ldrh	r3, [r7, #2]
 80114e0:	461a      	mov	r2, r3
 80114e2:	6879      	ldr	r1, [r7, #4]
 80114e4:	4806      	ldr	r0, [pc, #24]	; (8011500 <CDC_Transmit_FS+0x48>)
 80114e6:	f7fb ff9c 	bl	800d422 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80114ea:	4805      	ldr	r0, [pc, #20]	; (8011500 <CDC_Transmit_FS+0x48>)
 80114ec:	f7fb ffd0 	bl	800d490 <USBD_CDC_TransmitPacket>
 80114f0:	4603      	mov	r3, r0
 80114f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80114f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3710      	adds	r7, #16
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	200059dc 	.word	0x200059dc

08011504 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011504:	b480      	push	{r7}
 8011506:	b087      	sub	sp, #28
 8011508:	af00      	add	r7, sp, #0
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	60b9      	str	r1, [r7, #8]
 801150e:	4613      	mov	r3, r2
 8011510:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011512:	2300      	movs	r3, #0
 8011514:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011516:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801151a:	4618      	mov	r0, r3
 801151c:	371c      	adds	r7, #28
 801151e:	46bd      	mov	sp, r7
 8011520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011524:	4770      	bx	lr
	...

08011528 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011528:	b480      	push	{r7}
 801152a:	b083      	sub	sp, #12
 801152c:	af00      	add	r7, sp, #0
 801152e:	4603      	mov	r3, r0
 8011530:	6039      	str	r1, [r7, #0]
 8011532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	2212      	movs	r2, #18
 8011538:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801153a:	4b03      	ldr	r3, [pc, #12]	; (8011548 <USBD_FS_DeviceDescriptor+0x20>)
}
 801153c:	4618      	mov	r0, r3
 801153e:	370c      	adds	r7, #12
 8011540:	46bd      	mov	sp, r7
 8011542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011546:	4770      	bx	lr
 8011548:	2000015c 	.word	0x2000015c

0801154c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801154c:	b480      	push	{r7}
 801154e:	b083      	sub	sp, #12
 8011550:	af00      	add	r7, sp, #0
 8011552:	4603      	mov	r3, r0
 8011554:	6039      	str	r1, [r7, #0]
 8011556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	2204      	movs	r2, #4
 801155c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801155e:	4b03      	ldr	r3, [pc, #12]	; (801156c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011560:	4618      	mov	r0, r3
 8011562:	370c      	adds	r7, #12
 8011564:	46bd      	mov	sp, r7
 8011566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156a:	4770      	bx	lr
 801156c:	20000170 	.word	0x20000170

08011570 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	4603      	mov	r3, r0
 8011578:	6039      	str	r1, [r7, #0]
 801157a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801157c:	79fb      	ldrb	r3, [r7, #7]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d105      	bne.n	801158e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011582:	683a      	ldr	r2, [r7, #0]
 8011584:	4907      	ldr	r1, [pc, #28]	; (80115a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8011586:	4808      	ldr	r0, [pc, #32]	; (80115a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8011588:	f7fd f865 	bl	800e656 <USBD_GetString>
 801158c:	e004      	b.n	8011598 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801158e:	683a      	ldr	r2, [r7, #0]
 8011590:	4904      	ldr	r1, [pc, #16]	; (80115a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8011592:	4805      	ldr	r0, [pc, #20]	; (80115a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8011594:	f7fd f85f 	bl	800e656 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011598:	4b02      	ldr	r3, [pc, #8]	; (80115a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801159a:	4618      	mov	r0, r3
 801159c:	3708      	adds	r7, #8
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	20006cac 	.word	0x20006cac
 80115a8:	080129d0 	.word	0x080129d0

080115ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b082      	sub	sp, #8
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	4603      	mov	r3, r0
 80115b4:	6039      	str	r1, [r7, #0]
 80115b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80115b8:	683a      	ldr	r2, [r7, #0]
 80115ba:	4904      	ldr	r1, [pc, #16]	; (80115cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80115bc:	4804      	ldr	r0, [pc, #16]	; (80115d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80115be:	f7fd f84a 	bl	800e656 <USBD_GetString>
  return USBD_StrDesc;
 80115c2:	4b02      	ldr	r3, [pc, #8]	; (80115cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3708      	adds	r7, #8
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}
 80115cc:	20006cac 	.word	0x20006cac
 80115d0:	080129e0 	.word	0x080129e0

080115d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	4603      	mov	r3, r0
 80115dc:	6039      	str	r1, [r7, #0]
 80115de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	221a      	movs	r2, #26
 80115e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80115e6:	f000 f843 	bl	8011670 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80115ea:	4b02      	ldr	r3, [pc, #8]	; (80115f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3708      	adds	r7, #8
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}
 80115f4:	20000174 	.word	0x20000174

080115f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	4603      	mov	r3, r0
 8011600:	6039      	str	r1, [r7, #0]
 8011602:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011604:	79fb      	ldrb	r3, [r7, #7]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d105      	bne.n	8011616 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801160a:	683a      	ldr	r2, [r7, #0]
 801160c:	4907      	ldr	r1, [pc, #28]	; (801162c <USBD_FS_ConfigStrDescriptor+0x34>)
 801160e:	4808      	ldr	r0, [pc, #32]	; (8011630 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011610:	f7fd f821 	bl	800e656 <USBD_GetString>
 8011614:	e004      	b.n	8011620 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011616:	683a      	ldr	r2, [r7, #0]
 8011618:	4904      	ldr	r1, [pc, #16]	; (801162c <USBD_FS_ConfigStrDescriptor+0x34>)
 801161a:	4805      	ldr	r0, [pc, #20]	; (8011630 <USBD_FS_ConfigStrDescriptor+0x38>)
 801161c:	f7fd f81b 	bl	800e656 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011620:	4b02      	ldr	r3, [pc, #8]	; (801162c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011622:	4618      	mov	r0, r3
 8011624:	3708      	adds	r7, #8
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	20006cac 	.word	0x20006cac
 8011630:	080129f4 	.word	0x080129f4

08011634 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	4603      	mov	r3, r0
 801163c:	6039      	str	r1, [r7, #0]
 801163e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011640:	79fb      	ldrb	r3, [r7, #7]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d105      	bne.n	8011652 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011646:	683a      	ldr	r2, [r7, #0]
 8011648:	4907      	ldr	r1, [pc, #28]	; (8011668 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801164a:	4808      	ldr	r0, [pc, #32]	; (801166c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801164c:	f7fd f803 	bl	800e656 <USBD_GetString>
 8011650:	e004      	b.n	801165c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011652:	683a      	ldr	r2, [r7, #0]
 8011654:	4904      	ldr	r1, [pc, #16]	; (8011668 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011656:	4805      	ldr	r0, [pc, #20]	; (801166c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011658:	f7fc fffd 	bl	800e656 <USBD_GetString>
  }
  return USBD_StrDesc;
 801165c:	4b02      	ldr	r3, [pc, #8]	; (8011668 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801165e:	4618      	mov	r0, r3
 8011660:	3708      	adds	r7, #8
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}
 8011666:	bf00      	nop
 8011668:	20006cac 	.word	0x20006cac
 801166c:	08012a00 	.word	0x08012a00

08011670 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b084      	sub	sp, #16
 8011674:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011676:	4b0f      	ldr	r3, [pc, #60]	; (80116b4 <Get_SerialNum+0x44>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801167c:	4b0e      	ldr	r3, [pc, #56]	; (80116b8 <Get_SerialNum+0x48>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011682:	4b0e      	ldr	r3, [pc, #56]	; (80116bc <Get_SerialNum+0x4c>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011688:	68fa      	ldr	r2, [r7, #12]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	4413      	add	r3, r2
 801168e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d009      	beq.n	80116aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011696:	2208      	movs	r2, #8
 8011698:	4909      	ldr	r1, [pc, #36]	; (80116c0 <Get_SerialNum+0x50>)
 801169a:	68f8      	ldr	r0, [r7, #12]
 801169c:	f000 f814 	bl	80116c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80116a0:	2204      	movs	r2, #4
 80116a2:	4908      	ldr	r1, [pc, #32]	; (80116c4 <Get_SerialNum+0x54>)
 80116a4:	68b8      	ldr	r0, [r7, #8]
 80116a6:	f000 f80f 	bl	80116c8 <IntToUnicode>
  }
}
 80116aa:	bf00      	nop
 80116ac:	3710      	adds	r7, #16
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}
 80116b2:	bf00      	nop
 80116b4:	1fff7a10 	.word	0x1fff7a10
 80116b8:	1fff7a14 	.word	0x1fff7a14
 80116bc:	1fff7a18 	.word	0x1fff7a18
 80116c0:	20000176 	.word	0x20000176
 80116c4:	20000186 	.word	0x20000186

080116c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80116c8:	b480      	push	{r7}
 80116ca:	b087      	sub	sp, #28
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	60f8      	str	r0, [r7, #12]
 80116d0:	60b9      	str	r1, [r7, #8]
 80116d2:	4613      	mov	r3, r2
 80116d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80116d6:	2300      	movs	r3, #0
 80116d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80116da:	2300      	movs	r3, #0
 80116dc:	75fb      	strb	r3, [r7, #23]
 80116de:	e027      	b.n	8011730 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	0f1b      	lsrs	r3, r3, #28
 80116e4:	2b09      	cmp	r3, #9
 80116e6:	d80b      	bhi.n	8011700 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	0f1b      	lsrs	r3, r3, #28
 80116ec:	b2da      	uxtb	r2, r3
 80116ee:	7dfb      	ldrb	r3, [r7, #23]
 80116f0:	005b      	lsls	r3, r3, #1
 80116f2:	4619      	mov	r1, r3
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	440b      	add	r3, r1
 80116f8:	3230      	adds	r2, #48	; 0x30
 80116fa:	b2d2      	uxtb	r2, r2
 80116fc:	701a      	strb	r2, [r3, #0]
 80116fe:	e00a      	b.n	8011716 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	0f1b      	lsrs	r3, r3, #28
 8011704:	b2da      	uxtb	r2, r3
 8011706:	7dfb      	ldrb	r3, [r7, #23]
 8011708:	005b      	lsls	r3, r3, #1
 801170a:	4619      	mov	r1, r3
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	440b      	add	r3, r1
 8011710:	3237      	adds	r2, #55	; 0x37
 8011712:	b2d2      	uxtb	r2, r2
 8011714:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	011b      	lsls	r3, r3, #4
 801171a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801171c:	7dfb      	ldrb	r3, [r7, #23]
 801171e:	005b      	lsls	r3, r3, #1
 8011720:	3301      	adds	r3, #1
 8011722:	68ba      	ldr	r2, [r7, #8]
 8011724:	4413      	add	r3, r2
 8011726:	2200      	movs	r2, #0
 8011728:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801172a:	7dfb      	ldrb	r3, [r7, #23]
 801172c:	3301      	adds	r3, #1
 801172e:	75fb      	strb	r3, [r7, #23]
 8011730:	7dfa      	ldrb	r2, [r7, #23]
 8011732:	79fb      	ldrb	r3, [r7, #7]
 8011734:	429a      	cmp	r2, r3
 8011736:	d3d3      	bcc.n	80116e0 <IntToUnicode+0x18>
  }
}
 8011738:	bf00      	nop
 801173a:	bf00      	nop
 801173c:	371c      	adds	r7, #28
 801173e:	46bd      	mov	sp, r7
 8011740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011744:	4770      	bx	lr
	...

08011748 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b08a      	sub	sp, #40	; 0x28
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011750:	f107 0314 	add.w	r3, r7, #20
 8011754:	2200      	movs	r2, #0
 8011756:	601a      	str	r2, [r3, #0]
 8011758:	605a      	str	r2, [r3, #4]
 801175a:	609a      	str	r2, [r3, #8]
 801175c:	60da      	str	r2, [r3, #12]
 801175e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011768:	d147      	bne.n	80117fa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801176a:	2300      	movs	r3, #0
 801176c:	613b      	str	r3, [r7, #16]
 801176e:	4b25      	ldr	r3, [pc, #148]	; (8011804 <HAL_PCD_MspInit+0xbc>)
 8011770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011772:	4a24      	ldr	r2, [pc, #144]	; (8011804 <HAL_PCD_MspInit+0xbc>)
 8011774:	f043 0301 	orr.w	r3, r3, #1
 8011778:	6313      	str	r3, [r2, #48]	; 0x30
 801177a:	4b22      	ldr	r3, [pc, #136]	; (8011804 <HAL_PCD_MspInit+0xbc>)
 801177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801177e:	f003 0301 	and.w	r3, r3, #1
 8011782:	613b      	str	r3, [r7, #16]
 8011784:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8011786:	f44f 7300 	mov.w	r3, #512	; 0x200
 801178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801178c:	2300      	movs	r3, #0
 801178e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011790:	2300      	movs	r3, #0
 8011792:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8011794:	f107 0314 	add.w	r3, r7, #20
 8011798:	4619      	mov	r1, r3
 801179a:	481b      	ldr	r0, [pc, #108]	; (8011808 <HAL_PCD_MspInit+0xc0>)
 801179c:	f7f4 faa8 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80117a0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80117a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80117a6:	2302      	movs	r3, #2
 80117a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117aa:	2300      	movs	r3, #0
 80117ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80117ae:	2303      	movs	r3, #3
 80117b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80117b2:	230a      	movs	r3, #10
 80117b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117b6:	f107 0314 	add.w	r3, r7, #20
 80117ba:	4619      	mov	r1, r3
 80117bc:	4812      	ldr	r0, [pc, #72]	; (8011808 <HAL_PCD_MspInit+0xc0>)
 80117be:	f7f4 fa97 	bl	8005cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80117c2:	4b10      	ldr	r3, [pc, #64]	; (8011804 <HAL_PCD_MspInit+0xbc>)
 80117c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117c6:	4a0f      	ldr	r2, [pc, #60]	; (8011804 <HAL_PCD_MspInit+0xbc>)
 80117c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117cc:	6353      	str	r3, [r2, #52]	; 0x34
 80117ce:	2300      	movs	r3, #0
 80117d0:	60fb      	str	r3, [r7, #12]
 80117d2:	4b0c      	ldr	r3, [pc, #48]	; (8011804 <HAL_PCD_MspInit+0xbc>)
 80117d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117d6:	4a0b      	ldr	r2, [pc, #44]	; (8011804 <HAL_PCD_MspInit+0xbc>)
 80117d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80117dc:	6453      	str	r3, [r2, #68]	; 0x44
 80117de:	4b09      	ldr	r3, [pc, #36]	; (8011804 <HAL_PCD_MspInit+0xbc>)
 80117e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80117e6:	60fb      	str	r3, [r7, #12]
 80117e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80117ea:	2200      	movs	r2, #0
 80117ec:	2105      	movs	r1, #5
 80117ee:	2043      	movs	r0, #67	; 0x43
 80117f0:	f7f3 fee4 	bl	80055bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80117f4:	2043      	movs	r0, #67	; 0x43
 80117f6:	f7f3 fefd 	bl	80055f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80117fa:	bf00      	nop
 80117fc:	3728      	adds	r7, #40	; 0x28
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
 8011802:	bf00      	nop
 8011804:	40023800 	.word	0x40023800
 8011808:	40020000 	.word	0x40020000

0801180c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b082      	sub	sp, #8
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011820:	4619      	mov	r1, r3
 8011822:	4610      	mov	r0, r2
 8011824:	f7fb ff30 	bl	800d688 <USBD_LL_SetupStage>
}
 8011828:	bf00      	nop
 801182a:	3708      	adds	r7, #8
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b082      	sub	sp, #8
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	460b      	mov	r3, r1
 801183a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011842:	78fa      	ldrb	r2, [r7, #3]
 8011844:	6879      	ldr	r1, [r7, #4]
 8011846:	4613      	mov	r3, r2
 8011848:	00db      	lsls	r3, r3, #3
 801184a:	1a9b      	subs	r3, r3, r2
 801184c:	009b      	lsls	r3, r3, #2
 801184e:	440b      	add	r3, r1
 8011850:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	78fb      	ldrb	r3, [r7, #3]
 8011858:	4619      	mov	r1, r3
 801185a:	f7fb ff6a 	bl	800d732 <USBD_LL_DataOutStage>
}
 801185e:	bf00      	nop
 8011860:	3708      	adds	r7, #8
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}

08011866 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011866:	b580      	push	{r7, lr}
 8011868:	b082      	sub	sp, #8
 801186a:	af00      	add	r7, sp, #0
 801186c:	6078      	str	r0, [r7, #4]
 801186e:	460b      	mov	r3, r1
 8011870:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011878:	78fa      	ldrb	r2, [r7, #3]
 801187a:	6879      	ldr	r1, [r7, #4]
 801187c:	4613      	mov	r3, r2
 801187e:	00db      	lsls	r3, r3, #3
 8011880:	1a9b      	subs	r3, r3, r2
 8011882:	009b      	lsls	r3, r3, #2
 8011884:	440b      	add	r3, r1
 8011886:	3348      	adds	r3, #72	; 0x48
 8011888:	681a      	ldr	r2, [r3, #0]
 801188a:	78fb      	ldrb	r3, [r7, #3]
 801188c:	4619      	mov	r1, r3
 801188e:	f7fb ffb3 	bl	800d7f8 <USBD_LL_DataInStage>
}
 8011892:	bf00      	nop
 8011894:	3708      	adds	r7, #8
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}

0801189a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801189a:	b580      	push	{r7, lr}
 801189c:	b082      	sub	sp, #8
 801189e:	af00      	add	r7, sp, #0
 80118a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7fc f8c7 	bl	800da3c <USBD_LL_SOF>
}
 80118ae:	bf00      	nop
 80118b0:	3708      	adds	r7, #8
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd80      	pop	{r7, pc}

080118b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118b6:	b580      	push	{r7, lr}
 80118b8:	b084      	sub	sp, #16
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80118be:	2301      	movs	r3, #1
 80118c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	68db      	ldr	r3, [r3, #12]
 80118c6:	2b02      	cmp	r3, #2
 80118c8:	d001      	beq.n	80118ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80118ca:	f7f2 fb05 	bl	8003ed8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80118d4:	7bfa      	ldrb	r2, [r7, #15]
 80118d6:	4611      	mov	r1, r2
 80118d8:	4618      	mov	r0, r3
 80118da:	f7fc f871 	bl	800d9c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7fc f81d 	bl	800d924 <USBD_LL_Reset>
}
 80118ea:	bf00      	nop
 80118ec:	3710      	adds	r7, #16
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
	...

080118f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011902:	4618      	mov	r0, r3
 8011904:	f7fc f86c 	bl	800d9e0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	687a      	ldr	r2, [r7, #4]
 8011914:	6812      	ldr	r2, [r2, #0]
 8011916:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801191a:	f043 0301 	orr.w	r3, r3, #1
 801191e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6a1b      	ldr	r3, [r3, #32]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d005      	beq.n	8011934 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011928:	4b04      	ldr	r3, [pc, #16]	; (801193c <HAL_PCD_SuspendCallback+0x48>)
 801192a:	691b      	ldr	r3, [r3, #16]
 801192c:	4a03      	ldr	r2, [pc, #12]	; (801193c <HAL_PCD_SuspendCallback+0x48>)
 801192e:	f043 0306 	orr.w	r3, r3, #6
 8011932:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011934:	bf00      	nop
 8011936:	3708      	adds	r7, #8
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}
 801193c:	e000ed00 	.word	0xe000ed00

08011940 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b082      	sub	sp, #8
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801194e:	4618      	mov	r0, r3
 8011950:	f7fc f85c 	bl	800da0c <USBD_LL_Resume>
}
 8011954:	bf00      	nop
 8011956:	3708      	adds	r7, #8
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b082      	sub	sp, #8
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
 8011964:	460b      	mov	r3, r1
 8011966:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801196e:	78fa      	ldrb	r2, [r7, #3]
 8011970:	4611      	mov	r1, r2
 8011972:	4618      	mov	r0, r3
 8011974:	f7fc f8aa 	bl	800dacc <USBD_LL_IsoOUTIncomplete>
}
 8011978:	bf00      	nop
 801197a:	3708      	adds	r7, #8
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}

08011980 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b082      	sub	sp, #8
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
 8011988:	460b      	mov	r3, r1
 801198a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011992:	78fa      	ldrb	r2, [r7, #3]
 8011994:	4611      	mov	r1, r2
 8011996:	4618      	mov	r0, r3
 8011998:	f7fc f872 	bl	800da80 <USBD_LL_IsoINIncomplete>
}
 801199c:	bf00      	nop
 801199e:	3708      	adds	r7, #8
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}

080119a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b082      	sub	sp, #8
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7fc f8b0 	bl	800db18 <USBD_LL_DevConnected>
}
 80119b8:	bf00      	nop
 80119ba:	3708      	adds	r7, #8
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}

080119c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b082      	sub	sp, #8
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7fc f8ad 	bl	800db2e <USBD_LL_DevDisconnected>
}
 80119d4:	bf00      	nop
 80119d6:	3708      	adds	r7, #8
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}

080119dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b082      	sub	sp, #8
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	781b      	ldrb	r3, [r3, #0]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d13c      	bne.n	8011a66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80119ec:	4a20      	ldr	r2, [pc, #128]	; (8011a70 <USBD_LL_Init+0x94>)
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	4a1e      	ldr	r2, [pc, #120]	; (8011a70 <USBD_LL_Init+0x94>)
 80119f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80119fc:	4b1c      	ldr	r3, [pc, #112]	; (8011a70 <USBD_LL_Init+0x94>)
 80119fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011a02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011a04:	4b1a      	ldr	r3, [pc, #104]	; (8011a70 <USBD_LL_Init+0x94>)
 8011a06:	2204      	movs	r2, #4
 8011a08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011a0a:	4b19      	ldr	r3, [pc, #100]	; (8011a70 <USBD_LL_Init+0x94>)
 8011a0c:	2202      	movs	r2, #2
 8011a0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011a10:	4b17      	ldr	r3, [pc, #92]	; (8011a70 <USBD_LL_Init+0x94>)
 8011a12:	2200      	movs	r2, #0
 8011a14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011a16:	4b16      	ldr	r3, [pc, #88]	; (8011a70 <USBD_LL_Init+0x94>)
 8011a18:	2202      	movs	r2, #2
 8011a1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011a1c:	4b14      	ldr	r3, [pc, #80]	; (8011a70 <USBD_LL_Init+0x94>)
 8011a1e:	2200      	movs	r2, #0
 8011a20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011a22:	4b13      	ldr	r3, [pc, #76]	; (8011a70 <USBD_LL_Init+0x94>)
 8011a24:	2200      	movs	r2, #0
 8011a26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011a28:	4b11      	ldr	r3, [pc, #68]	; (8011a70 <USBD_LL_Init+0x94>)
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8011a2e:	4b10      	ldr	r3, [pc, #64]	; (8011a70 <USBD_LL_Init+0x94>)
 8011a30:	2201      	movs	r2, #1
 8011a32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011a34:	4b0e      	ldr	r3, [pc, #56]	; (8011a70 <USBD_LL_Init+0x94>)
 8011a36:	2200      	movs	r2, #0
 8011a38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011a3a:	480d      	ldr	r0, [pc, #52]	; (8011a70 <USBD_LL_Init+0x94>)
 8011a3c:	f7f5 ffa0 	bl	8007980 <HAL_PCD_Init>
 8011a40:	4603      	mov	r3, r0
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d001      	beq.n	8011a4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011a46:	f7f2 fa47 	bl	8003ed8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011a4a:	2180      	movs	r1, #128	; 0x80
 8011a4c:	4808      	ldr	r0, [pc, #32]	; (8011a70 <USBD_LL_Init+0x94>)
 8011a4e:	f7f7 f8fe 	bl	8008c4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011a52:	2240      	movs	r2, #64	; 0x40
 8011a54:	2100      	movs	r1, #0
 8011a56:	4806      	ldr	r0, [pc, #24]	; (8011a70 <USBD_LL_Init+0x94>)
 8011a58:	f7f7 f8b2 	bl	8008bc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011a5c:	2280      	movs	r2, #128	; 0x80
 8011a5e:	2101      	movs	r1, #1
 8011a60:	4803      	ldr	r0, [pc, #12]	; (8011a70 <USBD_LL_Init+0x94>)
 8011a62:	f7f7 f8ad 	bl	8008bc0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011a66:	2300      	movs	r3, #0
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3708      	adds	r7, #8
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}
 8011a70:	20006eac 	.word	0x20006eac

08011a74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b084      	sub	sp, #16
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a80:	2300      	movs	r3, #0
 8011a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7f6 f895 	bl	8007bba <HAL_PCD_Start>
 8011a90:	4603      	mov	r3, r0
 8011a92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a94:	7bfb      	ldrb	r3, [r7, #15]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f000 f942 	bl	8011d20 <USBD_Get_USB_Status>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3710      	adds	r7, #16
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011aaa:	b580      	push	{r7, lr}
 8011aac:	b084      	sub	sp, #16
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	6078      	str	r0, [r7, #4]
 8011ab2:	4608      	mov	r0, r1
 8011ab4:	4611      	mov	r1, r2
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	4603      	mov	r3, r0
 8011aba:	70fb      	strb	r3, [r7, #3]
 8011abc:	460b      	mov	r3, r1
 8011abe:	70bb      	strb	r3, [r7, #2]
 8011ac0:	4613      	mov	r3, r2
 8011ac2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011ad2:	78bb      	ldrb	r3, [r7, #2]
 8011ad4:	883a      	ldrh	r2, [r7, #0]
 8011ad6:	78f9      	ldrb	r1, [r7, #3]
 8011ad8:	f7f6 fc79 	bl	80083ce <HAL_PCD_EP_Open>
 8011adc:	4603      	mov	r3, r0
 8011ade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ae0:	7bfb      	ldrb	r3, [r7, #15]
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f000 f91c 	bl	8011d20 <USBD_Get_USB_Status>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3710      	adds	r7, #16
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}

08011af6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011af6:	b580      	push	{r7, lr}
 8011af8:	b084      	sub	sp, #16
 8011afa:	af00      	add	r7, sp, #0
 8011afc:	6078      	str	r0, [r7, #4]
 8011afe:	460b      	mov	r3, r1
 8011b00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b02:	2300      	movs	r3, #0
 8011b04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b06:	2300      	movs	r3, #0
 8011b08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b10:	78fa      	ldrb	r2, [r7, #3]
 8011b12:	4611      	mov	r1, r2
 8011b14:	4618      	mov	r0, r3
 8011b16:	f7f6 fcc2 	bl	800849e <HAL_PCD_EP_Close>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b1e:	7bfb      	ldrb	r3, [r7, #15]
 8011b20:	4618      	mov	r0, r3
 8011b22:	f000 f8fd 	bl	8011d20 <USBD_Get_USB_Status>
 8011b26:	4603      	mov	r3, r0
 8011b28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3710      	adds	r7, #16
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}

08011b34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b084      	sub	sp, #16
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b40:	2300      	movs	r3, #0
 8011b42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b44:	2300      	movs	r3, #0
 8011b46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b4e:	78fa      	ldrb	r2, [r7, #3]
 8011b50:	4611      	mov	r1, r2
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7f6 fd9a 	bl	800868c <HAL_PCD_EP_SetStall>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b5c:	7bfb      	ldrb	r3, [r7, #15]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f000 f8de 	bl	8011d20 <USBD_Get_USB_Status>
 8011b64:	4603      	mov	r3, r0
 8011b66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3710      	adds	r7, #16
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}

08011b72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b72:	b580      	push	{r7, lr}
 8011b74:	b084      	sub	sp, #16
 8011b76:	af00      	add	r7, sp, #0
 8011b78:	6078      	str	r0, [r7, #4]
 8011b7a:	460b      	mov	r3, r1
 8011b7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b82:	2300      	movs	r3, #0
 8011b84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b8c:	78fa      	ldrb	r2, [r7, #3]
 8011b8e:	4611      	mov	r1, r2
 8011b90:	4618      	mov	r0, r3
 8011b92:	f7f6 fddf 	bl	8008754 <HAL_PCD_EP_ClrStall>
 8011b96:	4603      	mov	r3, r0
 8011b98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b9a:	7bfb      	ldrb	r3, [r7, #15]
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f000 f8bf 	bl	8011d20 <USBD_Get_USB_Status>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ba6:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3710      	adds	r7, #16
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}

08011bb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	b085      	sub	sp, #20
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	460b      	mov	r3, r1
 8011bba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011bc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	da0b      	bge.n	8011be4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011bcc:	78fb      	ldrb	r3, [r7, #3]
 8011bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011bd2:	68f9      	ldr	r1, [r7, #12]
 8011bd4:	4613      	mov	r3, r2
 8011bd6:	00db      	lsls	r3, r3, #3
 8011bd8:	1a9b      	subs	r3, r3, r2
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	440b      	add	r3, r1
 8011bde:	333e      	adds	r3, #62	; 0x3e
 8011be0:	781b      	ldrb	r3, [r3, #0]
 8011be2:	e00b      	b.n	8011bfc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011be4:	78fb      	ldrb	r3, [r7, #3]
 8011be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011bea:	68f9      	ldr	r1, [r7, #12]
 8011bec:	4613      	mov	r3, r2
 8011bee:	00db      	lsls	r3, r3, #3
 8011bf0:	1a9b      	subs	r3, r3, r2
 8011bf2:	009b      	lsls	r3, r3, #2
 8011bf4:	440b      	add	r3, r1
 8011bf6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011bfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3714      	adds	r7, #20
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr

08011c08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b084      	sub	sp, #16
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	460b      	mov	r3, r1
 8011c12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c14:	2300      	movs	r3, #0
 8011c16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c18:	2300      	movs	r3, #0
 8011c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c22:	78fa      	ldrb	r2, [r7, #3]
 8011c24:	4611      	mov	r1, r2
 8011c26:	4618      	mov	r0, r3
 8011c28:	f7f6 fbac 	bl	8008384 <HAL_PCD_SetAddress>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c30:	7bfb      	ldrb	r3, [r7, #15]
 8011c32:	4618      	mov	r0, r3
 8011c34:	f000 f874 	bl	8011d20 <USBD_Get_USB_Status>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3710      	adds	r7, #16
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}

08011c46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c46:	b580      	push	{r7, lr}
 8011c48:	b086      	sub	sp, #24
 8011c4a:	af00      	add	r7, sp, #0
 8011c4c:	60f8      	str	r0, [r7, #12]
 8011c4e:	607a      	str	r2, [r7, #4]
 8011c50:	603b      	str	r3, [r7, #0]
 8011c52:	460b      	mov	r3, r1
 8011c54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c56:	2300      	movs	r3, #0
 8011c58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011c64:	7af9      	ldrb	r1, [r7, #11]
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	687a      	ldr	r2, [r7, #4]
 8011c6a:	f7f6 fcc5 	bl	80085f8 <HAL_PCD_EP_Transmit>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c72:	7dfb      	ldrb	r3, [r7, #23]
 8011c74:	4618      	mov	r0, r3
 8011c76:	f000 f853 	bl	8011d20 <USBD_Get_USB_Status>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011c7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011c80:	4618      	mov	r0, r3
 8011c82:	3718      	adds	r7, #24
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b086      	sub	sp, #24
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	60f8      	str	r0, [r7, #12]
 8011c90:	607a      	str	r2, [r7, #4]
 8011c92:	603b      	str	r3, [r7, #0]
 8011c94:	460b      	mov	r3, r1
 8011c96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011ca6:	7af9      	ldrb	r1, [r7, #11]
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	687a      	ldr	r2, [r7, #4]
 8011cac:	f7f6 fc41 	bl	8008532 <HAL_PCD_EP_Receive>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cb4:	7dfb      	ldrb	r3, [r7, #23]
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f000 f832 	bl	8011d20 <USBD_Get_USB_Status>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011cc0:	7dbb      	ldrb	r3, [r7, #22]
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3718      	adds	r7, #24
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}

08011cca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cca:	b580      	push	{r7, lr}
 8011ccc:	b082      	sub	sp, #8
 8011cce:	af00      	add	r7, sp, #0
 8011cd0:	6078      	str	r0, [r7, #4]
 8011cd2:	460b      	mov	r3, r1
 8011cd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011cdc:	78fa      	ldrb	r2, [r7, #3]
 8011cde:	4611      	mov	r1, r2
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7f6 fc71 	bl	80085c8 <HAL_PCD_EP_GetRxCount>
 8011ce6:	4603      	mov	r3, r0
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3708      	adds	r7, #8
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}

08011cf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b083      	sub	sp, #12
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011cf8:	4b03      	ldr	r3, [pc, #12]	; (8011d08 <USBD_static_malloc+0x18>)
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	370c      	adds	r7, #12
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d04:	4770      	bx	lr
 8011d06:	bf00      	nop
 8011d08:	20004b40 	.word	0x20004b40

08011d0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	b083      	sub	sp, #12
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]

}
 8011d14:	bf00      	nop
 8011d16:	370c      	adds	r7, #12
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1e:	4770      	bx	lr

08011d20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011d20:	b480      	push	{r7}
 8011d22:	b085      	sub	sp, #20
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	4603      	mov	r3, r0
 8011d28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011d2e:	79fb      	ldrb	r3, [r7, #7]
 8011d30:	2b03      	cmp	r3, #3
 8011d32:	d817      	bhi.n	8011d64 <USBD_Get_USB_Status+0x44>
 8011d34:	a201      	add	r2, pc, #4	; (adr r2, 8011d3c <USBD_Get_USB_Status+0x1c>)
 8011d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d3a:	bf00      	nop
 8011d3c:	08011d4d 	.word	0x08011d4d
 8011d40:	08011d53 	.word	0x08011d53
 8011d44:	08011d59 	.word	0x08011d59
 8011d48:	08011d5f 	.word	0x08011d5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8011d50:	e00b      	b.n	8011d6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011d52:	2303      	movs	r3, #3
 8011d54:	73fb      	strb	r3, [r7, #15]
    break;
 8011d56:	e008      	b.n	8011d6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011d58:	2301      	movs	r3, #1
 8011d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8011d5c:	e005      	b.n	8011d6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011d5e:	2303      	movs	r3, #3
 8011d60:	73fb      	strb	r3, [r7, #15]
    break;
 8011d62:	e002      	b.n	8011d6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011d64:	2303      	movs	r3, #3
 8011d66:	73fb      	strb	r3, [r7, #15]
    break;
 8011d68:	bf00      	nop
  }
  return usb_status;
 8011d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	3714      	adds	r7, #20
 8011d70:	46bd      	mov	sp, r7
 8011d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d76:	4770      	bx	lr

08011d78 <__errno>:
 8011d78:	4b01      	ldr	r3, [pc, #4]	; (8011d80 <__errno+0x8>)
 8011d7a:	6818      	ldr	r0, [r3, #0]
 8011d7c:	4770      	bx	lr
 8011d7e:	bf00      	nop
 8011d80:	20000190 	.word	0x20000190

08011d84 <__libc_init_array>:
 8011d84:	b570      	push	{r4, r5, r6, lr}
 8011d86:	4d0d      	ldr	r5, [pc, #52]	; (8011dbc <__libc_init_array+0x38>)
 8011d88:	4c0d      	ldr	r4, [pc, #52]	; (8011dc0 <__libc_init_array+0x3c>)
 8011d8a:	1b64      	subs	r4, r4, r5
 8011d8c:	10a4      	asrs	r4, r4, #2
 8011d8e:	2600      	movs	r6, #0
 8011d90:	42a6      	cmp	r6, r4
 8011d92:	d109      	bne.n	8011da8 <__libc_init_array+0x24>
 8011d94:	4d0b      	ldr	r5, [pc, #44]	; (8011dc4 <__libc_init_array+0x40>)
 8011d96:	4c0c      	ldr	r4, [pc, #48]	; (8011dc8 <__libc_init_array+0x44>)
 8011d98:	f000 fde6 	bl	8012968 <_init>
 8011d9c:	1b64      	subs	r4, r4, r5
 8011d9e:	10a4      	asrs	r4, r4, #2
 8011da0:	2600      	movs	r6, #0
 8011da2:	42a6      	cmp	r6, r4
 8011da4:	d105      	bne.n	8011db2 <__libc_init_array+0x2e>
 8011da6:	bd70      	pop	{r4, r5, r6, pc}
 8011da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dac:	4798      	blx	r3
 8011dae:	3601      	adds	r6, #1
 8011db0:	e7ee      	b.n	8011d90 <__libc_init_array+0xc>
 8011db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8011db6:	4798      	blx	r3
 8011db8:	3601      	adds	r6, #1
 8011dba:	e7f2      	b.n	8011da2 <__libc_init_array+0x1e>
 8011dbc:	08012b30 	.word	0x08012b30
 8011dc0:	08012b30 	.word	0x08012b30
 8011dc4:	08012b30 	.word	0x08012b30
 8011dc8:	08012b34 	.word	0x08012b34

08011dcc <memcpy>:
 8011dcc:	440a      	add	r2, r1
 8011dce:	4291      	cmp	r1, r2
 8011dd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011dd4:	d100      	bne.n	8011dd8 <memcpy+0xc>
 8011dd6:	4770      	bx	lr
 8011dd8:	b510      	push	{r4, lr}
 8011dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011dde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011de2:	4291      	cmp	r1, r2
 8011de4:	d1f9      	bne.n	8011dda <memcpy+0xe>
 8011de6:	bd10      	pop	{r4, pc}

08011de8 <memset>:
 8011de8:	4402      	add	r2, r0
 8011dea:	4603      	mov	r3, r0
 8011dec:	4293      	cmp	r3, r2
 8011dee:	d100      	bne.n	8011df2 <memset+0xa>
 8011df0:	4770      	bx	lr
 8011df2:	f803 1b01 	strb.w	r1, [r3], #1
 8011df6:	e7f9      	b.n	8011dec <memset+0x4>

08011df8 <asin>:
 8011df8:	b538      	push	{r3, r4, r5, lr}
 8011dfa:	ed2d 8b02 	vpush	{d8}
 8011dfe:	ec55 4b10 	vmov	r4, r5, d0
 8011e02:	f000 f869 	bl	8011ed8 <__ieee754_asin>
 8011e06:	4b16      	ldr	r3, [pc, #88]	; (8011e60 <asin+0x68>)
 8011e08:	eeb0 8a40 	vmov.f32	s16, s0
 8011e0c:	eef0 8a60 	vmov.f32	s17, s1
 8011e10:	f993 3000 	ldrsb.w	r3, [r3]
 8011e14:	3301      	adds	r3, #1
 8011e16:	d01c      	beq.n	8011e52 <asin+0x5a>
 8011e18:	4622      	mov	r2, r4
 8011e1a:	462b      	mov	r3, r5
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	4629      	mov	r1, r5
 8011e20:	f7ee fe34 	bl	8000a8c <__aeabi_dcmpun>
 8011e24:	b9a8      	cbnz	r0, 8011e52 <asin+0x5a>
 8011e26:	ec45 4b10 	vmov	d0, r4, r5
 8011e2a:	f000 fd89 	bl	8012940 <fabs>
 8011e2e:	4b0d      	ldr	r3, [pc, #52]	; (8011e64 <asin+0x6c>)
 8011e30:	ec51 0b10 	vmov	r0, r1, d0
 8011e34:	2200      	movs	r2, #0
 8011e36:	f7ee fe1f 	bl	8000a78 <__aeabi_dcmpgt>
 8011e3a:	b150      	cbz	r0, 8011e52 <asin+0x5a>
 8011e3c:	f7ff ff9c 	bl	8011d78 <__errno>
 8011e40:	ecbd 8b02 	vpop	{d8}
 8011e44:	2321      	movs	r3, #33	; 0x21
 8011e46:	6003      	str	r3, [r0, #0]
 8011e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e4c:	4806      	ldr	r0, [pc, #24]	; (8011e68 <asin+0x70>)
 8011e4e:	f000 bd83 	b.w	8012958 <nan>
 8011e52:	eeb0 0a48 	vmov.f32	s0, s16
 8011e56:	eef0 0a68 	vmov.f32	s1, s17
 8011e5a:	ecbd 8b02 	vpop	{d8}
 8011e5e:	bd38      	pop	{r3, r4, r5, pc}
 8011e60:	200001f4 	.word	0x200001f4
 8011e64:	3ff00000 	.word	0x3ff00000
 8011e68:	08012ab0 	.word	0x08012ab0

08011e6c <atan2>:
 8011e6c:	f000 ba48 	b.w	8012300 <__ieee754_atan2>

08011e70 <sqrt>:
 8011e70:	b538      	push	{r3, r4, r5, lr}
 8011e72:	ed2d 8b02 	vpush	{d8}
 8011e76:	ec55 4b10 	vmov	r4, r5, d0
 8011e7a:	f000 fb0b 	bl	8012494 <__ieee754_sqrt>
 8011e7e:	4b15      	ldr	r3, [pc, #84]	; (8011ed4 <sqrt+0x64>)
 8011e80:	eeb0 8a40 	vmov.f32	s16, s0
 8011e84:	eef0 8a60 	vmov.f32	s17, s1
 8011e88:	f993 3000 	ldrsb.w	r3, [r3]
 8011e8c:	3301      	adds	r3, #1
 8011e8e:	d019      	beq.n	8011ec4 <sqrt+0x54>
 8011e90:	4622      	mov	r2, r4
 8011e92:	462b      	mov	r3, r5
 8011e94:	4620      	mov	r0, r4
 8011e96:	4629      	mov	r1, r5
 8011e98:	f7ee fdf8 	bl	8000a8c <__aeabi_dcmpun>
 8011e9c:	b990      	cbnz	r0, 8011ec4 <sqrt+0x54>
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	4629      	mov	r1, r5
 8011ea6:	f7ee fdc9 	bl	8000a3c <__aeabi_dcmplt>
 8011eaa:	b158      	cbz	r0, 8011ec4 <sqrt+0x54>
 8011eac:	f7ff ff64 	bl	8011d78 <__errno>
 8011eb0:	2321      	movs	r3, #33	; 0x21
 8011eb2:	6003      	str	r3, [r0, #0]
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	4610      	mov	r0, r2
 8011eba:	4619      	mov	r1, r3
 8011ebc:	f7ee fc76 	bl	80007ac <__aeabi_ddiv>
 8011ec0:	ec41 0b18 	vmov	d8, r0, r1
 8011ec4:	eeb0 0a48 	vmov.f32	s0, s16
 8011ec8:	eef0 0a68 	vmov.f32	s1, s17
 8011ecc:	ecbd 8b02 	vpop	{d8}
 8011ed0:	bd38      	pop	{r3, r4, r5, pc}
 8011ed2:	bf00      	nop
 8011ed4:	200001f4 	.word	0x200001f4

08011ed8 <__ieee754_asin>:
 8011ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011edc:	ed2d 8b04 	vpush	{d8-d9}
 8011ee0:	ec55 4b10 	vmov	r4, r5, d0
 8011ee4:	4bcc      	ldr	r3, [pc, #816]	; (8012218 <__ieee754_asin+0x340>)
 8011ee6:	b083      	sub	sp, #12
 8011ee8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011eec:	4598      	cmp	r8, r3
 8011eee:	9501      	str	r5, [sp, #4]
 8011ef0:	dd35      	ble.n	8011f5e <__ieee754_asin+0x86>
 8011ef2:	ee10 3a10 	vmov	r3, s0
 8011ef6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8011efa:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8011efe:	ea58 0303 	orrs.w	r3, r8, r3
 8011f02:	d117      	bne.n	8011f34 <__ieee754_asin+0x5c>
 8011f04:	a3aa      	add	r3, pc, #680	; (adr r3, 80121b0 <__ieee754_asin+0x2d8>)
 8011f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0a:	ee10 0a10 	vmov	r0, s0
 8011f0e:	4629      	mov	r1, r5
 8011f10:	f7ee fb22 	bl	8000558 <__aeabi_dmul>
 8011f14:	a3a8      	add	r3, pc, #672	; (adr r3, 80121b8 <__ieee754_asin+0x2e0>)
 8011f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f1a:	4606      	mov	r6, r0
 8011f1c:	460f      	mov	r7, r1
 8011f1e:	4620      	mov	r0, r4
 8011f20:	4629      	mov	r1, r5
 8011f22:	f7ee fb19 	bl	8000558 <__aeabi_dmul>
 8011f26:	4602      	mov	r2, r0
 8011f28:	460b      	mov	r3, r1
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	4639      	mov	r1, r7
 8011f2e:	f7ee f95d 	bl	80001ec <__adddf3>
 8011f32:	e00b      	b.n	8011f4c <__ieee754_asin+0x74>
 8011f34:	ee10 2a10 	vmov	r2, s0
 8011f38:	462b      	mov	r3, r5
 8011f3a:	ee10 0a10 	vmov	r0, s0
 8011f3e:	4629      	mov	r1, r5
 8011f40:	f7ee f952 	bl	80001e8 <__aeabi_dsub>
 8011f44:	4602      	mov	r2, r0
 8011f46:	460b      	mov	r3, r1
 8011f48:	f7ee fc30 	bl	80007ac <__aeabi_ddiv>
 8011f4c:	4604      	mov	r4, r0
 8011f4e:	460d      	mov	r5, r1
 8011f50:	ec45 4b10 	vmov	d0, r4, r5
 8011f54:	b003      	add	sp, #12
 8011f56:	ecbd 8b04 	vpop	{d8-d9}
 8011f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f5e:	4baf      	ldr	r3, [pc, #700]	; (801221c <__ieee754_asin+0x344>)
 8011f60:	4598      	cmp	r8, r3
 8011f62:	dc11      	bgt.n	8011f88 <__ieee754_asin+0xb0>
 8011f64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011f68:	f280 80ae 	bge.w	80120c8 <__ieee754_asin+0x1f0>
 8011f6c:	a394      	add	r3, pc, #592	; (adr r3, 80121c0 <__ieee754_asin+0x2e8>)
 8011f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f72:	ee10 0a10 	vmov	r0, s0
 8011f76:	4629      	mov	r1, r5
 8011f78:	f7ee f938 	bl	80001ec <__adddf3>
 8011f7c:	4ba8      	ldr	r3, [pc, #672]	; (8012220 <__ieee754_asin+0x348>)
 8011f7e:	2200      	movs	r2, #0
 8011f80:	f7ee fd7a 	bl	8000a78 <__aeabi_dcmpgt>
 8011f84:	2800      	cmp	r0, #0
 8011f86:	d1e3      	bne.n	8011f50 <__ieee754_asin+0x78>
 8011f88:	ec45 4b10 	vmov	d0, r4, r5
 8011f8c:	f000 fcd8 	bl	8012940 <fabs>
 8011f90:	49a3      	ldr	r1, [pc, #652]	; (8012220 <__ieee754_asin+0x348>)
 8011f92:	ec53 2b10 	vmov	r2, r3, d0
 8011f96:	2000      	movs	r0, #0
 8011f98:	f7ee f926 	bl	80001e8 <__aeabi_dsub>
 8011f9c:	4ba1      	ldr	r3, [pc, #644]	; (8012224 <__ieee754_asin+0x34c>)
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	f7ee fada 	bl	8000558 <__aeabi_dmul>
 8011fa4:	a388      	add	r3, pc, #544	; (adr r3, 80121c8 <__ieee754_asin+0x2f0>)
 8011fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011faa:	4604      	mov	r4, r0
 8011fac:	460d      	mov	r5, r1
 8011fae:	f7ee fad3 	bl	8000558 <__aeabi_dmul>
 8011fb2:	a387      	add	r3, pc, #540	; (adr r3, 80121d0 <__ieee754_asin+0x2f8>)
 8011fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb8:	f7ee f918 	bl	80001ec <__adddf3>
 8011fbc:	4622      	mov	r2, r4
 8011fbe:	462b      	mov	r3, r5
 8011fc0:	f7ee faca 	bl	8000558 <__aeabi_dmul>
 8011fc4:	a384      	add	r3, pc, #528	; (adr r3, 80121d8 <__ieee754_asin+0x300>)
 8011fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fca:	f7ee f90d 	bl	80001e8 <__aeabi_dsub>
 8011fce:	4622      	mov	r2, r4
 8011fd0:	462b      	mov	r3, r5
 8011fd2:	f7ee fac1 	bl	8000558 <__aeabi_dmul>
 8011fd6:	a382      	add	r3, pc, #520	; (adr r3, 80121e0 <__ieee754_asin+0x308>)
 8011fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fdc:	f7ee f906 	bl	80001ec <__adddf3>
 8011fe0:	4622      	mov	r2, r4
 8011fe2:	462b      	mov	r3, r5
 8011fe4:	f7ee fab8 	bl	8000558 <__aeabi_dmul>
 8011fe8:	a37f      	add	r3, pc, #508	; (adr r3, 80121e8 <__ieee754_asin+0x310>)
 8011fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fee:	f7ee f8fb 	bl	80001e8 <__aeabi_dsub>
 8011ff2:	4622      	mov	r2, r4
 8011ff4:	462b      	mov	r3, r5
 8011ff6:	f7ee faaf 	bl	8000558 <__aeabi_dmul>
 8011ffa:	a37d      	add	r3, pc, #500	; (adr r3, 80121f0 <__ieee754_asin+0x318>)
 8011ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012000:	f7ee f8f4 	bl	80001ec <__adddf3>
 8012004:	4622      	mov	r2, r4
 8012006:	462b      	mov	r3, r5
 8012008:	f7ee faa6 	bl	8000558 <__aeabi_dmul>
 801200c:	a37a      	add	r3, pc, #488	; (adr r3, 80121f8 <__ieee754_asin+0x320>)
 801200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012012:	ec41 0b18 	vmov	d8, r0, r1
 8012016:	4620      	mov	r0, r4
 8012018:	4629      	mov	r1, r5
 801201a:	f7ee fa9d 	bl	8000558 <__aeabi_dmul>
 801201e:	a378      	add	r3, pc, #480	; (adr r3, 8012200 <__ieee754_asin+0x328>)
 8012020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012024:	f7ee f8e0 	bl	80001e8 <__aeabi_dsub>
 8012028:	4622      	mov	r2, r4
 801202a:	462b      	mov	r3, r5
 801202c:	f7ee fa94 	bl	8000558 <__aeabi_dmul>
 8012030:	a375      	add	r3, pc, #468	; (adr r3, 8012208 <__ieee754_asin+0x330>)
 8012032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012036:	f7ee f8d9 	bl	80001ec <__adddf3>
 801203a:	4622      	mov	r2, r4
 801203c:	462b      	mov	r3, r5
 801203e:	f7ee fa8b 	bl	8000558 <__aeabi_dmul>
 8012042:	a373      	add	r3, pc, #460	; (adr r3, 8012210 <__ieee754_asin+0x338>)
 8012044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012048:	f7ee f8ce 	bl	80001e8 <__aeabi_dsub>
 801204c:	4622      	mov	r2, r4
 801204e:	462b      	mov	r3, r5
 8012050:	f7ee fa82 	bl	8000558 <__aeabi_dmul>
 8012054:	4b72      	ldr	r3, [pc, #456]	; (8012220 <__ieee754_asin+0x348>)
 8012056:	2200      	movs	r2, #0
 8012058:	f7ee f8c8 	bl	80001ec <__adddf3>
 801205c:	ec45 4b10 	vmov	d0, r4, r5
 8012060:	4606      	mov	r6, r0
 8012062:	460f      	mov	r7, r1
 8012064:	f000 fa16 	bl	8012494 <__ieee754_sqrt>
 8012068:	4b6f      	ldr	r3, [pc, #444]	; (8012228 <__ieee754_asin+0x350>)
 801206a:	4598      	cmp	r8, r3
 801206c:	ec5b ab10 	vmov	sl, fp, d0
 8012070:	f340 80dc 	ble.w	801222c <__ieee754_asin+0x354>
 8012074:	4632      	mov	r2, r6
 8012076:	463b      	mov	r3, r7
 8012078:	ec51 0b18 	vmov	r0, r1, d8
 801207c:	f7ee fb96 	bl	80007ac <__aeabi_ddiv>
 8012080:	4652      	mov	r2, sl
 8012082:	465b      	mov	r3, fp
 8012084:	f7ee fa68 	bl	8000558 <__aeabi_dmul>
 8012088:	4652      	mov	r2, sl
 801208a:	465b      	mov	r3, fp
 801208c:	f7ee f8ae 	bl	80001ec <__adddf3>
 8012090:	4602      	mov	r2, r0
 8012092:	460b      	mov	r3, r1
 8012094:	f7ee f8aa 	bl	80001ec <__adddf3>
 8012098:	a347      	add	r3, pc, #284	; (adr r3, 80121b8 <__ieee754_asin+0x2e0>)
 801209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209e:	f7ee f8a3 	bl	80001e8 <__aeabi_dsub>
 80120a2:	4602      	mov	r2, r0
 80120a4:	460b      	mov	r3, r1
 80120a6:	a142      	add	r1, pc, #264	; (adr r1, 80121b0 <__ieee754_asin+0x2d8>)
 80120a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120ac:	f7ee f89c 	bl	80001e8 <__aeabi_dsub>
 80120b0:	9b01      	ldr	r3, [sp, #4]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	bfdc      	itt	le
 80120b6:	4602      	movle	r2, r0
 80120b8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80120bc:	4604      	mov	r4, r0
 80120be:	460d      	mov	r5, r1
 80120c0:	bfdc      	itt	le
 80120c2:	4614      	movle	r4, r2
 80120c4:	461d      	movle	r5, r3
 80120c6:	e743      	b.n	8011f50 <__ieee754_asin+0x78>
 80120c8:	ee10 2a10 	vmov	r2, s0
 80120cc:	ee10 0a10 	vmov	r0, s0
 80120d0:	462b      	mov	r3, r5
 80120d2:	4629      	mov	r1, r5
 80120d4:	f7ee fa40 	bl	8000558 <__aeabi_dmul>
 80120d8:	a33b      	add	r3, pc, #236	; (adr r3, 80121c8 <__ieee754_asin+0x2f0>)
 80120da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120de:	4606      	mov	r6, r0
 80120e0:	460f      	mov	r7, r1
 80120e2:	f7ee fa39 	bl	8000558 <__aeabi_dmul>
 80120e6:	a33a      	add	r3, pc, #232	; (adr r3, 80121d0 <__ieee754_asin+0x2f8>)
 80120e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ec:	f7ee f87e 	bl	80001ec <__adddf3>
 80120f0:	4632      	mov	r2, r6
 80120f2:	463b      	mov	r3, r7
 80120f4:	f7ee fa30 	bl	8000558 <__aeabi_dmul>
 80120f8:	a337      	add	r3, pc, #220	; (adr r3, 80121d8 <__ieee754_asin+0x300>)
 80120fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120fe:	f7ee f873 	bl	80001e8 <__aeabi_dsub>
 8012102:	4632      	mov	r2, r6
 8012104:	463b      	mov	r3, r7
 8012106:	f7ee fa27 	bl	8000558 <__aeabi_dmul>
 801210a:	a335      	add	r3, pc, #212	; (adr r3, 80121e0 <__ieee754_asin+0x308>)
 801210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012110:	f7ee f86c 	bl	80001ec <__adddf3>
 8012114:	4632      	mov	r2, r6
 8012116:	463b      	mov	r3, r7
 8012118:	f7ee fa1e 	bl	8000558 <__aeabi_dmul>
 801211c:	a332      	add	r3, pc, #200	; (adr r3, 80121e8 <__ieee754_asin+0x310>)
 801211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012122:	f7ee f861 	bl	80001e8 <__aeabi_dsub>
 8012126:	4632      	mov	r2, r6
 8012128:	463b      	mov	r3, r7
 801212a:	f7ee fa15 	bl	8000558 <__aeabi_dmul>
 801212e:	a330      	add	r3, pc, #192	; (adr r3, 80121f0 <__ieee754_asin+0x318>)
 8012130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012134:	f7ee f85a 	bl	80001ec <__adddf3>
 8012138:	4632      	mov	r2, r6
 801213a:	463b      	mov	r3, r7
 801213c:	f7ee fa0c 	bl	8000558 <__aeabi_dmul>
 8012140:	a32d      	add	r3, pc, #180	; (adr r3, 80121f8 <__ieee754_asin+0x320>)
 8012142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012146:	4680      	mov	r8, r0
 8012148:	4689      	mov	r9, r1
 801214a:	4630      	mov	r0, r6
 801214c:	4639      	mov	r1, r7
 801214e:	f7ee fa03 	bl	8000558 <__aeabi_dmul>
 8012152:	a32b      	add	r3, pc, #172	; (adr r3, 8012200 <__ieee754_asin+0x328>)
 8012154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012158:	f7ee f846 	bl	80001e8 <__aeabi_dsub>
 801215c:	4632      	mov	r2, r6
 801215e:	463b      	mov	r3, r7
 8012160:	f7ee f9fa 	bl	8000558 <__aeabi_dmul>
 8012164:	a328      	add	r3, pc, #160	; (adr r3, 8012208 <__ieee754_asin+0x330>)
 8012166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216a:	f7ee f83f 	bl	80001ec <__adddf3>
 801216e:	4632      	mov	r2, r6
 8012170:	463b      	mov	r3, r7
 8012172:	f7ee f9f1 	bl	8000558 <__aeabi_dmul>
 8012176:	a326      	add	r3, pc, #152	; (adr r3, 8012210 <__ieee754_asin+0x338>)
 8012178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217c:	f7ee f834 	bl	80001e8 <__aeabi_dsub>
 8012180:	4632      	mov	r2, r6
 8012182:	463b      	mov	r3, r7
 8012184:	f7ee f9e8 	bl	8000558 <__aeabi_dmul>
 8012188:	4b25      	ldr	r3, [pc, #148]	; (8012220 <__ieee754_asin+0x348>)
 801218a:	2200      	movs	r2, #0
 801218c:	f7ee f82e 	bl	80001ec <__adddf3>
 8012190:	4602      	mov	r2, r0
 8012192:	460b      	mov	r3, r1
 8012194:	4640      	mov	r0, r8
 8012196:	4649      	mov	r1, r9
 8012198:	f7ee fb08 	bl	80007ac <__aeabi_ddiv>
 801219c:	4622      	mov	r2, r4
 801219e:	462b      	mov	r3, r5
 80121a0:	f7ee f9da 	bl	8000558 <__aeabi_dmul>
 80121a4:	4602      	mov	r2, r0
 80121a6:	460b      	mov	r3, r1
 80121a8:	4620      	mov	r0, r4
 80121aa:	4629      	mov	r1, r5
 80121ac:	e6bf      	b.n	8011f2e <__ieee754_asin+0x56>
 80121ae:	bf00      	nop
 80121b0:	54442d18 	.word	0x54442d18
 80121b4:	3ff921fb 	.word	0x3ff921fb
 80121b8:	33145c07 	.word	0x33145c07
 80121bc:	3c91a626 	.word	0x3c91a626
 80121c0:	8800759c 	.word	0x8800759c
 80121c4:	7e37e43c 	.word	0x7e37e43c
 80121c8:	0dfdf709 	.word	0x0dfdf709
 80121cc:	3f023de1 	.word	0x3f023de1
 80121d0:	7501b288 	.word	0x7501b288
 80121d4:	3f49efe0 	.word	0x3f49efe0
 80121d8:	b5688f3b 	.word	0xb5688f3b
 80121dc:	3fa48228 	.word	0x3fa48228
 80121e0:	0e884455 	.word	0x0e884455
 80121e4:	3fc9c155 	.word	0x3fc9c155
 80121e8:	03eb6f7d 	.word	0x03eb6f7d
 80121ec:	3fd4d612 	.word	0x3fd4d612
 80121f0:	55555555 	.word	0x55555555
 80121f4:	3fc55555 	.word	0x3fc55555
 80121f8:	b12e9282 	.word	0xb12e9282
 80121fc:	3fb3b8c5 	.word	0x3fb3b8c5
 8012200:	1b8d0159 	.word	0x1b8d0159
 8012204:	3fe6066c 	.word	0x3fe6066c
 8012208:	9c598ac8 	.word	0x9c598ac8
 801220c:	40002ae5 	.word	0x40002ae5
 8012210:	1c8a2d4b 	.word	0x1c8a2d4b
 8012214:	40033a27 	.word	0x40033a27
 8012218:	3fefffff 	.word	0x3fefffff
 801221c:	3fdfffff 	.word	0x3fdfffff
 8012220:	3ff00000 	.word	0x3ff00000
 8012224:	3fe00000 	.word	0x3fe00000
 8012228:	3fef3332 	.word	0x3fef3332
 801222c:	ee10 2a10 	vmov	r2, s0
 8012230:	ee10 0a10 	vmov	r0, s0
 8012234:	465b      	mov	r3, fp
 8012236:	4659      	mov	r1, fp
 8012238:	f7ed ffd8 	bl	80001ec <__adddf3>
 801223c:	4632      	mov	r2, r6
 801223e:	463b      	mov	r3, r7
 8012240:	ec41 0b19 	vmov	d9, r0, r1
 8012244:	ec51 0b18 	vmov	r0, r1, d8
 8012248:	f7ee fab0 	bl	80007ac <__aeabi_ddiv>
 801224c:	4602      	mov	r2, r0
 801224e:	460b      	mov	r3, r1
 8012250:	ec51 0b19 	vmov	r0, r1, d9
 8012254:	f7ee f980 	bl	8000558 <__aeabi_dmul>
 8012258:	f04f 0800 	mov.w	r8, #0
 801225c:	4606      	mov	r6, r0
 801225e:	460f      	mov	r7, r1
 8012260:	4642      	mov	r2, r8
 8012262:	465b      	mov	r3, fp
 8012264:	4640      	mov	r0, r8
 8012266:	4659      	mov	r1, fp
 8012268:	f7ee f976 	bl	8000558 <__aeabi_dmul>
 801226c:	4602      	mov	r2, r0
 801226e:	460b      	mov	r3, r1
 8012270:	4620      	mov	r0, r4
 8012272:	4629      	mov	r1, r5
 8012274:	f7ed ffb8 	bl	80001e8 <__aeabi_dsub>
 8012278:	4642      	mov	r2, r8
 801227a:	4604      	mov	r4, r0
 801227c:	460d      	mov	r5, r1
 801227e:	465b      	mov	r3, fp
 8012280:	4650      	mov	r0, sl
 8012282:	4659      	mov	r1, fp
 8012284:	f7ed ffb2 	bl	80001ec <__adddf3>
 8012288:	4602      	mov	r2, r0
 801228a:	460b      	mov	r3, r1
 801228c:	4620      	mov	r0, r4
 801228e:	4629      	mov	r1, r5
 8012290:	f7ee fa8c 	bl	80007ac <__aeabi_ddiv>
 8012294:	4602      	mov	r2, r0
 8012296:	460b      	mov	r3, r1
 8012298:	f7ed ffa8 	bl	80001ec <__adddf3>
 801229c:	4602      	mov	r2, r0
 801229e:	460b      	mov	r3, r1
 80122a0:	a113      	add	r1, pc, #76	; (adr r1, 80122f0 <__ieee754_asin+0x418>)
 80122a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122a6:	f7ed ff9f 	bl	80001e8 <__aeabi_dsub>
 80122aa:	4602      	mov	r2, r0
 80122ac:	460b      	mov	r3, r1
 80122ae:	4630      	mov	r0, r6
 80122b0:	4639      	mov	r1, r7
 80122b2:	f7ed ff99 	bl	80001e8 <__aeabi_dsub>
 80122b6:	4642      	mov	r2, r8
 80122b8:	4604      	mov	r4, r0
 80122ba:	460d      	mov	r5, r1
 80122bc:	465b      	mov	r3, fp
 80122be:	4640      	mov	r0, r8
 80122c0:	4659      	mov	r1, fp
 80122c2:	f7ed ff93 	bl	80001ec <__adddf3>
 80122c6:	4602      	mov	r2, r0
 80122c8:	460b      	mov	r3, r1
 80122ca:	a10b      	add	r1, pc, #44	; (adr r1, 80122f8 <__ieee754_asin+0x420>)
 80122cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122d0:	f7ed ff8a 	bl	80001e8 <__aeabi_dsub>
 80122d4:	4602      	mov	r2, r0
 80122d6:	460b      	mov	r3, r1
 80122d8:	4620      	mov	r0, r4
 80122da:	4629      	mov	r1, r5
 80122dc:	f7ed ff84 	bl	80001e8 <__aeabi_dsub>
 80122e0:	4602      	mov	r2, r0
 80122e2:	460b      	mov	r3, r1
 80122e4:	a104      	add	r1, pc, #16	; (adr r1, 80122f8 <__ieee754_asin+0x420>)
 80122e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122ea:	e6df      	b.n	80120ac <__ieee754_asin+0x1d4>
 80122ec:	f3af 8000 	nop.w
 80122f0:	33145c07 	.word	0x33145c07
 80122f4:	3c91a626 	.word	0x3c91a626
 80122f8:	54442d18 	.word	0x54442d18
 80122fc:	3fe921fb 	.word	0x3fe921fb

08012300 <__ieee754_atan2>:
 8012300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012304:	ec57 6b11 	vmov	r6, r7, d1
 8012308:	4273      	negs	r3, r6
 801230a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8012490 <__ieee754_atan2+0x190>
 801230e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8012312:	4333      	orrs	r3, r6
 8012314:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012318:	4573      	cmp	r3, lr
 801231a:	ec51 0b10 	vmov	r0, r1, d0
 801231e:	ee11 8a10 	vmov	r8, s2
 8012322:	d80a      	bhi.n	801233a <__ieee754_atan2+0x3a>
 8012324:	4244      	negs	r4, r0
 8012326:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801232a:	4304      	orrs	r4, r0
 801232c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012330:	4574      	cmp	r4, lr
 8012332:	ee10 9a10 	vmov	r9, s0
 8012336:	468c      	mov	ip, r1
 8012338:	d907      	bls.n	801234a <__ieee754_atan2+0x4a>
 801233a:	4632      	mov	r2, r6
 801233c:	463b      	mov	r3, r7
 801233e:	f7ed ff55 	bl	80001ec <__adddf3>
 8012342:	ec41 0b10 	vmov	d0, r0, r1
 8012346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801234a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801234e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012352:	4334      	orrs	r4, r6
 8012354:	d103      	bne.n	801235e <__ieee754_atan2+0x5e>
 8012356:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801235a:	f000 b951 	b.w	8012600 <atan>
 801235e:	17bc      	asrs	r4, r7, #30
 8012360:	f004 0402 	and.w	r4, r4, #2
 8012364:	ea53 0909 	orrs.w	r9, r3, r9
 8012368:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801236c:	d107      	bne.n	801237e <__ieee754_atan2+0x7e>
 801236e:	2c02      	cmp	r4, #2
 8012370:	d060      	beq.n	8012434 <__ieee754_atan2+0x134>
 8012372:	2c03      	cmp	r4, #3
 8012374:	d1e5      	bne.n	8012342 <__ieee754_atan2+0x42>
 8012376:	a142      	add	r1, pc, #264	; (adr r1, 8012480 <__ieee754_atan2+0x180>)
 8012378:	e9d1 0100 	ldrd	r0, r1, [r1]
 801237c:	e7e1      	b.n	8012342 <__ieee754_atan2+0x42>
 801237e:	ea52 0808 	orrs.w	r8, r2, r8
 8012382:	d106      	bne.n	8012392 <__ieee754_atan2+0x92>
 8012384:	f1bc 0f00 	cmp.w	ip, #0
 8012388:	da5f      	bge.n	801244a <__ieee754_atan2+0x14a>
 801238a:	a13f      	add	r1, pc, #252	; (adr r1, 8012488 <__ieee754_atan2+0x188>)
 801238c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012390:	e7d7      	b.n	8012342 <__ieee754_atan2+0x42>
 8012392:	4572      	cmp	r2, lr
 8012394:	d10f      	bne.n	80123b6 <__ieee754_atan2+0xb6>
 8012396:	4293      	cmp	r3, r2
 8012398:	f104 34ff 	add.w	r4, r4, #4294967295
 801239c:	d107      	bne.n	80123ae <__ieee754_atan2+0xae>
 801239e:	2c02      	cmp	r4, #2
 80123a0:	d84c      	bhi.n	801243c <__ieee754_atan2+0x13c>
 80123a2:	4b35      	ldr	r3, [pc, #212]	; (8012478 <__ieee754_atan2+0x178>)
 80123a4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80123a8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80123ac:	e7c9      	b.n	8012342 <__ieee754_atan2+0x42>
 80123ae:	2c02      	cmp	r4, #2
 80123b0:	d848      	bhi.n	8012444 <__ieee754_atan2+0x144>
 80123b2:	4b32      	ldr	r3, [pc, #200]	; (801247c <__ieee754_atan2+0x17c>)
 80123b4:	e7f6      	b.n	80123a4 <__ieee754_atan2+0xa4>
 80123b6:	4573      	cmp	r3, lr
 80123b8:	d0e4      	beq.n	8012384 <__ieee754_atan2+0x84>
 80123ba:	1a9b      	subs	r3, r3, r2
 80123bc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80123c0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80123c4:	da1e      	bge.n	8012404 <__ieee754_atan2+0x104>
 80123c6:	2f00      	cmp	r7, #0
 80123c8:	da01      	bge.n	80123ce <__ieee754_atan2+0xce>
 80123ca:	323c      	adds	r2, #60	; 0x3c
 80123cc:	db1e      	blt.n	801240c <__ieee754_atan2+0x10c>
 80123ce:	4632      	mov	r2, r6
 80123d0:	463b      	mov	r3, r7
 80123d2:	f7ee f9eb 	bl	80007ac <__aeabi_ddiv>
 80123d6:	ec41 0b10 	vmov	d0, r0, r1
 80123da:	f000 fab1 	bl	8012940 <fabs>
 80123de:	f000 f90f 	bl	8012600 <atan>
 80123e2:	ec51 0b10 	vmov	r0, r1, d0
 80123e6:	2c01      	cmp	r4, #1
 80123e8:	d013      	beq.n	8012412 <__ieee754_atan2+0x112>
 80123ea:	2c02      	cmp	r4, #2
 80123ec:	d015      	beq.n	801241a <__ieee754_atan2+0x11a>
 80123ee:	2c00      	cmp	r4, #0
 80123f0:	d0a7      	beq.n	8012342 <__ieee754_atan2+0x42>
 80123f2:	a319      	add	r3, pc, #100	; (adr r3, 8012458 <__ieee754_atan2+0x158>)
 80123f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f8:	f7ed fef6 	bl	80001e8 <__aeabi_dsub>
 80123fc:	a318      	add	r3, pc, #96	; (adr r3, 8012460 <__ieee754_atan2+0x160>)
 80123fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012402:	e014      	b.n	801242e <__ieee754_atan2+0x12e>
 8012404:	a118      	add	r1, pc, #96	; (adr r1, 8012468 <__ieee754_atan2+0x168>)
 8012406:	e9d1 0100 	ldrd	r0, r1, [r1]
 801240a:	e7ec      	b.n	80123e6 <__ieee754_atan2+0xe6>
 801240c:	2000      	movs	r0, #0
 801240e:	2100      	movs	r1, #0
 8012410:	e7e9      	b.n	80123e6 <__ieee754_atan2+0xe6>
 8012412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012416:	4619      	mov	r1, r3
 8012418:	e793      	b.n	8012342 <__ieee754_atan2+0x42>
 801241a:	a30f      	add	r3, pc, #60	; (adr r3, 8012458 <__ieee754_atan2+0x158>)
 801241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012420:	f7ed fee2 	bl	80001e8 <__aeabi_dsub>
 8012424:	4602      	mov	r2, r0
 8012426:	460b      	mov	r3, r1
 8012428:	a10d      	add	r1, pc, #52	; (adr r1, 8012460 <__ieee754_atan2+0x160>)
 801242a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801242e:	f7ed fedb 	bl	80001e8 <__aeabi_dsub>
 8012432:	e786      	b.n	8012342 <__ieee754_atan2+0x42>
 8012434:	a10a      	add	r1, pc, #40	; (adr r1, 8012460 <__ieee754_atan2+0x160>)
 8012436:	e9d1 0100 	ldrd	r0, r1, [r1]
 801243a:	e782      	b.n	8012342 <__ieee754_atan2+0x42>
 801243c:	a10c      	add	r1, pc, #48	; (adr r1, 8012470 <__ieee754_atan2+0x170>)
 801243e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012442:	e77e      	b.n	8012342 <__ieee754_atan2+0x42>
 8012444:	2000      	movs	r0, #0
 8012446:	2100      	movs	r1, #0
 8012448:	e77b      	b.n	8012342 <__ieee754_atan2+0x42>
 801244a:	a107      	add	r1, pc, #28	; (adr r1, 8012468 <__ieee754_atan2+0x168>)
 801244c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012450:	e777      	b.n	8012342 <__ieee754_atan2+0x42>
 8012452:	bf00      	nop
 8012454:	f3af 8000 	nop.w
 8012458:	33145c07 	.word	0x33145c07
 801245c:	3ca1a626 	.word	0x3ca1a626
 8012460:	54442d18 	.word	0x54442d18
 8012464:	400921fb 	.word	0x400921fb
 8012468:	54442d18 	.word	0x54442d18
 801246c:	3ff921fb 	.word	0x3ff921fb
 8012470:	54442d18 	.word	0x54442d18
 8012474:	3fe921fb 	.word	0x3fe921fb
 8012478:	08012ab8 	.word	0x08012ab8
 801247c:	08012ad0 	.word	0x08012ad0
 8012480:	54442d18 	.word	0x54442d18
 8012484:	c00921fb 	.word	0xc00921fb
 8012488:	54442d18 	.word	0x54442d18
 801248c:	bff921fb 	.word	0xbff921fb
 8012490:	7ff00000 	.word	0x7ff00000

08012494 <__ieee754_sqrt>:
 8012494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012498:	ec55 4b10 	vmov	r4, r5, d0
 801249c:	4e56      	ldr	r6, [pc, #344]	; (80125f8 <__ieee754_sqrt+0x164>)
 801249e:	43ae      	bics	r6, r5
 80124a0:	ee10 0a10 	vmov	r0, s0
 80124a4:	ee10 3a10 	vmov	r3, s0
 80124a8:	4629      	mov	r1, r5
 80124aa:	462a      	mov	r2, r5
 80124ac:	d110      	bne.n	80124d0 <__ieee754_sqrt+0x3c>
 80124ae:	ee10 2a10 	vmov	r2, s0
 80124b2:	462b      	mov	r3, r5
 80124b4:	f7ee f850 	bl	8000558 <__aeabi_dmul>
 80124b8:	4602      	mov	r2, r0
 80124ba:	460b      	mov	r3, r1
 80124bc:	4620      	mov	r0, r4
 80124be:	4629      	mov	r1, r5
 80124c0:	f7ed fe94 	bl	80001ec <__adddf3>
 80124c4:	4604      	mov	r4, r0
 80124c6:	460d      	mov	r5, r1
 80124c8:	ec45 4b10 	vmov	d0, r4, r5
 80124cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124d0:	2d00      	cmp	r5, #0
 80124d2:	dc10      	bgt.n	80124f6 <__ieee754_sqrt+0x62>
 80124d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80124d8:	4330      	orrs	r0, r6
 80124da:	d0f5      	beq.n	80124c8 <__ieee754_sqrt+0x34>
 80124dc:	b15d      	cbz	r5, 80124f6 <__ieee754_sqrt+0x62>
 80124de:	ee10 2a10 	vmov	r2, s0
 80124e2:	462b      	mov	r3, r5
 80124e4:	ee10 0a10 	vmov	r0, s0
 80124e8:	f7ed fe7e 	bl	80001e8 <__aeabi_dsub>
 80124ec:	4602      	mov	r2, r0
 80124ee:	460b      	mov	r3, r1
 80124f0:	f7ee f95c 	bl	80007ac <__aeabi_ddiv>
 80124f4:	e7e6      	b.n	80124c4 <__ieee754_sqrt+0x30>
 80124f6:	1509      	asrs	r1, r1, #20
 80124f8:	d076      	beq.n	80125e8 <__ieee754_sqrt+0x154>
 80124fa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80124fe:	07ce      	lsls	r6, r1, #31
 8012500:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8012504:	bf5e      	ittt	pl
 8012506:	0fda      	lsrpl	r2, r3, #31
 8012508:	005b      	lslpl	r3, r3, #1
 801250a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801250e:	0fda      	lsrs	r2, r3, #31
 8012510:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8012514:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8012518:	2000      	movs	r0, #0
 801251a:	106d      	asrs	r5, r5, #1
 801251c:	005b      	lsls	r3, r3, #1
 801251e:	f04f 0e16 	mov.w	lr, #22
 8012522:	4684      	mov	ip, r0
 8012524:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012528:	eb0c 0401 	add.w	r4, ip, r1
 801252c:	4294      	cmp	r4, r2
 801252e:	bfde      	ittt	le
 8012530:	1b12      	suble	r2, r2, r4
 8012532:	eb04 0c01 	addle.w	ip, r4, r1
 8012536:	1840      	addle	r0, r0, r1
 8012538:	0052      	lsls	r2, r2, #1
 801253a:	f1be 0e01 	subs.w	lr, lr, #1
 801253e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8012542:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012546:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801254a:	d1ed      	bne.n	8012528 <__ieee754_sqrt+0x94>
 801254c:	4671      	mov	r1, lr
 801254e:	2720      	movs	r7, #32
 8012550:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8012554:	4562      	cmp	r2, ip
 8012556:	eb04 060e 	add.w	r6, r4, lr
 801255a:	dc02      	bgt.n	8012562 <__ieee754_sqrt+0xce>
 801255c:	d113      	bne.n	8012586 <__ieee754_sqrt+0xf2>
 801255e:	429e      	cmp	r6, r3
 8012560:	d811      	bhi.n	8012586 <__ieee754_sqrt+0xf2>
 8012562:	2e00      	cmp	r6, #0
 8012564:	eb06 0e04 	add.w	lr, r6, r4
 8012568:	da43      	bge.n	80125f2 <__ieee754_sqrt+0x15e>
 801256a:	f1be 0f00 	cmp.w	lr, #0
 801256e:	db40      	blt.n	80125f2 <__ieee754_sqrt+0x15e>
 8012570:	f10c 0801 	add.w	r8, ip, #1
 8012574:	eba2 020c 	sub.w	r2, r2, ip
 8012578:	429e      	cmp	r6, r3
 801257a:	bf88      	it	hi
 801257c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8012580:	1b9b      	subs	r3, r3, r6
 8012582:	4421      	add	r1, r4
 8012584:	46c4      	mov	ip, r8
 8012586:	0052      	lsls	r2, r2, #1
 8012588:	3f01      	subs	r7, #1
 801258a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801258e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012592:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012596:	d1dd      	bne.n	8012554 <__ieee754_sqrt+0xc0>
 8012598:	4313      	orrs	r3, r2
 801259a:	d006      	beq.n	80125aa <__ieee754_sqrt+0x116>
 801259c:	1c4c      	adds	r4, r1, #1
 801259e:	bf13      	iteet	ne
 80125a0:	3101      	addne	r1, #1
 80125a2:	3001      	addeq	r0, #1
 80125a4:	4639      	moveq	r1, r7
 80125a6:	f021 0101 	bicne.w	r1, r1, #1
 80125aa:	1043      	asrs	r3, r0, #1
 80125ac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80125b0:	0849      	lsrs	r1, r1, #1
 80125b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80125b6:	07c2      	lsls	r2, r0, #31
 80125b8:	bf48      	it	mi
 80125ba:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80125be:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80125c2:	460c      	mov	r4, r1
 80125c4:	463d      	mov	r5, r7
 80125c6:	e77f      	b.n	80124c8 <__ieee754_sqrt+0x34>
 80125c8:	0ada      	lsrs	r2, r3, #11
 80125ca:	3815      	subs	r0, #21
 80125cc:	055b      	lsls	r3, r3, #21
 80125ce:	2a00      	cmp	r2, #0
 80125d0:	d0fa      	beq.n	80125c8 <__ieee754_sqrt+0x134>
 80125d2:	02d7      	lsls	r7, r2, #11
 80125d4:	d50a      	bpl.n	80125ec <__ieee754_sqrt+0x158>
 80125d6:	f1c1 0420 	rsb	r4, r1, #32
 80125da:	fa23 f404 	lsr.w	r4, r3, r4
 80125de:	1e4d      	subs	r5, r1, #1
 80125e0:	408b      	lsls	r3, r1
 80125e2:	4322      	orrs	r2, r4
 80125e4:	1b41      	subs	r1, r0, r5
 80125e6:	e788      	b.n	80124fa <__ieee754_sqrt+0x66>
 80125e8:	4608      	mov	r0, r1
 80125ea:	e7f0      	b.n	80125ce <__ieee754_sqrt+0x13a>
 80125ec:	0052      	lsls	r2, r2, #1
 80125ee:	3101      	adds	r1, #1
 80125f0:	e7ef      	b.n	80125d2 <__ieee754_sqrt+0x13e>
 80125f2:	46e0      	mov	r8, ip
 80125f4:	e7be      	b.n	8012574 <__ieee754_sqrt+0xe0>
 80125f6:	bf00      	nop
 80125f8:	7ff00000 	.word	0x7ff00000
 80125fc:	00000000 	.word	0x00000000

08012600 <atan>:
 8012600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012604:	ec55 4b10 	vmov	r4, r5, d0
 8012608:	4bc3      	ldr	r3, [pc, #780]	; (8012918 <atan+0x318>)
 801260a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801260e:	429e      	cmp	r6, r3
 8012610:	46ab      	mov	fp, r5
 8012612:	dd18      	ble.n	8012646 <atan+0x46>
 8012614:	4bc1      	ldr	r3, [pc, #772]	; (801291c <atan+0x31c>)
 8012616:	429e      	cmp	r6, r3
 8012618:	dc01      	bgt.n	801261e <atan+0x1e>
 801261a:	d109      	bne.n	8012630 <atan+0x30>
 801261c:	b144      	cbz	r4, 8012630 <atan+0x30>
 801261e:	4622      	mov	r2, r4
 8012620:	462b      	mov	r3, r5
 8012622:	4620      	mov	r0, r4
 8012624:	4629      	mov	r1, r5
 8012626:	f7ed fde1 	bl	80001ec <__adddf3>
 801262a:	4604      	mov	r4, r0
 801262c:	460d      	mov	r5, r1
 801262e:	e006      	b.n	801263e <atan+0x3e>
 8012630:	f1bb 0f00 	cmp.w	fp, #0
 8012634:	f300 8131 	bgt.w	801289a <atan+0x29a>
 8012638:	a59b      	add	r5, pc, #620	; (adr r5, 80128a8 <atan+0x2a8>)
 801263a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801263e:	ec45 4b10 	vmov	d0, r4, r5
 8012642:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012646:	4bb6      	ldr	r3, [pc, #728]	; (8012920 <atan+0x320>)
 8012648:	429e      	cmp	r6, r3
 801264a:	dc14      	bgt.n	8012676 <atan+0x76>
 801264c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012650:	429e      	cmp	r6, r3
 8012652:	dc0d      	bgt.n	8012670 <atan+0x70>
 8012654:	a396      	add	r3, pc, #600	; (adr r3, 80128b0 <atan+0x2b0>)
 8012656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801265a:	ee10 0a10 	vmov	r0, s0
 801265e:	4629      	mov	r1, r5
 8012660:	f7ed fdc4 	bl	80001ec <__adddf3>
 8012664:	4baf      	ldr	r3, [pc, #700]	; (8012924 <atan+0x324>)
 8012666:	2200      	movs	r2, #0
 8012668:	f7ee fa06 	bl	8000a78 <__aeabi_dcmpgt>
 801266c:	2800      	cmp	r0, #0
 801266e:	d1e6      	bne.n	801263e <atan+0x3e>
 8012670:	f04f 3aff 	mov.w	sl, #4294967295
 8012674:	e02b      	b.n	80126ce <atan+0xce>
 8012676:	f000 f963 	bl	8012940 <fabs>
 801267a:	4bab      	ldr	r3, [pc, #684]	; (8012928 <atan+0x328>)
 801267c:	429e      	cmp	r6, r3
 801267e:	ec55 4b10 	vmov	r4, r5, d0
 8012682:	f300 80bf 	bgt.w	8012804 <atan+0x204>
 8012686:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801268a:	429e      	cmp	r6, r3
 801268c:	f300 80a0 	bgt.w	80127d0 <atan+0x1d0>
 8012690:	ee10 2a10 	vmov	r2, s0
 8012694:	ee10 0a10 	vmov	r0, s0
 8012698:	462b      	mov	r3, r5
 801269a:	4629      	mov	r1, r5
 801269c:	f7ed fda6 	bl	80001ec <__adddf3>
 80126a0:	4ba0      	ldr	r3, [pc, #640]	; (8012924 <atan+0x324>)
 80126a2:	2200      	movs	r2, #0
 80126a4:	f7ed fda0 	bl	80001e8 <__aeabi_dsub>
 80126a8:	2200      	movs	r2, #0
 80126aa:	4606      	mov	r6, r0
 80126ac:	460f      	mov	r7, r1
 80126ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80126b2:	4620      	mov	r0, r4
 80126b4:	4629      	mov	r1, r5
 80126b6:	f7ed fd99 	bl	80001ec <__adddf3>
 80126ba:	4602      	mov	r2, r0
 80126bc:	460b      	mov	r3, r1
 80126be:	4630      	mov	r0, r6
 80126c0:	4639      	mov	r1, r7
 80126c2:	f7ee f873 	bl	80007ac <__aeabi_ddiv>
 80126c6:	f04f 0a00 	mov.w	sl, #0
 80126ca:	4604      	mov	r4, r0
 80126cc:	460d      	mov	r5, r1
 80126ce:	4622      	mov	r2, r4
 80126d0:	462b      	mov	r3, r5
 80126d2:	4620      	mov	r0, r4
 80126d4:	4629      	mov	r1, r5
 80126d6:	f7ed ff3f 	bl	8000558 <__aeabi_dmul>
 80126da:	4602      	mov	r2, r0
 80126dc:	460b      	mov	r3, r1
 80126de:	4680      	mov	r8, r0
 80126e0:	4689      	mov	r9, r1
 80126e2:	f7ed ff39 	bl	8000558 <__aeabi_dmul>
 80126e6:	a374      	add	r3, pc, #464	; (adr r3, 80128b8 <atan+0x2b8>)
 80126e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ec:	4606      	mov	r6, r0
 80126ee:	460f      	mov	r7, r1
 80126f0:	f7ed ff32 	bl	8000558 <__aeabi_dmul>
 80126f4:	a372      	add	r3, pc, #456	; (adr r3, 80128c0 <atan+0x2c0>)
 80126f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126fa:	f7ed fd77 	bl	80001ec <__adddf3>
 80126fe:	4632      	mov	r2, r6
 8012700:	463b      	mov	r3, r7
 8012702:	f7ed ff29 	bl	8000558 <__aeabi_dmul>
 8012706:	a370      	add	r3, pc, #448	; (adr r3, 80128c8 <atan+0x2c8>)
 8012708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801270c:	f7ed fd6e 	bl	80001ec <__adddf3>
 8012710:	4632      	mov	r2, r6
 8012712:	463b      	mov	r3, r7
 8012714:	f7ed ff20 	bl	8000558 <__aeabi_dmul>
 8012718:	a36d      	add	r3, pc, #436	; (adr r3, 80128d0 <atan+0x2d0>)
 801271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801271e:	f7ed fd65 	bl	80001ec <__adddf3>
 8012722:	4632      	mov	r2, r6
 8012724:	463b      	mov	r3, r7
 8012726:	f7ed ff17 	bl	8000558 <__aeabi_dmul>
 801272a:	a36b      	add	r3, pc, #428	; (adr r3, 80128d8 <atan+0x2d8>)
 801272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012730:	f7ed fd5c 	bl	80001ec <__adddf3>
 8012734:	4632      	mov	r2, r6
 8012736:	463b      	mov	r3, r7
 8012738:	f7ed ff0e 	bl	8000558 <__aeabi_dmul>
 801273c:	a368      	add	r3, pc, #416	; (adr r3, 80128e0 <atan+0x2e0>)
 801273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012742:	f7ed fd53 	bl	80001ec <__adddf3>
 8012746:	4642      	mov	r2, r8
 8012748:	464b      	mov	r3, r9
 801274a:	f7ed ff05 	bl	8000558 <__aeabi_dmul>
 801274e:	a366      	add	r3, pc, #408	; (adr r3, 80128e8 <atan+0x2e8>)
 8012750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012754:	4680      	mov	r8, r0
 8012756:	4689      	mov	r9, r1
 8012758:	4630      	mov	r0, r6
 801275a:	4639      	mov	r1, r7
 801275c:	f7ed fefc 	bl	8000558 <__aeabi_dmul>
 8012760:	a363      	add	r3, pc, #396	; (adr r3, 80128f0 <atan+0x2f0>)
 8012762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012766:	f7ed fd3f 	bl	80001e8 <__aeabi_dsub>
 801276a:	4632      	mov	r2, r6
 801276c:	463b      	mov	r3, r7
 801276e:	f7ed fef3 	bl	8000558 <__aeabi_dmul>
 8012772:	a361      	add	r3, pc, #388	; (adr r3, 80128f8 <atan+0x2f8>)
 8012774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012778:	f7ed fd36 	bl	80001e8 <__aeabi_dsub>
 801277c:	4632      	mov	r2, r6
 801277e:	463b      	mov	r3, r7
 8012780:	f7ed feea 	bl	8000558 <__aeabi_dmul>
 8012784:	a35e      	add	r3, pc, #376	; (adr r3, 8012900 <atan+0x300>)
 8012786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278a:	f7ed fd2d 	bl	80001e8 <__aeabi_dsub>
 801278e:	4632      	mov	r2, r6
 8012790:	463b      	mov	r3, r7
 8012792:	f7ed fee1 	bl	8000558 <__aeabi_dmul>
 8012796:	a35c      	add	r3, pc, #368	; (adr r3, 8012908 <atan+0x308>)
 8012798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279c:	f7ed fd24 	bl	80001e8 <__aeabi_dsub>
 80127a0:	4632      	mov	r2, r6
 80127a2:	463b      	mov	r3, r7
 80127a4:	f7ed fed8 	bl	8000558 <__aeabi_dmul>
 80127a8:	4602      	mov	r2, r0
 80127aa:	460b      	mov	r3, r1
 80127ac:	4640      	mov	r0, r8
 80127ae:	4649      	mov	r1, r9
 80127b0:	f7ed fd1c 	bl	80001ec <__adddf3>
 80127b4:	4622      	mov	r2, r4
 80127b6:	462b      	mov	r3, r5
 80127b8:	f7ed fece 	bl	8000558 <__aeabi_dmul>
 80127bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80127c0:	4602      	mov	r2, r0
 80127c2:	460b      	mov	r3, r1
 80127c4:	d14b      	bne.n	801285e <atan+0x25e>
 80127c6:	4620      	mov	r0, r4
 80127c8:	4629      	mov	r1, r5
 80127ca:	f7ed fd0d 	bl	80001e8 <__aeabi_dsub>
 80127ce:	e72c      	b.n	801262a <atan+0x2a>
 80127d0:	ee10 0a10 	vmov	r0, s0
 80127d4:	4b53      	ldr	r3, [pc, #332]	; (8012924 <atan+0x324>)
 80127d6:	2200      	movs	r2, #0
 80127d8:	4629      	mov	r1, r5
 80127da:	f7ed fd05 	bl	80001e8 <__aeabi_dsub>
 80127de:	4b51      	ldr	r3, [pc, #324]	; (8012924 <atan+0x324>)
 80127e0:	4606      	mov	r6, r0
 80127e2:	460f      	mov	r7, r1
 80127e4:	2200      	movs	r2, #0
 80127e6:	4620      	mov	r0, r4
 80127e8:	4629      	mov	r1, r5
 80127ea:	f7ed fcff 	bl	80001ec <__adddf3>
 80127ee:	4602      	mov	r2, r0
 80127f0:	460b      	mov	r3, r1
 80127f2:	4630      	mov	r0, r6
 80127f4:	4639      	mov	r1, r7
 80127f6:	f7ed ffd9 	bl	80007ac <__aeabi_ddiv>
 80127fa:	f04f 0a01 	mov.w	sl, #1
 80127fe:	4604      	mov	r4, r0
 8012800:	460d      	mov	r5, r1
 8012802:	e764      	b.n	80126ce <atan+0xce>
 8012804:	4b49      	ldr	r3, [pc, #292]	; (801292c <atan+0x32c>)
 8012806:	429e      	cmp	r6, r3
 8012808:	da1d      	bge.n	8012846 <atan+0x246>
 801280a:	ee10 0a10 	vmov	r0, s0
 801280e:	4b48      	ldr	r3, [pc, #288]	; (8012930 <atan+0x330>)
 8012810:	2200      	movs	r2, #0
 8012812:	4629      	mov	r1, r5
 8012814:	f7ed fce8 	bl	80001e8 <__aeabi_dsub>
 8012818:	4b45      	ldr	r3, [pc, #276]	; (8012930 <atan+0x330>)
 801281a:	4606      	mov	r6, r0
 801281c:	460f      	mov	r7, r1
 801281e:	2200      	movs	r2, #0
 8012820:	4620      	mov	r0, r4
 8012822:	4629      	mov	r1, r5
 8012824:	f7ed fe98 	bl	8000558 <__aeabi_dmul>
 8012828:	4b3e      	ldr	r3, [pc, #248]	; (8012924 <atan+0x324>)
 801282a:	2200      	movs	r2, #0
 801282c:	f7ed fcde 	bl	80001ec <__adddf3>
 8012830:	4602      	mov	r2, r0
 8012832:	460b      	mov	r3, r1
 8012834:	4630      	mov	r0, r6
 8012836:	4639      	mov	r1, r7
 8012838:	f7ed ffb8 	bl	80007ac <__aeabi_ddiv>
 801283c:	f04f 0a02 	mov.w	sl, #2
 8012840:	4604      	mov	r4, r0
 8012842:	460d      	mov	r5, r1
 8012844:	e743      	b.n	80126ce <atan+0xce>
 8012846:	462b      	mov	r3, r5
 8012848:	ee10 2a10 	vmov	r2, s0
 801284c:	4939      	ldr	r1, [pc, #228]	; (8012934 <atan+0x334>)
 801284e:	2000      	movs	r0, #0
 8012850:	f7ed ffac 	bl	80007ac <__aeabi_ddiv>
 8012854:	f04f 0a03 	mov.w	sl, #3
 8012858:	4604      	mov	r4, r0
 801285a:	460d      	mov	r5, r1
 801285c:	e737      	b.n	80126ce <atan+0xce>
 801285e:	4b36      	ldr	r3, [pc, #216]	; (8012938 <atan+0x338>)
 8012860:	4e36      	ldr	r6, [pc, #216]	; (801293c <atan+0x33c>)
 8012862:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012866:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801286a:	e9da 2300 	ldrd	r2, r3, [sl]
 801286e:	f7ed fcbb 	bl	80001e8 <__aeabi_dsub>
 8012872:	4622      	mov	r2, r4
 8012874:	462b      	mov	r3, r5
 8012876:	f7ed fcb7 	bl	80001e8 <__aeabi_dsub>
 801287a:	4602      	mov	r2, r0
 801287c:	460b      	mov	r3, r1
 801287e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012882:	f7ed fcb1 	bl	80001e8 <__aeabi_dsub>
 8012886:	f1bb 0f00 	cmp.w	fp, #0
 801288a:	4604      	mov	r4, r0
 801288c:	460d      	mov	r5, r1
 801288e:	f6bf aed6 	bge.w	801263e <atan+0x3e>
 8012892:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012896:	461d      	mov	r5, r3
 8012898:	e6d1      	b.n	801263e <atan+0x3e>
 801289a:	a51d      	add	r5, pc, #116	; (adr r5, 8012910 <atan+0x310>)
 801289c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80128a0:	e6cd      	b.n	801263e <atan+0x3e>
 80128a2:	bf00      	nop
 80128a4:	f3af 8000 	nop.w
 80128a8:	54442d18 	.word	0x54442d18
 80128ac:	bff921fb 	.word	0xbff921fb
 80128b0:	8800759c 	.word	0x8800759c
 80128b4:	7e37e43c 	.word	0x7e37e43c
 80128b8:	e322da11 	.word	0xe322da11
 80128bc:	3f90ad3a 	.word	0x3f90ad3a
 80128c0:	24760deb 	.word	0x24760deb
 80128c4:	3fa97b4b 	.word	0x3fa97b4b
 80128c8:	a0d03d51 	.word	0xa0d03d51
 80128cc:	3fb10d66 	.word	0x3fb10d66
 80128d0:	c54c206e 	.word	0xc54c206e
 80128d4:	3fb745cd 	.word	0x3fb745cd
 80128d8:	920083ff 	.word	0x920083ff
 80128dc:	3fc24924 	.word	0x3fc24924
 80128e0:	5555550d 	.word	0x5555550d
 80128e4:	3fd55555 	.word	0x3fd55555
 80128e8:	2c6a6c2f 	.word	0x2c6a6c2f
 80128ec:	bfa2b444 	.word	0xbfa2b444
 80128f0:	52defd9a 	.word	0x52defd9a
 80128f4:	3fadde2d 	.word	0x3fadde2d
 80128f8:	af749a6d 	.word	0xaf749a6d
 80128fc:	3fb3b0f2 	.word	0x3fb3b0f2
 8012900:	fe231671 	.word	0xfe231671
 8012904:	3fbc71c6 	.word	0x3fbc71c6
 8012908:	9998ebc4 	.word	0x9998ebc4
 801290c:	3fc99999 	.word	0x3fc99999
 8012910:	54442d18 	.word	0x54442d18
 8012914:	3ff921fb 	.word	0x3ff921fb
 8012918:	440fffff 	.word	0x440fffff
 801291c:	7ff00000 	.word	0x7ff00000
 8012920:	3fdbffff 	.word	0x3fdbffff
 8012924:	3ff00000 	.word	0x3ff00000
 8012928:	3ff2ffff 	.word	0x3ff2ffff
 801292c:	40038000 	.word	0x40038000
 8012930:	3ff80000 	.word	0x3ff80000
 8012934:	bff00000 	.word	0xbff00000
 8012938:	08012b08 	.word	0x08012b08
 801293c:	08012ae8 	.word	0x08012ae8

08012940 <fabs>:
 8012940:	ec51 0b10 	vmov	r0, r1, d0
 8012944:	ee10 2a10 	vmov	r2, s0
 8012948:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801294c:	ec43 2b10 	vmov	d0, r2, r3
 8012950:	4770      	bx	lr
 8012952:	0000      	movs	r0, r0
 8012954:	0000      	movs	r0, r0
	...

08012958 <nan>:
 8012958:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012960 <nan+0x8>
 801295c:	4770      	bx	lr
 801295e:	bf00      	nop
 8012960:	00000000 	.word	0x00000000
 8012964:	7ff80000 	.word	0x7ff80000

08012968 <_init>:
 8012968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801296a:	bf00      	nop
 801296c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801296e:	bc08      	pop	{r3}
 8012970:	469e      	mov	lr, r3
 8012972:	4770      	bx	lr

08012974 <_fini>:
 8012974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012976:	bf00      	nop
 8012978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801297a:	bc08      	pop	{r3}
 801297c:	469e      	mov	lr, r3
 801297e:	4770      	bx	lr
