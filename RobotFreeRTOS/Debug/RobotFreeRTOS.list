
RobotFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001404c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  080141f0  080141f0  000241f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014598  08014598  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08014598  08014598  00024598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080145a0  080145a0  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080145a0  080145a0  000245a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080145a4  080145a4  000245a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080145a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007058  200001f8  080147a0  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007250  080147a0  00037250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000341b5  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e78  00000000  00000000  000643dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020b0  00000000  00000000  0006a258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e88  00000000  00000000  0006c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d625  00000000  00000000  0006e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a683  00000000  00000000  0008b7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0b5b  00000000  00000000  000b5e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00156993  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f58  00000000  00000000  001569e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080141d4 	.word	0x080141d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	080141d4 	.word	0x080141d4

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0ae      	sub	sp, #184	; 0xb8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8000eaa:	edc7 0a08 	vstr	s1, [r7, #32]
 8000eae:	ed87 1a07 	vstr	s2, [r7, #28]
 8000eb2:	edc7 1a06 	vstr	s3, [r7, #24]
 8000eb6:	ed87 2a05 	vstr	s4, [r7, #20]
 8000eba:	edc7 2a04 	vstr	s5, [r7, #16]
 8000ebe:	ed87 3a03 	vstr	s6, [r7, #12]
 8000ec2:	edc7 3a02 	vstr	s7, [r7, #8]
 8000ec6:	ed87 4a01 	vstr	s8, [r7, #4]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8000eca:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ece:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed6:	d11d      	bne.n	8000f14 <MadgwickAHRSupdate+0x74>
 8000ed8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000edc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee4:	d116      	bne.n	8000f14 <MadgwickAHRSupdate+0x74>
 8000ee6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef2:	d10f      	bne.n	8000f14 <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8000ef4:	edd7 2a04 	vldr	s5, [r7, #16]
 8000ef8:	ed97 2a05 	vldr	s4, [r7, #20]
 8000efc:	edd7 1a06 	vldr	s3, [r7, #24]
 8000f00:	ed97 1a07 	vldr	s2, [r7, #28]
 8000f04:	edd7 0a08 	vldr	s1, [r7, #32]
 8000f08:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000f0c:	f000 fede 	bl	8001ccc <MadgwickAHRSupdateIMU>
		return;
 8000f10:	f000 becc 	b.w	8001cac <MadgwickAHRSupdate+0xe0c>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000f14:	4be6      	ldr	r3, [pc, #920]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 8000f16:	edd3 7a00 	vldr	s15, [r3]
 8000f1a:	eeb1 7a67 	vneg.f32	s14, s15
 8000f1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f26:	4be3      	ldr	r3, [pc, #908]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8000f28:	edd3 6a00 	vldr	s13, [r3]
 8000f2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f38:	4bdf      	ldr	r3, [pc, #892]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 8000f3a:	edd3 6a00 	vldr	s13, [r3]
 8000f3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f52:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000f56:	4bd9      	ldr	r3, [pc, #868]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 8000f58:	ed93 7a00 	vldr	s14, [r3]
 8000f5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f64:	4bd3      	ldr	r3, [pc, #844]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8000f66:	edd3 6a00 	vldr	s13, [r3]
 8000f6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f76:	4bd0      	ldr	r3, [pc, #832]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 8000f78:	edd3 6a00 	vldr	s13, [r3]
 8000f7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f88:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f90:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8000f94:	4bc9      	ldr	r3, [pc, #804]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 8000f96:	ed93 7a00 	vldr	s14, [r3]
 8000f9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa2:	4bc3      	ldr	r3, [pc, #780]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 8000fa4:	edd3 6a00 	vldr	s13, [r3]
 8000fa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fb4:	4bc0      	ldr	r3, [pc, #768]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 8000fb6:	edd3 6a00 	vldr	s13, [r3]
 8000fba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fce:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8000fd2:	4bba      	ldr	r3, [pc, #744]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 8000fd4:	ed93 7a00 	vldr	s14, [r3]
 8000fd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe0:	4bb3      	ldr	r3, [pc, #716]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 8000fe2:	edd3 6a00 	vldr	s13, [r3]
 8000fe6:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ff2:	4bb0      	ldr	r3, [pc, #704]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8000ff4:	edd3 6a00 	vldr	s13, [r3]
 8000ff8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001000:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001004:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001008:	ee67 7a87 	vmul.f32	s15, s15, s14
 800100c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001010:	edd7 7a06 	vldr	s15, [r7, #24]
 8001014:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101c:	d10e      	bne.n	800103c <MadgwickAHRSupdate+0x19c>
 800101e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001022:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102a:	d107      	bne.n	800103c <MadgwickAHRSupdate+0x19c>
 800102c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001030:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001038:	f000 85ac 	beq.w	8001b94 <MadgwickAHRSupdate+0xcf4>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800103c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001040:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001044:	edd7 7a05 	vldr	s15, [r7, #20]
 8001048:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800104c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001050:	edd7 7a04 	vldr	s15, [r7, #16]
 8001054:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105c:	eeb0 0a67 	vmov.f32	s0, s15
 8001060:	f001 f958 	bl	8002314 <invSqrt>
 8001064:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 8001068:	ed97 7a06 	vldr	s14, [r7, #24]
 800106c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001074:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8001078:	ed97 7a05 	vldr	s14, [r7, #20]
 800107c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001084:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001088:	ed97 7a04 	vldr	s14, [r7, #16]
 800108c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001094:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001098:	edd7 7a03 	vldr	s15, [r7, #12]
 800109c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80010a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b8:	eeb0 0a67 	vmov.f32	s0, s15
 80010bc:	f001 f92a 	bl	8002314 <invSqrt>
 80010c0:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 80010c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80010c8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d0:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 80010d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80010d8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e0:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 80010e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80010e8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f0:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 80010f4:	4b71      	ldr	r3, [pc, #452]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
 80010fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001106:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 800110a:	4b6c      	ldr	r3, [pc, #432]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001114:	ed97 7a02 	vldr	s14, [r7, #8]
 8001118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800111c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001120:	4b66      	ldr	r3, [pc, #408]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800112a:	ed97 7a01 	vldr	s14, [r7, #4]
 800112e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001132:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 8001136:	4b5e      	ldr	r3, [pc, #376]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001140:	ed97 7a03 	vldr	s14, [r7, #12]
 8001144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001148:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 800114c:	4b5b      	ldr	r3, [pc, #364]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001156:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 800115a:	4b55      	ldr	r3, [pc, #340]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 800115c:	edd3 7a00 	vldr	s15, [r3]
 8001160:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001164:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 8001168:	4b52      	ldr	r3, [pc, #328]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001172:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 8001176:	4b50      	ldr	r3, [pc, #320]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001180:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8001184:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800118e:	4b49      	ldr	r3, [pc, #292]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001198:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 800119c:	4b45      	ldr	r3, [pc, #276]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011a6:	4b44      	ldr	r3, [pc, #272]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 80011b4:	4b41      	ldr	r3, [pc, #260]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 80011b6:	ed93 7a00 	vldr	s14, [r3]
 80011ba:	4b40      	ldr	r3, [pc, #256]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 80011c8:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 80011ca:	ed93 7a00 	vldr	s14, [r3]
 80011ce:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 80011dc:	4b37      	ldr	r3, [pc, #220]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ec:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 80011f2:	ed93 7a00 	vldr	s14, [r3]
 80011f6:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 8001206:	ed93 7a00 	vldr	s14, [r3]
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001214:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001218:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 800121a:	ed93 7a00 	vldr	s14, [r3]
 800121e:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001228:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 800122e:	ed93 7a00 	vldr	s14, [r3]
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8001242:	ed93 7a00 	vldr	s14, [r3]
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001250:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8001256:	ed93 7a00 	vldr	s14, [r3]
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001264:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 800126a:	ed93 7a00 	vldr	s14, [r3]
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001278:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800127c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001280:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001284:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 800128a:	edd3 6a00 	vldr	s13, [r3]
 800128e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 800129c:	edd3 6a00 	vldr	s13, [r3]
 80012a0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80012a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ac:	e008      	b.n	80012c0 <MadgwickAHRSupdate+0x420>
 80012ae:	bf00      	nop
 80012b0:	20000214 	.word	0x20000214
 80012b4:	20000218 	.word	0x20000218
 80012b8:	2000021c 	.word	0x2000021c
 80012bc:	20000004 	.word	0x20000004
 80012c0:	edd7 6a03 	vldr	s13, [r7, #12]
 80012c4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80012c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012d0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80012d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012dc:	4bf5      	ldr	r3, [pc, #980]	; (80016b4 <MadgwickAHRSupdate+0x814>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ea:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80012ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012f6:	4bf0      	ldr	r3, [pc, #960]	; (80016b8 <MadgwickAHRSupdate+0x818>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001300:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001304:	edd7 6a03 	vldr	s13, [r7, #12]
 8001308:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800130c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001310:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001314:	edd7 6a03 	vldr	s13, [r7, #12]
 8001318:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800131c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001324:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001328:	4be3      	ldr	r3, [pc, #908]	; (80016b8 <MadgwickAHRSupdate+0x818>)
 800132a:	ed93 7a00 	vldr	s14, [r3]
 800132e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001332:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001336:	edd7 6a02 	vldr	s13, [r7, #8]
 800133a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800133e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001342:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001346:	4bdd      	ldr	r3, [pc, #884]	; (80016bc <MadgwickAHRSupdate+0x81c>)
 8001348:	edd3 6a00 	vldr	s13, [r3]
 800134c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001354:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001358:	4bd6      	ldr	r3, [pc, #856]	; (80016b4 <MadgwickAHRSupdate+0x814>)
 800135a:	edd3 6a00 	vldr	s13, [r3]
 800135e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001366:	ee37 7a27 	vadd.f32	s14, s14, s15
 800136a:	edd7 6a02 	vldr	s13, [r7, #8]
 800136e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001376:	ee37 7a67 	vsub.f32	s14, s14, s15
 800137a:	edd7 6a02 	vldr	s13, [r7, #8]
 800137e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001386:	ee37 7a27 	vadd.f32	s14, s14, s15
 800138a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800138e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001392:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001396:	4bc8      	ldr	r3, [pc, #800]	; (80016b8 <MadgwickAHRSupdate+0x818>)
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013a4:	edd7 6a02 	vldr	s13, [r7, #8]
 80013a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 80013b8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80013bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013c0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80013c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013cc:	ee17 0a90 	vmov	r0, s15
 80013d0:	f7ff f86a 	bl	80004a8 <__aeabi_f2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	ec43 2b10 	vmov	d0, r2, r3
 80013dc:	f011 f9a4 	bl	8012728 <sqrt>
 80013e0:	ec53 2b10 	vmov	r2, r3, d0
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fb8e 	bl	8000b08 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80013f0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80013f4:	eeb1 7a67 	vneg.f32	s14, s15
 80013f8:	4bae      	ldr	r3, [pc, #696]	; (80016b4 <MadgwickAHRSupdate+0x814>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001402:	4bae      	ldr	r3, [pc, #696]	; (80016bc <MadgwickAHRSupdate+0x81c>)
 8001404:	edd3 6a00 	vldr	s13, [r3]
 8001408:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800140c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001414:	edd7 6a01 	vldr	s13, [r7, #4]
 8001418:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800141c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001420:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001424:	4ba4      	ldr	r3, [pc, #656]	; (80016b8 <MadgwickAHRSupdate+0x818>)
 8001426:	edd3 6a00 	vldr	s13, [r3]
 800142a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800142e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001436:	edd7 6a01 	vldr	s13, [r7, #4]
 800143a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800143e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001442:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001446:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800144a:	edd7 7a02 	vldr	s15, [r7, #8]
 800144e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001452:	4b99      	ldr	r3, [pc, #612]	; (80016b8 <MadgwickAHRSupdate+0x818>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001460:	edd7 6a01 	vldr	s13, [r7, #4]
 8001464:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001470:	edd7 6a01 	vldr	s13, [r7, #4]
 8001474:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800147c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001480:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001484:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001488:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800148c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 8001490:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001494:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001498:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800149c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80014a0:	eeb1 7a67 	vneg.f32	s14, s15
 80014a4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80014a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80014ac:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80014b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80014c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80014c8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80014cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80014d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014d8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80014dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e4:	4b73      	ldr	r3, [pc, #460]	; (80016b4 <MadgwickAHRSupdate+0x814>)
 80014e6:	edd3 6a00 	vldr	s13, [r3]
 80014ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014f2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80014f6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80014fa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80014fe:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001502:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001506:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800150a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800150e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001512:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001516:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800151a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800151e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001522:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001526:	edd7 7a03 	vldr	s15, [r7, #12]
 800152a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800152e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001532:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001536:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800153a:	eef1 6a67 	vneg.f32	s13, s15
 800153e:	4b5e      	ldr	r3, [pc, #376]	; (80016b8 <MadgwickAHRSupdate+0x818>)
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001548:	4b5c      	ldr	r3, [pc, #368]	; (80016bc <MadgwickAHRSupdate+0x81c>)
 800154a:	ed93 6a00 	vldr	s12, [r3]
 800154e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001552:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001556:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800155a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800155e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001562:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001566:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800156a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800156e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001572:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001576:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800157a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800157e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001582:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001586:	edd7 7a02 	vldr	s15, [r7, #8]
 800158a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800158e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001592:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <MadgwickAHRSupdate+0x814>)
 8001598:	edd3 6a00 	vldr	s13, [r3]
 800159c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015a4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80015a8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80015ac:	ee36 6a27 	vadd.f32	s12, s12, s15
 80015b0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015b4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015b8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80015bc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80015c0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80015c4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80015c8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80015cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80015d0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80015d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80015d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80015e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80015ec:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80015f0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015f4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80015f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001600:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001604:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001608:	ee27 7a27 	vmul.f32	s14, s14, s15
 800160c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001610:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001614:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001618:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800161c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001620:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001624:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <MadgwickAHRSupdate+0x81c>)
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800163a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800163e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001642:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001646:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800164a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800164e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001652:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001656:	ee36 6a67 	vsub.f32	s12, s12, s15
 800165a:	edd7 7a04 	vldr	s15, [r7, #16]
 800165e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001666:	ee37 7a67 	vsub.f32	s14, s14, s15
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <MadgwickAHRSupdate+0x818>)
 800166c:	edd3 6a00 	vldr	s13, [r3]
 8001670:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001674:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001678:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800167c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001680:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001684:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001688:	ee36 6a67 	vsub.f32	s12, s12, s15
 800168c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001690:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001694:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001698:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800169c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80016a0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016a4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80016a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80016ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b0:	e006      	b.n	80016c0 <MadgwickAHRSupdate+0x820>
 80016b2:	bf00      	nop
 80016b4:	20000218 	.word	0x20000218
 80016b8:	2000021c 	.word	0x2000021c
 80016bc:	20000214 	.word	0x20000214
 80016c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80016c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016cc:	4bf6      	ldr	r3, [pc, #984]	; (8001aa8 <MadgwickAHRSupdate+0xc08>)
 80016ce:	edd3 6a00 	vldr	s13, [r3]
 80016d2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016da:	4bf4      	ldr	r3, [pc, #976]	; (8001aac <MadgwickAHRSupdate+0xc0c>)
 80016dc:	ed93 6a00 	vldr	s12, [r3]
 80016e0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016ec:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80016f0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80016f4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80016f8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001700:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001704:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001708:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800170c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001710:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001714:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001718:	edd7 7a02 	vldr	s15, [r7, #8]
 800171c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001720:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001728:	4be1      	ldr	r3, [pc, #900]	; (8001ab0 <MadgwickAHRSupdate+0xc10>)
 800172a:	edd3 6a00 	vldr	s13, [r3]
 800172e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001732:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001736:	4bdf      	ldr	r3, [pc, #892]	; (8001ab4 <MadgwickAHRSupdate+0xc14>)
 8001738:	ed93 6a00 	vldr	s12, [r3]
 800173c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001740:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001744:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001748:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800174c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001750:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001754:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001758:	ee26 6a27 	vmul.f32	s12, s12, s15
 800175c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001760:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001764:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001768:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800176c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001770:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001774:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001778:	ee36 6a27 	vadd.f32	s12, s12, s15
 800177c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001780:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001790:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001794:	eeb1 7a67 	vneg.f32	s14, s15
 8001798:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800179c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80017a0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80017a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80017ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80017b8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80017bc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80017c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017cc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80017d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d8:	4bb3      	ldr	r3, [pc, #716]	; (8001aa8 <MadgwickAHRSupdate+0xc08>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80017e2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80017e6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017ee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80017f2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017f6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017fe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001802:	edd7 7a04 	vldr	s15, [r7, #16]
 8001806:	ee76 7a67 	vsub.f32	s15, s12, s15
 800180a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001812:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001816:	eef1 6a67 	vneg.f32	s13, s15
 800181a:	4ba3      	ldr	r3, [pc, #652]	; (8001aa8 <MadgwickAHRSupdate+0xc08>)
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001824:	4ba1      	ldr	r3, [pc, #644]	; (8001aac <MadgwickAHRSupdate+0xc0c>)
 8001826:	ed93 6a00 	vldr	s12, [r3]
 800182a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800182e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001832:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001836:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800183a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800183e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001842:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001846:	ee36 6a67 	vsub.f32	s12, s12, s15
 800184a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800184e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001852:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001856:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800185a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800185e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001862:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001866:	ee36 6a27 	vadd.f32	s12, s12, s15
 800186a:	edd7 7a03 	vldr	s15, [r7, #12]
 800186e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001876:	ee37 7a27 	vadd.f32	s14, s14, s15
 800187a:	4b8e      	ldr	r3, [pc, #568]	; (8001ab4 <MadgwickAHRSupdate+0xc14>)
 800187c:	edd3 6a00 	vldr	s13, [r3]
 8001880:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001884:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001888:	4b89      	ldr	r3, [pc, #548]	; (8001ab0 <MadgwickAHRSupdate+0xc10>)
 800188a:	ed93 6a00 	vldr	s12, [r3]
 800188e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001892:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001896:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800189a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800189e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80018a2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018a6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018aa:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018ae:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80018b2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80018b6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80018ba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018be:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018c2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ca:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018d6:	4b75      	ldr	r3, [pc, #468]	; (8001aac <MadgwickAHRSupdate+0xc0c>)
 80018d8:	edd3 6a00 	vldr	s13, [r3]
 80018dc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018e4:	4b70      	ldr	r3, [pc, #448]	; (8001aa8 <MadgwickAHRSupdate+0xc08>)
 80018e6:	ed93 6a00 	vldr	s12, [r3]
 80018ea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80018ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018f6:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80018fa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018fe:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001902:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001906:	ee26 6a27 	vmul.f32	s12, s12, s15
 800190a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800190e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001912:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001916:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800191a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800191e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001922:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001926:	ee36 6a27 	vadd.f32	s12, s12, s15
 800192a:	edd7 7a01 	vldr	s15, [r7, #4]
 800192e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800193e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001942:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001946:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800194a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800194e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001952:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001956:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800195a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800195e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001962:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001966:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800196a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800196e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001972:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001976:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800197a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001982:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001986:	eef1 6a67 	vneg.f32	s13, s15
 800198a:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <MadgwickAHRSupdate+0xc10>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001994:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <MadgwickAHRSupdate+0xc14>)
 8001996:	ed93 6a00 	vldr	s12, [r3]
 800199a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800199e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019a6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80019aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019ae:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019b2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80019b6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019ba:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019be:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019c2:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80019c6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80019ca:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019d2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019d6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019da:	edd7 7a03 	vldr	s15, [r7, #12]
 80019de:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019ee:	eef1 6a67 	vneg.f32	s13, s15
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <MadgwickAHRSupdate+0xc0c>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <MadgwickAHRSupdate+0xc08>)
 80019fe:	ed93 6a00 	vldr	s12, [r3]
 8001a02:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a06:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a0a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a0e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001a12:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001a16:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a1a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a1e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a22:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001a26:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001a2a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001a2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a32:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a36:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a3e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <MadgwickAHRSupdate+0xc14>)
 8001a4c:	edd3 6a00 	vldr	s13, [r3]
 8001a50:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a58:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001a5c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a60:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a64:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a68:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a6c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001a70:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a74:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a78:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a7c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a80:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a84:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a88:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a90:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001aa0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001aa4:	e008      	b.n	8001ab8 <MadgwickAHRSupdate+0xc18>
 8001aa6:	bf00      	nop
 8001aa8:	20000218 	.word	0x20000218
 8001aac:	20000004 	.word	0x20000004
 8001ab0:	2000021c 	.word	0x2000021c
 8001ab4:	20000214 	.word	0x20000214
 8001ab8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001abc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ac0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001acc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ad8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae4:	f000 fc16 	bl	8002314 <invSqrt>
 8001ae8:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001aec:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001af0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001afc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001b00:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b08:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001b0c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001b10:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b18:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001b1c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001b20:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b28:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001b2c:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <MadgwickAHRSupdate+0xe14>)
 8001b2e:	ed93 7a00 	vldr	s14, [r3]
 8001b32:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b42:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001b46:	4b5b      	ldr	r3, [pc, #364]	; (8001cb4 <MadgwickAHRSupdate+0xe14>)
 8001b48:	ed93 7a00 	vldr	s14, [r3]
 8001b4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b54:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001b60:	4b54      	ldr	r3, [pc, #336]	; (8001cb4 <MadgwickAHRSupdate+0xe14>)
 8001b62:	ed93 7a00 	vldr	s14, [r3]
 8001b66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b76:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001b7a:	4b4e      	ldr	r3, [pc, #312]	; (8001cb4 <MadgwickAHRSupdate+0xe14>)
 8001b7c:	ed93 7a00 	vldr	s14, [r3]
 8001b80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b88:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b90:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001b94:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001b98:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001cb8 <MadgwickAHRSupdate+0xe18>
 8001b9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ba0:	4b46      	ldr	r3, [pc, #280]	; (8001cbc <MadgwickAHRSupdate+0xe1c>)
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001baa:	4b44      	ldr	r3, [pc, #272]	; (8001cbc <MadgwickAHRSupdate+0xe1c>)
 8001bac:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001bb0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001bb4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001cb8 <MadgwickAHRSupdate+0xe18>
 8001bb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bbc:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <MadgwickAHRSupdate+0xe20>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <MadgwickAHRSupdate+0xe20>)
 8001bc8:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001bcc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001bd0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001cb8 <MadgwickAHRSupdate+0xe18>
 8001bd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <MadgwickAHRSupdate+0xe24>)
 8001bda:	edd3 7a00 	vldr	s15, [r3]
 8001bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be2:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <MadgwickAHRSupdate+0xe24>)
 8001be4:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001be8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001bec:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001cb8 <MadgwickAHRSupdate+0xe18>
 8001bf0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <MadgwickAHRSupdate+0xe28>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfe:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <MadgwickAHRSupdate+0xe28>)
 8001c00:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <MadgwickAHRSupdate+0xe1c>)
 8001c06:	ed93 7a00 	vldr	s14, [r3]
 8001c0a:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <MadgwickAHRSupdate+0xe1c>)
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <MadgwickAHRSupdate+0xe20>)
 8001c16:	edd3 6a00 	vldr	s13, [r3]
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <MadgwickAHRSupdate+0xe20>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c28:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <MadgwickAHRSupdate+0xe24>)
 8001c2a:	edd3 6a00 	vldr	s13, [r3]
 8001c2e:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <MadgwickAHRSupdate+0xe24>)
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c3c:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <MadgwickAHRSupdate+0xe28>)
 8001c3e:	edd3 6a00 	vldr	s13, [r3]
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <MadgwickAHRSupdate+0xe28>)
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c50:	eeb0 0a67 	vmov.f32	s0, s15
 8001c54:	f000 fb5e 	bl	8002314 <invSqrt>
 8001c58:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <MadgwickAHRSupdate+0xe1c>)
 8001c5e:	ed93 7a00 	vldr	s14, [r3]
 8001c62:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <MadgwickAHRSupdate+0xe1c>)
 8001c6c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001c70:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <MadgwickAHRSupdate+0xe20>)
 8001c72:	ed93 7a00 	vldr	s14, [r3]
 8001c76:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <MadgwickAHRSupdate+0xe20>)
 8001c80:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MadgwickAHRSupdate+0xe24>)
 8001c86:	ed93 7a00 	vldr	s14, [r3]
 8001c8a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MadgwickAHRSupdate+0xe24>)
 8001c94:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <MadgwickAHRSupdate+0xe28>)
 8001c9a:	ed93 7a00 	vldr	s14, [r3]
 8001c9e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <MadgwickAHRSupdate+0xe28>)
 8001ca8:	edc3 7a00 	vstr	s15, [r3]
}
 8001cac:	37b8      	adds	r7, #184	; 0xb8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	3ba3d70a 	.word	0x3ba3d70a
 8001cbc:	20000004 	.word	0x20000004
 8001cc0:	20000214 	.word	0x20000214
 8001cc4:	20000218 	.word	0x20000218
 8001cc8:	2000021c 	.word	0x2000021c

08001ccc <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b09c      	sub	sp, #112	; 0x70
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	ed87 0a05 	vstr	s0, [r7, #20]
 8001cd6:	edc7 0a04 	vstr	s1, [r7, #16]
 8001cda:	ed87 1a03 	vstr	s2, [r7, #12]
 8001cde:	edc7 1a02 	vstr	s3, [r7, #8]
 8001ce2:	ed87 2a01 	vstr	s4, [r7, #4]
 8001ce6:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001cea:	4bee      	ldr	r3, [pc, #952]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	eeb1 7a67 	vneg.f32	s14, s15
 8001cf4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cfc:	4bea      	ldr	r3, [pc, #936]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001cfe:	edd3 6a00 	vldr	s13, [r3]
 8001d02:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d0e:	4be7      	ldr	r3, [pc, #924]	; (80020ac <MadgwickAHRSupdateIMU+0x3e0>)
 8001d10:	edd3 6a00 	vldr	s13, [r3]
 8001d14:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d20:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d28:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001d2c:	4be0      	ldr	r3, [pc, #896]	; (80020b0 <MadgwickAHRSupdateIMU+0x3e4>)
 8001d2e:	ed93 7a00 	vldr	s14, [r3]
 8001d32:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d3a:	4bdb      	ldr	r3, [pc, #876]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001d3c:	edd3 6a00 	vldr	s13, [r3]
 8001d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d4c:	4bd7      	ldr	r3, [pc, #860]	; (80020ac <MadgwickAHRSupdateIMU+0x3e0>)
 8001d4e:	edd3 6a00 	vldr	s13, [r3]
 8001d52:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d66:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001d6a:	4bd1      	ldr	r3, [pc, #836]	; (80020b0 <MadgwickAHRSupdateIMU+0x3e4>)
 8001d6c:	ed93 7a00 	vldr	s14, [r3]
 8001d70:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d78:	4bca      	ldr	r3, [pc, #808]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001d7a:	edd3 6a00 	vldr	s13, [r3]
 8001d7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d8a:	4bc8      	ldr	r3, [pc, #800]	; (80020ac <MadgwickAHRSupdateIMU+0x3e0>)
 8001d8c:	edd3 6a00 	vldr	s13, [r3]
 8001d90:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001da8:	4bc1      	ldr	r3, [pc, #772]	; (80020b0 <MadgwickAHRSupdateIMU+0x3e4>)
 8001daa:	ed93 7a00 	vldr	s14, [r3]
 8001dae:	edd7 7a03 	vldr	s15, [r7, #12]
 8001db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db6:	4bbb      	ldr	r3, [pc, #748]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001db8:	edd3 6a00 	vldr	s13, [r3]
 8001dbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc8:	4bb7      	ldr	r3, [pc, #732]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001dca:	edd3 6a00 	vldr	s13, [r3]
 8001dce:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001de6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df2:	d10e      	bne.n	8001e12 <MadgwickAHRSupdateIMU+0x146>
 8001df4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001df8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e00:	d107      	bne.n	8001e12 <MadgwickAHRSupdateIMU+0x146>
 8001e02:	edd7 7a00 	vldr	s15, [r7]
 8001e06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	f000 81e5 	beq.w	80021dc <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e16:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e26:	edd7 7a00 	vldr	s15, [r7]
 8001e2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e32:	eeb0 0a67 	vmov.f32	s0, s15
 8001e36:	f000 fa6d 	bl	8002314 <invSqrt>
 8001e3a:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8001e3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e42:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4a:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8001e4e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e52:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5a:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 8001e5e:	ed97 7a00 	vldr	s14, [r7]
 8001e62:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6a:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001e6e:	4b90      	ldr	r3, [pc, #576]	; (80020b0 <MadgwickAHRSupdateIMU+0x3e4>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e78:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8001e7c:	4b89      	ldr	r3, [pc, #548]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e86:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 8001e8a:	4b87      	ldr	r3, [pc, #540]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e94:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8001e98:	4b84      	ldr	r3, [pc, #528]	; (80020ac <MadgwickAHRSupdateIMU+0x3e0>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ea2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 8001ea6:	4b82      	ldr	r3, [pc, #520]	; (80020b0 <MadgwickAHRSupdateIMU+0x3e4>)
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001eb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8001eb8:	4b7a      	ldr	r3, [pc, #488]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8001eca:	4b77      	ldr	r3, [pc, #476]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8001edc:	4b71      	ldr	r3, [pc, #452]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8001eee:	4b6e      	ldr	r3, [pc, #440]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001ef0:	edd3 7a00 	vldr	s15, [r3]
 8001ef4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001ef8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001efc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8001f00:	4b6b      	ldr	r3, [pc, #428]	; (80020b0 <MadgwickAHRSupdateIMU+0x3e4>)
 8001f02:	ed93 7a00 	vldr	s14, [r3]
 8001f06:	4b6a      	ldr	r3, [pc, #424]	; (80020b0 <MadgwickAHRSupdateIMU+0x3e4>)
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f10:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8001f14:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001f16:	ed93 7a00 	vldr	s14, [r3]
 8001f1a:	4b62      	ldr	r3, [pc, #392]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f24:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8001f28:	4b5f      	ldr	r3, [pc, #380]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001f2a:	ed93 7a00 	vldr	s14, [r3]
 8001f2e:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f38:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8001f3c:	4b5b      	ldr	r3, [pc, #364]	; (80020ac <MadgwickAHRSupdateIMU+0x3e0>)
 8001f3e:	ed93 7a00 	vldr	s14, [r3]
 8001f42:	4b5a      	ldr	r3, [pc, #360]	; (80020ac <MadgwickAHRSupdateIMU+0x3e0>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8001f50:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001f54:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f5c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001f60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f6c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001f70:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f7c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001f80:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001f90:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001f94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f9c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001fa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fb0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001fb4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fc6:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fd6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fde:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001fe2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fee:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001ff2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ff6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ffa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ffe:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002002:	edd7 7a00 	vldr	s15, [r7]
 8002006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200e:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002012:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002016:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800201a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800201e:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002028:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800202c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002034:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002038:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800203c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002048:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800204c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002054:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002058:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800205c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002060:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002064:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800206c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002070:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002074:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800207c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002080:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002084:	edd7 7a00 	vldr	s15, [r7]
 8002088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800208c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002090:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002094:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002098:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800209c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020a0:	e008      	b.n	80020b4 <MadgwickAHRSupdateIMU+0x3e8>
 80020a2:	bf00      	nop
 80020a4:	20000214 	.word	0x20000214
 80020a8:	20000218 	.word	0x20000218
 80020ac:	2000021c 	.word	0x2000021c
 80020b0:	20000004 	.word	0x20000004
 80020b4:	4b91      	ldr	r3, [pc, #580]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 80020b6:	edd3 7a00 	vldr	s15, [r3]
 80020ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020be:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80020c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80020c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80020d2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80020d6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80020da:	4b88      	ldr	r3, [pc, #544]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020e8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80020ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f8:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80020fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002100:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002104:	edd7 7a08 	vldr	s15, [r7, #32]
 8002108:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800210c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002110:	edd7 7a07 	vldr	s15, [r7, #28]
 8002114:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002118:	ee37 7a27 	vadd.f32	s14, s14, s15
 800211c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002120:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002128:	eeb0 0a67 	vmov.f32	s0, s15
 800212c:	f000 f8f2 	bl	8002314 <invSqrt>
 8002130:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8002134:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002138:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800213c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002140:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8002144:	ed97 7a08 	vldr	s14, [r7, #32]
 8002148:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800214c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002150:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8002154:	ed97 7a07 	vldr	s14, [r7, #28]
 8002158:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800215c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002160:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8002164:	ed97 7a06 	vldr	s14, [r7, #24]
 8002168:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800216c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002170:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002174:	4b62      	ldr	r3, [pc, #392]	; (8002300 <MadgwickAHRSupdateIMU+0x634>)
 8002176:	ed93 7a00 	vldr	s14, [r3]
 800217a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800218a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 800218e:	4b5c      	ldr	r3, [pc, #368]	; (8002300 <MadgwickAHRSupdateIMU+0x634>)
 8002190:	ed93 7a00 	vldr	s14, [r3]
 8002194:	edd7 7a08 	vldr	s15, [r7, #32]
 8002198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80021a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 80021a8:	4b55      	ldr	r3, [pc, #340]	; (8002300 <MadgwickAHRSupdateIMU+0x634>)
 80021aa:	ed93 7a00 	vldr	s14, [r3]
 80021ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80021b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b6:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80021ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021be:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 80021c2:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <MadgwickAHRSupdateIMU+0x634>)
 80021c4:	ed93 7a00 	vldr	s14, [r3]
 80021c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80021cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80021d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80021dc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80021e0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002304 <MadgwickAHRSupdateIMU+0x638>
 80021e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021e8:	4b47      	ldr	r3, [pc, #284]	; (8002308 <MadgwickAHRSupdateIMU+0x63c>)
 80021ea:	edd3 7a00 	vldr	s15, [r3]
 80021ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f2:	4b45      	ldr	r3, [pc, #276]	; (8002308 <MadgwickAHRSupdateIMU+0x63c>)
 80021f4:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80021f8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80021fc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002304 <MadgwickAHRSupdateIMU+0x638>
 8002200:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002204:	4b41      	ldr	r3, [pc, #260]	; (800230c <MadgwickAHRSupdateIMU+0x640>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220e:	4b3f      	ldr	r3, [pc, #252]	; (800230c <MadgwickAHRSupdateIMU+0x640>)
 8002210:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002214:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002218:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002304 <MadgwickAHRSupdateIMU+0x638>
 800221c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002220:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <MadgwickAHRSupdateIMU+0x644>)
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222a:	4b39      	ldr	r3, [pc, #228]	; (8002310 <MadgwickAHRSupdateIMU+0x644>)
 800222c:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002230:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002234:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002304 <MadgwickAHRSupdateIMU+0x638>
 8002238:	ee27 7a87 	vmul.f32	s14, s15, s14
 800223c:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 800223e:	edd3 7a00 	vldr	s15, [r3]
 8002242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002246:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 8002248:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800224c:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <MadgwickAHRSupdateIMU+0x63c>)
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <MadgwickAHRSupdateIMU+0x63c>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <MadgwickAHRSupdateIMU+0x640>)
 800225e:	edd3 6a00 	vldr	s13, [r3]
 8002262:	4b2a      	ldr	r3, [pc, #168]	; (800230c <MadgwickAHRSupdateIMU+0x640>)
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800226c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <MadgwickAHRSupdateIMU+0x644>)
 8002272:	edd3 6a00 	vldr	s13, [r3]
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <MadgwickAHRSupdateIMU+0x644>)
 8002278:	edd3 7a00 	vldr	s15, [r3]
 800227c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002280:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 8002286:	edd3 6a00 	vldr	s13, [r3]
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002298:	eeb0 0a67 	vmov.f32	s0, s15
 800229c:	f000 f83a 	bl	8002314 <invSqrt>
 80022a0:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 80022a4:	4b18      	ldr	r3, [pc, #96]	; (8002308 <MadgwickAHRSupdateIMU+0x63c>)
 80022a6:	ed93 7a00 	vldr	s14, [r3]
 80022aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <MadgwickAHRSupdateIMU+0x63c>)
 80022b4:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <MadgwickAHRSupdateIMU+0x640>)
 80022ba:	ed93 7a00 	vldr	s14, [r3]
 80022be:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <MadgwickAHRSupdateIMU+0x640>)
 80022c8:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80022cc:	4b10      	ldr	r3, [pc, #64]	; (8002310 <MadgwickAHRSupdateIMU+0x644>)
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <MadgwickAHRSupdateIMU+0x644>)
 80022dc:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ee:	4b03      	ldr	r3, [pc, #12]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 80022f0:	edc3 7a00 	vstr	s15, [r3]
}
 80022f4:	bf00      	nop
 80022f6:	3770      	adds	r7, #112	; 0x70
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	2000021c 	.word	0x2000021c
 8002300:	20000000 	.word	0x20000000
 8002304:	3ba3d70a 	.word	0x3ba3d70a
 8002308:	20000004 	.word	0x20000004
 800230c:	20000214 	.word	0x20000214
 8002310:	20000218 	.word	0x20000218

08002314 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800231e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002322:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002326:	ee67 7a87 	vmul.f32	s15, s15, s14
 800232a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002332:	f107 0310 	add.w	r3, r7, #16
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	105a      	asrs	r2, r3, #1
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <invSqrt+0x74>)
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002344:	f107 030c 	add.w	r3, r7, #12
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800234c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002350:	edd7 7a05 	vldr	s15, [r7, #20]
 8002354:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002358:	edd7 7a04 	vldr	s15, [r7, #16]
 800235c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002360:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002364:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002368:	edd7 7a04 	vldr	s15, [r7, #16]
 800236c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002370:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	ee07 3a90 	vmov	s15, r3
}
 800237a:	eeb0 0a67 	vmov.f32	s0, s15
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	5f3759df 	.word	0x5f3759df

0800238c <nRF24_CE_H>:

static inline void nRF24_CE_L() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
}

static inline void nRF24_CE_H() {
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8002390:	2201      	movs	r2, #1
 8002392:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002396:	4802      	ldr	r0, [pc, #8]	; (80023a0 <nRF24_CE_H+0x14>)
 8002398:	f003 fbe2 	bl	8005b60 <HAL_GPIO_WritePin>
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40020c00 	.word	0x40020c00

080023a4 <nRF24SetChip>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void nRF24SetChip(){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	nRF24_Init();
 80023a8:	f001 ff75 	bl	8004296 <nRF24_Init>

	nRF24_DisableAA(0xFF);
 80023ac:	20ff      	movs	r0, #255	; 0xff
 80023ae:	f002 f927 	bl	8004600 <nRF24_DisableAA>
	nRF24_SetRFChannel(115);
 80023b2:	2073      	movs	r0, #115	; 0x73
 80023b4:	f002 f84b 	bl	800444e <nRF24_SetRFChannel>
	nRF24_SetDataRate(nRF24_DR_1Mbps);
 80023b8:	2000      	movs	r0, #0
 80023ba:	f002 f8b1 	bl	8004520 <nRF24_SetDataRate>
	nRF24_SetCRCScheme(nRF24_CRC_off);
 80023be:	2000      	movs	r0, #0
 80023c0:	f002 f824 	bl	800440c <nRF24_SetCRCScheme>
	nRF24_SetAddrWidth(3);
 80023c4:	2003      	movs	r0, #3
 80023c6:	f002 f850 	bl	800446a <nRF24_SetAddrWidth>

	static const uint8_t nRF24_ADDR[] = { 0xE7, 0x1C, 0xE3 };
	nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for RX pipe #1
 80023ca:	490b      	ldr	r1, [pc, #44]	; (80023f8 <nRF24SetChip+0x54>)
 80023cc:	2001      	movs	r0, #1
 80023ce:	f002 f85d 	bl	800448c <nRF24_SetAddr>
	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, payload_length); // Auto-ACK: disabled, payload length: 5 bytes
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <nRF24SetChip+0x58>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	2100      	movs	r1, #0
 80023dc:	2001      	movs	r0, #1
 80023de:	f002 f8bb 	bl	8004558 <nRF24_SetRXPipe>
	nRF24_SetOperationalMode(nRF24_MODE_RX);
 80023e2:	2001      	movs	r0, #1
 80023e4:	f001 fff1 	bl	80043ca <nRF24_SetOperationalMode>
	nRF24_SetPowerMode(nRF24_PWR_UP);
 80023e8:	2002      	movs	r0, #2
 80023ea:	f001 ffcf 	bl	800438c <nRF24_SetPowerMode>
	nRF24_CE_H();
 80023ee:	f7ff ffcd 	bl	800238c <nRF24_CE_H>
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	08014320 	.word	0x08014320
 80023fc:	20000008 	.word	0x20000008

08002400 <inicilizirajCipe>:

void inicilizirajCipe(){
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	__HAL_I2C_ENABLE(&hi2c1); //omogocimo I2C1 za komunikacijo z vgrajenimi cipi
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <inicilizirajCipe+0x70>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4b19      	ldr	r3, [pc, #100]	; (8002470 <inicilizirajCipe+0x70>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi1); //komunikacija gyro
 8002414:	4b17      	ldr	r3, [pc, #92]	; (8002474 <inicilizirajCipe+0x74>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <inicilizirajCipe+0x74>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002422:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi2); //komunikacija z nRF24
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <inicilizirajCipe+0x78>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <inicilizirajCipe+0x78>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002432:	601a      	str	r2, [r3, #0]
	HAL_Delay(50);
 8002434:	2032      	movs	r0, #50	; 0x32
 8002436:	f003 f8c1 	bl	80055bc <HAL_Delay>
	nRF24SetChip();
 800243a:	f7ff ffb3 	bl	80023a4 <nRF24SetChip>
	nastaviPospeskometer();
 800243e:	f002 fa85 	bl	800494c <nastaviPospeskometer>
	nastaviMagnetometer();
 8002442:	f002 faaa 	bl	800499a <nastaviMagnetometer>
	nastaviGiroskop();
 8002446:	f002 fac0 	bl	80049ca <nastaviGiroskop>
	//prvic preberi podatke da se generirajo interupti
	spi1_beriRegistre(0x28, (uint8_t*)&Gyro, 6);
 800244a:	2206      	movs	r2, #6
 800244c:	490b      	ldr	r1, [pc, #44]	; (800247c <inicilizirajCipe+0x7c>)
 800244e:	2028      	movs	r0, #40	; 0x28
 8002450:	f002 fa50 	bl	80048f4 <spi1_beriRegistre>
	i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&Acc, 6);
 8002454:	2306      	movs	r3, #6
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <inicilizirajCipe+0x80>)
 8002458:	2128      	movs	r1, #40	; 0x28
 800245a:	2019      	movs	r0, #25
 800245c:	f002 f9b2 	bl	80047c4 <i2c1_beriRegistre>
	i2c1_beriRegistre(0x1e, 0x68,(uint8_t*)&Mag, 6);
 8002460:	2306      	movs	r3, #6
 8002462:	4a08      	ldr	r2, [pc, #32]	; (8002484 <inicilizirajCipe+0x84>)
 8002464:	2168      	movs	r1, #104	; 0x68
 8002466:	201e      	movs	r0, #30
 8002468:	f002 f9ac 	bl	80047c4 <i2c1_beriRegistre>
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	200056f8 	.word	0x200056f8
 8002474:	2000584c 	.word	0x2000584c
 8002478:	200056a0 	.word	0x200056a0
 800247c:	2000538c 	.word	0x2000538c
 8002480:	2000533c 	.word	0x2000533c
 8002484:	200050e0 	.word	0x200050e0

08002488 <normalize_v3f>:



void normalize_v3f(float* x, float* y, float* z){
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
	float norm = sqrt( (*x) * (*x) + (*y) * (*y) + (*z) * (*z) );
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	ed93 7a00 	vldr	s14, [r3]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	edd3 6a00 	vldr	s13, [r3]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	edd3 6a00 	vldr	s13, [r3]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	edd3 7a00 	vldr	s15, [r3]
 80024c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024cc:	ee17 0a90 	vmov	r0, s15
 80024d0:	f7fd ffea 	bl	80004a8 <__aeabi_f2d>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	ec43 2b10 	vmov	d0, r2, r3
 80024dc:	f010 f924 	bl	8012728 <sqrt>
 80024e0:	ec53 2b10 	vmov	r2, r3, d0
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	f7fe fb0e 	bl	8000b08 <__aeabi_d2f>
 80024ec:	4603      	mov	r3, r0
 80024ee:	617b      	str	r3, [r7, #20]
	*x /= norm;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	edd3 6a00 	vldr	s13, [r3]
 80024f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80024fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	edc3 7a00 	vstr	s15, [r3]
	*y /= norm;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	edd3 6a00 	vldr	s13, [r3]
 800250a:	ed97 7a05 	vldr	s14, [r7, #20]
 800250e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	edc3 7a00 	vstr	s15, [r3]
	*z /= norm;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	edd3 6a00 	vldr	s13, [r3]
 800251e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	edc3 7a00 	vstr	s15, [r3]
}
 800252c:	bf00      	nop
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	0000      	movs	r0, r0
	...

08002538 <speedControl>:

void speedControl(struct motorData* m, float deltaT){
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	ed87 0a00 	vstr	s0, [r7]
	//premakni motor z zeljeno hitrostjo
	//izracunaj hitrost z tekocim povprecjem
	float vel = (float)((m->poz - m->prevPoz)/deltaT)/1000;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002556:	edd7 7a00 	vldr	s15, [r7]
 800255a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800255e:	eddf 6a9c 	vldr	s13, [pc, #624]	; 80027d0 <speedControl+0x298>
 8002562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002566:	edc7 7a03 	vstr	s15, [r7, #12]
	m->prevPoz = m->poz;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	605a      	str	r2, [r3, #4]
	m->sum =  m->sum + vel - m->vals[m->index]; //pristejemo trenutno vrednost in odstejemo zadnjo
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002578:	edd7 7a03 	vldr	s15, [r7, #12]
 800257c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	3306      	adds	r3, #6
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	3304      	adds	r3, #4
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	m->vals[m->index] = vel; //na zadnjo zamenjamo z novo
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	3306      	adds	r3, #6
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	3304      	adds	r3, #4
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	601a      	str	r2, [r3, #0]
	m->index++;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80025b8:	3301      	adds	r3, #1
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	if(m->index > 9){m->index = 0;}
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80025c8:	2b09      	cmp	r3, #9
 80025ca:	d903      	bls.n	80025d4 <speedControl+0x9c>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	vel = m->sum/10; //izracunamo povprecje
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80025da:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80025de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e2:	edc7 7a03 	vstr	s15, [r7, #12]

	if(m->targetVel < 0.05 && m->targetVel > -0.05){
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ff5c 	bl	80004a8 <__aeabi_f2d>
 80025f0:	a373      	add	r3, pc, #460	; (adr r3, 80027c0 <speedControl+0x288>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fe fa21 	bl	8000a3c <__aeabi_dcmplt>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d014      	beq.n	800262a <speedControl+0xf2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd ff4f 	bl	80004a8 <__aeabi_f2d>
 800260a:	a36f      	add	r3, pc, #444	; (adr r3, 80027c8 <speedControl+0x290>)
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	f7fe fa32 	bl	8000a78 <__aeabi_dcmpgt>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <speedControl+0xf2>
		m->targetVel = 0;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
		m->integralError = 0;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	619a      	str	r2, [r3, #24]
	}

	if(PID_CONTROL == 1){
		m->error = (m->targetVel) - vel;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002630:	edd7 7a03 	vldr	s15, [r7, #12]
 8002634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	edc3 7a04 	vstr	s15, [r3, #16]
		if(m->error > PID_P_LIMIT){m->error=PID_P_LIMIT;}
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	edd3 7a04 	vldr	s15, [r3, #16]
 8002644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002650:	dd03      	ble.n	800265a <speedControl+0x122>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002658:	611a      	str	r2, [r3, #16]
		if(m->error < -PID_P_LIMIT){m->error=-PID_P_LIMIT;}
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002660:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	d502      	bpl.n	8002674 <speedControl+0x13c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a58      	ldr	r2, [pc, #352]	; (80027d4 <speedControl+0x29c>)
 8002672:	611a      	str	r2, [r3, #16]

		m->integralError = m->integralError + m->error;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	ed93 7a06 	vldr	s14, [r3, #24]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	edc3 7a06 	vstr	s15, [r3, #24]
		if(m->integralError > PID_I_LIMIT){m->integralError = PID_I_LIMIT;}
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002690:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80027d8 <speedControl+0x2a0>
 8002694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269c:	dd02      	ble.n	80026a4 <speedControl+0x16c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4e      	ldr	r2, [pc, #312]	; (80027dc <speedControl+0x2a4>)
 80026a2:	619a      	str	r2, [r3, #24]
		if(m->integralError < -PID_I_LIMIT){m->integralError = -PID_I_LIMIT;}
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80026aa:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80027e0 <speedControl+0x2a8>
 80026ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b6:	d502      	bpl.n	80026be <speedControl+0x186>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a4a      	ldr	r2, [pc, #296]	; (80027e4 <speedControl+0x2ac>)
 80026bc:	619a      	str	r2, [r3, #24]

		float deltaE = 0.0f;
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
		if((m->error - m->prevError)>0.01f && (m->error - m->prevError)<-0.01f){deltaE=((m->error - m->prevError)/deltaT);}
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	ed93 7a04 	vldr	s14, [r3, #16]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80026d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80027e8 <speedControl+0x2b0>
 80026d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e0:	dd1c      	ble.n	800271c <speedControl+0x1e4>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	ed93 7a04 	vldr	s14, [r3, #16]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80026ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80027ec <speedControl+0x2b4>
 80026f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fe:	d50d      	bpl.n	800271c <speedControl+0x1e4>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	ed93 7a04 	vldr	s14, [r3, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	edd3 7a05 	vldr	s15, [r3, #20]
 800270c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002710:	ed97 7a00 	vldr	s14, [r7]
 8002714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002718:	edc7 7a05 	vstr	s15, [r7, #20]
		m->prevError = m->error;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	615a      	str	r2, [r3, #20]

		float power = PID_P*m->error + PID_I*m->integralError + PID_D*deltaE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	edd3 7a04 	vldr	s15, [r3, #16]
 800272a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80027f0 <speedControl+0x2b8>
 800272e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	edd3 7a06 	vldr	s15, [r3, #24]
 8002738:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80027f4 <speedControl+0x2bc>
 800273c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002740:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002744:	edd7 7a05 	vldr	s15, [r7, #20]
 8002748:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80027f8 <speedControl+0x2c0>
 800274c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002754:	edc7 7a04 	vstr	s15, [r7, #16]
		if(power > PID_LIMIT){power = PID_LIMIT;}
 8002758:	edd7 7a04 	vldr	s15, [r7, #16]
 800275c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002768:	dd02      	ble.n	8002770 <speedControl+0x238>
 800276a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800276e:	613b      	str	r3, [r7, #16]
		if(power < -PID_LIMIT){power = -PID_LIMIT;}
 8002770:	edd7 7a04 	vldr	s15, [r7, #16]
 8002774:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	d501      	bpl.n	8002786 <speedControl+0x24e>
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <speedControl+0x29c>)
 8002784:	613b      	str	r3, [r7, #16]
		nastaviMotor(m->num,zgladiMotor(m->num,scalePwm(power)));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	7a1c      	ldrb	r4, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	7a1b      	ldrb	r3, [r3, #8]
 800278e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002792:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80027d0 <speedControl+0x298>
 8002796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800279a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800279e:	ee17 2a90 	vmov	r2, s15
 80027a2:	b212      	sxth	r2, r2
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 fb56 	bl	8004e58 <zgladiMotor>
 80027ac:	4603      	mov	r3, r0
 80027ae:	4619      	mov	r1, r3
 80027b0:	4620      	mov	r0, r4
 80027b2:	f002 f9a1 	bl	8004af8 <nastaviMotor>
	}
	else{
		int Pwm = zgladiMotor(m->num,scalePwm(m->targetVel));
		nastaviMotor(m->num,Pwm);
	}
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd90      	pop	{r4, r7, pc}
 80027be:	bf00      	nop
 80027c0:	9999999a 	.word	0x9999999a
 80027c4:	3fa99999 	.word	0x3fa99999
 80027c8:	9999999a 	.word	0x9999999a
 80027cc:	bfa99999 	.word	0xbfa99999
 80027d0:	447a0000 	.word	0x447a0000
 80027d4:	bf800000 	.word	0xbf800000
 80027d8:	42480000 	.word	0x42480000
 80027dc:	42480000 	.word	0x42480000
 80027e0:	c2480000 	.word	0xc2480000
 80027e4:	c2480000 	.word	0xc2480000
 80027e8:	3c23d70a 	.word	0x3c23d70a
 80027ec:	bc23d70a 	.word	0xbc23d70a
 80027f0:	3f4ccccd 	.word	0x3f4ccccd
 80027f4:	3ca3d70a 	.word	0x3ca3d70a
 80027f8:	3dcccccd 	.word	0x3dcccccd

080027fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002800:	f002 fe9a 	bl	8005538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002804:	f000 f91c 	bl	8002a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002808:	f000 fb9a 	bl	8002f40 <MX_GPIO_Init>
  MX_I2C1_Init();
 800280c:	f000 f980 	bl	8002b10 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002810:	f000 f9da 	bl	8002bc8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002814:	f000 fa44 	bl	8002ca0 <MX_TIM2_Init>
  MX_SPI2_Init();
 8002818:	f000 fa0c 	bl	8002c34 <MX_SPI2_Init>
  MX_TIM5_Init();
 800281c:	f000 fb42 	bl	8002ea4 <MX_TIM5_Init>
  MX_TIM3_Init();
 8002820:	f000 faca 	bl	8002db8 <MX_TIM3_Init>
  MX_I2C3_Init();
 8002824:	f000 f9a2 	bl	8002b6c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  //!--ce generator kode inicilizira DMA zadnje pomakni funkcijo visje da se incilizira prvo

  //iniciliziraj komunikacijo in senzorje
  HAL_Delay(100);
 8002828:	2064      	movs	r0, #100	; 0x64
 800282a:	f002 fec7 	bl	80055bc <HAL_Delay>
  inicilizirajCipe();
 800282e:	f7ff fde7 	bl	8002400 <inicilizirajCipe>
  nRF24_status = nRF24_Check();
 8002832:	f001 fd7d 	bl	8004330 <nRF24_Check>
 8002836:	4603      	mov	r3, r0
 8002838:	461a      	mov	r2, r3
 800283a:	4b65      	ldr	r3, [pc, #404]	; (80029d0 <main+0x1d4>)
 800283c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,nRF24_status); //ce dela prizgi ledico
 800283e:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <main+0x1d4>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800284a:	4862      	ldr	r0, [pc, #392]	; (80029d4 <main+0x1d8>)
 800284c:	f003 f988 	bl	8005b60 <HAL_GPIO_WritePin>

  B1.flags = 0;
 8002850:	4b61      	ldr	r3, [pc, #388]	; (80029d8 <main+0x1dc>)
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
  B1.presedConf = 0;
 8002856:	4b60      	ldr	r3, [pc, #384]	; (80029d8 <main+0x1dc>)
 8002858:	2200      	movs	r2, #0
 800285a:	605a      	str	r2, [r3, #4]
  B1.relesedConf = 0;
 800285c:	4b5e      	ldr	r3, [pc, #376]	; (80029d8 <main+0x1dc>)
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  B1.port = GPIOA;
 8002862:	4b5d      	ldr	r3, [pc, #372]	; (80029d8 <main+0x1dc>)
 8002864:	4a5d      	ldr	r2, [pc, #372]	; (80029dc <main+0x1e0>)
 8002866:	60da      	str	r2, [r3, #12]
  B1.pin = GPIO_PIN_0;
 8002868:	4b5b      	ldr	r3, [pc, #364]	; (80029d8 <main+0x1dc>)
 800286a:	2201      	movs	r2, #1
 800286c:	821a      	strh	r2, [r3, #16]
  B1.debaunceCycles = 10;
 800286e:	4b5a      	ldr	r3, [pc, #360]	; (80029d8 <main+0x1dc>)
 8002870:	220a      	movs	r2, #10
 8002872:	825a      	strh	r2, [r3, #18]
  B1.presses = 0;
 8002874:	4b58      	ldr	r3, [pc, #352]	; (80029d8 <main+0x1dc>)
 8002876:	2200      	movs	r2, #0
 8002878:	751a      	strb	r2, [r3, #20]

  HAL_TIM_Base_Start(&htim2);
 800287a:	4859      	ldr	r0, [pc, #356]	; (80029e0 <main+0x1e4>)
 800287c:	f008 fbac 	bl	800afd8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8002880:	4858      	ldr	r0, [pc, #352]	; (80029e4 <main+0x1e8>)
 8002882:	f008 fba9 	bl	800afd8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8002886:	4858      	ldr	r0, [pc, #352]	; (80029e8 <main+0x1ec>)
 8002888:	f008 fba6 	bl	800afd8 <HAL_TIM_Base_Start>
  // zazenemo PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800288c:	210c      	movs	r1, #12
 800288e:	4855      	ldr	r0, [pc, #340]	; (80029e4 <main+0x1e8>)
 8002890:	f008 fcb8 	bl	800b204 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002894:	2104      	movs	r1, #4
 8002896:	4852      	ldr	r0, [pc, #328]	; (80029e0 <main+0x1e4>)
 8002898:	f008 fcb4 	bl	800b204 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800289c:	2108      	movs	r1, #8
 800289e:	4850      	ldr	r0, [pc, #320]	; (80029e0 <main+0x1e4>)
 80028a0:	f008 fcb0 	bl	800b204 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80028a4:	210c      	movs	r1, #12
 80028a6:	484e      	ldr	r0, [pc, #312]	; (80029e0 <main+0x1e4>)
 80028a8:	f008 fcac 	bl	800b204 <HAL_TIM_PWM_Start>

  robotPay.x1 = 0; //nastavimo na srednje vrednosti
 80028ac:	4b4f      	ldr	r3, [pc, #316]	; (80029ec <main+0x1f0>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
  robotPay.x2 = 0;
 80028b2:	4b4e      	ldr	r3, [pc, #312]	; (80029ec <main+0x1f0>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	709a      	strb	r2, [r3, #2]
  robotPay.y1 = 0;
 80028b8:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <main+0x1f0>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	705a      	strb	r2, [r3, #1]
  robotPay.y2 = 0;
 80028be:	4b4b      	ldr	r3, [pc, #300]	; (80029ec <main+0x1f0>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	70da      	strb	r2, [r3, #3]
  robotPay.speed = 100;
 80028c4:	4b49      	ldr	r3, [pc, #292]	; (80029ec <main+0x1f0>)
 80028c6:	2264      	movs	r2, #100	; 0x64
 80028c8:	711a      	strb	r2, [r3, #4]

  nastaviMotor(RF,0);
 80028ca:	2100      	movs	r1, #0
 80028cc:	2000      	movs	r0, #0
 80028ce:	f002 f913 	bl	8004af8 <nastaviMotor>
  nastaviMotor(LF,0);
 80028d2:	2100      	movs	r1, #0
 80028d4:	2003      	movs	r0, #3
 80028d6:	f002 f90f 	bl	8004af8 <nastaviMotor>
  nastaviMotor(LB,0);
 80028da:	2100      	movs	r1, #0
 80028dc:	2002      	movs	r0, #2
 80028de:	f002 f90b 	bl	8004af8 <nastaviMotor>
  nastaviMotor(RB,0);
 80028e2:	2100      	movs	r1, #0
 80028e4:	2001      	movs	r0, #1
 80028e6:	f002 f907 	bl	8004af8 <nastaviMotor>


  motorLF.num = LF;
 80028ea:	4b41      	ldr	r3, [pc, #260]	; (80029f0 <main+0x1f4>)
 80028ec:	2203      	movs	r2, #3
 80028ee:	721a      	strb	r2, [r3, #8]
  motorLB.num = LB;
 80028f0:	4b40      	ldr	r3, [pc, #256]	; (80029f4 <main+0x1f8>)
 80028f2:	2202      	movs	r2, #2
 80028f4:	721a      	strb	r2, [r3, #8]
  motorRB.num = RB;
 80028f6:	4b40      	ldr	r3, [pc, #256]	; (80029f8 <main+0x1fc>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	721a      	strb	r2, [r3, #8]
  motorRF.num = RF;
 80028fc:	4b3f      	ldr	r3, [pc, #252]	; (80029fc <main+0x200>)
 80028fe:	2200      	movs	r2, #0
 8002900:	721a      	strb	r2, [r3, #8]

  E.Accx = 0;
 8002902:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <main+0x204>)
 8002904:	2200      	movs	r2, #0
 8002906:	841a      	strh	r2, [r3, #32]
  E.Accy = 0;
 8002908:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <main+0x204>)
 800290a:	2200      	movs	r2, #0
 800290c:	845a      	strh	r2, [r3, #34]	; 0x22
  E.Accz = 0;
 800290e:	4b3c      	ldr	r3, [pc, #240]	; (8002a00 <main+0x204>)
 8002910:	2200      	movs	r2, #0
 8002912:	849a      	strh	r2, [r3, #36]	; 0x24
  E.Gyrox = 0;
 8002914:	4b3a      	ldr	r3, [pc, #232]	; (8002a00 <main+0x204>)
 8002916:	2200      	movs	r2, #0
 8002918:	801a      	strh	r2, [r3, #0]
  E.Gyroy = 0;
 800291a:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <main+0x204>)
 800291c:	2200      	movs	r2, #0
 800291e:	805a      	strh	r2, [r3, #2]
  E.Gyroz = 0;
 8002920:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <main+0x204>)
 8002922:	2200      	movs	r2, #0
 8002924:	809a      	strh	r2, [r3, #4]
  E.HardIronMagx = 0;
 8002926:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <main+0x204>)
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  E.HardIronMagy = 0;
 800292e:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <main+0x204>)
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	60da      	str	r2, [r3, #12]
  E.HardIronMagz = 0;
 8002936:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <main+0x204>)
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	611a      	str	r2, [r3, #16]
  E.SoftIronMagx = 1;
 800293e:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <main+0x204>)
 8002940:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002944:	615a      	str	r2, [r3, #20]
  E.SoftIronMagy = 1;
 8002946:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <main+0x204>)
 8002948:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800294c:	619a      	str	r2, [r3, #24]
  E.SoftIronMagz = 1;
 800294e:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <main+0x204>)
 8002950:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002954:	61da      	str	r2, [r3, #28]

  P.pozX = 0;
 8002956:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <main+0x208>)
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	621a      	str	r2, [r3, #32]
  P.pozY = 0;
 800295e:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <main+0x208>)
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	625a      	str	r2, [r3, #36]	; 0x24

  getDrift();
 8002966:	f002 f9d3 	bl	8004d10 <getDrift>

  __HAL_I2C_ENABLE(&hi2c3);
 800296a:	4b27      	ldr	r3, [pc, #156]	; (8002a08 <main+0x20c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <main+0x20c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0201 	orr.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]
  HAL_Delay(100);
 800297a:	2064      	movs	r0, #100	; 0x64
 800297c:	f002 fe1e 	bl	80055bc <HAL_Delay>
  activateRasbetyPI = 1;
 8002980:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <main+0x210>)
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
  //HAL_SPI_TransmitReceive_DMA(&hspi5, SpiTxData, SpiRxData, SPI_BUFFER_SIZE);
  //HAL_SPI_TransmitReceive_DMA(&hspi5, SpiTxData, SpiRxData, 2); //beremo po dva
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002986:	f00c fb43 	bl	800f010 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CalculatePoz */
  CalculatePozHandle = osThreadNew(StartCalculatingPoz, NULL, &CalculatePoz_attributes);
 800298a:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <main+0x214>)
 800298c:	2100      	movs	r1, #0
 800298e:	4821      	ldr	r0, [pc, #132]	; (8002a14 <main+0x218>)
 8002990:	f00c fb88 	bl	800f0a4 <osThreadNew>
 8002994:	4603      	mov	r3, r0
 8002996:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <main+0x21c>)
 8002998:	6013      	str	r3, [r2, #0]

  /* creation of ReciveCommandsN */
  ReciveCommandsNHandle = osThreadNew(StartRecivingCommandsNRF24, NULL, &ReciveCommandsN_attributes);
 800299a:	4a20      	ldr	r2, [pc, #128]	; (8002a1c <main+0x220>)
 800299c:	2100      	movs	r1, #0
 800299e:	4820      	ldr	r0, [pc, #128]	; (8002a20 <main+0x224>)
 80029a0:	f00c fb80 	bl	800f0a4 <osThreadNew>
 80029a4:	4603      	mov	r3, r0
 80029a6:	4a1f      	ldr	r2, [pc, #124]	; (8002a24 <main+0x228>)
 80029a8:	6013      	str	r3, [r2, #0]

  /* creation of MotorControl */
  MotorControlHandle = osThreadNew(StartMotorControl, NULL, &MotorControl_attributes);
 80029aa:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <main+0x22c>)
 80029ac:	2100      	movs	r1, #0
 80029ae:	481f      	ldr	r0, [pc, #124]	; (8002a2c <main+0x230>)
 80029b0:	f00c fb78 	bl	800f0a4 <osThreadNew>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <main+0x234>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* creation of calculatePath */
  calculatePathHandle = osThreadNew(StartCalculatingPath, NULL, &calculatePath_attributes);
 80029ba:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <main+0x238>)
 80029bc:	2100      	movs	r1, #0
 80029be:	481e      	ldr	r0, [pc, #120]	; (8002a38 <main+0x23c>)
 80029c0:	f00c fb70 	bl	800f0a4 <osThreadNew>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <main+0x240>)
 80029c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80029ca:	f00c fb45 	bl	800f058 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029ce:	e7fe      	b.n	80029ce <main+0x1d2>
 80029d0:	20000221 	.word	0x20000221
 80029d4:	40020c00 	.word	0x40020c00
 80029d8:	20005374 	.word	0x20005374
 80029dc:	40020000 	.word	0x40020000
 80029e0:	200058a4 	.word	0x200058a4
 80029e4:	20005794 	.word	0x20005794
 80029e8:	2000574c 	.word	0x2000574c
 80029ec:	20004f8c 	.word	0x20004f8c
 80029f0:	200051f0 	.word	0x200051f0
 80029f4:	20005014 	.word	0x20005014
 80029f8:	20005494 	.word	0x20005494
 80029fc:	20005560 	.word	0x20005560
 8002a00:	2000534c 	.word	0x2000534c
 8002a04:	200055ac 	.word	0x200055ac
 8002a08:	20005648 	.word	0x20005648
 8002a0c:	2000023c 	.word	0x2000023c
 8002a10:	08014290 	.word	0x08014290
 8002a14:	08003469 	.word	0x08003469
 8002a18:	200055e0 	.word	0x200055e0
 8002a1c:	080142b4 	.word	0x080142b4
 8002a20:	08003c71 	.word	0x08003c71
 8002a24:	200057e0 	.word	0x200057e0
 8002a28:	080142d8 	.word	0x080142d8
 8002a2c:	08003e41 	.word	0x08003e41
 8002a30:	2000569c 	.word	0x2000569c
 8002a34:	080142fc 	.word	0x080142fc
 8002a38:	08003f11 	.word	0x08003f11
 8002a3c:	200057e4 	.word	0x200057e4

08002a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b094      	sub	sp, #80	; 0x50
 8002a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a46:	f107 0320 	add.w	r3, r7, #32
 8002a4a:	2230      	movs	r2, #48	; 0x30
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f00f fd82 	bl	8012558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <SystemClock_Config+0xc8>)
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	4a26      	ldr	r2, [pc, #152]	; (8002b08 <SystemClock_Config+0xc8>)
 8002a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6413      	str	r3, [r2, #64]	; 0x40
 8002a74:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <SystemClock_Config+0xc8>)
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a80:	2300      	movs	r3, #0
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <SystemClock_Config+0xcc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a20      	ldr	r2, [pc, #128]	; (8002b0c <SystemClock_Config+0xcc>)
 8002a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <SystemClock_Config+0xcc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002ab4:	23a8      	movs	r3, #168	; 0xa8
 8002ab6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002ab8:	2304      	movs	r3, #4
 8002aba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002abc:	2307      	movs	r3, #7
 8002abe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ac0:	f107 0320 	add.w	r3, r7, #32
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f006 ffe9 	bl	8009a9c <HAL_RCC_OscConfig>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ad0:	f001 fadc 	bl	800408c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ad4:	230f      	movs	r3, #15
 8002ad6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002aea:	f107 030c 	add.w	r3, r7, #12
 8002aee:	2102      	movs	r1, #2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f007 fa4b 	bl	8009f8c <HAL_RCC_ClockConfig>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002afc:	f001 fac6 	bl	800408c <Error_Handler>
  }
}
 8002b00:	bf00      	nop
 8002b02:	3750      	adds	r7, #80	; 0x50
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40007000 	.word	0x40007000

08002b10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <MX_I2C1_Init+0x50>)
 8002b16:	4a13      	ldr	r2, [pc, #76]	; (8002b64 <MX_I2C1_Init+0x54>)
 8002b18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <MX_I2C1_Init+0x50>)
 8002b1c:	4a12      	ldr	r2, [pc, #72]	; (8002b68 <MX_I2C1_Init+0x58>)
 8002b1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <MX_I2C1_Init+0x50>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <MX_I2C1_Init+0x50>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <MX_I2C1_Init+0x50>)
 8002b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <MX_I2C1_Init+0x50>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <MX_I2C1_Init+0x50>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b40:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <MX_I2C1_Init+0x50>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <MX_I2C1_Init+0x50>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b4c:	4804      	ldr	r0, [pc, #16]	; (8002b60 <MX_I2C1_Init+0x50>)
 8002b4e:	f003 f853 	bl	8005bf8 <HAL_I2C_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b58:	f001 fa98 	bl	800408c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	200056f8 	.word	0x200056f8
 8002b64:	40005400 	.word	0x40005400
 8002b68:	00061a80 	.word	0x00061a80

08002b6c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <MX_I2C3_Init+0x50>)
 8002b72:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <MX_I2C3_Init+0x54>)
 8002b74:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <MX_I2C3_Init+0x50>)
 8002b78:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <MX_I2C3_Init+0x58>)
 8002b7a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <MX_I2C3_Init+0x50>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <MX_I2C3_Init+0x50>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <MX_I2C3_Init+0x50>)
 8002b8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b8e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b90:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <MX_I2C3_Init+0x50>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <MX_I2C3_Init+0x50>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b9c:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <MX_I2C3_Init+0x50>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <MX_I2C3_Init+0x50>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002ba8:	4804      	ldr	r0, [pc, #16]	; (8002bbc <MX_I2C3_Init+0x50>)
 8002baa:	f003 f825 	bl	8005bf8 <HAL_I2C_Init>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002bb4:	f001 fa6a 	bl	800408c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20005648 	.word	0x20005648
 8002bc0:	40005c00 	.word	0x40005c00
 8002bc4:	000186a0 	.word	0x000186a0

08002bc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002bcc:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002bce:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <MX_SPI1_Init+0x68>)
 8002bd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002bd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bda:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002bfc:	2218      	movs	r2, #24
 8002bfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c0c:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002c14:	220a      	movs	r2, #10
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c18:	4804      	ldr	r0, [pc, #16]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002c1a:	f007 fbe5 	bl	800a3e8 <HAL_SPI_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c24:	f001 fa32 	bl	800408c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	2000584c 	.word	0x2000584c
 8002c30:	40013000 	.word	0x40013000

08002c34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c38:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c3a:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <MX_SPI2_Init+0x68>)
 8002c3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c3e:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c4c:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c64:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c78:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c80:	220a      	movs	r2, #10
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c84:	4804      	ldr	r0, [pc, #16]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c86:	f007 fbaf 	bl	800a3e8 <HAL_SPI_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002c90:	f001 f9fc 	bl	800408c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	200056a0 	.word	0x200056a0
 8002c9c:	40003800 	.word	0x40003800

08002ca0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	; 0x38
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb4:	f107 0320 	add.w	r3, r7, #32
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cbe:	1d3b      	adds	r3, r7, #4
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]
 8002ccc:	615a      	str	r2, [r3, #20]
 8002cce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cd0:	4b38      	ldr	r3, [pc, #224]	; (8002db4 <MX_TIM2_Init+0x114>)
 8002cd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002cd8:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <MX_TIM2_Init+0x114>)
 8002cda:	2253      	movs	r2, #83	; 0x53
 8002cdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cde:	4b35      	ldr	r3, [pc, #212]	; (8002db4 <MX_TIM2_Init+0x114>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002ce4:	4b33      	ldr	r3, [pc, #204]	; (8002db4 <MX_TIM2_Init+0x114>)
 8002ce6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cec:	4b31      	ldr	r3, [pc, #196]	; (8002db4 <MX_TIM2_Init+0x114>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cf2:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <MX_TIM2_Init+0x114>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cf8:	482e      	ldr	r0, [pc, #184]	; (8002db4 <MX_TIM2_Init+0x114>)
 8002cfa:	f008 f91d 	bl	800af38 <HAL_TIM_Base_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002d04:	f001 f9c2 	bl	800408c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d12:	4619      	mov	r1, r3
 8002d14:	4827      	ldr	r0, [pc, #156]	; (8002db4 <MX_TIM2_Init+0x114>)
 8002d16:	f008 fcef 	bl	800b6f8 <HAL_TIM_ConfigClockSource>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002d20:	f001 f9b4 	bl	800408c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d24:	4823      	ldr	r0, [pc, #140]	; (8002db4 <MX_TIM2_Init+0x114>)
 8002d26:	f008 fa13 	bl	800b150 <HAL_TIM_PWM_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002d30:	f001 f9ac 	bl	800408c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d34:	2300      	movs	r3, #0
 8002d36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d3c:	f107 0320 	add.w	r3, r7, #32
 8002d40:	4619      	mov	r1, r3
 8002d42:	481c      	ldr	r0, [pc, #112]	; (8002db4 <MX_TIM2_Init+0x114>)
 8002d44:	f009 f894 	bl	800be70 <HAL_TIMEx_MasterConfigSynchronization>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002d4e:	f001 f99d 	bl	800408c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d52:	2360      	movs	r3, #96	; 0x60
 8002d54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	2204      	movs	r2, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4812      	ldr	r0, [pc, #72]	; (8002db4 <MX_TIM2_Init+0x114>)
 8002d6a:	f008 fc03 	bl	800b574 <HAL_TIM_PWM_ConfigChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002d74:	f001 f98a 	bl	800408c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	480d      	ldr	r0, [pc, #52]	; (8002db4 <MX_TIM2_Init+0x114>)
 8002d80:	f008 fbf8 	bl	800b574 <HAL_TIM_PWM_ConfigChannel>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002d8a:	f001 f97f 	bl	800408c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d8e:	1d3b      	adds	r3, r7, #4
 8002d90:	220c      	movs	r2, #12
 8002d92:	4619      	mov	r1, r3
 8002d94:	4807      	ldr	r0, [pc, #28]	; (8002db4 <MX_TIM2_Init+0x114>)
 8002d96:	f008 fbed 	bl	800b574 <HAL_TIM_PWM_ConfigChannel>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002da0:	f001 f974 	bl	800408c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002da4:	4803      	ldr	r0, [pc, #12]	; (8002db4 <MX_TIM2_Init+0x114>)
 8002da6:	f002 fa5f 	bl	8005268 <HAL_TIM_MspPostInit>

}
 8002daa:	bf00      	nop
 8002dac:	3738      	adds	r7, #56	; 0x38
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	200058a4 	.word	0x200058a4

08002db8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08e      	sub	sp, #56	; 0x38
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dcc:	f107 0320 	add.w	r3, r7, #32
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
 8002de4:	615a      	str	r2, [r3, #20]
 8002de6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002de8:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <MX_TIM3_Init+0xe4>)
 8002dea:	4a2d      	ldr	r2, [pc, #180]	; (8002ea0 <MX_TIM3_Init+0xe8>)
 8002dec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8002dee:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <MX_TIM3_Init+0xe4>)
 8002df0:	2254      	movs	r2, #84	; 0x54
 8002df2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df4:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <MX_TIM3_Init+0xe4>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002dfa:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <MX_TIM3_Init+0xe4>)
 8002dfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e02:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <MX_TIM3_Init+0xe4>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e08:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <MX_TIM3_Init+0xe4>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e0e:	4823      	ldr	r0, [pc, #140]	; (8002e9c <MX_TIM3_Init+0xe4>)
 8002e10:	f008 f892 	bl	800af38 <HAL_TIM_Base_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002e1a:	f001 f937 	bl	800408c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e28:	4619      	mov	r1, r3
 8002e2a:	481c      	ldr	r0, [pc, #112]	; (8002e9c <MX_TIM3_Init+0xe4>)
 8002e2c:	f008 fc64 	bl	800b6f8 <HAL_TIM_ConfigClockSource>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002e36:	f001 f929 	bl	800408c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e3a:	4818      	ldr	r0, [pc, #96]	; (8002e9c <MX_TIM3_Init+0xe4>)
 8002e3c:	f008 f988 	bl	800b150 <HAL_TIM_PWM_Init>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002e46:	f001 f921 	bl	800408c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e52:	f107 0320 	add.w	r3, r7, #32
 8002e56:	4619      	mov	r1, r3
 8002e58:	4810      	ldr	r0, [pc, #64]	; (8002e9c <MX_TIM3_Init+0xe4>)
 8002e5a:	f009 f809 	bl	800be70 <HAL_TIMEx_MasterConfigSynchronization>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002e64:	f001 f912 	bl	800408c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e68:	2360      	movs	r3, #96	; 0x60
 8002e6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4807      	ldr	r0, [pc, #28]	; (8002e9c <MX_TIM3_Init+0xe4>)
 8002e80:	f008 fb78 	bl	800b574 <HAL_TIM_PWM_ConfigChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002e8a:	f001 f8ff 	bl	800408c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e8e:	4803      	ldr	r0, [pc, #12]	; (8002e9c <MX_TIM3_Init+0xe4>)
 8002e90:	f002 f9ea 	bl	8005268 <HAL_TIM_MspPostInit>

}
 8002e94:	bf00      	nop
 8002e96:	3738      	adds	r7, #56	; 0x38
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20005794 	.word	0x20005794
 8002ea0:	40000400 	.word	0x40000400

08002ea4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eaa:	f107 0308 	add.w	r3, r7, #8
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb8:	463b      	mov	r3, r7
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <MX_TIM5_Init+0x94>)
 8002ec2:	4a1e      	ldr	r2, [pc, #120]	; (8002f3c <MX_TIM5_Init+0x98>)
 8002ec4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <MX_TIM5_Init+0x94>)
 8002ec8:	2253      	movs	r2, #83	; 0x53
 8002eca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ecc:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <MX_TIM5_Init+0x94>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002ed2:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <MX_TIM5_Init+0x94>)
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <MX_TIM5_Init+0x94>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee0:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <MX_TIM5_Init+0x94>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002ee6:	4814      	ldr	r0, [pc, #80]	; (8002f38 <MX_TIM5_Init+0x94>)
 8002ee8:	f008 f826 	bl	800af38 <HAL_TIM_Base_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002ef2:	f001 f8cb 	bl	800408c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002efa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002efc:	f107 0308 	add.w	r3, r7, #8
 8002f00:	4619      	mov	r1, r3
 8002f02:	480d      	ldr	r0, [pc, #52]	; (8002f38 <MX_TIM5_Init+0x94>)
 8002f04:	f008 fbf8 	bl	800b6f8 <HAL_TIM_ConfigClockSource>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002f0e:	f001 f8bd 	bl	800408c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f1a:	463b      	mov	r3, r7
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4806      	ldr	r0, [pc, #24]	; (8002f38 <MX_TIM5_Init+0x94>)
 8002f20:	f008 ffa6 	bl	800be70 <HAL_TIMEx_MasterConfigSynchronization>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002f2a:	f001 f8af 	bl	800408c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	2000574c 	.word	0x2000574c
 8002f3c:	40000c00 	.word	0x40000c00

08002f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08c      	sub	sp, #48	; 0x30
 8002f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f46:	f107 031c 	add.w	r3, r7, #28
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	60da      	str	r2, [r3, #12]
 8002f54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	4bb7      	ldr	r3, [pc, #732]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4ab6      	ldr	r2, [pc, #728]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002f60:	f043 0310 	orr.w	r3, r3, #16
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4bb4      	ldr	r3, [pc, #720]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	4bb0      	ldr	r3, [pc, #704]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	4aaf      	ldr	r2, [pc, #700]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002f7c:	f043 0304 	orr.w	r3, r3, #4
 8002f80:	6313      	str	r3, [r2, #48]	; 0x30
 8002f82:	4bad      	ldr	r3, [pc, #692]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	4ba9      	ldr	r3, [pc, #676]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	4aa8      	ldr	r2, [pc, #672]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9e:	4ba6      	ldr	r3, [pc, #664]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	4ba2      	ldr	r3, [pc, #648]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4aa1      	ldr	r2, [pc, #644]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b9f      	ldr	r3, [pc, #636]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	4b9b      	ldr	r3, [pc, #620]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a9a      	ldr	r2, [pc, #616]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002fd0:	f043 0302 	orr.w	r3, r3, #2
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	4b98      	ldr	r3, [pc, #608]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	4b94      	ldr	r3, [pc, #592]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a93      	ldr	r2, [pc, #588]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002fec:	f043 0308 	orr.w	r3, r3, #8
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b91      	ldr	r3, [pc, #580]	; (8003238 <MX_GPIO_Init+0x2f8>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_SPI1_Pin|mf_lf_Pin|mb_lf_Pin|GPIO_PIN_9
 8002ffe:	2200      	movs	r2, #0
 8003000:	f647 7188 	movw	r1, #32648	; 0x7f88
 8003004:	488d      	ldr	r0, [pc, #564]	; (800323c <MX_GPIO_Init+0x2fc>)
 8003006:	f002 fdab 	bl	8005b60 <HAL_GPIO_WritePin>
                          |mb_rb_Pin|GPIO_PIN_11|mf_rb_Pin|GPIO_PIN_13
                          |mb_lb_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800300a:	2201      	movs	r2, #1
 800300c:	2101      	movs	r1, #1
 800300e:	488c      	ldr	r0, [pc, #560]	; (8003240 <MX_GPIO_Init+0x300>)
 8003010:	f002 fda6 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8003014:	2200      	movs	r2, #0
 8003016:	2104      	movs	r1, #4
 8003018:	488a      	ldr	r0, [pc, #552]	; (8003244 <MX_GPIO_Init+0x304>)
 800301a:	f002 fda1 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, NRF_CSN_Pin|NRF_CE_Pin|LD4_Pin|LD3_Pin
 800301e:	2200      	movs	r2, #0
 8003020:	f24f 3113 	movw	r1, #62227	; 0xf313
 8003024:	4888      	ldr	r0, [pc, #544]	; (8003248 <MX_GPIO_Init+0x308>)
 8003026:	f002 fd9b 	bl	8005b60 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|CE1_SPI5_Pin|CSN1_SPI5_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_1;
 800302a:	2316      	movs	r3, #22
 800302c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800302e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003038:	f107 031c 	add.w	r3, r7, #28
 800303c:	4619      	mov	r1, r3
 800303e:	487f      	ldr	r0, [pc, #508]	; (800323c <MX_GPIO_Init+0x2fc>)
 8003040:	f002 fbf2 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SPI1_Pin */
  GPIO_InitStruct.Pin = CS_SPI1_Pin;
 8003044:	2308      	movs	r3, #8
 8003046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003048:	2301      	movs	r3, #1
 800304a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003050:	2302      	movs	r3, #2
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_SPI1_GPIO_Port, &GPIO_InitStruct);
 8003054:	f107 031c 	add.w	r3, r7, #28
 8003058:	4619      	mov	r1, r3
 800305a:	4878      	ldr	r0, [pc, #480]	; (800323c <MX_GPIO_Init+0x2fc>)
 800305c:	f002 fbe4 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003060:	2301      	movs	r3, #1
 8003062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003064:	2301      	movs	r3, #1
 8003066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	2300      	movs	r3, #0
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003070:	f107 031c 	add.w	r3, r7, #28
 8003074:	4619      	mov	r1, r3
 8003076:	4872      	ldr	r0, [pc, #456]	; (8003240 <MX_GPIO_Init+0x300>)
 8003078:	f002 fbd6 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800307c:	2308      	movs	r3, #8
 800307e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003080:	2302      	movs	r3, #2
 8003082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003088:	2300      	movs	r3, #0
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800308c:	2305      	movs	r3, #5
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003090:	f107 031c 	add.w	r3, r7, #28
 8003094:	4619      	mov	r1, r3
 8003096:	486a      	ldr	r0, [pc, #424]	; (8003240 <MX_GPIO_Init+0x300>)
 8003098:	f002 fbc6 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800309c:	2301      	movs	r3, #1
 800309e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030a0:	2300      	movs	r3, #0
 80030a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a8:	f107 031c 	add.w	r3, r7, #28
 80030ac:	4619      	mov	r1, r3
 80030ae:	4867      	ldr	r0, [pc, #412]	; (800324c <MX_GPIO_Init+0x30c>)
 80030b0:	f002 fbba 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80030b4:	2310      	movs	r3, #16
 80030b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b8:	2302      	movs	r3, #2
 80030ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c0:	2300      	movs	r3, #0
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030c4:	2306      	movs	r3, #6
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80030c8:	f107 031c 	add.w	r3, r7, #28
 80030cc:	4619      	mov	r1, r3
 80030ce:	485f      	ldr	r0, [pc, #380]	; (800324c <MX_GPIO_Init+0x30c>)
 80030d0:	f002 fbaa 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80030d4:	2320      	movs	r3, #32
 80030d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030d8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80030dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e2:	f107 031c 	add.w	r3, r7, #28
 80030e6:	4619      	mov	r1, r3
 80030e8:	4855      	ldr	r0, [pc, #340]	; (8003240 <MX_GPIO_Init+0x300>)
 80030ea:	f002 fb9d 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030ee:	2304      	movs	r3, #4
 80030f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f2:	2301      	movs	r3, #1
 80030f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fa:	2300      	movs	r3, #0
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030fe:	f107 031c 	add.w	r3, r7, #28
 8003102:	4619      	mov	r1, r3
 8003104:	484f      	ldr	r0, [pc, #316]	; (8003244 <MX_GPIO_Init+0x304>)
 8003106:	f002 fb8f 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pins : mf_lf_Pin mb_lf_Pin PE9 mb_rb_Pin
                           PE11 mf_rb_Pin PE13 mb_lb_Pin */
  GPIO_InitStruct.Pin = mf_lf_Pin|mb_lf_Pin|GPIO_PIN_9|mb_rb_Pin
 800310a:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 800310e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|mf_rb_Pin|GPIO_PIN_13|mb_lb_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003110:	2301      	movs	r3, #1
 8003112:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003118:	2300      	movs	r3, #0
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800311c:	f107 031c 	add.w	r3, r7, #28
 8003120:	4619      	mov	r1, r3
 8003122:	4846      	ldr	r0, [pc, #280]	; (800323c <MX_GPIO_Init+0x2fc>)
 8003124:	f002 fb80 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8003128:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800312c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312e:	2302      	movs	r3, #2
 8003130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003136:	2300      	movs	r3, #0
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800313a:	2305      	movs	r3, #5
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313e:	f107 031c 	add.w	r3, r7, #28
 8003142:	4619      	mov	r1, r3
 8003144:	483f      	ldr	r0, [pc, #252]	; (8003244 <MX_GPIO_Init+0x304>)
 8003146:	f002 fb6f 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 800314a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800314e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003150:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800315a:	f107 031c 	add.w	r3, r7, #28
 800315e:	4619      	mov	r1, r3
 8003160:	4838      	ldr	r0, [pc, #224]	; (8003244 <MX_GPIO_Init+0x304>)
 8003162:	f002 fb61 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CSN_Pin NRF_CE_Pin LD4_Pin LD3_Pin
                           LD5_Pin LD6_Pin CE1_SPI5_Pin CSN1_SPI5_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_CE_Pin|LD4_Pin|LD3_Pin
 8003166:	f24f 3313 	movw	r3, #62227	; 0xf313
 800316a:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|CE1_SPI5_Pin|CSN1_SPI5_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316c:	2301      	movs	r3, #1
 800316e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003174:	2300      	movs	r3, #0
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003178:	f107 031c 	add.w	r3, r7, #28
 800317c:	4619      	mov	r1, r3
 800317e:	4832      	ldr	r0, [pc, #200]	; (8003248 <MX_GPIO_Init+0x308>)
 8003180:	f002 fb52 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003184:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318a:	2302      	movs	r3, #2
 800318c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003192:	2300      	movs	r3, #0
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003196:	2306      	movs	r3, #6
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800319a:	f107 031c 	add.w	r3, r7, #28
 800319e:	4619      	mov	r1, r3
 80031a0:	4827      	ldr	r0, [pc, #156]	; (8003240 <MX_GPIO_Init+0x300>)
 80031a2:	f002 fb41 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b6:	f107 031c 	add.w	r3, r7, #28
 80031ba:	4619      	mov	r1, r3
 80031bc:	4823      	ldr	r0, [pc, #140]	; (800324c <MX_GPIO_Init+0x30c>)
 80031be:	f002 fb33 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80031c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031c8:	2300      	movs	r3, #0
 80031ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d0:	f107 031c 	add.w	r3, r7, #28
 80031d4:	4619      	mov	r1, r3
 80031d6:	481a      	ldr	r0, [pc, #104]	; (8003240 <MX_GPIO_Init+0x300>)
 80031d8:	f002 fb26 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80031dc:	2364      	movs	r3, #100	; 0x64
 80031de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031e0:	2300      	movs	r3, #0
 80031e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031e8:	f107 031c 	add.w	r3, r7, #28
 80031ec:	4619      	mov	r1, r3
 80031ee:	4816      	ldr	r0, [pc, #88]	; (8003248 <MX_GPIO_Init+0x308>)
 80031f0:	f002 fb1a 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 80031f4:	2388      	movs	r3, #136	; 0x88
 80031f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003202:	f107 031c 	add.w	r3, r7, #28
 8003206:	4619      	mov	r1, r3
 8003208:	480f      	ldr	r0, [pc, #60]	; (8003248 <MX_GPIO_Init+0x308>)
 800320a:	f002 fb0d 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800320e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003214:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800321e:	f107 031c 	add.w	r3, r7, #28
 8003222:	4619      	mov	r1, r3
 8003224:	4807      	ldr	r0, [pc, #28]	; (8003244 <MX_GPIO_Init+0x304>)
 8003226:	f002 faff 	bl	8005828 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	2105      	movs	r1, #5
 800322e:	2007      	movs	r0, #7
 8003230:	f002 faa0 	bl	8005774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003234:	2007      	movs	r0, #7
 8003236:	e00b      	b.n	8003250 <MX_GPIO_Init+0x310>
 8003238:	40023800 	.word	0x40023800
 800323c:	40021000 	.word	0x40021000
 8003240:	40020800 	.word	0x40020800
 8003244:	40020400 	.word	0x40020400
 8003248:	40020c00 	.word	0x40020c00
 800324c:	40020000 	.word	0x40020000
 8003250:	f002 faac 	bl	80057ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	2105      	movs	r1, #5
 8003258:	2008      	movs	r0, #8
 800325a:	f002 fa8b 	bl	8005774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800325e:	2008      	movs	r0, #8
 8003260:	f002 faa4 	bl	80057ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003264:	2200      	movs	r2, #0
 8003266:	2105      	movs	r1, #5
 8003268:	2009      	movs	r0, #9
 800326a:	f002 fa83 	bl	8005774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800326e:	2009      	movs	r0, #9
 8003270:	f002 fa9c 	bl	80057ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003274:	2200      	movs	r2, #0
 8003276:	2105      	movs	r1, #5
 8003278:	200a      	movs	r0, #10
 800327a:	f002 fa7b 	bl	8005774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800327e:	200a      	movs	r0, #10
 8003280:	f002 fa94 	bl	80057ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003284:	2200      	movs	r2, #0
 8003286:	2105      	movs	r1, #5
 8003288:	2017      	movs	r0, #23
 800328a:	f002 fa73 	bl	8005774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800328e:	2017      	movs	r0, #23
 8003290:	f002 fa8c 	bl	80057ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003294:	2200      	movs	r2, #0
 8003296:	2105      	movs	r1, #5
 8003298:	2028      	movs	r0, #40	; 0x28
 800329a:	f002 fa6b 	bl	8005774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800329e:	2028      	movs	r0, #40	; 0x28
 80032a0:	f002 fa84 	bl	80057ac <HAL_NVIC_EnableIRQ>

}
 80032a4:	bf00      	nop
 80032a6:	3730      	adds	r7, #48	; 0x30
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	80fb      	strh	r3, [r7, #6]
	//kateri pin je poklical EXIT event
	if(GPIO_Pin == GPIO_PIN_14){
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032bc:	d103      	bne.n	80032c6 <HAL_GPIO_EXTI_Callback+0x1a>
		nRF24_dataReady = 1; //spremenil se je status register pejt pogledat kaj se je zgodilo
 80032be:	4b51      	ldr	r3, [pc, #324]	; (8003404 <HAL_GPIO_EXTI_Callback+0x158>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	701a      	strb	r2, [r3, #0]
		//HAL_SPI_TransmitReceive(&hspi5, SpiTxData, SpiRxData, SPI_BUFFER_SIZE, 10);
		//HAL_SPI_Transmit(&hspi5, SpiTxData, SPI_BUFFER_SIZE, 200);

	}

}
 80032c4:	e099      	b.n	80033fa <HAL_GPIO_EXTI_Callback+0x14e>
	else if(GPIO_Pin == GPIO_PIN_15){
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032cc:	d112      	bne.n	80032f4 <HAL_GPIO_EXTI_Callback+0x48>
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){motorLF.poz--;}
 80032ce:	2104      	movs	r1, #4
 80032d0:	484d      	ldr	r0, [pc, #308]	; (8003408 <HAL_GPIO_EXTI_Callback+0x15c>)
 80032d2:	f002 fc2d 	bl	8005b30 <HAL_GPIO_ReadPin>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_GPIO_EXTI_Callback+0x3c>
 80032dc:	4b4b      	ldr	r3, [pc, #300]	; (800340c <HAL_GPIO_EXTI_Callback+0x160>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	4a4a      	ldr	r2, [pc, #296]	; (800340c <HAL_GPIO_EXTI_Callback+0x160>)
 80032e4:	6013      	str	r3, [r2, #0]
}
 80032e6:	e088      	b.n	80033fa <HAL_GPIO_EXTI_Callback+0x14e>
		else{motorLF.poz++;}
 80032e8:	4b48      	ldr	r3, [pc, #288]	; (800340c <HAL_GPIO_EXTI_Callback+0x160>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	4a47      	ldr	r2, [pc, #284]	; (800340c <HAL_GPIO_EXTI_Callback+0x160>)
 80032f0:	6013      	str	r3, [r2, #0]
}
 80032f2:	e082      	b.n	80033fa <HAL_GPIO_EXTI_Callback+0x14e>
	else if(GPIO_Pin == GPIO_PIN_7){
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	2b80      	cmp	r3, #128	; 0x80
 80032f8:	d112      	bne.n	8003320 <HAL_GPIO_EXTI_Callback+0x74>
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_5)){motorRF.poz--;}
 80032fa:	2120      	movs	r1, #32
 80032fc:	4842      	ldr	r0, [pc, #264]	; (8003408 <HAL_GPIO_EXTI_Callback+0x15c>)
 80032fe:	f002 fc17 	bl	8005b30 <HAL_GPIO_ReadPin>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_GPIO_EXTI_Callback+0x68>
 8003308:	4b41      	ldr	r3, [pc, #260]	; (8003410 <HAL_GPIO_EXTI_Callback+0x164>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3b01      	subs	r3, #1
 800330e:	4a40      	ldr	r2, [pc, #256]	; (8003410 <HAL_GPIO_EXTI_Callback+0x164>)
 8003310:	6013      	str	r3, [r2, #0]
}
 8003312:	e072      	b.n	80033fa <HAL_GPIO_EXTI_Callback+0x14e>
		else{motorRF.poz++;}
 8003314:	4b3e      	ldr	r3, [pc, #248]	; (8003410 <HAL_GPIO_EXTI_Callback+0x164>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	4a3d      	ldr	r2, [pc, #244]	; (8003410 <HAL_GPIO_EXTI_Callback+0x164>)
 800331c:	6013      	str	r3, [r2, #0]
}
 800331e:	e06c      	b.n	80033fa <HAL_GPIO_EXTI_Callback+0x14e>
	else if(GPIO_Pin == GPIO_PIN_3){
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	2b08      	cmp	r3, #8
 8003324:	d113      	bne.n	800334e <HAL_GPIO_EXTI_Callback+0xa2>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11)){motorRB.poz--;}
 8003326:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800332a:	483a      	ldr	r0, [pc, #232]	; (8003414 <HAL_GPIO_EXTI_Callback+0x168>)
 800332c:	f002 fc00 	bl	8005b30 <HAL_GPIO_ReadPin>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_GPIO_EXTI_Callback+0x96>
 8003336:	4b38      	ldr	r3, [pc, #224]	; (8003418 <HAL_GPIO_EXTI_Callback+0x16c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3b01      	subs	r3, #1
 800333c:	4a36      	ldr	r2, [pc, #216]	; (8003418 <HAL_GPIO_EXTI_Callback+0x16c>)
 800333e:	6013      	str	r3, [r2, #0]
}
 8003340:	e05b      	b.n	80033fa <HAL_GPIO_EXTI_Callback+0x14e>
		else{motorRB.poz++;}
 8003342:	4b35      	ldr	r3, [pc, #212]	; (8003418 <HAL_GPIO_EXTI_Callback+0x16c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3301      	adds	r3, #1
 8003348:	4a33      	ldr	r2, [pc, #204]	; (8003418 <HAL_GPIO_EXTI_Callback+0x16c>)
 800334a:	6013      	str	r3, [r2, #0]
}
 800334c:	e055      	b.n	80033fa <HAL_GPIO_EXTI_Callback+0x14e>
	else if(GPIO_Pin == GPIO_PIN_8){
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003354:	d112      	bne.n	800337c <HAL_GPIO_EXTI_Callback+0xd0>
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_6)){motorLB.poz--;}
 8003356:	2140      	movs	r1, #64	; 0x40
 8003358:	482b      	ldr	r0, [pc, #172]	; (8003408 <HAL_GPIO_EXTI_Callback+0x15c>)
 800335a:	f002 fbe9 	bl	8005b30 <HAL_GPIO_ReadPin>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_GPIO_EXTI_Callback+0xc4>
 8003364:	4b2d      	ldr	r3, [pc, #180]	; (800341c <HAL_GPIO_EXTI_Callback+0x170>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3b01      	subs	r3, #1
 800336a:	4a2c      	ldr	r2, [pc, #176]	; (800341c <HAL_GPIO_EXTI_Callback+0x170>)
 800336c:	6013      	str	r3, [r2, #0]
}
 800336e:	e044      	b.n	80033fa <HAL_GPIO_EXTI_Callback+0x14e>
		else{motorLB.poz++;}
 8003370:	4b2a      	ldr	r3, [pc, #168]	; (800341c <HAL_GPIO_EXTI_Callback+0x170>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3301      	adds	r3, #1
 8003376:	4a29      	ldr	r2, [pc, #164]	; (800341c <HAL_GPIO_EXTI_Callback+0x170>)
 8003378:	6013      	str	r3, [r2, #0]
}
 800337a:	e03e      	b.n	80033fa <HAL_GPIO_EXTI_Callback+0x14e>
	else if(GPIO_Pin == GPIO_PIN_1){ //vsakic ko dobis interupt posodobi podatke
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d108      	bne.n	8003394 <HAL_GPIO_EXTI_Callback+0xe8>
		spi1_beriRegistre(0x28, (uint8_t*)&Gyro, 6);
 8003382:	2206      	movs	r2, #6
 8003384:	4926      	ldr	r1, [pc, #152]	; (8003420 <HAL_GPIO_EXTI_Callback+0x174>)
 8003386:	2028      	movs	r0, #40	; 0x28
 8003388:	f001 fab4 	bl	80048f4 <spi1_beriRegistre>
		GyroReady = 1; //zastavica da so na voljo novi podatki 200Hz
 800338c:	4b25      	ldr	r3, [pc, #148]	; (8003424 <HAL_GPIO_EXTI_Callback+0x178>)
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
}
 8003392:	e032      	b.n	80033fa <HAL_GPIO_EXTI_Callback+0x14e>
	else if(GPIO_Pin == GPIO_PIN_4){
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	2b10      	cmp	r3, #16
 8003398:	d109      	bne.n	80033ae <HAL_GPIO_EXTI_Callback+0x102>
		i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&Acc, 6);
 800339a:	2306      	movs	r3, #6
 800339c:	4a22      	ldr	r2, [pc, #136]	; (8003428 <HAL_GPIO_EXTI_Callback+0x17c>)
 800339e:	2128      	movs	r1, #40	; 0x28
 80033a0:	2019      	movs	r0, #25
 80033a2:	f001 fa0f 	bl	80047c4 <i2c1_beriRegistre>
		AccReady = 1; //200Hz
 80033a6:	4b21      	ldr	r3, [pc, #132]	; (800342c <HAL_GPIO_EXTI_Callback+0x180>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]
}
 80033ac:	e025      	b.n	80033fa <HAL_GPIO_EXTI_Callback+0x14e>
	else if(GPIO_Pin == GPIO_PIN_2){
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d109      	bne.n	80033c8 <HAL_GPIO_EXTI_Callback+0x11c>
		i2c1_beriRegistre(0x1e, 0x68,(uint8_t*)&Mag, 6);
 80033b4:	2306      	movs	r3, #6
 80033b6:	4a1e      	ldr	r2, [pc, #120]	; (8003430 <HAL_GPIO_EXTI_Callback+0x184>)
 80033b8:	2168      	movs	r1, #104	; 0x68
 80033ba:	201e      	movs	r0, #30
 80033bc:	f001 fa02 	bl	80047c4 <i2c1_beriRegistre>
		MagReady = 1; //100Hz
 80033c0:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <HAL_GPIO_EXTI_Callback+0x188>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
}
 80033c6:	e018      	b.n	80033fa <HAL_GPIO_EXTI_Callback+0x14e>
	else if(GPIO_Pin == GPIO_PIN_5 && activateRasbetyPI){
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d115      	bne.n	80033fa <HAL_GPIO_EXTI_Callback+0x14e>
 80033ce:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <HAL_GPIO_EXTI_Callback+0x18c>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d010      	beq.n	80033fa <HAL_GPIO_EXTI_Callback+0x14e>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13); //oranzna
 80033d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033dc:	480a      	ldr	r0, [pc, #40]	; (8003408 <HAL_GPIO_EXTI_Callback+0x15c>)
 80033de:	f002 fbd8 	bl	8005b92 <HAL_GPIO_TogglePin>
		HAL_I2C_Slave_Receive(&hi2c3, I2CRxData, 8, 100);
 80033e2:	2364      	movs	r3, #100	; 0x64
 80033e4:	2208      	movs	r2, #8
 80033e6:	4915      	ldr	r1, [pc, #84]	; (800343c <HAL_GPIO_EXTI_Callback+0x190>)
 80033e8:	4815      	ldr	r0, [pc, #84]	; (8003440 <HAL_GPIO_EXTI_Callback+0x194>)
 80033ea:	f002 fe5f 	bl	80060ac <HAL_I2C_Slave_Receive>
		HAL_I2C_Slave_Transmit(&hi2c3, I2CTxData, 48,100);
 80033ee:	2364      	movs	r3, #100	; 0x64
 80033f0:	2230      	movs	r2, #48	; 0x30
 80033f2:	4914      	ldr	r1, [pc, #80]	; (8003444 <HAL_GPIO_EXTI_Callback+0x198>)
 80033f4:	4812      	ldr	r0, [pc, #72]	; (8003440 <HAL_GPIO_EXTI_Callback+0x194>)
 80033f6:	f002 fd43 	bl	8005e80 <HAL_I2C_Slave_Transmit>
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000220 	.word	0x20000220
 8003408:	40020c00 	.word	0x40020c00
 800340c:	200051f0 	.word	0x200051f0
 8003410:	20005560 	.word	0x20005560
 8003414:	40020800 	.word	0x40020800
 8003418:	20005494 	.word	0x20005494
 800341c:	20005014 	.word	0x20005014
 8003420:	2000538c 	.word	0x2000538c
 8003424:	20000222 	.word	0x20000222
 8003428:	2000533c 	.word	0x2000533c
 800342c:	20000223 	.word	0x20000223
 8003430:	200050e0 	.word	0x200050e0
 8003434:	20000224 	.word	0x20000224
 8003438:	2000023c 	.word	0x2000023c
 800343c:	200057e8 	.word	0x200057e8
 8003440:	20005648 	.word	0x20005648
 8003444:	200055e4 	.word	0x200055e4

08003448 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003454:	4803      	ldr	r0, [pc, #12]	; (8003464 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 8003456:	f002 fb9c 	bl	8005b92 <HAL_GPIO_TogglePin>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40020c00 	.word	0x40020c00

08003468 <StartCalculatingPoz>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCalculatingPoz */
void StartCalculatingPoz(void *argument)
{
 8003468:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800346c:	b08c      	sub	sp, #48	; 0x30
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003472:	f00e fb1b 	bl	8011aac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;){
	  if(MagReady){
 8003476:	4bb3      	ldr	r3, [pc, #716]	; (8003744 <StartCalculatingPoz+0x2dc>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d02e      	beq.n	80034de <StartCalculatingPoz+0x76>
		  MagF.x = izracunajPovprecjeInt16(&MagX,Mag.x,10);
 8003480:	4bb1      	ldr	r3, [pc, #708]	; (8003748 <StartCalculatingPoz+0x2e0>)
 8003482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003486:	220a      	movs	r2, #10
 8003488:	4619      	mov	r1, r3
 800348a:	48b0      	ldr	r0, [pc, #704]	; (800374c <StartCalculatingPoz+0x2e4>)
 800348c:	f001 faf0 	bl	8004a70 <izracunajPovprecjeInt16>
 8003490:	4603      	mov	r3, r0
 8003492:	461a      	mov	r2, r3
 8003494:	4bae      	ldr	r3, [pc, #696]	; (8003750 <StartCalculatingPoz+0x2e8>)
 8003496:	801a      	strh	r2, [r3, #0]
		  MagF.y = izracunajPovprecjeInt16(&MagY,Mag.y,10);
 8003498:	4bab      	ldr	r3, [pc, #684]	; (8003748 <StartCalculatingPoz+0x2e0>)
 800349a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800349e:	220a      	movs	r2, #10
 80034a0:	4619      	mov	r1, r3
 80034a2:	48ac      	ldr	r0, [pc, #688]	; (8003754 <StartCalculatingPoz+0x2ec>)
 80034a4:	f001 fae4 	bl	8004a70 <izracunajPovprecjeInt16>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	4ba8      	ldr	r3, [pc, #672]	; (8003750 <StartCalculatingPoz+0x2e8>)
 80034ae:	805a      	strh	r2, [r3, #2]
		  MagF.z = izracunajPovprecjeInt16(&MagZ,Mag.z,10);
 80034b0:	4ba5      	ldr	r3, [pc, #660]	; (8003748 <StartCalculatingPoz+0x2e0>)
 80034b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034b6:	220a      	movs	r2, #10
 80034b8:	4619      	mov	r1, r3
 80034ba:	48a7      	ldr	r0, [pc, #668]	; (8003758 <StartCalculatingPoz+0x2f0>)
 80034bc:	f001 fad8 	bl	8004a70 <izracunajPovprecjeInt16>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	4ba2      	ldr	r3, [pc, #648]	; (8003750 <StartCalculatingPoz+0x2e8>)
 80034c6:	809a      	strh	r2, [r3, #4]
		  MagReady = 0;
 80034c8:	4b9e      	ldr	r3, [pc, #632]	; (8003744 <StartCalculatingPoz+0x2dc>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]

		  P.head = 0xAAAB;
 80034ce:	4ba3      	ldr	r3, [pc, #652]	; (800375c <StartCalculatingPoz+0x2f4>)
 80034d0:	f64a 22ab 	movw	r2, #43691	; 0xaaab
 80034d4:	601a      	str	r2, [r3, #0]
		  CDC_Transmit_FS((uint8_t*)&P,(sizeof(float)*12)+4);
 80034d6:	2134      	movs	r1, #52	; 0x34
 80034d8:	48a0      	ldr	r0, [pc, #640]	; (800375c <StartCalculatingPoz+0x2f4>)
 80034da:	f00e fba5 	bl	8011c28 <CDC_Transmit_FS>
	  }
	  if(AccReady){
 80034de:	4ba0      	ldr	r3, [pc, #640]	; (8003760 <StartCalculatingPoz+0x2f8>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d040      	beq.n	800356a <StartCalculatingPoz+0x102>
		  Acc.x -= E.Accx;
 80034e8:	4b9e      	ldr	r3, [pc, #632]	; (8003764 <StartCalculatingPoz+0x2fc>)
 80034ea:	8c1b      	ldrh	r3, [r3, #32]
 80034ec:	b219      	sxth	r1, r3
 80034ee:	4b9e      	ldr	r3, [pc, #632]	; (8003768 <StartCalculatingPoz+0x300>)
 80034f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	b28b      	uxth	r3, r1
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	b21a      	sxth	r2, r3
 80034fe:	4b9a      	ldr	r3, [pc, #616]	; (8003768 <StartCalculatingPoz+0x300>)
 8003500:	801a      	strh	r2, [r3, #0]
		  Acc.y -= E.Accy;
 8003502:	4b98      	ldr	r3, [pc, #608]	; (8003764 <StartCalculatingPoz+0x2fc>)
 8003504:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003506:	b219      	sxth	r1, r3
 8003508:	4b97      	ldr	r3, [pc, #604]	; (8003768 <StartCalculatingPoz+0x300>)
 800350a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800350e:	b29a      	uxth	r2, r3
 8003510:	b28b      	uxth	r3, r1
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	b29b      	uxth	r3, r3
 8003516:	b21a      	sxth	r2, r3
 8003518:	4b93      	ldr	r3, [pc, #588]	; (8003768 <StartCalculatingPoz+0x300>)
 800351a:	805a      	strh	r2, [r3, #2]
		  AccF.x = izracunajPovprecjeInt16(&AccX,Acc.x,50);
 800351c:	4b92      	ldr	r3, [pc, #584]	; (8003768 <StartCalculatingPoz+0x300>)
 800351e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003522:	2232      	movs	r2, #50	; 0x32
 8003524:	4619      	mov	r1, r3
 8003526:	4891      	ldr	r0, [pc, #580]	; (800376c <StartCalculatingPoz+0x304>)
 8003528:	f001 faa2 	bl	8004a70 <izracunajPovprecjeInt16>
 800352c:	4603      	mov	r3, r0
 800352e:	461a      	mov	r2, r3
 8003530:	4b8f      	ldr	r3, [pc, #572]	; (8003770 <StartCalculatingPoz+0x308>)
 8003532:	801a      	strh	r2, [r3, #0]
		  AccF.y = izracunajPovprecjeInt16(&AccY,Acc.y,50);
 8003534:	4b8c      	ldr	r3, [pc, #560]	; (8003768 <StartCalculatingPoz+0x300>)
 8003536:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800353a:	2232      	movs	r2, #50	; 0x32
 800353c:	4619      	mov	r1, r3
 800353e:	488d      	ldr	r0, [pc, #564]	; (8003774 <StartCalculatingPoz+0x30c>)
 8003540:	f001 fa96 	bl	8004a70 <izracunajPovprecjeInt16>
 8003544:	4603      	mov	r3, r0
 8003546:	461a      	mov	r2, r3
 8003548:	4b89      	ldr	r3, [pc, #548]	; (8003770 <StartCalculatingPoz+0x308>)
 800354a:	805a      	strh	r2, [r3, #2]
		  AccF.z = izracunajPovprecjeInt16(&AccZ,Acc.z,50);
 800354c:	4b86      	ldr	r3, [pc, #536]	; (8003768 <StartCalculatingPoz+0x300>)
 800354e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003552:	2232      	movs	r2, #50	; 0x32
 8003554:	4619      	mov	r1, r3
 8003556:	4888      	ldr	r0, [pc, #544]	; (8003778 <StartCalculatingPoz+0x310>)
 8003558:	f001 fa8a 	bl	8004a70 <izracunajPovprecjeInt16>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	4b83      	ldr	r3, [pc, #524]	; (8003770 <StartCalculatingPoz+0x308>)
 8003562:	809a      	strh	r2, [r3, #4]
		  AccReady = 0;
 8003564:	4b7e      	ldr	r3, [pc, #504]	; (8003760 <StartCalculatingPoz+0x2f8>)
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
	  }
	  if(GyroReady){
 800356a:	4b84      	ldr	r3, [pc, #528]	; (800377c <StartCalculatingPoz+0x314>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8374 	beq.w	8003c5e <StartCalculatingPoz+0x7f6>
		  Gyro.x -= E.Gyrox;
 8003576:	4b7b      	ldr	r3, [pc, #492]	; (8003764 <StartCalculatingPoz+0x2fc>)
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	b219      	sxth	r1, r3
 800357c:	4b80      	ldr	r3, [pc, #512]	; (8003780 <StartCalculatingPoz+0x318>)
 800357e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003582:	b29a      	uxth	r2, r3
 8003584:	b28b      	uxth	r3, r1
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	b29b      	uxth	r3, r3
 800358a:	b21a      	sxth	r2, r3
 800358c:	4b7c      	ldr	r3, [pc, #496]	; (8003780 <StartCalculatingPoz+0x318>)
 800358e:	801a      	strh	r2, [r3, #0]
		  Gyro.y -= E.Gyroy;
 8003590:	4b74      	ldr	r3, [pc, #464]	; (8003764 <StartCalculatingPoz+0x2fc>)
 8003592:	885b      	ldrh	r3, [r3, #2]
 8003594:	b219      	sxth	r1, r3
 8003596:	4b7a      	ldr	r3, [pc, #488]	; (8003780 <StartCalculatingPoz+0x318>)
 8003598:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800359c:	b29a      	uxth	r2, r3
 800359e:	b28b      	uxth	r3, r1
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	b21a      	sxth	r2, r3
 80035a6:	4b76      	ldr	r3, [pc, #472]	; (8003780 <StartCalculatingPoz+0x318>)
 80035a8:	805a      	strh	r2, [r3, #2]
		  Gyro.z -= E.Gyroz;
 80035aa:	4b6e      	ldr	r3, [pc, #440]	; (8003764 <StartCalculatingPoz+0x2fc>)
 80035ac:	889b      	ldrh	r3, [r3, #4]
 80035ae:	b219      	sxth	r1, r3
 80035b0:	4b73      	ldr	r3, [pc, #460]	; (8003780 <StartCalculatingPoz+0x318>)
 80035b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	b28b      	uxth	r3, r1
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	b29b      	uxth	r3, r3
 80035be:	b21a      	sxth	r2, r3
 80035c0:	4b6f      	ldr	r3, [pc, #444]	; (8003780 <StartCalculatingPoz+0x318>)
 80035c2:	809a      	strh	r2, [r3, #4]
		  GyroF.x = izracunajPovprecjeInt16(&GyroX,Gyro.x,50);
 80035c4:	4b6e      	ldr	r3, [pc, #440]	; (8003780 <StartCalculatingPoz+0x318>)
 80035c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ca:	2232      	movs	r2, #50	; 0x32
 80035cc:	4619      	mov	r1, r3
 80035ce:	486d      	ldr	r0, [pc, #436]	; (8003784 <StartCalculatingPoz+0x31c>)
 80035d0:	f001 fa4e 	bl	8004a70 <izracunajPovprecjeInt16>
 80035d4:	4603      	mov	r3, r0
 80035d6:	461a      	mov	r2, r3
 80035d8:	4b6b      	ldr	r3, [pc, #428]	; (8003788 <StartCalculatingPoz+0x320>)
 80035da:	801a      	strh	r2, [r3, #0]
		  GyroF.y = izracunajPovprecjeInt16(&GyroY,Gyro.y,50);
 80035dc:	4b68      	ldr	r3, [pc, #416]	; (8003780 <StartCalculatingPoz+0x318>)
 80035de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035e2:	2232      	movs	r2, #50	; 0x32
 80035e4:	4619      	mov	r1, r3
 80035e6:	4869      	ldr	r0, [pc, #420]	; (800378c <StartCalculatingPoz+0x324>)
 80035e8:	f001 fa42 	bl	8004a70 <izracunajPovprecjeInt16>
 80035ec:	4603      	mov	r3, r0
 80035ee:	461a      	mov	r2, r3
 80035f0:	4b65      	ldr	r3, [pc, #404]	; (8003788 <StartCalculatingPoz+0x320>)
 80035f2:	805a      	strh	r2, [r3, #2]
		  GyroF.z = izracunajPovprecjeInt16(&GyroZ,Gyro.z,50);
 80035f4:	4b62      	ldr	r3, [pc, #392]	; (8003780 <StartCalculatingPoz+0x318>)
 80035f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035fa:	2232      	movs	r2, #50	; 0x32
 80035fc:	4619      	mov	r1, r3
 80035fe:	4864      	ldr	r0, [pc, #400]	; (8003790 <StartCalculatingPoz+0x328>)
 8003600:	f001 fa36 	bl	8004a70 <izracunajPovprecjeInt16>
 8003604:	4603      	mov	r3, r0
 8003606:	461a      	mov	r2, r3
 8003608:	4b5f      	ldr	r3, [pc, #380]	; (8003788 <StartCalculatingPoz+0x320>)
 800360a:	809a      	strh	r2, [r3, #4]
		  GyroReady = 0;
 800360c:	4b5b      	ldr	r3, [pc, #364]	; (800377c <StartCalculatingPoz+0x314>)
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]

		  //poracunamo podatke
		  float gx,gy,gz,ax,ay,az,mx,my,mz;

		  if(AccF.x == 0 && AccF.y == 0 && AccF.z==0){ax=0.0f; ay=0.0f; az=1.0f;}
 8003612:	4b57      	ldr	r3, [pc, #348]	; (8003770 <StartCalculatingPoz+0x308>)
 8003614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d113      	bne.n	8003644 <StartCalculatingPoz+0x1dc>
 800361c:	4b54      	ldr	r3, [pc, #336]	; (8003770 <StartCalculatingPoz+0x308>)
 800361e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10e      	bne.n	8003644 <StartCalculatingPoz+0x1dc>
 8003626:	4b52      	ldr	r3, [pc, #328]	; (8003770 <StartCalculatingPoz+0x308>)
 8003628:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <StartCalculatingPoz+0x1dc>
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	e02f      	b.n	80036a4 <StartCalculatingPoz+0x23c>
		  else{
			  ax = ((float)AccF.x) *-0.0006103515f;
 8003644:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <StartCalculatingPoz+0x308>)
 8003646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003652:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8003794 <StartCalculatingPoz+0x32c>
 8003656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800365a:	edc7 7a07 	vstr	s15, [r7, #28]
			  ay = ((float)AccF.y) *0.0006103515f;
 800365e:	4b44      	ldr	r3, [pc, #272]	; (8003770 <StartCalculatingPoz+0x308>)
 8003660:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003664:	ee07 3a90 	vmov	s15, r3
 8003668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800366c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003798 <StartCalculatingPoz+0x330>
 8003670:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003674:	edc7 7a06 	vstr	s15, [r7, #24]
			  az = ((float)AccF.z) *0.0006103515f;//+-2g  2/(2^16/2)
 8003678:	4b3d      	ldr	r3, [pc, #244]	; (8003770 <StartCalculatingPoz+0x308>)
 800367a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800367e:	ee07 3a90 	vmov	s15, r3
 8003682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003686:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003798 <StartCalculatingPoz+0x330>
 800368a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800368e:	edc7 7a05 	vstr	s15, [r7, #20]
			  normalize_v3f(&ax,&ay,&az);
 8003692:	f107 0214 	add.w	r2, r7, #20
 8003696:	f107 0118 	add.w	r1, r7, #24
 800369a:	f107 031c 	add.w	r3, r7, #28
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe fef2 	bl	8002488 <normalize_v3f>
		  }

		  gx = ((float)GyroF.x) * 0.0175f * DEG_TO_RAD*2; //deg/s obcutljivost 500dps
 80036a4:	4b38      	ldr	r3, [pc, #224]	; (8003788 <StartCalculatingPoz+0x320>)
 80036a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036b2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800379c <StartCalculatingPoz+0x334>
 80036b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ba:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80037a0 <StartCalculatingPoz+0x338>
 80036be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80036c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		  gy = ((float)GyroF.y) * 0.0175f * DEG_TO_RAD*2;
 80036ca:	4b2f      	ldr	r3, [pc, #188]	; (8003788 <StartCalculatingPoz+0x320>)
 80036cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036d0:	ee07 3a90 	vmov	s15, r3
 80036d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800379c <StartCalculatingPoz+0x334>
 80036dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80037a0 <StartCalculatingPoz+0x338>
 80036e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80036ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		  gz = ((float)GyroF.z) * 0.0175f * DEG_TO_RAD*2;
 80036f0:	4b25      	ldr	r3, [pc, #148]	; (8003788 <StartCalculatingPoz+0x320>)
 80036f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036fe:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800379c <StartCalculatingPoz+0x334>
 8003702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003706:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80037a0 <StartCalculatingPoz+0x338>
 800370a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800370e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003712:	edc7 7a08 	vstr	s15, [r7, #32]

		  if(MagF.x == 0 && MagF.y == 0 && MagF.z==0){mx = 0.2f; my = 0.2f; mz = 0.1f;}
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <StartCalculatingPoz+0x2e8>)
 8003718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d145      	bne.n	80037ac <StartCalculatingPoz+0x344>
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <StartCalculatingPoz+0x2e8>)
 8003722:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d140      	bne.n	80037ac <StartCalculatingPoz+0x344>
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <StartCalculatingPoz+0x2e8>)
 800372c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d13b      	bne.n	80037ac <StartCalculatingPoz+0x344>
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <StartCalculatingPoz+0x33c>)
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <StartCalculatingPoz+0x33c>)
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <StartCalculatingPoz+0x340>)
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	e05b      	b.n	80037fa <StartCalculatingPoz+0x392>
 8003742:	bf00      	nop
 8003744:	20000224 	.word	0x20000224
 8003748:	200050e0 	.word	0x200050e0
 800374c:	20004f94 	.word	0x20004f94
 8003750:	200051e8 	.word	0x200051e8
 8003754:	20004d70 	.word	0x20004d70
 8003758:	200050e8 	.word	0x200050e8
 800375c:	200055ac 	.word	0x200055ac
 8003760:	20000223 	.word	0x20000223
 8003764:	2000534c 	.word	0x2000534c
 8003768:	2000533c 	.word	0x2000533c
 800376c:	200052bc 	.word	0x200052bc
 8003770:	20004f84 	.word	0x20004f84
 8003774:	20004e04 	.word	0x20004e04
 8003778:	20005060 	.word	0x20005060
 800377c:	20000222 	.word	0x20000222
 8003780:	2000538c 	.word	0x2000538c
 8003784:	20004f04 	.word	0x20004f04
 8003788:	20005344 	.word	0x20005344
 800378c:	2000523c 	.word	0x2000523c
 8003790:	200054e0 	.word	0x200054e0
 8003794:	ba1fffff 	.word	0xba1fffff
 8003798:	3a1fffff 	.word	0x3a1fffff
 800379c:	3c8f5c29 	.word	0x3c8f5c29
 80037a0:	3c8efa35 	.word	0x3c8efa35
 80037a4:	3e4ccccd 	.word	0x3e4ccccd
 80037a8:	3dcccccd 	.word	0x3dcccccd
		  else{
			  mx = ((float)MagF.x) * 0.0015f; //magnetic sesnetivity 1.5 mgauss/LSB
 80037ac:	4bd9      	ldr	r3, [pc, #868]	; (8003b14 <StartCalculatingPoz+0x6ac>)
 80037ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ba:	ed9f 7ad7 	vldr	s14, [pc, #860]	; 8003b18 <StartCalculatingPoz+0x6b0>
 80037be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037c2:	edc7 7a04 	vstr	s15, [r7, #16]
			  my = ((float)MagF.y) * 0.0015f;
 80037c6:	4bd3      	ldr	r3, [pc, #844]	; (8003b14 <StartCalculatingPoz+0x6ac>)
 80037c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037cc:	ee07 3a90 	vmov	s15, r3
 80037d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d4:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 8003b18 <StartCalculatingPoz+0x6b0>
 80037d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037dc:	edc7 7a03 	vstr	s15, [r7, #12]
			  mz = ((float)MagF.z) * 0.0015f;
 80037e0:	4bcc      	ldr	r3, [pc, #816]	; (8003b14 <StartCalculatingPoz+0x6ac>)
 80037e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ee:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8003b18 <StartCalculatingPoz+0x6b0>
 80037f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037f6:	edc7 7a02 	vstr	s15, [r7, #8]
		  }
		  normalize_v3f(&mx,&my,&mz);
 80037fa:	f107 0208 	add.w	r2, r7, #8
 80037fe:	f107 010c 	add.w	r1, r7, #12
 8003802:	f107 0310 	add.w	r3, r7, #16
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe fe3e 	bl	8002488 <normalize_v3f>

		  MadgwickAHRSupdate(gx,gy,gz,ax,ay,az,0,0,0);
 800380c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003810:	ed97 7a06 	vldr	s14, [r7, #24]
 8003814:	edd7 6a05 	vldr	s13, [r7, #20]
 8003818:	ed9f 4ac0 	vldr	s8, [pc, #768]	; 8003b1c <StartCalculatingPoz+0x6b4>
 800381c:	eddf 3abf 	vldr	s7, [pc, #764]	; 8003b1c <StartCalculatingPoz+0x6b4>
 8003820:	ed9f 3abe 	vldr	s6, [pc, #760]	; 8003b1c <StartCalculatingPoz+0x6b4>
 8003824:	eef0 2a66 	vmov.f32	s5, s13
 8003828:	eeb0 2a47 	vmov.f32	s4, s14
 800382c:	eef0 1a67 	vmov.f32	s3, s15
 8003830:	ed97 1a08 	vldr	s2, [r7, #32]
 8003834:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8003838:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800383c:	f7fd fb30 	bl	8000ea0 <MadgwickAHRSupdate>
		  P.heading = atan2(2*(q0*q3+q1*q2),1-2*(q2*q2+q3*q3));
 8003840:	4bb7      	ldr	r3, [pc, #732]	; (8003b20 <StartCalculatingPoz+0x6b8>)
 8003842:	ed93 7a00 	vldr	s14, [r3]
 8003846:	4bb7      	ldr	r3, [pc, #732]	; (8003b24 <StartCalculatingPoz+0x6bc>)
 8003848:	edd3 7a00 	vldr	s15, [r3]
 800384c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003850:	4bb5      	ldr	r3, [pc, #724]	; (8003b28 <StartCalculatingPoz+0x6c0>)
 8003852:	edd3 6a00 	vldr	s13, [r3]
 8003856:	4bb5      	ldr	r3, [pc, #724]	; (8003b2c <StartCalculatingPoz+0x6c4>)
 8003858:	edd3 7a00 	vldr	s15, [r3]
 800385c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003864:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003868:	ee17 0a90 	vmov	r0, s15
 800386c:	f7fc fe1c 	bl	80004a8 <__aeabi_f2d>
 8003870:	4604      	mov	r4, r0
 8003872:	460d      	mov	r5, r1
 8003874:	4bad      	ldr	r3, [pc, #692]	; (8003b2c <StartCalculatingPoz+0x6c4>)
 8003876:	ed93 7a00 	vldr	s14, [r3]
 800387a:	4bac      	ldr	r3, [pc, #688]	; (8003b2c <StartCalculatingPoz+0x6c4>)
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003884:	4ba7      	ldr	r3, [pc, #668]	; (8003b24 <StartCalculatingPoz+0x6bc>)
 8003886:	edd3 6a00 	vldr	s13, [r3]
 800388a:	4ba6      	ldr	r3, [pc, #664]	; (8003b24 <StartCalculatingPoz+0x6bc>)
 800388c:	edd3 7a00 	vldr	s15, [r3]
 8003890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003898:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800389c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038a4:	ee17 0a90 	vmov	r0, s15
 80038a8:	f7fc fdfe 	bl	80004a8 <__aeabi_f2d>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	ec43 2b11 	vmov	d1, r2, r3
 80038b4:	ec45 4b10 	vmov	d0, r4, r5
 80038b8:	f00e ff34 	bl	8012724 <atan2>
 80038bc:	ec53 2b10 	vmov	r2, r3, d0
 80038c0:	4610      	mov	r0, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	f7fd f920 	bl	8000b08 <__aeabi_d2f>
 80038c8:	4603      	mov	r3, r0
 80038ca:	4a99      	ldr	r2, [pc, #612]	; (8003b30 <StartCalculatingPoz+0x6c8>)
 80038cc:	60d3      	str	r3, [r2, #12]
		  P.roll = atan2(2*(q0*q1+q2*q3),1-2*(q1*q1+q2*q2));
 80038ce:	4b94      	ldr	r3, [pc, #592]	; (8003b20 <StartCalculatingPoz+0x6b8>)
 80038d0:	ed93 7a00 	vldr	s14, [r3]
 80038d4:	4b94      	ldr	r3, [pc, #592]	; (8003b28 <StartCalculatingPoz+0x6c0>)
 80038d6:	edd3 7a00 	vldr	s15, [r3]
 80038da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038de:	4b93      	ldr	r3, [pc, #588]	; (8003b2c <StartCalculatingPoz+0x6c4>)
 80038e0:	edd3 6a00 	vldr	s13, [r3]
 80038e4:	4b8f      	ldr	r3, [pc, #572]	; (8003b24 <StartCalculatingPoz+0x6bc>)
 80038e6:	edd3 7a00 	vldr	s15, [r3]
 80038ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80038f6:	ee17 0a90 	vmov	r0, s15
 80038fa:	f7fc fdd5 	bl	80004a8 <__aeabi_f2d>
 80038fe:	4604      	mov	r4, r0
 8003900:	460d      	mov	r5, r1
 8003902:	4b89      	ldr	r3, [pc, #548]	; (8003b28 <StartCalculatingPoz+0x6c0>)
 8003904:	ed93 7a00 	vldr	s14, [r3]
 8003908:	4b87      	ldr	r3, [pc, #540]	; (8003b28 <StartCalculatingPoz+0x6c0>)
 800390a:	edd3 7a00 	vldr	s15, [r3]
 800390e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003912:	4b86      	ldr	r3, [pc, #536]	; (8003b2c <StartCalculatingPoz+0x6c4>)
 8003914:	edd3 6a00 	vldr	s13, [r3]
 8003918:	4b84      	ldr	r3, [pc, #528]	; (8003b2c <StartCalculatingPoz+0x6c4>)
 800391a:	edd3 7a00 	vldr	s15, [r3]
 800391e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003926:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800392a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800392e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003932:	ee17 0a90 	vmov	r0, s15
 8003936:	f7fc fdb7 	bl	80004a8 <__aeabi_f2d>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	ec43 2b11 	vmov	d1, r2, r3
 8003942:	ec45 4b10 	vmov	d0, r4, r5
 8003946:	f00e feed 	bl	8012724 <atan2>
 800394a:	ec53 2b10 	vmov	r2, r3, d0
 800394e:	4610      	mov	r0, r2
 8003950:	4619      	mov	r1, r3
 8003952:	f7fd f8d9 	bl	8000b08 <__aeabi_d2f>
 8003956:	4603      	mov	r3, r0
 8003958:	4a75      	ldr	r2, [pc, #468]	; (8003b30 <StartCalculatingPoz+0x6c8>)
 800395a:	6093      	str	r3, [r2, #8]
		  P.pitch = asin(2*(q0*q2 - q3*q1));
 800395c:	4b70      	ldr	r3, [pc, #448]	; (8003b20 <StartCalculatingPoz+0x6b8>)
 800395e:	ed93 7a00 	vldr	s14, [r3]
 8003962:	4b72      	ldr	r3, [pc, #456]	; (8003b2c <StartCalculatingPoz+0x6c4>)
 8003964:	edd3 7a00 	vldr	s15, [r3]
 8003968:	ee27 7a27 	vmul.f32	s14, s14, s15
 800396c:	4b6d      	ldr	r3, [pc, #436]	; (8003b24 <StartCalculatingPoz+0x6bc>)
 800396e:	edd3 6a00 	vldr	s13, [r3]
 8003972:	4b6d      	ldr	r3, [pc, #436]	; (8003b28 <StartCalculatingPoz+0x6c0>)
 8003974:	edd3 7a00 	vldr	s15, [r3]
 8003978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800397c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003980:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003984:	ee17 0a90 	vmov	r0, s15
 8003988:	f7fc fd8e 	bl	80004a8 <__aeabi_f2d>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	ec43 2b10 	vmov	d0, r2, r3
 8003994:	f00e fe8c 	bl	80126b0 <asin>
 8003998:	ec53 2b10 	vmov	r2, r3, d0
 800399c:	4610      	mov	r0, r2
 800399e:	4619      	mov	r1, r3
 80039a0:	f7fd f8b2 	bl	8000b08 <__aeabi_d2f>
 80039a4:	4603      	mov	r3, r0
 80039a6:	4a62      	ldr	r2, [pc, #392]	; (8003b30 <StartCalculatingPoz+0x6c8>)
 80039a8:	6053      	str	r3, [r2, #4]
		  P.Q0 = q0; P.Q1 = q1; P.Q2 = q2; P.Q3 = q3;
 80039aa:	4b5d      	ldr	r3, [pc, #372]	; (8003b20 <StartCalculatingPoz+0x6b8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a60      	ldr	r2, [pc, #384]	; (8003b30 <StartCalculatingPoz+0x6c8>)
 80039b0:	6113      	str	r3, [r2, #16]
 80039b2:	4b5d      	ldr	r3, [pc, #372]	; (8003b28 <StartCalculatingPoz+0x6c0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a5e      	ldr	r2, [pc, #376]	; (8003b30 <StartCalculatingPoz+0x6c8>)
 80039b8:	6153      	str	r3, [r2, #20]
 80039ba:	4b5c      	ldr	r3, [pc, #368]	; (8003b2c <StartCalculatingPoz+0x6c4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a5c      	ldr	r2, [pc, #368]	; (8003b30 <StartCalculatingPoz+0x6c8>)
 80039c0:	6193      	str	r3, [r2, #24]
 80039c2:	4b58      	ldr	r3, [pc, #352]	; (8003b24 <StartCalculatingPoz+0x6bc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a5a      	ldr	r2, [pc, #360]	; (8003b30 <StartCalculatingPoz+0x6c8>)
 80039c8:	61d3      	str	r3, [r2, #28]

		  //rotiraj po X za roll
		  ay = ay*cos(-P.roll)-az*sin(P.roll);
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fc fd6b 	bl	80004a8 <__aeabi_f2d>
 80039d2:	4604      	mov	r4, r0
 80039d4:	460d      	mov	r5, r1
 80039d6:	4b56      	ldr	r3, [pc, #344]	; (8003b30 <StartCalculatingPoz+0x6c8>)
 80039d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80039dc:	eef1 7a67 	vneg.f32	s15, s15
 80039e0:	ee17 3a90 	vmov	r3, s15
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fc fd5f 	bl	80004a8 <__aeabi_f2d>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	ec43 2b10 	vmov	d0, r2, r3
 80039f2:	f00e fdb9 	bl	8012568 <cos>
 80039f6:	ec53 2b10 	vmov	r2, r3, d0
 80039fa:	4620      	mov	r0, r4
 80039fc:	4629      	mov	r1, r5
 80039fe:	f7fc fdab 	bl	8000558 <__aeabi_dmul>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4690      	mov	r8, r2
 8003a08:	4699      	mov	r9, r3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fd4b 	bl	80004a8 <__aeabi_f2d>
 8003a12:	4604      	mov	r4, r0
 8003a14:	460d      	mov	r5, r1
 8003a16:	4b46      	ldr	r3, [pc, #280]	; (8003b30 <StartCalculatingPoz+0x6c8>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fc fd44 	bl	80004a8 <__aeabi_f2d>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	ec43 2b10 	vmov	d0, r2, r3
 8003a28:	f00e fdee 	bl	8012608 <sin>
 8003a2c:	ec53 2b10 	vmov	r2, r3, d0
 8003a30:	4620      	mov	r0, r4
 8003a32:	4629      	mov	r1, r5
 8003a34:	f7fc fd90 	bl	8000558 <__aeabi_dmul>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4640      	mov	r0, r8
 8003a3e:	4649      	mov	r1, r9
 8003a40:	f7fc fbd2 	bl	80001e8 <__aeabi_dsub>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	f7fd f85c 	bl	8000b08 <__aeabi_d2f>
 8003a50:	4603      	mov	r3, r0
 8003a52:	61bb      	str	r3, [r7, #24]
		  az = ay*sin(-P.roll)+az*cos(P.roll);
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fc fd26 	bl	80004a8 <__aeabi_f2d>
 8003a5c:	4604      	mov	r4, r0
 8003a5e:	460d      	mov	r5, r1
 8003a60:	4b33      	ldr	r3, [pc, #204]	; (8003b30 <StartCalculatingPoz+0x6c8>)
 8003a62:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a66:	eef1 7a67 	vneg.f32	s15, s15
 8003a6a:	ee17 3a90 	vmov	r3, s15
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fc fd1a 	bl	80004a8 <__aeabi_f2d>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	ec43 2b10 	vmov	d0, r2, r3
 8003a7c:	f00e fdc4 	bl	8012608 <sin>
 8003a80:	ec53 2b10 	vmov	r2, r3, d0
 8003a84:	4620      	mov	r0, r4
 8003a86:	4629      	mov	r1, r5
 8003a88:	f7fc fd66 	bl	8000558 <__aeabi_dmul>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4690      	mov	r8, r2
 8003a92:	4699      	mov	r9, r3
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fc fd06 	bl	80004a8 <__aeabi_f2d>
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	460d      	mov	r5, r1
 8003aa0:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <StartCalculatingPoz+0x6c8>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fc fcff 	bl	80004a8 <__aeabi_f2d>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	ec43 2b10 	vmov	d0, r2, r3
 8003ab2:	f00e fd59 	bl	8012568 <cos>
 8003ab6:	ec53 2b10 	vmov	r2, r3, d0
 8003aba:	4620      	mov	r0, r4
 8003abc:	4629      	mov	r1, r5
 8003abe:	f7fc fd4b 	bl	8000558 <__aeabi_dmul>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4640      	mov	r0, r8
 8003ac8:	4649      	mov	r1, r9
 8003aca:	f7fc fb8f 	bl	80001ec <__adddf3>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f7fd f817 	bl	8000b08 <__aeabi_d2f>
 8003ada:	4603      	mov	r3, r0
 8003adc:	617b      	str	r3, [r7, #20]
		  //rotiraj vektor okoli Y za pitch
		  ax = ax*cos(-P.pitch)-az*sin(-P.pitch);
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fc fce1 	bl	80004a8 <__aeabi_f2d>
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	460d      	mov	r5, r1
 8003aea:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <StartCalculatingPoz+0x6c8>)
 8003aec:	edd3 7a01 	vldr	s15, [r3, #4]
 8003af0:	eef1 7a67 	vneg.f32	s15, s15
 8003af4:	ee17 3a90 	vmov	r3, s15
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fc fcd5 	bl	80004a8 <__aeabi_f2d>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	ec43 2b10 	vmov	d0, r2, r3
 8003b06:	f00e fd2f 	bl	8012568 <cos>
 8003b0a:	ec53 2b10 	vmov	r2, r3, d0
 8003b0e:	4620      	mov	r0, r4
 8003b10:	e010      	b.n	8003b34 <StartCalculatingPoz+0x6cc>
 8003b12:	bf00      	nop
 8003b14:	200051e8 	.word	0x200051e8
 8003b18:	3ac49ba6 	.word	0x3ac49ba6
 8003b1c:	00000000 	.word	0x00000000
 8003b20:	20000004 	.word	0x20000004
 8003b24:	2000021c 	.word	0x2000021c
 8003b28:	20000214 	.word	0x20000214
 8003b2c:	20000218 	.word	0x20000218
 8003b30:	200055ac 	.word	0x200055ac
 8003b34:	4629      	mov	r1, r5
 8003b36:	f7fc fd0f 	bl	8000558 <__aeabi_dmul>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4690      	mov	r8, r2
 8003b40:	4699      	mov	r9, r3
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fc fcaf 	bl	80004a8 <__aeabi_f2d>
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	460d      	mov	r5, r1
 8003b4e:	4b46      	ldr	r3, [pc, #280]	; (8003c68 <StartCalculatingPoz+0x800>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fc fca8 	bl	80004a8 <__aeabi_f2d>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	ec43 2b10 	vmov	d0, r2, r3
 8003b60:	f00e fd52 	bl	8012608 <sin>
 8003b64:	ec53 2b10 	vmov	r2, r3, d0
 8003b68:	4620      	mov	r0, r4
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	f7fc fcf4 	bl	8000558 <__aeabi_dmul>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4640      	mov	r0, r8
 8003b76:	4649      	mov	r1, r9
 8003b78:	f7fc fb38 	bl	80001ec <__adddf3>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4610      	mov	r0, r2
 8003b82:	4619      	mov	r1, r3
 8003b84:	f7fc ffc0 	bl	8000b08 <__aeabi_d2f>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	61fb      	str	r3, [r7, #28]
		  az = -ax*sin(-P.pitch)+az*cos(-P.pitch);
 8003b8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b90:	eef1 7a67 	vneg.f32	s15, s15
 8003b94:	ee17 3a90 	vmov	r3, s15
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fc fc85 	bl	80004a8 <__aeabi_f2d>
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	460d      	mov	r5, r1
 8003ba2:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <StartCalculatingPoz+0x800>)
 8003ba4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ba8:	eef1 7a67 	vneg.f32	s15, s15
 8003bac:	ee17 3a90 	vmov	r3, s15
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fc fc79 	bl	80004a8 <__aeabi_f2d>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	ec43 2b10 	vmov	d0, r2, r3
 8003bbe:	f00e fd23 	bl	8012608 <sin>
 8003bc2:	ec53 2b10 	vmov	r2, r3, d0
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	4629      	mov	r1, r5
 8003bca:	f7fc fcc5 	bl	8000558 <__aeabi_dmul>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4690      	mov	r8, r2
 8003bd4:	4699      	mov	r9, r3
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fc fc65 	bl	80004a8 <__aeabi_f2d>
 8003bde:	4604      	mov	r4, r0
 8003be0:	460d      	mov	r5, r1
 8003be2:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <StartCalculatingPoz+0x800>)
 8003be4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003be8:	eef1 7a67 	vneg.f32	s15, s15
 8003bec:	ee17 3a90 	vmov	r3, s15
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fc fc59 	bl	80004a8 <__aeabi_f2d>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	ec43 2b10 	vmov	d0, r2, r3
 8003bfe:	f00e fcb3 	bl	8012568 <cos>
 8003c02:	ec53 2b10 	vmov	r2, r3, d0
 8003c06:	4620      	mov	r0, r4
 8003c08:	4629      	mov	r1, r5
 8003c0a:	f7fc fca5 	bl	8000558 <__aeabi_dmul>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4640      	mov	r0, r8
 8003c14:	4649      	mov	r1, r9
 8003c16:	f7fc fae9 	bl	80001ec <__adddf3>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	f7fc ff71 	bl	8000b08 <__aeabi_d2f>
 8003c26:	4603      	mov	r3, r0
 8003c28:	617b      	str	r3, [r7, #20]
			  Yold = P.pozY;
		  }
		  */


		  P.magX = ax;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	4a0e      	ldr	r2, [pc, #56]	; (8003c68 <StartCalculatingPoz+0x800>)
 8003c2e:	6293      	str	r3, [r2, #40]	; 0x28
		  P.magY = ay;
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	4a0d      	ldr	r2, [pc, #52]	; (8003c68 <StartCalculatingPoz+0x800>)
 8003c34:	62d3      	str	r3, [r2, #44]	; 0x2c
		  P.magZ = az;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	4a0b      	ldr	r2, [pc, #44]	; (8003c68 <StartCalculatingPoz+0x800>)
 8003c3a:	6313      	str	r3, [r2, #48]	; 0x30

		  for(int n=4; n<52; n++){ //pripravi podatke za spi
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c40:	e00a      	b.n	8003c58 <StartCalculatingPoz+0x7f0>
			  I2CTxData[n-4] = ((uint8_t*)&P)[n];
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	4a08      	ldr	r2, [pc, #32]	; (8003c68 <StartCalculatingPoz+0x800>)
 8003c46:	441a      	add	r2, r3
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4a:	3b04      	subs	r3, #4
 8003c4c:	7811      	ldrb	r1, [r2, #0]
 8003c4e:	4a07      	ldr	r2, [pc, #28]	; (8003c6c <StartCalculatingPoz+0x804>)
 8003c50:	54d1      	strb	r1, [r2, r3]
		  for(int n=4; n<52; n++){ //pripravi podatke za spi
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	3301      	adds	r3, #1
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5a:	2b33      	cmp	r3, #51	; 0x33
 8003c5c:	ddf1      	ble.n	8003c42 <StartCalculatingPoz+0x7da>
		  }

	  }

	  osDelay(1);
 8003c5e:	2001      	movs	r0, #1
 8003c60:	f00b fab2 	bl	800f1c8 <osDelay>
	  if(MagReady){
 8003c64:	e407      	b.n	8003476 <StartCalculatingPoz+0xe>
 8003c66:	bf00      	nop
 8003c68:	200055ac 	.word	0x200055ac
 8003c6c:	200055e4 	.word	0x200055e4

08003c70 <StartRecivingCommandsNRF24>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecivingCommandsNRF24 */
void StartRecivingCommandsNRF24(void *argument)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRecivingCommandsNRF24 */
  /* Infinite loop */
  for(;;)
  {
	  if(nRF24_dataReady && nRF24_status){
 8003c78:	4b64      	ldr	r3, [pc, #400]	; (8003e0c <StartRecivingCommandsNRF24+0x19c>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 80c0 	beq.w	8003e04 <StartRecivingCommandsNRF24+0x194>
 8003c84:	4b62      	ldr	r3, [pc, #392]	; (8003e10 <StartRecivingCommandsNRF24+0x1a0>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80ba 	beq.w	8003e04 <StartRecivingCommandsNRF24+0x194>
		  uint8_t status = nRF24_GetStatus();
 8003c90:	f000 fcdd 	bl	800464e <nRF24_GetStatus>
 8003c94:	4603      	mov	r3, r0
 8003c96:	73fb      	strb	r3, [r7, #15]
		  nRF24_ClearIRQFlags();
 8003c98:	f000 fcf1 	bl	800467e <nRF24_ClearIRQFlags>
		  nRF24_dataReady = 0;
 8003c9c:	4b5b      	ldr	r3, [pc, #364]	; (8003e0c <StartRecivingCommandsNRF24+0x19c>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
		  if (status != nRF24_STATUS_RXFIFO_EMPTY) {
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	f000 80ad 	beq.w	8003e04 <StartRecivingCommandsNRF24+0x194>
			  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);

			  pipe = nRF24_ReadPayload((uint8_t*)(&robotPay), &payload_length);
 8003caa:	495a      	ldr	r1, [pc, #360]	; (8003e14 <StartRecivingCommandsNRF24+0x1a4>)
 8003cac:	485a      	ldr	r0, [pc, #360]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003cae:	f000 fd57 	bl	8004760 <nRF24_ReadPayload>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4b59      	ldr	r3, [pc, #356]	; (8003e1c <StartRecivingCommandsNRF24+0x1ac>)
 8003cb8:	701a      	strb	r2, [r3, #0]
			  nRF24_ClearIRQFlags();
 8003cba:	f000 fce0 	bl	800467e <nRF24_ClearIRQFlags>

			  uint8_t CRC_calc = (robotPay.x1 + robotPay.y1 + robotPay.x2 + robotPay.y2 + robotPay.speed);
 8003cbe:	4b56      	ldr	r3, [pc, #344]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003cc0:	f993 3000 	ldrsb.w	r3, [r3]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	4b54      	ldr	r3, [pc, #336]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003cc8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	4413      	add	r3, r2
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4b51      	ldr	r3, [pc, #324]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003cd4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	4b4e      	ldr	r3, [pc, #312]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003ce0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	4b4b      	ldr	r3, [pc, #300]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003cec:	791b      	ldrb	r3, [r3, #4]
 8003cee:	4413      	add	r3, r2
 8003cf0:	73bb      	strb	r3, [r7, #14]
			  if(robotPay.crc == CRC_calc){
 8003cf2:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003cf4:	795b      	ldrb	r3, [r3, #5]
 8003cf6:	7bba      	ldrb	r2, [r7, #14]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	f040 8083 	bne.w	8003e04 <StartRecivingCommandsNRF24+0x194>
				  //uporabi podatke
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d04:	4846      	ldr	r0, [pc, #280]	; (8003e20 <StartRecivingCommandsNRF24+0x1b0>)
 8003d06:	f001 ff2b 	bl	8005b60 <HAL_GPIO_WritePin>

				  timeSinceLastCommand = HAL_GetTick();
 8003d0a:	f001 fc4b 	bl	80055a4 <HAL_GetTick>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4a44      	ldr	r2, [pc, #272]	; (8003e24 <StartRecivingCommandsNRF24+0x1b4>)
 8003d12:	6013      	str	r3, [r2, #0]
				  float speed = SPEEDMOD*(float)robotPay.speed/255;
 8003d14:	4b40      	ldr	r3, [pc, #256]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003d16:	791b      	ldrb	r3, [r3, #4]
 8003d18:	ee07 3a90 	vmov	s15, r3
 8003d1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d20:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003e28 <StartRecivingCommandsNRF24+0x1b8>
 8003d24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d28:	edc7 7a02 	vstr	s15, [r7, #8]
				  motorRF.targetVel = speed*(float)(robotPay.y1-robotPay.x1+robotPay.x2)/128;
 8003d2c:	4b3a      	ldr	r3, [pc, #232]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003d2e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003d32:	461a      	mov	r2, r3
 8003d34:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003d36:	f993 3000 	ldrsb.w	r3, [r3]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	4a36      	ldr	r2, [pc, #216]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003d3e:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8003d42:	4413      	add	r3, r2
 8003d44:	ee07 3a90 	vmov	s15, r3
 8003d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d54:	eddf 6a35 	vldr	s13, [pc, #212]	; 8003e2c <StartRecivingCommandsNRF24+0x1bc>
 8003d58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d5c:	4b34      	ldr	r3, [pc, #208]	; (8003e30 <StartRecivingCommandsNRF24+0x1c0>)
 8003d5e:	edc3 7a03 	vstr	s15, [r3, #12]
				  motorLF.targetVel = speed*(float)(robotPay.y1+robotPay.x1-robotPay.x2)/128;
 8003d62:	4b2d      	ldr	r3, [pc, #180]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003d64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b2b      	ldr	r3, [pc, #172]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003d6c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d70:	4413      	add	r3, r2
 8003d72:	4a29      	ldr	r2, [pc, #164]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003d74:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d82:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d8a:	eddf 6a28 	vldr	s13, [pc, #160]	; 8003e2c <StartRecivingCommandsNRF24+0x1bc>
 8003d8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d92:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <StartRecivingCommandsNRF24+0x1c4>)
 8003d94:	edc3 7a03 	vstr	s15, [r3, #12]
				  motorLB.targetVel = speed*(float)(robotPay.y1+robotPay.x1+robotPay.x2)/128;
 8003d98:	4b1f      	ldr	r3, [pc, #124]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003d9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003da2:	f993 3000 	ldrsb.w	r3, [r3]
 8003da6:	4413      	add	r3, r2
 8003da8:	4a1b      	ldr	r2, [pc, #108]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003daa:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8003dae:	4413      	add	r3, r2
 8003db0:	ee07 3a90 	vmov	s15, r3
 8003db4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003db8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dc0:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003e2c <StartRecivingCommandsNRF24+0x1bc>
 8003dc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dc8:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <StartRecivingCommandsNRF24+0x1c8>)
 8003dca:	edc3 7a03 	vstr	s15, [r3, #12]
				  motorRB.targetVel = speed*(float)(robotPay.y1-robotPay.x1-robotPay.x2)/128;
 8003dce:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003dd0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003dd8:	f993 3000 	ldrsb.w	r3, [r3]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	4a0e      	ldr	r2, [pc, #56]	; (8003e18 <StartRecivingCommandsNRF24+0x1a8>)
 8003de0:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dee:	edd7 7a02 	vldr	s15, [r7, #8]
 8003df2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003df6:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003e2c <StartRecivingCommandsNRF24+0x1bc>
 8003dfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <StartRecivingCommandsNRF24+0x1cc>)
 8003e00:	edc3 7a03 	vstr	s15, [r3, #12]
				  motorLB.targetVel = speed*(float)(robotPay.x2)/128;
				  */
			  }
		  }
	  }
	  osDelay(50);
 8003e04:	2032      	movs	r0, #50	; 0x32
 8003e06:	f00b f9df 	bl	800f1c8 <osDelay>
	  if(nRF24_dataReady && nRF24_status){
 8003e0a:	e735      	b.n	8003c78 <StartRecivingCommandsNRF24+0x8>
 8003e0c:	20000220 	.word	0x20000220
 8003e10:	20000221 	.word	0x20000221
 8003e14:	20000008 	.word	0x20000008
 8003e18:	20004f8c 	.word	0x20004f8c
 8003e1c:	200057dc 	.word	0x200057dc
 8003e20:	40020c00 	.word	0x40020c00
 8003e24:	20000238 	.word	0x20000238
 8003e28:	437f0000 	.word	0x437f0000
 8003e2c:	43000000 	.word	0x43000000
 8003e30:	20005560 	.word	0x20005560
 8003e34:	200051f0 	.word	0x200051f0
 8003e38:	20005014 	.word	0x20005014
 8003e3c:	20005494 	.word	0x20005494

08003e40 <StartMotorControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorControl */
void StartMotorControl(void *argument)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorControl */
  /* Infinite loop */
  for(;;)
  {
	  if((HAL_GetTick() - timeSinceLastCommand)>200){
 8003e48:	f001 fbac 	bl	80055a4 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	4b29      	ldr	r3, [pc, #164]	; (8003ef4 <StartMotorControl+0xb4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2bc8      	cmp	r3, #200	; 0xc8
 8003e56:	d935      	bls.n	8003ec4 <StartMotorControl+0x84>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e5e:	4826      	ldr	r0, [pc, #152]	; (8003ef8 <StartMotorControl+0xb8>)
 8003e60:	f001 fe7e 	bl	8005b60 <HAL_GPIO_WritePin>
		  nastaviMotor(RF,0); motorRF.integralError = 0; motorRF.targetVel = 0;
 8003e64:	2100      	movs	r1, #0
 8003e66:	2000      	movs	r0, #0
 8003e68:	f000 fe46 	bl	8004af8 <nastaviMotor>
 8003e6c:	4b23      	ldr	r3, [pc, #140]	; (8003efc <StartMotorControl+0xbc>)
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	619a      	str	r2, [r3, #24]
 8003e74:	4b21      	ldr	r3, [pc, #132]	; (8003efc <StartMotorControl+0xbc>)
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	60da      	str	r2, [r3, #12]
		  nastaviMotor(LF,0); motorLF.integralError = 0; motorLF.targetVel = 0;
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	2003      	movs	r0, #3
 8003e80:	f000 fe3a 	bl	8004af8 <nastaviMotor>
 8003e84:	4b1e      	ldr	r3, [pc, #120]	; (8003f00 <StartMotorControl+0xc0>)
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	619a      	str	r2, [r3, #24]
 8003e8c:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <StartMotorControl+0xc0>)
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	60da      	str	r2, [r3, #12]
		  nastaviMotor(LB,0); motorLB.integralError = 0; motorLB.targetVel = 0;
 8003e94:	2100      	movs	r1, #0
 8003e96:	2002      	movs	r0, #2
 8003e98:	f000 fe2e 	bl	8004af8 <nastaviMotor>
 8003e9c:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <StartMotorControl+0xc4>)
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	619a      	str	r2, [r3, #24]
 8003ea4:	4b17      	ldr	r3, [pc, #92]	; (8003f04 <StartMotorControl+0xc4>)
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	60da      	str	r2, [r3, #12]
		  nastaviMotor(RB,0); motorRB.integralError = 0; motorRB.targetVel = 0;
 8003eac:	2100      	movs	r1, #0
 8003eae:	2001      	movs	r0, #1
 8003eb0:	f000 fe22 	bl	8004af8 <nastaviMotor>
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <StartMotorControl+0xc8>)
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	619a      	str	r2, [r3, #24]
 8003ebc:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <StartMotorControl+0xc8>)
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	60da      	str	r2, [r3, #12]
	  }
	  speedControl(&motorLB,0.01);
 8003ec4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003f0c <StartMotorControl+0xcc>
 8003ec8:	480e      	ldr	r0, [pc, #56]	; (8003f04 <StartMotorControl+0xc4>)
 8003eca:	f7fe fb35 	bl	8002538 <speedControl>
	  speedControl(&motorLF,0.01);
 8003ece:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8003f0c <StartMotorControl+0xcc>
 8003ed2:	480b      	ldr	r0, [pc, #44]	; (8003f00 <StartMotorControl+0xc0>)
 8003ed4:	f7fe fb30 	bl	8002538 <speedControl>
	  speedControl(&motorRB,0.01);
 8003ed8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003f0c <StartMotorControl+0xcc>
 8003edc:	480a      	ldr	r0, [pc, #40]	; (8003f08 <StartMotorControl+0xc8>)
 8003ede:	f7fe fb2b 	bl	8002538 <speedControl>
	  speedControl(&motorRF,0.01);
 8003ee2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8003f0c <StartMotorControl+0xcc>
 8003ee6:	4805      	ldr	r0, [pc, #20]	; (8003efc <StartMotorControl+0xbc>)
 8003ee8:	f7fe fb26 	bl	8002538 <speedControl>
	  osDelay(10);
 8003eec:	200a      	movs	r0, #10
 8003eee:	f00b f96b 	bl	800f1c8 <osDelay>
	  if((HAL_GetTick() - timeSinceLastCommand)>200){
 8003ef2:	e7a9      	b.n	8003e48 <StartMotorControl+0x8>
 8003ef4:	20000238 	.word	0x20000238
 8003ef8:	40020c00 	.word	0x40020c00
 8003efc:	20005560 	.word	0x20005560
 8003f00:	200051f0 	.word	0x200051f0
 8003f04:	20005014 	.word	0x20005014
 8003f08:	20005494 	.word	0x20005494
 8003f0c:	3c23d70a 	.word	0x3c23d70a

08003f10 <StartCalculatingPath>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCalculatingPath */
void StartCalculatingPath(void *argument)
{
 8003f10:	b5b0      	push	{r4, r5, r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCalculatingPath */
  /* Infinite loop */
  for(;;)
  {

	  int32_t sum = (motorRF.poz - motorRFprevPoz)+(motorLF.poz - motorLFprevPoz)+(motorLB.poz - motorLBprevPoz);
 8003f18:	4b49      	ldr	r3, [pc, #292]	; (8004040 <StartCalculatingPath+0x130>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b49      	ldr	r3, [pc, #292]	; (8004044 <StartCalculatingPath+0x134>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	1ad2      	subs	r2, r2, r3
 8003f22:	4b49      	ldr	r3, [pc, #292]	; (8004048 <StartCalculatingPath+0x138>)
 8003f24:	6819      	ldr	r1, [r3, #0]
 8003f26:	4b49      	ldr	r3, [pc, #292]	; (800404c <StartCalculatingPath+0x13c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	1acb      	subs	r3, r1, r3
 8003f2c:	441a      	add	r2, r3
 8003f2e:	4b48      	ldr	r3, [pc, #288]	; (8004050 <StartCalculatingPath+0x140>)
 8003f30:	6819      	ldr	r1, [r3, #0]
 8003f32:	4b48      	ldr	r3, [pc, #288]	; (8004054 <StartCalculatingPath+0x144>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	1acb      	subs	r3, r1, r3
 8003f38:	4413      	add	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
	  float pot = (float)(sum)/3;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f46:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003f4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f4e:	edc7 7a02 	vstr	s15, [r7, #8]
	  pot *= PI*0.003f;
 8003f52:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f56:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004058 <StartCalculatingPath+0x148>
 8003f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f5e:	edc7 7a02 	vstr	s15, [r7, #8]
	  motorRFprevPoz = motorRF.poz;
 8003f62:	4b37      	ldr	r3, [pc, #220]	; (8004040 <StartCalculatingPath+0x130>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a37      	ldr	r2, [pc, #220]	; (8004044 <StartCalculatingPath+0x134>)
 8003f68:	6013      	str	r3, [r2, #0]
	  motorRBprevPoz = motorRB.poz;
 8003f6a:	4b3c      	ldr	r3, [pc, #240]	; (800405c <StartCalculatingPath+0x14c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a3c      	ldr	r2, [pc, #240]	; (8004060 <StartCalculatingPath+0x150>)
 8003f70:	6013      	str	r3, [r2, #0]
	  motorLFprevPoz = motorLF.poz;
 8003f72:	4b35      	ldr	r3, [pc, #212]	; (8004048 <StartCalculatingPath+0x138>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a35      	ldr	r2, [pc, #212]	; (800404c <StartCalculatingPath+0x13c>)
 8003f78:	6013      	str	r3, [r2, #0]
	  motorLBprevPoz = motorLB.poz;
 8003f7a:	4b35      	ldr	r3, [pc, #212]	; (8004050 <StartCalculatingPath+0x140>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a35      	ldr	r2, [pc, #212]	; (8004054 <StartCalculatingPath+0x144>)
 8003f80:	6013      	str	r3, [r2, #0]
	  P.pozX += cos(P.heading) * pot;
 8003f82:	4b38      	ldr	r3, [pc, #224]	; (8004064 <StartCalculatingPath+0x154>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fc fa8e 	bl	80004a8 <__aeabi_f2d>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	ec43 2b10 	vmov	d0, r2, r3
 8003f94:	f00e fae8 	bl	8012568 <cos>
 8003f98:	ec55 4b10 	vmov	r4, r5, d0
 8003f9c:	68b8      	ldr	r0, [r7, #8]
 8003f9e:	f7fc fa83 	bl	80004a8 <__aeabi_f2d>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	4629      	mov	r1, r5
 8003faa:	f7fc fad5 	bl	8000558 <__aeabi_dmul>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4614      	mov	r4, r2
 8003fb4:	461d      	mov	r5, r3
 8003fb6:	4b2b      	ldr	r3, [pc, #172]	; (8004064 <StartCalculatingPath+0x154>)
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fc fa74 	bl	80004a8 <__aeabi_f2d>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	f7fc f910 	bl	80001ec <__adddf3>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	f7fc fd98 	bl	8000b08 <__aeabi_d2f>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	4a22      	ldr	r2, [pc, #136]	; (8004064 <StartCalculatingPath+0x154>)
 8003fdc:	6213      	str	r3, [r2, #32]
	  P.pozY -= sin(P.heading) * pot;
 8003fde:	4b21      	ldr	r3, [pc, #132]	; (8004064 <StartCalculatingPath+0x154>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc fa60 	bl	80004a8 <__aeabi_f2d>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	ec43 2b10 	vmov	d0, r2, r3
 8003ff0:	f00e fb0a 	bl	8012608 <sin>
 8003ff4:	ec55 4b10 	vmov	r4, r5, d0
 8003ff8:	68b8      	ldr	r0, [r7, #8]
 8003ffa:	f7fc fa55 	bl	80004a8 <__aeabi_f2d>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4620      	mov	r0, r4
 8004004:	4629      	mov	r1, r5
 8004006:	f7fc faa7 	bl	8000558 <__aeabi_dmul>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4614      	mov	r4, r2
 8004010:	461d      	mov	r5, r3
 8004012:	4b14      	ldr	r3, [pc, #80]	; (8004064 <StartCalculatingPath+0x154>)
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	4618      	mov	r0, r3
 8004018:	f7fc fa46 	bl	80004a8 <__aeabi_f2d>
 800401c:	4622      	mov	r2, r4
 800401e:	462b      	mov	r3, r5
 8004020:	f7fc f8e2 	bl	80001e8 <__aeabi_dsub>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4610      	mov	r0, r2
 800402a:	4619      	mov	r1, r3
 800402c:	f7fc fd6c 	bl	8000b08 <__aeabi_d2f>
 8004030:	4603      	mov	r3, r0
 8004032:	4a0c      	ldr	r2, [pc, #48]	; (8004064 <StartCalculatingPath+0x154>)
 8004034:	6253      	str	r3, [r2, #36]	; 0x24
	  osDelay(100);
 8004036:	2064      	movs	r0, #100	; 0x64
 8004038:	f00b f8c6 	bl	800f1c8 <osDelay>
  {
 800403c:	e76c      	b.n	8003f18 <StartCalculatingPath+0x8>
 800403e:	bf00      	nop
 8004040:	20005560 	.word	0x20005560
 8004044:	20000228 	.word	0x20000228
 8004048:	200051f0 	.word	0x200051f0
 800404c:	2000022c 	.word	0x2000022c
 8004050:	20005014 	.word	0x20005014
 8004054:	20000234 	.word	0x20000234
 8004058:	3c1a6a63 	.word	0x3c1a6a63
 800405c:	20005494 	.word	0x20005494
 8004060:	20000230 	.word	0x20000230
 8004064:	200055ac 	.word	0x200055ac

08004068 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a04      	ldr	r2, [pc, #16]	; (8004088 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800407a:	f001 fa7f 	bl	800557c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40014800 	.word	0x40014800

0800408c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004090:	b672      	cpsid	i
}
 8004092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8004094:	2200      	movs	r2, #0
 8004096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800409a:	4815      	ldr	r0, [pc, #84]	; (80040f0 <Error_Handler+0x64>)
 800409c:	f001 fd60 	bl	8005b60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80040a0:	2201      	movs	r2, #1
 80040a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040a6:	4812      	ldr	r0, [pc, #72]	; (80040f0 <Error_Handler+0x64>)
 80040a8:	f001 fd5a 	bl	8005b60 <HAL_GPIO_WritePin>
  nastaviMotor(RF,0); motorRF.integralError = 0;
 80040ac:	2100      	movs	r1, #0
 80040ae:	2000      	movs	r0, #0
 80040b0:	f000 fd22 	bl	8004af8 <nastaviMotor>
 80040b4:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <Error_Handler+0x68>)
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	619a      	str	r2, [r3, #24]
  nastaviMotor(LF,0); motorLF.integralError = 0;
 80040bc:	2100      	movs	r1, #0
 80040be:	2003      	movs	r0, #3
 80040c0:	f000 fd1a 	bl	8004af8 <nastaviMotor>
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <Error_Handler+0x6c>)
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	619a      	str	r2, [r3, #24]
  nastaviMotor(LB,0); motorLB.integralError = 0;
 80040cc:	2100      	movs	r1, #0
 80040ce:	2002      	movs	r0, #2
 80040d0:	f000 fd12 	bl	8004af8 <nastaviMotor>
 80040d4:	4b09      	ldr	r3, [pc, #36]	; (80040fc <Error_Handler+0x70>)
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	619a      	str	r2, [r3, #24]
  nastaviMotor(RB,0); motorRB.integralError = 0;
 80040dc:	2100      	movs	r1, #0
 80040de:	2001      	movs	r0, #1
 80040e0:	f000 fd0a 	bl	8004af8 <nastaviMotor>
 80040e4:	4b06      	ldr	r3, [pc, #24]	; (8004100 <Error_Handler+0x74>)
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	619a      	str	r2, [r3, #24]
  while (1)
 80040ec:	e7fe      	b.n	80040ec <Error_Handler+0x60>
 80040ee:	bf00      	nop
 80040f0:	40020c00 	.word	0x40020c00
 80040f4:	20005560 	.word	0x20005560
 80040f8:	200051f0 	.word	0x200051f0
 80040fc:	20005014 	.word	0x20005014
 8004100:	20005494 	.word	0x20005494

08004104 <nRF24_CSN_L>:

static inline void nRF24_CSN_L() {
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8004108:	2200      	movs	r2, #0
 800410a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800410e:	4802      	ldr	r0, [pc, #8]	; (8004118 <nRF24_CSN_L+0x14>)
 8004110:	f001 fd26 	bl	8005b60 <HAL_GPIO_WritePin>
}
 8004114:	bf00      	nop
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40020c00 	.word	0x40020c00

0800411c <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8004120:	2201      	movs	r2, #1
 8004122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004126:	4802      	ldr	r0, [pc, #8]	; (8004130 <nRF24_CSN_H+0x14>)
 8004128:	f001 fd1a 	bl	8005b60 <HAL_GPIO_WritePin>
}
 800412c:	bf00      	nop
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40020c00 	.word	0x40020c00

08004134 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af02      	add	r7, sp, #8
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi2,&data,&result,1,2000)!=HAL_OK) {  //<-spi handle --------change
 800413e:	f107 020f 	add.w	r2, r7, #15
 8004142:	1df9      	adds	r1, r7, #7
 8004144:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	2301      	movs	r3, #1
 800414c:	4806      	ldr	r0, [pc, #24]	; (8004168 <nRF24_LL_RW+0x34>)
 800414e:	f006 fc21 	bl	800a994 <HAL_SPI_TransmitReceive>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <nRF24_LL_RW+0x28>
        Error_Handler();
 8004158:	f7ff ff98 	bl	800408c <Error_Handler>
    };
    return result;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	200056a0 	.word	0x200056a0

0800416c <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8004176:	f7ff ffc5 	bl	8004104 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	b2db      	uxtb	r3, r3
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff ffd6 	bl	8004134 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8004188:	20ff      	movs	r0, #255	; 0xff
 800418a:	f7ff ffd3 	bl	8004134 <nRF24_LL_RW>
 800418e:	4603      	mov	r3, r0
 8004190:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8004192:	f7ff ffc3 	bl	800411c <nRF24_CSN_H>

	return value;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	460a      	mov	r2, r1
 80041aa:	71fb      	strb	r3, [r7, #7]
 80041ac:	4613      	mov	r3, r2
 80041ae:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80041b0:	f7ff ffa8 	bl	8004104 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	2b1f      	cmp	r3, #31
 80041b8:	d810      	bhi.n	80041dc <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	b25b      	sxtb	r3, r3
 80041c4:	f043 0320 	orr.w	r3, r3, #32
 80041c8:	b25b      	sxtb	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff ffb1 	bl	8004134 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 80041d2:	79bb      	ldrb	r3, [r7, #6]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff ffad 	bl	8004134 <nRF24_LL_RW>
 80041da:	e013      	b.n	8004204 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff ffa8 	bl	8004134 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	2be1      	cmp	r3, #225	; 0xe1
 80041e8:	d00c      	beq.n	8004204 <nRF24_WriteReg+0x64>
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	2be2      	cmp	r3, #226	; 0xe2
 80041ee:	d009      	beq.n	8004204 <nRF24_WriteReg+0x64>
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	2be3      	cmp	r3, #227	; 0xe3
 80041f4:	d006      	beq.n	8004204 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	2bff      	cmp	r3, #255	; 0xff
 80041fa:	d003      	beq.n	8004204 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 80041fc:	79bb      	ldrb	r3, [r7, #6]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff ff98 	bl	8004134 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8004204:	f7ff ff8a 	bl	800411c <nRF24_CSN_H>
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	6039      	str	r1, [r7, #0]
 800421a:	71fb      	strb	r3, [r7, #7]
 800421c:	4613      	mov	r3, r2
 800421e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8004220:	f7ff ff70 	bl	8004104 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff ff84 	bl	8004134 <nRF24_LL_RW>
	while (count--) {
 800422c:	e007      	b.n	800423e <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 800422e:	683c      	ldr	r4, [r7, #0]
 8004230:	1c63      	adds	r3, r4, #1
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	20ff      	movs	r0, #255	; 0xff
 8004236:	f7ff ff7d 	bl	8004134 <nRF24_LL_RW>
 800423a:	4603      	mov	r3, r0
 800423c:	7023      	strb	r3, [r4, #0]
	while (count--) {
 800423e:	79bb      	ldrb	r3, [r7, #6]
 8004240:	1e5a      	subs	r2, r3, #1
 8004242:	71ba      	strb	r2, [r7, #6]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f2      	bne.n	800422e <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8004248:	f7ff ff68 	bl	800411c <nRF24_CSN_H>
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	bd90      	pop	{r4, r7, pc}

08004254 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	6039      	str	r1, [r7, #0]
 800425e:	71fb      	strb	r3, [r7, #7]
 8004260:	4613      	mov	r3, r2
 8004262:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8004264:	f7ff ff4e 	bl	8004104 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ff62 	bl	8004134 <nRF24_LL_RW>
	while (count--) {
 8004270:	e006      	b.n	8004280 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	603a      	str	r2, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff ff5a 	bl	8004134 <nRF24_LL_RW>
	while (count--) {
 8004280:	79bb      	ldrb	r3, [r7, #6]
 8004282:	1e5a      	subs	r2, r3, #1
 8004284:	71ba      	strb	r2, [r7, #6]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f3      	bne.n	8004272 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 800428a:	f7ff ff47 	bl	800411c <nRF24_CSN_H>
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8004296:	b580      	push	{r7, lr}
 8004298:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 800429a:	2108      	movs	r1, #8
 800429c:	2000      	movs	r0, #0
 800429e:	f7ff ff7f 	bl	80041a0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 80042a2:	213f      	movs	r1, #63	; 0x3f
 80042a4:	2001      	movs	r0, #1
 80042a6:	f7ff ff7b 	bl	80041a0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 80042aa:	2103      	movs	r1, #3
 80042ac:	2002      	movs	r0, #2
 80042ae:	f7ff ff77 	bl	80041a0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 80042b2:	2103      	movs	r1, #3
 80042b4:	2003      	movs	r0, #3
 80042b6:	f7ff ff73 	bl	80041a0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 80042ba:	2103      	movs	r1, #3
 80042bc:	2004      	movs	r0, #4
 80042be:	f7ff ff6f 	bl	80041a0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 80042c2:	2102      	movs	r1, #2
 80042c4:	2005      	movs	r0, #5
 80042c6:	f7ff ff6b 	bl	80041a0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 80042ca:	210e      	movs	r1, #14
 80042cc:	2006      	movs	r0, #6
 80042ce:	f7ff ff67 	bl	80041a0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 80042d2:	2100      	movs	r1, #0
 80042d4:	2007      	movs	r0, #7
 80042d6:	f7ff ff63 	bl	80041a0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 80042da:	2100      	movs	r1, #0
 80042dc:	2011      	movs	r0, #17
 80042de:	f7ff ff5f 	bl	80041a0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 80042e2:	2100      	movs	r1, #0
 80042e4:	2012      	movs	r0, #18
 80042e6:	f7ff ff5b 	bl	80041a0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 80042ea:	2100      	movs	r1, #0
 80042ec:	2013      	movs	r0, #19
 80042ee:	f7ff ff57 	bl	80041a0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 80042f2:	2100      	movs	r1, #0
 80042f4:	2014      	movs	r0, #20
 80042f6:	f7ff ff53 	bl	80041a0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 80042fa:	2100      	movs	r1, #0
 80042fc:	2015      	movs	r0, #21
 80042fe:	f7ff ff4f 	bl	80041a0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8004302:	2100      	movs	r1, #0
 8004304:	2016      	movs	r0, #22
 8004306:	f7ff ff4b 	bl	80041a0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 800430a:	2100      	movs	r1, #0
 800430c:	201c      	movs	r0, #28
 800430e:	f7ff ff47 	bl	80041a0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8004312:	2100      	movs	r1, #0
 8004314:	201d      	movs	r0, #29
 8004316:	f7ff ff43 	bl	80041a0 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 800431a:	f000 f9a8 	bl	800466e <nRF24_FlushRX>
	nRF24_FlushTX();
 800431e:	f000 f99e 	bl	800465e <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8004322:	f000 f9ac 	bl	800467e <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8004326:	f7ff fef9 	bl	800411c <nRF24_CSN_H>
}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8004336:	4b14      	ldr	r3, [pc, #80]	; (8004388 <nRF24_Check+0x58>)
 8004338:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 800433a:	2205      	movs	r2, #5
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	2030      	movs	r0, #48	; 0x30
 8004340:	f7ff ff88 	bl	8004254 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8004344:	463b      	mov	r3, r7
 8004346:	2205      	movs	r2, #5
 8004348:	4619      	mov	r1, r3
 800434a:	2010      	movs	r0, #16
 800434c:	f7ff ff60 	bl	8004210 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8004350:	2300      	movs	r3, #0
 8004352:	73fb      	strb	r3, [r7, #15]
 8004354:	e010      	b.n	8004378 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	f107 0210 	add.w	r2, r7, #16
 800435c:	4413      	add	r3, r2
 800435e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	1c59      	adds	r1, r3, #1
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d001      	beq.n	8004372 <nRF24_Check+0x42>
 800436e:	2300      	movs	r3, #0
 8004370:	e006      	b.n	8004380 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	3301      	adds	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	2b04      	cmp	r3, #4
 800437c:	d9eb      	bls.n	8004356 <nRF24_Check+0x26>
	}

	return 1;
 800437e:	2301      	movs	r3, #1
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	08014230 	.word	0x08014230

0800438c <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8004396:	2000      	movs	r0, #0
 8004398:	f7ff fee8 	bl	800416c <nRF24_ReadReg>
 800439c:	4603      	mov	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d104      	bne.n	80043b0 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	f043 0302 	orr.w	r3, r3, #2
 80043ac:	73fb      	strb	r3, [r7, #15]
 80043ae:	e003      	b.n	80043b8 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	f023 0302 	bic.w	r3, r3, #2
 80043b6:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	4619      	mov	r1, r3
 80043bc:	2000      	movs	r0, #0
 80043be:	f7ff feef 	bl	80041a0 <nRF24_WriteReg>
}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	4603      	mov	r3, r0
 80043d2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80043d4:	2000      	movs	r0, #0
 80043d6:	f7ff fec9 	bl	800416c <nRF24_ReadReg>
 80043da:	4603      	mov	r3, r0
 80043dc:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 80043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	b25a      	sxtb	r2, r3
 80043f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	b25b      	sxtb	r3, r3
 80043f8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	4619      	mov	r1, r3
 80043fe:	2000      	movs	r0, #0
 8004400:	f7ff fece 	bl	80041a0 <nRF24_WriteReg>
}
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8004416:	2000      	movs	r0, #0
 8004418:	f7ff fea8 	bl	800416c <nRF24_ReadReg>
 800441c:	4603      	mov	r3, r0
 800441e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	f023 030c 	bic.w	r3, r3, #12
 8004426:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8004428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	b25a      	sxtb	r2, r3
 8004432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004436:	4313      	orrs	r3, r2
 8004438:	b25b      	sxtb	r3, r3
 800443a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	4619      	mov	r1, r3
 8004440:	2000      	movs	r0, #0
 8004442:	f7ff fead 	bl	80041a0 <nRF24_WriteReg>
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	4603      	mov	r3, r0
 8004456:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	4619      	mov	r1, r3
 800445c:	2005      	movs	r0, #5
 800445e:	f7ff fe9f 	bl	80041a0 <nRF24_WriteReg>
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 800446a:	b580      	push	{r7, lr}
 800446c:	b082      	sub	sp, #8
 800446e:	af00      	add	r7, sp, #0
 8004470:	4603      	mov	r3, r0
 8004472:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	3b02      	subs	r3, #2
 8004478:	b2db      	uxtb	r3, r3
 800447a:	4619      	mov	r1, r3
 800447c:	2003      	movs	r0, #3
 800447e:	f7ff fe8f 	bl	80041a0 <nRF24_WriteReg>
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	6039      	str	r1, [r7, #0]
 8004496:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8004498:	79fb      	ldrb	r3, [r7, #7]
 800449a:	2b06      	cmp	r3, #6
 800449c:	d00a      	beq.n	80044b4 <nRF24_SetAddr+0x28>
 800449e:	2b06      	cmp	r3, #6
 80044a0:	dc36      	bgt.n	8004510 <nRF24_SetAddr+0x84>
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	dc02      	bgt.n	80044ac <nRF24_SetAddr+0x20>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	da04      	bge.n	80044b4 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 80044aa:	e031      	b.n	8004510 <nRF24_SetAddr+0x84>
 80044ac:	3b02      	subs	r3, #2
	switch (pipe) {
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d82e      	bhi.n	8004510 <nRF24_SetAddr+0x84>
 80044b2:	e023      	b.n	80044fc <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 80044b4:	2003      	movs	r0, #3
 80044b6:	f7ff fe59 	bl	800416c <nRF24_ReadReg>
 80044ba:	4603      	mov	r3, r0
 80044bc:	3301      	adds	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	4413      	add	r3, r2
 80044c6:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 80044c8:	f7ff fe1c 	bl	8004104 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	4a13      	ldr	r2, [pc, #76]	; (800451c <nRF24_SetAddr+0x90>)
 80044d0:	5cd3      	ldrb	r3, [r2, r3]
 80044d2:	f043 0320 	orr.w	r3, r3, #32
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fe2b 	bl	8004134 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	1e5a      	subs	r2, r3, #1
 80044e2:	603a      	str	r2, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fe24 	bl	8004134 <nRF24_LL_RW>
			} while (addr_width--);
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	1e5a      	subs	r2, r3, #1
 80044f0:	73fa      	strb	r2, [r7, #15]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f3      	bne.n	80044de <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 80044f6:	f7ff fe11 	bl	800411c <nRF24_CSN_H>
			break;
 80044fa:	e00a      	b.n	8004512 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	4a07      	ldr	r2, [pc, #28]	; (800451c <nRF24_SetAddr+0x90>)
 8004500:	5cd2      	ldrb	r2, [r2, r3]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	4619      	mov	r1, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f7ff fe49 	bl	80041a0 <nRF24_WriteReg>
			break;
 800450e:	e000      	b.n	8004512 <nRF24_SetAddr+0x86>
			break;
 8004510:	bf00      	nop
	}
}
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	0801432c 	.word	0x0801432c

08004520 <nRF24_SetDataRate>:
}

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800452a:	2006      	movs	r0, #6
 800452c:	f7ff fe1e 	bl	800416c <nRF24_ReadReg>
 8004530:	4603      	mov	r3, r0
 8004532:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800453a:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 800453c:	7bfa      	ldrb	r2, [r7, #15]
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	4313      	orrs	r3, r2
 8004542:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	4619      	mov	r1, r3
 8004548:	2006      	movs	r0, #6
 800454a:	f7ff fe29 	bl	80041a0 <nRF24_WriteReg>
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
 8004562:	460b      	mov	r3, r1
 8004564:	71bb      	strb	r3, [r7, #6]
 8004566:	4613      	mov	r3, r2
 8004568:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 800456a:	2002      	movs	r0, #2
 800456c:	f7ff fdfe 	bl	800416c <nRF24_ReadReg>
 8004570:	4603      	mov	r3, r0
 8004572:	b25a      	sxtb	r2, r3
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	2101      	movs	r1, #1
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	b25b      	sxtb	r3, r3
 800457e:	4313      	orrs	r3, r2
 8004580:	b25b      	sxtb	r3, r3
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004588:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	4619      	mov	r1, r3
 800458e:	2002      	movs	r0, #2
 8004590:	f7ff fe06 	bl	80041a0 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	4a19      	ldr	r2, [pc, #100]	; (80045fc <nRF24_SetRXPipe+0xa4>)
 8004598:	5cd2      	ldrb	r2, [r2, r3]
 800459a:	797b      	ldrb	r3, [r7, #5]
 800459c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	4619      	mov	r1, r3
 80045a4:	4610      	mov	r0, r2
 80045a6:	f7ff fdfb 	bl	80041a0 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 80045aa:	2001      	movs	r0, #1
 80045ac:	f7ff fdde 	bl	800416c <nRF24_ReadReg>
 80045b0:	4603      	mov	r3, r0
 80045b2:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 80045b4:	79bb      	ldrb	r3, [r7, #6]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d10a      	bne.n	80045d0 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	2201      	movs	r2, #1
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	b25a      	sxtb	r2, r3
 80045c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	b25b      	sxtb	r3, r3
 80045cc:	73fb      	strb	r3, [r7, #15]
 80045ce:	e00b      	b.n	80045e8 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	2201      	movs	r2, #1
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	b25b      	sxtb	r3, r3
 80045da:	43db      	mvns	r3, r3
 80045dc:	b25a      	sxtb	r2, r3
 80045de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045e2:	4013      	ands	r3, r2
 80045e4:	b25b      	sxtb	r3, r3
 80045e6:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	4619      	mov	r1, r3
 80045ec:	2001      	movs	r0, #1
 80045ee:	f7ff fdd7 	bl	80041a0 <nRF24_WriteReg>
}
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	08014324 	.word	0x08014324

08004600 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	2b05      	cmp	r3, #5
 800460e:	d904      	bls.n	800461a <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8004610:	2100      	movs	r1, #0
 8004612:	2001      	movs	r0, #1
 8004614:	f7ff fdc4 	bl	80041a0 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8004618:	e015      	b.n	8004646 <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 800461a:	2001      	movs	r0, #1
 800461c:	f7ff fda6 	bl	800416c <nRF24_ReadReg>
 8004620:	4603      	mov	r3, r0
 8004622:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	2201      	movs	r2, #1
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	b25b      	sxtb	r3, r3
 800462e:	43db      	mvns	r3, r3
 8004630:	b25a      	sxtb	r2, r3
 8004632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004636:	4013      	ands	r3, r2
 8004638:	b25b      	sxtb	r3, r3
 800463a:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	4619      	mov	r1, r3
 8004640:	2001      	movs	r0, #1
 8004642:	f7ff fdad 	bl	80041a0 <nRF24_WriteReg>
}
 8004646:	bf00      	nop
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 800464e:	b580      	push	{r7, lr}
 8004650:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8004652:	2007      	movs	r0, #7
 8004654:	f7ff fd8a 	bl	800416c <nRF24_ReadReg>
 8004658:	4603      	mov	r3, r0
}
 800465a:	4618      	mov	r0, r3
 800465c:	bd80      	pop	{r7, pc}

0800465e <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 800465e:	b580      	push	{r7, lr}
 8004660:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8004662:	21ff      	movs	r1, #255	; 0xff
 8004664:	20e1      	movs	r0, #225	; 0xe1
 8004666:	f7ff fd9b 	bl	80041a0 <nRF24_WriteReg>
}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}

0800466e <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 800466e:	b580      	push	{r7, lr}
 8004670:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8004672:	21ff      	movs	r1, #255	; 0xff
 8004674:	20e2      	movs	r0, #226	; 0xe2
 8004676:	f7ff fd93 	bl	80041a0 <nRF24_WriteReg>
}
 800467a:	bf00      	nop
 800467c:	bd80      	pop	{r7, pc}

0800467e <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8004684:	2007      	movs	r0, #7
 8004686:	f7ff fd71 	bl	800416c <nRF24_ReadReg>
 800468a:	4603      	mov	r3, r0
 800468c:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004694:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	4619      	mov	r1, r3
 800469a:	2007      	movs	r0, #7
 800469c:	f7ff fd80 	bl	80041a0 <nRF24_WriteReg>
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <nRF24_GetRxDplPayloadWidth>:
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

static uint8_t nRF24_GetRxDplPayloadWidth() {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 80046ae:	f7ff fd29 	bl	8004104 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 80046b2:	2060      	movs	r0, #96	; 0x60
 80046b4:	f7ff fd3e 	bl	8004134 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80046b8:	20ff      	movs	r0, #255	; 0xff
 80046ba:	f7ff fd3b 	bl	8004134 <nRF24_LL_RW>
 80046be:	4603      	mov	r3, r0
 80046c0:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 80046c2:	f7ff fd2b 	bl	800411c <nRF24_CSN_H>

	return value;
 80046c6:	79fb      	ldrb	r3, [r7, #7]

}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	4613      	mov	r3, r2
 80046dc:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80046de:	2007      	movs	r0, #7
 80046e0:	f7ff fd44 	bl	800416c <nRF24_ReadReg>
 80046e4:	4603      	mov	r3, r0
 80046e6:	105b      	asrs	r3, r3, #1
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 80046f0:	7dfb      	ldrb	r3, [r7, #23]
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d829      	bhi.n	800474a <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00f      	beq.n	800471c <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 80046fc:	f7ff ffd4 	bl	80046a8 <nRF24_GetRxDplPayloadWidth>
 8004700:	4603      	mov	r3, r0
 8004702:	461a      	mov	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b20      	cmp	r3, #32
 800470e:	d90f      	bls.n	8004730 <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8004716:	f7ff ffaa 	bl	800466e <nRF24_FlushRX>
 800471a:	e009      	b.n	8004730 <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 800471c:	7dfb      	ldrb	r3, [r7, #23]
 800471e:	4a0f      	ldr	r2, [pc, #60]	; (800475c <nRF24_ReadPayloadGeneric+0x8c>)
 8004720:	5cd3      	ldrb	r3, [r2, r3]
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fd22 	bl	800416c <nRF24_ReadReg>
 8004728:	4603      	mov	r3, r0
 800472a:	461a      	mov	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d006      	beq.n	8004746 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	68f9      	ldr	r1, [r7, #12]
 8004740:	2061      	movs	r0, #97	; 0x61
 8004742:	f7ff fd65 	bl	8004210 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8004746:	7dfb      	ldrb	r3, [r7, #23]
 8004748:	e003      	b.n	8004752 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2200      	movs	r2, #0
 800474e:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8004750:	23ff      	movs	r3, #255	; 0xff
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	08014324 	.word	0x08014324

08004760 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
 800476a:	2200      	movs	r2, #0
 800476c:	6839      	ldr	r1, [r7, #0]
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ffae 	bl	80046d0 <nRF24_ReadPayloadGeneric>
 8004774:	4603      	mov	r3, r0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <i2c1_pisiRegister>:
 *  Created on: Jan 5, 2022
 *      Author: ddomi
 */
#include "robotPeriferija.h"

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af04      	add	r7, sp, #16
 8004786:	4603      	mov	r3, r0
 8004788:	71fb      	strb	r3, [r7, #7]
 800478a:	460b      	mov	r3, r1
 800478c:	71bb      	strb	r3, [r7, #6]
 800478e:	4613      	mov	r3, r2
 8004790:	717b      	strb	r3, [r7, #5]
  naprava <<= 1;
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	71fb      	strb	r3, [r7, #7]
  return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	b299      	uxth	r1, r3
 800479c:	79bb      	ldrb	r3, [r7, #6]
 800479e:	b29a      	uxth	r2, r3
 80047a0:	230a      	movs	r3, #10
 80047a2:	9302      	str	r3, [sp, #8]
 80047a4:	2301      	movs	r3, #1
 80047a6:	9301      	str	r3, [sp, #4]
 80047a8:	1d7b      	adds	r3, r7, #5
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	2301      	movs	r3, #1
 80047ae:	4804      	ldr	r0, [pc, #16]	; (80047c0 <i2c1_pisiRegister+0x40>)
 80047b0:	f001 fd86 	bl	80062c0 <HAL_I2C_Mem_Write>
 80047b4:	4603      	mov	r3, r0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	200056f8 	.word	0x200056f8

080047c4 <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af04      	add	r7, sp, #16
 80047ca:	603a      	str	r2, [r7, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	4603      	mov	r3, r0
 80047d0:	71fb      	strb	r3, [r7, #7]
 80047d2:	460b      	mov	r3, r1
 80047d4:	71bb      	strb	r3, [r7, #6]
 80047d6:	4613      	mov	r3, r2
 80047d8:	717b      	strb	r3, [r7, #5]
  if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 80047da:	797b      	ldrb	r3, [r7, #5]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d906      	bls.n	80047ee <i2c1_beriRegistre+0x2a>
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	2b19      	cmp	r3, #25
 80047e4:	d103      	bne.n	80047ee <i2c1_beriRegistre+0x2a>
    reg |= 0x80;
 80047e6:	79bb      	ldrb	r3, [r7, #6]
 80047e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047ec:	71bb      	strb	r3, [r7, #6]
  naprava <<= 1;
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	b299      	uxth	r1, r3
 80047f8:	79bb      	ldrb	r3, [r7, #6]
 80047fa:	b298      	uxth	r0, r3
 80047fc:	797b      	ldrb	r3, [r7, #5]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	797a      	ldrb	r2, [r7, #5]
 8004802:	9202      	str	r2, [sp, #8]
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	2301      	movs	r3, #1
 800480c:	4602      	mov	r2, r0
 800480e:	4803      	ldr	r0, [pc, #12]	; (800481c <i2c1_beriRegistre+0x58>)
 8004810:	f001 fe50 	bl	80064b4 <HAL_I2C_Mem_Read>
}
 8004814:	bf00      	nop
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	200056f8 	.word	0x200056f8

08004820 <spi1_beriRegister>:

uint8_t spi1_beriRegister(uint8_t reg) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af02      	add	r7, sp, #8
 8004826:	4603      	mov	r3, r0
 8004828:	71fb      	strb	r3, [r7, #7]
	uint16_t buf_out, buf_in;
	reg |= 0x80; // najpomembnejsi bit na 1
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004830:	71fb      	strb	r3, [r7, #7]
	buf_out = reg; // little endian, se postavi na pravo mesto ....
 8004832:	79fb      	ldrb	r3, [r7, #7]
 8004834:	b29b      	uxth	r3, r3
 8004836:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8004838:	2200      	movs	r2, #0
 800483a:	2108      	movs	r1, #8
 800483c:	4812      	ldr	r0, [pc, #72]	; (8004888 <spi1_beriRegister+0x68>)
 800483e:	f001 f98f 	bl	8005b60 <HAL_GPIO_WritePin>
	//HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
	HAL_SPI_TransmitReceive(&hspi1, &((uint8_t*)&buf_out)[0], &((uint8_t*)&buf_in)[0], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 8004842:	f107 020c 	add.w	r2, r7, #12
 8004846:	f107 010e 	add.w	r1, r7, #14
 800484a:	2302      	movs	r3, #2
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	2301      	movs	r3, #1
 8004850:	480e      	ldr	r0, [pc, #56]	; (800488c <spi1_beriRegister+0x6c>)
 8004852:	f006 f89f 	bl	800a994 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, &((uint8_t*)&buf_out)[1], &((uint8_t*)&buf_in)[1], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 8004856:	f107 010e 	add.w	r1, r7, #14
 800485a:	3101      	adds	r1, #1
 800485c:	f107 020c 	add.w	r2, r7, #12
 8004860:	3201      	adds	r2, #1
 8004862:	2302      	movs	r3, #2
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	2301      	movs	r3, #1
 8004868:	4808      	ldr	r0, [pc, #32]	; (800488c <spi1_beriRegister+0x6c>)
 800486a:	f006 f893 	bl	800a994 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800486e:	2201      	movs	r2, #1
 8004870:	2108      	movs	r1, #8
 8004872:	4805      	ldr	r0, [pc, #20]	; (8004888 <spi1_beriRegister+0x68>)
 8004874:	f001 f974 	bl	8005b60 <HAL_GPIO_WritePin>
	return buf_in >> 8; // little endian...
 8004878:	89bb      	ldrh	r3, [r7, #12]
 800487a:	0a1b      	lsrs	r3, r3, #8
 800487c:	b29b      	uxth	r3, r3
 800487e:	b2db      	uxtb	r3, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40021000 	.word	0x40021000
 800488c:	2000584c 	.word	0x2000584c

08004890 <spi1_pisiRegister>:

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	460a      	mov	r2, r1
 800489a:	71fb      	strb	r3, [r7, #7]
 800489c:	4613      	mov	r3, r2
 800489e:	71bb      	strb	r3, [r7, #6]
  uint16_t buf_out;
  buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	b21a      	sxth	r2, r3
 80048a4:	79bb      	ldrb	r3, [r7, #6]
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	b21b      	sxth	r3, r3
 80048aa:	4313      	orrs	r3, r2
 80048ac:	b21b      	sxth	r3, r3
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	81fb      	strh	r3, [r7, #14]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80048b2:	2200      	movs	r2, #0
 80048b4:	2108      	movs	r1, #8
 80048b6:	480d      	ldr	r0, [pc, #52]	; (80048ec <spi1_pisiRegister+0x5c>)
 80048b8:	f001 f952 	bl	8005b60 <HAL_GPIO_WritePin>
  //HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
  HAL_SPI_Transmit(&hspi1, &((uint8_t*)&buf_out)[0], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 80048bc:	f107 010e 	add.w	r1, r7, #14
 80048c0:	2302      	movs	r3, #2
 80048c2:	2201      	movs	r2, #1
 80048c4:	480a      	ldr	r0, [pc, #40]	; (80048f0 <spi1_pisiRegister+0x60>)
 80048c6:	f005 fe18 	bl	800a4fa <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &((uint8_t*)&buf_out)[1], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 80048ca:	f107 010e 	add.w	r1, r7, #14
 80048ce:	3101      	adds	r1, #1
 80048d0:	2302      	movs	r3, #2
 80048d2:	2201      	movs	r2, #1
 80048d4:	4806      	ldr	r0, [pc, #24]	; (80048f0 <spi1_pisiRegister+0x60>)
 80048d6:	f005 fe10 	bl	800a4fa <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80048da:	2201      	movs	r2, #1
 80048dc:	2108      	movs	r1, #8
 80048de:	4803      	ldr	r0, [pc, #12]	; (80048ec <spi1_pisiRegister+0x5c>)
 80048e0:	f001 f93e 	bl	8005b60 <HAL_GPIO_WritePin>
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40021000 	.word	0x40021000
 80048f0:	2000584c 	.word	0x2000584c

080048f4 <spi1_beriRegistre>:

void spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	6039      	str	r1, [r7, #0]
 80048fe:	71fb      	strb	r3, [r7, #7]
 8004900:	4613      	mov	r3, r2
 8004902:	71bb      	strb	r3, [r7, #6]
  reg |= 0xC0; // najpomembnejsa bita na 1
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800490a:	b2db      	uxtb	r3, r3
 800490c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800490e:	2200      	movs	r2, #0
 8004910:	2108      	movs	r1, #8
 8004912:	480c      	ldr	r0, [pc, #48]	; (8004944 <spi1_beriRegistre+0x50>)
 8004914:	f001 f924 	bl	8005b60 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 8004918:	1df9      	adds	r1, r7, #7
 800491a:	230a      	movs	r3, #10
 800491c:	2201      	movs	r2, #1
 800491e:	480a      	ldr	r0, [pc, #40]	; (8004948 <spi1_beriRegistre+0x54>)
 8004920:	f005 fdeb 	bl	800a4fa <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 8004924:	79bb      	ldrb	r3, [r7, #6]
 8004926:	b29a      	uxth	r2, r3
 8004928:	79bb      	ldrb	r3, [r7, #6]
 800492a:	6839      	ldr	r1, [r7, #0]
 800492c:	4806      	ldr	r0, [pc, #24]	; (8004948 <spi1_beriRegistre+0x54>)
 800492e:	f005 ff20 	bl	800a772 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8004932:	2201      	movs	r2, #1
 8004934:	2108      	movs	r1, #8
 8004936:	4803      	ldr	r0, [pc, #12]	; (8004944 <spi1_beriRegistre+0x50>)
 8004938:	f001 f912 	bl	8005b60 <HAL_GPIO_WritePin>
}
 800493c:	bf00      	nop
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40021000 	.word	0x40021000
 8004948:	2000584c 	.word	0x2000584c

0800494c <nastaviPospeskometer>:

void nastaviPospeskometer(){
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
	//register maping lsm303agr.pdf page(43)
	//0x23 0x40 BLE litle endian
	i2c1_pisiRegister(0x19, 0x21, 0x0);
 8004950:	2200      	movs	r2, #0
 8004952:	2121      	movs	r1, #33	; 0x21
 8004954:	2019      	movs	r0, #25
 8004956:	f7ff ff13 	bl	8004780 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x24, 0x0);
 800495a:	2200      	movs	r2, #0
 800495c:	2124      	movs	r1, #36	; 0x24
 800495e:	2019      	movs	r0, #25
 8004960:	f7ff ff0e 	bl	8004780 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x25, 0x0);
 8004964:	2200      	movs	r2, #0
 8004966:	2125      	movs	r1, #37	; 0x25
 8004968:	2019      	movs	r0, #25
 800496a:	f7ff ff09 	bl	8004780 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x26, 0x0);
 800496e:	2200      	movs	r2, #0
 8004970:	2126      	movs	r1, #38	; 0x26
 8004972:	2019      	movs	r0, #25
 8004974:	f7ff ff04 	bl	8004780 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x20, 0x67);  //ctrl_reg1 zbudi pospeskometer in omogoci osi //0x20 0x67 200Hz enable XYZ
 8004978:	2267      	movs	r2, #103	; 0x67
 800497a:	2120      	movs	r1, #32
 800497c:	2019      	movs	r0, #25
 800497e:	f7ff feff 	bl	8004780 <i2c1_pisiRegister>
	//block data update HR=1 oprating mode selection 12bit data output LPen = 0 (low power mode disabled) FS0 = 1(+-4g obcutljivost)
	i2c1_pisiRegister(0x19, 0x23, 0x8);  //ctrl_reg4 nastavi posodobitev samo ko se prebere vrednost ter locljivost +-2g
 8004982:	2208      	movs	r2, #8
 8004984:	2123      	movs	r1, #35	; 0x23
 8004986:	2019      	movs	r0, #25
 8004988:	f7ff fefa 	bl	8004780 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x22, 0x10);  //0x22 0x10 DRDY1 INT1 pin enable pe4
 800498c:	2210      	movs	r2, #16
 800498e:	2122      	movs	r1, #34	; 0x22
 8004990:	2019      	movs	r0, #25
 8004992:	f7ff fef5 	bl	8004780 <i2c1_pisiRegister>
}
 8004996:	bf00      	nop
 8004998:	bd80      	pop	{r7, pc}

0800499a <nastaviMagnetometer>:
void nastaviMagnetometer(){
 800499a:	b580      	push	{r7, lr}
 800499c:	af00      	add	r7, sp, #0
	i2c1_pisiRegister(0x1e, 0x60, 0xC); //cfg_reg_a_m ODR= 100HZ
 800499e:	220c      	movs	r2, #12
 80049a0:	2160      	movs	r1, #96	; 0x60
 80049a2:	201e      	movs	r0, #30
 80049a4:	f7ff feec 	bl	8004780 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x1e, 0x61, 0x0); //cfg_reg_b_m
 80049a8:	2200      	movs	r2, #0
 80049aa:	2161      	movs	r1, #97	; 0x61
 80049ac:	201e      	movs	r0, #30
 80049ae:	f7ff fee7 	bl	8004780 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x1e, 0x62, 0x1); //cfg_reg_c_m INT_MAG=1 INT_MAG_PIN=0 BDU=0
 80049b2:	2201      	movs	r2, #1
 80049b4:	2162      	movs	r1, #98	; 0x62
 80049b6:	201e      	movs	r0, #30
 80049b8:	f7ff fee2 	bl	8004780 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x1e, 0x63, 0xE5); //int_ctrl_reg_m enable XYZ in IEN=1 interupt generation enable IEA=1
 80049bc:	22e5      	movs	r2, #229	; 0xe5
 80049be:	2163      	movs	r1, #99	; 0x63
 80049c0:	201e      	movs	r0, #30
 80049c2:	f7ff fedd 	bl	8004780 <i2c1_pisiRegister>
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}

080049ca <nastaviGiroskop>:

void nastaviGiroskop() {
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b082      	sub	sp, #8
 80049ce:	af00      	add	r7, sp, #0
  // preverimo ali smo "poklicali" pravi senzor
  uint8_t cip = spi1_beriRegister(0x0F);
 80049d0:	200f      	movs	r0, #15
 80049d2:	f7ff ff25 	bl	8004820 <spi1_beriRegister>
 80049d6:	4603      	mov	r3, r0
 80049d8:	71fb      	strb	r3, [r7, #7]
  if (cip!=0xD4 && cip!=0xD3) {
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	2bd4      	cmp	r3, #212	; 0xd4
 80049de:	d003      	beq.n	80049e8 <nastaviGiroskop+0x1e>
 80049e0:	79fb      	ldrb	r3, [r7, #7]
 80049e2:	2bd3      	cmp	r3, #211	; 0xd3
 80049e4:	d000      	beq.n	80049e8 <nastaviGiroskop+0x1e>
	for (;;); //napaka ni senzorja
 80049e6:	e7fe      	b.n	80049e6 <nastaviGiroskop+0x1c>
  }
  spi1_pisiRegister(0x21,0);//REG2 register za high pass filter
 80049e8:	2100      	movs	r1, #0
 80049ea:	2021      	movs	r0, #33	; 0x21
 80049ec:	f7ff ff50 	bl	8004890 <spi1_pisiRegister>
  spi1_pisiRegister(0x22,0x8);//REG3 interupt INT1 disable DRDY/INT2 enable
 80049f0:	2108      	movs	r1, #8
 80049f2:	2022      	movs	r0, #34	; 0x22
 80049f4:	f7ff ff4c 	bl	8004890 <spi1_pisiRegister>
    //0001 0000 FS-01 500dps
  spi1_pisiRegister(0x23,0x10);//REG4 MSB@lower addres 500deg/s 0x10 BLE = 0 BIGendian
 80049f8:	2110      	movs	r1, #16
 80049fa:	2023      	movs	r0, #35	; 0x23
 80049fc:	f7ff ff48 	bl	8004890 <spi1_pisiRegister>

  spi1_pisiRegister(0x25,0);//REFRENCE
 8004a00:	2100      	movs	r1, #0
 8004a02:	2025      	movs	r0, #37	; 0x25
 8004a04:	f7ff ff44 	bl	8004890 <spi1_pisiRegister>
  spi1_pisiRegister(0x2e,0);//FIFO_CTRL
 8004a08:	2100      	movs	r1, #0
 8004a0a:	202e      	movs	r0, #46	; 0x2e
 8004a0c:	f7ff ff40 	bl	8004890 <spi1_pisiRegister>
  spi1_pisiRegister(0x32,0);//INT1_THS
 8004a10:	2100      	movs	r1, #0
 8004a12:	2032      	movs	r0, #50	; 0x32
 8004a14:	f7ff ff3c 	bl	8004890 <spi1_pisiRegister>
  spi1_pisiRegister(0x33,0);//INT1_THS
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2033      	movs	r0, #51	; 0x33
 8004a1c:	f7ff ff38 	bl	8004890 <spi1_pisiRegister>
  spi1_pisiRegister(0x34,0);//INT1_THS
 8004a20:	2100      	movs	r1, #0
 8004a22:	2034      	movs	r0, #52	; 0x34
 8004a24:	f7ff ff34 	bl	8004890 <spi1_pisiRegister>
  spi1_pisiRegister(0x35,0);//INT1_THS
 8004a28:	2100      	movs	r1, #0
 8004a2a:	2035      	movs	r0, #53	; 0x35
 8004a2c:	f7ff ff30 	bl	8004890 <spi1_pisiRegister>
  spi1_pisiRegister(0x36,0);//INT1_THS
 8004a30:	2100      	movs	r1, #0
 8004a32:	2036      	movs	r0, #54	; 0x36
 8004a34:	f7ff ff2c 	bl	8004890 <spi1_pisiRegister>
  spi1_pisiRegister(0x37,0);//INT1_THS
 8004a38:	2100      	movs	r1, #0
 8004a3a:	2037      	movs	r0, #55	; 0x37
 8004a3c:	f7ff ff28 	bl	8004890 <spi1_pisiRegister>
  spi1_pisiRegister(0x38,0);//INT1_DUR
 8004a40:	2100      	movs	r1, #0
 8004a42:	2038      	movs	r0, #56	; 0x38
 8004a44:	f7ff ff24 	bl	8004890 <spi1_pisiRegister>
  spi1_pisiRegister(0x30,0);//INT1_CFG
 8004a48:	2100      	movs	r1, #0
 8004a4a:	2030      	movs	r0, #48	; 0x30
 8004a4c:	f7ff ff20 	bl	8004890 <spi1_pisiRegister>


  spi1_pisiRegister(0x24,0);//REG5
 8004a50:	2100      	movs	r1, #0
 8004a52:	2024      	movs	r0, #36	; 0x24
 8004a54:	f7ff ff1c 	bl	8004890 <spi1_pisiRegister>
  //0101 1111 : (1111)=(PD,Zen,Yen,Xen)
  spi1_pisiRegister(0x20,0x5f);//CTRL_REG1 omogoci x-1,y-1,z-1,PD-1(normal mode) DR = 01 BW = 10 cutof=25 200hz
 8004a58:	215f      	movs	r1, #95	; 0x5f
 8004a5a:	2020      	movs	r0, #32
 8004a5c:	f7ff ff18 	bl	8004890 <spi1_pisiRegister>

  spi1_pisiRegister(0x20, 0x0F);//CTRL REG1 zbudi ziroskop in omogoci osi
 8004a60:	210f      	movs	r1, #15
 8004a62:	2020      	movs	r0, #32
 8004a64:	f7ff ff14 	bl	8004890 <spi1_pisiRegister>
}
 8004a68:	bf00      	nop
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <izracunajPovprecjeInt16>:



int16_t izracunajPovprecjeInt16(struct tekocePovprecjeInt16* data,int16_t nov, uint8_t cleni){
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	807b      	strh	r3, [r7, #2]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	707b      	strb	r3, [r7, #1]
	data->sum =  data->sum + nov - data->vals[data->index]; //pristejemo trenutno vrednost in odstejemo zadnjo
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a88:	4413      	add	r3, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	7812      	ldrb	r2, [r2, #0]
 8004a8e:	4611      	mov	r1, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	3104      	adds	r1, #4
 8004a94:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8004a98:	1a9a      	subs	r2, r3, r2
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	605a      	str	r2, [r3, #4]
	data->vals[data->index] = nov; //na zadnjo zamenjamo z novo
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3204      	adds	r2, #4
 8004aa8:	8879      	ldrh	r1, [r7, #2]
 8004aaa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	data->index++;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	701a      	strb	r2, [r3, #0]
	if(cleni > STEVILO_CLENOV_TP){cleni = STEVILO_CLENOV_TP;}
 8004aba:	787b      	ldrb	r3, [r7, #1]
 8004abc:	2b3c      	cmp	r3, #60	; 0x3c
 8004abe:	d901      	bls.n	8004ac4 <izracunajPovprecjeInt16+0x54>
 8004ac0:	233c      	movs	r3, #60	; 0x3c
 8004ac2:	707b      	strb	r3, [r7, #1]
	if(data->index >= cleni){data->index = 0;}
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	787a      	ldrb	r2, [r7, #1]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d802      	bhi.n	8004ad4 <izracunajPovprecjeInt16+0x64>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]
	data->avrage =  data->sum/cleni;//izracunamo povprecje
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	787b      	ldrb	r3, [r7, #1]
 8004ada:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ade:	b21a      	sxth	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	805a      	strh	r2, [r3, #2]
	return data->avrage;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <nastaviMotor>:

void nastaviMotor(enum motor m,int16_t pwm){
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	460a      	mov	r2, r1
 8004b02:	71fb      	strb	r3, [r7, #7]
 8004b04:	4613      	mov	r3, r2
 8004b06:	80bb      	strh	r3, [r7, #4]
	int8_t foward = 1;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
	if(pwm < 0){
 8004b0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	da05      	bge.n	8004b20 <nastaviMotor+0x28>
		pwm = (~(pwm)+1); foward=0;
 8004b14:	88bb      	ldrh	r3, [r7, #4]
 8004b16:	425b      	negs	r3, r3
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	80bb      	strh	r3, [r7, #4]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	73fb      	strb	r3, [r7, #15]
	}
	if(pwm > 999){pwm = 999;}
 8004b20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b28:	db02      	blt.n	8004b30 <nastaviMotor+0x38>
 8004b2a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004b2e:	80bb      	strh	r3, [r7, #4]
	if(pwm == 0){foward = -1;}
 8004b30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <nastaviMotor+0x44>
 8004b38:	23ff      	movs	r3, #255	; 0xff
 8004b3a:	73fb      	strb	r3, [r7, #15]
	switch(m){
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	f200 80db 	bhi.w	8004cfa <nastaviMotor+0x202>
 8004b44:	a201      	add	r2, pc, #4	; (adr r2, 8004b4c <nastaviMotor+0x54>)
 8004b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4a:	bf00      	nop
 8004b4c:	08004c2b 	.word	0x08004c2b
 8004b50:	08004bc3 	.word	0x08004bc3
 8004b54:	08004c93 	.word	0x08004c93
 8004b58:	08004b5d 	.word	0x08004b5d
	case LF:
		//TIM3->CCR4 = izracunajPovprecjeInt16(&M1,pwm,MOTORJI_IZHOD_TP_CLENI);
		TIM3->CCR4 = pwm;
 8004b5c:	4a6a      	ldr	r2, [pc, #424]	; (8004d08 <nastaviMotor+0x210>)
 8004b5e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b62:	6413      	str	r3, [r2, #64]	; 0x40
		if(foward == 1){GPIOE->ODR |= (1<<10); GPIOE->ODR &= ~(1<<12);}
 8004b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d10c      	bne.n	8004b86 <nastaviMotor+0x8e>
 8004b6c:	4b67      	ldr	r3, [pc, #412]	; (8004d0c <nastaviMotor+0x214>)
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	4a66      	ldr	r2, [pc, #408]	; (8004d0c <nastaviMotor+0x214>)
 8004b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b76:	6153      	str	r3, [r2, #20]
 8004b78:	4b64      	ldr	r3, [pc, #400]	; (8004d0c <nastaviMotor+0x214>)
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	4a63      	ldr	r2, [pc, #396]	; (8004d0c <nastaviMotor+0x214>)
 8004b7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b82:	6153      	str	r3, [r2, #20]
		else if(foward < 0){GPIOE->ODR &= ~(1<<10); GPIOE->ODR &= ~(1<<12);}
		else{GPIOE->ODR &= ~(1<<10); GPIOE->ODR |= (1<<12);}
		break;
 8004b84:	e0b9      	b.n	8004cfa <nastaviMotor+0x202>
		else if(foward < 0){GPIOE->ODR &= ~(1<<10); GPIOE->ODR &= ~(1<<12);}
 8004b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	da0c      	bge.n	8004ba8 <nastaviMotor+0xb0>
 8004b8e:	4b5f      	ldr	r3, [pc, #380]	; (8004d0c <nastaviMotor+0x214>)
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	4a5e      	ldr	r2, [pc, #376]	; (8004d0c <nastaviMotor+0x214>)
 8004b94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b98:	6153      	str	r3, [r2, #20]
 8004b9a:	4b5c      	ldr	r3, [pc, #368]	; (8004d0c <nastaviMotor+0x214>)
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	4a5b      	ldr	r2, [pc, #364]	; (8004d0c <nastaviMotor+0x214>)
 8004ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ba4:	6153      	str	r3, [r2, #20]
		break;
 8004ba6:	e0a8      	b.n	8004cfa <nastaviMotor+0x202>
		else{GPIOE->ODR &= ~(1<<10); GPIOE->ODR |= (1<<12);}
 8004ba8:	4b58      	ldr	r3, [pc, #352]	; (8004d0c <nastaviMotor+0x214>)
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	4a57      	ldr	r2, [pc, #348]	; (8004d0c <nastaviMotor+0x214>)
 8004bae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bb2:	6153      	str	r3, [r2, #20]
 8004bb4:	4b55      	ldr	r3, [pc, #340]	; (8004d0c <nastaviMotor+0x214>)
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	4a54      	ldr	r2, [pc, #336]	; (8004d0c <nastaviMotor+0x214>)
 8004bba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bbe:	6153      	str	r3, [r2, #20]
		break;
 8004bc0:	e09b      	b.n	8004cfa <nastaviMotor+0x202>
	case RB:
		//TIM2->CCR4 = izracunajPovprecjeInt16(&M2,pwm,MOTORJI_IZHOD_TP_CLENI);
		TIM2->CCR4 = pwm;
 8004bc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bc6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004bca:	6413      	str	r3, [r2, #64]	; 0x40
		if(foward == 1){GPIOE->ODR |= (1<<14); GPIOE->ODR &= ~(1<<13);}
 8004bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d10c      	bne.n	8004bee <nastaviMotor+0xf6>
 8004bd4:	4b4d      	ldr	r3, [pc, #308]	; (8004d0c <nastaviMotor+0x214>)
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	4a4c      	ldr	r2, [pc, #304]	; (8004d0c <nastaviMotor+0x214>)
 8004bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bde:	6153      	str	r3, [r2, #20]
 8004be0:	4b4a      	ldr	r3, [pc, #296]	; (8004d0c <nastaviMotor+0x214>)
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	4a49      	ldr	r2, [pc, #292]	; (8004d0c <nastaviMotor+0x214>)
 8004be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bea:	6153      	str	r3, [r2, #20]
		else if(foward < 0){GPIOE->ODR &= ~(1<<14); GPIOE->ODR &= ~(1<<13);}
		else{GPIOE->ODR &= ~(1<<14); GPIOE->ODR |= (1<<13);}
		break;
 8004bec:	e085      	b.n	8004cfa <nastaviMotor+0x202>
		else if(foward < 0){GPIOE->ODR &= ~(1<<14); GPIOE->ODR &= ~(1<<13);}
 8004bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	da0c      	bge.n	8004c10 <nastaviMotor+0x118>
 8004bf6:	4b45      	ldr	r3, [pc, #276]	; (8004d0c <nastaviMotor+0x214>)
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	4a44      	ldr	r2, [pc, #272]	; (8004d0c <nastaviMotor+0x214>)
 8004bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c00:	6153      	str	r3, [r2, #20]
 8004c02:	4b42      	ldr	r3, [pc, #264]	; (8004d0c <nastaviMotor+0x214>)
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	4a41      	ldr	r2, [pc, #260]	; (8004d0c <nastaviMotor+0x214>)
 8004c08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c0c:	6153      	str	r3, [r2, #20]
		break;
 8004c0e:	e074      	b.n	8004cfa <nastaviMotor+0x202>
		else{GPIOE->ODR &= ~(1<<14); GPIOE->ODR |= (1<<13);}
 8004c10:	4b3e      	ldr	r3, [pc, #248]	; (8004d0c <nastaviMotor+0x214>)
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	4a3d      	ldr	r2, [pc, #244]	; (8004d0c <nastaviMotor+0x214>)
 8004c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c1a:	6153      	str	r3, [r2, #20]
 8004c1c:	4b3b      	ldr	r3, [pc, #236]	; (8004d0c <nastaviMotor+0x214>)
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	4a3a      	ldr	r2, [pc, #232]	; (8004d0c <nastaviMotor+0x214>)
 8004c22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c26:	6153      	str	r3, [r2, #20]
		break;
 8004c28:	e067      	b.n	8004cfa <nastaviMotor+0x202>
	case RF:
		//TIM2->CCR3 = izracunajPovprecjeInt16(&M3,pwm,MOTORJI_IZHOD_TP_CLENI);
		TIM2->CCR3 = pwm;
 8004c2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c32:	63d3      	str	r3, [r2, #60]	; 0x3c
		if(foward == 1){GPIOE->ODR |= (1<<8); GPIOE->ODR &= ~(1<<7);}
 8004c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d10c      	bne.n	8004c56 <nastaviMotor+0x15e>
 8004c3c:	4b33      	ldr	r3, [pc, #204]	; (8004d0c <nastaviMotor+0x214>)
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	4a32      	ldr	r2, [pc, #200]	; (8004d0c <nastaviMotor+0x214>)
 8004c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c46:	6153      	str	r3, [r2, #20]
 8004c48:	4b30      	ldr	r3, [pc, #192]	; (8004d0c <nastaviMotor+0x214>)
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	4a2f      	ldr	r2, [pc, #188]	; (8004d0c <nastaviMotor+0x214>)
 8004c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c52:	6153      	str	r3, [r2, #20]
		else if(foward < 0){GPIOE->ODR &= ~(1<<8); GPIOE->ODR &= ~(1<<7);}
		else{GPIOE->ODR &= ~(1<<8); GPIOE->ODR |= (1<<7);}
		break;
 8004c54:	e051      	b.n	8004cfa <nastaviMotor+0x202>
		else if(foward < 0){GPIOE->ODR &= ~(1<<8); GPIOE->ODR &= ~(1<<7);}
 8004c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	da0c      	bge.n	8004c78 <nastaviMotor+0x180>
 8004c5e:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <nastaviMotor+0x214>)
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	4a2a      	ldr	r2, [pc, #168]	; (8004d0c <nastaviMotor+0x214>)
 8004c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c68:	6153      	str	r3, [r2, #20]
 8004c6a:	4b28      	ldr	r3, [pc, #160]	; (8004d0c <nastaviMotor+0x214>)
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	4a27      	ldr	r2, [pc, #156]	; (8004d0c <nastaviMotor+0x214>)
 8004c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c74:	6153      	str	r3, [r2, #20]
		break;
 8004c76:	e040      	b.n	8004cfa <nastaviMotor+0x202>
		else{GPIOE->ODR &= ~(1<<8); GPIOE->ODR |= (1<<7);}
 8004c78:	4b24      	ldr	r3, [pc, #144]	; (8004d0c <nastaviMotor+0x214>)
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	4a23      	ldr	r2, [pc, #140]	; (8004d0c <nastaviMotor+0x214>)
 8004c7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c82:	6153      	str	r3, [r2, #20]
 8004c84:	4b21      	ldr	r3, [pc, #132]	; (8004d0c <nastaviMotor+0x214>)
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	4a20      	ldr	r2, [pc, #128]	; (8004d0c <nastaviMotor+0x214>)
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8e:	6153      	str	r3, [r2, #20]
		break;
 8004c90:	e033      	b.n	8004cfa <nastaviMotor+0x202>
	case LB:
		//TIM2->CCR2 = izracunajPovprecjeInt16(&M4,pwm,MOTORJI_IZHOD_TP_CLENI);
		TIM2->CCR2 = pwm;
 8004c92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c9a:	6393      	str	r3, [r2, #56]	; 0x38
		if(foward == 1){GPIOE->ODR |= (1<<9); GPIOE->ODR &= ~(1<<11);}
 8004c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d10c      	bne.n	8004cbe <nastaviMotor+0x1c6>
 8004ca4:	4b19      	ldr	r3, [pc, #100]	; (8004d0c <nastaviMotor+0x214>)
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	4a18      	ldr	r2, [pc, #96]	; (8004d0c <nastaviMotor+0x214>)
 8004caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cae:	6153      	str	r3, [r2, #20]
 8004cb0:	4b16      	ldr	r3, [pc, #88]	; (8004d0c <nastaviMotor+0x214>)
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <nastaviMotor+0x214>)
 8004cb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cba:	6153      	str	r3, [r2, #20]
		else if(foward < 0){GPIOE->ODR &= ~(1<<9); GPIOE->ODR &= ~(1<<11);}
		else{GPIOE->ODR &= ~(1<<9); GPIOE->ODR |= (1<<11);}
		break;
 8004cbc:	e01c      	b.n	8004cf8 <nastaviMotor+0x200>
		else if(foward < 0){GPIOE->ODR &= ~(1<<9); GPIOE->ODR &= ~(1<<11);}
 8004cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	da0c      	bge.n	8004ce0 <nastaviMotor+0x1e8>
 8004cc6:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <nastaviMotor+0x214>)
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	4a10      	ldr	r2, [pc, #64]	; (8004d0c <nastaviMotor+0x214>)
 8004ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cd0:	6153      	str	r3, [r2, #20]
 8004cd2:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <nastaviMotor+0x214>)
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	4a0d      	ldr	r2, [pc, #52]	; (8004d0c <nastaviMotor+0x214>)
 8004cd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cdc:	6153      	str	r3, [r2, #20]
		break;
 8004cde:	e00b      	b.n	8004cf8 <nastaviMotor+0x200>
		else{GPIOE->ODR &= ~(1<<9); GPIOE->ODR |= (1<<11);}
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <nastaviMotor+0x214>)
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	4a09      	ldr	r2, [pc, #36]	; (8004d0c <nastaviMotor+0x214>)
 8004ce6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cea:	6153      	str	r3, [r2, #20]
 8004cec:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <nastaviMotor+0x214>)
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	4a06      	ldr	r2, [pc, #24]	; (8004d0c <nastaviMotor+0x214>)
 8004cf2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004cf6:	6153      	str	r3, [r2, #20]
		break;
 8004cf8:	bf00      	nop
	}
}
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40021000 	.word	0x40021000

08004d10 <getDrift>:

void getDrift(){
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8004d16:	2201      	movs	r2, #1
 8004d18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d1c:	4848      	ldr	r0, [pc, #288]	; (8004e40 <getDrift+0x130>)
 8004d1e:	f000 ff1f 	bl	8005b60 <HAL_GPIO_WritePin>
	int32_t sumGyrox = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
	int32_t sumGyroy = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
	int32_t sumGyroz = 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
	int32_t sumAccx = 0;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
	int32_t sumAccy = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
	int32_t sumAccz = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60bb      	str	r3, [r7, #8]
	int i=0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	607b      	str	r3, [r7, #4]
	while(i < 400){
 8004d3e:	e034      	b.n	8004daa <getDrift+0x9a>
		if(AccReady){
 8004d40:	4b40      	ldr	r3, [pc, #256]	; (8004e44 <getDrift+0x134>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d02f      	beq.n	8004daa <getDrift+0x9a>
			AccReady=0;
 8004d4a:	4b3e      	ldr	r3, [pc, #248]	; (8004e44 <getDrift+0x134>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	701a      	strb	r2, [r3, #0]
			sumGyrox += Gyro.x;
 8004d50:	4b3d      	ldr	r3, [pc, #244]	; (8004e48 <getDrift+0x138>)
 8004d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d56:	461a      	mov	r2, r3
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	61fb      	str	r3, [r7, #28]
			sumGyroy += Gyro.y;
 8004d5e:	4b3a      	ldr	r3, [pc, #232]	; (8004e48 <getDrift+0x138>)
 8004d60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d64:	461a      	mov	r2, r3
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	4413      	add	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
			sumGyroz += Gyro.z;
 8004d6c:	4b36      	ldr	r3, [pc, #216]	; (8004e48 <getDrift+0x138>)
 8004d6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d72:	461a      	mov	r2, r3
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	4413      	add	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]
			sumAccx += Acc.x;
 8004d7a:	4b34      	ldr	r3, [pc, #208]	; (8004e4c <getDrift+0x13c>)
 8004d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d80:	461a      	mov	r2, r3
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	4413      	add	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
			sumAccy += Acc.y;
 8004d88:	4b30      	ldr	r3, [pc, #192]	; (8004e4c <getDrift+0x13c>)
 8004d8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
			sumAccz += Acc.z;
 8004d96:	4b2d      	ldr	r3, [pc, #180]	; (8004e4c <getDrift+0x13c>)
 8004d98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4413      	add	r3, r2
 8004da2:	60bb      	str	r3, [r7, #8]
			i++;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3301      	adds	r3, #1
 8004da8:	607b      	str	r3, [r7, #4]
	while(i < 400){
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004db0:	dbc6      	blt.n	8004d40 <getDrift+0x30>
		}
	}
	E.Accx = sumAccx/400; //vektor gravitacije
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	4a26      	ldr	r2, [pc, #152]	; (8004e50 <getDrift+0x140>)
 8004db6:	fb82 1203 	smull	r1, r2, r2, r3
 8004dba:	11d2      	asrs	r2, r2, #7
 8004dbc:	17db      	asrs	r3, r3, #31
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	b21a      	sxth	r2, r3
 8004dc2:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <getDrift+0x144>)
 8004dc4:	841a      	strh	r2, [r3, #32]
	E.Accy = sumAccy/400;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4a21      	ldr	r2, [pc, #132]	; (8004e50 <getDrift+0x140>)
 8004dca:	fb82 1203 	smull	r1, r2, r2, r3
 8004dce:	11d2      	asrs	r2, r2, #7
 8004dd0:	17db      	asrs	r3, r3, #31
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	b21a      	sxth	r2, r3
 8004dd6:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <getDrift+0x144>)
 8004dd8:	845a      	strh	r2, [r3, #34]	; 0x22
	E.Accz = sumAccz/400;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	4a1c      	ldr	r2, [pc, #112]	; (8004e50 <getDrift+0x140>)
 8004dde:	fb82 1203 	smull	r1, r2, r2, r3
 8004de2:	11d2      	asrs	r2, r2, #7
 8004de4:	17db      	asrs	r3, r3, #31
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	b21a      	sxth	r2, r3
 8004dea:	4b1a      	ldr	r3, [pc, #104]	; (8004e54 <getDrift+0x144>)
 8004dec:	849a      	strh	r2, [r3, #36]	; 0x24
	E.Gyrox = sumGyrox/400;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <getDrift+0x140>)
 8004df2:	fb82 1203 	smull	r1, r2, r2, r3
 8004df6:	11d2      	asrs	r2, r2, #7
 8004df8:	17db      	asrs	r3, r3, #31
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	b21a      	sxth	r2, r3
 8004dfe:	4b15      	ldr	r3, [pc, #84]	; (8004e54 <getDrift+0x144>)
 8004e00:	801a      	strh	r2, [r3, #0]
	E.Gyroy = sumGyroy/400;
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <getDrift+0x140>)
 8004e06:	fb82 1203 	smull	r1, r2, r2, r3
 8004e0a:	11d2      	asrs	r2, r2, #7
 8004e0c:	17db      	asrs	r3, r3, #31
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	b21a      	sxth	r2, r3
 8004e12:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <getDrift+0x144>)
 8004e14:	805a      	strh	r2, [r3, #2]
	E.Gyroz = sumGyroz/400;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	4a0d      	ldr	r2, [pc, #52]	; (8004e50 <getDrift+0x140>)
 8004e1a:	fb82 1203 	smull	r1, r2, r2, r3
 8004e1e:	11d2      	asrs	r2, r2, #7
 8004e20:	17db      	asrs	r3, r3, #31
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	b21a      	sxth	r2, r3
 8004e26:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <getDrift+0x144>)
 8004e28:	809a      	strh	r2, [r3, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e30:	4803      	ldr	r0, [pc, #12]	; (8004e40 <getDrift+0x130>)
 8004e32:	f000 fe95 	bl	8005b60 <HAL_GPIO_WritePin>
}
 8004e36:	bf00      	nop
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40020c00 	.word	0x40020c00
 8004e44:	20000223 	.word	0x20000223
 8004e48:	2000538c 	.word	0x2000538c
 8004e4c:	2000533c 	.word	0x2000533c
 8004e50:	51eb851f 	.word	0x51eb851f
 8004e54:	2000534c 	.word	0x2000534c

08004e58 <zgladiMotor>:
int16_t zgladiMotor(enum motor m, int16_t pwm){
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	460a      	mov	r2, r1
 8004e62:	71fb      	strb	r3, [r7, #7]
 8004e64:	4613      	mov	r3, r2
 8004e66:	80bb      	strh	r3, [r7, #4]
	switch(m){
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d82e      	bhi.n	8004ecc <zgladiMotor+0x74>
 8004e6e:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <zgladiMotor+0x1c>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004ea9 	.word	0x08004ea9
 8004e78:	08004e97 	.word	0x08004e97
 8004e7c:	08004ebb 	.word	0x08004ebb
 8004e80:	08004e85 	.word	0x08004e85
	case LF:
		return izracunajPovprecjeInt16(&M4,pwm,5);
 8004e84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e88:	2205      	movs	r2, #5
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4811      	ldr	r0, [pc, #68]	; (8004ed4 <zgladiMotor+0x7c>)
 8004e8e:	f7ff fdef 	bl	8004a70 <izracunajPovprecjeInt16>
 8004e92:	4603      	mov	r3, r0
 8004e94:	e01a      	b.n	8004ecc <zgladiMotor+0x74>
	case RB:
		return izracunajPovprecjeInt16(&M2,pwm,5);
 8004e96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e9a:	2205      	movs	r2, #5
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	480e      	ldr	r0, [pc, #56]	; (8004ed8 <zgladiMotor+0x80>)
 8004ea0:	f7ff fde6 	bl	8004a70 <izracunajPovprecjeInt16>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	e011      	b.n	8004ecc <zgladiMotor+0x74>
	case RF:
		return izracunajPovprecjeInt16(&M1,pwm,5);
 8004ea8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004eac:	2205      	movs	r2, #5
 8004eae:	4619      	mov	r1, r3
 8004eb0:	480a      	ldr	r0, [pc, #40]	; (8004edc <zgladiMotor+0x84>)
 8004eb2:	f7ff fddd 	bl	8004a70 <izracunajPovprecjeInt16>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	e008      	b.n	8004ecc <zgladiMotor+0x74>
	case LB:
		return izracunajPovprecjeInt16(&M3,pwm,5);
 8004eba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ebe:	2205      	movs	r2, #5
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4807      	ldr	r0, [pc, #28]	; (8004ee0 <zgladiMotor+0x88>)
 8004ec4:	f7ff fdd4 	bl	8004a70 <izracunajPovprecjeInt16>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	e7ff      	b.n	8004ecc <zgladiMotor+0x74>
	}
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20004e84 	.word	0x20004e84
 8004ed8:	20005414 	.word	0x20005414
 8004edc:	20005394 	.word	0x20005394
 8004ee0:	20005168 	.word	0x20005168

08004ee4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eea:	2300      	movs	r3, #0
 8004eec:	607b      	str	r3, [r7, #4]
 8004eee:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <HAL_MspInit+0x54>)
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	4a11      	ldr	r2, [pc, #68]	; (8004f38 <HAL_MspInit+0x54>)
 8004ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8004efa:	4b0f      	ldr	r3, [pc, #60]	; (8004f38 <HAL_MspInit+0x54>)
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f02:	607b      	str	r3, [r7, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f06:	2300      	movs	r3, #0
 8004f08:	603b      	str	r3, [r7, #0]
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <HAL_MspInit+0x54>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	4a0a      	ldr	r2, [pc, #40]	; (8004f38 <HAL_MspInit+0x54>)
 8004f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f14:	6413      	str	r3, [r2, #64]	; 0x40
 8004f16:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <HAL_MspInit+0x54>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004f22:	2200      	movs	r2, #0
 8004f24:	210f      	movs	r1, #15
 8004f26:	f06f 0001 	mvn.w	r0, #1
 8004f2a:	f000 fc23 	bl	8005774 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f2e:	bf00      	nop
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40023800 	.word	0x40023800

08004f3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08c      	sub	sp, #48	; 0x30
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f44:	f107 031c 	add.w	r3, r7, #28
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a46      	ldr	r2, [pc, #280]	; (8005074 <HAL_I2C_MspInit+0x138>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d12d      	bne.n	8004fba <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	4b45      	ldr	r3, [pc, #276]	; (8005078 <HAL_I2C_MspInit+0x13c>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	4a44      	ldr	r2, [pc, #272]	; (8005078 <HAL_I2C_MspInit+0x13c>)
 8004f68:	f043 0302 	orr.w	r3, r3, #2
 8004f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f6e:	4b42      	ldr	r3, [pc, #264]	; (8005078 <HAL_I2C_MspInit+0x13c>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004f7a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f80:	2312      	movs	r3, #18
 8004f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f84:	2301      	movs	r3, #1
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f90:	f107 031c 	add.w	r3, r7, #28
 8004f94:	4619      	mov	r1, r3
 8004f96:	4839      	ldr	r0, [pc, #228]	; (800507c <HAL_I2C_MspInit+0x140>)
 8004f98:	f000 fc46 	bl	8005828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	4b35      	ldr	r3, [pc, #212]	; (8005078 <HAL_I2C_MspInit+0x13c>)
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	4a34      	ldr	r2, [pc, #208]	; (8005078 <HAL_I2C_MspInit+0x13c>)
 8004fa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004faa:	6413      	str	r3, [r2, #64]	; 0x40
 8004fac:	4b32      	ldr	r3, [pc, #200]	; (8005078 <HAL_I2C_MspInit+0x13c>)
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004fb8:	e057      	b.n	800506a <HAL_I2C_MspInit+0x12e>
  else if(hi2c->Instance==I2C3)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a30      	ldr	r2, [pc, #192]	; (8005080 <HAL_I2C_MspInit+0x144>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d152      	bne.n	800506a <HAL_I2C_MspInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	613b      	str	r3, [r7, #16]
 8004fc8:	4b2b      	ldr	r3, [pc, #172]	; (8005078 <HAL_I2C_MspInit+0x13c>)
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	4a2a      	ldr	r2, [pc, #168]	; (8005078 <HAL_I2C_MspInit+0x13c>)
 8004fce:	f043 0301 	orr.w	r3, r3, #1
 8004fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8004fd4:	4b28      	ldr	r3, [pc, #160]	; (8005078 <HAL_I2C_MspInit+0x13c>)
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	4b24      	ldr	r3, [pc, #144]	; (8005078 <HAL_I2C_MspInit+0x13c>)
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	4a23      	ldr	r2, [pc, #140]	; (8005078 <HAL_I2C_MspInit+0x13c>)
 8004fea:	f043 0302 	orr.w	r3, r3, #2
 8004fee:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff0:	4b21      	ldr	r3, [pc, #132]	; (8005078 <HAL_I2C_MspInit+0x13c>)
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005002:	2312      	movs	r3, #18
 8005004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005006:	2300      	movs	r3, #0
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800500a:	2303      	movs	r3, #3
 800500c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800500e:	2304      	movs	r3, #4
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005012:	f107 031c 	add.w	r3, r7, #28
 8005016:	4619      	mov	r1, r3
 8005018:	481a      	ldr	r0, [pc, #104]	; (8005084 <HAL_I2C_MspInit+0x148>)
 800501a:	f000 fc05 	bl	8005828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800501e:	2310      	movs	r3, #16
 8005020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005022:	2312      	movs	r3, #18
 8005024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005026:	2300      	movs	r3, #0
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800502a:	2303      	movs	r3, #3
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800502e:	2309      	movs	r3, #9
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005032:	f107 031c 	add.w	r3, r7, #28
 8005036:	4619      	mov	r1, r3
 8005038:	4810      	ldr	r0, [pc, #64]	; (800507c <HAL_I2C_MspInit+0x140>)
 800503a:	f000 fbf5 	bl	8005828 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800503e:	2300      	movs	r3, #0
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <HAL_I2C_MspInit+0x13c>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	4a0c      	ldr	r2, [pc, #48]	; (8005078 <HAL_I2C_MspInit+0x13c>)
 8005048:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800504c:	6413      	str	r3, [r2, #64]	; 0x40
 800504e:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <HAL_I2C_MspInit+0x13c>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005056:	60bb      	str	r3, [r7, #8]
 8005058:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800505a:	2200      	movs	r2, #0
 800505c:	2105      	movs	r1, #5
 800505e:	2048      	movs	r0, #72	; 0x48
 8005060:	f000 fb88 	bl	8005774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8005064:	2048      	movs	r0, #72	; 0x48
 8005066:	f000 fba1 	bl	80057ac <HAL_NVIC_EnableIRQ>
}
 800506a:	bf00      	nop
 800506c:	3730      	adds	r7, #48	; 0x30
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40005400 	.word	0x40005400
 8005078:	40023800 	.word	0x40023800
 800507c:	40020400 	.word	0x40020400
 8005080:	40005c00 	.word	0x40005c00
 8005084:	40020000 	.word	0x40020000

08005088 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08c      	sub	sp, #48	; 0x30
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005090:	f107 031c 	add.w	r3, r7, #28
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	609a      	str	r2, [r3, #8]
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a41      	ldr	r2, [pc, #260]	; (80051ac <HAL_SPI_MspInit+0x124>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d12c      	bne.n	8005104 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80050aa:	2300      	movs	r3, #0
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	4b40      	ldr	r3, [pc, #256]	; (80051b0 <HAL_SPI_MspInit+0x128>)
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	4a3f      	ldr	r2, [pc, #252]	; (80051b0 <HAL_SPI_MspInit+0x128>)
 80050b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050b8:	6453      	str	r3, [r2, #68]	; 0x44
 80050ba:	4b3d      	ldr	r3, [pc, #244]	; (80051b0 <HAL_SPI_MspInit+0x128>)
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <HAL_SPI_MspInit+0x128>)
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	4a38      	ldr	r2, [pc, #224]	; (80051b0 <HAL_SPI_MspInit+0x128>)
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	6313      	str	r3, [r2, #48]	; 0x30
 80050d6:	4b36      	ldr	r3, [pc, #216]	; (80051b0 <HAL_SPI_MspInit+0x128>)
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80050e2:	23e0      	movs	r3, #224	; 0xe0
 80050e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e6:	2302      	movs	r3, #2
 80050e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ee:	2303      	movs	r3, #3
 80050f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80050f2:	2305      	movs	r3, #5
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050f6:	f107 031c 	add.w	r3, r7, #28
 80050fa:	4619      	mov	r1, r3
 80050fc:	482d      	ldr	r0, [pc, #180]	; (80051b4 <HAL_SPI_MspInit+0x12c>)
 80050fe:	f000 fb93 	bl	8005828 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005102:	e04f      	b.n	80051a4 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <HAL_SPI_MspInit+0x130>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d14a      	bne.n	80051a4 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800510e:	2300      	movs	r3, #0
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	4b27      	ldr	r3, [pc, #156]	; (80051b0 <HAL_SPI_MspInit+0x128>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	4a26      	ldr	r2, [pc, #152]	; (80051b0 <HAL_SPI_MspInit+0x128>)
 8005118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800511c:	6413      	str	r3, [r2, #64]	; 0x40
 800511e:	4b24      	ldr	r3, [pc, #144]	; (80051b0 <HAL_SPI_MspInit+0x128>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	4b20      	ldr	r3, [pc, #128]	; (80051b0 <HAL_SPI_MspInit+0x128>)
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <HAL_SPI_MspInit+0x128>)
 8005134:	f043 0304 	orr.w	r3, r3, #4
 8005138:	6313      	str	r3, [r2, #48]	; 0x30
 800513a:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <HAL_SPI_MspInit+0x128>)
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005146:	2300      	movs	r3, #0
 8005148:	60bb      	str	r3, [r7, #8]
 800514a:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_SPI_MspInit+0x128>)
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	4a18      	ldr	r2, [pc, #96]	; (80051b0 <HAL_SPI_MspInit+0x128>)
 8005150:	f043 0302 	orr.w	r3, r3, #2
 8005154:	6313      	str	r3, [r2, #48]	; 0x30
 8005156:	4b16      	ldr	r3, [pc, #88]	; (80051b0 <HAL_SPI_MspInit+0x128>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	60bb      	str	r3, [r7, #8]
 8005160:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005162:	2304      	movs	r3, #4
 8005164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005166:	2302      	movs	r3, #2
 8005168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516a:	2300      	movs	r3, #0
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800516e:	2303      	movs	r3, #3
 8005170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005172:	2305      	movs	r3, #5
 8005174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005176:	f107 031c 	add.w	r3, r7, #28
 800517a:	4619      	mov	r1, r3
 800517c:	480f      	ldr	r0, [pc, #60]	; (80051bc <HAL_SPI_MspInit+0x134>)
 800517e:	f000 fb53 	bl	8005828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005182:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005188:	2302      	movs	r3, #2
 800518a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518c:	2300      	movs	r3, #0
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005190:	2303      	movs	r3, #3
 8005192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005194:	2305      	movs	r3, #5
 8005196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005198:	f107 031c 	add.w	r3, r7, #28
 800519c:	4619      	mov	r1, r3
 800519e:	4808      	ldr	r0, [pc, #32]	; (80051c0 <HAL_SPI_MspInit+0x138>)
 80051a0:	f000 fb42 	bl	8005828 <HAL_GPIO_Init>
}
 80051a4:	bf00      	nop
 80051a6:	3730      	adds	r7, #48	; 0x30
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40013000 	.word	0x40013000
 80051b0:	40023800 	.word	0x40023800
 80051b4:	40020000 	.word	0x40020000
 80051b8:	40003800 	.word	0x40003800
 80051bc:	40020800 	.word	0x40020800
 80051c0:	40020400 	.word	0x40020400

080051c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d4:	d116      	bne.n	8005204 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	4b20      	ldr	r3, [pc, #128]	; (800525c <HAL_TIM_Base_MspInit+0x98>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	4a1f      	ldr	r2, [pc, #124]	; (800525c <HAL_TIM_Base_MspInit+0x98>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	6413      	str	r3, [r2, #64]	; 0x40
 80051e6:	4b1d      	ldr	r3, [pc, #116]	; (800525c <HAL_TIM_Base_MspInit+0x98>)
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80051f2:	2200      	movs	r2, #0
 80051f4:	2105      	movs	r1, #5
 80051f6:	201c      	movs	r0, #28
 80051f8:	f000 fabc 	bl	8005774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80051fc:	201c      	movs	r0, #28
 80051fe:	f000 fad5 	bl	80057ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005202:	e026      	b.n	8005252 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a15      	ldr	r2, [pc, #84]	; (8005260 <HAL_TIM_Base_MspInit+0x9c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d10e      	bne.n	800522c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800520e:	2300      	movs	r3, #0
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <HAL_TIM_Base_MspInit+0x98>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	4a11      	ldr	r2, [pc, #68]	; (800525c <HAL_TIM_Base_MspInit+0x98>)
 8005218:	f043 0302 	orr.w	r3, r3, #2
 800521c:	6413      	str	r3, [r2, #64]	; 0x40
 800521e:	4b0f      	ldr	r3, [pc, #60]	; (800525c <HAL_TIM_Base_MspInit+0x98>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	613b      	str	r3, [r7, #16]
 8005228:	693b      	ldr	r3, [r7, #16]
}
 800522a:	e012      	b.n	8005252 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a0c      	ldr	r2, [pc, #48]	; (8005264 <HAL_TIM_Base_MspInit+0xa0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d10d      	bne.n	8005252 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	4b08      	ldr	r3, [pc, #32]	; (800525c <HAL_TIM_Base_MspInit+0x98>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	4a07      	ldr	r2, [pc, #28]	; (800525c <HAL_TIM_Base_MspInit+0x98>)
 8005240:	f043 0308 	orr.w	r3, r3, #8
 8005244:	6413      	str	r3, [r2, #64]	; 0x40
 8005246:	4b05      	ldr	r3, [pc, #20]	; (800525c <HAL_TIM_Base_MspInit+0x98>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
}
 8005252:	bf00      	nop
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40023800 	.word	0x40023800
 8005260:	40000400 	.word	0x40000400
 8005264:	40000c00 	.word	0x40000c00

08005268 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005270:	f107 0314 	add.w	r3, r7, #20
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	605a      	str	r2, [r3, #4]
 800527a:	609a      	str	r2, [r3, #8]
 800527c:	60da      	str	r2, [r3, #12]
 800527e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005288:	d11e      	bne.n	80052c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800528a:	2300      	movs	r3, #0
 800528c:	613b      	str	r3, [r7, #16]
 800528e:	4b22      	ldr	r3, [pc, #136]	; (8005318 <HAL_TIM_MspPostInit+0xb0>)
 8005290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005292:	4a21      	ldr	r2, [pc, #132]	; (8005318 <HAL_TIM_MspPostInit+0xb0>)
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	6313      	str	r3, [r2, #48]	; 0x30
 800529a:	4b1f      	ldr	r3, [pc, #124]	; (8005318 <HAL_TIM_MspPostInit+0xb0>)
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	613b      	str	r3, [r7, #16]
 80052a4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = me_rb_Pin|me_lb_Pin|me_lf_Pin;
 80052a6:	230e      	movs	r3, #14
 80052a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052aa:	2302      	movs	r3, #2
 80052ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052b2:	2300      	movs	r3, #0
 80052b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80052b6:	2301      	movs	r3, #1
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ba:	f107 0314 	add.w	r3, r7, #20
 80052be:	4619      	mov	r1, r3
 80052c0:	4816      	ldr	r0, [pc, #88]	; (800531c <HAL_TIM_MspPostInit+0xb4>)
 80052c2:	f000 fab1 	bl	8005828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80052c6:	e023      	b.n	8005310 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a14      	ldr	r2, [pc, #80]	; (8005320 <HAL_TIM_MspPostInit+0xb8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d11e      	bne.n	8005310 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	4b10      	ldr	r3, [pc, #64]	; (8005318 <HAL_TIM_MspPostInit+0xb0>)
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	4a0f      	ldr	r2, [pc, #60]	; (8005318 <HAL_TIM_MspPostInit+0xb0>)
 80052dc:	f043 0304 	orr.w	r3, r3, #4
 80052e0:	6313      	str	r3, [r2, #48]	; 0x30
 80052e2:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <HAL_TIM_MspPostInit+0xb0>)
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f4:	2302      	movs	r3, #2
 80052f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052fc:	2300      	movs	r3, #0
 80052fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005300:	2302      	movs	r3, #2
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005304:	f107 0314 	add.w	r3, r7, #20
 8005308:	4619      	mov	r1, r3
 800530a:	4806      	ldr	r0, [pc, #24]	; (8005324 <HAL_TIM_MspPostInit+0xbc>)
 800530c:	f000 fa8c 	bl	8005828 <HAL_GPIO_Init>
}
 8005310:	bf00      	nop
 8005312:	3728      	adds	r7, #40	; 0x28
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40023800 	.word	0x40023800
 800531c:	40020000 	.word	0x40020000
 8005320:	40000400 	.word	0x40000400
 8005324:	40020800 	.word	0x40020800

08005328 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08c      	sub	sp, #48	; 0x30
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8005338:	2200      	movs	r2, #0
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	201a      	movs	r0, #26
 800533e:	f000 fa19 	bl	8005774 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005342:	201a      	movs	r0, #26
 8005344:	f000 fa32 	bl	80057ac <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	4b1e      	ldr	r3, [pc, #120]	; (80053c8 <HAL_InitTick+0xa0>)
 800534e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005350:	4a1d      	ldr	r2, [pc, #116]	; (80053c8 <HAL_InitTick+0xa0>)
 8005352:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005356:	6453      	str	r3, [r2, #68]	; 0x44
 8005358:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <HAL_InitTick+0xa0>)
 800535a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005364:	f107 0210 	add.w	r2, r7, #16
 8005368:	f107 0314 	add.w	r3, r7, #20
 800536c:	4611      	mov	r1, r2
 800536e:	4618      	mov	r0, r3
 8005370:	f005 f808 	bl	800a384 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005374:	f004 fff2 	bl	800a35c <HAL_RCC_GetPCLK2Freq>
 8005378:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537c:	4a13      	ldr	r2, [pc, #76]	; (80053cc <HAL_InitTick+0xa4>)
 800537e:	fba2 2303 	umull	r2, r3, r2, r3
 8005382:	0c9b      	lsrs	r3, r3, #18
 8005384:	3b01      	subs	r3, #1
 8005386:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8005388:	4b11      	ldr	r3, [pc, #68]	; (80053d0 <HAL_InitTick+0xa8>)
 800538a:	4a12      	ldr	r2, [pc, #72]	; (80053d4 <HAL_InitTick+0xac>)
 800538c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800538e:	4b10      	ldr	r3, [pc, #64]	; (80053d0 <HAL_InitTick+0xa8>)
 8005390:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005394:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8005396:	4a0e      	ldr	r2, [pc, #56]	; (80053d0 <HAL_InitTick+0xa8>)
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 800539c:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <HAL_InitTick+0xa8>)
 800539e:	2200      	movs	r2, #0
 80053a0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053a2:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <HAL_InitTick+0xa8>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80053a8:	4809      	ldr	r0, [pc, #36]	; (80053d0 <HAL_InitTick+0xa8>)
 80053aa:	f005 fdc5 	bl	800af38 <HAL_TIM_Base_Init>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d104      	bne.n	80053be <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 80053b4:	4806      	ldr	r0, [pc, #24]	; (80053d0 <HAL_InitTick+0xa8>)
 80053b6:	f005 fe69 	bl	800b08c <HAL_TIM_Base_Start_IT>
 80053ba:	4603      	mov	r3, r0
 80053bc:	e000      	b.n	80053c0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3730      	adds	r7, #48	; 0x30
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40023800 	.word	0x40023800
 80053cc:	431bde83 	.word	0x431bde83
 80053d0:	200058ec 	.word	0x200058ec
 80053d4:	40014800 	.word	0x40014800

080053d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80053dc:	e7fe      	b.n	80053dc <NMI_Handler+0x4>

080053de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053de:	b480      	push	{r7}
 80053e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053e2:	e7fe      	b.n	80053e2 <HardFault_Handler+0x4>

080053e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053e8:	e7fe      	b.n	80053e8 <MemManage_Handler+0x4>

080053ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053ea:	b480      	push	{r7}
 80053ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053ee:	e7fe      	b.n	80053ee <BusFault_Handler+0x4>

080053f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053f4:	e7fe      	b.n	80053f4 <UsageFault_Handler+0x4>

080053f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053f6:	b480      	push	{r7}
 80053f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053fa:	bf00      	nop
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005408:	2002      	movs	r0, #2
 800540a:	f000 fbdd 	bl	8005bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800540e:	bf00      	nop
 8005410:	bd80      	pop	{r7, pc}

08005412 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005416:	2004      	movs	r0, #4
 8005418:	f000 fbd6 	bl	8005bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800541c:	bf00      	nop
 800541e:	bd80      	pop	{r7, pc}

08005420 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005424:	2008      	movs	r0, #8
 8005426:	f000 fbcf 	bl	8005bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800542a:	bf00      	nop
 800542c:	bd80      	pop	{r7, pc}

0800542e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005432:	2010      	movs	r0, #16
 8005434:	f000 fbc8 	bl	8005bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005438:	bf00      	nop
 800543a:	bd80      	pop	{r7, pc}

0800543c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005440:	2020      	movs	r0, #32
 8005442:	f000 fbc1 	bl	8005bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005446:	2080      	movs	r0, #128	; 0x80
 8005448:	f000 fbbe 	bl	8005bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800544c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005450:	f000 fbba 	bl	8005bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005454:	bf00      	nop
 8005456:	bd80      	pop	{r7, pc}

08005458 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800545c:	4802      	ldr	r0, [pc, #8]	; (8005468 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800545e:	f005 ff81 	bl	800b364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005462:	bf00      	nop
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	200058ec 	.word	0x200058ec

0800546c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005470:	4802      	ldr	r0, [pc, #8]	; (800547c <TIM2_IRQHandler+0x10>)
 8005472:	f005 ff77 	bl	800b364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005476:	bf00      	nop
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	200058a4 	.word	0x200058a4

08005480 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005484:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005488:	f000 fb9e 	bl	8005bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800548c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005490:	f000 fb9a 	bl	8005bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005494:	bf00      	nop
 8005496:	bd80      	pop	{r7, pc}

08005498 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800549c:	4802      	ldr	r0, [pc, #8]	; (80054a8 <OTG_FS_IRQHandler+0x10>)
 800549e:	f003 fac9 	bl	8008a34 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20006e48 	.word	0x20006e48

080054ac <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80054b0:	4802      	ldr	r0, [pc, #8]	; (80054bc <I2C3_EV_IRQHandler+0x10>)
 80054b2:	f001 fa25 	bl	8006900 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80054b6:	bf00      	nop
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20005648 	.word	0x20005648

080054c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80054c4:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <SystemInit+0x20>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	4a05      	ldr	r2, [pc, #20]	; (80054e0 <SystemInit+0x20>)
 80054cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80054d4:	bf00      	nop
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	e000ed00 	.word	0xe000ed00

080054e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80054e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800551c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80054e8:	480d      	ldr	r0, [pc, #52]	; (8005520 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80054ea:	490e      	ldr	r1, [pc, #56]	; (8005524 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80054ec:	4a0e      	ldr	r2, [pc, #56]	; (8005528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80054ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054f0:	e002      	b.n	80054f8 <LoopCopyDataInit>

080054f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054f6:	3304      	adds	r3, #4

080054f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054fc:	d3f9      	bcc.n	80054f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054fe:	4a0b      	ldr	r2, [pc, #44]	; (800552c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005500:	4c0b      	ldr	r4, [pc, #44]	; (8005530 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005504:	e001      	b.n	800550a <LoopFillZerobss>

08005506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005508:	3204      	adds	r2, #4

0800550a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800550a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800550c:	d3fb      	bcc.n	8005506 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800550e:	f7ff ffd7 	bl	80054c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005512:	f00c ffef 	bl	80124f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005516:	f7fd f971 	bl	80027fc <main>
  bx  lr    
 800551a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800551c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005524:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8005528:	080145a8 	.word	0x080145a8
  ldr r2, =_sbss
 800552c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8005530:	20007250 	.word	0x20007250

08005534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005534:	e7fe      	b.n	8005534 <ADC_IRQHandler>
	...

08005538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800553c:	4b0e      	ldr	r3, [pc, #56]	; (8005578 <HAL_Init+0x40>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a0d      	ldr	r2, [pc, #52]	; (8005578 <HAL_Init+0x40>)
 8005542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005548:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <HAL_Init+0x40>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a0a      	ldr	r2, [pc, #40]	; (8005578 <HAL_Init+0x40>)
 800554e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005554:	4b08      	ldr	r3, [pc, #32]	; (8005578 <HAL_Init+0x40>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a07      	ldr	r2, [pc, #28]	; (8005578 <HAL_Init+0x40>)
 800555a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005560:	2003      	movs	r0, #3
 8005562:	f000 f8fc 	bl	800575e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005566:	200f      	movs	r0, #15
 8005568:	f7ff fede 	bl	8005328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800556c:	f7ff fcba 	bl	8004ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40023c00 	.word	0x40023c00

0800557c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005580:	4b06      	ldr	r3, [pc, #24]	; (800559c <HAL_IncTick+0x20>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <HAL_IncTick+0x24>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4413      	add	r3, r2
 800558c:	4a04      	ldr	r2, [pc, #16]	; (80055a0 <HAL_IncTick+0x24>)
 800558e:	6013      	str	r3, [r2, #0]
}
 8005590:	bf00      	nop
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	20000014 	.word	0x20000014
 80055a0:	20005934 	.word	0x20005934

080055a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
  return uwTick;
 80055a8:	4b03      	ldr	r3, [pc, #12]	; (80055b8 <HAL_GetTick+0x14>)
 80055aa:	681b      	ldr	r3, [r3, #0]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	20005934 	.word	0x20005934

080055bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055c4:	f7ff ffee 	bl	80055a4 <HAL_GetTick>
 80055c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d005      	beq.n	80055e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055d6:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <HAL_Delay+0x44>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80055e2:	bf00      	nop
 80055e4:	f7ff ffde 	bl	80055a4 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d8f7      	bhi.n	80055e4 <HAL_Delay+0x28>
  {
  }
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000014 	.word	0x20000014

08005604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005614:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <__NVIC_SetPriorityGrouping+0x44>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005620:	4013      	ands	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800562c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005636:	4a04      	ldr	r2, [pc, #16]	; (8005648 <__NVIC_SetPriorityGrouping+0x44>)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	60d3      	str	r3, [r2, #12]
}
 800563c:	bf00      	nop
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	e000ed00 	.word	0xe000ed00

0800564c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005650:	4b04      	ldr	r3, [pc, #16]	; (8005664 <__NVIC_GetPriorityGrouping+0x18>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	0a1b      	lsrs	r3, r3, #8
 8005656:	f003 0307 	and.w	r3, r3, #7
}
 800565a:	4618      	mov	r0, r3
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	e000ed00 	.word	0xe000ed00

08005668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005676:	2b00      	cmp	r3, #0
 8005678:	db0b      	blt.n	8005692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	f003 021f 	and.w	r2, r3, #31
 8005680:	4907      	ldr	r1, [pc, #28]	; (80056a0 <__NVIC_EnableIRQ+0x38>)
 8005682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	2001      	movs	r0, #1
 800568a:	fa00 f202 	lsl.w	r2, r0, r2
 800568e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	e000e100 	.word	0xe000e100

080056a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	6039      	str	r1, [r7, #0]
 80056ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	db0a      	blt.n	80056ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	490c      	ldr	r1, [pc, #48]	; (80056f0 <__NVIC_SetPriority+0x4c>)
 80056be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c2:	0112      	lsls	r2, r2, #4
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	440b      	add	r3, r1
 80056c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056cc:	e00a      	b.n	80056e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	4908      	ldr	r1, [pc, #32]	; (80056f4 <__NVIC_SetPriority+0x50>)
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	3b04      	subs	r3, #4
 80056dc:	0112      	lsls	r2, r2, #4
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	440b      	add	r3, r1
 80056e2:	761a      	strb	r2, [r3, #24]
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	e000e100 	.word	0xe000e100
 80056f4:	e000ed00 	.word	0xe000ed00

080056f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b089      	sub	sp, #36	; 0x24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f1c3 0307 	rsb	r3, r3, #7
 8005712:	2b04      	cmp	r3, #4
 8005714:	bf28      	it	cs
 8005716:	2304      	movcs	r3, #4
 8005718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	3304      	adds	r3, #4
 800571e:	2b06      	cmp	r3, #6
 8005720:	d902      	bls.n	8005728 <NVIC_EncodePriority+0x30>
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	3b03      	subs	r3, #3
 8005726:	e000      	b.n	800572a <NVIC_EncodePriority+0x32>
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800572c:	f04f 32ff 	mov.w	r2, #4294967295
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	43da      	mvns	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	401a      	ands	r2, r3
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005740:	f04f 31ff 	mov.w	r1, #4294967295
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	fa01 f303 	lsl.w	r3, r1, r3
 800574a:	43d9      	mvns	r1, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005750:	4313      	orrs	r3, r2
         );
}
 8005752:	4618      	mov	r0, r3
 8005754:	3724      	adds	r7, #36	; 0x24
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff ff4c 	bl	8005604 <__NVIC_SetPriorityGrouping>
}
 800576c:	bf00      	nop
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005786:	f7ff ff61 	bl	800564c <__NVIC_GetPriorityGrouping>
 800578a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	6978      	ldr	r0, [r7, #20]
 8005792:	f7ff ffb1 	bl	80056f8 <NVIC_EncodePriority>
 8005796:	4602      	mov	r2, r0
 8005798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800579c:	4611      	mov	r1, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff ff80 	bl	80056a4 <__NVIC_SetPriority>
}
 80057a4:	bf00      	nop
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff ff54 	bl	8005668 <__NVIC_EnableIRQ>
}
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d004      	beq.n	80057e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2280      	movs	r2, #128	; 0x80
 80057e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e00c      	b.n	8005800 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2205      	movs	r2, #5
 80057ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0201 	bic.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800581a:	b2db      	uxtb	r3, r3
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005828:	b480      	push	{r7}
 800582a:	b089      	sub	sp, #36	; 0x24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005836:	2300      	movs	r3, #0
 8005838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800583a:	2300      	movs	r3, #0
 800583c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800583e:	2300      	movs	r3, #0
 8005840:	61fb      	str	r3, [r7, #28]
 8005842:	e159      	b.n	8005af8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005844:	2201      	movs	r2, #1
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4013      	ands	r3, r2
 8005856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	429a      	cmp	r2, r3
 800585e:	f040 8148 	bne.w	8005af2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	2b01      	cmp	r3, #1
 800586c:	d005      	beq.n	800587a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005876:	2b02      	cmp	r3, #2
 8005878:	d130      	bne.n	80058dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	2203      	movs	r2, #3
 8005886:	fa02 f303 	lsl.w	r3, r2, r3
 800588a:	43db      	mvns	r3, r3
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	4013      	ands	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058b0:	2201      	movs	r2, #1
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	091b      	lsrs	r3, r3, #4
 80058c6:	f003 0201 	and.w	r2, r3, #1
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f003 0303 	and.w	r3, r3, #3
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d017      	beq.n	8005918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	2203      	movs	r2, #3
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	43db      	mvns	r3, r3
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	4013      	ands	r3, r2
 80058fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	4313      	orrs	r3, r2
 8005910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f003 0303 	and.w	r3, r3, #3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d123      	bne.n	800596c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	08da      	lsrs	r2, r3, #3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3208      	adds	r2, #8
 800592c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	220f      	movs	r2, #15
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	43db      	mvns	r3, r3
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	4013      	ands	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4313      	orrs	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	08da      	lsrs	r2, r3, #3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3208      	adds	r2, #8
 8005966:	69b9      	ldr	r1, [r7, #24]
 8005968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	2203      	movs	r2, #3
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	43db      	mvns	r3, r3
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	4013      	ands	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f003 0203 	and.w	r2, r3, #3
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	4313      	orrs	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 80a2 	beq.w	8005af2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	4b57      	ldr	r3, [pc, #348]	; (8005b10 <HAL_GPIO_Init+0x2e8>)
 80059b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b6:	4a56      	ldr	r2, [pc, #344]	; (8005b10 <HAL_GPIO_Init+0x2e8>)
 80059b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059bc:	6453      	str	r3, [r2, #68]	; 0x44
 80059be:	4b54      	ldr	r3, [pc, #336]	; (8005b10 <HAL_GPIO_Init+0x2e8>)
 80059c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059ca:	4a52      	ldr	r2, [pc, #328]	; (8005b14 <HAL_GPIO_Init+0x2ec>)
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	089b      	lsrs	r3, r3, #2
 80059d0:	3302      	adds	r3, #2
 80059d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	220f      	movs	r2, #15
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	43db      	mvns	r3, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4013      	ands	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a49      	ldr	r2, [pc, #292]	; (8005b18 <HAL_GPIO_Init+0x2f0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d019      	beq.n	8005a2a <HAL_GPIO_Init+0x202>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a48      	ldr	r2, [pc, #288]	; (8005b1c <HAL_GPIO_Init+0x2f4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <HAL_GPIO_Init+0x1fe>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a47      	ldr	r2, [pc, #284]	; (8005b20 <HAL_GPIO_Init+0x2f8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00d      	beq.n	8005a22 <HAL_GPIO_Init+0x1fa>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a46      	ldr	r2, [pc, #280]	; (8005b24 <HAL_GPIO_Init+0x2fc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d007      	beq.n	8005a1e <HAL_GPIO_Init+0x1f6>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a45      	ldr	r2, [pc, #276]	; (8005b28 <HAL_GPIO_Init+0x300>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d101      	bne.n	8005a1a <HAL_GPIO_Init+0x1f2>
 8005a16:	2304      	movs	r3, #4
 8005a18:	e008      	b.n	8005a2c <HAL_GPIO_Init+0x204>
 8005a1a:	2307      	movs	r3, #7
 8005a1c:	e006      	b.n	8005a2c <HAL_GPIO_Init+0x204>
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e004      	b.n	8005a2c <HAL_GPIO_Init+0x204>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e002      	b.n	8005a2c <HAL_GPIO_Init+0x204>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <HAL_GPIO_Init+0x204>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	f002 0203 	and.w	r2, r2, #3
 8005a32:	0092      	lsls	r2, r2, #2
 8005a34:	4093      	lsls	r3, r2
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a3c:	4935      	ldr	r1, [pc, #212]	; (8005b14 <HAL_GPIO_Init+0x2ec>)
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	089b      	lsrs	r3, r3, #2
 8005a42:	3302      	adds	r3, #2
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a4a:	4b38      	ldr	r3, [pc, #224]	; (8005b2c <HAL_GPIO_Init+0x304>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	43db      	mvns	r3, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4013      	ands	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a6e:	4a2f      	ldr	r2, [pc, #188]	; (8005b2c <HAL_GPIO_Init+0x304>)
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a74:	4b2d      	ldr	r3, [pc, #180]	; (8005b2c <HAL_GPIO_Init+0x304>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	4013      	ands	r3, r2
 8005a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a98:	4a24      	ldr	r2, [pc, #144]	; (8005b2c <HAL_GPIO_Init+0x304>)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a9e:	4b23      	ldr	r3, [pc, #140]	; (8005b2c <HAL_GPIO_Init+0x304>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ac2:	4a1a      	ldr	r2, [pc, #104]	; (8005b2c <HAL_GPIO_Init+0x304>)
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ac8:	4b18      	ldr	r3, [pc, #96]	; (8005b2c <HAL_GPIO_Init+0x304>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005aec:	4a0f      	ldr	r2, [pc, #60]	; (8005b2c <HAL_GPIO_Init+0x304>)
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	3301      	adds	r3, #1
 8005af6:	61fb      	str	r3, [r7, #28]
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	2b0f      	cmp	r3, #15
 8005afc:	f67f aea2 	bls.w	8005844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
 8005b04:	3724      	adds	r7, #36	; 0x24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40023800 	.word	0x40023800
 8005b14:	40013800 	.word	0x40013800
 8005b18:	40020000 	.word	0x40020000
 8005b1c:	40020400 	.word	0x40020400
 8005b20:	40020800 	.word	0x40020800
 8005b24:	40020c00 	.word	0x40020c00
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	40013c00 	.word	0x40013c00

08005b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	887b      	ldrh	r3, [r7, #2]
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
 8005b4c:	e001      	b.n	8005b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	807b      	strh	r3, [r7, #2]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b70:	787b      	ldrb	r3, [r7, #1]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b76:	887a      	ldrh	r2, [r7, #2]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b7c:	e003      	b.n	8005b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b7e:	887b      	ldrh	r3, [r7, #2]
 8005b80:	041a      	lsls	r2, r3, #16
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	619a      	str	r2, [r3, #24]
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ba4:	887a      	ldrh	r2, [r7, #2]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	041a      	lsls	r2, r3, #16
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	43d9      	mvns	r1, r3
 8005bb0:	887b      	ldrh	r3, [r7, #2]
 8005bb2:	400b      	ands	r3, r1
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	619a      	str	r2, [r3, #24]
}
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
	...

08005bc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005bd2:	4b08      	ldr	r3, [pc, #32]	; (8005bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bd4:	695a      	ldr	r2, [r3, #20]
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d006      	beq.n	8005bec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bde:	4a05      	ldr	r2, [pc, #20]	; (8005bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005be0:	88fb      	ldrh	r3, [r7, #6]
 8005be2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fd fb60 	bl	80032ac <HAL_GPIO_EXTI_Callback>
  }
}
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40013c00 	.word	0x40013c00

08005bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e12b      	b.n	8005e62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff f98c 	bl	8004f3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2224      	movs	r2, #36	; 0x24
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0201 	bic.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c5c:	f004 fb6a 	bl	800a334 <HAL_RCC_GetPCLK1Freq>
 8005c60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4a81      	ldr	r2, [pc, #516]	; (8005e6c <HAL_I2C_Init+0x274>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d807      	bhi.n	8005c7c <HAL_I2C_Init+0x84>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4a80      	ldr	r2, [pc, #512]	; (8005e70 <HAL_I2C_Init+0x278>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	bf94      	ite	ls
 8005c74:	2301      	movls	r3, #1
 8005c76:	2300      	movhi	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	e006      	b.n	8005c8a <HAL_I2C_Init+0x92>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4a7d      	ldr	r2, [pc, #500]	; (8005e74 <HAL_I2C_Init+0x27c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	bf94      	ite	ls
 8005c84:	2301      	movls	r3, #1
 8005c86:	2300      	movhi	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e0e7      	b.n	8005e62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4a78      	ldr	r2, [pc, #480]	; (8005e78 <HAL_I2C_Init+0x280>)
 8005c96:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9a:	0c9b      	lsrs	r3, r3, #18
 8005c9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	4a6a      	ldr	r2, [pc, #424]	; (8005e6c <HAL_I2C_Init+0x274>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d802      	bhi.n	8005ccc <HAL_I2C_Init+0xd4>
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	e009      	b.n	8005ce0 <HAL_I2C_Init+0xe8>
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005cd2:	fb02 f303 	mul.w	r3, r2, r3
 8005cd6:	4a69      	ldr	r2, [pc, #420]	; (8005e7c <HAL_I2C_Init+0x284>)
 8005cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cdc:	099b      	lsrs	r3, r3, #6
 8005cde:	3301      	adds	r3, #1
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005cf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	495c      	ldr	r1, [pc, #368]	; (8005e6c <HAL_I2C_Init+0x274>)
 8005cfc:	428b      	cmp	r3, r1
 8005cfe:	d819      	bhi.n	8005d34 <HAL_I2C_Init+0x13c>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	1e59      	subs	r1, r3, #1
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d0e:	1c59      	adds	r1, r3, #1
 8005d10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d14:	400b      	ands	r3, r1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <HAL_I2C_Init+0x138>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1e59      	subs	r1, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d28:	3301      	adds	r3, #1
 8005d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d2e:	e051      	b.n	8005dd4 <HAL_I2C_Init+0x1dc>
 8005d30:	2304      	movs	r3, #4
 8005d32:	e04f      	b.n	8005dd4 <HAL_I2C_Init+0x1dc>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d111      	bne.n	8005d60 <HAL_I2C_Init+0x168>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	1e58      	subs	r0, r3, #1
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6859      	ldr	r1, [r3, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	440b      	add	r3, r1
 8005d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d4e:	3301      	adds	r3, #1
 8005d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	bf0c      	ite	eq
 8005d58:	2301      	moveq	r3, #1
 8005d5a:	2300      	movne	r3, #0
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	e012      	b.n	8005d86 <HAL_I2C_Init+0x18e>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	1e58      	subs	r0, r3, #1
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6859      	ldr	r1, [r3, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	0099      	lsls	r1, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d76:	3301      	adds	r3, #1
 8005d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	bf0c      	ite	eq
 8005d80:	2301      	moveq	r3, #1
 8005d82:	2300      	movne	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <HAL_I2C_Init+0x196>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e022      	b.n	8005dd4 <HAL_I2C_Init+0x1dc>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10e      	bne.n	8005db4 <HAL_I2C_Init+0x1bc>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	1e58      	subs	r0, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6859      	ldr	r1, [r3, #4]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	440b      	add	r3, r1
 8005da4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005da8:	3301      	adds	r3, #1
 8005daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db2:	e00f      	b.n	8005dd4 <HAL_I2C_Init+0x1dc>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	1e58      	subs	r0, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6859      	ldr	r1, [r3, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	0099      	lsls	r1, r3, #2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dca:	3301      	adds	r3, #1
 8005dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	6809      	ldr	r1, [r1, #0]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69da      	ldr	r2, [r3, #28]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	431a      	orrs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6911      	ldr	r1, [r2, #16]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	68d2      	ldr	r2, [r2, #12]
 8005e0e:	4311      	orrs	r1, r2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	430b      	orrs	r3, r1
 8005e16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695a      	ldr	r2, [r3, #20]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0201 	orr.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	000186a0 	.word	0x000186a0
 8005e70:	001e847f 	.word	0x001e847f
 8005e74:	003d08ff 	.word	0x003d08ff
 8005e78:	431bde83 	.word	0x431bde83
 8005e7c:	10624dd3 	.word	0x10624dd3

08005e80 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08a      	sub	sp, #40	; 0x28
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e90:	f7ff fb88 	bl	80055a4 <HAL_GetTick>
 8005e94:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	f040 80fb 	bne.w	800609a <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <HAL_I2C_Slave_Transmit+0x30>
 8005eaa:	88fb      	ldrh	r3, [r7, #6]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e0f3      	b.n	800609c <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_I2C_Slave_Transmit+0x42>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e0ec      	b.n	800609c <HAL_I2C_Slave_Transmit+0x21c>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d007      	beq.n	8005ee8 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0201 	orr.w	r2, r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef6:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2221      	movs	r2, #33	; 0x21
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	88fa      	ldrh	r2, [r7, #6]
 8005f18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4a5f      	ldr	r2, [pc, #380]	; (80060a4 <HAL_I2C_Slave_Transmit+0x224>)
 8005f28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f38:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2200      	movs	r2, #0
 8005f42:	4959      	ldr	r1, [pc, #356]	; (80060a8 <HAL_I2C_Slave_Transmit+0x228>)
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f002 f9bd 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0a3      	b.n	800609c <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f54:	2300      	movs	r3, #0
 8005f56:	61bb      	str	r3, [r7, #24]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	61bb      	str	r3, [r7, #24]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	61bb      	str	r3, [r7, #24]
 8005f68:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f72:	d165      	bne.n	8006040 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	494a      	ldr	r1, [pc, #296]	; (80060a8 <HAL_I2C_Slave_Transmit+0x228>)
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f002 f9a0 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e086      	b.n	800609c <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005fa4:	e04c      	b.n	8006040 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fa6:	69fa      	ldr	r2, [r7, #28]
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f002 fa60 	bl	8008470 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d009      	beq.n	8005fca <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc4:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e068      	b.n	800609c <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	781a      	ldrb	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b04      	cmp	r3, #4
 8006006:	d11b      	bne.n	8006040 <HAL_I2C_Slave_Transmit+0x1c0>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600c:	2b00      	cmp	r3, #0
 800600e:	d017      	beq.n	8006040 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	781a      	ldrb	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1ae      	bne.n	8005fa6 <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2200      	movs	r2, #0
 8006050:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f002 f935 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e01b      	b.n	800609c <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800606c:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800607c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2220      	movs	r2, #32
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	e000      	b.n	800609c <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800609a:	2302      	movs	r3, #2
  }
}
 800609c:	4618      	mov	r0, r3
 800609e:	3720      	adds	r7, #32
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	ffff0000 	.word	0xffff0000
 80060a8:	00010002 	.word	0x00010002

080060ac <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	; 0x28
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	4613      	mov	r3, r2
 80060ba:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060bc:	f7ff fa72 	bl	80055a4 <HAL_GetTick>
 80060c0:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	f040 80ee 	bne.w	80062ac <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <HAL_I2C_Slave_Receive+0x30>
 80060d6:	88fb      	ldrh	r3, [r7, #6]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e0e6      	b.n	80062ae <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <HAL_I2C_Slave_Receive+0x42>
 80060ea:	2302      	movs	r3, #2
 80060ec:	e0df      	b.n	80062ae <HAL_I2C_Slave_Receive+0x202>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b01      	cmp	r3, #1
 8006102:	d007      	beq.n	8006114 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0201 	orr.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006122:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2222      	movs	r2, #34	; 0x22
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	88fa      	ldrh	r2, [r7, #6]
 8006144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4a59      	ldr	r2, [pc, #356]	; (80062b8 <HAL_I2C_Slave_Receive+0x20c>)
 8006154:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006164:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2200      	movs	r2, #0
 800616e:	4953      	ldr	r1, [pc, #332]	; (80062bc <HAL_I2C_Slave_Receive+0x210>)
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f002 f8a7 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e096      	b.n	80062ae <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006180:	2300      	movs	r3, #0
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	61bb      	str	r3, [r7, #24]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	61bb      	str	r3, [r7, #24]
 8006194:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 8006196:	e04e      	b.n	8006236 <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006198:	69fa      	ldr	r2, [r7, #28]
 800619a:	6839      	ldr	r1, [r7, #0]
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f002 fa59 	bl	8008654 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d009      	beq.n	80061bc <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b6:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e078      	b.n	80062ae <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691a      	ldr	r2, [r3, #16]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d11c      	bne.n	8006236 <HAL_I2C_Slave_Receive+0x18a>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006200:	2b00      	cmp	r3, #0
 8006202:	d018      	beq.n	8006236 <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	b29a      	uxth	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1ac      	bne.n	8006198 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f002 f996 	bl	8008574 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d009      	beq.n	8006262 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625c:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e025      	b.n	80062ae <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0201 	orr.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800628e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	e000      	b.n	80062ae <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 80062ac:	2302      	movs	r3, #2
  }
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3720      	adds	r7, #32
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	ffff0000 	.word	0xffff0000
 80062bc:	00010002 	.word	0x00010002

080062c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	4608      	mov	r0, r1
 80062ca:	4611      	mov	r1, r2
 80062cc:	461a      	mov	r2, r3
 80062ce:	4603      	mov	r3, r0
 80062d0:	817b      	strh	r3, [r7, #10]
 80062d2:	460b      	mov	r3, r1
 80062d4:	813b      	strh	r3, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062da:	f7ff f963 	bl	80055a4 <HAL_GetTick>
 80062de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	f040 80d9 	bne.w	80064a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	2319      	movs	r3, #25
 80062f4:	2201      	movs	r2, #1
 80062f6:	496d      	ldr	r1, [pc, #436]	; (80064ac <HAL_I2C_Mem_Write+0x1ec>)
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f001 ffe3 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006304:	2302      	movs	r3, #2
 8006306:	e0cc      	b.n	80064a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <HAL_I2C_Mem_Write+0x56>
 8006312:	2302      	movs	r3, #2
 8006314:	e0c5      	b.n	80064a2 <HAL_I2C_Mem_Write+0x1e2>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b01      	cmp	r3, #1
 800632a:	d007      	beq.n	800633c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0201 	orr.w	r2, r2, #1
 800633a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800634a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2221      	movs	r2, #33	; 0x21
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2240      	movs	r2, #64	; 0x40
 8006358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a3a      	ldr	r2, [r7, #32]
 8006366:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800636c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4a4d      	ldr	r2, [pc, #308]	; (80064b0 <HAL_I2C_Mem_Write+0x1f0>)
 800637c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800637e:	88f8      	ldrh	r0, [r7, #6]
 8006380:	893a      	ldrh	r2, [r7, #8]
 8006382:	8979      	ldrh	r1, [r7, #10]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	9301      	str	r3, [sp, #4]
 8006388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	4603      	mov	r3, r0
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f001 fd72 	bl	8007e78 <I2C_RequestMemoryWrite>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d052      	beq.n	8006440 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e081      	b.n	80064a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f002 f864 	bl	8008470 <I2C_WaitOnTXEFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00d      	beq.n	80063ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d107      	bne.n	80063c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e06b      	b.n	80064a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	781a      	ldrb	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e4:	3b01      	subs	r3, #1
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b04      	cmp	r3, #4
 8006406:	d11b      	bne.n	8006440 <HAL_I2C_Mem_Write+0x180>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640c:	2b00      	cmp	r3, #0
 800640e:	d017      	beq.n	8006440 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	781a      	ldrb	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006436:	b29b      	uxth	r3, r3
 8006438:	3b01      	subs	r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1aa      	bne.n	800639e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f002 f850 	bl	80084f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00d      	beq.n	8006474 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	2b04      	cmp	r3, #4
 800645e:	d107      	bne.n	8006470 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800646e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e016      	b.n	80064a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006482:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	e000      	b.n	80064a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80064a0:	2302      	movs	r3, #2
  }
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	00100002 	.word	0x00100002
 80064b0:	ffff0000 	.word	0xffff0000

080064b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08c      	sub	sp, #48	; 0x30
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	4608      	mov	r0, r1
 80064be:	4611      	mov	r1, r2
 80064c0:	461a      	mov	r2, r3
 80064c2:	4603      	mov	r3, r0
 80064c4:	817b      	strh	r3, [r7, #10]
 80064c6:	460b      	mov	r3, r1
 80064c8:	813b      	strh	r3, [r7, #8]
 80064ca:	4613      	mov	r3, r2
 80064cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064ce:	f7ff f869 	bl	80055a4 <HAL_GetTick>
 80064d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b20      	cmp	r3, #32
 80064de:	f040 8208 	bne.w	80068f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	2319      	movs	r3, #25
 80064e8:	2201      	movs	r2, #1
 80064ea:	497b      	ldr	r1, [pc, #492]	; (80066d8 <HAL_I2C_Mem_Read+0x224>)
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f001 fee9 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
 80064fa:	e1fb      	b.n	80068f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006502:	2b01      	cmp	r3, #1
 8006504:	d101      	bne.n	800650a <HAL_I2C_Mem_Read+0x56>
 8006506:	2302      	movs	r3, #2
 8006508:	e1f4      	b.n	80068f4 <HAL_I2C_Mem_Read+0x440>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b01      	cmp	r3, #1
 800651e:	d007      	beq.n	8006530 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800653e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2222      	movs	r2, #34	; 0x22
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2240      	movs	r2, #64	; 0x40
 800654c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006560:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006566:	b29a      	uxth	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4a5b      	ldr	r2, [pc, #364]	; (80066dc <HAL_I2C_Mem_Read+0x228>)
 8006570:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006572:	88f8      	ldrh	r0, [r7, #6]
 8006574:	893a      	ldrh	r2, [r7, #8]
 8006576:	8979      	ldrh	r1, [r7, #10]
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	9301      	str	r3, [sp, #4]
 800657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	4603      	mov	r3, r0
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f001 fd0e 	bl	8007fa4 <I2C_RequestMemoryRead>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e1b0      	b.n	80068f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006596:	2b00      	cmp	r3, #0
 8006598:	d113      	bne.n	80065c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800659a:	2300      	movs	r3, #0
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	623b      	str	r3, [r7, #32]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	623b      	str	r3, [r7, #32]
 80065ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	e184      	b.n	80068cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d11b      	bne.n	8006602 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065da:	2300      	movs	r3, #0
 80065dc:	61fb      	str	r3, [r7, #28]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	61fb      	str	r3, [r7, #28]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	61fb      	str	r3, [r7, #28]
 80065ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	e164      	b.n	80068cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006606:	2b02      	cmp	r3, #2
 8006608:	d11b      	bne.n	8006642 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006618:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006628:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800662a:	2300      	movs	r3, #0
 800662c:	61bb      	str	r3, [r7, #24]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	61bb      	str	r3, [r7, #24]
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	e144      	b.n	80068cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006642:	2300      	movs	r3, #0
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	617b      	str	r3, [r7, #20]
 8006656:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006658:	e138      	b.n	80068cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665e:	2b03      	cmp	r3, #3
 8006660:	f200 80f1 	bhi.w	8006846 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006668:	2b01      	cmp	r3, #1
 800666a:	d123      	bne.n	80066b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800666c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f001 ffef 	bl	8008654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e139      	b.n	80068f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691a      	ldr	r2, [r3, #16]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066b2:	e10b      	b.n	80068cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d14e      	bne.n	800675a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	2200      	movs	r2, #0
 80066c4:	4906      	ldr	r1, [pc, #24]	; (80066e0 <HAL_I2C_Mem_Read+0x22c>)
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f001 fdfc 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d008      	beq.n	80066e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e10e      	b.n	80068f4 <HAL_I2C_Mem_Read+0x440>
 80066d6:	bf00      	nop
 80066d8:	00100002 	.word	0x00100002
 80066dc:	ffff0000 	.word	0xffff0000
 80066e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	691a      	ldr	r2, [r3, #16]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006710:	3b01      	subs	r3, #1
 8006712:	b29a      	uxth	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	b29a      	uxth	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006742:	3b01      	subs	r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006758:	e0b8      	b.n	80068cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	2200      	movs	r2, #0
 8006762:	4966      	ldr	r1, [pc, #408]	; (80068fc <HAL_I2C_Mem_Read+0x448>)
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f001 fdad 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e0bf      	b.n	80068f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	2200      	movs	r2, #0
 80067be:	494f      	ldr	r1, [pc, #316]	; (80068fc <HAL_I2C_Mem_Read+0x448>)
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f001 fd7f 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e091      	b.n	80068f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691a      	ldr	r2, [r3, #16]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006808:	b29b      	uxth	r3, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683a:	b29b      	uxth	r3, r3
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006844:	e042      	b.n	80068cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006848:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f001 ff02 	bl	8008654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e04c      	b.n	80068f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b04      	cmp	r3, #4
 8006898:	d118      	bne.n	80068cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f47f aec2 	bne.w	800665a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2220      	movs	r2, #32
 80068da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	e000      	b.n	80068f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80068f2:	2302      	movs	r3, #2
  }
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3728      	adds	r7, #40	; 0x28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	00010004 	.word	0x00010004

08006900 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b088      	sub	sp, #32
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006920:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006928:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800692a:	7bfb      	ldrb	r3, [r7, #15]
 800692c:	2b10      	cmp	r3, #16
 800692e:	d003      	beq.n	8006938 <HAL_I2C_EV_IRQHandler+0x38>
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	2b40      	cmp	r3, #64	; 0x40
 8006934:	f040 80c1 	bne.w	8006aba <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10d      	bne.n	800696e <HAL_I2C_EV_IRQHandler+0x6e>
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006958:	d003      	beq.n	8006962 <HAL_I2C_EV_IRQHandler+0x62>
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006960:	d101      	bne.n	8006966 <HAL_I2C_EV_IRQHandler+0x66>
 8006962:	2301      	movs	r3, #1
 8006964:	e000      	b.n	8006968 <HAL_I2C_EV_IRQHandler+0x68>
 8006966:	2300      	movs	r3, #0
 8006968:	2b01      	cmp	r3, #1
 800696a:	f000 8132 	beq.w	8006bd2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00c      	beq.n	8006992 <HAL_I2C_EV_IRQHandler+0x92>
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	0a5b      	lsrs	r3, r3, #9
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d006      	beq.n	8006992 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 feea 	bl	800875e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fcc8 	bl	8007320 <I2C_Master_SB>
 8006990:	e092      	b.n	8006ab8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	08db      	lsrs	r3, r3, #3
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d009      	beq.n	80069b2 <HAL_I2C_EV_IRQHandler+0xb2>
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	0a5b      	lsrs	r3, r3, #9
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fd3e 	bl	800742c <I2C_Master_ADD10>
 80069b0:	e082      	b.n	8006ab8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	085b      	lsrs	r3, r3, #1
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d009      	beq.n	80069d2 <HAL_I2C_EV_IRQHandler+0xd2>
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	0a5b      	lsrs	r3, r3, #9
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fd58 	bl	8007480 <I2C_Master_ADDR>
 80069d0:	e072      	b.n	8006ab8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	089b      	lsrs	r3, r3, #2
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d03b      	beq.n	8006a56 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ec:	f000 80f3 	beq.w	8006bd6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	09db      	lsrs	r3, r3, #7
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00f      	beq.n	8006a1c <HAL_I2C_EV_IRQHandler+0x11c>
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	0a9b      	lsrs	r3, r3, #10
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d009      	beq.n	8006a1c <HAL_I2C_EV_IRQHandler+0x11c>
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	089b      	lsrs	r3, r3, #2
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d103      	bne.n	8006a1c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f942 	bl	8006c9e <I2C_MasterTransmit_TXE>
 8006a1a:	e04d      	b.n	8006ab8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	089b      	lsrs	r3, r3, #2
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 80d6 	beq.w	8006bd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	0a5b      	lsrs	r3, r3, #9
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 80cf 	beq.w	8006bd6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	2b21      	cmp	r3, #33	; 0x21
 8006a3c:	d103      	bne.n	8006a46 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9c9 	bl	8006dd6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a44:	e0c7      	b.n	8006bd6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
 8006a48:	2b40      	cmp	r3, #64	; 0x40
 8006a4a:	f040 80c4 	bne.w	8006bd6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa37 	bl	8006ec2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a54:	e0bf      	b.n	8006bd6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a64:	f000 80b7 	beq.w	8006bd6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	099b      	lsrs	r3, r3, #6
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00f      	beq.n	8006a94 <HAL_I2C_EV_IRQHandler+0x194>
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	0a9b      	lsrs	r3, r3, #10
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d009      	beq.n	8006a94 <HAL_I2C_EV_IRQHandler+0x194>
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	089b      	lsrs	r3, r3, #2
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d103      	bne.n	8006a94 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 faac 	bl	8006fea <I2C_MasterReceive_RXNE>
 8006a92:	e011      	b.n	8006ab8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	089b      	lsrs	r3, r3, #2
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 809a 	beq.w	8006bd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	0a5b      	lsrs	r3, r3, #9
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 8093 	beq.w	8006bd6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fb4b 	bl	800714c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ab6:	e08e      	b.n	8006bd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006ab8:	e08d      	b.n	8006bd6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d004      	beq.n	8006acc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	e007      	b.n	8006adc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d012      	beq.n	8006b0e <HAL_I2C_EV_IRQHandler+0x20e>
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	0a5b      	lsrs	r3, r3, #9
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00c      	beq.n	8006b0e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006b04:	69b9      	ldr	r1, [r7, #24]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 ff09 	bl	800791e <I2C_Slave_ADDR>
 8006b0c:	e066      	b.n	8006bdc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	091b      	lsrs	r3, r3, #4
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d009      	beq.n	8006b2e <HAL_I2C_EV_IRQHandler+0x22e>
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	0a5b      	lsrs	r3, r3, #9
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 ff44 	bl	80079b4 <I2C_Slave_STOPF>
 8006b2c:	e056      	b.n	8006bdc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b2e:	7bbb      	ldrb	r3, [r7, #14]
 8006b30:	2b21      	cmp	r3, #33	; 0x21
 8006b32:	d002      	beq.n	8006b3a <HAL_I2C_EV_IRQHandler+0x23a>
 8006b34:	7bbb      	ldrb	r3, [r7, #14]
 8006b36:	2b29      	cmp	r3, #41	; 0x29
 8006b38:	d125      	bne.n	8006b86 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	09db      	lsrs	r3, r3, #7
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00f      	beq.n	8006b66 <HAL_I2C_EV_IRQHandler+0x266>
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	0a9b      	lsrs	r3, r3, #10
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d009      	beq.n	8006b66 <HAL_I2C_EV_IRQHandler+0x266>
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	089b      	lsrs	r3, r3, #2
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d103      	bne.n	8006b66 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fe1f 	bl	80077a2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b64:	e039      	b.n	8006bda <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	089b      	lsrs	r3, r3, #2
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d033      	beq.n	8006bda <HAL_I2C_EV_IRQHandler+0x2da>
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	0a5b      	lsrs	r3, r3, #9
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d02d      	beq.n	8006bda <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fe4c 	bl	800781c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b84:	e029      	b.n	8006bda <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	099b      	lsrs	r3, r3, #6
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00f      	beq.n	8006bb2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	0a9b      	lsrs	r3, r3, #10
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d009      	beq.n	8006bb2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	089b      	lsrs	r3, r3, #2
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d103      	bne.n	8006bb2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fe57 	bl	800785e <I2C_SlaveReceive_RXNE>
 8006bb0:	e014      	b.n	8006bdc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	089b      	lsrs	r3, r3, #2
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00e      	beq.n	8006bdc <HAL_I2C_EV_IRQHandler+0x2dc>
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	0a5b      	lsrs	r3, r3, #9
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d008      	beq.n	8006bdc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fe85 	bl	80078da <I2C_SlaveReceive_BTF>
 8006bd0:	e004      	b.n	8006bdc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006bd2:	bf00      	nop
 8006bd4:	e002      	b.n	8006bdc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bd6:	bf00      	nop
 8006bd8:	e000      	b.n	8006bdc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bda:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006bdc:	3720      	adds	r7, #32
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006bea:	bf00      	nop
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006c12:	bf00      	nop
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	460b      	mov	r3, r1
 8006c28:	70fb      	strb	r3, [r7, #3]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b083      	sub	sp, #12
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006c7e:	bf00      	nop
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006c92:	bf00      	nop
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cb4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d150      	bne.n	8006d66 <I2C_MasterTransmit_TXE+0xc8>
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	2b21      	cmp	r3, #33	; 0x21
 8006cc8:	d14d      	bne.n	8006d66 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d01d      	beq.n	8006d0c <I2C_MasterTransmit_TXE+0x6e>
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d01a      	beq.n	8006d0c <I2C_MasterTransmit_TXE+0x6e>
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006cdc:	d016      	beq.n	8006d0c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cec:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2211      	movs	r2, #17
 8006cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7ff ff6c 	bl	8006be2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d0a:	e060      	b.n	8006dce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d1a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d2a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d107      	bne.n	8006d56 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff ff7d 	bl	8006c4e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d54:	e03b      	b.n	8006dce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7ff ff3f 	bl	8006be2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d64:	e033      	b.n	8006dce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	2b21      	cmp	r3, #33	; 0x21
 8006d6a:	d005      	beq.n	8006d78 <I2C_MasterTransmit_TXE+0xda>
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	2b40      	cmp	r3, #64	; 0x40
 8006d70:	d12d      	bne.n	8006dce <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	2b22      	cmp	r3, #34	; 0x22
 8006d76:	d12a      	bne.n	8006dce <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d108      	bne.n	8006d94 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d90:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006d92:	e01c      	b.n	8006dce <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b40      	cmp	r3, #64	; 0x40
 8006d9e:	d103      	bne.n	8006da8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f88e 	bl	8006ec2 <I2C_MemoryTransmit_TXE_BTF>
}
 8006da6:	e012      	b.n	8006dce <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	781a      	ldrb	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006dcc:	e7ff      	b.n	8006dce <I2C_MasterTransmit_TXE+0x130>
 8006dce:	bf00      	nop
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b21      	cmp	r3, #33	; 0x21
 8006dee:	d164      	bne.n	8006eba <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d012      	beq.n	8006e20 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	781a      	ldrb	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	3b01      	subs	r3, #1
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006e1e:	e04c      	b.n	8006eba <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b08      	cmp	r3, #8
 8006e24:	d01d      	beq.n	8006e62 <I2C_MasterTransmit_BTF+0x8c>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b20      	cmp	r3, #32
 8006e2a:	d01a      	beq.n	8006e62 <I2C_MasterTransmit_BTF+0x8c>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e32:	d016      	beq.n	8006e62 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e42:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2211      	movs	r2, #17
 8006e48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2220      	movs	r2, #32
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7ff fec1 	bl	8006be2 <HAL_I2C_MasterTxCpltCallback>
}
 8006e60:	e02b      	b.n	8006eba <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e70:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e80:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b40      	cmp	r3, #64	; 0x40
 8006e9a:	d107      	bne.n	8006eac <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7ff fed2 	bl	8006c4e <HAL_I2C_MemTxCpltCallback>
}
 8006eaa:	e006      	b.n	8006eba <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff fe94 	bl	8006be2 <HAL_I2C_MasterTxCpltCallback>
}
 8006eba:	bf00      	nop
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d11d      	bne.n	8006f16 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d10b      	bne.n	8006efa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef2:	1c9a      	adds	r2, r3, #2
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006ef8:	e073      	b.n	8006fe2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	121b      	asrs	r3, r3, #8
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006f14:	e065      	b.n	8006fe2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d10b      	bne.n	8006f36 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006f34:	e055      	b.n	8006fe2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d151      	bne.n	8006fe2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	2b22      	cmp	r3, #34	; 0x22
 8006f42:	d10d      	bne.n	8006f60 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f52:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006f5e:	e040      	b.n	8006fe2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d015      	beq.n	8006f96 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
 8006f6c:	2b21      	cmp	r3, #33	; 0x21
 8006f6e:	d112      	bne.n	8006f96 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	781a      	ldrb	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f94:	e025      	b.n	8006fe2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d120      	bne.n	8006fe2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	2b21      	cmp	r3, #33	; 0x21
 8006fa4:	d11d      	bne.n	8006fe2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fb4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fc4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff fe36 	bl	8006c4e <HAL_I2C_MemTxCpltCallback>
}
 8006fe2:	bf00      	nop
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b22      	cmp	r3, #34	; 0x22
 8006ffc:	f040 80a2 	bne.w	8007144 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007004:	b29b      	uxth	r3, r3
 8007006:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b03      	cmp	r3, #3
 800700c:	d921      	bls.n	8007052 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	691a      	ldr	r2, [r3, #16]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	b2d2      	uxtb	r2, r2
 800701a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800702a:	b29b      	uxth	r3, r3
 800702c:	3b01      	subs	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b03      	cmp	r3, #3
 800703c:	f040 8082 	bne.w	8007144 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800704e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007050:	e078      	b.n	8007144 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007056:	2b02      	cmp	r3, #2
 8007058:	d074      	beq.n	8007144 <I2C_MasterReceive_RXNE+0x15a>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d002      	beq.n	8007066 <I2C_MasterReceive_RXNE+0x7c>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d16e      	bne.n	8007144 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 fac2 	bl	80085f0 <I2C_WaitOnSTOPRequestThroughIT>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d142      	bne.n	80070f8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007080:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007090:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	691a      	ldr	r2, [r3, #16]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	b2d2      	uxtb	r2, r2
 800709e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	3b01      	subs	r3, #1
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b40      	cmp	r3, #64	; 0x40
 80070ca:	d10a      	bne.n	80070e2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff fdc1 	bl	8006c62 <HAL_I2C_MemRxCpltCallback>
}
 80070e0:	e030      	b.n	8007144 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2212      	movs	r2, #18
 80070ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7ff fd80 	bl	8006bf6 <HAL_I2C_MasterRxCpltCallback>
}
 80070f6:	e025      	b.n	8007144 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007106:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	691a      	ldr	r2, [r3, #16]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007124:	b29b      	uxth	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	b29a      	uxth	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2220      	movs	r2, #32
 8007132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff fd99 	bl	8006c76 <HAL_I2C_ErrorCallback>
}
 8007144:	bf00      	nop
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715e:	b29b      	uxth	r3, r3
 8007160:	2b04      	cmp	r3, #4
 8007162:	d11b      	bne.n	800719c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007172:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	691a      	ldr	r2, [r3, #16]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	b2d2      	uxtb	r2, r2
 8007180:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007190:	b29b      	uxth	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	b29a      	uxth	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800719a:	e0bd      	b.n	8007318 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d129      	bne.n	80071fa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d00a      	beq.n	80071d2 <I2C_MasterReceive_BTF+0x86>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d007      	beq.n	80071d2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071d0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	691a      	ldr	r2, [r3, #16]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	b2d2      	uxtb	r2, r2
 80071de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	3b01      	subs	r3, #1
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80071f8:	e08e      	b.n	8007318 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071fe:	b29b      	uxth	r3, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d176      	bne.n	80072f2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d002      	beq.n	8007210 <I2C_MasterReceive_BTF+0xc4>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b10      	cmp	r3, #16
 800720e:	d108      	bne.n	8007222 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	e019      	b.n	8007256 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b04      	cmp	r3, #4
 8007226:	d002      	beq.n	800722e <I2C_MasterReceive_BTF+0xe2>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b02      	cmp	r3, #2
 800722c:	d108      	bne.n	8007240 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	e00a      	b.n	8007256 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2b10      	cmp	r3, #16
 8007244:	d007      	beq.n	8007256 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007254:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	691a      	ldr	r2, [r3, #16]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007272:	b29b      	uxth	r3, r3
 8007274:	3b01      	subs	r3, #1
 8007276:	b29a      	uxth	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	691a      	ldr	r2, [r3, #16]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80072b0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b40      	cmp	r3, #64	; 0x40
 80072c4:	d10a      	bne.n	80072dc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff fcc4 	bl	8006c62 <HAL_I2C_MemRxCpltCallback>
}
 80072da:	e01d      	b.n	8007318 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2212      	movs	r2, #18
 80072e8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff fc83 	bl	8006bf6 <HAL_I2C_MasterRxCpltCallback>
}
 80072f0:	e012      	b.n	8007318 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	b2d2      	uxtb	r2, r2
 80072fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007318:	bf00      	nop
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b40      	cmp	r3, #64	; 0x40
 8007332:	d117      	bne.n	8007364 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007338:	2b00      	cmp	r3, #0
 800733a:	d109      	bne.n	8007350 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007340:	b2db      	uxtb	r3, r3
 8007342:	461a      	mov	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800734c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800734e:	e067      	b.n	8007420 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007354:	b2db      	uxtb	r3, r3
 8007356:	f043 0301 	orr.w	r3, r3, #1
 800735a:	b2da      	uxtb	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	611a      	str	r2, [r3, #16]
}
 8007362:	e05d      	b.n	8007420 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800736c:	d133      	bne.n	80073d6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b21      	cmp	r3, #33	; 0x21
 8007378:	d109      	bne.n	800738e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737e:	b2db      	uxtb	r3, r3
 8007380:	461a      	mov	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800738a:	611a      	str	r2, [r3, #16]
 800738c:	e008      	b.n	80073a0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007392:	b2db      	uxtb	r3, r3
 8007394:	f043 0301 	orr.w	r3, r3, #1
 8007398:	b2da      	uxtb	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d004      	beq.n	80073b2 <I2C_Master_SB+0x92>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d108      	bne.n	80073c4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d032      	beq.n	8007420 <I2C_Master_SB+0x100>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d02d      	beq.n	8007420 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073d2:	605a      	str	r2, [r3, #4]
}
 80073d4:	e024      	b.n	8007420 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10e      	bne.n	80073fc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	11db      	asrs	r3, r3, #7
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	f003 0306 	and.w	r3, r3, #6
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	f063 030f 	orn	r3, r3, #15
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	611a      	str	r2, [r3, #16]
}
 80073fa:	e011      	b.n	8007420 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007400:	2b01      	cmp	r3, #1
 8007402:	d10d      	bne.n	8007420 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007408:	b29b      	uxth	r3, r3
 800740a:	11db      	asrs	r3, r3, #7
 800740c:	b2db      	uxtb	r3, r3
 800740e:	f003 0306 	and.w	r3, r3, #6
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f063 030e 	orn	r3, r3, #14
 8007418:	b2da      	uxtb	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	611a      	str	r2, [r3, #16]
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007438:	b2da      	uxtb	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <I2C_Master_ADD10+0x26>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744e:	2b00      	cmp	r3, #0
 8007450:	d108      	bne.n	8007464 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00c      	beq.n	8007474 <I2C_Master_ADD10+0x48>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007460:	2b00      	cmp	r3, #0
 8007462:	d007      	beq.n	8007474 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007472:	605a      	str	r2, [r3, #4]
  }
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007480:	b480      	push	{r7}
 8007482:	b091      	sub	sp, #68	; 0x44
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800748e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b22      	cmp	r3, #34	; 0x22
 80074a8:	f040 8169 	bne.w	800777e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10f      	bne.n	80074d4 <I2C_Master_ADDR+0x54>
 80074b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80074b8:	2b40      	cmp	r3, #64	; 0x40
 80074ba:	d10b      	bne.n	80074d4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074bc:	2300      	movs	r3, #0
 80074be:	633b      	str	r3, [r7, #48]	; 0x30
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	633b      	str	r3, [r7, #48]	; 0x30
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	633b      	str	r3, [r7, #48]	; 0x30
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	e160      	b.n	8007796 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d11d      	bne.n	8007518 <I2C_Master_ADDR+0x98>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074e4:	d118      	bne.n	8007518 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074e6:	2300      	movs	r3, #0
 80074e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800750a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	651a      	str	r2, [r3, #80]	; 0x50
 8007516:	e13e      	b.n	8007796 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d113      	bne.n	800754a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007522:	2300      	movs	r3, #0
 8007524:	62bb      	str	r3, [r7, #40]	; 0x28
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	62bb      	str	r3, [r7, #40]	; 0x28
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	e115      	b.n	8007776 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754e:	b29b      	uxth	r3, r3
 8007550:	2b01      	cmp	r3, #1
 8007552:	f040 808a 	bne.w	800766a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007558:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800755c:	d137      	bne.n	80075ce <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800756c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800757c:	d113      	bne.n	80075a6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800758c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800758e:	2300      	movs	r3, #0
 8007590:	627b      	str	r3, [r7, #36]	; 0x24
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	627b      	str	r3, [r7, #36]	; 0x24
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	e0e7      	b.n	8007776 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075a6:	2300      	movs	r3, #0
 80075a8:	623b      	str	r3, [r7, #32]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	623b      	str	r3, [r7, #32]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	623b      	str	r3, [r7, #32]
 80075ba:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	e0d3      	b.n	8007776 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d02e      	beq.n	8007632 <I2C_Master_ADDR+0x1b2>
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	d02b      	beq.n	8007632 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80075da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075dc:	2b12      	cmp	r3, #18
 80075de:	d102      	bne.n	80075e6 <I2C_Master_ADDR+0x166>
 80075e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d125      	bne.n	8007632 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d00e      	beq.n	800760a <I2C_Master_ADDR+0x18a>
 80075ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d00b      	beq.n	800760a <I2C_Master_ADDR+0x18a>
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	2b10      	cmp	r3, #16
 80075f6:	d008      	beq.n	800760a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	e007      	b.n	800761a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007618:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800761a:	2300      	movs	r3, #0
 800761c:	61fb      	str	r3, [r7, #28]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	61fb      	str	r3, [r7, #28]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	61fb      	str	r3, [r7, #28]
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	e0a1      	b.n	8007776 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007640:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007642:	2300      	movs	r3, #0
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	61bb      	str	r3, [r7, #24]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	61bb      	str	r3, [r7, #24]
 8007656:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	e085      	b.n	8007776 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800766e:	b29b      	uxth	r3, r3
 8007670:	2b02      	cmp	r3, #2
 8007672:	d14d      	bne.n	8007710 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007676:	2b04      	cmp	r3, #4
 8007678:	d016      	beq.n	80076a8 <I2C_Master_ADDR+0x228>
 800767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767c:	2b02      	cmp	r3, #2
 800767e:	d013      	beq.n	80076a8 <I2C_Master_ADDR+0x228>
 8007680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007682:	2b10      	cmp	r3, #16
 8007684:	d010      	beq.n	80076a8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007694:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	e007      	b.n	80076b8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076b6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076c6:	d117      	bne.n	80076f8 <I2C_Master_ADDR+0x278>
 80076c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076ce:	d00b      	beq.n	80076e8 <I2C_Master_ADDR+0x268>
 80076d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d008      	beq.n	80076e8 <I2C_Master_ADDR+0x268>
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	2b08      	cmp	r3, #8
 80076da:	d005      	beq.n	80076e8 <I2C_Master_ADDR+0x268>
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	2b10      	cmp	r3, #16
 80076e0:	d002      	beq.n	80076e8 <I2C_Master_ADDR+0x268>
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	2b20      	cmp	r3, #32
 80076e6:	d107      	bne.n	80076f8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076f6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	e032      	b.n	8007776 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800771e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800772a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800772e:	d117      	bne.n	8007760 <I2C_Master_ADDR+0x2e0>
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007736:	d00b      	beq.n	8007750 <I2C_Master_ADDR+0x2d0>
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	2b01      	cmp	r3, #1
 800773c:	d008      	beq.n	8007750 <I2C_Master_ADDR+0x2d0>
 800773e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007740:	2b08      	cmp	r3, #8
 8007742:	d005      	beq.n	8007750 <I2C_Master_ADDR+0x2d0>
 8007744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007746:	2b10      	cmp	r3, #16
 8007748:	d002      	beq.n	8007750 <I2C_Master_ADDR+0x2d0>
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	2b20      	cmp	r3, #32
 800774e:	d107      	bne.n	8007760 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800775e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007760:	2300      	movs	r3, #0
 8007762:	613b      	str	r3, [r7, #16]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	613b      	str	r3, [r7, #16]
 8007774:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800777c:	e00b      	b.n	8007796 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	60fb      	str	r3, [r7, #12]
 8007792:	68fb      	ldr	r3, [r7, #12]
}
 8007794:	e7ff      	b.n	8007796 <I2C_Master_ADDR+0x316>
 8007796:	bf00      	nop
 8007798:	3744      	adds	r7, #68	; 0x44
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d02b      	beq.n	8007814 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	781a      	ldrb	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	3b01      	subs	r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d114      	bne.n	8007814 <I2C_SlaveTransmit_TXE+0x72>
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	2b29      	cmp	r3, #41	; 0x29
 80077ee:	d111      	bne.n	8007814 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077fe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2221      	movs	r2, #33	; 0x21
 8007804:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2228      	movs	r2, #40	; 0x28
 800780a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff f9fb 	bl	8006c0a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007828:	b29b      	uxth	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d011      	beq.n	8007852 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	781a      	ldrb	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	1c5a      	adds	r2, r3, #1
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007848:	b29b      	uxth	r3, r3
 800784a:	3b01      	subs	r3, #1
 800784c:	b29a      	uxth	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800786c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d02c      	beq.n	80078d2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691a      	ldr	r2, [r3, #16]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	b2d2      	uxtb	r2, r2
 8007884:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007894:	b29b      	uxth	r3, r3
 8007896:	3b01      	subs	r3, #1
 8007898:	b29a      	uxth	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d114      	bne.n	80078d2 <I2C_SlaveReceive_RXNE+0x74>
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	2b2a      	cmp	r3, #42	; 0x2a
 80078ac:	d111      	bne.n	80078d2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2222      	movs	r2, #34	; 0x22
 80078c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2228      	movs	r2, #40	; 0x28
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7fb fdbb 	bl	8003448 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80078d2:	bf00      	nop
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d012      	beq.n	8007912 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	691a      	ldr	r2, [r3, #16]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f6:	b2d2      	uxtb	r2, r2
 80078f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007908:	b29b      	uxth	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	b29a      	uxth	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007912:	bf00      	nop
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007928:	2300      	movs	r3, #0
 800792a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007932:	b2db      	uxtb	r3, r3
 8007934:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007938:	2b28      	cmp	r3, #40	; 0x28
 800793a:	d127      	bne.n	800798c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800794a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	089b      	lsrs	r3, r3, #2
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007958:	2301      	movs	r3, #1
 800795a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	09db      	lsrs	r3, r3, #7
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d103      	bne.n	8007970 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	81bb      	strh	r3, [r7, #12]
 800796e:	e002      	b.n	8007976 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800797e:	89ba      	ldrh	r2, [r7, #12]
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff f94a 	bl	8006c1e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800798a:	e00e      	b.n	80079aa <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800798c:	2300      	movs	r3, #0
 800798e:	60bb      	str	r3, [r7, #8]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	60bb      	str	r3, [r7, #8]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	60bb      	str	r3, [r7, #8]
 80079a0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80079aa:	bf00      	nop
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
	...

080079b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80079d4:	2300      	movs	r3, #0
 80079d6:	60bb      	str	r3, [r7, #8]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	60bb      	str	r3, [r7, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f042 0201 	orr.w	r2, r2, #1
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a00:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a10:	d172      	bne.n	8007af8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	2b22      	cmp	r3, #34	; 0x22
 8007a16:	d002      	beq.n	8007a1e <I2C_Slave_STOPF+0x6a>
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a1c:	d135      	bne.n	8007a8a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d005      	beq.n	8007a42 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3a:	f043 0204 	orr.w	r2, r3, #4
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fd fed8 	bl	800580c <HAL_DMA_GetState>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d049      	beq.n	8007af6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a66:	4a69      	ldr	r2, [pc, #420]	; (8007c0c <I2C_Slave_STOPF+0x258>)
 8007a68:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fd feaa 	bl	80057c8 <HAL_DMA_Abort_IT>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d03d      	beq.n	8007af6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a84:	4610      	mov	r0, r2
 8007a86:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a88:	e035      	b.n	8007af6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	f043 0204 	orr.w	r2, r3, #4
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007abc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fd fea2 	bl	800580c <HAL_DMA_GetState>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d014      	beq.n	8007af8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad2:	4a4e      	ldr	r2, [pc, #312]	; (8007c0c <I2C_Slave_STOPF+0x258>)
 8007ad4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fd fe74 	bl	80057c8 <HAL_DMA_Abort_IT>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d008      	beq.n	8007af8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007af0:	4610      	mov	r0, r2
 8007af2:	4798      	blx	r3
 8007af4:	e000      	b.n	8007af8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007af6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d03e      	beq.n	8007b80 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	f003 0304 	and.w	r3, r3, #4
 8007b0c:	2b04      	cmp	r3, #4
 8007b0e:	d112      	bne.n	8007b36 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	691a      	ldr	r2, [r3, #16]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b40:	2b40      	cmp	r3, #64	; 0x40
 8007b42:	d112      	bne.n	8007b6a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	691a      	ldr	r2, [r3, #16]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	b2d2      	uxtb	r2, r2
 8007b50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	1c5a      	adds	r2, r3, #1
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	3b01      	subs	r3, #1
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d005      	beq.n	8007b80 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b78:	f043 0204 	orr.w	r2, r3, #4
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f843 	bl	8007c14 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007b8e:	e039      	b.n	8007c04 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	2b2a      	cmp	r3, #42	; 0x2a
 8007b94:	d109      	bne.n	8007baa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2228      	movs	r2, #40	; 0x28
 8007ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7fb fc4f 	bl	8003448 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b28      	cmp	r3, #40	; 0x28
 8007bb4:	d111      	bne.n	8007bda <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a15      	ldr	r2, [pc, #84]	; (8007c10 <I2C_Slave_STOPF+0x25c>)
 8007bba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff f831 	bl	8006c3a <HAL_I2C_ListenCpltCallback>
}
 8007bd8:	e014      	b.n	8007c04 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bde:	2b22      	cmp	r3, #34	; 0x22
 8007be0:	d002      	beq.n	8007be8 <I2C_Slave_STOPF+0x234>
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	2b22      	cmp	r3, #34	; 0x22
 8007be6:	d10d      	bne.n	8007c04 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7fb fc22 	bl	8003448 <HAL_I2C_SlaveRxCpltCallback>
}
 8007c04:	bf00      	nop
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	08008175 	.word	0x08008175
 8007c10:	ffff0000 	.word	0xffff0000

08007c14 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	2b10      	cmp	r3, #16
 8007c30:	d002      	beq.n	8007c38 <I2C_ITError+0x24>
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	2b40      	cmp	r3, #64	; 0x40
 8007c36:	d10a      	bne.n	8007c4e <I2C_ITError+0x3a>
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
 8007c3a:	2b22      	cmp	r3, #34	; 0x22
 8007c3c:	d107      	bne.n	8007c4e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c4c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c54:	2b28      	cmp	r3, #40	; 0x28
 8007c56:	d107      	bne.n	8007c68 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2228      	movs	r2, #40	; 0x28
 8007c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c66:	e015      	b.n	8007c94 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c76:	d00a      	beq.n	8007c8e <I2C_ITError+0x7a>
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	2b60      	cmp	r3, #96	; 0x60
 8007c7c:	d007      	beq.n	8007c8e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2220      	movs	r2, #32
 8007c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ca2:	d162      	bne.n	8007d6a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cb2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d020      	beq.n	8007d04 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc6:	4a6a      	ldr	r2, [pc, #424]	; (8007e70 <I2C_ITError+0x25c>)
 8007cc8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fd fd7a 	bl	80057c8 <HAL_DMA_Abort_IT>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 8089 	beq.w	8007dee <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f022 0201 	bic.w	r2, r2, #1
 8007cea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007cfe:	4610      	mov	r0, r2
 8007d00:	4798      	blx	r3
 8007d02:	e074      	b.n	8007dee <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d08:	4a59      	ldr	r2, [pc, #356]	; (8007e70 <I2C_ITError+0x25c>)
 8007d0a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fd fd59 	bl	80057c8 <HAL_DMA_Abort_IT>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d068      	beq.n	8007dee <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d26:	2b40      	cmp	r3, #64	; 0x40
 8007d28:	d10b      	bne.n	8007d42 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	691a      	ldr	r2, [r3, #16]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	b2d2      	uxtb	r2, r2
 8007d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	1c5a      	adds	r2, r3, #1
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f022 0201 	bic.w	r2, r2, #1
 8007d50:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	e041      	b.n	8007dee <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b60      	cmp	r3, #96	; 0x60
 8007d74:	d125      	bne.n	8007dc2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8e:	2b40      	cmp	r3, #64	; 0x40
 8007d90:	d10b      	bne.n	8007daa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	691a      	ldr	r2, [r3, #16]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9c:	b2d2      	uxtb	r2, r2
 8007d9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0201 	bic.w	r2, r2, #1
 8007db8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7fe ff65 	bl	8006c8a <HAL_I2C_AbortCpltCallback>
 8007dc0:	e015      	b.n	8007dee <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dcc:	2b40      	cmp	r3, #64	; 0x40
 8007dce:	d10b      	bne.n	8007de8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	691a      	ldr	r2, [r3, #16]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dda:	b2d2      	uxtb	r2, r2
 8007ddc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7fe ff44 	bl	8006c76 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10e      	bne.n	8007e1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d109      	bne.n	8007e1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d104      	bne.n	8007e1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d007      	beq.n	8007e2c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e2a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e32:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e38:	f003 0304 	and.w	r3, r3, #4
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d113      	bne.n	8007e68 <I2C_ITError+0x254>
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
 8007e42:	2b28      	cmp	r3, #40	; 0x28
 8007e44:	d110      	bne.n	8007e68 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a0a      	ldr	r2, [pc, #40]	; (8007e74 <I2C_ITError+0x260>)
 8007e4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7fe fee9 	bl	8006c3a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007e68:	bf00      	nop
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	08008175 	.word	0x08008175
 8007e74:	ffff0000 	.word	0xffff0000

08007e78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af02      	add	r7, sp, #8
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	4608      	mov	r0, r1
 8007e82:	4611      	mov	r1, r2
 8007e84:	461a      	mov	r2, r3
 8007e86:	4603      	mov	r3, r0
 8007e88:	817b      	strh	r3, [r7, #10]
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	813b      	strh	r3, [r7, #8]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ea0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 fa08 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00d      	beq.n	8007ed6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec8:	d103      	bne.n	8007ed2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e05f      	b.n	8007f96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ed6:	897b      	ldrh	r3, [r7, #10]
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	461a      	mov	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ee4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	6a3a      	ldr	r2, [r7, #32]
 8007eea:	492d      	ldr	r1, [pc, #180]	; (8007fa0 <I2C_RequestMemoryWrite+0x128>)
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 fa40 	bl	8008372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e04c      	b.n	8007f96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007efc:	2300      	movs	r3, #0
 8007efe:	617b      	str	r3, [r7, #20]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	617b      	str	r3, [r7, #20]
 8007f10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f14:	6a39      	ldr	r1, [r7, #32]
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 faaa 	bl	8008470 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00d      	beq.n	8007f3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d107      	bne.n	8007f3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e02b      	b.n	8007f96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f3e:	88fb      	ldrh	r3, [r7, #6]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d105      	bne.n	8007f50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f44:	893b      	ldrh	r3, [r7, #8]
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	611a      	str	r2, [r3, #16]
 8007f4e:	e021      	b.n	8007f94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007f50:	893b      	ldrh	r3, [r7, #8]
 8007f52:	0a1b      	lsrs	r3, r3, #8
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f60:	6a39      	ldr	r1, [r7, #32]
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 fa84 	bl	8008470 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00d      	beq.n	8007f8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d107      	bne.n	8007f86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e005      	b.n	8007f96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f8a:	893b      	ldrh	r3, [r7, #8]
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	00010002 	.word	0x00010002

08007fa4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b088      	sub	sp, #32
 8007fa8:	af02      	add	r7, sp, #8
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	4608      	mov	r0, r1
 8007fae:	4611      	mov	r1, r2
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	817b      	strh	r3, [r7, #10]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	813b      	strh	r3, [r7, #8]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 f96a 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00d      	beq.n	8008012 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008004:	d103      	bne.n	800800e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800800c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e0aa      	b.n	8008168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008012:	897b      	ldrh	r3, [r7, #10]
 8008014:	b2db      	uxtb	r3, r3
 8008016:	461a      	mov	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008020:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	6a3a      	ldr	r2, [r7, #32]
 8008026:	4952      	ldr	r1, [pc, #328]	; (8008170 <I2C_RequestMemoryRead+0x1cc>)
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 f9a2 	bl	8008372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e097      	b.n	8008168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008038:	2300      	movs	r3, #0
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800804e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008050:	6a39      	ldr	r1, [r7, #32]
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f000 fa0c 	bl	8008470 <I2C_WaitOnTXEFlagUntilTimeout>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00d      	beq.n	800807a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	2b04      	cmp	r3, #4
 8008064:	d107      	bne.n	8008076 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008074:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e076      	b.n	8008168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800807a:	88fb      	ldrh	r3, [r7, #6]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d105      	bne.n	800808c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008080:	893b      	ldrh	r3, [r7, #8]
 8008082:	b2da      	uxtb	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	611a      	str	r2, [r3, #16]
 800808a:	e021      	b.n	80080d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800808c:	893b      	ldrh	r3, [r7, #8]
 800808e:	0a1b      	lsrs	r3, r3, #8
 8008090:	b29b      	uxth	r3, r3
 8008092:	b2da      	uxtb	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800809a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800809c:	6a39      	ldr	r1, [r7, #32]
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 f9e6 	bl	8008470 <I2C_WaitOnTXEFlagUntilTimeout>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00d      	beq.n	80080c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	2b04      	cmp	r3, #4
 80080b0:	d107      	bne.n	80080c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e050      	b.n	8008168 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080c6:	893b      	ldrh	r3, [r7, #8]
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d2:	6a39      	ldr	r1, [r7, #32]
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 f9cb 	bl	8008470 <I2C_WaitOnTXEFlagUntilTimeout>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00d      	beq.n	80080fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d107      	bne.n	80080f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e035      	b.n	8008168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800810a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	2200      	movs	r2, #0
 8008114:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 f8d3 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00d      	beq.n	8008140 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008132:	d103      	bne.n	800813c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800813a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e013      	b.n	8008168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008140:	897b      	ldrh	r3, [r7, #10]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f043 0301 	orr.w	r3, r3, #1
 8008148:	b2da      	uxtb	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	6a3a      	ldr	r2, [r7, #32]
 8008154:	4906      	ldr	r1, [pc, #24]	; (8008170 <I2C_RequestMemoryRead+0x1cc>)
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 f90b 	bl	8008372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e000      	b.n	8008168 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	00010002 	.word	0x00010002

08008174 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008184:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800818c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800818e:	4b4b      	ldr	r3, [pc, #300]	; (80082bc <I2C_DMAAbort+0x148>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	08db      	lsrs	r3, r3, #3
 8008194:	4a4a      	ldr	r2, [pc, #296]	; (80082c0 <I2C_DMAAbort+0x14c>)
 8008196:	fba2 2303 	umull	r2, r3, r2, r3
 800819a:	0a1a      	lsrs	r2, r3, #8
 800819c:	4613      	mov	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	00da      	lsls	r2, r3, #3
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d106      	bne.n	80081bc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	f043 0220 	orr.w	r2, r3, #32
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80081ba:	e00a      	b.n	80081d2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	3b01      	subs	r3, #1
 80081c0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081d0:	d0ea      	beq.n	80081a8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081de:	2200      	movs	r2, #0
 80081e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ee:	2200      	movs	r2, #0
 80081f0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008200:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	2200      	movs	r2, #0
 8008206:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008214:	2200      	movs	r2, #0
 8008216:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008224:	2200      	movs	r2, #0
 8008226:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0201 	bic.w	r2, r2, #1
 8008236:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b60      	cmp	r3, #96	; 0x60
 8008242:	d10e      	bne.n	8008262 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	2220      	movs	r2, #32
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	2200      	movs	r2, #0
 8008258:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800825a:	6978      	ldr	r0, [r7, #20]
 800825c:	f7fe fd15 	bl	8006c8a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008260:	e027      	b.n	80082b2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008262:	7cfb      	ldrb	r3, [r7, #19]
 8008264:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008268:	2b28      	cmp	r3, #40	; 0x28
 800826a:	d117      	bne.n	800829c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f042 0201 	orr.w	r2, r2, #1
 800827a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800828a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2200      	movs	r2, #0
 8008290:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2228      	movs	r2, #40	; 0x28
 8008296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800829a:	e007      	b.n	80082ac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	2220      	movs	r2, #32
 80082a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80082ac:	6978      	ldr	r0, [r7, #20]
 80082ae:	f7fe fce2 	bl	8006c76 <HAL_I2C_ErrorCallback>
}
 80082b2:	bf00      	nop
 80082b4:	3718      	adds	r7, #24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	2000000c 	.word	0x2000000c
 80082c0:	14f8b589 	.word	0x14f8b589

080082c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	603b      	str	r3, [r7, #0]
 80082d0:	4613      	mov	r3, r2
 80082d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082d4:	e025      	b.n	8008322 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082dc:	d021      	beq.n	8008322 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082de:	f7fd f961 	bl	80055a4 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d302      	bcc.n	80082f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d116      	bne.n	8008322 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2220      	movs	r2, #32
 80082fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	f043 0220 	orr.w	r2, r3, #32
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e023      	b.n	800836a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	0c1b      	lsrs	r3, r3, #16
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b01      	cmp	r3, #1
 800832a:	d10d      	bne.n	8008348 <I2C_WaitOnFlagUntilTimeout+0x84>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	43da      	mvns	r2, r3
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	4013      	ands	r3, r2
 8008338:	b29b      	uxth	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	bf0c      	ite	eq
 800833e:	2301      	moveq	r3, #1
 8008340:	2300      	movne	r3, #0
 8008342:	b2db      	uxtb	r3, r3
 8008344:	461a      	mov	r2, r3
 8008346:	e00c      	b.n	8008362 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	43da      	mvns	r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	4013      	ands	r3, r2
 8008354:	b29b      	uxth	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	bf0c      	ite	eq
 800835a:	2301      	moveq	r3, #1
 800835c:	2300      	movne	r3, #0
 800835e:	b2db      	uxtb	r3, r3
 8008360:	461a      	mov	r2, r3
 8008362:	79fb      	ldrb	r3, [r7, #7]
 8008364:	429a      	cmp	r2, r3
 8008366:	d0b6      	beq.n	80082d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	60b9      	str	r1, [r7, #8]
 800837c:	607a      	str	r2, [r7, #4]
 800837e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008380:	e051      	b.n	8008426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800838c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008390:	d123      	bne.n	80083da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c6:	f043 0204 	orr.w	r2, r3, #4
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e046      	b.n	8008468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e0:	d021      	beq.n	8008426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083e2:	f7fd f8df 	bl	80055a4 <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d302      	bcc.n	80083f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d116      	bne.n	8008426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2220      	movs	r2, #32
 8008402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	f043 0220 	orr.w	r2, r3, #32
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e020      	b.n	8008468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	0c1b      	lsrs	r3, r3, #16
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b01      	cmp	r3, #1
 800842e:	d10c      	bne.n	800844a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	43da      	mvns	r2, r3
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	4013      	ands	r3, r2
 800843c:	b29b      	uxth	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	bf14      	ite	ne
 8008442:	2301      	movne	r3, #1
 8008444:	2300      	moveq	r3, #0
 8008446:	b2db      	uxtb	r3, r3
 8008448:	e00b      	b.n	8008462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	43da      	mvns	r2, r3
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	4013      	ands	r3, r2
 8008456:	b29b      	uxth	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	bf14      	ite	ne
 800845c:	2301      	movne	r3, #1
 800845e:	2300      	moveq	r3, #0
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d18d      	bne.n	8008382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800847c:	e02d      	b.n	80084da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 f93e 	bl	8008700 <I2C_IsAcknowledgeFailed>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e02d      	b.n	80084ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008494:	d021      	beq.n	80084da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008496:	f7fd f885 	bl	80055a4 <HAL_GetTick>
 800849a:	4602      	mov	r2, r0
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d302      	bcc.n	80084ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d116      	bne.n	80084da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2220      	movs	r2, #32
 80084b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c6:	f043 0220 	orr.w	r2, r3, #32
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e007      	b.n	80084ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e4:	2b80      	cmp	r3, #128	; 0x80
 80084e6:	d1ca      	bne.n	800847e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084fe:	e02d      	b.n	800855c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f000 f8fd 	bl	8008700 <I2C_IsAcknowledgeFailed>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d001      	beq.n	8008510 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e02d      	b.n	800856c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008516:	d021      	beq.n	800855c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008518:	f7fd f844 	bl	80055a4 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	429a      	cmp	r2, r3
 8008526:	d302      	bcc.n	800852e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d116      	bne.n	800855c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2220      	movs	r2, #32
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008548:	f043 0220 	orr.w	r2, r3, #32
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e007      	b.n	800856c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	f003 0304 	and.w	r3, r3, #4
 8008566:	2b04      	cmp	r3, #4
 8008568:	d1ca      	bne.n	8008500 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008580:	e029      	b.n	80085d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 f8bc 	bl	8008700 <I2C_IsAcknowledgeFailed>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e029      	b.n	80085e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008592:	f7fd f807 	bl	80055a4 <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d302      	bcc.n	80085a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d116      	bne.n	80085d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2220      	movs	r2, #32
 80085b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c2:	f043 0220 	orr.w	r2, r3, #32
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e007      	b.n	80085e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b10      	cmp	r3, #16
 80085e2:	d1ce      	bne.n	8008582 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80085fc:	4b13      	ldr	r3, [pc, #76]	; (800864c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	08db      	lsrs	r3, r3, #3
 8008602:	4a13      	ldr	r2, [pc, #76]	; (8008650 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008604:	fba2 2303 	umull	r2, r3, r2, r3
 8008608:	0a1a      	lsrs	r2, r3, #8
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3b01      	subs	r3, #1
 8008616:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d107      	bne.n	800862e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008622:	f043 0220 	orr.w	r2, r3, #32
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e008      	b.n	8008640 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800863c:	d0e9      	beq.n	8008612 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	2000000c 	.word	0x2000000c
 8008650:	14f8b589 	.word	0x14f8b589

08008654 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008660:	e042      	b.n	80086e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	f003 0310 	and.w	r3, r3, #16
 800866c:	2b10      	cmp	r3, #16
 800866e:	d119      	bne.n	80086a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f06f 0210 	mvn.w	r2, #16
 8008678:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2220      	movs	r2, #32
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e029      	b.n	80086f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086a4:	f7fc ff7e 	bl	80055a4 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d302      	bcc.n	80086ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d116      	bne.n	80086e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d4:	f043 0220 	orr.w	r2, r3, #32
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e007      	b.n	80086f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f2:	2b40      	cmp	r3, #64	; 0x40
 80086f4:	d1b5      	bne.n	8008662 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008716:	d11b      	bne.n	8008750 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008720:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2220      	movs	r2, #32
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873c:	f043 0204 	orr.w	r2, r3, #4
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e000      	b.n	8008752 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800876e:	d103      	bne.n	8008778 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008776:	e007      	b.n	8008788 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008780:	d102      	bne.n	8008788 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2208      	movs	r2, #8
 8008786:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008796:	b08f      	sub	sp, #60	; 0x3c
 8008798:	af0a      	add	r7, sp, #40	; 0x28
 800879a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e10f      	b.n	80089c6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d106      	bne.n	80087c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f009 fb79 	bl	8011eb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2203      	movs	r2, #3
 80087ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d102      	bne.n	80087e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f003 fcda 	bl	800c19e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	603b      	str	r3, [r7, #0]
 80087f0:	687e      	ldr	r6, [r7, #4]
 80087f2:	466d      	mov	r5, sp
 80087f4:	f106 0410 	add.w	r4, r6, #16
 80087f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008800:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008804:	e885 0003 	stmia.w	r5, {r0, r1}
 8008808:	1d33      	adds	r3, r6, #4
 800880a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800880c:	6838      	ldr	r0, [r7, #0]
 800880e:	f003 fbb1 	bl	800bf74 <USB_CoreInit>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d005      	beq.n	8008824 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2202      	movs	r2, #2
 800881c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e0d0      	b.n	80089c6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2100      	movs	r1, #0
 800882a:	4618      	mov	r0, r3
 800882c:	f003 fcc8 	bl	800c1c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008830:	2300      	movs	r3, #0
 8008832:	73fb      	strb	r3, [r7, #15]
 8008834:	e04a      	b.n	80088cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008836:	7bfa      	ldrb	r2, [r7, #15]
 8008838:	6879      	ldr	r1, [r7, #4]
 800883a:	4613      	mov	r3, r2
 800883c:	00db      	lsls	r3, r3, #3
 800883e:	1a9b      	subs	r3, r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	440b      	add	r3, r1
 8008844:	333d      	adds	r3, #61	; 0x3d
 8008846:	2201      	movs	r2, #1
 8008848:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800884a:	7bfa      	ldrb	r2, [r7, #15]
 800884c:	6879      	ldr	r1, [r7, #4]
 800884e:	4613      	mov	r3, r2
 8008850:	00db      	lsls	r3, r3, #3
 8008852:	1a9b      	subs	r3, r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	440b      	add	r3, r1
 8008858:	333c      	adds	r3, #60	; 0x3c
 800885a:	7bfa      	ldrb	r2, [r7, #15]
 800885c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800885e:	7bfa      	ldrb	r2, [r7, #15]
 8008860:	7bfb      	ldrb	r3, [r7, #15]
 8008862:	b298      	uxth	r0, r3
 8008864:	6879      	ldr	r1, [r7, #4]
 8008866:	4613      	mov	r3, r2
 8008868:	00db      	lsls	r3, r3, #3
 800886a:	1a9b      	subs	r3, r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	440b      	add	r3, r1
 8008870:	3342      	adds	r3, #66	; 0x42
 8008872:	4602      	mov	r2, r0
 8008874:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008876:	7bfa      	ldrb	r2, [r7, #15]
 8008878:	6879      	ldr	r1, [r7, #4]
 800887a:	4613      	mov	r3, r2
 800887c:	00db      	lsls	r3, r3, #3
 800887e:	1a9b      	subs	r3, r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	440b      	add	r3, r1
 8008884:	333f      	adds	r3, #63	; 0x3f
 8008886:	2200      	movs	r2, #0
 8008888:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800888a:	7bfa      	ldrb	r2, [r7, #15]
 800888c:	6879      	ldr	r1, [r7, #4]
 800888e:	4613      	mov	r3, r2
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	1a9b      	subs	r3, r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	440b      	add	r3, r1
 8008898:	3344      	adds	r3, #68	; 0x44
 800889a:	2200      	movs	r2, #0
 800889c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800889e:	7bfa      	ldrb	r2, [r7, #15]
 80088a0:	6879      	ldr	r1, [r7, #4]
 80088a2:	4613      	mov	r3, r2
 80088a4:	00db      	lsls	r3, r3, #3
 80088a6:	1a9b      	subs	r3, r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	440b      	add	r3, r1
 80088ac:	3348      	adds	r3, #72	; 0x48
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80088b2:	7bfa      	ldrb	r2, [r7, #15]
 80088b4:	6879      	ldr	r1, [r7, #4]
 80088b6:	4613      	mov	r3, r2
 80088b8:	00db      	lsls	r3, r3, #3
 80088ba:	1a9b      	subs	r3, r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	440b      	add	r3, r1
 80088c0:	3350      	adds	r3, #80	; 0x50
 80088c2:	2200      	movs	r2, #0
 80088c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	3301      	adds	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]
 80088cc:	7bfa      	ldrb	r2, [r7, #15]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d3af      	bcc.n	8008836 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088d6:	2300      	movs	r3, #0
 80088d8:	73fb      	strb	r3, [r7, #15]
 80088da:	e044      	b.n	8008966 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80088dc:	7bfa      	ldrb	r2, [r7, #15]
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	4613      	mov	r3, r2
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	1a9b      	subs	r3, r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	440b      	add	r3, r1
 80088ea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80088ee:	2200      	movs	r2, #0
 80088f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80088f2:	7bfa      	ldrb	r2, [r7, #15]
 80088f4:	6879      	ldr	r1, [r7, #4]
 80088f6:	4613      	mov	r3, r2
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	1a9b      	subs	r3, r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	440b      	add	r3, r1
 8008900:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008904:	7bfa      	ldrb	r2, [r7, #15]
 8008906:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008908:	7bfa      	ldrb	r2, [r7, #15]
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	4613      	mov	r3, r2
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	1a9b      	subs	r3, r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	440b      	add	r3, r1
 8008916:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800891a:	2200      	movs	r2, #0
 800891c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800891e:	7bfa      	ldrb	r2, [r7, #15]
 8008920:	6879      	ldr	r1, [r7, #4]
 8008922:	4613      	mov	r3, r2
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	1a9b      	subs	r3, r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	440b      	add	r3, r1
 800892c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008934:	7bfa      	ldrb	r2, [r7, #15]
 8008936:	6879      	ldr	r1, [r7, #4]
 8008938:	4613      	mov	r3, r2
 800893a:	00db      	lsls	r3, r3, #3
 800893c:	1a9b      	subs	r3, r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	440b      	add	r3, r1
 8008942:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008946:	2200      	movs	r2, #0
 8008948:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800894a:	7bfa      	ldrb	r2, [r7, #15]
 800894c:	6879      	ldr	r1, [r7, #4]
 800894e:	4613      	mov	r3, r2
 8008950:	00db      	lsls	r3, r3, #3
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	440b      	add	r3, r1
 8008958:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800895c:	2200      	movs	r2, #0
 800895e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	3301      	adds	r3, #1
 8008964:	73fb      	strb	r3, [r7, #15]
 8008966:	7bfa      	ldrb	r2, [r7, #15]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	429a      	cmp	r2, r3
 800896e:	d3b5      	bcc.n	80088dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	603b      	str	r3, [r7, #0]
 8008976:	687e      	ldr	r6, [r7, #4]
 8008978:	466d      	mov	r5, sp
 800897a:	f106 0410 	add.w	r4, r6, #16
 800897e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008986:	e894 0003 	ldmia.w	r4, {r0, r1}
 800898a:	e885 0003 	stmia.w	r5, {r0, r1}
 800898e:	1d33      	adds	r3, r6, #4
 8008990:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008992:	6838      	ldr	r0, [r7, #0]
 8008994:	f003 fc60 	bl	800c258 <USB_DevInit>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d005      	beq.n	80089aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2202      	movs	r2, #2
 80089a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e00d      	b.n	80089c6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f004 fcdc 	bl	800d37c <USB_DevDisconnect>

  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d101      	bne.n	80089ea <HAL_PCD_Start+0x1c>
 80089e6:	2302      	movs	r3, #2
 80089e8:	e020      	b.n	8008a2c <HAL_PCD_Start+0x5e>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d109      	bne.n	8008a0e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d005      	beq.n	8008a0e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f003 fbb2 	bl	800c17c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f004 fc8c 	bl	800d33a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008a34:	b590      	push	{r4, r7, lr}
 8008a36:	b08d      	sub	sp, #52	; 0x34
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a42:	6a3b      	ldr	r3, [r7, #32]
 8008a44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f004 fd4a 	bl	800d4e4 <USB_GetMode>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f040 839d 	bne.w	8009192 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f004 fcae 	bl	800d3be <USB_ReadInterrupts>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 8393 	beq.w	8009190 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f004 fca5 	bl	800d3be <USB_ReadInterrupts>
 8008a74:	4603      	mov	r3, r0
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d107      	bne.n	8008a8e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	695a      	ldr	r2, [r3, #20]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f002 0202 	and.w	r2, r2, #2
 8008a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f004 fc93 	bl	800d3be <USB_ReadInterrupts>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	f003 0310 	and.w	r3, r3, #16
 8008a9e:	2b10      	cmp	r3, #16
 8008aa0:	d161      	bne.n	8008b66 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	699a      	ldr	r2, [r3, #24]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f022 0210 	bic.w	r2, r2, #16
 8008ab0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	f003 020f 	and.w	r2, r3, #15
 8008abe:	4613      	mov	r3, r2
 8008ac0:	00db      	lsls	r3, r3, #3
 8008ac2:	1a9b      	subs	r3, r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	4413      	add	r3, r2
 8008ace:	3304      	adds	r3, #4
 8008ad0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	0c5b      	lsrs	r3, r3, #17
 8008ad6:	f003 030f 	and.w	r3, r3, #15
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d124      	bne.n	8008b28 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008ade:	69ba      	ldr	r2, [r7, #24]
 8008ae0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d035      	beq.n	8008b56 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	091b      	lsrs	r3, r3, #4
 8008af2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008af4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	461a      	mov	r2, r3
 8008afc:	6a38      	ldr	r0, [r7, #32]
 8008afe:	f004 faca 	bl	800d096 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	091b      	lsrs	r3, r3, #4
 8008b0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b0e:	441a      	add	r2, r3
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	699a      	ldr	r2, [r3, #24]
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	091b      	lsrs	r3, r3, #4
 8008b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b20:	441a      	add	r2, r3
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	619a      	str	r2, [r3, #24]
 8008b26:	e016      	b.n	8008b56 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	0c5b      	lsrs	r3, r3, #17
 8008b2c:	f003 030f 	and.w	r3, r3, #15
 8008b30:	2b06      	cmp	r3, #6
 8008b32:	d110      	bne.n	8008b56 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008b3a:	2208      	movs	r2, #8
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	6a38      	ldr	r0, [r7, #32]
 8008b40:	f004 faa9 	bl	800d096 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	699a      	ldr	r2, [r3, #24]
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	091b      	lsrs	r3, r3, #4
 8008b4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b50:	441a      	add	r2, r3
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	699a      	ldr	r2, [r3, #24]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f042 0210 	orr.w	r2, r2, #16
 8008b64:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f004 fc27 	bl	800d3be <USB_ReadInterrupts>
 8008b70:	4603      	mov	r3, r0
 8008b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b7a:	d16e      	bne.n	8008c5a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f004 fc2d 	bl	800d3e4 <USB_ReadDevAllOutEpInterrupt>
 8008b8a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008b8c:	e062      	b.n	8008c54 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d057      	beq.n	8008c48 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b9e:	b2d2      	uxtb	r2, r2
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f004 fc52 	bl	800d44c <USB_ReadDevOutEPInterrupt>
 8008ba8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00c      	beq.n	8008bce <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008bc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fdb1 	bl	8009730 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	f003 0308 	and.w	r3, r3, #8
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00c      	beq.n	8008bf2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be4:	461a      	mov	r2, r3
 8008be6:	2308      	movs	r3, #8
 8008be8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008bea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 feab 	bl	8009948 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f003 0310 	and.w	r3, r3, #16
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d008      	beq.n	8008c0e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c08:	461a      	mov	r2, r3
 8008c0a:	2310      	movs	r3, #16
 8008c0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f003 0320 	and.w	r3, r3, #32
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d008      	beq.n	8008c2a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c24:	461a      	mov	r2, r3
 8008c26:	2320      	movs	r3, #32
 8008c28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d009      	beq.n	8008c48 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c40:	461a      	mov	r2, r3
 8008c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c50:	085b      	lsrs	r3, r3, #1
 8008c52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d199      	bne.n	8008b8e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f004 fbad 	bl	800d3be <USB_ReadInterrupts>
 8008c64:	4603      	mov	r3, r0
 8008c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c6e:	f040 80c0 	bne.w	8008df2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f004 fbce 	bl	800d418 <USB_ReadDevAllInEpInterrupt>
 8008c7c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008c82:	e0b2      	b.n	8008dea <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 80a7 	beq.w	8008dde <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c96:	b2d2      	uxtb	r2, r2
 8008c98:	4611      	mov	r1, r2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f004 fbf4 	bl	800d488 <USB_ReadDevInEPInterrupt>
 8008ca0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f003 0301 	and.w	r3, r3, #1
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d057      	beq.n	8008d5c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	f003 030f 	and.w	r3, r3, #15
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	43db      	mvns	r3, r3
 8008cc6:	69f9      	ldr	r1, [r7, #28]
 8008cc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ccc:	4013      	ands	r3, r2
 8008cce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd2:	015a      	lsls	r2, r3, #5
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cdc:	461a      	mov	r2, r3
 8008cde:	2301      	movs	r3, #1
 8008ce0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d132      	bne.n	8008d50 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008cea:	6879      	ldr	r1, [r7, #4]
 8008cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cee:	4613      	mov	r3, r2
 8008cf0:	00db      	lsls	r3, r3, #3
 8008cf2:	1a9b      	subs	r3, r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	440b      	add	r3, r1
 8008cf8:	3348      	adds	r3, #72	; 0x48
 8008cfa:	6819      	ldr	r1, [r3, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d00:	4613      	mov	r3, r2
 8008d02:	00db      	lsls	r3, r3, #3
 8008d04:	1a9b      	subs	r3, r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4403      	add	r3, r0
 8008d0a:	3344      	adds	r3, #68	; 0x44
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4419      	add	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d14:	4613      	mov	r3, r2
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	1a9b      	subs	r3, r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4403      	add	r3, r0
 8008d1e:	3348      	adds	r3, #72	; 0x48
 8008d20:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d113      	bne.n	8008d50 <HAL_PCD_IRQHandler+0x31c>
 8008d28:	6879      	ldr	r1, [r7, #4]
 8008d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	00db      	lsls	r3, r3, #3
 8008d30:	1a9b      	subs	r3, r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	440b      	add	r3, r1
 8008d36:	3350      	adds	r3, #80	; 0x50
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d108      	bne.n	8008d50 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6818      	ldr	r0, [r3, #0]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d48:	461a      	mov	r2, r3
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	f004 fbfc 	bl	800d548 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f009 f93d 	bl	8011fd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f003 0308 	and.w	r3, r3, #8
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d008      	beq.n	8008d78 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d72:	461a      	mov	r2, r3
 8008d74:	2308      	movs	r3, #8
 8008d76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	f003 0310 	and.w	r3, r3, #16
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d008      	beq.n	8008d94 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8e:	461a      	mov	r2, r3
 8008d90:	2310      	movs	r3, #16
 8008d92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d008      	beq.n	8008db0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008daa:	461a      	mov	r2, r3
 8008dac:	2340      	movs	r3, #64	; 0x40
 8008dae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d008      	beq.n	8008dcc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	015a      	lsls	r2, r3, #5
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	2302      	movs	r3, #2
 8008dca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008dd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fc1b 	bl	8009614 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de0:	3301      	adds	r3, #1
 8008de2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	085b      	lsrs	r3, r3, #1
 8008de8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f47f af49 	bne.w	8008c84 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f004 fae1 	bl	800d3be <USB_ReadInterrupts>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e06:	d122      	bne.n	8008e4e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	69fa      	ldr	r2, [r7, #28]
 8008e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e16:	f023 0301 	bic.w	r3, r3, #1
 8008e1a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d108      	bne.n	8008e38 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008e2e:	2100      	movs	r1, #0
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fe27 	bl	8009a84 <HAL_PCDEx_LPM_Callback>
 8008e36:	e002      	b.n	8008e3e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f009 f939 	bl	80120b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	695a      	ldr	r2, [r3, #20]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008e4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f004 fab3 	bl	800d3be <USB_ReadInterrupts>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e62:	d112      	bne.n	8008e8a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d102      	bne.n	8008e7a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f009 f8f5 	bl	8012064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	695a      	ldr	r2, [r3, #20]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008e88:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f004 fa95 	bl	800d3be <USB_ReadInterrupts>
 8008e94:	4603      	mov	r3, r0
 8008e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e9e:	f040 80c7 	bne.w	8009030 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	69fa      	ldr	r2, [r7, #28]
 8008eac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eb0:	f023 0301 	bic.w	r3, r3, #1
 8008eb4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2110      	movs	r1, #16
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f003 fb2f 	bl	800c520 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ec6:	e056      	b.n	8008f76 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008eda:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eec:	0151      	lsls	r1, r2, #5
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008efa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efe:	015a      	lsls	r2, r3, #5
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	4413      	add	r3, r2
 8008f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f0c:	0151      	lsls	r1, r2, #5
 8008f0e:	69fa      	ldr	r2, [r7, #28]
 8008f10:	440a      	add	r2, r1
 8008f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f1a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f28:	461a      	mov	r2, r3
 8008f2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f2e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f40:	0151      	lsls	r1, r2, #5
 8008f42:	69fa      	ldr	r2, [r7, #28]
 8008f44:	440a      	add	r2, r1
 8008f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f60:	0151      	lsls	r1, r2, #5
 8008f62:	69fa      	ldr	r2, [r7, #28]
 8008f64:	440a      	add	r2, r1
 8008f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f6e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f72:	3301      	adds	r3, #1
 8008f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d3a3      	bcc.n	8008ec8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	69fa      	ldr	r2, [r7, #28]
 8008f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f8e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008f92:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d016      	beq.n	8008fca <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fa6:	69fa      	ldr	r2, [r7, #28]
 8008fa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fac:	f043 030b 	orr.w	r3, r3, #11
 8008fb0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fbc:	69fa      	ldr	r2, [r7, #28]
 8008fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fc2:	f043 030b 	orr.w	r3, r3, #11
 8008fc6:	6453      	str	r3, [r2, #68]	; 0x44
 8008fc8:	e015      	b.n	8008ff6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	69fa      	ldr	r2, [r7, #28]
 8008fd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008fdc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008fe0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	69fa      	ldr	r2, [r7, #28]
 8008fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ff0:	f043 030b 	orr.w	r3, r3, #11
 8008ff4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	69fa      	ldr	r2, [r7, #28]
 8009000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009004:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009008:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6818      	ldr	r0, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800901a:	461a      	mov	r2, r3
 800901c:	f004 fa94 	bl	800d548 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	695a      	ldr	r2, [r3, #20]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800902e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4618      	mov	r0, r3
 8009036:	f004 f9c2 	bl	800d3be <USB_ReadInterrupts>
 800903a:	4603      	mov	r3, r0
 800903c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009044:	d124      	bne.n	8009090 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4618      	mov	r0, r3
 800904c:	f004 fa58 	bl	800d500 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4618      	mov	r0, r3
 8009056:	f003 fac0 	bl	800c5da <USB_GetDevSpeed>
 800905a:	4603      	mov	r3, r0
 800905c:	461a      	mov	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681c      	ldr	r4, [r3, #0]
 8009066:	f001 f959 	bl	800a31c <HAL_RCC_GetHCLKFreq>
 800906a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009070:	b2db      	uxtb	r3, r3
 8009072:	461a      	mov	r2, r3
 8009074:	4620      	mov	r0, r4
 8009076:	f002 ffdf 	bl	800c038 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f008 ffd3 	bl	8012026 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	695a      	ldr	r2, [r3, #20]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800908e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4618      	mov	r0, r3
 8009096:	f004 f992 	bl	800d3be <USB_ReadInterrupts>
 800909a:	4603      	mov	r3, r0
 800909c:	f003 0308 	and.w	r3, r3, #8
 80090a0:	2b08      	cmp	r3, #8
 80090a2:	d10a      	bne.n	80090ba <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f008 ffb0 	bl	801200a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	695a      	ldr	r2, [r3, #20]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f002 0208 	and.w	r2, r2, #8
 80090b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4618      	mov	r0, r3
 80090c0:	f004 f97d 	bl	800d3be <USB_ReadInterrupts>
 80090c4:	4603      	mov	r3, r0
 80090c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090ce:	d10f      	bne.n	80090f0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80090d0:	2300      	movs	r3, #0
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	4619      	mov	r1, r3
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f009 f808 	bl	80120f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	695a      	ldr	r2, [r3, #20]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80090ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f004 f962 	bl	800d3be <USB_ReadInterrupts>
 80090fa:	4603      	mov	r3, r0
 80090fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009100:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009104:	d10f      	bne.n	8009126 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	b2db      	uxtb	r3, r3
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f008 ffdb 	bl	80120cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	695a      	ldr	r2, [r3, #20]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009124:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4618      	mov	r0, r3
 800912c:	f004 f947 	bl	800d3be <USB_ReadInterrupts>
 8009130:	4603      	mov	r3, r0
 8009132:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800913a:	d10a      	bne.n	8009152 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f008 ffe9 	bl	8012114 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	695a      	ldr	r2, [r3, #20]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009150:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4618      	mov	r0, r3
 8009158:	f004 f931 	bl	800d3be <USB_ReadInterrupts>
 800915c:	4603      	mov	r3, r0
 800915e:	f003 0304 	and.w	r3, r3, #4
 8009162:	2b04      	cmp	r3, #4
 8009164:	d115      	bne.n	8009192 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	f003 0304 	and.w	r3, r3, #4
 8009174:	2b00      	cmp	r3, #0
 8009176:	d002      	beq.n	800917e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f008 ffd9 	bl	8012130 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6859      	ldr	r1, [r3, #4]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	69ba      	ldr	r2, [r7, #24]
 800918a:	430a      	orrs	r2, r1
 800918c:	605a      	str	r2, [r3, #4]
 800918e:	e000      	b.n	8009192 <HAL_PCD_IRQHandler+0x75e>
      return;
 8009190:	bf00      	nop
    }
  }
}
 8009192:	3734      	adds	r7, #52	; 0x34
 8009194:	46bd      	mov	sp, r7
 8009196:	bd90      	pop	{r4, r7, pc}

08009198 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d101      	bne.n	80091b2 <HAL_PCD_SetAddress+0x1a>
 80091ae:	2302      	movs	r3, #2
 80091b0:	e013      	b.n	80091da <HAL_PCD_SetAddress+0x42>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	78fa      	ldrb	r2, [r7, #3]
 80091be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	78fa      	ldrb	r2, [r7, #3]
 80091c8:	4611      	mov	r1, r2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f004 f88f 	bl	800d2ee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	4608      	mov	r0, r1
 80091ec:	4611      	mov	r1, r2
 80091ee:	461a      	mov	r2, r3
 80091f0:	4603      	mov	r3, r0
 80091f2:	70fb      	strb	r3, [r7, #3]
 80091f4:	460b      	mov	r3, r1
 80091f6:	803b      	strh	r3, [r7, #0]
 80091f8:	4613      	mov	r3, r2
 80091fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009204:	2b00      	cmp	r3, #0
 8009206:	da0f      	bge.n	8009228 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009208:	78fb      	ldrb	r3, [r7, #3]
 800920a:	f003 020f 	and.w	r2, r3, #15
 800920e:	4613      	mov	r3, r2
 8009210:	00db      	lsls	r3, r3, #3
 8009212:	1a9b      	subs	r3, r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	3338      	adds	r3, #56	; 0x38
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	4413      	add	r3, r2
 800921c:	3304      	adds	r3, #4
 800921e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2201      	movs	r2, #1
 8009224:	705a      	strb	r2, [r3, #1]
 8009226:	e00f      	b.n	8009248 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	f003 020f 	and.w	r2, r3, #15
 800922e:	4613      	mov	r3, r2
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	1a9b      	subs	r3, r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	4413      	add	r3, r2
 800923e:	3304      	adds	r3, #4
 8009240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	b2da      	uxtb	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009254:	883a      	ldrh	r2, [r7, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	78ba      	ldrb	r2, [r7, #2]
 800925e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	785b      	ldrb	r3, [r3, #1]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d004      	beq.n	8009272 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	b29a      	uxth	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009272:	78bb      	ldrb	r3, [r7, #2]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d102      	bne.n	800927e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009284:	2b01      	cmp	r3, #1
 8009286:	d101      	bne.n	800928c <HAL_PCD_EP_Open+0xaa>
 8009288:	2302      	movs	r3, #2
 800928a:	e00e      	b.n	80092aa <HAL_PCD_EP_Open+0xc8>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68f9      	ldr	r1, [r7, #12]
 800929a:	4618      	mov	r0, r3
 800929c:	f003 f9c2 	bl	800c624 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80092a8:	7afb      	ldrb	r3, [r7, #11]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	460b      	mov	r3, r1
 80092bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80092be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	da0f      	bge.n	80092e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092c6:	78fb      	ldrb	r3, [r7, #3]
 80092c8:	f003 020f 	and.w	r2, r3, #15
 80092cc:	4613      	mov	r3, r2
 80092ce:	00db      	lsls	r3, r3, #3
 80092d0:	1a9b      	subs	r3, r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	3338      	adds	r3, #56	; 0x38
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	4413      	add	r3, r2
 80092da:	3304      	adds	r3, #4
 80092dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2201      	movs	r2, #1
 80092e2:	705a      	strb	r2, [r3, #1]
 80092e4:	e00f      	b.n	8009306 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092e6:	78fb      	ldrb	r3, [r7, #3]
 80092e8:	f003 020f 	and.w	r2, r3, #15
 80092ec:	4613      	mov	r3, r2
 80092ee:	00db      	lsls	r3, r3, #3
 80092f0:	1a9b      	subs	r3, r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	4413      	add	r3, r2
 80092fc:	3304      	adds	r3, #4
 80092fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009306:	78fb      	ldrb	r3, [r7, #3]
 8009308:	f003 030f 	and.w	r3, r3, #15
 800930c:	b2da      	uxtb	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <HAL_PCD_EP_Close+0x6e>
 800931c:	2302      	movs	r3, #2
 800931e:	e00e      	b.n	800933e <HAL_PCD_EP_Close+0x8c>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68f9      	ldr	r1, [r7, #12]
 800932e:	4618      	mov	r0, r3
 8009330:	f003 fa00 	bl	800c734 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b086      	sub	sp, #24
 800934a:	af00      	add	r7, sp, #0
 800934c:	60f8      	str	r0, [r7, #12]
 800934e:	607a      	str	r2, [r7, #4]
 8009350:	603b      	str	r3, [r7, #0]
 8009352:	460b      	mov	r3, r1
 8009354:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009356:	7afb      	ldrb	r3, [r7, #11]
 8009358:	f003 020f 	and.w	r2, r3, #15
 800935c:	4613      	mov	r3, r2
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	1a9b      	subs	r3, r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	4413      	add	r3, r2
 800936c:	3304      	adds	r3, #4
 800936e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2200      	movs	r2, #0
 8009380:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2200      	movs	r2, #0
 8009386:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009388:	7afb      	ldrb	r3, [r7, #11]
 800938a:	f003 030f 	and.w	r3, r3, #15
 800938e:	b2da      	uxtb	r2, r3
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d102      	bne.n	80093a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80093a2:	7afb      	ldrb	r3, [r7, #11]
 80093a4:	f003 030f 	and.w	r3, r3, #15
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d109      	bne.n	80093c0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6818      	ldr	r0, [r3, #0]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	461a      	mov	r2, r3
 80093b8:	6979      	ldr	r1, [r7, #20]
 80093ba:	f003 fcdb 	bl	800cd74 <USB_EP0StartXfer>
 80093be:	e008      	b.n	80093d2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6818      	ldr	r0, [r3, #0]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	461a      	mov	r2, r3
 80093cc:	6979      	ldr	r1, [r7, #20]
 80093ce:	f003 fa8d 	bl	800c8ec <USB_EPStartXfer>
  }

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3718      	adds	r7, #24
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	460b      	mov	r3, r1
 80093e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	f003 020f 	and.w	r2, r3, #15
 80093ee:	6879      	ldr	r1, [r7, #4]
 80093f0:	4613      	mov	r3, r2
 80093f2:	00db      	lsls	r3, r3, #3
 80093f4:	1a9b      	subs	r3, r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	440b      	add	r3, r1
 80093fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80093fe:	681b      	ldr	r3, [r3, #0]
}
 8009400:	4618      	mov	r0, r3
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	607a      	str	r2, [r7, #4]
 8009416:	603b      	str	r3, [r7, #0]
 8009418:	460b      	mov	r3, r1
 800941a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800941c:	7afb      	ldrb	r3, [r7, #11]
 800941e:	f003 020f 	and.w	r2, r3, #15
 8009422:	4613      	mov	r3, r2
 8009424:	00db      	lsls	r3, r3, #3
 8009426:	1a9b      	subs	r3, r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	3338      	adds	r3, #56	; 0x38
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	4413      	add	r3, r2
 8009430:	3304      	adds	r3, #4
 8009432:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	683a      	ldr	r2, [r7, #0]
 800943e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	2200      	movs	r2, #0
 8009444:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	2201      	movs	r2, #1
 800944a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800944c:	7afb      	ldrb	r3, [r7, #11]
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	b2da      	uxtb	r2, r3
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d102      	bne.n	8009466 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009466:	7afb      	ldrb	r3, [r7, #11]
 8009468:	f003 030f 	and.w	r3, r3, #15
 800946c:	2b00      	cmp	r3, #0
 800946e:	d109      	bne.n	8009484 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6818      	ldr	r0, [r3, #0]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	b2db      	uxtb	r3, r3
 800947a:	461a      	mov	r2, r3
 800947c:	6979      	ldr	r1, [r7, #20]
 800947e:	f003 fc79 	bl	800cd74 <USB_EP0StartXfer>
 8009482:	e008      	b.n	8009496 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6818      	ldr	r0, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	b2db      	uxtb	r3, r3
 800948e:	461a      	mov	r2, r3
 8009490:	6979      	ldr	r1, [r7, #20]
 8009492:	f003 fa2b 	bl	800c8ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3718      	adds	r7, #24
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80094ac:	78fb      	ldrb	r3, [r7, #3]
 80094ae:	f003 020f 	and.w	r2, r3, #15
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d901      	bls.n	80094be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e050      	b.n	8009560 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80094be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	da0f      	bge.n	80094e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094c6:	78fb      	ldrb	r3, [r7, #3]
 80094c8:	f003 020f 	and.w	r2, r3, #15
 80094cc:	4613      	mov	r3, r2
 80094ce:	00db      	lsls	r3, r3, #3
 80094d0:	1a9b      	subs	r3, r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	3338      	adds	r3, #56	; 0x38
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	4413      	add	r3, r2
 80094da:	3304      	adds	r3, #4
 80094dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2201      	movs	r2, #1
 80094e2:	705a      	strb	r2, [r3, #1]
 80094e4:	e00d      	b.n	8009502 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80094e6:	78fa      	ldrb	r2, [r7, #3]
 80094e8:	4613      	mov	r3, r2
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	1a9b      	subs	r3, r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	4413      	add	r3, r2
 80094f8:	3304      	adds	r3, #4
 80094fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2201      	movs	r2, #1
 8009506:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	f003 030f 	and.w	r3, r3, #15
 800950e:	b2da      	uxtb	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800951a:	2b01      	cmp	r3, #1
 800951c:	d101      	bne.n	8009522 <HAL_PCD_EP_SetStall+0x82>
 800951e:	2302      	movs	r3, #2
 8009520:	e01e      	b.n	8009560 <HAL_PCD_EP_SetStall+0xc0>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68f9      	ldr	r1, [r7, #12]
 8009530:	4618      	mov	r0, r3
 8009532:	f003 fe08 	bl	800d146 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009536:	78fb      	ldrb	r3, [r7, #3]
 8009538:	f003 030f 	and.w	r3, r3, #15
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10a      	bne.n	8009556 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6818      	ldr	r0, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	b2d9      	uxtb	r1, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009550:	461a      	mov	r2, r3
 8009552:	f003 fff9 	bl	800d548 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	f003 020f 	and.w	r2, r3, #15
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	429a      	cmp	r2, r3
 8009580:	d901      	bls.n	8009586 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e042      	b.n	800960c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009586:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800958a:	2b00      	cmp	r3, #0
 800958c:	da0f      	bge.n	80095ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800958e:	78fb      	ldrb	r3, [r7, #3]
 8009590:	f003 020f 	and.w	r2, r3, #15
 8009594:	4613      	mov	r3, r2
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	1a9b      	subs	r3, r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	3338      	adds	r3, #56	; 0x38
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	4413      	add	r3, r2
 80095a2:	3304      	adds	r3, #4
 80095a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2201      	movs	r2, #1
 80095aa:	705a      	strb	r2, [r3, #1]
 80095ac:	e00f      	b.n	80095ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	f003 020f 	and.w	r2, r3, #15
 80095b4:	4613      	mov	r3, r2
 80095b6:	00db      	lsls	r3, r3, #3
 80095b8:	1a9b      	subs	r3, r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	4413      	add	r3, r2
 80095c4:	3304      	adds	r3, #4
 80095c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095d4:	78fb      	ldrb	r3, [r7, #3]
 80095d6:	f003 030f 	and.w	r3, r3, #15
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d101      	bne.n	80095ee <HAL_PCD_EP_ClrStall+0x86>
 80095ea:	2302      	movs	r3, #2
 80095ec:	e00e      	b.n	800960c <HAL_PCD_EP_ClrStall+0xa4>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68f9      	ldr	r1, [r7, #12]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f003 fe10 	bl	800d222 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b08a      	sub	sp, #40	; 0x28
 8009618:	af02      	add	r7, sp, #8
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	4613      	mov	r3, r2
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	1a9b      	subs	r3, r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	3338      	adds	r3, #56	; 0x38
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	4413      	add	r3, r2
 8009638:	3304      	adds	r3, #4
 800963a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	699a      	ldr	r2, [r3, #24]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	695b      	ldr	r3, [r3, #20]
 8009644:	429a      	cmp	r2, r3
 8009646:	d901      	bls.n	800964c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e06c      	b.n	8009726 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	695a      	ldr	r2, [r3, #20]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	69fa      	ldr	r2, [r7, #28]
 800965e:	429a      	cmp	r2, r3
 8009660:	d902      	bls.n	8009668 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	3303      	adds	r3, #3
 800966c:	089b      	lsrs	r3, r3, #2
 800966e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009670:	e02b      	b.n	80096ca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	695a      	ldr	r2, [r3, #20]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	69fa      	ldr	r2, [r7, #28]
 8009684:	429a      	cmp	r2, r3
 8009686:	d902      	bls.n	800968e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	3303      	adds	r3, #3
 8009692:	089b      	lsrs	r3, r3, #2
 8009694:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	68d9      	ldr	r1, [r3, #12]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	b2da      	uxtb	r2, r3
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	4603      	mov	r3, r0
 80096ac:	6978      	ldr	r0, [r7, #20]
 80096ae:	f003 fcb4 	bl	800d01a <USB_WritePacket>

    ep->xfer_buff  += len;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	68da      	ldr	r2, [r3, #12]
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	441a      	add	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	699a      	ldr	r2, [r3, #24]
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	441a      	add	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	b29b      	uxth	r3, r3
 80096da:	69ba      	ldr	r2, [r7, #24]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d809      	bhi.n	80096f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	699a      	ldr	r2, [r3, #24]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d203      	bcs.n	80096f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	695b      	ldr	r3, [r3, #20]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d1be      	bne.n	8009672 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	695a      	ldr	r2, [r3, #20]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d811      	bhi.n	8009724 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	f003 030f 	and.w	r3, r3, #15
 8009706:	2201      	movs	r2, #1
 8009708:	fa02 f303 	lsl.w	r3, r2, r3
 800970c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	43db      	mvns	r3, r3
 800971a:	6939      	ldr	r1, [r7, #16]
 800971c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009720:	4013      	ands	r3, r2
 8009722:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3720      	adds	r7, #32
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
	...

08009730 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	333c      	adds	r3, #60	; 0x3c
 8009748:	3304      	adds	r3, #4
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	4413      	add	r3, r2
 8009756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	2b01      	cmp	r3, #1
 8009764:	f040 80a0 	bne.w	80098a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	f003 0308 	and.w	r3, r3, #8
 800976e:	2b00      	cmp	r3, #0
 8009770:	d015      	beq.n	800979e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	4a72      	ldr	r2, [pc, #456]	; (8009940 <PCD_EP_OutXfrComplete_int+0x210>)
 8009776:	4293      	cmp	r3, r2
 8009778:	f240 80dd 	bls.w	8009936 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009782:	2b00      	cmp	r3, #0
 8009784:	f000 80d7 	beq.w	8009936 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	015a      	lsls	r2, r3, #5
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	4413      	add	r3, r2
 8009790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009794:	461a      	mov	r2, r3
 8009796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800979a:	6093      	str	r3, [r2, #8]
 800979c:	e0cb      	b.n	8009936 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f003 0320 	and.w	r3, r3, #32
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d009      	beq.n	80097bc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b4:	461a      	mov	r2, r3
 80097b6:	2320      	movs	r3, #32
 80097b8:	6093      	str	r3, [r2, #8]
 80097ba:	e0bc      	b.n	8009936 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f040 80b7 	bne.w	8009936 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	4a5d      	ldr	r2, [pc, #372]	; (8009940 <PCD_EP_OutXfrComplete_int+0x210>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d90f      	bls.n	80097f0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00a      	beq.n	80097f0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	015a      	lsls	r2, r3, #5
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	4413      	add	r3, r2
 80097e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e6:	461a      	mov	r2, r3
 80097e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097ec:	6093      	str	r3, [r2, #8]
 80097ee:	e0a2      	b.n	8009936 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80097f0:	6879      	ldr	r1, [r7, #4]
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	4613      	mov	r3, r2
 80097f6:	00db      	lsls	r3, r3, #3
 80097f8:	1a9b      	subs	r3, r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	440b      	add	r3, r1
 80097fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009802:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	0159      	lsls	r1, r3, #5
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	440b      	add	r3, r1
 800980c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009816:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	4613      	mov	r3, r2
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	1a9b      	subs	r3, r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4403      	add	r3, r0
 8009826:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800982a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800982c:	6879      	ldr	r1, [r7, #4]
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	4613      	mov	r3, r2
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	1a9b      	subs	r3, r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	440b      	add	r3, r1
 800983a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800983e:	6819      	ldr	r1, [r3, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	4613      	mov	r3, r2
 8009846:	00db      	lsls	r3, r3, #3
 8009848:	1a9b      	subs	r3, r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4403      	add	r3, r0
 800984e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4419      	add	r1, r3
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	4613      	mov	r3, r2
 800985c:	00db      	lsls	r3, r3, #3
 800985e:	1a9b      	subs	r3, r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4403      	add	r3, r0
 8009864:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009868:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d114      	bne.n	800989a <PCD_EP_OutXfrComplete_int+0x16a>
 8009870:	6879      	ldr	r1, [r7, #4]
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	4613      	mov	r3, r2
 8009876:	00db      	lsls	r3, r3, #3
 8009878:	1a9b      	subs	r3, r3, r2
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	440b      	add	r3, r1
 800987e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d108      	bne.n	800989a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6818      	ldr	r0, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009892:	461a      	mov	r2, r3
 8009894:	2101      	movs	r1, #1
 8009896:	f003 fe57 	bl	800d548 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	b2db      	uxtb	r3, r3
 800989e:	4619      	mov	r1, r3
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f008 fb7d 	bl	8011fa0 <HAL_PCD_DataOutStageCallback>
 80098a6:	e046      	b.n	8009936 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4a26      	ldr	r2, [pc, #152]	; (8009944 <PCD_EP_OutXfrComplete_int+0x214>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d124      	bne.n	80098fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00a      	beq.n	80098d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c6:	461a      	mov	r2, r3
 80098c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098cc:	6093      	str	r3, [r2, #8]
 80098ce:	e032      	b.n	8009936 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	f003 0320 	and.w	r3, r3, #32
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d008      	beq.n	80098ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	015a      	lsls	r2, r3, #5
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	4413      	add	r3, r2
 80098e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e6:	461a      	mov	r2, r3
 80098e8:	2320      	movs	r3, #32
 80098ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	4619      	mov	r1, r3
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f008 fb54 	bl	8011fa0 <HAL_PCD_DataOutStageCallback>
 80098f8:	e01d      	b.n	8009936 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d114      	bne.n	800992a <PCD_EP_OutXfrComplete_int+0x1fa>
 8009900:	6879      	ldr	r1, [r7, #4]
 8009902:	683a      	ldr	r2, [r7, #0]
 8009904:	4613      	mov	r3, r2
 8009906:	00db      	lsls	r3, r3, #3
 8009908:	1a9b      	subs	r3, r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	440b      	add	r3, r1
 800990e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d108      	bne.n	800992a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6818      	ldr	r0, [r3, #0]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009922:	461a      	mov	r2, r3
 8009924:	2100      	movs	r1, #0
 8009926:	f003 fe0f 	bl	800d548 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f008 fb35 	bl	8011fa0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3718      	adds	r7, #24
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	4f54300a 	.word	0x4f54300a
 8009944:	4f54310a 	.word	0x4f54310a

08009948 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	333c      	adds	r3, #60	; 0x3c
 8009960:	3304      	adds	r3, #4
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	4413      	add	r3, r2
 800996e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	4a15      	ldr	r2, [pc, #84]	; (80099d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d90e      	bls.n	800999c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009984:	2b00      	cmp	r3, #0
 8009986:	d009      	beq.n	800999c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	4413      	add	r3, r2
 8009990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009994:	461a      	mov	r2, r3
 8009996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800999a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f008 faed 	bl	8011f7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	4a0a      	ldr	r2, [pc, #40]	; (80099d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d90c      	bls.n	80099c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d108      	bne.n	80099c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6818      	ldr	r0, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80099bc:	461a      	mov	r2, r3
 80099be:	2101      	movs	r1, #1
 80099c0:	f003 fdc2 	bl	800d548 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3718      	adds	r7, #24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	4f54300a 	.word	0x4f54300a

080099d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	460b      	mov	r3, r1
 80099de:	70fb      	strb	r3, [r7, #3]
 80099e0:	4613      	mov	r3, r2
 80099e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80099ec:	78fb      	ldrb	r3, [r7, #3]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d107      	bne.n	8009a02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80099f2:	883b      	ldrh	r3, [r7, #0]
 80099f4:	0419      	lsls	r1, r3, #16
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	430a      	orrs	r2, r1
 80099fe:	629a      	str	r2, [r3, #40]	; 0x28
 8009a00:	e028      	b.n	8009a54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a08:	0c1b      	lsrs	r3, r3, #16
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009a10:	2300      	movs	r3, #0
 8009a12:	73fb      	strb	r3, [r7, #15]
 8009a14:	e00d      	b.n	8009a32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
 8009a1c:	3340      	adds	r3, #64	; 0x40
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4413      	add	r3, r2
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	0c1b      	lsrs	r3, r3, #16
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	4413      	add	r3, r2
 8009a2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	73fb      	strb	r3, [r7, #15]
 8009a32:	7bfa      	ldrb	r2, [r7, #15]
 8009a34:	78fb      	ldrb	r3, [r7, #3]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d3ec      	bcc.n	8009a16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009a3c:	883b      	ldrh	r3, [r7, #0]
 8009a3e:	0418      	lsls	r0, r3, #16
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6819      	ldr	r1, [r3, #0]
 8009a44:	78fb      	ldrb	r3, [r7, #3]
 8009a46:	3b01      	subs	r3, #1
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	4302      	orrs	r2, r0
 8009a4c:	3340      	adds	r3, #64	; 0x40
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	440b      	add	r3, r1
 8009a52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3714      	adds	r7, #20
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr

08009a62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009a62:	b480      	push	{r7}
 8009a64:	b083      	sub	sp, #12
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	887a      	ldrh	r2, [r7, #2]
 8009a74:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e264      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d075      	beq.n	8009ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009aba:	4ba3      	ldr	r3, [pc, #652]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	f003 030c 	and.w	r3, r3, #12
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	d00c      	beq.n	8009ae0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ac6:	4ba0      	ldr	r3, [pc, #640]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009ace:	2b08      	cmp	r3, #8
 8009ad0:	d112      	bne.n	8009af8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ad2:	4b9d      	ldr	r3, [pc, #628]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ade:	d10b      	bne.n	8009af8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ae0:	4b99      	ldr	r3, [pc, #612]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d05b      	beq.n	8009ba4 <HAL_RCC_OscConfig+0x108>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d157      	bne.n	8009ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e23f      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b00:	d106      	bne.n	8009b10 <HAL_RCC_OscConfig+0x74>
 8009b02:	4b91      	ldr	r3, [pc, #580]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a90      	ldr	r2, [pc, #576]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	e01d      	b.n	8009b4c <HAL_RCC_OscConfig+0xb0>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b18:	d10c      	bne.n	8009b34 <HAL_RCC_OscConfig+0x98>
 8009b1a:	4b8b      	ldr	r3, [pc, #556]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a8a      	ldr	r2, [pc, #552]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b24:	6013      	str	r3, [r2, #0]
 8009b26:	4b88      	ldr	r3, [pc, #544]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a87      	ldr	r2, [pc, #540]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b30:	6013      	str	r3, [r2, #0]
 8009b32:	e00b      	b.n	8009b4c <HAL_RCC_OscConfig+0xb0>
 8009b34:	4b84      	ldr	r3, [pc, #528]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a83      	ldr	r2, [pc, #524]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	4b81      	ldr	r3, [pc, #516]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a80      	ldr	r2, [pc, #512]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d013      	beq.n	8009b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b54:	f7fb fd26 	bl	80055a4 <HAL_GetTick>
 8009b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b5a:	e008      	b.n	8009b6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b5c:	f7fb fd22 	bl	80055a4 <HAL_GetTick>
 8009b60:	4602      	mov	r2, r0
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	2b64      	cmp	r3, #100	; 0x64
 8009b68:	d901      	bls.n	8009b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e204      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b6e:	4b76      	ldr	r3, [pc, #472]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d0f0      	beq.n	8009b5c <HAL_RCC_OscConfig+0xc0>
 8009b7a:	e014      	b.n	8009ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b7c:	f7fb fd12 	bl	80055a4 <HAL_GetTick>
 8009b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b82:	e008      	b.n	8009b96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b84:	f7fb fd0e 	bl	80055a4 <HAL_GetTick>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	2b64      	cmp	r3, #100	; 0x64
 8009b90:	d901      	bls.n	8009b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b92:	2303      	movs	r3, #3
 8009b94:	e1f0      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b96:	4b6c      	ldr	r3, [pc, #432]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1f0      	bne.n	8009b84 <HAL_RCC_OscConfig+0xe8>
 8009ba2:	e000      	b.n	8009ba6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d063      	beq.n	8009c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009bb2:	4b65      	ldr	r3, [pc, #404]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f003 030c 	and.w	r3, r3, #12
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00b      	beq.n	8009bd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009bbe:	4b62      	ldr	r3, [pc, #392]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009bc6:	2b08      	cmp	r3, #8
 8009bc8:	d11c      	bne.n	8009c04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009bca:	4b5f      	ldr	r3, [pc, #380]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d116      	bne.n	8009c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bd6:	4b5c      	ldr	r3, [pc, #368]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 0302 	and.w	r3, r3, #2
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d005      	beq.n	8009bee <HAL_RCC_OscConfig+0x152>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d001      	beq.n	8009bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	e1c4      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bee:	4b56      	ldr	r3, [pc, #344]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	00db      	lsls	r3, r3, #3
 8009bfc:	4952      	ldr	r1, [pc, #328]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c02:	e03a      	b.n	8009c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d020      	beq.n	8009c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c0c:	4b4f      	ldr	r3, [pc, #316]	; (8009d4c <HAL_RCC_OscConfig+0x2b0>)
 8009c0e:	2201      	movs	r2, #1
 8009c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c12:	f7fb fcc7 	bl	80055a4 <HAL_GetTick>
 8009c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c18:	e008      	b.n	8009c2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c1a:	f7fb fcc3 	bl	80055a4 <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d901      	bls.n	8009c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e1a5      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c2c:	4b46      	ldr	r3, [pc, #280]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0302 	and.w	r3, r3, #2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d0f0      	beq.n	8009c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c38:	4b43      	ldr	r3, [pc, #268]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	00db      	lsls	r3, r3, #3
 8009c46:	4940      	ldr	r1, [pc, #256]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	600b      	str	r3, [r1, #0]
 8009c4c:	e015      	b.n	8009c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c4e:	4b3f      	ldr	r3, [pc, #252]	; (8009d4c <HAL_RCC_OscConfig+0x2b0>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c54:	f7fb fca6 	bl	80055a4 <HAL_GetTick>
 8009c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c5a:	e008      	b.n	8009c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c5c:	f7fb fca2 	bl	80055a4 <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d901      	bls.n	8009c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e184      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c6e:	4b36      	ldr	r3, [pc, #216]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1f0      	bne.n	8009c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0308 	and.w	r3, r3, #8
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d030      	beq.n	8009ce8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	695b      	ldr	r3, [r3, #20]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d016      	beq.n	8009cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c8e:	4b30      	ldr	r3, [pc, #192]	; (8009d50 <HAL_RCC_OscConfig+0x2b4>)
 8009c90:	2201      	movs	r2, #1
 8009c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c94:	f7fb fc86 	bl	80055a4 <HAL_GetTick>
 8009c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c9a:	e008      	b.n	8009cae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c9c:	f7fb fc82 	bl	80055a4 <HAL_GetTick>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d901      	bls.n	8009cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e164      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009cae:	4b26      	ldr	r3, [pc, #152]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cb2:	f003 0302 	and.w	r3, r3, #2
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d0f0      	beq.n	8009c9c <HAL_RCC_OscConfig+0x200>
 8009cba:	e015      	b.n	8009ce8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009cbc:	4b24      	ldr	r3, [pc, #144]	; (8009d50 <HAL_RCC_OscConfig+0x2b4>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009cc2:	f7fb fc6f 	bl	80055a4 <HAL_GetTick>
 8009cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009cc8:	e008      	b.n	8009cdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009cca:	f7fb fc6b 	bl	80055a4 <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d901      	bls.n	8009cdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e14d      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009cdc:	4b1a      	ldr	r3, [pc, #104]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ce0:	f003 0302 	and.w	r3, r3, #2
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1f0      	bne.n	8009cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 0304 	and.w	r3, r3, #4
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f000 80a0 	beq.w	8009e36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009cfa:	4b13      	ldr	r3, [pc, #76]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10f      	bne.n	8009d26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d06:	2300      	movs	r3, #0
 8009d08:	60bb      	str	r3, [r7, #8]
 8009d0a:	4b0f      	ldr	r3, [pc, #60]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	4a0e      	ldr	r2, [pc, #56]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d14:	6413      	str	r3, [r2, #64]	; 0x40
 8009d16:	4b0c      	ldr	r3, [pc, #48]	; (8009d48 <HAL_RCC_OscConfig+0x2ac>)
 8009d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d1e:	60bb      	str	r3, [r7, #8]
 8009d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d22:	2301      	movs	r3, #1
 8009d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d26:	4b0b      	ldr	r3, [pc, #44]	; (8009d54 <HAL_RCC_OscConfig+0x2b8>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d121      	bne.n	8009d76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d32:	4b08      	ldr	r3, [pc, #32]	; (8009d54 <HAL_RCC_OscConfig+0x2b8>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a07      	ldr	r2, [pc, #28]	; (8009d54 <HAL_RCC_OscConfig+0x2b8>)
 8009d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d3e:	f7fb fc31 	bl	80055a4 <HAL_GetTick>
 8009d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d44:	e011      	b.n	8009d6a <HAL_RCC_OscConfig+0x2ce>
 8009d46:	bf00      	nop
 8009d48:	40023800 	.word	0x40023800
 8009d4c:	42470000 	.word	0x42470000
 8009d50:	42470e80 	.word	0x42470e80
 8009d54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d58:	f7fb fc24 	bl	80055a4 <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d901      	bls.n	8009d6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e106      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d6a:	4b85      	ldr	r3, [pc, #532]	; (8009f80 <HAL_RCC_OscConfig+0x4e4>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0f0      	beq.n	8009d58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d106      	bne.n	8009d8c <HAL_RCC_OscConfig+0x2f0>
 8009d7e:	4b81      	ldr	r3, [pc, #516]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d82:	4a80      	ldr	r2, [pc, #512]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009d84:	f043 0301 	orr.w	r3, r3, #1
 8009d88:	6713      	str	r3, [r2, #112]	; 0x70
 8009d8a:	e01c      	b.n	8009dc6 <HAL_RCC_OscConfig+0x32a>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	2b05      	cmp	r3, #5
 8009d92:	d10c      	bne.n	8009dae <HAL_RCC_OscConfig+0x312>
 8009d94:	4b7b      	ldr	r3, [pc, #492]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d98:	4a7a      	ldr	r2, [pc, #488]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009d9a:	f043 0304 	orr.w	r3, r3, #4
 8009d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8009da0:	4b78      	ldr	r3, [pc, #480]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da4:	4a77      	ldr	r2, [pc, #476]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009da6:	f043 0301 	orr.w	r3, r3, #1
 8009daa:	6713      	str	r3, [r2, #112]	; 0x70
 8009dac:	e00b      	b.n	8009dc6 <HAL_RCC_OscConfig+0x32a>
 8009dae:	4b75      	ldr	r3, [pc, #468]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db2:	4a74      	ldr	r2, [pc, #464]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009db4:	f023 0301 	bic.w	r3, r3, #1
 8009db8:	6713      	str	r3, [r2, #112]	; 0x70
 8009dba:	4b72      	ldr	r3, [pc, #456]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dbe:	4a71      	ldr	r2, [pc, #452]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009dc0:	f023 0304 	bic.w	r3, r3, #4
 8009dc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d015      	beq.n	8009dfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dce:	f7fb fbe9 	bl	80055a4 <HAL_GetTick>
 8009dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dd4:	e00a      	b.n	8009dec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009dd6:	f7fb fbe5 	bl	80055a4 <HAL_GetTick>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d901      	bls.n	8009dec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e0c5      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dec:	4b65      	ldr	r3, [pc, #404]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df0:	f003 0302 	and.w	r3, r3, #2
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d0ee      	beq.n	8009dd6 <HAL_RCC_OscConfig+0x33a>
 8009df8:	e014      	b.n	8009e24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dfa:	f7fb fbd3 	bl	80055a4 <HAL_GetTick>
 8009dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e00:	e00a      	b.n	8009e18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e02:	f7fb fbcf 	bl	80055a4 <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d901      	bls.n	8009e18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e0af      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e18:	4b5a      	ldr	r3, [pc, #360]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e1c:	f003 0302 	and.w	r3, r3, #2
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1ee      	bne.n	8009e02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d105      	bne.n	8009e36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e2a:	4b56      	ldr	r3, [pc, #344]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	4a55      	ldr	r2, [pc, #340]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f000 809b 	beq.w	8009f76 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009e40:	4b50      	ldr	r3, [pc, #320]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	f003 030c 	and.w	r3, r3, #12
 8009e48:	2b08      	cmp	r3, #8
 8009e4a:	d05c      	beq.n	8009f06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d141      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e54:	4b4c      	ldr	r3, [pc, #304]	; (8009f88 <HAL_RCC_OscConfig+0x4ec>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e5a:	f7fb fba3 	bl	80055a4 <HAL_GetTick>
 8009e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e60:	e008      	b.n	8009e74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e62:	f7fb fb9f 	bl	80055a4 <HAL_GetTick>
 8009e66:	4602      	mov	r2, r0
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d901      	bls.n	8009e74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009e70:	2303      	movs	r3, #3
 8009e72:	e081      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e74:	4b43      	ldr	r3, [pc, #268]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1f0      	bne.n	8009e62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	69da      	ldr	r2, [r3, #28]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a1b      	ldr	r3, [r3, #32]
 8009e88:	431a      	orrs	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	019b      	lsls	r3, r3, #6
 8009e90:	431a      	orrs	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e96:	085b      	lsrs	r3, r3, #1
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	041b      	lsls	r3, r3, #16
 8009e9c:	431a      	orrs	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea2:	061b      	lsls	r3, r3, #24
 8009ea4:	4937      	ldr	r1, [pc, #220]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009eaa:	4b37      	ldr	r3, [pc, #220]	; (8009f88 <HAL_RCC_OscConfig+0x4ec>)
 8009eac:	2201      	movs	r2, #1
 8009eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009eb0:	f7fb fb78 	bl	80055a4 <HAL_GetTick>
 8009eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009eb6:	e008      	b.n	8009eca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009eb8:	f7fb fb74 	bl	80055a4 <HAL_GetTick>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d901      	bls.n	8009eca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009ec6:	2303      	movs	r3, #3
 8009ec8:	e056      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009eca:	4b2e      	ldr	r3, [pc, #184]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d0f0      	beq.n	8009eb8 <HAL_RCC_OscConfig+0x41c>
 8009ed6:	e04e      	b.n	8009f76 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ed8:	4b2b      	ldr	r3, [pc, #172]	; (8009f88 <HAL_RCC_OscConfig+0x4ec>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ede:	f7fb fb61 	bl	80055a4 <HAL_GetTick>
 8009ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ee4:	e008      	b.n	8009ef8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ee6:	f7fb fb5d 	bl	80055a4 <HAL_GetTick>
 8009eea:	4602      	mov	r2, r0
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d901      	bls.n	8009ef8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e03f      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ef8:	4b22      	ldr	r3, [pc, #136]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1f0      	bne.n	8009ee6 <HAL_RCC_OscConfig+0x44a>
 8009f04:	e037      	b.n	8009f76 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d101      	bne.n	8009f12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e032      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009f12:	4b1c      	ldr	r3, [pc, #112]	; (8009f84 <HAL_RCC_OscConfig+0x4e8>)
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d028      	beq.n	8009f72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d121      	bne.n	8009f72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d11a      	bne.n	8009f72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009f42:	4013      	ands	r3, r2
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d111      	bne.n	8009f72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f58:	085b      	lsrs	r3, r3, #1
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d107      	bne.n	8009f72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d001      	beq.n	8009f76 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e000      	b.n	8009f78 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3718      	adds	r7, #24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	40007000 	.word	0x40007000
 8009f84:	40023800 	.word	0x40023800
 8009f88:	42470060 	.word	0x42470060

08009f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d101      	bne.n	8009fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e0cc      	b.n	800a13a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009fa0:	4b68      	ldr	r3, [pc, #416]	; (800a144 <HAL_RCC_ClockConfig+0x1b8>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 0307 	and.w	r3, r3, #7
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d90c      	bls.n	8009fc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fae:	4b65      	ldr	r3, [pc, #404]	; (800a144 <HAL_RCC_ClockConfig+0x1b8>)
 8009fb0:	683a      	ldr	r2, [r7, #0]
 8009fb2:	b2d2      	uxtb	r2, r2
 8009fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fb6:	4b63      	ldr	r3, [pc, #396]	; (800a144 <HAL_RCC_ClockConfig+0x1b8>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0307 	and.w	r3, r3, #7
 8009fbe:	683a      	ldr	r2, [r7, #0]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d001      	beq.n	8009fc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e0b8      	b.n	800a13a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0302 	and.w	r3, r3, #2
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d020      	beq.n	800a016 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0304 	and.w	r3, r3, #4
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d005      	beq.n	8009fec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009fe0:	4b59      	ldr	r3, [pc, #356]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	4a58      	ldr	r2, [pc, #352]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 8009fe6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009fea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f003 0308 	and.w	r3, r3, #8
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d005      	beq.n	800a004 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009ff8:	4b53      	ldr	r3, [pc, #332]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	4a52      	ldr	r2, [pc, #328]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 8009ffe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a002:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a004:	4b50      	ldr	r3, [pc, #320]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	494d      	ldr	r1, [pc, #308]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 800a012:	4313      	orrs	r3, r2
 800a014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 0301 	and.w	r3, r3, #1
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d044      	beq.n	800a0ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d107      	bne.n	800a03a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a02a:	4b47      	ldr	r3, [pc, #284]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d119      	bne.n	800a06a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	e07f      	b.n	800a13a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d003      	beq.n	800a04a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a046:	2b03      	cmp	r3, #3
 800a048:	d107      	bne.n	800a05a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a04a:	4b3f      	ldr	r3, [pc, #252]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a052:	2b00      	cmp	r3, #0
 800a054:	d109      	bne.n	800a06a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e06f      	b.n	800a13a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a05a:	4b3b      	ldr	r3, [pc, #236]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 0302 	and.w	r3, r3, #2
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e067      	b.n	800a13a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a06a:	4b37      	ldr	r3, [pc, #220]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	f023 0203 	bic.w	r2, r3, #3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	4934      	ldr	r1, [pc, #208]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 800a078:	4313      	orrs	r3, r2
 800a07a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a07c:	f7fb fa92 	bl	80055a4 <HAL_GetTick>
 800a080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a082:	e00a      	b.n	800a09a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a084:	f7fb fa8e 	bl	80055a4 <HAL_GetTick>
 800a088:	4602      	mov	r2, r0
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a092:	4293      	cmp	r3, r2
 800a094:	d901      	bls.n	800a09a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e04f      	b.n	800a13a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a09a:	4b2b      	ldr	r3, [pc, #172]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	f003 020c 	and.w	r2, r3, #12
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d1eb      	bne.n	800a084 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a0ac:	4b25      	ldr	r3, [pc, #148]	; (800a144 <HAL_RCC_ClockConfig+0x1b8>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f003 0307 	and.w	r3, r3, #7
 800a0b4:	683a      	ldr	r2, [r7, #0]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d20c      	bcs.n	800a0d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0ba:	4b22      	ldr	r3, [pc, #136]	; (800a144 <HAL_RCC_ClockConfig+0x1b8>)
 800a0bc:	683a      	ldr	r2, [r7, #0]
 800a0be:	b2d2      	uxtb	r2, r2
 800a0c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0c2:	4b20      	ldr	r3, [pc, #128]	; (800a144 <HAL_RCC_ClockConfig+0x1b8>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 0307 	and.w	r3, r3, #7
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d001      	beq.n	800a0d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e032      	b.n	800a13a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0304 	and.w	r3, r3, #4
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d008      	beq.n	800a0f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a0e0:	4b19      	ldr	r3, [pc, #100]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	4916      	ldr	r1, [pc, #88]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 0308 	and.w	r3, r3, #8
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d009      	beq.n	800a112 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a0fe:	4b12      	ldr	r3, [pc, #72]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	00db      	lsls	r3, r3, #3
 800a10c:	490e      	ldr	r1, [pc, #56]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 800a10e:	4313      	orrs	r3, r2
 800a110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a112:	f000 f821 	bl	800a158 <HAL_RCC_GetSysClockFreq>
 800a116:	4602      	mov	r2, r0
 800a118:	4b0b      	ldr	r3, [pc, #44]	; (800a148 <HAL_RCC_ClockConfig+0x1bc>)
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	091b      	lsrs	r3, r3, #4
 800a11e:	f003 030f 	and.w	r3, r3, #15
 800a122:	490a      	ldr	r1, [pc, #40]	; (800a14c <HAL_RCC_ClockConfig+0x1c0>)
 800a124:	5ccb      	ldrb	r3, [r1, r3]
 800a126:	fa22 f303 	lsr.w	r3, r2, r3
 800a12a:	4a09      	ldr	r2, [pc, #36]	; (800a150 <HAL_RCC_ClockConfig+0x1c4>)
 800a12c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a12e:	4b09      	ldr	r3, [pc, #36]	; (800a154 <HAL_RCC_ClockConfig+0x1c8>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4618      	mov	r0, r3
 800a134:	f7fb f8f8 	bl	8005328 <HAL_InitTick>

  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	40023c00 	.word	0x40023c00
 800a148:	40023800 	.word	0x40023800
 800a14c:	08014334 	.word	0x08014334
 800a150:	2000000c 	.word	0x2000000c
 800a154:	20000010 	.word	0x20000010

0800a158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a158:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a15c:	b084      	sub	sp, #16
 800a15e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a160:	2300      	movs	r3, #0
 800a162:	607b      	str	r3, [r7, #4]
 800a164:	2300      	movs	r3, #0
 800a166:	60fb      	str	r3, [r7, #12]
 800a168:	2300      	movs	r3, #0
 800a16a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a16c:	2300      	movs	r3, #0
 800a16e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a170:	4b67      	ldr	r3, [pc, #412]	; (800a310 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	f003 030c 	and.w	r3, r3, #12
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d00d      	beq.n	800a198 <HAL_RCC_GetSysClockFreq+0x40>
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	f200 80bd 	bhi.w	800a2fc <HAL_RCC_GetSysClockFreq+0x1a4>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <HAL_RCC_GetSysClockFreq+0x34>
 800a186:	2b04      	cmp	r3, #4
 800a188:	d003      	beq.n	800a192 <HAL_RCC_GetSysClockFreq+0x3a>
 800a18a:	e0b7      	b.n	800a2fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a18c:	4b61      	ldr	r3, [pc, #388]	; (800a314 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a18e:	60bb      	str	r3, [r7, #8]
       break;
 800a190:	e0b7      	b.n	800a302 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a192:	4b61      	ldr	r3, [pc, #388]	; (800a318 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800a194:	60bb      	str	r3, [r7, #8]
      break;
 800a196:	e0b4      	b.n	800a302 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a198:	4b5d      	ldr	r3, [pc, #372]	; (800a310 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a1a2:	4b5b      	ldr	r3, [pc, #364]	; (800a310 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d04d      	beq.n	800a24a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1ae:	4b58      	ldr	r3, [pc, #352]	; (800a310 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	099b      	lsrs	r3, r3, #6
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	f04f 0300 	mov.w	r3, #0
 800a1ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a1be:	f04f 0100 	mov.w	r1, #0
 800a1c2:	ea02 0800 	and.w	r8, r2, r0
 800a1c6:	ea03 0901 	and.w	r9, r3, r1
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	f04f 0200 	mov.w	r2, #0
 800a1d2:	f04f 0300 	mov.w	r3, #0
 800a1d6:	014b      	lsls	r3, r1, #5
 800a1d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a1dc:	0142      	lsls	r2, r0, #5
 800a1de:	4610      	mov	r0, r2
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	ebb0 0008 	subs.w	r0, r0, r8
 800a1e6:	eb61 0109 	sbc.w	r1, r1, r9
 800a1ea:	f04f 0200 	mov.w	r2, #0
 800a1ee:	f04f 0300 	mov.w	r3, #0
 800a1f2:	018b      	lsls	r3, r1, #6
 800a1f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a1f8:	0182      	lsls	r2, r0, #6
 800a1fa:	1a12      	subs	r2, r2, r0
 800a1fc:	eb63 0301 	sbc.w	r3, r3, r1
 800a200:	f04f 0000 	mov.w	r0, #0
 800a204:	f04f 0100 	mov.w	r1, #0
 800a208:	00d9      	lsls	r1, r3, #3
 800a20a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a20e:	00d0      	lsls	r0, r2, #3
 800a210:	4602      	mov	r2, r0
 800a212:	460b      	mov	r3, r1
 800a214:	eb12 0208 	adds.w	r2, r2, r8
 800a218:	eb43 0309 	adc.w	r3, r3, r9
 800a21c:	f04f 0000 	mov.w	r0, #0
 800a220:	f04f 0100 	mov.w	r1, #0
 800a224:	0259      	lsls	r1, r3, #9
 800a226:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800a22a:	0250      	lsls	r0, r2, #9
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	4610      	mov	r0, r2
 800a232:	4619      	mov	r1, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	461a      	mov	r2, r3
 800a238:	f04f 0300 	mov.w	r3, #0
 800a23c:	f7f6 fcb4 	bl	8000ba8 <__aeabi_uldivmod>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	4613      	mov	r3, r2
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	e04a      	b.n	800a2e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a24a:	4b31      	ldr	r3, [pc, #196]	; (800a310 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	099b      	lsrs	r3, r3, #6
 800a250:	461a      	mov	r2, r3
 800a252:	f04f 0300 	mov.w	r3, #0
 800a256:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a25a:	f04f 0100 	mov.w	r1, #0
 800a25e:	ea02 0400 	and.w	r4, r2, r0
 800a262:	ea03 0501 	and.w	r5, r3, r1
 800a266:	4620      	mov	r0, r4
 800a268:	4629      	mov	r1, r5
 800a26a:	f04f 0200 	mov.w	r2, #0
 800a26e:	f04f 0300 	mov.w	r3, #0
 800a272:	014b      	lsls	r3, r1, #5
 800a274:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a278:	0142      	lsls	r2, r0, #5
 800a27a:	4610      	mov	r0, r2
 800a27c:	4619      	mov	r1, r3
 800a27e:	1b00      	subs	r0, r0, r4
 800a280:	eb61 0105 	sbc.w	r1, r1, r5
 800a284:	f04f 0200 	mov.w	r2, #0
 800a288:	f04f 0300 	mov.w	r3, #0
 800a28c:	018b      	lsls	r3, r1, #6
 800a28e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a292:	0182      	lsls	r2, r0, #6
 800a294:	1a12      	subs	r2, r2, r0
 800a296:	eb63 0301 	sbc.w	r3, r3, r1
 800a29a:	f04f 0000 	mov.w	r0, #0
 800a29e:	f04f 0100 	mov.w	r1, #0
 800a2a2:	00d9      	lsls	r1, r3, #3
 800a2a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a2a8:	00d0      	lsls	r0, r2, #3
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	1912      	adds	r2, r2, r4
 800a2b0:	eb45 0303 	adc.w	r3, r5, r3
 800a2b4:	f04f 0000 	mov.w	r0, #0
 800a2b8:	f04f 0100 	mov.w	r1, #0
 800a2bc:	0299      	lsls	r1, r3, #10
 800a2be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a2c2:	0290      	lsls	r0, r2, #10
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	f04f 0300 	mov.w	r3, #0
 800a2d4:	f7f6 fc68 	bl	8000ba8 <__aeabi_uldivmod>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4613      	mov	r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a2e0:	4b0b      	ldr	r3, [pc, #44]	; (800a310 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	0c1b      	lsrs	r3, r3, #16
 800a2e6:	f003 0303 	and.w	r3, r3, #3
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	005b      	lsls	r3, r3, #1
 800a2ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2f8:	60bb      	str	r3, [r7, #8]
      break;
 800a2fa:	e002      	b.n	800a302 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a2fc:	4b05      	ldr	r3, [pc, #20]	; (800a314 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a2fe:	60bb      	str	r3, [r7, #8]
      break;
 800a300:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a302:	68bb      	ldr	r3, [r7, #8]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a30e:	bf00      	nop
 800a310:	40023800 	.word	0x40023800
 800a314:	00f42400 	.word	0x00f42400
 800a318:	007a1200 	.word	0x007a1200

0800a31c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a31c:	b480      	push	{r7}
 800a31e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a320:	4b03      	ldr	r3, [pc, #12]	; (800a330 <HAL_RCC_GetHCLKFreq+0x14>)
 800a322:	681b      	ldr	r3, [r3, #0]
}
 800a324:	4618      	mov	r0, r3
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	2000000c 	.word	0x2000000c

0800a334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a338:	f7ff fff0 	bl	800a31c <HAL_RCC_GetHCLKFreq>
 800a33c:	4602      	mov	r2, r0
 800a33e:	4b05      	ldr	r3, [pc, #20]	; (800a354 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	0a9b      	lsrs	r3, r3, #10
 800a344:	f003 0307 	and.w	r3, r3, #7
 800a348:	4903      	ldr	r1, [pc, #12]	; (800a358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a34a:	5ccb      	ldrb	r3, [r1, r3]
 800a34c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a350:	4618      	mov	r0, r3
 800a352:	bd80      	pop	{r7, pc}
 800a354:	40023800 	.word	0x40023800
 800a358:	08014344 	.word	0x08014344

0800a35c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a360:	f7ff ffdc 	bl	800a31c <HAL_RCC_GetHCLKFreq>
 800a364:	4602      	mov	r2, r0
 800a366:	4b05      	ldr	r3, [pc, #20]	; (800a37c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	0b5b      	lsrs	r3, r3, #13
 800a36c:	f003 0307 	and.w	r3, r3, #7
 800a370:	4903      	ldr	r1, [pc, #12]	; (800a380 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a372:	5ccb      	ldrb	r3, [r1, r3]
 800a374:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a378:	4618      	mov	r0, r3
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	40023800 	.word	0x40023800
 800a380:	08014344 	.word	0x08014344

0800a384 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	220f      	movs	r2, #15
 800a392:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a394:	4b12      	ldr	r3, [pc, #72]	; (800a3e0 <HAL_RCC_GetClockConfig+0x5c>)
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	f003 0203 	and.w	r2, r3, #3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a3a0:	4b0f      	ldr	r3, [pc, #60]	; (800a3e0 <HAL_RCC_GetClockConfig+0x5c>)
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a3ac:	4b0c      	ldr	r3, [pc, #48]	; (800a3e0 <HAL_RCC_GetClockConfig+0x5c>)
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a3b8:	4b09      	ldr	r3, [pc, #36]	; (800a3e0 <HAL_RCC_GetClockConfig+0x5c>)
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	08db      	lsrs	r3, r3, #3
 800a3be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a3c6:	4b07      	ldr	r3, [pc, #28]	; (800a3e4 <HAL_RCC_GetClockConfig+0x60>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0207 	and.w	r2, r3, #7
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	601a      	str	r2, [r3, #0]
}
 800a3d2:	bf00      	nop
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	40023800 	.word	0x40023800
 800a3e4:	40023c00 	.word	0x40023c00

0800a3e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d101      	bne.n	800a3fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e07b      	b.n	800a4f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d108      	bne.n	800a414 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a40a:	d009      	beq.n	800a420 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	61da      	str	r2, [r3, #28]
 800a412:	e005      	b.n	800a420 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d106      	bne.n	800a440 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f7fa fe24 	bl	8005088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2202      	movs	r2, #2
 800a444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a456:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a468:	431a      	orrs	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a472:	431a      	orrs	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	f003 0302 	and.w	r3, r3, #2
 800a47c:	431a      	orrs	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	f003 0301 	and.w	r3, r3, #1
 800a486:	431a      	orrs	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	699b      	ldr	r3, [r3, #24]
 800a48c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a490:	431a      	orrs	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	69db      	ldr	r3, [r3, #28]
 800a496:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a49a:	431a      	orrs	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a1b      	ldr	r3, [r3, #32]
 800a4a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4a4:	ea42 0103 	orr.w	r1, r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	0c1b      	lsrs	r3, r3, #16
 800a4be:	f003 0104 	and.w	r1, r3, #4
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c6:	f003 0210 	and.w	r2, r3, #16
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	69da      	ldr	r2, [r3, #28]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b088      	sub	sp, #32
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	60f8      	str	r0, [r7, #12]
 800a502:	60b9      	str	r1, [r7, #8]
 800a504:	603b      	str	r3, [r7, #0]
 800a506:	4613      	mov	r3, r2
 800a508:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a514:	2b01      	cmp	r3, #1
 800a516:	d101      	bne.n	800a51c <HAL_SPI_Transmit+0x22>
 800a518:	2302      	movs	r3, #2
 800a51a:	e126      	b.n	800a76a <HAL_SPI_Transmit+0x270>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a524:	f7fb f83e 	bl	80055a4 <HAL_GetTick>
 800a528:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a52a:	88fb      	ldrh	r3, [r7, #6]
 800a52c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b01      	cmp	r3, #1
 800a538:	d002      	beq.n	800a540 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a53a:	2302      	movs	r3, #2
 800a53c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a53e:	e10b      	b.n	800a758 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d002      	beq.n	800a54c <HAL_SPI_Transmit+0x52>
 800a546:	88fb      	ldrh	r3, [r7, #6]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d102      	bne.n	800a552 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a550:	e102      	b.n	800a758 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2203      	movs	r2, #3
 800a556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2200      	movs	r2, #0
 800a55e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	88fa      	ldrh	r2, [r7, #6]
 800a56a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	88fa      	ldrh	r2, [r7, #6]
 800a570:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a598:	d10f      	bne.n	800a5ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c4:	2b40      	cmp	r3, #64	; 0x40
 800a5c6:	d007      	beq.n	800a5d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5e0:	d14b      	bne.n	800a67a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d002      	beq.n	800a5f0 <HAL_SPI_Transmit+0xf6>
 800a5ea:	8afb      	ldrh	r3, [r7, #22]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d13e      	bne.n	800a66e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f4:	881a      	ldrh	r2, [r3, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a600:	1c9a      	adds	r2, r3, #2
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	3b01      	subs	r3, #1
 800a60e:	b29a      	uxth	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a614:	e02b      	b.n	800a66e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	f003 0302 	and.w	r3, r3, #2
 800a620:	2b02      	cmp	r3, #2
 800a622:	d112      	bne.n	800a64a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a628:	881a      	ldrh	r2, [r3, #0]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a634:	1c9a      	adds	r2, r3, #2
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a63e:	b29b      	uxth	r3, r3
 800a640:	3b01      	subs	r3, #1
 800a642:	b29a      	uxth	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	86da      	strh	r2, [r3, #54]	; 0x36
 800a648:	e011      	b.n	800a66e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a64a:	f7fa ffab 	bl	80055a4 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	429a      	cmp	r2, r3
 800a658:	d803      	bhi.n	800a662 <HAL_SPI_Transmit+0x168>
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a660:	d102      	bne.n	800a668 <HAL_SPI_Transmit+0x16e>
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d102      	bne.n	800a66e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a668:	2303      	movs	r3, #3
 800a66a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a66c:	e074      	b.n	800a758 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a672:	b29b      	uxth	r3, r3
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1ce      	bne.n	800a616 <HAL_SPI_Transmit+0x11c>
 800a678:	e04c      	b.n	800a714 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d002      	beq.n	800a688 <HAL_SPI_Transmit+0x18e>
 800a682:	8afb      	ldrh	r3, [r7, #22]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d140      	bne.n	800a70a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	330c      	adds	r3, #12
 800a692:	7812      	ldrb	r2, [r2, #0]
 800a694:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69a:	1c5a      	adds	r2, r3, #1
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a6ae:	e02c      	b.n	800a70a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	f003 0302 	and.w	r3, r3, #2
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d113      	bne.n	800a6e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	330c      	adds	r3, #12
 800a6c8:	7812      	ldrb	r2, [r2, #0]
 800a6ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d0:	1c5a      	adds	r2, r3, #1
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	86da      	strh	r2, [r3, #54]	; 0x36
 800a6e4:	e011      	b.n	800a70a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6e6:	f7fa ff5d 	bl	80055a4 <HAL_GetTick>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d803      	bhi.n	800a6fe <HAL_SPI_Transmit+0x204>
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fc:	d102      	bne.n	800a704 <HAL_SPI_Transmit+0x20a>
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d102      	bne.n	800a70a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a708:	e026      	b.n	800a758 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a70e:	b29b      	uxth	r3, r3
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1cd      	bne.n	800a6b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a714:	69ba      	ldr	r2, [r7, #24]
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 fbcb 	bl	800aeb4 <SPI_EndRxTxTransaction>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d002      	beq.n	800a72a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2220      	movs	r2, #32
 800a728:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10a      	bne.n	800a748 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a732:	2300      	movs	r3, #0
 800a734:	613b      	str	r3, [r7, #16]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	613b      	str	r3, [r7, #16]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	613b      	str	r3, [r7, #16]
 800a746:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d002      	beq.n	800a756 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	77fb      	strb	r3, [r7, #31]
 800a754:	e000      	b.n	800a758 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a756:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a768:	7ffb      	ldrb	r3, [r7, #31]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3720      	adds	r7, #32
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b088      	sub	sp, #32
 800a776:	af02      	add	r7, sp, #8
 800a778:	60f8      	str	r0, [r7, #12]
 800a77a:	60b9      	str	r1, [r7, #8]
 800a77c:	603b      	str	r3, [r7, #0]
 800a77e:	4613      	mov	r3, r2
 800a780:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a78e:	d112      	bne.n	800a7b6 <HAL_SPI_Receive+0x44>
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10e      	bne.n	800a7b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2204      	movs	r2, #4
 800a79c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a7a0:	88fa      	ldrh	r2, [r7, #6]
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	68ba      	ldr	r2, [r7, #8]
 800a7aa:	68b9      	ldr	r1, [r7, #8]
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f000 f8f1 	bl	800a994 <HAL_SPI_TransmitReceive>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	e0ea      	b.n	800a98c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d101      	bne.n	800a7c4 <HAL_SPI_Receive+0x52>
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	e0e3      	b.n	800a98c <HAL_SPI_Receive+0x21a>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a7cc:	f7fa feea 	bl	80055a4 <HAL_GetTick>
 800a7d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d002      	beq.n	800a7e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a7de:	2302      	movs	r3, #2
 800a7e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a7e2:	e0ca      	b.n	800a97a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d002      	beq.n	800a7f0 <HAL_SPI_Receive+0x7e>
 800a7ea:	88fb      	ldrh	r3, [r7, #6]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d102      	bne.n	800a7f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a7f4:	e0c1      	b.n	800a97a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2204      	movs	r2, #4
 800a7fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	88fa      	ldrh	r2, [r7, #6]
 800a80e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	88fa      	ldrh	r2, [r7, #6]
 800a814:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a83c:	d10f      	bne.n	800a85e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a84c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a85c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a868:	2b40      	cmp	r3, #64	; 0x40
 800a86a:	d007      	beq.n	800a87c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a87a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d162      	bne.n	800a94a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a884:	e02e      	b.n	800a8e4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	f003 0301 	and.w	r3, r3, #1
 800a890:	2b01      	cmp	r3, #1
 800a892:	d115      	bne.n	800a8c0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f103 020c 	add.w	r2, r3, #12
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a0:	7812      	ldrb	r2, [r2, #0]
 800a8a2:	b2d2      	uxtb	r2, r2
 800a8a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8aa:	1c5a      	adds	r2, r3, #1
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a8be:	e011      	b.n	800a8e4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8c0:	f7fa fe70 	bl	80055a4 <HAL_GetTick>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d803      	bhi.n	800a8d8 <HAL_SPI_Receive+0x166>
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d6:	d102      	bne.n	800a8de <HAL_SPI_Receive+0x16c>
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d102      	bne.n	800a8e4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a8e2:	e04a      	b.n	800a97a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1cb      	bne.n	800a886 <HAL_SPI_Receive+0x114>
 800a8ee:	e031      	b.n	800a954 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	f003 0301 	and.w	r3, r3, #1
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d113      	bne.n	800a926 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	68da      	ldr	r2, [r3, #12]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a908:	b292      	uxth	r2, r2
 800a90a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a910:	1c9a      	adds	r2, r3, #2
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	3b01      	subs	r3, #1
 800a91e:	b29a      	uxth	r2, r3
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a924:	e011      	b.n	800a94a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a926:	f7fa fe3d 	bl	80055a4 <HAL_GetTick>
 800a92a:	4602      	mov	r2, r0
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	683a      	ldr	r2, [r7, #0]
 800a932:	429a      	cmp	r2, r3
 800a934:	d803      	bhi.n	800a93e <HAL_SPI_Receive+0x1cc>
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a93c:	d102      	bne.n	800a944 <HAL_SPI_Receive+0x1d2>
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d102      	bne.n	800a94a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a948:	e017      	b.n	800a97a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a94e:	b29b      	uxth	r3, r3
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1cd      	bne.n	800a8f0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a954:	693a      	ldr	r2, [r7, #16]
 800a956:	6839      	ldr	r1, [r7, #0]
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f000 fa45 	bl	800ade8 <SPI_EndRxTransaction>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d002      	beq.n	800a96a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2220      	movs	r2, #32
 800a968:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d002      	beq.n	800a978 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	75fb      	strb	r3, [r7, #23]
 800a976:	e000      	b.n	800a97a <HAL_SPI_Receive+0x208>
  }

error :
 800a978:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3718      	adds	r7, #24
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b08c      	sub	sp, #48	; 0x30
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
 800a9a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d101      	bne.n	800a9ba <HAL_SPI_TransmitReceive+0x26>
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	e18a      	b.n	800acd0 <HAL_SPI_TransmitReceive+0x33c>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9c2:	f7fa fdef 	bl	80055a4 <HAL_GetTick>
 800a9c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a9d8:	887b      	ldrh	r3, [r7, #2]
 800a9da:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a9dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d00f      	beq.n	800aa04 <HAL_SPI_TransmitReceive+0x70>
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9ea:	d107      	bne.n	800a9fc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d103      	bne.n	800a9fc <HAL_SPI_TransmitReceive+0x68>
 800a9f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9f8:	2b04      	cmp	r3, #4
 800a9fa:	d003      	beq.n	800aa04 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a9fc:	2302      	movs	r3, #2
 800a9fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aa02:	e15b      	b.n	800acbc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d005      	beq.n	800aa16 <HAL_SPI_TransmitReceive+0x82>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d002      	beq.n	800aa16 <HAL_SPI_TransmitReceive+0x82>
 800aa10:	887b      	ldrh	r3, [r7, #2]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d103      	bne.n	800aa1e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aa1c:	e14e      	b.n	800acbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b04      	cmp	r3, #4
 800aa28:	d003      	beq.n	800aa32 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2205      	movs	r2, #5
 800aa2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	887a      	ldrh	r2, [r7, #2]
 800aa42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	887a      	ldrh	r2, [r7, #2]
 800aa48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	887a      	ldrh	r2, [r7, #2]
 800aa54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	887a      	ldrh	r2, [r7, #2]
 800aa5a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa72:	2b40      	cmp	r3, #64	; 0x40
 800aa74:	d007      	beq.n	800aa86 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa8e:	d178      	bne.n	800ab82 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d002      	beq.n	800aa9e <HAL_SPI_TransmitReceive+0x10a>
 800aa98:	8b7b      	ldrh	r3, [r7, #26]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d166      	bne.n	800ab6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaa2:	881a      	ldrh	r2, [r3, #0]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaae:	1c9a      	adds	r2, r3, #2
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	3b01      	subs	r3, #1
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aac2:	e053      	b.n	800ab6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	f003 0302 	and.w	r3, r3, #2
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d11b      	bne.n	800ab0a <HAL_SPI_TransmitReceive+0x176>
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d016      	beq.n	800ab0a <HAL_SPI_TransmitReceive+0x176>
 800aadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d113      	bne.n	800ab0a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae6:	881a      	ldrh	r2, [r3, #0]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf2:	1c9a      	adds	r2, r3, #2
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	3b01      	subs	r3, #1
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ab06:	2300      	movs	r3, #0
 800ab08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f003 0301 	and.w	r3, r3, #1
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d119      	bne.n	800ab4c <HAL_SPI_TransmitReceive+0x1b8>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d014      	beq.n	800ab4c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68da      	ldr	r2, [r3, #12]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2c:	b292      	uxth	r2, r2
 800ab2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab34:	1c9a      	adds	r2, r3, #2
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	3b01      	subs	r3, #1
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ab4c:	f7fa fd2a 	bl	80055a4 <HAL_GetTick>
 800ab50:	4602      	mov	r2, r0
 800ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab54:	1ad3      	subs	r3, r2, r3
 800ab56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d807      	bhi.n	800ab6c <HAL_SPI_TransmitReceive+0x1d8>
 800ab5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab62:	d003      	beq.n	800ab6c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ab64:	2303      	movs	r3, #3
 800ab66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ab6a:	e0a7      	b.n	800acbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1a6      	bne.n	800aac4 <HAL_SPI_TransmitReceive+0x130>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1a1      	bne.n	800aac4 <HAL_SPI_TransmitReceive+0x130>
 800ab80:	e07c      	b.n	800ac7c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d002      	beq.n	800ab90 <HAL_SPI_TransmitReceive+0x1fc>
 800ab8a:	8b7b      	ldrh	r3, [r7, #26]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d16b      	bne.n	800ac68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	330c      	adds	r3, #12
 800ab9a:	7812      	ldrb	r2, [r2, #0]
 800ab9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba2:	1c5a      	adds	r2, r3, #1
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abac:	b29b      	uxth	r3, r3
 800abae:	3b01      	subs	r3, #1
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abb6:	e057      	b.n	800ac68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	f003 0302 	and.w	r3, r3, #2
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	d11c      	bne.n	800ac00 <HAL_SPI_TransmitReceive+0x26c>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abca:	b29b      	uxth	r3, r3
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d017      	beq.n	800ac00 <HAL_SPI_TransmitReceive+0x26c>
 800abd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d114      	bne.n	800ac00 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	330c      	adds	r3, #12
 800abe0:	7812      	ldrb	r2, [r2, #0]
 800abe2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe8:	1c5a      	adds	r2, r3, #1
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	3b01      	subs	r3, #1
 800abf6:	b29a      	uxth	r2, r3
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800abfc:	2300      	movs	r3, #0
 800abfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	f003 0301 	and.w	r3, r3, #1
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d119      	bne.n	800ac42 <HAL_SPI_TransmitReceive+0x2ae>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d014      	beq.n	800ac42 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68da      	ldr	r2, [r3, #12]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac22:	b2d2      	uxtb	r2, r2
 800ac24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2a:	1c5a      	adds	r2, r3, #1
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	3b01      	subs	r3, #1
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ac42:	f7fa fcaf 	bl	80055a4 <HAL_GetTick>
 800ac46:	4602      	mov	r2, r0
 800ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4a:	1ad3      	subs	r3, r2, r3
 800ac4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d803      	bhi.n	800ac5a <HAL_SPI_TransmitReceive+0x2c6>
 800ac52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac58:	d102      	bne.n	800ac60 <HAL_SPI_TransmitReceive+0x2cc>
 800ac5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d103      	bne.n	800ac68 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ac60:	2303      	movs	r3, #3
 800ac62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ac66:	e029      	b.n	800acbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1a2      	bne.n	800abb8 <HAL_SPI_TransmitReceive+0x224>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d19d      	bne.n	800abb8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f000 f917 	bl	800aeb4 <SPI_EndRxTxTransaction>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d006      	beq.n	800ac9a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2220      	movs	r2, #32
 800ac96:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ac98:	e010      	b.n	800acbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10b      	bne.n	800acba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aca2:	2300      	movs	r3, #0
 800aca4:	617b      	str	r3, [r7, #20]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	617b      	str	r3, [r7, #20]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	617b      	str	r3, [r7, #20]
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	e000      	b.n	800acbc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800acba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2201      	movs	r2, #1
 800acc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800accc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3730      	adds	r7, #48	; 0x30
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b088      	sub	sp, #32
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	603b      	str	r3, [r7, #0]
 800ace4:	4613      	mov	r3, r2
 800ace6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ace8:	f7fa fc5c 	bl	80055a4 <HAL_GetTick>
 800acec:	4602      	mov	r2, r0
 800acee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf0:	1a9b      	subs	r3, r3, r2
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	4413      	add	r3, r2
 800acf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800acf8:	f7fa fc54 	bl	80055a4 <HAL_GetTick>
 800acfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800acfe:	4b39      	ldr	r3, [pc, #228]	; (800ade4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	015b      	lsls	r3, r3, #5
 800ad04:	0d1b      	lsrs	r3, r3, #20
 800ad06:	69fa      	ldr	r2, [r7, #28]
 800ad08:	fb02 f303 	mul.w	r3, r2, r3
 800ad0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad0e:	e054      	b.n	800adba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad16:	d050      	beq.n	800adba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad18:	f7fa fc44 	bl	80055a4 <HAL_GetTick>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	69fa      	ldr	r2, [r7, #28]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d902      	bls.n	800ad2e <SPI_WaitFlagStateUntilTimeout+0x56>
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d13d      	bne.n	800adaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	685a      	ldr	r2, [r3, #4]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad46:	d111      	bne.n	800ad6c <SPI_WaitFlagStateUntilTimeout+0x94>
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad50:	d004      	beq.n	800ad5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad5a:	d107      	bne.n	800ad6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad74:	d10f      	bne.n	800ad96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad84:	601a      	str	r2, [r3, #0]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ada6:	2303      	movs	r3, #3
 800ada8:	e017      	b.n	800adda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d101      	bne.n	800adb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800adb0:	2300      	movs	r3, #0
 800adb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	3b01      	subs	r3, #1
 800adb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	689a      	ldr	r2, [r3, #8]
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	4013      	ands	r3, r2
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	bf0c      	ite	eq
 800adca:	2301      	moveq	r3, #1
 800adcc:	2300      	movne	r3, #0
 800adce:	b2db      	uxtb	r3, r3
 800add0:	461a      	mov	r2, r3
 800add2:	79fb      	ldrb	r3, [r7, #7]
 800add4:	429a      	cmp	r2, r3
 800add6:	d19b      	bne.n	800ad10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3720      	adds	r7, #32
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	2000000c 	.word	0x2000000c

0800ade8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af02      	add	r7, sp, #8
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800adfc:	d111      	bne.n	800ae22 <SPI_EndRxTransaction+0x3a>
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae06:	d004      	beq.n	800ae12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae10:	d107      	bne.n	800ae22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae2a:	d12a      	bne.n	800ae82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae34:	d012      	beq.n	800ae5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	2180      	movs	r1, #128	; 0x80
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f7ff ff49 	bl	800acd8 <SPI_WaitFlagStateUntilTimeout>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d02d      	beq.n	800aea8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae50:	f043 0220 	orr.w	r2, r3, #32
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	e026      	b.n	800aeaa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	2200      	movs	r2, #0
 800ae64:	2101      	movs	r1, #1
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f7ff ff36 	bl	800acd8 <SPI_WaitFlagStateUntilTimeout>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d01a      	beq.n	800aea8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae76:	f043 0220 	orr.w	r2, r3, #32
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e013      	b.n	800aeaa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	2101      	movs	r1, #1
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f7ff ff23 	bl	800acd8 <SPI_WaitFlagStateUntilTimeout>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d007      	beq.n	800aea8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae9c:	f043 0220 	orr.w	r2, r3, #32
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aea4:	2303      	movs	r3, #3
 800aea6:	e000      	b.n	800aeaa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
	...

0800aeb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b088      	sub	sp, #32
 800aeb8:	af02      	add	r7, sp, #8
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aec0:	4b1b      	ldr	r3, [pc, #108]	; (800af30 <SPI_EndRxTxTransaction+0x7c>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a1b      	ldr	r2, [pc, #108]	; (800af34 <SPI_EndRxTxTransaction+0x80>)
 800aec6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeca:	0d5b      	lsrs	r3, r3, #21
 800aecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aed0:	fb02 f303 	mul.w	r3, r2, r3
 800aed4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aede:	d112      	bne.n	800af06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2200      	movs	r2, #0
 800aee8:	2180      	movs	r1, #128	; 0x80
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f7ff fef4 	bl	800acd8 <SPI_WaitFlagStateUntilTimeout>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d016      	beq.n	800af24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aefa:	f043 0220 	orr.w	r2, r3, #32
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800af02:	2303      	movs	r3, #3
 800af04:	e00f      	b.n	800af26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d00a      	beq.n	800af22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	3b01      	subs	r3, #1
 800af10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af1c:	2b80      	cmp	r3, #128	; 0x80
 800af1e:	d0f2      	beq.n	800af06 <SPI_EndRxTxTransaction+0x52>
 800af20:	e000      	b.n	800af24 <SPI_EndRxTxTransaction+0x70>
        break;
 800af22:	bf00      	nop
  }

  return HAL_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3718      	adds	r7, #24
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	2000000c 	.word	0x2000000c
 800af34:	165e9f81 	.word	0x165e9f81

0800af38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	e041      	b.n	800afce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af50:	b2db      	uxtb	r3, r3
 800af52:	2b00      	cmp	r3, #0
 800af54:	d106      	bne.n	800af64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f7fa f930 	bl	80051c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2202      	movs	r2, #2
 800af68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	3304      	adds	r3, #4
 800af74:	4619      	mov	r1, r3
 800af76:	4610      	mov	r0, r2
 800af78:	f000 fcae 	bl	800b8d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2201      	movs	r2, #1
 800af88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
	...

0800afd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d001      	beq.n	800aff0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e03c      	b.n	800b06a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2202      	movs	r2, #2
 800aff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a1e      	ldr	r2, [pc, #120]	; (800b078 <HAL_TIM_Base_Start+0xa0>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d018      	beq.n	800b034 <HAL_TIM_Base_Start+0x5c>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b00a:	d013      	beq.n	800b034 <HAL_TIM_Base_Start+0x5c>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a1a      	ldr	r2, [pc, #104]	; (800b07c <HAL_TIM_Base_Start+0xa4>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d00e      	beq.n	800b034 <HAL_TIM_Base_Start+0x5c>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a19      	ldr	r2, [pc, #100]	; (800b080 <HAL_TIM_Base_Start+0xa8>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d009      	beq.n	800b034 <HAL_TIM_Base_Start+0x5c>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a17      	ldr	r2, [pc, #92]	; (800b084 <HAL_TIM_Base_Start+0xac>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d004      	beq.n	800b034 <HAL_TIM_Base_Start+0x5c>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a16      	ldr	r2, [pc, #88]	; (800b088 <HAL_TIM_Base_Start+0xb0>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d111      	bne.n	800b058 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	f003 0307 	and.w	r3, r3, #7
 800b03e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2b06      	cmp	r3, #6
 800b044:	d010      	beq.n	800b068 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f042 0201 	orr.w	r2, r2, #1
 800b054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b056:	e007      	b.n	800b068 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f042 0201 	orr.w	r2, r2, #1
 800b066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3714      	adds	r7, #20
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	40010000 	.word	0x40010000
 800b07c:	40000400 	.word	0x40000400
 800b080:	40000800 	.word	0x40000800
 800b084:	40000c00 	.word	0x40000c00
 800b088:	40014000 	.word	0x40014000

0800b08c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d001      	beq.n	800b0a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e044      	b.n	800b12e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2202      	movs	r2, #2
 800b0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	68da      	ldr	r2, [r3, #12]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f042 0201 	orr.w	r2, r2, #1
 800b0ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a1e      	ldr	r2, [pc, #120]	; (800b13c <HAL_TIM_Base_Start_IT+0xb0>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d018      	beq.n	800b0f8 <HAL_TIM_Base_Start_IT+0x6c>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0ce:	d013      	beq.n	800b0f8 <HAL_TIM_Base_Start_IT+0x6c>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a1a      	ldr	r2, [pc, #104]	; (800b140 <HAL_TIM_Base_Start_IT+0xb4>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d00e      	beq.n	800b0f8 <HAL_TIM_Base_Start_IT+0x6c>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a19      	ldr	r2, [pc, #100]	; (800b144 <HAL_TIM_Base_Start_IT+0xb8>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d009      	beq.n	800b0f8 <HAL_TIM_Base_Start_IT+0x6c>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a17      	ldr	r2, [pc, #92]	; (800b148 <HAL_TIM_Base_Start_IT+0xbc>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d004      	beq.n	800b0f8 <HAL_TIM_Base_Start_IT+0x6c>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a16      	ldr	r2, [pc, #88]	; (800b14c <HAL_TIM_Base_Start_IT+0xc0>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d111      	bne.n	800b11c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	f003 0307 	and.w	r3, r3, #7
 800b102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2b06      	cmp	r3, #6
 800b108:	d010      	beq.n	800b12c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f042 0201 	orr.w	r2, r2, #1
 800b118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b11a:	e007      	b.n	800b12c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f042 0201 	orr.w	r2, r2, #1
 800b12a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3714      	adds	r7, #20
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	40010000 	.word	0x40010000
 800b140:	40000400 	.word	0x40000400
 800b144:	40000800 	.word	0x40000800
 800b148:	40000c00 	.word	0x40000c00
 800b14c:	40014000 	.word	0x40014000

0800b150 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d101      	bne.n	800b162 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	e041      	b.n	800b1e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d106      	bne.n	800b17c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f839 	bl	800b1ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2202      	movs	r2, #2
 800b180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3304      	adds	r3, #4
 800b18c:	4619      	mov	r1, r3
 800b18e:	4610      	mov	r0, r2
 800b190:	f000 fba2 	bl	800b8d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b1ee:	b480      	push	{r7}
 800b1f0:	b083      	sub	sp, #12
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b1f6:	bf00      	nop
 800b1f8:	370c      	adds	r7, #12
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
	...

0800b204 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d109      	bne.n	800b228 <HAL_TIM_PWM_Start+0x24>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	bf14      	ite	ne
 800b220:	2301      	movne	r3, #1
 800b222:	2300      	moveq	r3, #0
 800b224:	b2db      	uxtb	r3, r3
 800b226:	e022      	b.n	800b26e <HAL_TIM_PWM_Start+0x6a>
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	2b04      	cmp	r3, #4
 800b22c:	d109      	bne.n	800b242 <HAL_TIM_PWM_Start+0x3e>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b234:	b2db      	uxtb	r3, r3
 800b236:	2b01      	cmp	r3, #1
 800b238:	bf14      	ite	ne
 800b23a:	2301      	movne	r3, #1
 800b23c:	2300      	moveq	r3, #0
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	e015      	b.n	800b26e <HAL_TIM_PWM_Start+0x6a>
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	2b08      	cmp	r3, #8
 800b246:	d109      	bne.n	800b25c <HAL_TIM_PWM_Start+0x58>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	2b01      	cmp	r3, #1
 800b252:	bf14      	ite	ne
 800b254:	2301      	movne	r3, #1
 800b256:	2300      	moveq	r3, #0
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	e008      	b.n	800b26e <HAL_TIM_PWM_Start+0x6a>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b262:	b2db      	uxtb	r3, r3
 800b264:	2b01      	cmp	r3, #1
 800b266:	bf14      	ite	ne
 800b268:	2301      	movne	r3, #1
 800b26a:	2300      	moveq	r3, #0
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d001      	beq.n	800b276 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	e068      	b.n	800b348 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d104      	bne.n	800b286 <HAL_TIM_PWM_Start+0x82>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2202      	movs	r2, #2
 800b280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b284:	e013      	b.n	800b2ae <HAL_TIM_PWM_Start+0xaa>
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2b04      	cmp	r3, #4
 800b28a:	d104      	bne.n	800b296 <HAL_TIM_PWM_Start+0x92>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2202      	movs	r2, #2
 800b290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b294:	e00b      	b.n	800b2ae <HAL_TIM_PWM_Start+0xaa>
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2b08      	cmp	r3, #8
 800b29a:	d104      	bne.n	800b2a6 <HAL_TIM_PWM_Start+0xa2>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2202      	movs	r2, #2
 800b2a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2a4:	e003      	b.n	800b2ae <HAL_TIM_PWM_Start+0xaa>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2202      	movs	r2, #2
 800b2aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	6839      	ldr	r1, [r7, #0]
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 fdb4 	bl	800be24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a23      	ldr	r2, [pc, #140]	; (800b350 <HAL_TIM_PWM_Start+0x14c>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d107      	bne.n	800b2d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a1d      	ldr	r2, [pc, #116]	; (800b350 <HAL_TIM_PWM_Start+0x14c>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d018      	beq.n	800b312 <HAL_TIM_PWM_Start+0x10e>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2e8:	d013      	beq.n	800b312 <HAL_TIM_PWM_Start+0x10e>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a19      	ldr	r2, [pc, #100]	; (800b354 <HAL_TIM_PWM_Start+0x150>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d00e      	beq.n	800b312 <HAL_TIM_PWM_Start+0x10e>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a17      	ldr	r2, [pc, #92]	; (800b358 <HAL_TIM_PWM_Start+0x154>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d009      	beq.n	800b312 <HAL_TIM_PWM_Start+0x10e>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a16      	ldr	r2, [pc, #88]	; (800b35c <HAL_TIM_PWM_Start+0x158>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d004      	beq.n	800b312 <HAL_TIM_PWM_Start+0x10e>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a14      	ldr	r2, [pc, #80]	; (800b360 <HAL_TIM_PWM_Start+0x15c>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d111      	bne.n	800b336 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	f003 0307 	and.w	r3, r3, #7
 800b31c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2b06      	cmp	r3, #6
 800b322:	d010      	beq.n	800b346 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f042 0201 	orr.w	r2, r2, #1
 800b332:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b334:	e007      	b.n	800b346 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f042 0201 	orr.w	r2, r2, #1
 800b344:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	40010000 	.word	0x40010000
 800b354:	40000400 	.word	0x40000400
 800b358:	40000800 	.word	0x40000800
 800b35c:	40000c00 	.word	0x40000c00
 800b360:	40014000 	.word	0x40014000

0800b364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	f003 0302 	and.w	r3, r3, #2
 800b376:	2b02      	cmp	r3, #2
 800b378:	d122      	bne.n	800b3c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	f003 0302 	and.w	r3, r3, #2
 800b384:	2b02      	cmp	r3, #2
 800b386:	d11b      	bne.n	800b3c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f06f 0202 	mvn.w	r2, #2
 800b390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2201      	movs	r2, #1
 800b396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	699b      	ldr	r3, [r3, #24]
 800b39e:	f003 0303 	and.w	r3, r3, #3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d003      	beq.n	800b3ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fa77 	bl	800b89a <HAL_TIM_IC_CaptureCallback>
 800b3ac:	e005      	b.n	800b3ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fa69 	bl	800b886 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 fa7a 	bl	800b8ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	691b      	ldr	r3, [r3, #16]
 800b3c6:	f003 0304 	and.w	r3, r3, #4
 800b3ca:	2b04      	cmp	r3, #4
 800b3cc:	d122      	bne.n	800b414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	f003 0304 	and.w	r3, r3, #4
 800b3d8:	2b04      	cmp	r3, #4
 800b3da:	d11b      	bne.n	800b414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f06f 0204 	mvn.w	r2, #4
 800b3e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2202      	movs	r2, #2
 800b3ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d003      	beq.n	800b402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 fa4d 	bl	800b89a <HAL_TIM_IC_CaptureCallback>
 800b400:	e005      	b.n	800b40e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fa3f 	bl	800b886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fa50 	bl	800b8ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	691b      	ldr	r3, [r3, #16]
 800b41a:	f003 0308 	and.w	r3, r3, #8
 800b41e:	2b08      	cmp	r3, #8
 800b420:	d122      	bne.n	800b468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	f003 0308 	and.w	r3, r3, #8
 800b42c:	2b08      	cmp	r3, #8
 800b42e:	d11b      	bne.n	800b468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f06f 0208 	mvn.w	r2, #8
 800b438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2204      	movs	r2, #4
 800b43e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	69db      	ldr	r3, [r3, #28]
 800b446:	f003 0303 	and.w	r3, r3, #3
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d003      	beq.n	800b456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 fa23 	bl	800b89a <HAL_TIM_IC_CaptureCallback>
 800b454:	e005      	b.n	800b462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fa15 	bl	800b886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 fa26 	bl	800b8ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	f003 0310 	and.w	r3, r3, #16
 800b472:	2b10      	cmp	r3, #16
 800b474:	d122      	bne.n	800b4bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	f003 0310 	and.w	r3, r3, #16
 800b480:	2b10      	cmp	r3, #16
 800b482:	d11b      	bne.n	800b4bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f06f 0210 	mvn.w	r2, #16
 800b48c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2208      	movs	r2, #8
 800b492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	69db      	ldr	r3, [r3, #28]
 800b49a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d003      	beq.n	800b4aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 f9f9 	bl	800b89a <HAL_TIM_IC_CaptureCallback>
 800b4a8:	e005      	b.n	800b4b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 f9eb 	bl	800b886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f9fc 	bl	800b8ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	f003 0301 	and.w	r3, r3, #1
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d10e      	bne.n	800b4e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	f003 0301 	and.w	r3, r3, #1
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d107      	bne.n	800b4e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f06f 0201 	mvn.w	r2, #1
 800b4e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f7f8 fdc0 	bl	8004068 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4f2:	2b80      	cmp	r3, #128	; 0x80
 800b4f4:	d10e      	bne.n	800b514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b500:	2b80      	cmp	r3, #128	; 0x80
 800b502:	d107      	bne.n	800b514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b50c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fd26 	bl	800bf60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b51e:	2b40      	cmp	r3, #64	; 0x40
 800b520:	d10e      	bne.n	800b540 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b52c:	2b40      	cmp	r3, #64	; 0x40
 800b52e:	d107      	bne.n	800b540 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f9c1 	bl	800b8c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	691b      	ldr	r3, [r3, #16]
 800b546:	f003 0320 	and.w	r3, r3, #32
 800b54a:	2b20      	cmp	r3, #32
 800b54c:	d10e      	bne.n	800b56c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	f003 0320 	and.w	r3, r3, #32
 800b558:	2b20      	cmp	r3, #32
 800b55a:	d107      	bne.n	800b56c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f06f 0220 	mvn.w	r2, #32
 800b564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 fcf0 	bl	800bf4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b56c:	bf00      	nop
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d101      	bne.n	800b592 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b58e:	2302      	movs	r3, #2
 800b590:	e0ae      	b.n	800b6f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2201      	movs	r2, #1
 800b596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2b0c      	cmp	r3, #12
 800b59e:	f200 809f 	bhi.w	800b6e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b5a2:	a201      	add	r2, pc, #4	; (adr r2, 800b5a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a8:	0800b5dd 	.word	0x0800b5dd
 800b5ac:	0800b6e1 	.word	0x0800b6e1
 800b5b0:	0800b6e1 	.word	0x0800b6e1
 800b5b4:	0800b6e1 	.word	0x0800b6e1
 800b5b8:	0800b61d 	.word	0x0800b61d
 800b5bc:	0800b6e1 	.word	0x0800b6e1
 800b5c0:	0800b6e1 	.word	0x0800b6e1
 800b5c4:	0800b6e1 	.word	0x0800b6e1
 800b5c8:	0800b65f 	.word	0x0800b65f
 800b5cc:	0800b6e1 	.word	0x0800b6e1
 800b5d0:	0800b6e1 	.word	0x0800b6e1
 800b5d4:	0800b6e1 	.word	0x0800b6e1
 800b5d8:	0800b69f 	.word	0x0800b69f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68b9      	ldr	r1, [r7, #8]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f000 f9f8 	bl	800b9d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	699a      	ldr	r2, [r3, #24]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f042 0208 	orr.w	r2, r2, #8
 800b5f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	699a      	ldr	r2, [r3, #24]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f022 0204 	bic.w	r2, r2, #4
 800b606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	6999      	ldr	r1, [r3, #24]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	691a      	ldr	r2, [r3, #16]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	430a      	orrs	r2, r1
 800b618:	619a      	str	r2, [r3, #24]
      break;
 800b61a:	e064      	b.n	800b6e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	68b9      	ldr	r1, [r7, #8]
 800b622:	4618      	mov	r0, r3
 800b624:	f000 fa3e 	bl	800baa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	699a      	ldr	r2, [r3, #24]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	699a      	ldr	r2, [r3, #24]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6999      	ldr	r1, [r3, #24]
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	021a      	lsls	r2, r3, #8
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	430a      	orrs	r2, r1
 800b65a:	619a      	str	r2, [r3, #24]
      break;
 800b65c:	e043      	b.n	800b6e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68b9      	ldr	r1, [r7, #8]
 800b664:	4618      	mov	r0, r3
 800b666:	f000 fa89 	bl	800bb7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	69da      	ldr	r2, [r3, #28]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f042 0208 	orr.w	r2, r2, #8
 800b678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	69da      	ldr	r2, [r3, #28]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f022 0204 	bic.w	r2, r2, #4
 800b688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	69d9      	ldr	r1, [r3, #28]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	691a      	ldr	r2, [r3, #16]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	430a      	orrs	r2, r1
 800b69a:	61da      	str	r2, [r3, #28]
      break;
 800b69c:	e023      	b.n	800b6e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68b9      	ldr	r1, [r7, #8]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 fad3 	bl	800bc50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	69da      	ldr	r2, [r3, #28]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	69da      	ldr	r2, [r3, #28]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	69d9      	ldr	r1, [r3, #28]
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	021a      	lsls	r2, r3, #8
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	430a      	orrs	r2, r1
 800b6dc:	61da      	str	r2, [r3, #28]
      break;
 800b6de:	e002      	b.n	800b6e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	75fb      	strb	r3, [r7, #23]
      break;
 800b6e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b702:	2300      	movs	r3, #0
 800b704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d101      	bne.n	800b714 <HAL_TIM_ConfigClockSource+0x1c>
 800b710:	2302      	movs	r3, #2
 800b712:	e0b4      	b.n	800b87e <HAL_TIM_ConfigClockSource+0x186>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2202      	movs	r2, #2
 800b720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b73a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b74c:	d03e      	beq.n	800b7cc <HAL_TIM_ConfigClockSource+0xd4>
 800b74e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b752:	f200 8087 	bhi.w	800b864 <HAL_TIM_ConfigClockSource+0x16c>
 800b756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b75a:	f000 8086 	beq.w	800b86a <HAL_TIM_ConfigClockSource+0x172>
 800b75e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b762:	d87f      	bhi.n	800b864 <HAL_TIM_ConfigClockSource+0x16c>
 800b764:	2b70      	cmp	r3, #112	; 0x70
 800b766:	d01a      	beq.n	800b79e <HAL_TIM_ConfigClockSource+0xa6>
 800b768:	2b70      	cmp	r3, #112	; 0x70
 800b76a:	d87b      	bhi.n	800b864 <HAL_TIM_ConfigClockSource+0x16c>
 800b76c:	2b60      	cmp	r3, #96	; 0x60
 800b76e:	d050      	beq.n	800b812 <HAL_TIM_ConfigClockSource+0x11a>
 800b770:	2b60      	cmp	r3, #96	; 0x60
 800b772:	d877      	bhi.n	800b864 <HAL_TIM_ConfigClockSource+0x16c>
 800b774:	2b50      	cmp	r3, #80	; 0x50
 800b776:	d03c      	beq.n	800b7f2 <HAL_TIM_ConfigClockSource+0xfa>
 800b778:	2b50      	cmp	r3, #80	; 0x50
 800b77a:	d873      	bhi.n	800b864 <HAL_TIM_ConfigClockSource+0x16c>
 800b77c:	2b40      	cmp	r3, #64	; 0x40
 800b77e:	d058      	beq.n	800b832 <HAL_TIM_ConfigClockSource+0x13a>
 800b780:	2b40      	cmp	r3, #64	; 0x40
 800b782:	d86f      	bhi.n	800b864 <HAL_TIM_ConfigClockSource+0x16c>
 800b784:	2b30      	cmp	r3, #48	; 0x30
 800b786:	d064      	beq.n	800b852 <HAL_TIM_ConfigClockSource+0x15a>
 800b788:	2b30      	cmp	r3, #48	; 0x30
 800b78a:	d86b      	bhi.n	800b864 <HAL_TIM_ConfigClockSource+0x16c>
 800b78c:	2b20      	cmp	r3, #32
 800b78e:	d060      	beq.n	800b852 <HAL_TIM_ConfigClockSource+0x15a>
 800b790:	2b20      	cmp	r3, #32
 800b792:	d867      	bhi.n	800b864 <HAL_TIM_ConfigClockSource+0x16c>
 800b794:	2b00      	cmp	r3, #0
 800b796:	d05c      	beq.n	800b852 <HAL_TIM_ConfigClockSource+0x15a>
 800b798:	2b10      	cmp	r3, #16
 800b79a:	d05a      	beq.n	800b852 <HAL_TIM_ConfigClockSource+0x15a>
 800b79c:	e062      	b.n	800b864 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6818      	ldr	r0, [r3, #0]
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	6899      	ldr	r1, [r3, #8]
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	685a      	ldr	r2, [r3, #4]
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	f000 fb19 	bl	800bde4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b7c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	609a      	str	r2, [r3, #8]
      break;
 800b7ca:	e04f      	b.n	800b86c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6818      	ldr	r0, [r3, #0]
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	6899      	ldr	r1, [r3, #8]
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	685a      	ldr	r2, [r3, #4]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	f000 fb02 	bl	800bde4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	689a      	ldr	r2, [r3, #8]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b7ee:	609a      	str	r2, [r3, #8]
      break;
 800b7f0:	e03c      	b.n	800b86c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6818      	ldr	r0, [r3, #0]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	6859      	ldr	r1, [r3, #4]
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	461a      	mov	r2, r3
 800b800:	f000 fa76 	bl	800bcf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2150      	movs	r1, #80	; 0x50
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 facf 	bl	800bdae <TIM_ITRx_SetConfig>
      break;
 800b810:	e02c      	b.n	800b86c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6818      	ldr	r0, [r3, #0]
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	6859      	ldr	r1, [r3, #4]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	461a      	mov	r2, r3
 800b820:	f000 fa95 	bl	800bd4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2160      	movs	r1, #96	; 0x60
 800b82a:	4618      	mov	r0, r3
 800b82c:	f000 fabf 	bl	800bdae <TIM_ITRx_SetConfig>
      break;
 800b830:	e01c      	b.n	800b86c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6818      	ldr	r0, [r3, #0]
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	6859      	ldr	r1, [r3, #4]
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	461a      	mov	r2, r3
 800b840:	f000 fa56 	bl	800bcf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2140      	movs	r1, #64	; 0x40
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 faaf 	bl	800bdae <TIM_ITRx_SetConfig>
      break;
 800b850:	e00c      	b.n	800b86c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4619      	mov	r1, r3
 800b85c:	4610      	mov	r0, r2
 800b85e:	f000 faa6 	bl	800bdae <TIM_ITRx_SetConfig>
      break;
 800b862:	e003      	b.n	800b86c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	73fb      	strb	r3, [r7, #15]
      break;
 800b868:	e000      	b.n	800b86c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b86a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b886:	b480      	push	{r7}
 800b888:	b083      	sub	sp, #12
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b88e:	bf00      	nop
 800b890:	370c      	adds	r7, #12
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b89a:	b480      	push	{r7}
 800b89c:	b083      	sub	sp, #12
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8a2:	bf00      	nop
 800b8a4:	370c      	adds	r7, #12
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr

0800b8ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8ae:	b480      	push	{r7}
 800b8b0:	b083      	sub	sp, #12
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8b6:	bf00      	nop
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr

0800b8c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	b083      	sub	sp, #12
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b8ca:	bf00      	nop
 800b8cc:	370c      	adds	r7, #12
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr
	...

0800b8d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a34      	ldr	r2, [pc, #208]	; (800b9bc <TIM_Base_SetConfig+0xe4>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d00f      	beq.n	800b910 <TIM_Base_SetConfig+0x38>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8f6:	d00b      	beq.n	800b910 <TIM_Base_SetConfig+0x38>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a31      	ldr	r2, [pc, #196]	; (800b9c0 <TIM_Base_SetConfig+0xe8>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d007      	beq.n	800b910 <TIM_Base_SetConfig+0x38>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a30      	ldr	r2, [pc, #192]	; (800b9c4 <TIM_Base_SetConfig+0xec>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d003      	beq.n	800b910 <TIM_Base_SetConfig+0x38>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a2f      	ldr	r2, [pc, #188]	; (800b9c8 <TIM_Base_SetConfig+0xf0>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d108      	bne.n	800b922 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	4313      	orrs	r3, r2
 800b920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a25      	ldr	r2, [pc, #148]	; (800b9bc <TIM_Base_SetConfig+0xe4>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d01b      	beq.n	800b962 <TIM_Base_SetConfig+0x8a>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b930:	d017      	beq.n	800b962 <TIM_Base_SetConfig+0x8a>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a22      	ldr	r2, [pc, #136]	; (800b9c0 <TIM_Base_SetConfig+0xe8>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d013      	beq.n	800b962 <TIM_Base_SetConfig+0x8a>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a21      	ldr	r2, [pc, #132]	; (800b9c4 <TIM_Base_SetConfig+0xec>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d00f      	beq.n	800b962 <TIM_Base_SetConfig+0x8a>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a20      	ldr	r2, [pc, #128]	; (800b9c8 <TIM_Base_SetConfig+0xf0>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d00b      	beq.n	800b962 <TIM_Base_SetConfig+0x8a>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a1f      	ldr	r2, [pc, #124]	; (800b9cc <TIM_Base_SetConfig+0xf4>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d007      	beq.n	800b962 <TIM_Base_SetConfig+0x8a>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a1e      	ldr	r2, [pc, #120]	; (800b9d0 <TIM_Base_SetConfig+0xf8>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d003      	beq.n	800b962 <TIM_Base_SetConfig+0x8a>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a1d      	ldr	r2, [pc, #116]	; (800b9d4 <TIM_Base_SetConfig+0xfc>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d108      	bne.n	800b974 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	4313      	orrs	r3, r2
 800b972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	4313      	orrs	r3, r2
 800b980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	689a      	ldr	r2, [r3, #8]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a08      	ldr	r2, [pc, #32]	; (800b9bc <TIM_Base_SetConfig+0xe4>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d103      	bne.n	800b9a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	691a      	ldr	r2, [r3, #16]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	615a      	str	r2, [r3, #20]
}
 800b9ae:	bf00      	nop
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	40010000 	.word	0x40010000
 800b9c0:	40000400 	.word	0x40000400
 800b9c4:	40000800 	.word	0x40000800
 800b9c8:	40000c00 	.word	0x40000c00
 800b9cc:	40014000 	.word	0x40014000
 800b9d0:	40014400 	.word	0x40014400
 800b9d4:	40014800 	.word	0x40014800

0800b9d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b087      	sub	sp, #28
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	f023 0201 	bic.w	r2, r3, #1
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a1b      	ldr	r3, [r3, #32]
 800b9f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	699b      	ldr	r3, [r3, #24]
 800b9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f023 0303 	bic.w	r3, r3, #3
 800ba0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	4313      	orrs	r3, r2
 800ba18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	f023 0302 	bic.w	r3, r3, #2
 800ba20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	4a1c      	ldr	r2, [pc, #112]	; (800baa0 <TIM_OC1_SetConfig+0xc8>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d10c      	bne.n	800ba4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	f023 0308 	bic.w	r3, r3, #8
 800ba3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	697a      	ldr	r2, [r7, #20]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	f023 0304 	bic.w	r3, r3, #4
 800ba4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4a13      	ldr	r2, [pc, #76]	; (800baa0 <TIM_OC1_SetConfig+0xc8>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d111      	bne.n	800ba7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	695b      	ldr	r3, [r3, #20]
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	693a      	ldr	r2, [r7, #16]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	693a      	ldr	r2, [r7, #16]
 800ba7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	685a      	ldr	r2, [r3, #4]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	621a      	str	r2, [r3, #32]
}
 800ba94:	bf00      	nop
 800ba96:	371c      	adds	r7, #28
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	40010000 	.word	0x40010000

0800baa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b087      	sub	sp, #28
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a1b      	ldr	r3, [r3, #32]
 800bab2:	f023 0210 	bic.w	r2, r3, #16
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a1b      	ldr	r3, [r3, #32]
 800babe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	699b      	ldr	r3, [r3, #24]
 800baca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	021b      	lsls	r3, r3, #8
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	f023 0320 	bic.w	r3, r3, #32
 800baee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	011b      	lsls	r3, r3, #4
 800baf6:	697a      	ldr	r2, [r7, #20]
 800baf8:	4313      	orrs	r3, r2
 800bafa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a1e      	ldr	r2, [pc, #120]	; (800bb78 <TIM_OC2_SetConfig+0xd4>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d10d      	bne.n	800bb20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	011b      	lsls	r3, r3, #4
 800bb12:	697a      	ldr	r2, [r7, #20]
 800bb14:	4313      	orrs	r3, r2
 800bb16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a15      	ldr	r2, [pc, #84]	; (800bb78 <TIM_OC2_SetConfig+0xd4>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d113      	bne.n	800bb50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	695b      	ldr	r3, [r3, #20]
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	693a      	ldr	r2, [r7, #16]
 800bb40:	4313      	orrs	r3, r2
 800bb42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	693a      	ldr	r2, [r7, #16]
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	693a      	ldr	r2, [r7, #16]
 800bb54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	685a      	ldr	r2, [r3, #4]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	697a      	ldr	r2, [r7, #20]
 800bb68:	621a      	str	r2, [r3, #32]
}
 800bb6a:	bf00      	nop
 800bb6c:	371c      	adds	r7, #28
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	40010000 	.word	0x40010000

0800bb7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b087      	sub	sp, #28
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a1b      	ldr	r3, [r3, #32]
 800bb8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6a1b      	ldr	r3, [r3, #32]
 800bb96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	69db      	ldr	r3, [r3, #28]
 800bba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f023 0303 	bic.w	r3, r3, #3
 800bbb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bbc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	021b      	lsls	r3, r3, #8
 800bbcc:	697a      	ldr	r2, [r7, #20]
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4a1d      	ldr	r2, [pc, #116]	; (800bc4c <TIM_OC3_SetConfig+0xd0>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d10d      	bne.n	800bbf6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bbe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	021b      	lsls	r3, r3, #8
 800bbe8:	697a      	ldr	r2, [r7, #20]
 800bbea:	4313      	orrs	r3, r2
 800bbec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bbf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4a14      	ldr	r2, [pc, #80]	; (800bc4c <TIM_OC3_SetConfig+0xd0>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d113      	bne.n	800bc26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	695b      	ldr	r3, [r3, #20]
 800bc12:	011b      	lsls	r3, r3, #4
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	699b      	ldr	r3, [r3, #24]
 800bc1e:	011b      	lsls	r3, r3, #4
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	693a      	ldr	r2, [r7, #16]
 800bc2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	685a      	ldr	r2, [r3, #4]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	697a      	ldr	r2, [r7, #20]
 800bc3e:	621a      	str	r2, [r3, #32]
}
 800bc40:	bf00      	nop
 800bc42:	371c      	adds	r7, #28
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	40010000 	.word	0x40010000

0800bc50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b087      	sub	sp, #28
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a1b      	ldr	r3, [r3, #32]
 800bc5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6a1b      	ldr	r3, [r3, #32]
 800bc6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	69db      	ldr	r3, [r3, #28]
 800bc76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	021b      	lsls	r3, r3, #8
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	4313      	orrs	r3, r2
 800bc92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	031b      	lsls	r3, r3, #12
 800bca2:	693a      	ldr	r2, [r7, #16]
 800bca4:	4313      	orrs	r3, r2
 800bca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a10      	ldr	r2, [pc, #64]	; (800bcec <TIM_OC4_SetConfig+0x9c>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d109      	bne.n	800bcc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bcb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	695b      	ldr	r3, [r3, #20]
 800bcbc:	019b      	lsls	r3, r3, #6
 800bcbe:	697a      	ldr	r2, [r7, #20]
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	697a      	ldr	r2, [r7, #20]
 800bcc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	685a      	ldr	r2, [r3, #4]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	693a      	ldr	r2, [r7, #16]
 800bcdc:	621a      	str	r2, [r3, #32]
}
 800bcde:	bf00      	nop
 800bce0:	371c      	adds	r7, #28
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	40010000 	.word	0x40010000

0800bcf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b087      	sub	sp, #28
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6a1b      	ldr	r3, [r3, #32]
 800bd00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6a1b      	ldr	r3, [r3, #32]
 800bd06:	f023 0201 	bic.w	r2, r3, #1
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	011b      	lsls	r3, r3, #4
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	f023 030a 	bic.w	r3, r3, #10
 800bd2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd2e:	697a      	ldr	r2, [r7, #20]
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	621a      	str	r2, [r3, #32]
}
 800bd42:	bf00      	nop
 800bd44:	371c      	adds	r7, #28
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd4e:	b480      	push	{r7}
 800bd50:	b087      	sub	sp, #28
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	60f8      	str	r0, [r7, #12]
 800bd56:	60b9      	str	r1, [r7, #8]
 800bd58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6a1b      	ldr	r3, [r3, #32]
 800bd5e:	f023 0210 	bic.w	r2, r3, #16
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	699b      	ldr	r3, [r3, #24]
 800bd6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bd78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	031b      	lsls	r3, r3, #12
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	4313      	orrs	r3, r2
 800bd82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bd8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	011b      	lsls	r3, r3, #4
 800bd90:	693a      	ldr	r2, [r7, #16]
 800bd92:	4313      	orrs	r3, r2
 800bd94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	697a      	ldr	r2, [r7, #20]
 800bd9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	693a      	ldr	r2, [r7, #16]
 800bda0:	621a      	str	r2, [r3, #32]
}
 800bda2:	bf00      	nop
 800bda4:	371c      	adds	r7, #28
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr

0800bdae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bdae:	b480      	push	{r7}
 800bdb0:	b085      	sub	sp, #20
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
 800bdb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	f043 0307 	orr.w	r3, r3, #7
 800bdd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	609a      	str	r2, [r3, #8]
}
 800bdd8:	bf00      	nop
 800bdda:	3714      	adds	r7, #20
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b087      	sub	sp, #28
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
 800bdf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	021a      	lsls	r2, r3, #8
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	431a      	orrs	r2, r3
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	4313      	orrs	r3, r2
 800be10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	697a      	ldr	r2, [r7, #20]
 800be16:	609a      	str	r2, [r3, #8]
}
 800be18:	bf00      	nop
 800be1a:	371c      	adds	r7, #28
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800be24:	b480      	push	{r7}
 800be26:	b087      	sub	sp, #28
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	f003 031f 	and.w	r3, r3, #31
 800be36:	2201      	movs	r2, #1
 800be38:	fa02 f303 	lsl.w	r3, r2, r3
 800be3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	6a1a      	ldr	r2, [r3, #32]
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	43db      	mvns	r3, r3
 800be46:	401a      	ands	r2, r3
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	6a1a      	ldr	r2, [r3, #32]
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	f003 031f 	and.w	r3, r3, #31
 800be56:	6879      	ldr	r1, [r7, #4]
 800be58:	fa01 f303 	lsl.w	r3, r1, r3
 800be5c:	431a      	orrs	r2, r3
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	621a      	str	r2, [r3, #32]
}
 800be62:	bf00      	nop
 800be64:	371c      	adds	r7, #28
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
	...

0800be70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be70:	b480      	push	{r7}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be80:	2b01      	cmp	r3, #1
 800be82:	d101      	bne.n	800be88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be84:	2302      	movs	r3, #2
 800be86:	e050      	b.n	800bf2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2202      	movs	r2, #2
 800be94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	68fa      	ldr	r2, [r7, #12]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a1c      	ldr	r2, [pc, #112]	; (800bf38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d018      	beq.n	800befe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bed4:	d013      	beq.n	800befe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a18      	ldr	r2, [pc, #96]	; (800bf3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d00e      	beq.n	800befe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a16      	ldr	r2, [pc, #88]	; (800bf40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d009      	beq.n	800befe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a15      	ldr	r2, [pc, #84]	; (800bf44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d004      	beq.n	800befe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a13      	ldr	r2, [pc, #76]	; (800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d10c      	bne.n	800bf18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	40010000 	.word	0x40010000
 800bf3c:	40000400 	.word	0x40000400
 800bf40:	40000800 	.word	0x40000800
 800bf44:	40000c00 	.word	0x40000c00
 800bf48:	40014000 	.word	0x40014000

0800bf4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf54:	bf00      	nop
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf74:	b084      	sub	sp, #16
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b084      	sub	sp, #16
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	f107 001c 	add.w	r0, r7, #28
 800bf82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d122      	bne.n	800bfd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bfa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bfb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d105      	bne.n	800bfc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f001 fb1c 	bl	800d604 <USB_CoreReset>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	73fb      	strb	r3, [r7, #15]
 800bfd0:	e01a      	b.n	800c008 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f001 fb10 	bl	800d604 <USB_CoreReset>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bfe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d106      	bne.n	800bffc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	639a      	str	r2, [r3, #56]	; 0x38
 800bffa:	e005      	b.n	800c008 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c000:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d10b      	bne.n	800c026 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	f043 0206 	orr.w	r2, r3, #6
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	f043 0220 	orr.w	r2, r3, #32
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c026:	7bfb      	ldrb	r3, [r7, #15]
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3710      	adds	r7, #16
 800c02c:	46bd      	mov	sp, r7
 800c02e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c032:	b004      	add	sp, #16
 800c034:	4770      	bx	lr
	...

0800c038 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c038:	b480      	push	{r7}
 800c03a:	b087      	sub	sp, #28
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	4613      	mov	r3, r2
 800c044:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c046:	79fb      	ldrb	r3, [r7, #7]
 800c048:	2b02      	cmp	r3, #2
 800c04a:	d165      	bne.n	800c118 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	4a41      	ldr	r2, [pc, #260]	; (800c154 <USB_SetTurnaroundTime+0x11c>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d906      	bls.n	800c062 <USB_SetTurnaroundTime+0x2a>
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	4a40      	ldr	r2, [pc, #256]	; (800c158 <USB_SetTurnaroundTime+0x120>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d202      	bcs.n	800c062 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c05c:	230f      	movs	r3, #15
 800c05e:	617b      	str	r3, [r7, #20]
 800c060:	e062      	b.n	800c128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	4a3c      	ldr	r2, [pc, #240]	; (800c158 <USB_SetTurnaroundTime+0x120>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d306      	bcc.n	800c078 <USB_SetTurnaroundTime+0x40>
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	4a3b      	ldr	r2, [pc, #236]	; (800c15c <USB_SetTurnaroundTime+0x124>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d202      	bcs.n	800c078 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c072:	230e      	movs	r3, #14
 800c074:	617b      	str	r3, [r7, #20]
 800c076:	e057      	b.n	800c128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	4a38      	ldr	r2, [pc, #224]	; (800c15c <USB_SetTurnaroundTime+0x124>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d306      	bcc.n	800c08e <USB_SetTurnaroundTime+0x56>
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	4a37      	ldr	r2, [pc, #220]	; (800c160 <USB_SetTurnaroundTime+0x128>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d202      	bcs.n	800c08e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c088:	230d      	movs	r3, #13
 800c08a:	617b      	str	r3, [r7, #20]
 800c08c:	e04c      	b.n	800c128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	4a33      	ldr	r2, [pc, #204]	; (800c160 <USB_SetTurnaroundTime+0x128>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d306      	bcc.n	800c0a4 <USB_SetTurnaroundTime+0x6c>
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	4a32      	ldr	r2, [pc, #200]	; (800c164 <USB_SetTurnaroundTime+0x12c>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d802      	bhi.n	800c0a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c09e:	230c      	movs	r3, #12
 800c0a0:	617b      	str	r3, [r7, #20]
 800c0a2:	e041      	b.n	800c128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	4a2f      	ldr	r2, [pc, #188]	; (800c164 <USB_SetTurnaroundTime+0x12c>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d906      	bls.n	800c0ba <USB_SetTurnaroundTime+0x82>
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	4a2e      	ldr	r2, [pc, #184]	; (800c168 <USB_SetTurnaroundTime+0x130>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d802      	bhi.n	800c0ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c0b4:	230b      	movs	r3, #11
 800c0b6:	617b      	str	r3, [r7, #20]
 800c0b8:	e036      	b.n	800c128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	4a2a      	ldr	r2, [pc, #168]	; (800c168 <USB_SetTurnaroundTime+0x130>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d906      	bls.n	800c0d0 <USB_SetTurnaroundTime+0x98>
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	4a29      	ldr	r2, [pc, #164]	; (800c16c <USB_SetTurnaroundTime+0x134>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d802      	bhi.n	800c0d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c0ca:	230a      	movs	r3, #10
 800c0cc:	617b      	str	r3, [r7, #20]
 800c0ce:	e02b      	b.n	800c128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	4a26      	ldr	r2, [pc, #152]	; (800c16c <USB_SetTurnaroundTime+0x134>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d906      	bls.n	800c0e6 <USB_SetTurnaroundTime+0xae>
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	4a25      	ldr	r2, [pc, #148]	; (800c170 <USB_SetTurnaroundTime+0x138>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d202      	bcs.n	800c0e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c0e0:	2309      	movs	r3, #9
 800c0e2:	617b      	str	r3, [r7, #20]
 800c0e4:	e020      	b.n	800c128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	4a21      	ldr	r2, [pc, #132]	; (800c170 <USB_SetTurnaroundTime+0x138>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d306      	bcc.n	800c0fc <USB_SetTurnaroundTime+0xc4>
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	4a20      	ldr	r2, [pc, #128]	; (800c174 <USB_SetTurnaroundTime+0x13c>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d802      	bhi.n	800c0fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c0f6:	2308      	movs	r3, #8
 800c0f8:	617b      	str	r3, [r7, #20]
 800c0fa:	e015      	b.n	800c128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	4a1d      	ldr	r2, [pc, #116]	; (800c174 <USB_SetTurnaroundTime+0x13c>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d906      	bls.n	800c112 <USB_SetTurnaroundTime+0xda>
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	4a1c      	ldr	r2, [pc, #112]	; (800c178 <USB_SetTurnaroundTime+0x140>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d202      	bcs.n	800c112 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c10c:	2307      	movs	r3, #7
 800c10e:	617b      	str	r3, [r7, #20]
 800c110:	e00a      	b.n	800c128 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c112:	2306      	movs	r3, #6
 800c114:	617b      	str	r3, [r7, #20]
 800c116:	e007      	b.n	800c128 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c118:	79fb      	ldrb	r3, [r7, #7]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d102      	bne.n	800c124 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c11e:	2309      	movs	r3, #9
 800c120:	617b      	str	r3, [r7, #20]
 800c122:	e001      	b.n	800c128 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c124:	2309      	movs	r3, #9
 800c126:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	68da      	ldr	r2, [r3, #12]
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	029b      	lsls	r3, r3, #10
 800c13c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c140:	431a      	orrs	r2, r3
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	371c      	adds	r7, #28
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr
 800c154:	00d8acbf 	.word	0x00d8acbf
 800c158:	00e4e1c0 	.word	0x00e4e1c0
 800c15c:	00f42400 	.word	0x00f42400
 800c160:	01067380 	.word	0x01067380
 800c164:	011a499f 	.word	0x011a499f
 800c168:	01312cff 	.word	0x01312cff
 800c16c:	014ca43f 	.word	0x014ca43f
 800c170:	016e3600 	.word	0x016e3600
 800c174:	01a6ab1f 	.word	0x01a6ab1f
 800c178:	01e84800 	.word	0x01e84800

0800c17c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	f043 0201 	orr.w	r2, r3, #1
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c19e:	b480      	push	{r7}
 800c1a0:	b083      	sub	sp, #12
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	f023 0201 	bic.w	r2, r3, #1
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	370c      	adds	r7, #12
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c1dc:	78fb      	ldrb	r3, [r7, #3]
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d115      	bne.n	800c20e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c1ee:	2001      	movs	r0, #1
 800c1f0:	f7f9 f9e4 	bl	80055bc <HAL_Delay>
      ms++;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f001 f972 	bl	800d4e4 <USB_GetMode>
 800c200:	4603      	mov	r3, r0
 800c202:	2b01      	cmp	r3, #1
 800c204:	d01e      	beq.n	800c244 <USB_SetCurrentMode+0x84>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2b31      	cmp	r3, #49	; 0x31
 800c20a:	d9f0      	bls.n	800c1ee <USB_SetCurrentMode+0x2e>
 800c20c:	e01a      	b.n	800c244 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c20e:	78fb      	ldrb	r3, [r7, #3]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d115      	bne.n	800c240 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c220:	2001      	movs	r0, #1
 800c222:	f7f9 f9cb 	bl	80055bc <HAL_Delay>
      ms++;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	3301      	adds	r3, #1
 800c22a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f001 f959 	bl	800d4e4 <USB_GetMode>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d005      	beq.n	800c244 <USB_SetCurrentMode+0x84>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2b31      	cmp	r3, #49	; 0x31
 800c23c:	d9f0      	bls.n	800c220 <USB_SetCurrentMode+0x60>
 800c23e:	e001      	b.n	800c244 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	e005      	b.n	800c250 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b32      	cmp	r3, #50	; 0x32
 800c248:	d101      	bne.n	800c24e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c24a:	2301      	movs	r3, #1
 800c24c:	e000      	b.n	800c250 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c258:	b084      	sub	sp, #16
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b086      	sub	sp, #24
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
 800c262:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c272:	2300      	movs	r3, #0
 800c274:	613b      	str	r3, [r7, #16]
 800c276:	e009      	b.n	800c28c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	3340      	adds	r3, #64	; 0x40
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	4413      	add	r3, r2
 800c282:	2200      	movs	r2, #0
 800c284:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	3301      	adds	r3, #1
 800c28a:	613b      	str	r3, [r7, #16]
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	2b0e      	cmp	r3, #14
 800c290:	d9f2      	bls.n	800c278 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c294:	2b00      	cmp	r3, #0
 800c296:	d11c      	bne.n	800c2d2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2a6:	f043 0302 	orr.w	r3, r3, #2
 800c2aa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	639a      	str	r2, [r3, #56]	; 0x38
 800c2d0:	e00b      	b.n	800c2ea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c304:	461a      	mov	r2, r3
 800c306:	680b      	ldr	r3, [r1, #0]
 800c308:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d10c      	bne.n	800c32a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c312:	2b00      	cmp	r3, #0
 800c314:	d104      	bne.n	800c320 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c316:	2100      	movs	r1, #0
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 f945 	bl	800c5a8 <USB_SetDevSpeed>
 800c31e:	e008      	b.n	800c332 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c320:	2101      	movs	r1, #1
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f940 	bl	800c5a8 <USB_SetDevSpeed>
 800c328:	e003      	b.n	800c332 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c32a:	2103      	movs	r1, #3
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 f93b 	bl	800c5a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c332:	2110      	movs	r1, #16
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 f8f3 	bl	800c520 <USB_FlushTxFifo>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d001      	beq.n	800c344 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 f90f 	bl	800c568 <USB_FlushRxFifo>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d001      	beq.n	800c354 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800c350:	2301      	movs	r3, #1
 800c352:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c35a:	461a      	mov	r2, r3
 800c35c:	2300      	movs	r3, #0
 800c35e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c366:	461a      	mov	r2, r3
 800c368:	2300      	movs	r3, #0
 800c36a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c372:	461a      	mov	r2, r3
 800c374:	2300      	movs	r3, #0
 800c376:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c378:	2300      	movs	r3, #0
 800c37a:	613b      	str	r3, [r7, #16]
 800c37c:	e043      	b.n	800c406 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	015a      	lsls	r2, r3, #5
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	4413      	add	r3, r2
 800c386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c394:	d118      	bne.n	800c3c8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10a      	bne.n	800c3b2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	015a      	lsls	r2, r3, #5
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c3ae:	6013      	str	r3, [r2, #0]
 800c3b0:	e013      	b.n	800c3da <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	015a      	lsls	r2, r3, #5
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3be:	461a      	mov	r2, r3
 800c3c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c3c4:	6013      	str	r3, [r2, #0]
 800c3c6:	e008      	b.n	800c3da <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	015a      	lsls	r2, r3, #5
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	015a      	lsls	r2, r3, #5
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	015a      	lsls	r2, r3, #5
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c3fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	3301      	adds	r3, #1
 800c404:	613b      	str	r3, [r7, #16]
 800c406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d3b7      	bcc.n	800c37e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c40e:	2300      	movs	r3, #0
 800c410:	613b      	str	r3, [r7, #16]
 800c412:	e043      	b.n	800c49c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	015a      	lsls	r2, r3, #5
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	4413      	add	r3, r2
 800c41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c42a:	d118      	bne.n	800c45e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10a      	bne.n	800c448 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	015a      	lsls	r2, r3, #5
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	4413      	add	r3, r2
 800c43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c43e:	461a      	mov	r2, r3
 800c440:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c444:	6013      	str	r3, [r2, #0]
 800c446:	e013      	b.n	800c470 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	015a      	lsls	r2, r3, #5
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	4413      	add	r3, r2
 800c450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c454:	461a      	mov	r2, r3
 800c456:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c45a:	6013      	str	r3, [r2, #0]
 800c45c:	e008      	b.n	800c470 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	015a      	lsls	r2, r3, #5
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	4413      	add	r3, r2
 800c466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c46a:	461a      	mov	r2, r3
 800c46c:	2300      	movs	r3, #0
 800c46e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	015a      	lsls	r2, r3, #5
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	4413      	add	r3, r2
 800c478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c47c:	461a      	mov	r2, r3
 800c47e:	2300      	movs	r3, #0
 800c480:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	015a      	lsls	r2, r3, #5
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	4413      	add	r3, r2
 800c48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c48e:	461a      	mov	r2, r3
 800c490:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c494:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	3301      	adds	r3, #1
 800c49a:	613b      	str	r3, [r7, #16]
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	693a      	ldr	r2, [r7, #16]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d3b7      	bcc.n	800c414 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4aa:	691b      	ldr	r3, [r3, #16]
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c4c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d105      	bne.n	800c4d8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	699b      	ldr	r3, [r3, #24]
 800c4d0:	f043 0210 	orr.w	r2, r3, #16
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	699a      	ldr	r2, [r3, #24]
 800c4dc:	4b0f      	ldr	r3, [pc, #60]	; (800c51c <USB_DevInit+0x2c4>)
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d005      	beq.n	800c4f6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	699b      	ldr	r3, [r3, #24]
 800c4ee:	f043 0208 	orr.w	r2, r3, #8
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d107      	bne.n	800c50c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	699b      	ldr	r3, [r3, #24]
 800c500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c504:	f043 0304 	orr.w	r3, r3, #4
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c50c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3718      	adds	r7, #24
 800c512:	46bd      	mov	sp, r7
 800c514:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c518:	b004      	add	sp, #16
 800c51a:	4770      	bx	lr
 800c51c:	803c3800 	.word	0x803c3800

0800c520 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c52a:	2300      	movs	r3, #0
 800c52c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	019b      	lsls	r3, r3, #6
 800c532:	f043 0220 	orr.w	r2, r3, #32
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3301      	adds	r3, #1
 800c53e:	60fb      	str	r3, [r7, #12]
 800c540:	4a08      	ldr	r2, [pc, #32]	; (800c564 <USB_FlushTxFifo+0x44>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d901      	bls.n	800c54a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800c546:	2303      	movs	r3, #3
 800c548:	e006      	b.n	800c558 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	691b      	ldr	r3, [r3, #16]
 800c54e:	f003 0320 	and.w	r3, r3, #32
 800c552:	2b20      	cmp	r3, #32
 800c554:	d0f1      	beq.n	800c53a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c556:	2300      	movs	r3, #0
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3714      	adds	r7, #20
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr
 800c564:	00030d40 	.word	0x00030d40

0800c568 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c570:	2300      	movs	r3, #0
 800c572:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2210      	movs	r2, #16
 800c578:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3301      	adds	r3, #1
 800c57e:	60fb      	str	r3, [r7, #12]
 800c580:	4a08      	ldr	r2, [pc, #32]	; (800c5a4 <USB_FlushRxFifo+0x3c>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d901      	bls.n	800c58a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800c586:	2303      	movs	r3, #3
 800c588:	e006      	b.n	800c598 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	f003 0310 	and.w	r3, r3, #16
 800c592:	2b10      	cmp	r3, #16
 800c594:	d0f1      	beq.n	800c57a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c596:	2300      	movs	r3, #0
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3714      	adds	r7, #20
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr
 800c5a4:	00030d40 	.word	0x00030d40

0800c5a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b085      	sub	sp, #20
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	78fb      	ldrb	r3, [r7, #3]
 800c5c2:	68f9      	ldr	r1, [r7, #12]
 800c5c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3714      	adds	r7, #20
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr

0800c5da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c5da:	b480      	push	{r7}
 800c5dc:	b087      	sub	sp, #28
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5ec:	689b      	ldr	r3, [r3, #8]
 800c5ee:	f003 0306 	and.w	r3, r3, #6
 800c5f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d102      	bne.n	800c600 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	75fb      	strb	r3, [r7, #23]
 800c5fe:	e00a      	b.n	800c616 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2b02      	cmp	r3, #2
 800c604:	d002      	beq.n	800c60c <USB_GetDevSpeed+0x32>
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2b06      	cmp	r3, #6
 800c60a:	d102      	bne.n	800c612 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c60c:	2302      	movs	r3, #2
 800c60e:	75fb      	strb	r3, [r7, #23]
 800c610:	e001      	b.n	800c616 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c612:	230f      	movs	r3, #15
 800c614:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c616:	7dfb      	ldrb	r3, [r7, #23]
}
 800c618:	4618      	mov	r0, r3
 800c61a:	371c      	adds	r7, #28
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c624:	b480      	push	{r7}
 800c626:	b085      	sub	sp, #20
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	785b      	ldrb	r3, [r3, #1]
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d13a      	bne.n	800c6b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c646:	69da      	ldr	r2, [r3, #28]
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	f003 030f 	and.w	r3, r3, #15
 800c650:	2101      	movs	r1, #1
 800c652:	fa01 f303 	lsl.w	r3, r1, r3
 800c656:	b29b      	uxth	r3, r3
 800c658:	68f9      	ldr	r1, [r7, #12]
 800c65a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c65e:	4313      	orrs	r3, r2
 800c660:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	015a      	lsls	r2, r3, #5
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	4413      	add	r3, r2
 800c66a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c674:	2b00      	cmp	r3, #0
 800c676:	d155      	bne.n	800c724 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	015a      	lsls	r2, r3, #5
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	4413      	add	r3, r2
 800c680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	78db      	ldrb	r3, [r3, #3]
 800c692:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c694:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	059b      	lsls	r3, r3, #22
 800c69a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c69c:	4313      	orrs	r3, r2
 800c69e:	68ba      	ldr	r2, [r7, #8]
 800c6a0:	0151      	lsls	r1, r2, #5
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	440a      	add	r2, r1
 800c6a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6b2:	6013      	str	r3, [r2, #0]
 800c6b4:	e036      	b.n	800c724 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6bc:	69da      	ldr	r2, [r3, #28]
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	f003 030f 	and.w	r3, r3, #15
 800c6c6:	2101      	movs	r1, #1
 800c6c8:	fa01 f303 	lsl.w	r3, r1, r3
 800c6cc:	041b      	lsls	r3, r3, #16
 800c6ce:	68f9      	ldr	r1, [r7, #12]
 800c6d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	015a      	lsls	r2, r3, #5
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	4413      	add	r3, r2
 800c6e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d11a      	bne.n	800c724 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	015a      	lsls	r2, r3, #5
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	78db      	ldrb	r3, [r3, #3]
 800c708:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c70a:	430b      	orrs	r3, r1
 800c70c:	4313      	orrs	r3, r2
 800c70e:	68ba      	ldr	r2, [r7, #8]
 800c710:	0151      	lsls	r1, r2, #5
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	440a      	add	r2, r1
 800c716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c71a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c71e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c722:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	3714      	adds	r7, #20
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr
	...

0800c734 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	785b      	ldrb	r3, [r3, #1]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d161      	bne.n	800c814 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	015a      	lsls	r2, r3, #5
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	4413      	add	r3, r2
 800c758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c766:	d11f      	bne.n	800c7a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	015a      	lsls	r2, r3, #5
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	4413      	add	r3, r2
 800c770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	68ba      	ldr	r2, [r7, #8]
 800c778:	0151      	lsls	r1, r2, #5
 800c77a:	68fa      	ldr	r2, [r7, #12]
 800c77c:	440a      	add	r2, r1
 800c77e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c782:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c786:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	015a      	lsls	r2, r3, #5
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	4413      	add	r3, r2
 800c790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	68ba      	ldr	r2, [r7, #8]
 800c798:	0151      	lsls	r1, r2, #5
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	440a      	add	r2, r1
 800c79e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	f003 030f 	and.w	r3, r3, #15
 800c7b8:	2101      	movs	r1, #1
 800c7ba:	fa01 f303 	lsl.w	r3, r1, r3
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	43db      	mvns	r3, r3
 800c7c2:	68f9      	ldr	r1, [r7, #12]
 800c7c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7c8:	4013      	ands	r3, r2
 800c7ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7d2:	69da      	ldr	r2, [r3, #28]
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	f003 030f 	and.w	r3, r3, #15
 800c7dc:	2101      	movs	r1, #1
 800c7de:	fa01 f303 	lsl.w	r3, r1, r3
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	43db      	mvns	r3, r3
 800c7e6:	68f9      	ldr	r1, [r7, #12]
 800c7e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7ec:	4013      	ands	r3, r2
 800c7ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	015a      	lsls	r2, r3, #5
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	0159      	lsls	r1, r3, #5
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	440b      	add	r3, r1
 800c806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c80a:	4619      	mov	r1, r3
 800c80c:	4b35      	ldr	r3, [pc, #212]	; (800c8e4 <USB_DeactivateEndpoint+0x1b0>)
 800c80e:	4013      	ands	r3, r2
 800c810:	600b      	str	r3, [r1, #0]
 800c812:	e060      	b.n	800c8d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	015a      	lsls	r2, r3, #5
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	4413      	add	r3, r2
 800c81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c826:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c82a:	d11f      	bne.n	800c86c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	015a      	lsls	r2, r3, #5
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	4413      	add	r3, r2
 800c834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	68ba      	ldr	r2, [r7, #8]
 800c83c:	0151      	lsls	r1, r2, #5
 800c83e:	68fa      	ldr	r2, [r7, #12]
 800c840:	440a      	add	r2, r1
 800c842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c846:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c84a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	015a      	lsls	r2, r3, #5
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	4413      	add	r3, r2
 800c854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	68ba      	ldr	r2, [r7, #8]
 800c85c:	0151      	lsls	r1, r2, #5
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	440a      	add	r2, r1
 800c862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c866:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c86a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	f003 030f 	and.w	r3, r3, #15
 800c87c:	2101      	movs	r1, #1
 800c87e:	fa01 f303 	lsl.w	r3, r1, r3
 800c882:	041b      	lsls	r3, r3, #16
 800c884:	43db      	mvns	r3, r3
 800c886:	68f9      	ldr	r1, [r7, #12]
 800c888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c88c:	4013      	ands	r3, r2
 800c88e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c896:	69da      	ldr	r2, [r3, #28]
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	f003 030f 	and.w	r3, r3, #15
 800c8a0:	2101      	movs	r1, #1
 800c8a2:	fa01 f303 	lsl.w	r3, r1, r3
 800c8a6:	041b      	lsls	r3, r3, #16
 800c8a8:	43db      	mvns	r3, r3
 800c8aa:	68f9      	ldr	r1, [r7, #12]
 800c8ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8b0:	4013      	ands	r3, r2
 800c8b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	015a      	lsls	r2, r3, #5
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	0159      	lsls	r1, r3, #5
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	440b      	add	r3, r1
 800c8ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4b05      	ldr	r3, [pc, #20]	; (800c8e8 <USB_DeactivateEndpoint+0x1b4>)
 800c8d2:	4013      	ands	r3, r2
 800c8d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c8d6:	2300      	movs	r3, #0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3714      	adds	r7, #20
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr
 800c8e4:	ec337800 	.word	0xec337800
 800c8e8:	eff37800 	.word	0xeff37800

0800c8ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b08a      	sub	sp, #40	; 0x28
 800c8f0:	af02      	add	r7, sp, #8
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	4613      	mov	r3, r2
 800c8f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	785b      	ldrb	r3, [r3, #1]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	f040 815c 	bne.w	800cbc6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	695b      	ldr	r3, [r3, #20]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d132      	bne.n	800c97c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	015a      	lsls	r2, r3, #5
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	4413      	add	r3, r2
 800c91e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c922:	691b      	ldr	r3, [r3, #16]
 800c924:	69ba      	ldr	r2, [r7, #24]
 800c926:	0151      	lsls	r1, r2, #5
 800c928:	69fa      	ldr	r2, [r7, #28]
 800c92a:	440a      	add	r2, r1
 800c92c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c930:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c934:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c938:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c93a:	69bb      	ldr	r3, [r7, #24]
 800c93c:	015a      	lsls	r2, r3, #5
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	4413      	add	r3, r2
 800c942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c946:	691b      	ldr	r3, [r3, #16]
 800c948:	69ba      	ldr	r2, [r7, #24]
 800c94a:	0151      	lsls	r1, r2, #5
 800c94c:	69fa      	ldr	r2, [r7, #28]
 800c94e:	440a      	add	r2, r1
 800c950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c954:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c958:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	015a      	lsls	r2, r3, #5
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	4413      	add	r3, r2
 800c962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c966:	691b      	ldr	r3, [r3, #16]
 800c968:	69ba      	ldr	r2, [r7, #24]
 800c96a:	0151      	lsls	r1, r2, #5
 800c96c:	69fa      	ldr	r2, [r7, #28]
 800c96e:	440a      	add	r2, r1
 800c970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c974:	0cdb      	lsrs	r3, r3, #19
 800c976:	04db      	lsls	r3, r3, #19
 800c978:	6113      	str	r3, [r2, #16]
 800c97a:	e074      	b.n	800ca66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	015a      	lsls	r2, r3, #5
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	4413      	add	r3, r2
 800c984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	69ba      	ldr	r2, [r7, #24]
 800c98c:	0151      	lsls	r1, r2, #5
 800c98e:	69fa      	ldr	r2, [r7, #28]
 800c990:	440a      	add	r2, r1
 800c992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c996:	0cdb      	lsrs	r3, r3, #19
 800c998:	04db      	lsls	r3, r3, #19
 800c99a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	015a      	lsls	r2, r3, #5
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a8:	691b      	ldr	r3, [r3, #16]
 800c9aa:	69ba      	ldr	r2, [r7, #24]
 800c9ac:	0151      	lsls	r1, r2, #5
 800c9ae:	69fa      	ldr	r2, [r7, #28]
 800c9b0:	440a      	add	r2, r1
 800c9b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c9ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c9be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	015a      	lsls	r2, r3, #5
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9cc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	6959      	ldr	r1, [r3, #20]
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	440b      	add	r3, r1
 800c9d8:	1e59      	subs	r1, r3, #1
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	689b      	ldr	r3, [r3, #8]
 800c9de:	fbb1 f3f3 	udiv	r3, r1, r3
 800c9e2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c9e4:	4b9d      	ldr	r3, [pc, #628]	; (800cc5c <USB_EPStartXfer+0x370>)
 800c9e6:	400b      	ands	r3, r1
 800c9e8:	69b9      	ldr	r1, [r7, #24]
 800c9ea:	0148      	lsls	r0, r1, #5
 800c9ec:	69f9      	ldr	r1, [r7, #28]
 800c9ee:	4401      	add	r1, r0
 800c9f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c9f8:	69bb      	ldr	r3, [r7, #24]
 800c9fa:	015a      	lsls	r2, r3, #5
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	4413      	add	r3, r2
 800ca00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca04:	691a      	ldr	r2, [r3, #16]
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	695b      	ldr	r3, [r3, #20]
 800ca0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca0e:	69b9      	ldr	r1, [r7, #24]
 800ca10:	0148      	lsls	r0, r1, #5
 800ca12:	69f9      	ldr	r1, [r7, #28]
 800ca14:	4401      	add	r1, r0
 800ca16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	78db      	ldrb	r3, [r3, #3]
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d11f      	bne.n	800ca66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	015a      	lsls	r2, r3, #5
 800ca2a:	69fb      	ldr	r3, [r7, #28]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca32:	691b      	ldr	r3, [r3, #16]
 800ca34:	69ba      	ldr	r2, [r7, #24]
 800ca36:	0151      	lsls	r1, r2, #5
 800ca38:	69fa      	ldr	r2, [r7, #28]
 800ca3a:	440a      	add	r2, r1
 800ca3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca40:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ca44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	015a      	lsls	r2, r3, #5
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	4413      	add	r3, r2
 800ca4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	69ba      	ldr	r2, [r7, #24]
 800ca56:	0151      	lsls	r1, r2, #5
 800ca58:	69fa      	ldr	r2, [r7, #28]
 800ca5a:	440a      	add	r2, r1
 800ca5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ca66:	79fb      	ldrb	r3, [r7, #7]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d14b      	bne.n	800cb04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	691b      	ldr	r3, [r3, #16]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d009      	beq.n	800ca88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	015a      	lsls	r2, r3, #5
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca80:	461a      	mov	r2, r3
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	691b      	ldr	r3, [r3, #16]
 800ca86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	78db      	ldrb	r3, [r3, #3]
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d128      	bne.n	800cae2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d110      	bne.n	800cac2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	015a      	lsls	r2, r3, #5
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	4413      	add	r3, r2
 800caa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	69ba      	ldr	r2, [r7, #24]
 800cab0:	0151      	lsls	r1, r2, #5
 800cab2:	69fa      	ldr	r2, [r7, #28]
 800cab4:	440a      	add	r2, r1
 800cab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cabe:	6013      	str	r3, [r2, #0]
 800cac0:	e00f      	b.n	800cae2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	015a      	lsls	r2, r3, #5
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	4413      	add	r3, r2
 800caca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	69ba      	ldr	r2, [r7, #24]
 800cad2:	0151      	lsls	r1, r2, #5
 800cad4:	69fa      	ldr	r2, [r7, #28]
 800cad6:	440a      	add	r2, r1
 800cad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cadc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cae0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cae2:	69bb      	ldr	r3, [r7, #24]
 800cae4:	015a      	lsls	r2, r3, #5
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	4413      	add	r3, r2
 800caea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	69ba      	ldr	r2, [r7, #24]
 800caf2:	0151      	lsls	r1, r2, #5
 800caf4:	69fa      	ldr	r2, [r7, #28]
 800caf6:	440a      	add	r2, r1
 800caf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cafc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb00:	6013      	str	r3, [r2, #0]
 800cb02:	e12f      	b.n	800cd64 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	015a      	lsls	r2, r3, #5
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	69ba      	ldr	r2, [r7, #24]
 800cb14:	0151      	lsls	r1, r2, #5
 800cb16:	69fa      	ldr	r2, [r7, #28]
 800cb18:	440a      	add	r2, r1
 800cb1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	78db      	ldrb	r3, [r3, #3]
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d015      	beq.n	800cb58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	695b      	ldr	r3, [r3, #20]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	f000 8117 	beq.w	800cd64 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	f003 030f 	and.w	r3, r3, #15
 800cb46:	2101      	movs	r1, #1
 800cb48:	fa01 f303 	lsl.w	r3, r1, r3
 800cb4c:	69f9      	ldr	r1, [r7, #28]
 800cb4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb52:	4313      	orrs	r3, r2
 800cb54:	634b      	str	r3, [r1, #52]	; 0x34
 800cb56:	e105      	b.n	800cd64 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d110      	bne.n	800cb8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	015a      	lsls	r2, r3, #5
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	4413      	add	r3, r2
 800cb70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	69ba      	ldr	r2, [r7, #24]
 800cb78:	0151      	lsls	r1, r2, #5
 800cb7a:	69fa      	ldr	r2, [r7, #28]
 800cb7c:	440a      	add	r2, r1
 800cb7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cb86:	6013      	str	r3, [r2, #0]
 800cb88:	e00f      	b.n	800cbaa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	015a      	lsls	r2, r3, #5
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	4413      	add	r3, r2
 800cb92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	69ba      	ldr	r2, [r7, #24]
 800cb9a:	0151      	lsls	r1, r2, #5
 800cb9c:	69fa      	ldr	r2, [r7, #28]
 800cb9e:	440a      	add	r2, r1
 800cba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cba8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	68d9      	ldr	r1, [r3, #12]
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	781a      	ldrb	r2, [r3, #0]
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	695b      	ldr	r3, [r3, #20]
 800cbb6:	b298      	uxth	r0, r3
 800cbb8:	79fb      	ldrb	r3, [r7, #7]
 800cbba:	9300      	str	r3, [sp, #0]
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f000 fa2b 	bl	800d01a <USB_WritePacket>
 800cbc4:	e0ce      	b.n	800cd64 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	015a      	lsls	r2, r3, #5
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	4413      	add	r3, r2
 800cbce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd2:	691b      	ldr	r3, [r3, #16]
 800cbd4:	69ba      	ldr	r2, [r7, #24]
 800cbd6:	0151      	lsls	r1, r2, #5
 800cbd8:	69fa      	ldr	r2, [r7, #28]
 800cbda:	440a      	add	r2, r1
 800cbdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbe0:	0cdb      	lsrs	r3, r3, #19
 800cbe2:	04db      	lsls	r3, r3, #19
 800cbe4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	015a      	lsls	r2, r3, #5
 800cbea:	69fb      	ldr	r3, [r7, #28]
 800cbec:	4413      	add	r3, r2
 800cbee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf2:	691b      	ldr	r3, [r3, #16]
 800cbf4:	69ba      	ldr	r2, [r7, #24]
 800cbf6:	0151      	lsls	r1, r2, #5
 800cbf8:	69fa      	ldr	r2, [r7, #28]
 800cbfa:	440a      	add	r2, r1
 800cbfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cc04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cc08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	695b      	ldr	r3, [r3, #20]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d126      	bne.n	800cc60 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	015a      	lsls	r2, r3, #5
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	4413      	add	r3, r2
 800cc1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc1e:	691a      	ldr	r2, [r3, #16]
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	689b      	ldr	r3, [r3, #8]
 800cc24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc28:	69b9      	ldr	r1, [r7, #24]
 800cc2a:	0148      	lsls	r0, r1, #5
 800cc2c:	69f9      	ldr	r1, [r7, #28]
 800cc2e:	4401      	add	r1, r0
 800cc30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cc34:	4313      	orrs	r3, r2
 800cc36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	015a      	lsls	r2, r3, #5
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	4413      	add	r3, r2
 800cc40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc44:	691b      	ldr	r3, [r3, #16]
 800cc46:	69ba      	ldr	r2, [r7, #24]
 800cc48:	0151      	lsls	r1, r2, #5
 800cc4a:	69fa      	ldr	r2, [r7, #28]
 800cc4c:	440a      	add	r2, r1
 800cc4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc56:	6113      	str	r3, [r2, #16]
 800cc58:	e036      	b.n	800ccc8 <USB_EPStartXfer+0x3dc>
 800cc5a:	bf00      	nop
 800cc5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	695a      	ldr	r2, [r3, #20]
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	4413      	add	r3, r2
 800cc6a:	1e5a      	subs	r2, r3, #1
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc74:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	015a      	lsls	r2, r3, #5
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc82:	691a      	ldr	r2, [r3, #16]
 800cc84:	8afb      	ldrh	r3, [r7, #22]
 800cc86:	04d9      	lsls	r1, r3, #19
 800cc88:	4b39      	ldr	r3, [pc, #228]	; (800cd70 <USB_EPStartXfer+0x484>)
 800cc8a:	400b      	ands	r3, r1
 800cc8c:	69b9      	ldr	r1, [r7, #24]
 800cc8e:	0148      	lsls	r0, r1, #5
 800cc90:	69f9      	ldr	r1, [r7, #28]
 800cc92:	4401      	add	r1, r0
 800cc94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	015a      	lsls	r2, r3, #5
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	4413      	add	r3, r2
 800cca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cca8:	691a      	ldr	r2, [r3, #16]
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	8af9      	ldrh	r1, [r7, #22]
 800ccb0:	fb01 f303 	mul.w	r3, r1, r3
 800ccb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ccb8:	69b9      	ldr	r1, [r7, #24]
 800ccba:	0148      	lsls	r0, r1, #5
 800ccbc:	69f9      	ldr	r1, [r7, #28]
 800ccbe:	4401      	add	r1, r0
 800ccc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ccc8:	79fb      	ldrb	r3, [r7, #7]
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d10d      	bne.n	800ccea <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d009      	beq.n	800ccea <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	68d9      	ldr	r1, [r3, #12]
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	015a      	lsls	r2, r3, #5
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	4413      	add	r3, r2
 800cce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cce6:	460a      	mov	r2, r1
 800cce8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	78db      	ldrb	r3, [r3, #3]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d128      	bne.n	800cd44 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d110      	bne.n	800cd24 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	015a      	lsls	r2, r3, #5
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	4413      	add	r3, r2
 800cd0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	69ba      	ldr	r2, [r7, #24]
 800cd12:	0151      	lsls	r1, r2, #5
 800cd14:	69fa      	ldr	r2, [r7, #28]
 800cd16:	440a      	add	r2, r1
 800cd18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cd20:	6013      	str	r3, [r2, #0]
 800cd22:	e00f      	b.n	800cd44 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	015a      	lsls	r2, r3, #5
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	69ba      	ldr	r2, [r7, #24]
 800cd34:	0151      	lsls	r1, r2, #5
 800cd36:	69fa      	ldr	r2, [r7, #28]
 800cd38:	440a      	add	r2, r1
 800cd3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	015a      	lsls	r2, r3, #5
 800cd48:	69fb      	ldr	r3, [r7, #28]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	69ba      	ldr	r2, [r7, #24]
 800cd54:	0151      	lsls	r1, r2, #5
 800cd56:	69fa      	ldr	r2, [r7, #28]
 800cd58:	440a      	add	r2, r1
 800cd5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3720      	adds	r7, #32
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	1ff80000 	.word	0x1ff80000

0800cd74 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b087      	sub	sp, #28
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	785b      	ldrb	r3, [r3, #1]
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	f040 80cd 	bne.w	800cf30 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	695b      	ldr	r3, [r3, #20]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d132      	bne.n	800ce04 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	015a      	lsls	r2, r3, #5
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	4413      	add	r3, r2
 800cda6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	693a      	ldr	r2, [r7, #16]
 800cdae:	0151      	lsls	r1, r2, #5
 800cdb0:	697a      	ldr	r2, [r7, #20]
 800cdb2:	440a      	add	r2, r1
 800cdb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cdbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cdc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	015a      	lsls	r2, r3, #5
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	4413      	add	r3, r2
 800cdca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	693a      	ldr	r2, [r7, #16]
 800cdd2:	0151      	lsls	r1, r2, #5
 800cdd4:	697a      	ldr	r2, [r7, #20]
 800cdd6:	440a      	add	r2, r1
 800cdd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cddc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cde0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	015a      	lsls	r2, r3, #5
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	4413      	add	r3, r2
 800cdea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdee:	691b      	ldr	r3, [r3, #16]
 800cdf0:	693a      	ldr	r2, [r7, #16]
 800cdf2:	0151      	lsls	r1, r2, #5
 800cdf4:	697a      	ldr	r2, [r7, #20]
 800cdf6:	440a      	add	r2, r1
 800cdf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdfc:	0cdb      	lsrs	r3, r3, #19
 800cdfe:	04db      	lsls	r3, r3, #19
 800ce00:	6113      	str	r3, [r2, #16]
 800ce02:	e04e      	b.n	800cea2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	015a      	lsls	r2, r3, #5
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce10:	691b      	ldr	r3, [r3, #16]
 800ce12:	693a      	ldr	r2, [r7, #16]
 800ce14:	0151      	lsls	r1, r2, #5
 800ce16:	697a      	ldr	r2, [r7, #20]
 800ce18:	440a      	add	r2, r1
 800ce1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce1e:	0cdb      	lsrs	r3, r3, #19
 800ce20:	04db      	lsls	r3, r3, #19
 800ce22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	015a      	lsls	r2, r3, #5
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	693a      	ldr	r2, [r7, #16]
 800ce34:	0151      	lsls	r1, r2, #5
 800ce36:	697a      	ldr	r2, [r7, #20]
 800ce38:	440a      	add	r2, r1
 800ce3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ce42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ce46:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	695a      	ldr	r2, [r3, #20]
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d903      	bls.n	800ce5c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	689a      	ldr	r2, [r3, #8]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	015a      	lsls	r2, r3, #5
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	4413      	add	r3, r2
 800ce64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	693a      	ldr	r2, [r7, #16]
 800ce6c:	0151      	lsls	r1, r2, #5
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	440a      	add	r2, r1
 800ce72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	015a      	lsls	r2, r3, #5
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	4413      	add	r3, r2
 800ce84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce88:	691a      	ldr	r2, [r3, #16]
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	695b      	ldr	r3, [r3, #20]
 800ce8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce92:	6939      	ldr	r1, [r7, #16]
 800ce94:	0148      	lsls	r0, r1, #5
 800ce96:	6979      	ldr	r1, [r7, #20]
 800ce98:	4401      	add	r1, r0
 800ce9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cea2:	79fb      	ldrb	r3, [r7, #7]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d11e      	bne.n	800cee6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	691b      	ldr	r3, [r3, #16]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d009      	beq.n	800cec4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	015a      	lsls	r2, r3, #5
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	4413      	add	r3, r2
 800ceb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cebc:	461a      	mov	r2, r3
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	691b      	ldr	r3, [r3, #16]
 800cec2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	015a      	lsls	r2, r3, #5
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	4413      	add	r3, r2
 800cecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	693a      	ldr	r2, [r7, #16]
 800ced4:	0151      	lsls	r1, r2, #5
 800ced6:	697a      	ldr	r2, [r7, #20]
 800ced8:	440a      	add	r2, r1
 800ceda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cede:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cee2:	6013      	str	r3, [r2, #0]
 800cee4:	e092      	b.n	800d00c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	015a      	lsls	r2, r3, #5
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	4413      	add	r3, r2
 800ceee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	693a      	ldr	r2, [r7, #16]
 800cef6:	0151      	lsls	r1, r2, #5
 800cef8:	697a      	ldr	r2, [r7, #20]
 800cefa:	440a      	add	r2, r1
 800cefc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf04:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	695b      	ldr	r3, [r3, #20]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d07e      	beq.n	800d00c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	f003 030f 	and.w	r3, r3, #15
 800cf1e:	2101      	movs	r1, #1
 800cf20:	fa01 f303 	lsl.w	r3, r1, r3
 800cf24:	6979      	ldr	r1, [r7, #20]
 800cf26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	634b      	str	r3, [r1, #52]	; 0x34
 800cf2e:	e06d      	b.n	800d00c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	015a      	lsls	r2, r3, #5
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	4413      	add	r3, r2
 800cf38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	693a      	ldr	r2, [r7, #16]
 800cf40:	0151      	lsls	r1, r2, #5
 800cf42:	697a      	ldr	r2, [r7, #20]
 800cf44:	440a      	add	r2, r1
 800cf46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf4a:	0cdb      	lsrs	r3, r3, #19
 800cf4c:	04db      	lsls	r3, r3, #19
 800cf4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	015a      	lsls	r2, r3, #5
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	4413      	add	r3, r2
 800cf58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf5c:	691b      	ldr	r3, [r3, #16]
 800cf5e:	693a      	ldr	r2, [r7, #16]
 800cf60:	0151      	lsls	r1, r2, #5
 800cf62:	697a      	ldr	r2, [r7, #20]
 800cf64:	440a      	add	r2, r1
 800cf66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cf6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cf72:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	695b      	ldr	r3, [r3, #20]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d003      	beq.n	800cf84 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	689a      	ldr	r2, [r3, #8]
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	015a      	lsls	r2, r3, #5
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf90:	691b      	ldr	r3, [r3, #16]
 800cf92:	693a      	ldr	r2, [r7, #16]
 800cf94:	0151      	lsls	r1, r2, #5
 800cf96:	697a      	ldr	r2, [r7, #20]
 800cf98:	440a      	add	r2, r1
 800cf9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cfa2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	015a      	lsls	r2, r3, #5
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	4413      	add	r3, r2
 800cfac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfb0:	691a      	ldr	r2, [r3, #16]
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cfba:	6939      	ldr	r1, [r7, #16]
 800cfbc:	0148      	lsls	r0, r1, #5
 800cfbe:	6979      	ldr	r1, [r7, #20]
 800cfc0:	4401      	add	r1, r0
 800cfc2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cfca:	79fb      	ldrb	r3, [r7, #7]
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d10d      	bne.n	800cfec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d009      	beq.n	800cfec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	68d9      	ldr	r1, [r3, #12]
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	015a      	lsls	r2, r3, #5
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfe8:	460a      	mov	r2, r1
 800cfea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	015a      	lsls	r2, r3, #5
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	4413      	add	r3, r2
 800cff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	693a      	ldr	r2, [r7, #16]
 800cffc:	0151      	lsls	r1, r2, #5
 800cffe:	697a      	ldr	r2, [r7, #20]
 800d000:	440a      	add	r2, r1
 800d002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d006:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d00a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	371c      	adds	r7, #28
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d01a:	b480      	push	{r7}
 800d01c:	b089      	sub	sp, #36	; 0x24
 800d01e:	af00      	add	r7, sp, #0
 800d020:	60f8      	str	r0, [r7, #12]
 800d022:	60b9      	str	r1, [r7, #8]
 800d024:	4611      	mov	r1, r2
 800d026:	461a      	mov	r2, r3
 800d028:	460b      	mov	r3, r1
 800d02a:	71fb      	strb	r3, [r7, #7]
 800d02c:	4613      	mov	r3, r2
 800d02e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d038:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d123      	bne.n	800d088 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d040:	88bb      	ldrh	r3, [r7, #4]
 800d042:	3303      	adds	r3, #3
 800d044:	089b      	lsrs	r3, r3, #2
 800d046:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d048:	2300      	movs	r3, #0
 800d04a:	61bb      	str	r3, [r7, #24]
 800d04c:	e018      	b.n	800d080 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d04e:	79fb      	ldrb	r3, [r7, #7]
 800d050:	031a      	lsls	r2, r3, #12
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	4413      	add	r3, r2
 800d056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d05a:	461a      	mov	r2, r3
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d062:	69fb      	ldr	r3, [r7, #28]
 800d064:	3301      	adds	r3, #1
 800d066:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	3301      	adds	r3, #1
 800d06c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	3301      	adds	r3, #1
 800d072:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d074:	69fb      	ldr	r3, [r7, #28]
 800d076:	3301      	adds	r3, #1
 800d078:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	3301      	adds	r3, #1
 800d07e:	61bb      	str	r3, [r7, #24]
 800d080:	69ba      	ldr	r2, [r7, #24]
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	429a      	cmp	r2, r3
 800d086:	d3e2      	bcc.n	800d04e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d088:	2300      	movs	r3, #0
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3724      	adds	r7, #36	; 0x24
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr

0800d096 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d096:	b480      	push	{r7}
 800d098:	b08b      	sub	sp, #44	; 0x2c
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	60f8      	str	r0, [r7, #12]
 800d09e:	60b9      	str	r1, [r7, #8]
 800d0a0:	4613      	mov	r3, r2
 800d0a2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d0ac:	88fb      	ldrh	r3, [r7, #6]
 800d0ae:	089b      	lsrs	r3, r3, #2
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d0b4:	88fb      	ldrh	r3, [r7, #6]
 800d0b6:	f003 0303 	and.w	r3, r3, #3
 800d0ba:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d0bc:	2300      	movs	r3, #0
 800d0be:	623b      	str	r3, [r7, #32]
 800d0c0:	e014      	b.n	800d0ec <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0cc:	601a      	str	r2, [r3, #0]
    pDest++;
 800d0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0dc:	3301      	adds	r3, #1
 800d0de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d0e6:	6a3b      	ldr	r3, [r7, #32]
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	623b      	str	r3, [r7, #32]
 800d0ec:	6a3a      	ldr	r2, [r7, #32]
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d3e6      	bcc.n	800d0c2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d0f4:	8bfb      	ldrh	r3, [r7, #30]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d01e      	beq.n	800d138 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d104:	461a      	mov	r2, r3
 800d106:	f107 0310 	add.w	r3, r7, #16
 800d10a:	6812      	ldr	r2, [r2, #0]
 800d10c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d10e:	693a      	ldr	r2, [r7, #16]
 800d110:	6a3b      	ldr	r3, [r7, #32]
 800d112:	b2db      	uxtb	r3, r3
 800d114:	00db      	lsls	r3, r3, #3
 800d116:	fa22 f303 	lsr.w	r3, r2, r3
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11e:	701a      	strb	r2, [r3, #0]
      i++;
 800d120:	6a3b      	ldr	r3, [r7, #32]
 800d122:	3301      	adds	r3, #1
 800d124:	623b      	str	r3, [r7, #32]
      pDest++;
 800d126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d128:	3301      	adds	r3, #1
 800d12a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d12c:	8bfb      	ldrh	r3, [r7, #30]
 800d12e:	3b01      	subs	r3, #1
 800d130:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d132:	8bfb      	ldrh	r3, [r7, #30]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d1ea      	bne.n	800d10e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	372c      	adds	r7, #44	; 0x2c
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr

0800d146 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d146:	b480      	push	{r7}
 800d148:	b085      	sub	sp, #20
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
 800d14e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	785b      	ldrb	r3, [r3, #1]
 800d15e:	2b01      	cmp	r3, #1
 800d160:	d12c      	bne.n	800d1bc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	015a      	lsls	r2, r3, #5
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	4413      	add	r3, r2
 800d16a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2b00      	cmp	r3, #0
 800d172:	db12      	blt.n	800d19a <USB_EPSetStall+0x54>
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00f      	beq.n	800d19a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	015a      	lsls	r2, r3, #5
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	4413      	add	r3, r2
 800d182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	68ba      	ldr	r2, [r7, #8]
 800d18a:	0151      	lsls	r1, r2, #5
 800d18c:	68fa      	ldr	r2, [r7, #12]
 800d18e:	440a      	add	r2, r1
 800d190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d194:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d198:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	015a      	lsls	r2, r3, #5
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	68ba      	ldr	r2, [r7, #8]
 800d1aa:	0151      	lsls	r1, r2, #5
 800d1ac:	68fa      	ldr	r2, [r7, #12]
 800d1ae:	440a      	add	r2, r1
 800d1b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d1b8:	6013      	str	r3, [r2, #0]
 800d1ba:	e02b      	b.n	800d214 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	015a      	lsls	r2, r3, #5
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	db12      	blt.n	800d1f4 <USB_EPSetStall+0xae>
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d00f      	beq.n	800d1f4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	015a      	lsls	r2, r3, #5
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	4413      	add	r3, r2
 800d1dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	68ba      	ldr	r2, [r7, #8]
 800d1e4:	0151      	lsls	r1, r2, #5
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	440a      	add	r2, r1
 800d1ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d1f2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	015a      	lsls	r2, r3, #5
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	68ba      	ldr	r2, [r7, #8]
 800d204:	0151      	lsls	r1, r2, #5
 800d206:	68fa      	ldr	r2, [r7, #12]
 800d208:	440a      	add	r2, r1
 800d20a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d20e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d212:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d214:	2300      	movs	r3, #0
}
 800d216:	4618      	mov	r0, r3
 800d218:	3714      	adds	r7, #20
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr

0800d222 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d222:	b480      	push	{r7}
 800d224:	b085      	sub	sp, #20
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
 800d22a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	785b      	ldrb	r3, [r3, #1]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d128      	bne.n	800d290 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	015a      	lsls	r2, r3, #5
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	4413      	add	r3, r2
 800d246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	68ba      	ldr	r2, [r7, #8]
 800d24e:	0151      	lsls	r1, r2, #5
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	440a      	add	r2, r1
 800d254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d258:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d25c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	78db      	ldrb	r3, [r3, #3]
 800d262:	2b03      	cmp	r3, #3
 800d264:	d003      	beq.n	800d26e <USB_EPClearStall+0x4c>
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	78db      	ldrb	r3, [r3, #3]
 800d26a:	2b02      	cmp	r3, #2
 800d26c:	d138      	bne.n	800d2e0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	015a      	lsls	r2, r3, #5
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	4413      	add	r3, r2
 800d276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68ba      	ldr	r2, [r7, #8]
 800d27e:	0151      	lsls	r1, r2, #5
 800d280:	68fa      	ldr	r2, [r7, #12]
 800d282:	440a      	add	r2, r1
 800d284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d28c:	6013      	str	r3, [r2, #0]
 800d28e:	e027      	b.n	800d2e0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	015a      	lsls	r2, r3, #5
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	4413      	add	r3, r2
 800d298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	68ba      	ldr	r2, [r7, #8]
 800d2a0:	0151      	lsls	r1, r2, #5
 800d2a2:	68fa      	ldr	r2, [r7, #12]
 800d2a4:	440a      	add	r2, r1
 800d2a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d2ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	78db      	ldrb	r3, [r3, #3]
 800d2b4:	2b03      	cmp	r3, #3
 800d2b6:	d003      	beq.n	800d2c0 <USB_EPClearStall+0x9e>
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	78db      	ldrb	r3, [r3, #3]
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d10f      	bne.n	800d2e0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	015a      	lsls	r2, r3, #5
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	0151      	lsls	r1, r2, #5
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	440a      	add	r2, r1
 800d2d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2de:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d2e0:	2300      	movs	r3, #0
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3714      	adds	r7, #20
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr

0800d2ee <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d2ee:	b480      	push	{r7}
 800d2f0:	b085      	sub	sp, #20
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	68fa      	ldr	r2, [r7, #12]
 800d308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d30c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d310:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	78fb      	ldrb	r3, [r7, #3]
 800d31c:	011b      	lsls	r3, r3, #4
 800d31e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d322:	68f9      	ldr	r1, [r7, #12]
 800d324:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d328:	4313      	orrs	r3, r2
 800d32a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3714      	adds	r7, #20
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr

0800d33a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d33a:	b480      	push	{r7}
 800d33c:	b085      	sub	sp, #20
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	68fa      	ldr	r2, [r7, #12]
 800d350:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d354:	f023 0303 	bic.w	r3, r3, #3
 800d358:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	68fa      	ldr	r2, [r7, #12]
 800d364:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d368:	f023 0302 	bic.w	r3, r3, #2
 800d36c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3714      	adds	r7, #20
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	68fa      	ldr	r2, [r7, #12]
 800d392:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d396:	f023 0303 	bic.w	r3, r3, #3
 800d39a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3aa:	f043 0302 	orr.w	r3, r3, #2
 800d3ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d3b0:	2300      	movs	r3, #0
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3714      	adds	r7, #20
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr

0800d3be <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d3be:	b480      	push	{r7}
 800d3c0:	b085      	sub	sp, #20
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	695b      	ldr	r3, [r3, #20]
 800d3ca:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	699b      	ldr	r3, [r3, #24]
 800d3d0:	68fa      	ldr	r2, [r7, #12]
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3714      	adds	r7, #20
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b085      	sub	sp, #20
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3f6:	699b      	ldr	r3, [r3, #24]
 800d3f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d400:	69db      	ldr	r3, [r3, #28]
 800d402:	68ba      	ldr	r2, [r7, #8]
 800d404:	4013      	ands	r3, r2
 800d406:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	0c1b      	lsrs	r3, r3, #16
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3714      	adds	r7, #20
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d418:	b480      	push	{r7}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d42a:	699b      	ldr	r3, [r3, #24]
 800d42c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d434:	69db      	ldr	r3, [r3, #28]
 800d436:	68ba      	ldr	r2, [r7, #8]
 800d438:	4013      	ands	r3, r2
 800d43a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	b29b      	uxth	r3, r3
}
 800d440:	4618      	mov	r0, r3
 800d442:	3714      	adds	r7, #20
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr

0800d44c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b085      	sub	sp, #20
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	460b      	mov	r3, r1
 800d456:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d45c:	78fb      	ldrb	r3, [r7, #3]
 800d45e:	015a      	lsls	r2, r3, #5
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	4413      	add	r3, r2
 800d464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d472:	695b      	ldr	r3, [r3, #20]
 800d474:	68ba      	ldr	r2, [r7, #8]
 800d476:	4013      	ands	r3, r2
 800d478:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d47a:	68bb      	ldr	r3, [r7, #8]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3714      	adds	r7, #20
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d488:	b480      	push	{r7}
 800d48a:	b087      	sub	sp, #28
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	460b      	mov	r3, r1
 800d492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4aa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d4ac:	78fb      	ldrb	r3, [r7, #3]
 800d4ae:	f003 030f 	and.w	r3, r3, #15
 800d4b2:	68fa      	ldr	r2, [r7, #12]
 800d4b4:	fa22 f303 	lsr.w	r3, r2, r3
 800d4b8:	01db      	lsls	r3, r3, #7
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	693a      	ldr	r2, [r7, #16]
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d4c2:	78fb      	ldrb	r3, [r7, #3]
 800d4c4:	015a      	lsls	r2, r3, #5
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ce:	689b      	ldr	r3, [r3, #8]
 800d4d0:	693a      	ldr	r2, [r7, #16]
 800d4d2:	4013      	ands	r3, r2
 800d4d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d4d6:	68bb      	ldr	r3, [r7, #8]
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	371c      	adds	r7, #28
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	695b      	ldr	r3, [r3, #20]
 800d4f0:	f003 0301 	and.w	r3, r3, #1
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d51a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d51e:	f023 0307 	bic.w	r3, r3, #7
 800d522:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d536:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d538:	2300      	movs	r3, #0
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3714      	adds	r7, #20
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr
	...

0800d548 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d548:	b480      	push	{r7}
 800d54a:	b087      	sub	sp, #28
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	460b      	mov	r3, r1
 800d552:	607a      	str	r2, [r7, #4]
 800d554:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	333c      	adds	r3, #60	; 0x3c
 800d55e:	3304      	adds	r3, #4
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	4a26      	ldr	r2, [pc, #152]	; (800d600 <USB_EP0_OutStart+0xb8>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d90a      	bls.n	800d582 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d57c:	d101      	bne.n	800d582 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d57e:	2300      	movs	r3, #0
 800d580:	e037      	b.n	800d5f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d588:	461a      	mov	r2, r3
 800d58a:	2300      	movs	r3, #0
 800d58c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	697a      	ldr	r2, [r7, #20]
 800d598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d59c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d5a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5a8:	691b      	ldr	r3, [r3, #16]
 800d5aa:	697a      	ldr	r2, [r7, #20]
 800d5ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5b0:	f043 0318 	orr.w	r3, r3, #24
 800d5b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5bc:	691b      	ldr	r3, [r3, #16]
 800d5be:	697a      	ldr	r2, [r7, #20]
 800d5c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d5c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d5ca:	7afb      	ldrb	r3, [r7, #11]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d10f      	bne.n	800d5f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	697a      	ldr	r2, [r7, #20]
 800d5e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d5ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d5f0:	2300      	movs	r3, #0
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	371c      	adds	r7, #28
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	4f54300a 	.word	0x4f54300a

0800d604 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d604:	b480      	push	{r7}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d60c:	2300      	movs	r3, #0
 800d60e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	3301      	adds	r3, #1
 800d614:	60fb      	str	r3, [r7, #12]
 800d616:	4a13      	ldr	r2, [pc, #76]	; (800d664 <USB_CoreReset+0x60>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d901      	bls.n	800d620 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800d61c:	2303      	movs	r3, #3
 800d61e:	e01a      	b.n	800d656 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	691b      	ldr	r3, [r3, #16]
 800d624:	2b00      	cmp	r3, #0
 800d626:	daf3      	bge.n	800d610 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d628:	2300      	movs	r3, #0
 800d62a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	f043 0201 	orr.w	r2, r3, #1
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	3301      	adds	r3, #1
 800d63c:	60fb      	str	r3, [r7, #12]
 800d63e:	4a09      	ldr	r2, [pc, #36]	; (800d664 <USB_CoreReset+0x60>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d901      	bls.n	800d648 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800d644:	2303      	movs	r3, #3
 800d646:	e006      	b.n	800d656 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	691b      	ldr	r3, [r3, #16]
 800d64c:	f003 0301 	and.w	r3, r3, #1
 800d650:	2b01      	cmp	r3, #1
 800d652:	d0f1      	beq.n	800d638 <USB_CoreReset+0x34>

  return HAL_OK;
 800d654:	2300      	movs	r3, #0
}
 800d656:	4618      	mov	r0, r3
 800d658:	3714      	adds	r7, #20
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr
 800d662:	bf00      	nop
 800d664:	00030d40 	.word	0x00030d40

0800d668 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	460b      	mov	r3, r1
 800d672:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d674:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d678:	f004 fef2 	bl	8012460 <USBD_static_malloc>
 800d67c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d105      	bne.n	800d690 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d68c:	2302      	movs	r3, #2
 800d68e:	e066      	b.n	800d75e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	68fa      	ldr	r2, [r7, #12]
 800d694:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	7c1b      	ldrb	r3, [r3, #16]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d119      	bne.n	800d6d4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d6a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6a4:	2202      	movs	r2, #2
 800d6a6:	2181      	movs	r1, #129	; 0x81
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f004 fdb6 	bl	801221a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d6b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6b8:	2202      	movs	r2, #2
 800d6ba:	2101      	movs	r1, #1
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f004 fdac 	bl	801221a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2210      	movs	r2, #16
 800d6ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d6d2:	e016      	b.n	800d702 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d6d4:	2340      	movs	r3, #64	; 0x40
 800d6d6:	2202      	movs	r2, #2
 800d6d8:	2181      	movs	r1, #129	; 0x81
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f004 fd9d 	bl	801221a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d6e6:	2340      	movs	r3, #64	; 0x40
 800d6e8:	2202      	movs	r2, #2
 800d6ea:	2101      	movs	r1, #1
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f004 fd94 	bl	801221a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2210      	movs	r2, #16
 800d6fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d702:	2308      	movs	r3, #8
 800d704:	2203      	movs	r2, #3
 800d706:	2182      	movs	r1, #130	; 0x82
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f004 fd86 	bl	801221a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2201      	movs	r2, #1
 800d712:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2200      	movs	r2, #0
 800d724:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2200      	movs	r2, #0
 800d72c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	7c1b      	ldrb	r3, [r3, #16]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d109      	bne.n	800d74c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d73e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d742:	2101      	movs	r1, #1
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f004 fe57 	bl	80123f8 <USBD_LL_PrepareReceive>
 800d74a:	e007      	b.n	800d75c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d752:	2340      	movs	r3, #64	; 0x40
 800d754:	2101      	movs	r1, #1
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f004 fe4e 	bl	80123f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d75c:	2300      	movs	r3, #0
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b082      	sub	sp, #8
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	460b      	mov	r3, r1
 800d770:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d772:	2181      	movs	r1, #129	; 0x81
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f004 fd76 	bl	8012266 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d780:	2101      	movs	r1, #1
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f004 fd6f 	bl	8012266 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d790:	2182      	movs	r1, #130	; 0x82
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f004 fd67 	bl	8012266 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00e      	beq.n	800d7d0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f004 fe5a 	bl	801247c <USBD_static_free>
    pdev->pClassData = NULL;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d7d0:	2300      	movs	r3, #0
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3708      	adds	r7, #8
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
	...

0800d7dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b086      	sub	sp, #24
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d101      	bne.n	800d804 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d800:	2303      	movs	r3, #3
 800d802:	e0af      	b.n	800d964 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d03f      	beq.n	800d890 <USBD_CDC_Setup+0xb4>
 800d810:	2b20      	cmp	r3, #32
 800d812:	f040 809f 	bne.w	800d954 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	88db      	ldrh	r3, [r3, #6]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d02e      	beq.n	800d87c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	b25b      	sxtb	r3, r3
 800d824:	2b00      	cmp	r3, #0
 800d826:	da16      	bge.n	800d856 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d82e:	689b      	ldr	r3, [r3, #8]
 800d830:	683a      	ldr	r2, [r7, #0]
 800d832:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d834:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d836:	683a      	ldr	r2, [r7, #0]
 800d838:	88d2      	ldrh	r2, [r2, #6]
 800d83a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	88db      	ldrh	r3, [r3, #6]
 800d840:	2b07      	cmp	r3, #7
 800d842:	bf28      	it	cs
 800d844:	2307      	movcs	r3, #7
 800d846:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	89fa      	ldrh	r2, [r7, #14]
 800d84c:	4619      	mov	r1, r3
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f001 fb19 	bl	800ee86 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d854:	e085      	b.n	800d962 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	785a      	ldrb	r2, [r3, #1]
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	88db      	ldrh	r3, [r3, #6]
 800d864:	b2da      	uxtb	r2, r3
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d86c:	6939      	ldr	r1, [r7, #16]
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	88db      	ldrh	r3, [r3, #6]
 800d872:	461a      	mov	r2, r3
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f001 fb32 	bl	800eede <USBD_CtlPrepareRx>
      break;
 800d87a:	e072      	b.n	800d962 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d882:	689b      	ldr	r3, [r3, #8]
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	7850      	ldrb	r0, [r2, #1]
 800d888:	2200      	movs	r2, #0
 800d88a:	6839      	ldr	r1, [r7, #0]
 800d88c:	4798      	blx	r3
      break;
 800d88e:	e068      	b.n	800d962 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	785b      	ldrb	r3, [r3, #1]
 800d894:	2b0b      	cmp	r3, #11
 800d896:	d852      	bhi.n	800d93e <USBD_CDC_Setup+0x162>
 800d898:	a201      	add	r2, pc, #4	; (adr r2, 800d8a0 <USBD_CDC_Setup+0xc4>)
 800d89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d89e:	bf00      	nop
 800d8a0:	0800d8d1 	.word	0x0800d8d1
 800d8a4:	0800d94d 	.word	0x0800d94d
 800d8a8:	0800d93f 	.word	0x0800d93f
 800d8ac:	0800d93f 	.word	0x0800d93f
 800d8b0:	0800d93f 	.word	0x0800d93f
 800d8b4:	0800d93f 	.word	0x0800d93f
 800d8b8:	0800d93f 	.word	0x0800d93f
 800d8bc:	0800d93f 	.word	0x0800d93f
 800d8c0:	0800d93f 	.word	0x0800d93f
 800d8c4:	0800d93f 	.word	0x0800d93f
 800d8c8:	0800d8fb 	.word	0x0800d8fb
 800d8cc:	0800d925 	.word	0x0800d925
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	2b03      	cmp	r3, #3
 800d8da:	d107      	bne.n	800d8ec <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d8dc:	f107 030a 	add.w	r3, r7, #10
 800d8e0:	2202      	movs	r2, #2
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f001 face 	bl	800ee86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d8ea:	e032      	b.n	800d952 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d8ec:	6839      	ldr	r1, [r7, #0]
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f001 fa58 	bl	800eda4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d8f4:	2303      	movs	r3, #3
 800d8f6:	75fb      	strb	r3, [r7, #23]
          break;
 800d8f8:	e02b      	b.n	800d952 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d900:	b2db      	uxtb	r3, r3
 800d902:	2b03      	cmp	r3, #3
 800d904:	d107      	bne.n	800d916 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d906:	f107 030d 	add.w	r3, r7, #13
 800d90a:	2201      	movs	r2, #1
 800d90c:	4619      	mov	r1, r3
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f001 fab9 	bl	800ee86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d914:	e01d      	b.n	800d952 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d916:	6839      	ldr	r1, [r7, #0]
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f001 fa43 	bl	800eda4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d91e:	2303      	movs	r3, #3
 800d920:	75fb      	strb	r3, [r7, #23]
          break;
 800d922:	e016      	b.n	800d952 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	2b03      	cmp	r3, #3
 800d92e:	d00f      	beq.n	800d950 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d930:	6839      	ldr	r1, [r7, #0]
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f001 fa36 	bl	800eda4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d938:	2303      	movs	r3, #3
 800d93a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d93c:	e008      	b.n	800d950 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d93e:	6839      	ldr	r1, [r7, #0]
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f001 fa2f 	bl	800eda4 <USBD_CtlError>
          ret = USBD_FAIL;
 800d946:	2303      	movs	r3, #3
 800d948:	75fb      	strb	r3, [r7, #23]
          break;
 800d94a:	e002      	b.n	800d952 <USBD_CDC_Setup+0x176>
          break;
 800d94c:	bf00      	nop
 800d94e:	e008      	b.n	800d962 <USBD_CDC_Setup+0x186>
          break;
 800d950:	bf00      	nop
      }
      break;
 800d952:	e006      	b.n	800d962 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d954:	6839      	ldr	r1, [r7, #0]
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f001 fa24 	bl	800eda4 <USBD_CtlError>
      ret = USBD_FAIL;
 800d95c:	2303      	movs	r3, #3
 800d95e:	75fb      	strb	r3, [r7, #23]
      break;
 800d960:	bf00      	nop
  }

  return (uint8_t)ret;
 800d962:	7dfb      	ldrb	r3, [r7, #23]
}
 800d964:	4618      	mov	r0, r3
 800d966:	3718      	adds	r7, #24
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	460b      	mov	r3, r1
 800d976:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d97e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d986:	2b00      	cmp	r3, #0
 800d988:	d101      	bne.n	800d98e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d98a:	2303      	movs	r3, #3
 800d98c:	e04f      	b.n	800da2e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d994:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d996:	78fa      	ldrb	r2, [r7, #3]
 800d998:	6879      	ldr	r1, [r7, #4]
 800d99a:	4613      	mov	r3, r2
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	4413      	add	r3, r2
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	440b      	add	r3, r1
 800d9a4:	3318      	adds	r3, #24
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d029      	beq.n	800da00 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d9ac:	78fa      	ldrb	r2, [r7, #3]
 800d9ae:	6879      	ldr	r1, [r7, #4]
 800d9b0:	4613      	mov	r3, r2
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	4413      	add	r3, r2
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	440b      	add	r3, r1
 800d9ba:	3318      	adds	r3, #24
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	78f9      	ldrb	r1, [r7, #3]
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	00db      	lsls	r3, r3, #3
 800d9c6:	1a5b      	subs	r3, r3, r1
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	4403      	add	r3, r0
 800d9cc:	3344      	adds	r3, #68	; 0x44
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	fbb2 f1f3 	udiv	r1, r2, r3
 800d9d4:	fb03 f301 	mul.w	r3, r3, r1
 800d9d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d110      	bne.n	800da00 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d9de:	78fa      	ldrb	r2, [r7, #3]
 800d9e0:	6879      	ldr	r1, [r7, #4]
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	4413      	add	r3, r2
 800d9e8:	009b      	lsls	r3, r3, #2
 800d9ea:	440b      	add	r3, r1
 800d9ec:	3318      	adds	r3, #24
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d9f2:	78f9      	ldrb	r1, [r7, #3]
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f004 fcdc 	bl	80123b6 <USBD_LL_Transmit>
 800d9fe:	e015      	b.n	800da2c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	2200      	movs	r2, #0
 800da04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da0e:	691b      	ldr	r3, [r3, #16]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00b      	beq.n	800da2c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da1a:	691b      	ldr	r3, [r3, #16]
 800da1c:	68ba      	ldr	r2, [r7, #8]
 800da1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800da22:	68ba      	ldr	r2, [r7, #8]
 800da24:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800da28:	78fa      	ldrb	r2, [r7, #3]
 800da2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800da2c:	2300      	movs	r3, #0
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3710      	adds	r7, #16
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800da36:	b580      	push	{r7, lr}
 800da38:	b084      	sub	sp, #16
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
 800da3e:	460b      	mov	r3, r1
 800da40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da50:	2b00      	cmp	r3, #0
 800da52:	d101      	bne.n	800da58 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800da54:	2303      	movs	r3, #3
 800da56:	e015      	b.n	800da84 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800da58:	78fb      	ldrb	r3, [r7, #3]
 800da5a:	4619      	mov	r1, r3
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f004 fcec 	bl	801243a <USBD_LL_GetRxDataSize>
 800da62:	4602      	mov	r2, r0
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da70:	68db      	ldr	r3, [r3, #12]
 800da72:	68fa      	ldr	r2, [r7, #12]
 800da74:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800da7e:	4611      	mov	r1, r2
 800da80:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3710      	adds	r7, #16
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d101      	bne.n	800daa6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800daa2:	2303      	movs	r3, #3
 800daa4:	e01b      	b.n	800dade <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d015      	beq.n	800dadc <USBD_CDC_EP0_RxReady+0x50>
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800dab6:	2bff      	cmp	r3, #255	; 0xff
 800dab8:	d010      	beq.n	800dadc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dac0:	689b      	ldr	r3, [r3, #8]
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800dac8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800daca:	68fa      	ldr	r2, [r7, #12]
 800dacc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dad0:	b292      	uxth	r2, r2
 800dad2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	22ff      	movs	r2, #255	; 0xff
 800dad8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800dadc:	2300      	movs	r3, #0
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3710      	adds	r7, #16
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
	...

0800dae8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2243      	movs	r2, #67	; 0x43
 800daf4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800daf6:	4b03      	ldr	r3, [pc, #12]	; (800db04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr
 800db04:	200000a0 	.word	0x200000a0

0800db08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800db08:	b480      	push	{r7}
 800db0a:	b083      	sub	sp, #12
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2243      	movs	r2, #67	; 0x43
 800db14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800db16:	4b03      	ldr	r3, [pc, #12]	; (800db24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800db18:	4618      	mov	r0, r3
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr
 800db24:	2000005c 	.word	0x2000005c

0800db28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2243      	movs	r2, #67	; 0x43
 800db34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800db36:	4b03      	ldr	r3, [pc, #12]	; (800db44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800db38:	4618      	mov	r0, r3
 800db3a:	370c      	adds	r7, #12
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr
 800db44:	200000e4 	.word	0x200000e4

0800db48 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	220a      	movs	r2, #10
 800db54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800db56:	4b03      	ldr	r3, [pc, #12]	; (800db64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800db58:	4618      	mov	r0, r3
 800db5a:	370c      	adds	r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr
 800db64:	20000018 	.word	0x20000018

0800db68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d101      	bne.n	800db7c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800db78:	2303      	movs	r3, #3
 800db7a:	e004      	b.n	800db86 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	683a      	ldr	r2, [r7, #0]
 800db80:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800db84:	2300      	movs	r3, #0
}
 800db86:	4618      	mov	r0, r3
 800db88:	370c      	adds	r7, #12
 800db8a:	46bd      	mov	sp, r7
 800db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db90:	4770      	bx	lr

0800db92 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800db92:	b480      	push	{r7}
 800db94:	b087      	sub	sp, #28
 800db96:	af00      	add	r7, sp, #0
 800db98:	60f8      	str	r0, [r7, #12]
 800db9a:	60b9      	str	r1, [r7, #8]
 800db9c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dba4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d101      	bne.n	800dbb0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dbac:	2303      	movs	r3, #3
 800dbae:	e008      	b.n	800dbc2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	68ba      	ldr	r2, [r7, #8]
 800dbb4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dbc0:	2300      	movs	r3, #0
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	371c      	adds	r7, #28
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr

0800dbce <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dbce:	b480      	push	{r7}
 800dbd0:	b085      	sub	sp, #20
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
 800dbd6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbde:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800dbe6:	2303      	movs	r3, #3
 800dbe8:	e004      	b.n	800dbf4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	683a      	ldr	r2, [r7, #0]
 800dbee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3714      	adds	r7, #20
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc0e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800dc10:	2301      	movs	r3, #1
 800dc12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d101      	bne.n	800dc22 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dc1e:	2303      	movs	r3, #3
 800dc20:	e01a      	b.n	800dc58 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d114      	bne.n	800dc56 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	2201      	movs	r2, #1
 800dc30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800dc4a:	2181      	movs	r1, #129	; 0x81
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f004 fbb2 	bl	80123b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800dc52:	2300      	movs	r3, #0
 800dc54:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dc56:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3710      	adds	r7, #16
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d101      	bne.n	800dc7e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dc7a:	2303      	movs	r3, #3
 800dc7c:	e016      	b.n	800dcac <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	7c1b      	ldrb	r3, [r3, #16]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d109      	bne.n	800dc9a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dc8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc90:	2101      	movs	r1, #1
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f004 fbb0 	bl	80123f8 <USBD_LL_PrepareReceive>
 800dc98:	e007      	b.n	800dcaa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dca0:	2340      	movs	r3, #64	; 0x40
 800dca2:	2101      	movs	r1, #1
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f004 fba7 	bl	80123f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dcaa:	2300      	movs	r3, #0
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3710      	adds	r7, #16
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b086      	sub	sp, #24
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d101      	bne.n	800dccc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dcc8:	2303      	movs	r3, #3
 800dcca:	e01f      	b.n	800dd0c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2200      	movs	r2, #0
 800dce0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d003      	beq.n	800dcf2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	68ba      	ldr	r2, [r7, #8]
 800dcee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	79fa      	ldrb	r2, [r7, #7]
 800dcfe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f004 fa23 	bl	801214c <USBD_LL_Init>
 800dd06:	4603      	mov	r3, r0
 800dd08:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dd0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3718      	adds	r7, #24
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d101      	bne.n	800dd2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800dd28:	2303      	movs	r3, #3
 800dd2a:	e016      	b.n	800dd5a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	683a      	ldr	r2, [r7, #0]
 800dd30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00b      	beq.n	800dd58 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd48:	f107 020e 	add.w	r2, r7, #14
 800dd4c:	4610      	mov	r0, r2
 800dd4e:	4798      	blx	r3
 800dd50:	4602      	mov	r2, r0
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800dd58:	2300      	movs	r3, #0
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b082      	sub	sp, #8
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f004 fa3a 	bl	80121e4 <USBD_LL_Start>
 800dd70:	4603      	mov	r3, r0
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3708      	adds	r7, #8
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800dd7a:	b480      	push	{r7}
 800dd7c:	b083      	sub	sp, #12
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	460b      	mov	r3, r1
 800dd9a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800dd9c:	2303      	movs	r3, #3
 800dd9e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d009      	beq.n	800ddbe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	78fa      	ldrb	r2, [r7, #3]
 800ddb4:	4611      	mov	r1, r2
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	4798      	blx	r3
 800ddba:	4603      	mov	r3, r0
 800ddbc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ddbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3710      	adds	r7, #16
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d007      	beq.n	800ddee <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	78fa      	ldrb	r2, [r7, #3]
 800dde8:	4611      	mov	r1, r2
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	4798      	blx	r3
  }

  return USBD_OK;
 800ddee:	2300      	movs	r3, #0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de08:	6839      	ldr	r1, [r7, #0]
 800de0a:	4618      	mov	r0, r3
 800de0c:	f000 ff90 	bl	800ed30 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2201      	movs	r2, #1
 800de14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800de1e:	461a      	mov	r2, r3
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800de2c:	f003 031f 	and.w	r3, r3, #31
 800de30:	2b02      	cmp	r3, #2
 800de32:	d01a      	beq.n	800de6a <USBD_LL_SetupStage+0x72>
 800de34:	2b02      	cmp	r3, #2
 800de36:	d822      	bhi.n	800de7e <USBD_LL_SetupStage+0x86>
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d002      	beq.n	800de42 <USBD_LL_SetupStage+0x4a>
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d00a      	beq.n	800de56 <USBD_LL_SetupStage+0x5e>
 800de40:	e01d      	b.n	800de7e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de48:	4619      	mov	r1, r3
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 fa62 	bl	800e314 <USBD_StdDevReq>
 800de50:	4603      	mov	r3, r0
 800de52:	73fb      	strb	r3, [r7, #15]
      break;
 800de54:	e020      	b.n	800de98 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de5c:	4619      	mov	r1, r3
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 fac6 	bl	800e3f0 <USBD_StdItfReq>
 800de64:	4603      	mov	r3, r0
 800de66:	73fb      	strb	r3, [r7, #15]
      break;
 800de68:	e016      	b.n	800de98 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de70:	4619      	mov	r1, r3
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 fb05 	bl	800e482 <USBD_StdEPReq>
 800de78:	4603      	mov	r3, r0
 800de7a:	73fb      	strb	r3, [r7, #15]
      break;
 800de7c:	e00c      	b.n	800de98 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800de84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	4619      	mov	r1, r3
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f004 fa09 	bl	80122a4 <USBD_LL_StallEP>
 800de92:	4603      	mov	r3, r0
 800de94:	73fb      	strb	r3, [r7, #15]
      break;
 800de96:	bf00      	nop
  }

  return ret;
 800de98:	7bfb      	ldrb	r3, [r7, #15]
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3710      	adds	r7, #16
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}

0800dea2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dea2:	b580      	push	{r7, lr}
 800dea4:	b086      	sub	sp, #24
 800dea6:	af00      	add	r7, sp, #0
 800dea8:	60f8      	str	r0, [r7, #12]
 800deaa:	460b      	mov	r3, r1
 800deac:	607a      	str	r2, [r7, #4]
 800deae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800deb0:	7afb      	ldrb	r3, [r7, #11]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d138      	bne.n	800df28 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800debc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dec4:	2b03      	cmp	r3, #3
 800dec6:	d14a      	bne.n	800df5e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	689a      	ldr	r2, [r3, #8]
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	68db      	ldr	r3, [r3, #12]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d913      	bls.n	800defc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	689a      	ldr	r2, [r3, #8]
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	1ad2      	subs	r2, r2, r3
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	68da      	ldr	r2, [r3, #12]
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	4293      	cmp	r3, r2
 800deec:	bf28      	it	cs
 800deee:	4613      	movcs	r3, r2
 800def0:	461a      	mov	r2, r3
 800def2:	6879      	ldr	r1, [r7, #4]
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f001 f80f 	bl	800ef18 <USBD_CtlContinueRx>
 800defa:	e030      	b.n	800df5e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df02:	b2db      	uxtb	r3, r3
 800df04:	2b03      	cmp	r3, #3
 800df06:	d10b      	bne.n	800df20 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df0e:	691b      	ldr	r3, [r3, #16]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d005      	beq.n	800df20 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	68f8      	ldr	r0, [r7, #12]
 800df1e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800df20:	68f8      	ldr	r0, [r7, #12]
 800df22:	f001 f80a 	bl	800ef3a <USBD_CtlSendStatus>
 800df26:	e01a      	b.n	800df5e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	2b03      	cmp	r3, #3
 800df32:	d114      	bne.n	800df5e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df3a:	699b      	ldr	r3, [r3, #24]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d00e      	beq.n	800df5e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df46:	699b      	ldr	r3, [r3, #24]
 800df48:	7afa      	ldrb	r2, [r7, #11]
 800df4a:	4611      	mov	r1, r2
 800df4c:	68f8      	ldr	r0, [r7, #12]
 800df4e:	4798      	blx	r3
 800df50:	4603      	mov	r3, r0
 800df52:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800df54:	7dfb      	ldrb	r3, [r7, #23]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d001      	beq.n	800df5e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800df5a:	7dfb      	ldrb	r3, [r7, #23]
 800df5c:	e000      	b.n	800df60 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800df5e:	2300      	movs	r3, #0
}
 800df60:	4618      	mov	r0, r3
 800df62:	3718      	adds	r7, #24
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	460b      	mov	r3, r1
 800df72:	607a      	str	r2, [r7, #4]
 800df74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800df76:	7afb      	ldrb	r3, [r7, #11]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d16b      	bne.n	800e054 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	3314      	adds	r3, #20
 800df80:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800df88:	2b02      	cmp	r3, #2
 800df8a:	d156      	bne.n	800e03a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	689a      	ldr	r2, [r3, #8]
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	429a      	cmp	r2, r3
 800df96:	d914      	bls.n	800dfc2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	689a      	ldr	r2, [r3, #8]
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	1ad2      	subs	r2, r2, r3
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	689b      	ldr	r3, [r3, #8]
 800dfaa:	461a      	mov	r2, r3
 800dfac:	6879      	ldr	r1, [r7, #4]
 800dfae:	68f8      	ldr	r0, [r7, #12]
 800dfb0:	f000 ff84 	bl	800eebc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	2100      	movs	r1, #0
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	f004 fa1c 	bl	80123f8 <USBD_LL_PrepareReceive>
 800dfc0:	e03b      	b.n	800e03a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	68da      	ldr	r2, [r3, #12]
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	689b      	ldr	r3, [r3, #8]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d11c      	bne.n	800e008 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	685a      	ldr	r2, [r3, #4]
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d316      	bcc.n	800e008 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	685a      	ldr	r2, [r3, #4]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d20f      	bcs.n	800e008 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dfe8:	2200      	movs	r2, #0
 800dfea:	2100      	movs	r1, #0
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f000 ff65 	bl	800eebc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dffa:	2300      	movs	r3, #0
 800dffc:	2200      	movs	r2, #0
 800dffe:	2100      	movs	r1, #0
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f004 f9f9 	bl	80123f8 <USBD_LL_PrepareReceive>
 800e006:	e018      	b.n	800e03a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	2b03      	cmp	r3, #3
 800e012:	d10b      	bne.n	800e02c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d005      	beq.n	800e02c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	68f8      	ldr	r0, [r7, #12]
 800e02a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e02c:	2180      	movs	r1, #128	; 0x80
 800e02e:	68f8      	ldr	r0, [r7, #12]
 800e030:	f004 f938 	bl	80122a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f000 ff93 	bl	800ef60 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e040:	2b01      	cmp	r3, #1
 800e042:	d122      	bne.n	800e08a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f7ff fe98 	bl	800dd7a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2200      	movs	r2, #0
 800e04e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e052:	e01a      	b.n	800e08a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	2b03      	cmp	r3, #3
 800e05e:	d114      	bne.n	800e08a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e066:	695b      	ldr	r3, [r3, #20]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d00e      	beq.n	800e08a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e072:	695b      	ldr	r3, [r3, #20]
 800e074:	7afa      	ldrb	r2, [r7, #11]
 800e076:	4611      	mov	r1, r2
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	4798      	blx	r3
 800e07c:	4603      	mov	r3, r0
 800e07e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e080:	7dfb      	ldrb	r3, [r7, #23]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d001      	beq.n	800e08a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e086:	7dfb      	ldrb	r3, [r7, #23]
 800e088:	e000      	b.n	800e08c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e08a:	2300      	movs	r3, #0
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3718      	adds	r7, #24
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d101      	bne.n	800e0c8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e0c4:	2303      	movs	r3, #3
 800e0c6:	e02f      	b.n	800e128 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d00f      	beq.n	800e0f2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d009      	beq.n	800e0f2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	687a      	ldr	r2, [r7, #4]
 800e0e8:	6852      	ldr	r2, [r2, #4]
 800e0ea:	b2d2      	uxtb	r2, r2
 800e0ec:	4611      	mov	r1, r2
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e0f2:	2340      	movs	r3, #64	; 0x40
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	2100      	movs	r1, #0
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f004 f88e 	bl	801221a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2201      	movs	r2, #1
 800e102:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2240      	movs	r2, #64	; 0x40
 800e10a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e10e:	2340      	movs	r3, #64	; 0x40
 800e110:	2200      	movs	r2, #0
 800e112:	2180      	movs	r1, #128	; 0x80
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f004 f880 	bl	801221a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2201      	movs	r2, #1
 800e11e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2240      	movs	r2, #64	; 0x40
 800e124:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e126:	2300      	movs	r3, #0
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3708      	adds	r7, #8
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e130:	b480      	push	{r7}
 800e132:	b083      	sub	sp, #12
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	460b      	mov	r3, r1
 800e13a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	78fa      	ldrb	r2, [r7, #3]
 800e140:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e142:	2300      	movs	r3, #0
}
 800e144:	4618      	mov	r0, r3
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e15e:	b2da      	uxtb	r2, r3
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2204      	movs	r2, #4
 800e16a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e16e:	2300      	movs	r3, #0
}
 800e170:	4618      	mov	r0, r3
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	2b04      	cmp	r3, #4
 800e18e:	d106      	bne.n	800e19e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e196:	b2da      	uxtb	r2, r3
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e19e:	2300      	movs	r3, #0
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d101      	bne.n	800e1c2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e1be:	2303      	movs	r3, #3
 800e1c0:	e012      	b.n	800e1e8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	2b03      	cmp	r3, #3
 800e1cc:	d10b      	bne.n	800e1e6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1d4:	69db      	ldr	r3, [r3, #28]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d005      	beq.n	800e1e6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1e0:	69db      	ldr	r3, [r3, #28]
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e1e6:	2300      	movs	r3, #0
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e202:	2b00      	cmp	r3, #0
 800e204:	d101      	bne.n	800e20a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e206:	2303      	movs	r3, #3
 800e208:	e014      	b.n	800e234 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e210:	b2db      	uxtb	r3, r3
 800e212:	2b03      	cmp	r3, #3
 800e214:	d10d      	bne.n	800e232 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e21c:	6a1b      	ldr	r3, [r3, #32]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d007      	beq.n	800e232 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e228:	6a1b      	ldr	r3, [r3, #32]
 800e22a:	78fa      	ldrb	r2, [r7, #3]
 800e22c:	4611      	mov	r1, r2
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e232:	2300      	movs	r3, #0
}
 800e234:	4618      	mov	r0, r3
 800e236:	3708      	adds	r7, #8
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	460b      	mov	r3, r1
 800e246:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d101      	bne.n	800e256 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e252:	2303      	movs	r3, #3
 800e254:	e014      	b.n	800e280 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	2b03      	cmp	r3, #3
 800e260:	d10d      	bne.n	800e27e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d007      	beq.n	800e27e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e276:	78fa      	ldrb	r2, [r7, #3]
 800e278:	4611      	mov	r1, r2
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e27e:	2300      	movs	r3, #0
}
 800e280:	4618      	mov	r0, r3
 800e282:	3708      	adds	r7, #8
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e290:	2300      	movs	r3, #0
}
 800e292:	4618      	mov	r0, r3
 800e294:	370c      	adds	r7, #12
 800e296:	46bd      	mov	sp, r7
 800e298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29c:	4770      	bx	lr

0800e29e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b082      	sub	sp, #8
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d009      	beq.n	800e2cc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	6852      	ldr	r2, [r2, #4]
 800e2c4:	b2d2      	uxtb	r2, r2
 800e2c6:	4611      	mov	r1, r2
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	4798      	blx	r3
  }

  return USBD_OK;
 800e2cc:	2300      	movs	r3, #0
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3708      	adds	r7, #8
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}

0800e2d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e2d6:	b480      	push	{r7}
 800e2d8:	b087      	sub	sp, #28
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e2f4:	8a3b      	ldrh	r3, [r7, #16]
 800e2f6:	021b      	lsls	r3, r3, #8
 800e2f8:	b21a      	sxth	r2, r3
 800e2fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e2fe:	4313      	orrs	r3, r2
 800e300:	b21b      	sxth	r3, r3
 800e302:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e304:	89fb      	ldrh	r3, [r7, #14]
}
 800e306:	4618      	mov	r0, r3
 800e308:	371c      	adds	r7, #28
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
	...

0800e314 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e31e:	2300      	movs	r3, #0
 800e320:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e32a:	2b40      	cmp	r3, #64	; 0x40
 800e32c:	d005      	beq.n	800e33a <USBD_StdDevReq+0x26>
 800e32e:	2b40      	cmp	r3, #64	; 0x40
 800e330:	d853      	bhi.n	800e3da <USBD_StdDevReq+0xc6>
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00b      	beq.n	800e34e <USBD_StdDevReq+0x3a>
 800e336:	2b20      	cmp	r3, #32
 800e338:	d14f      	bne.n	800e3da <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	6839      	ldr	r1, [r7, #0]
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	4798      	blx	r3
 800e348:	4603      	mov	r3, r0
 800e34a:	73fb      	strb	r3, [r7, #15]
      break;
 800e34c:	e04a      	b.n	800e3e4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	785b      	ldrb	r3, [r3, #1]
 800e352:	2b09      	cmp	r3, #9
 800e354:	d83b      	bhi.n	800e3ce <USBD_StdDevReq+0xba>
 800e356:	a201      	add	r2, pc, #4	; (adr r2, 800e35c <USBD_StdDevReq+0x48>)
 800e358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e35c:	0800e3b1 	.word	0x0800e3b1
 800e360:	0800e3c5 	.word	0x0800e3c5
 800e364:	0800e3cf 	.word	0x0800e3cf
 800e368:	0800e3bb 	.word	0x0800e3bb
 800e36c:	0800e3cf 	.word	0x0800e3cf
 800e370:	0800e38f 	.word	0x0800e38f
 800e374:	0800e385 	.word	0x0800e385
 800e378:	0800e3cf 	.word	0x0800e3cf
 800e37c:	0800e3a7 	.word	0x0800e3a7
 800e380:	0800e399 	.word	0x0800e399
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e384:	6839      	ldr	r1, [r7, #0]
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 f9de 	bl	800e748 <USBD_GetDescriptor>
          break;
 800e38c:	e024      	b.n	800e3d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e38e:	6839      	ldr	r1, [r7, #0]
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 fb43 	bl	800ea1c <USBD_SetAddress>
          break;
 800e396:	e01f      	b.n	800e3d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e398:	6839      	ldr	r1, [r7, #0]
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 fb82 	bl	800eaa4 <USBD_SetConfig>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	73fb      	strb	r3, [r7, #15]
          break;
 800e3a4:	e018      	b.n	800e3d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e3a6:	6839      	ldr	r1, [r7, #0]
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 fc21 	bl	800ebf0 <USBD_GetConfig>
          break;
 800e3ae:	e013      	b.n	800e3d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e3b0:	6839      	ldr	r1, [r7, #0]
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 fc52 	bl	800ec5c <USBD_GetStatus>
          break;
 800e3b8:	e00e      	b.n	800e3d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e3ba:	6839      	ldr	r1, [r7, #0]
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 fc81 	bl	800ecc4 <USBD_SetFeature>
          break;
 800e3c2:	e009      	b.n	800e3d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e3c4:	6839      	ldr	r1, [r7, #0]
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 fc90 	bl	800ecec <USBD_ClrFeature>
          break;
 800e3cc:	e004      	b.n	800e3d8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e3ce:	6839      	ldr	r1, [r7, #0]
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f000 fce7 	bl	800eda4 <USBD_CtlError>
          break;
 800e3d6:	bf00      	nop
      }
      break;
 800e3d8:	e004      	b.n	800e3e4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e3da:	6839      	ldr	r1, [r7, #0]
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 fce1 	bl	800eda4 <USBD_CtlError>
      break;
 800e3e2:	bf00      	nop
  }

  return ret;
 800e3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3710      	adds	r7, #16
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop

0800e3f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e406:	2b40      	cmp	r3, #64	; 0x40
 800e408:	d005      	beq.n	800e416 <USBD_StdItfReq+0x26>
 800e40a:	2b40      	cmp	r3, #64	; 0x40
 800e40c:	d82f      	bhi.n	800e46e <USBD_StdItfReq+0x7e>
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d001      	beq.n	800e416 <USBD_StdItfReq+0x26>
 800e412:	2b20      	cmp	r3, #32
 800e414:	d12b      	bne.n	800e46e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	3b01      	subs	r3, #1
 800e420:	2b02      	cmp	r3, #2
 800e422:	d81d      	bhi.n	800e460 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	889b      	ldrh	r3, [r3, #4]
 800e428:	b2db      	uxtb	r3, r3
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	d813      	bhi.n	800e456 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e434:	689b      	ldr	r3, [r3, #8]
 800e436:	6839      	ldr	r1, [r7, #0]
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	4798      	blx	r3
 800e43c:	4603      	mov	r3, r0
 800e43e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	88db      	ldrh	r3, [r3, #6]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d110      	bne.n	800e46a <USBD_StdItfReq+0x7a>
 800e448:	7bfb      	ldrb	r3, [r7, #15]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d10d      	bne.n	800e46a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f000 fd73 	bl	800ef3a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e454:	e009      	b.n	800e46a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e456:	6839      	ldr	r1, [r7, #0]
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 fca3 	bl	800eda4 <USBD_CtlError>
          break;
 800e45e:	e004      	b.n	800e46a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e460:	6839      	ldr	r1, [r7, #0]
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 fc9e 	bl	800eda4 <USBD_CtlError>
          break;
 800e468:	e000      	b.n	800e46c <USBD_StdItfReq+0x7c>
          break;
 800e46a:	bf00      	nop
      }
      break;
 800e46c:	e004      	b.n	800e478 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e46e:	6839      	ldr	r1, [r7, #0]
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 fc97 	bl	800eda4 <USBD_CtlError>
      break;
 800e476:	bf00      	nop
  }

  return ret;
 800e478:	7bfb      	ldrb	r3, [r7, #15]
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3710      	adds	r7, #16
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e482:	b580      	push	{r7, lr}
 800e484:	b084      	sub	sp, #16
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
 800e48a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e48c:	2300      	movs	r3, #0
 800e48e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	889b      	ldrh	r3, [r3, #4]
 800e494:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e49e:	2b40      	cmp	r3, #64	; 0x40
 800e4a0:	d007      	beq.n	800e4b2 <USBD_StdEPReq+0x30>
 800e4a2:	2b40      	cmp	r3, #64	; 0x40
 800e4a4:	f200 8145 	bhi.w	800e732 <USBD_StdEPReq+0x2b0>
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d00c      	beq.n	800e4c6 <USBD_StdEPReq+0x44>
 800e4ac:	2b20      	cmp	r3, #32
 800e4ae:	f040 8140 	bne.w	800e732 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	6839      	ldr	r1, [r7, #0]
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	4798      	blx	r3
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	73fb      	strb	r3, [r7, #15]
      break;
 800e4c4:	e13a      	b.n	800e73c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	785b      	ldrb	r3, [r3, #1]
 800e4ca:	2b03      	cmp	r3, #3
 800e4cc:	d007      	beq.n	800e4de <USBD_StdEPReq+0x5c>
 800e4ce:	2b03      	cmp	r3, #3
 800e4d0:	f300 8129 	bgt.w	800e726 <USBD_StdEPReq+0x2a4>
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d07f      	beq.n	800e5d8 <USBD_StdEPReq+0x156>
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d03c      	beq.n	800e556 <USBD_StdEPReq+0xd4>
 800e4dc:	e123      	b.n	800e726 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4e4:	b2db      	uxtb	r3, r3
 800e4e6:	2b02      	cmp	r3, #2
 800e4e8:	d002      	beq.n	800e4f0 <USBD_StdEPReq+0x6e>
 800e4ea:	2b03      	cmp	r3, #3
 800e4ec:	d016      	beq.n	800e51c <USBD_StdEPReq+0x9a>
 800e4ee:	e02c      	b.n	800e54a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e4f0:	7bbb      	ldrb	r3, [r7, #14]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00d      	beq.n	800e512 <USBD_StdEPReq+0x90>
 800e4f6:	7bbb      	ldrb	r3, [r7, #14]
 800e4f8:	2b80      	cmp	r3, #128	; 0x80
 800e4fa:	d00a      	beq.n	800e512 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e4fc:	7bbb      	ldrb	r3, [r7, #14]
 800e4fe:	4619      	mov	r1, r3
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f003 fecf 	bl	80122a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e506:	2180      	movs	r1, #128	; 0x80
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f003 fecb 	bl	80122a4 <USBD_LL_StallEP>
 800e50e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e510:	e020      	b.n	800e554 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e512:	6839      	ldr	r1, [r7, #0]
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f000 fc45 	bl	800eda4 <USBD_CtlError>
              break;
 800e51a:	e01b      	b.n	800e554 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	885b      	ldrh	r3, [r3, #2]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d10e      	bne.n	800e542 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e524:	7bbb      	ldrb	r3, [r7, #14]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d00b      	beq.n	800e542 <USBD_StdEPReq+0xc0>
 800e52a:	7bbb      	ldrb	r3, [r7, #14]
 800e52c:	2b80      	cmp	r3, #128	; 0x80
 800e52e:	d008      	beq.n	800e542 <USBD_StdEPReq+0xc0>
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	88db      	ldrh	r3, [r3, #6]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d104      	bne.n	800e542 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e538:	7bbb      	ldrb	r3, [r7, #14]
 800e53a:	4619      	mov	r1, r3
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f003 feb1 	bl	80122a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f000 fcf9 	bl	800ef3a <USBD_CtlSendStatus>

              break;
 800e548:	e004      	b.n	800e554 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e54a:	6839      	ldr	r1, [r7, #0]
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 fc29 	bl	800eda4 <USBD_CtlError>
              break;
 800e552:	bf00      	nop
          }
          break;
 800e554:	e0ec      	b.n	800e730 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e55c:	b2db      	uxtb	r3, r3
 800e55e:	2b02      	cmp	r3, #2
 800e560:	d002      	beq.n	800e568 <USBD_StdEPReq+0xe6>
 800e562:	2b03      	cmp	r3, #3
 800e564:	d016      	beq.n	800e594 <USBD_StdEPReq+0x112>
 800e566:	e030      	b.n	800e5ca <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e568:	7bbb      	ldrb	r3, [r7, #14]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d00d      	beq.n	800e58a <USBD_StdEPReq+0x108>
 800e56e:	7bbb      	ldrb	r3, [r7, #14]
 800e570:	2b80      	cmp	r3, #128	; 0x80
 800e572:	d00a      	beq.n	800e58a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e574:	7bbb      	ldrb	r3, [r7, #14]
 800e576:	4619      	mov	r1, r3
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f003 fe93 	bl	80122a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e57e:	2180      	movs	r1, #128	; 0x80
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f003 fe8f 	bl	80122a4 <USBD_LL_StallEP>
 800e586:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e588:	e025      	b.n	800e5d6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e58a:	6839      	ldr	r1, [r7, #0]
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 fc09 	bl	800eda4 <USBD_CtlError>
              break;
 800e592:	e020      	b.n	800e5d6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	885b      	ldrh	r3, [r3, #2]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d11b      	bne.n	800e5d4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e59c:	7bbb      	ldrb	r3, [r7, #14]
 800e59e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d004      	beq.n	800e5b0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e5a6:	7bbb      	ldrb	r3, [r7, #14]
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f003 fe99 	bl	80122e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f000 fcc2 	bl	800ef3a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5bc:	689b      	ldr	r3, [r3, #8]
 800e5be:	6839      	ldr	r1, [r7, #0]
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	4798      	blx	r3
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e5c8:	e004      	b.n	800e5d4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e5ca:	6839      	ldr	r1, [r7, #0]
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f000 fbe9 	bl	800eda4 <USBD_CtlError>
              break;
 800e5d2:	e000      	b.n	800e5d6 <USBD_StdEPReq+0x154>
              break;
 800e5d4:	bf00      	nop
          }
          break;
 800e5d6:	e0ab      	b.n	800e730 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	2b02      	cmp	r3, #2
 800e5e2:	d002      	beq.n	800e5ea <USBD_StdEPReq+0x168>
 800e5e4:	2b03      	cmp	r3, #3
 800e5e6:	d032      	beq.n	800e64e <USBD_StdEPReq+0x1cc>
 800e5e8:	e097      	b.n	800e71a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e5ea:	7bbb      	ldrb	r3, [r7, #14]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d007      	beq.n	800e600 <USBD_StdEPReq+0x17e>
 800e5f0:	7bbb      	ldrb	r3, [r7, #14]
 800e5f2:	2b80      	cmp	r3, #128	; 0x80
 800e5f4:	d004      	beq.n	800e600 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e5f6:	6839      	ldr	r1, [r7, #0]
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f000 fbd3 	bl	800eda4 <USBD_CtlError>
                break;
 800e5fe:	e091      	b.n	800e724 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e604:	2b00      	cmp	r3, #0
 800e606:	da0b      	bge.n	800e620 <USBD_StdEPReq+0x19e>
 800e608:	7bbb      	ldrb	r3, [r7, #14]
 800e60a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e60e:	4613      	mov	r3, r2
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	4413      	add	r3, r2
 800e614:	009b      	lsls	r3, r3, #2
 800e616:	3310      	adds	r3, #16
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	4413      	add	r3, r2
 800e61c:	3304      	adds	r3, #4
 800e61e:	e00b      	b.n	800e638 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e620:	7bbb      	ldrb	r3, [r7, #14]
 800e622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e626:	4613      	mov	r3, r2
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	4413      	add	r3, r2
 800e62c:	009b      	lsls	r3, r3, #2
 800e62e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	4413      	add	r3, r2
 800e636:	3304      	adds	r3, #4
 800e638:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	2200      	movs	r2, #0
 800e63e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	2202      	movs	r2, #2
 800e644:	4619      	mov	r1, r3
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 fc1d 	bl	800ee86 <USBD_CtlSendData>
              break;
 800e64c:	e06a      	b.n	800e724 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e64e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e652:	2b00      	cmp	r3, #0
 800e654:	da11      	bge.n	800e67a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e656:	7bbb      	ldrb	r3, [r7, #14]
 800e658:	f003 020f 	and.w	r2, r3, #15
 800e65c:	6879      	ldr	r1, [r7, #4]
 800e65e:	4613      	mov	r3, r2
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	4413      	add	r3, r2
 800e664:	009b      	lsls	r3, r3, #2
 800e666:	440b      	add	r3, r1
 800e668:	3324      	adds	r3, #36	; 0x24
 800e66a:	881b      	ldrh	r3, [r3, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d117      	bne.n	800e6a0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e670:	6839      	ldr	r1, [r7, #0]
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f000 fb96 	bl	800eda4 <USBD_CtlError>
                  break;
 800e678:	e054      	b.n	800e724 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e67a:	7bbb      	ldrb	r3, [r7, #14]
 800e67c:	f003 020f 	and.w	r2, r3, #15
 800e680:	6879      	ldr	r1, [r7, #4]
 800e682:	4613      	mov	r3, r2
 800e684:	009b      	lsls	r3, r3, #2
 800e686:	4413      	add	r3, r2
 800e688:	009b      	lsls	r3, r3, #2
 800e68a:	440b      	add	r3, r1
 800e68c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e690:	881b      	ldrh	r3, [r3, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d104      	bne.n	800e6a0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e696:	6839      	ldr	r1, [r7, #0]
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 fb83 	bl	800eda4 <USBD_CtlError>
                  break;
 800e69e:	e041      	b.n	800e724 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	da0b      	bge.n	800e6c0 <USBD_StdEPReq+0x23e>
 800e6a8:	7bbb      	ldrb	r3, [r7, #14]
 800e6aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	009b      	lsls	r3, r3, #2
 800e6b2:	4413      	add	r3, r2
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	3310      	adds	r3, #16
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	4413      	add	r3, r2
 800e6bc:	3304      	adds	r3, #4
 800e6be:	e00b      	b.n	800e6d8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e6c0:	7bbb      	ldrb	r3, [r7, #14]
 800e6c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	4413      	add	r3, r2
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	3304      	adds	r3, #4
 800e6d8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e6da:	7bbb      	ldrb	r3, [r7, #14]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d002      	beq.n	800e6e6 <USBD_StdEPReq+0x264>
 800e6e0:	7bbb      	ldrb	r3, [r7, #14]
 800e6e2:	2b80      	cmp	r3, #128	; 0x80
 800e6e4:	d103      	bne.n	800e6ee <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	601a      	str	r2, [r3, #0]
 800e6ec:	e00e      	b.n	800e70c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e6ee:	7bbb      	ldrb	r3, [r7, #14]
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f003 fe14 	bl	8012320 <USBD_LL_IsStallEP>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d003      	beq.n	800e706 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	2201      	movs	r2, #1
 800e702:	601a      	str	r2, [r3, #0]
 800e704:	e002      	b.n	800e70c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	2200      	movs	r2, #0
 800e70a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	2202      	movs	r2, #2
 800e710:	4619      	mov	r1, r3
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f000 fbb7 	bl	800ee86 <USBD_CtlSendData>
              break;
 800e718:	e004      	b.n	800e724 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 fb41 	bl	800eda4 <USBD_CtlError>
              break;
 800e722:	bf00      	nop
          }
          break;
 800e724:	e004      	b.n	800e730 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e726:	6839      	ldr	r1, [r7, #0]
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 fb3b 	bl	800eda4 <USBD_CtlError>
          break;
 800e72e:	bf00      	nop
      }
      break;
 800e730:	e004      	b.n	800e73c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e732:	6839      	ldr	r1, [r7, #0]
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f000 fb35 	bl	800eda4 <USBD_CtlError>
      break;
 800e73a:	bf00      	nop
  }

  return ret;
 800e73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3710      	adds	r7, #16
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
	...

0800e748 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b084      	sub	sp, #16
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e752:	2300      	movs	r3, #0
 800e754:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e756:	2300      	movs	r3, #0
 800e758:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e75a:	2300      	movs	r3, #0
 800e75c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	885b      	ldrh	r3, [r3, #2]
 800e762:	0a1b      	lsrs	r3, r3, #8
 800e764:	b29b      	uxth	r3, r3
 800e766:	3b01      	subs	r3, #1
 800e768:	2b06      	cmp	r3, #6
 800e76a:	f200 8128 	bhi.w	800e9be <USBD_GetDescriptor+0x276>
 800e76e:	a201      	add	r2, pc, #4	; (adr r2, 800e774 <USBD_GetDescriptor+0x2c>)
 800e770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e774:	0800e791 	.word	0x0800e791
 800e778:	0800e7a9 	.word	0x0800e7a9
 800e77c:	0800e7e9 	.word	0x0800e7e9
 800e780:	0800e9bf 	.word	0x0800e9bf
 800e784:	0800e9bf 	.word	0x0800e9bf
 800e788:	0800e95f 	.word	0x0800e95f
 800e78c:	0800e98b 	.word	0x0800e98b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	7c12      	ldrb	r2, [r2, #16]
 800e79c:	f107 0108 	add.w	r1, r7, #8
 800e7a0:	4610      	mov	r0, r2
 800e7a2:	4798      	blx	r3
 800e7a4:	60f8      	str	r0, [r7, #12]
      break;
 800e7a6:	e112      	b.n	800e9ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	7c1b      	ldrb	r3, [r3, #16]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d10d      	bne.n	800e7cc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7b8:	f107 0208 	add.w	r2, r7, #8
 800e7bc:	4610      	mov	r0, r2
 800e7be:	4798      	blx	r3
 800e7c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	2202      	movs	r2, #2
 800e7c8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e7ca:	e100      	b.n	800e9ce <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7d4:	f107 0208 	add.w	r2, r7, #8
 800e7d8:	4610      	mov	r0, r2
 800e7da:	4798      	blx	r3
 800e7dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	2202      	movs	r2, #2
 800e7e4:	701a      	strb	r2, [r3, #0]
      break;
 800e7e6:	e0f2      	b.n	800e9ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	885b      	ldrh	r3, [r3, #2]
 800e7ec:	b2db      	uxtb	r3, r3
 800e7ee:	2b05      	cmp	r3, #5
 800e7f0:	f200 80ac 	bhi.w	800e94c <USBD_GetDescriptor+0x204>
 800e7f4:	a201      	add	r2, pc, #4	; (adr r2, 800e7fc <USBD_GetDescriptor+0xb4>)
 800e7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7fa:	bf00      	nop
 800e7fc:	0800e815 	.word	0x0800e815
 800e800:	0800e849 	.word	0x0800e849
 800e804:	0800e87d 	.word	0x0800e87d
 800e808:	0800e8b1 	.word	0x0800e8b1
 800e80c:	0800e8e5 	.word	0x0800e8e5
 800e810:	0800e919 	.word	0x0800e919
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d00b      	beq.n	800e838 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	7c12      	ldrb	r2, [r2, #16]
 800e82c:	f107 0108 	add.w	r1, r7, #8
 800e830:	4610      	mov	r0, r2
 800e832:	4798      	blx	r3
 800e834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e836:	e091      	b.n	800e95c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e838:	6839      	ldr	r1, [r7, #0]
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f000 fab2 	bl	800eda4 <USBD_CtlError>
            err++;
 800e840:	7afb      	ldrb	r3, [r7, #11]
 800e842:	3301      	adds	r3, #1
 800e844:	72fb      	strb	r3, [r7, #11]
          break;
 800e846:	e089      	b.n	800e95c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e84e:	689b      	ldr	r3, [r3, #8]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d00b      	beq.n	800e86c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e85a:	689b      	ldr	r3, [r3, #8]
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	7c12      	ldrb	r2, [r2, #16]
 800e860:	f107 0108 	add.w	r1, r7, #8
 800e864:	4610      	mov	r0, r2
 800e866:	4798      	blx	r3
 800e868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e86a:	e077      	b.n	800e95c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e86c:	6839      	ldr	r1, [r7, #0]
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 fa98 	bl	800eda4 <USBD_CtlError>
            err++;
 800e874:	7afb      	ldrb	r3, [r7, #11]
 800e876:	3301      	adds	r3, #1
 800e878:	72fb      	strb	r3, [r7, #11]
          break;
 800e87a:	e06f      	b.n	800e95c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e882:	68db      	ldr	r3, [r3, #12]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00b      	beq.n	800e8a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e88e:	68db      	ldr	r3, [r3, #12]
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	7c12      	ldrb	r2, [r2, #16]
 800e894:	f107 0108 	add.w	r1, r7, #8
 800e898:	4610      	mov	r0, r2
 800e89a:	4798      	blx	r3
 800e89c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e89e:	e05d      	b.n	800e95c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8a0:	6839      	ldr	r1, [r7, #0]
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 fa7e 	bl	800eda4 <USBD_CtlError>
            err++;
 800e8a8:	7afb      	ldrb	r3, [r7, #11]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e8ae:	e055      	b.n	800e95c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8b6:	691b      	ldr	r3, [r3, #16]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d00b      	beq.n	800e8d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8c2:	691b      	ldr	r3, [r3, #16]
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	7c12      	ldrb	r2, [r2, #16]
 800e8c8:	f107 0108 	add.w	r1, r7, #8
 800e8cc:	4610      	mov	r0, r2
 800e8ce:	4798      	blx	r3
 800e8d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8d2:	e043      	b.n	800e95c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8d4:	6839      	ldr	r1, [r7, #0]
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 fa64 	bl	800eda4 <USBD_CtlError>
            err++;
 800e8dc:	7afb      	ldrb	r3, [r7, #11]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	72fb      	strb	r3, [r7, #11]
          break;
 800e8e2:	e03b      	b.n	800e95c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8ea:	695b      	ldr	r3, [r3, #20]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d00b      	beq.n	800e908 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8f6:	695b      	ldr	r3, [r3, #20]
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	7c12      	ldrb	r2, [r2, #16]
 800e8fc:	f107 0108 	add.w	r1, r7, #8
 800e900:	4610      	mov	r0, r2
 800e902:	4798      	blx	r3
 800e904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e906:	e029      	b.n	800e95c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e908:	6839      	ldr	r1, [r7, #0]
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 fa4a 	bl	800eda4 <USBD_CtlError>
            err++;
 800e910:	7afb      	ldrb	r3, [r7, #11]
 800e912:	3301      	adds	r3, #1
 800e914:	72fb      	strb	r3, [r7, #11]
          break;
 800e916:	e021      	b.n	800e95c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e91e:	699b      	ldr	r3, [r3, #24]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d00b      	beq.n	800e93c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e92a:	699b      	ldr	r3, [r3, #24]
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	7c12      	ldrb	r2, [r2, #16]
 800e930:	f107 0108 	add.w	r1, r7, #8
 800e934:	4610      	mov	r0, r2
 800e936:	4798      	blx	r3
 800e938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e93a:	e00f      	b.n	800e95c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e93c:	6839      	ldr	r1, [r7, #0]
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 fa30 	bl	800eda4 <USBD_CtlError>
            err++;
 800e944:	7afb      	ldrb	r3, [r7, #11]
 800e946:	3301      	adds	r3, #1
 800e948:	72fb      	strb	r3, [r7, #11]
          break;
 800e94a:	e007      	b.n	800e95c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e94c:	6839      	ldr	r1, [r7, #0]
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 fa28 	bl	800eda4 <USBD_CtlError>
          err++;
 800e954:	7afb      	ldrb	r3, [r7, #11]
 800e956:	3301      	adds	r3, #1
 800e958:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e95a:	bf00      	nop
      }
      break;
 800e95c:	e037      	b.n	800e9ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	7c1b      	ldrb	r3, [r3, #16]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d109      	bne.n	800e97a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e96c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e96e:	f107 0208 	add.w	r2, r7, #8
 800e972:	4610      	mov	r0, r2
 800e974:	4798      	blx	r3
 800e976:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e978:	e029      	b.n	800e9ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e97a:	6839      	ldr	r1, [r7, #0]
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f000 fa11 	bl	800eda4 <USBD_CtlError>
        err++;
 800e982:	7afb      	ldrb	r3, [r7, #11]
 800e984:	3301      	adds	r3, #1
 800e986:	72fb      	strb	r3, [r7, #11]
      break;
 800e988:	e021      	b.n	800e9ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	7c1b      	ldrb	r3, [r3, #16]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10d      	bne.n	800e9ae <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e99a:	f107 0208 	add.w	r2, r7, #8
 800e99e:	4610      	mov	r0, r2
 800e9a0:	4798      	blx	r3
 800e9a2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	2207      	movs	r2, #7
 800e9aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9ac:	e00f      	b.n	800e9ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e9ae:	6839      	ldr	r1, [r7, #0]
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 f9f7 	bl	800eda4 <USBD_CtlError>
        err++;
 800e9b6:	7afb      	ldrb	r3, [r7, #11]
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	72fb      	strb	r3, [r7, #11]
      break;
 800e9bc:	e007      	b.n	800e9ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e9be:	6839      	ldr	r1, [r7, #0]
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f000 f9ef 	bl	800eda4 <USBD_CtlError>
      err++;
 800e9c6:	7afb      	ldrb	r3, [r7, #11]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	72fb      	strb	r3, [r7, #11]
      break;
 800e9cc:	bf00      	nop
  }

  if (err != 0U)
 800e9ce:	7afb      	ldrb	r3, [r7, #11]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d11e      	bne.n	800ea12 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	88db      	ldrh	r3, [r3, #6]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d016      	beq.n	800ea0a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e9dc:	893b      	ldrh	r3, [r7, #8]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d00e      	beq.n	800ea00 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	88da      	ldrh	r2, [r3, #6]
 800e9e6:	893b      	ldrh	r3, [r7, #8]
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	bf28      	it	cs
 800e9ec:	4613      	movcs	r3, r2
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e9f2:	893b      	ldrh	r3, [r7, #8]
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	68f9      	ldr	r1, [r7, #12]
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f000 fa44 	bl	800ee86 <USBD_CtlSendData>
 800e9fe:	e009      	b.n	800ea14 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ea00:	6839      	ldr	r1, [r7, #0]
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f000 f9ce 	bl	800eda4 <USBD_CtlError>
 800ea08:	e004      	b.n	800ea14 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f000 fa95 	bl	800ef3a <USBD_CtlSendStatus>
 800ea10:	e000      	b.n	800ea14 <USBD_GetDescriptor+0x2cc>
    return;
 800ea12:	bf00      	nop
  }
}
 800ea14:	3710      	adds	r7, #16
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop

0800ea1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	889b      	ldrh	r3, [r3, #4]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d131      	bne.n	800ea92 <USBD_SetAddress+0x76>
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	88db      	ldrh	r3, [r3, #6]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d12d      	bne.n	800ea92 <USBD_SetAddress+0x76>
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	885b      	ldrh	r3, [r3, #2]
 800ea3a:	2b7f      	cmp	r3, #127	; 0x7f
 800ea3c:	d829      	bhi.n	800ea92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	885b      	ldrh	r3, [r3, #2]
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	2b03      	cmp	r3, #3
 800ea54:	d104      	bne.n	800ea60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ea56:	6839      	ldr	r1, [r7, #0]
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f000 f9a3 	bl	800eda4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea5e:	e01d      	b.n	800ea9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	7bfa      	ldrb	r2, [r7, #15]
 800ea64:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ea68:	7bfb      	ldrb	r3, [r7, #15]
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f003 fc83 	bl	8012378 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 fa61 	bl	800ef3a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ea78:	7bfb      	ldrb	r3, [r7, #15]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d004      	beq.n	800ea88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2202      	movs	r2, #2
 800ea82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea86:	e009      	b.n	800ea9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea90:	e004      	b.n	800ea9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ea92:	6839      	ldr	r1, [r7, #0]
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f000 f985 	bl	800eda4 <USBD_CtlError>
  }
}
 800ea9a:	bf00      	nop
 800ea9c:	bf00      	nop
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eaae:	2300      	movs	r3, #0
 800eab0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	885b      	ldrh	r3, [r3, #2]
 800eab6:	b2da      	uxtb	r2, r3
 800eab8:	4b4c      	ldr	r3, [pc, #304]	; (800ebec <USBD_SetConfig+0x148>)
 800eaba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eabc:	4b4b      	ldr	r3, [pc, #300]	; (800ebec <USBD_SetConfig+0x148>)
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d905      	bls.n	800ead0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800eac4:	6839      	ldr	r1, [r7, #0]
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f000 f96c 	bl	800eda4 <USBD_CtlError>
    return USBD_FAIL;
 800eacc:	2303      	movs	r3, #3
 800eace:	e088      	b.n	800ebe2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ead6:	b2db      	uxtb	r3, r3
 800ead8:	2b02      	cmp	r3, #2
 800eada:	d002      	beq.n	800eae2 <USBD_SetConfig+0x3e>
 800eadc:	2b03      	cmp	r3, #3
 800eade:	d025      	beq.n	800eb2c <USBD_SetConfig+0x88>
 800eae0:	e071      	b.n	800ebc6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800eae2:	4b42      	ldr	r3, [pc, #264]	; (800ebec <USBD_SetConfig+0x148>)
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d01c      	beq.n	800eb24 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800eaea:	4b40      	ldr	r3, [pc, #256]	; (800ebec <USBD_SetConfig+0x148>)
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eaf4:	4b3d      	ldr	r3, [pc, #244]	; (800ebec <USBD_SetConfig+0x148>)
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	4619      	mov	r1, r3
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f7ff f948 	bl	800dd90 <USBD_SetClassConfig>
 800eb00:	4603      	mov	r3, r0
 800eb02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800eb04:	7bfb      	ldrb	r3, [r7, #15]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d004      	beq.n	800eb14 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800eb0a:	6839      	ldr	r1, [r7, #0]
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 f949 	bl	800eda4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eb12:	e065      	b.n	800ebe0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f000 fa10 	bl	800ef3a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2203      	movs	r2, #3
 800eb1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eb22:	e05d      	b.n	800ebe0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 fa08 	bl	800ef3a <USBD_CtlSendStatus>
      break;
 800eb2a:	e059      	b.n	800ebe0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800eb2c:	4b2f      	ldr	r3, [pc, #188]	; (800ebec <USBD_SetConfig+0x148>)
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d112      	bne.n	800eb5a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2202      	movs	r2, #2
 800eb38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800eb3c:	4b2b      	ldr	r3, [pc, #172]	; (800ebec <USBD_SetConfig+0x148>)
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	461a      	mov	r2, r3
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eb46:	4b29      	ldr	r3, [pc, #164]	; (800ebec <USBD_SetConfig+0x148>)
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f7ff f93b 	bl	800ddc8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 f9f1 	bl	800ef3a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eb58:	e042      	b.n	800ebe0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800eb5a:	4b24      	ldr	r3, [pc, #144]	; (800ebec <USBD_SetConfig+0x148>)
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	461a      	mov	r2, r3
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d02a      	beq.n	800ebbe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	4619      	mov	r1, r3
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f7ff f929 	bl	800ddc8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800eb76:	4b1d      	ldr	r3, [pc, #116]	; (800ebec <USBD_SetConfig+0x148>)
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eb80:	4b1a      	ldr	r3, [pc, #104]	; (800ebec <USBD_SetConfig+0x148>)
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	4619      	mov	r1, r3
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f7ff f902 	bl	800dd90 <USBD_SetClassConfig>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800eb90:	7bfb      	ldrb	r3, [r7, #15]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d00f      	beq.n	800ebb6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800eb96:	6839      	ldr	r1, [r7, #0]
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f000 f903 	bl	800eda4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	4619      	mov	r1, r3
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7ff f90e 	bl	800ddc8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2202      	movs	r2, #2
 800ebb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ebb4:	e014      	b.n	800ebe0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f000 f9bf 	bl	800ef3a <USBD_CtlSendStatus>
      break;
 800ebbc:	e010      	b.n	800ebe0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 f9bb 	bl	800ef3a <USBD_CtlSendStatus>
      break;
 800ebc4:	e00c      	b.n	800ebe0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ebc6:	6839      	ldr	r1, [r7, #0]
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f000 f8eb 	bl	800eda4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ebce:	4b07      	ldr	r3, [pc, #28]	; (800ebec <USBD_SetConfig+0x148>)
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f7ff f8f7 	bl	800ddc8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ebda:	2303      	movs	r3, #3
 800ebdc:	73fb      	strb	r3, [r7, #15]
      break;
 800ebde:	bf00      	nop
  }

  return ret;
 800ebe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3710      	adds	r7, #16
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	2000023d 	.word	0x2000023d

0800ebf0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	88db      	ldrh	r3, [r3, #6]
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	d004      	beq.n	800ec0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ec02:	6839      	ldr	r1, [r7, #0]
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f000 f8cd 	bl	800eda4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ec0a:	e023      	b.n	800ec54 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	2b02      	cmp	r3, #2
 800ec16:	dc02      	bgt.n	800ec1e <USBD_GetConfig+0x2e>
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	dc03      	bgt.n	800ec24 <USBD_GetConfig+0x34>
 800ec1c:	e015      	b.n	800ec4a <USBD_GetConfig+0x5a>
 800ec1e:	2b03      	cmp	r3, #3
 800ec20:	d00b      	beq.n	800ec3a <USBD_GetConfig+0x4a>
 800ec22:	e012      	b.n	800ec4a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2200      	movs	r2, #0
 800ec28:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	3308      	adds	r3, #8
 800ec2e:	2201      	movs	r2, #1
 800ec30:	4619      	mov	r1, r3
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f000 f927 	bl	800ee86 <USBD_CtlSendData>
        break;
 800ec38:	e00c      	b.n	800ec54 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	3304      	adds	r3, #4
 800ec3e:	2201      	movs	r2, #1
 800ec40:	4619      	mov	r1, r3
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f000 f91f 	bl	800ee86 <USBD_CtlSendData>
        break;
 800ec48:	e004      	b.n	800ec54 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ec4a:	6839      	ldr	r1, [r7, #0]
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f000 f8a9 	bl	800eda4 <USBD_CtlError>
        break;
 800ec52:	bf00      	nop
}
 800ec54:	bf00      	nop
 800ec56:	3708      	adds	r7, #8
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	3b01      	subs	r3, #1
 800ec70:	2b02      	cmp	r3, #2
 800ec72:	d81e      	bhi.n	800ecb2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	88db      	ldrh	r3, [r3, #6]
 800ec78:	2b02      	cmp	r3, #2
 800ec7a:	d004      	beq.n	800ec86 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ec7c:	6839      	ldr	r1, [r7, #0]
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 f890 	bl	800eda4 <USBD_CtlError>
        break;
 800ec84:	e01a      	b.n	800ecbc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2201      	movs	r2, #1
 800ec8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d005      	beq.n	800eca2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	f043 0202 	orr.w	r2, r3, #2
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	330c      	adds	r3, #12
 800eca6:	2202      	movs	r2, #2
 800eca8:	4619      	mov	r1, r3
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 f8eb 	bl	800ee86 <USBD_CtlSendData>
      break;
 800ecb0:	e004      	b.n	800ecbc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ecb2:	6839      	ldr	r1, [r7, #0]
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 f875 	bl	800eda4 <USBD_CtlError>
      break;
 800ecba:	bf00      	nop
  }
}
 800ecbc:	bf00      	nop
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	885b      	ldrh	r3, [r3, #2]
 800ecd2:	2b01      	cmp	r3, #1
 800ecd4:	d106      	bne.n	800ece4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2201      	movs	r2, #1
 800ecda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 f92b 	bl	800ef3a <USBD_CtlSendStatus>
  }
}
 800ece4:	bf00      	nop
 800ece6:	3708      	adds	r7, #8
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	3b01      	subs	r3, #1
 800ed00:	2b02      	cmp	r3, #2
 800ed02:	d80b      	bhi.n	800ed1c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	885b      	ldrh	r3, [r3, #2]
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d10c      	bne.n	800ed26 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 f910 	bl	800ef3a <USBD_CtlSendStatus>
      }
      break;
 800ed1a:	e004      	b.n	800ed26 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ed1c:	6839      	ldr	r1, [r7, #0]
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f000 f840 	bl	800eda4 <USBD_CtlError>
      break;
 800ed24:	e000      	b.n	800ed28 <USBD_ClrFeature+0x3c>
      break;
 800ed26:	bf00      	nop
  }
}
 800ed28:	bf00      	nop
 800ed2a:	3708      	adds	r7, #8
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	781a      	ldrb	r2, [r3, #0]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	3301      	adds	r3, #1
 800ed4a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	781a      	ldrb	r2, [r3, #0]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	3301      	adds	r3, #1
 800ed58:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ed5a:	68f8      	ldr	r0, [r7, #12]
 800ed5c:	f7ff fabb 	bl	800e2d6 <SWAPBYTE>
 800ed60:	4603      	mov	r3, r0
 800ed62:	461a      	mov	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	3301      	adds	r3, #1
 800ed72:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ed74:	68f8      	ldr	r0, [r7, #12]
 800ed76:	f7ff faae 	bl	800e2d6 <SWAPBYTE>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	3301      	adds	r3, #1
 800ed86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	f7ff faa1 	bl	800e2d6 <SWAPBYTE>
 800ed94:	4603      	mov	r3, r0
 800ed96:	461a      	mov	r2, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	80da      	strh	r2, [r3, #6]
}
 800ed9c:	bf00      	nop
 800ed9e:	3710      	adds	r7, #16
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800edae:	2180      	movs	r1, #128	; 0x80
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f003 fa77 	bl	80122a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800edb6:	2100      	movs	r1, #0
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f003 fa73 	bl	80122a4 <USBD_LL_StallEP>
}
 800edbe:	bf00      	nop
 800edc0:	3708      	adds	r7, #8
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b086      	sub	sp, #24
 800edca:	af00      	add	r7, sp, #0
 800edcc:	60f8      	str	r0, [r7, #12]
 800edce:	60b9      	str	r1, [r7, #8]
 800edd0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800edd2:	2300      	movs	r3, #0
 800edd4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d036      	beq.n	800ee4a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ede0:	6938      	ldr	r0, [r7, #16]
 800ede2:	f000 f836 	bl	800ee52 <USBD_GetLen>
 800ede6:	4603      	mov	r3, r0
 800ede8:	3301      	adds	r3, #1
 800edea:	b29b      	uxth	r3, r3
 800edec:	005b      	lsls	r3, r3, #1
 800edee:	b29a      	uxth	r2, r3
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800edf4:	7dfb      	ldrb	r3, [r7, #23]
 800edf6:	68ba      	ldr	r2, [r7, #8]
 800edf8:	4413      	add	r3, r2
 800edfa:	687a      	ldr	r2, [r7, #4]
 800edfc:	7812      	ldrb	r2, [r2, #0]
 800edfe:	701a      	strb	r2, [r3, #0]
  idx++;
 800ee00:	7dfb      	ldrb	r3, [r7, #23]
 800ee02:	3301      	adds	r3, #1
 800ee04:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ee06:	7dfb      	ldrb	r3, [r7, #23]
 800ee08:	68ba      	ldr	r2, [r7, #8]
 800ee0a:	4413      	add	r3, r2
 800ee0c:	2203      	movs	r2, #3
 800ee0e:	701a      	strb	r2, [r3, #0]
  idx++;
 800ee10:	7dfb      	ldrb	r3, [r7, #23]
 800ee12:	3301      	adds	r3, #1
 800ee14:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ee16:	e013      	b.n	800ee40 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ee18:	7dfb      	ldrb	r3, [r7, #23]
 800ee1a:	68ba      	ldr	r2, [r7, #8]
 800ee1c:	4413      	add	r3, r2
 800ee1e:	693a      	ldr	r2, [r7, #16]
 800ee20:	7812      	ldrb	r2, [r2, #0]
 800ee22:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ee24:	693b      	ldr	r3, [r7, #16]
 800ee26:	3301      	adds	r3, #1
 800ee28:	613b      	str	r3, [r7, #16]
    idx++;
 800ee2a:	7dfb      	ldrb	r3, [r7, #23]
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ee30:	7dfb      	ldrb	r3, [r7, #23]
 800ee32:	68ba      	ldr	r2, [r7, #8]
 800ee34:	4413      	add	r3, r2
 800ee36:	2200      	movs	r2, #0
 800ee38:	701a      	strb	r2, [r3, #0]
    idx++;
 800ee3a:	7dfb      	ldrb	r3, [r7, #23]
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d1e7      	bne.n	800ee18 <USBD_GetString+0x52>
 800ee48:	e000      	b.n	800ee4c <USBD_GetString+0x86>
    return;
 800ee4a:	bf00      	nop
  }
}
 800ee4c:	3718      	adds	r7, #24
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ee52:	b480      	push	{r7}
 800ee54:	b085      	sub	sp, #20
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ee62:	e005      	b.n	800ee70 <USBD_GetLen+0x1e>
  {
    len++;
 800ee64:	7bfb      	ldrb	r3, [r7, #15]
 800ee66:	3301      	adds	r3, #1
 800ee68:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d1f5      	bne.n	800ee64 <USBD_GetLen+0x12>
  }

  return len;
 800ee78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3714      	adds	r7, #20
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr

0800ee86 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ee86:	b580      	push	{r7, lr}
 800ee88:	b084      	sub	sp, #16
 800ee8a:	af00      	add	r7, sp, #0
 800ee8c:	60f8      	str	r0, [r7, #12]
 800ee8e:	60b9      	str	r1, [r7, #8]
 800ee90:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2202      	movs	r2, #2
 800ee96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	687a      	ldr	r2, [r7, #4]
 800eea4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	68ba      	ldr	r2, [r7, #8]
 800eeaa:	2100      	movs	r1, #0
 800eeac:	68f8      	ldr	r0, [r7, #12]
 800eeae:	f003 fa82 	bl	80123b6 <USBD_LL_Transmit>

  return USBD_OK;
 800eeb2:	2300      	movs	r3, #0
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3710      	adds	r7, #16
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b084      	sub	sp, #16
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	68ba      	ldr	r2, [r7, #8]
 800eecc:	2100      	movs	r1, #0
 800eece:	68f8      	ldr	r0, [r7, #12]
 800eed0:	f003 fa71 	bl	80123b6 <USBD_LL_Transmit>

  return USBD_OK;
 800eed4:	2300      	movs	r3, #0
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3710      	adds	r7, #16
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}

0800eede <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eede:	b580      	push	{r7, lr}
 800eee0:	b084      	sub	sp, #16
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	60f8      	str	r0, [r7, #12]
 800eee6:	60b9      	str	r1, [r7, #8]
 800eee8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2203      	movs	r2, #3
 800eeee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	687a      	ldr	r2, [r7, #4]
 800eef6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	68ba      	ldr	r2, [r7, #8]
 800ef06:	2100      	movs	r1, #0
 800ef08:	68f8      	ldr	r0, [r7, #12]
 800ef0a:	f003 fa75 	bl	80123f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3710      	adds	r7, #16
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	68ba      	ldr	r2, [r7, #8]
 800ef28:	2100      	movs	r1, #0
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f003 fa64 	bl	80123f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef30:	2300      	movs	r3, #0
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3710      	adds	r7, #16
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}

0800ef3a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ef3a:	b580      	push	{r7, lr}
 800ef3c:	b082      	sub	sp, #8
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2204      	movs	r2, #4
 800ef46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	2100      	movs	r1, #0
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f003 fa30 	bl	80123b6 <USBD_LL_Transmit>

  return USBD_OK;
 800ef56:	2300      	movs	r3, #0
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2205      	movs	r2, #5
 800ef6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef70:	2300      	movs	r3, #0
 800ef72:	2200      	movs	r2, #0
 800ef74:	2100      	movs	r1, #0
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f003 fa3e 	bl	80123f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef7c:	2300      	movs	r3, #0
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
	...

0800ef88 <__NVIC_SetPriority>:
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	4603      	mov	r3, r0
 800ef90:	6039      	str	r1, [r7, #0]
 800ef92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ef94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	db0a      	blt.n	800efb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	490c      	ldr	r1, [pc, #48]	; (800efd4 <__NVIC_SetPriority+0x4c>)
 800efa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800efa6:	0112      	lsls	r2, r2, #4
 800efa8:	b2d2      	uxtb	r2, r2
 800efaa:	440b      	add	r3, r1
 800efac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800efb0:	e00a      	b.n	800efc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	b2da      	uxtb	r2, r3
 800efb6:	4908      	ldr	r1, [pc, #32]	; (800efd8 <__NVIC_SetPriority+0x50>)
 800efb8:	79fb      	ldrb	r3, [r7, #7]
 800efba:	f003 030f 	and.w	r3, r3, #15
 800efbe:	3b04      	subs	r3, #4
 800efc0:	0112      	lsls	r2, r2, #4
 800efc2:	b2d2      	uxtb	r2, r2
 800efc4:	440b      	add	r3, r1
 800efc6:	761a      	strb	r2, [r3, #24]
}
 800efc8:	bf00      	nop
 800efca:	370c      	adds	r7, #12
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr
 800efd4:	e000e100 	.word	0xe000e100
 800efd8:	e000ed00 	.word	0xe000ed00

0800efdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800efdc:	b580      	push	{r7, lr}
 800efde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800efe0:	4b05      	ldr	r3, [pc, #20]	; (800eff8 <SysTick_Handler+0x1c>)
 800efe2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800efe4:	f001 fcfe 	bl	80109e4 <xTaskGetSchedulerState>
 800efe8:	4603      	mov	r3, r0
 800efea:	2b01      	cmp	r3, #1
 800efec:	d001      	beq.n	800eff2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800efee:	f002 fae3 	bl	80115b8 <xPortSysTickHandler>
  }
}
 800eff2:	bf00      	nop
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	e000e010 	.word	0xe000e010

0800effc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800effc:	b580      	push	{r7, lr}
 800effe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f000:	2100      	movs	r1, #0
 800f002:	f06f 0004 	mvn.w	r0, #4
 800f006:	f7ff ffbf 	bl	800ef88 <__NVIC_SetPriority>
#endif
}
 800f00a:	bf00      	nop
 800f00c:	bd80      	pop	{r7, pc}
	...

0800f010 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f010:	b480      	push	{r7}
 800f012:	b083      	sub	sp, #12
 800f014:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f016:	f3ef 8305 	mrs	r3, IPSR
 800f01a:	603b      	str	r3, [r7, #0]
  return(result);
 800f01c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d003      	beq.n	800f02a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f022:	f06f 0305 	mvn.w	r3, #5
 800f026:	607b      	str	r3, [r7, #4]
 800f028:	e00c      	b.n	800f044 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f02a:	4b0a      	ldr	r3, [pc, #40]	; (800f054 <osKernelInitialize+0x44>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d105      	bne.n	800f03e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f032:	4b08      	ldr	r3, [pc, #32]	; (800f054 <osKernelInitialize+0x44>)
 800f034:	2201      	movs	r2, #1
 800f036:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f038:	2300      	movs	r3, #0
 800f03a:	607b      	str	r3, [r7, #4]
 800f03c:	e002      	b.n	800f044 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f03e:	f04f 33ff 	mov.w	r3, #4294967295
 800f042:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f044:	687b      	ldr	r3, [r7, #4]
}
 800f046:	4618      	mov	r0, r3
 800f048:	370c      	adds	r7, #12
 800f04a:	46bd      	mov	sp, r7
 800f04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f050:	4770      	bx	lr
 800f052:	bf00      	nop
 800f054:	20000240 	.word	0x20000240

0800f058 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f058:	b580      	push	{r7, lr}
 800f05a:	b082      	sub	sp, #8
 800f05c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f05e:	f3ef 8305 	mrs	r3, IPSR
 800f062:	603b      	str	r3, [r7, #0]
  return(result);
 800f064:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f066:	2b00      	cmp	r3, #0
 800f068:	d003      	beq.n	800f072 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f06a:	f06f 0305 	mvn.w	r3, #5
 800f06e:	607b      	str	r3, [r7, #4]
 800f070:	e010      	b.n	800f094 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f072:	4b0b      	ldr	r3, [pc, #44]	; (800f0a0 <osKernelStart+0x48>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	2b01      	cmp	r3, #1
 800f078:	d109      	bne.n	800f08e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f07a:	f7ff ffbf 	bl	800effc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f07e:	4b08      	ldr	r3, [pc, #32]	; (800f0a0 <osKernelStart+0x48>)
 800f080:	2202      	movs	r2, #2
 800f082:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f084:	f001 f866 	bl	8010154 <vTaskStartScheduler>
      stat = osOK;
 800f088:	2300      	movs	r3, #0
 800f08a:	607b      	str	r3, [r7, #4]
 800f08c:	e002      	b.n	800f094 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f08e:	f04f 33ff 	mov.w	r3, #4294967295
 800f092:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f094:	687b      	ldr	r3, [r7, #4]
}
 800f096:	4618      	mov	r0, r3
 800f098:	3708      	adds	r7, #8
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	20000240 	.word	0x20000240

0800f0a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b08e      	sub	sp, #56	; 0x38
 800f0a8:	af04      	add	r7, sp, #16
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	60b9      	str	r1, [r7, #8]
 800f0ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0b4:	f3ef 8305 	mrs	r3, IPSR
 800f0b8:	617b      	str	r3, [r7, #20]
  return(result);
 800f0ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d17e      	bne.n	800f1be <osThreadNew+0x11a>
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d07b      	beq.n	800f1be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f0c6:	2380      	movs	r3, #128	; 0x80
 800f0c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f0ca:	2318      	movs	r3, #24
 800f0cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800f0d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d045      	beq.n	800f16a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d002      	beq.n	800f0ec <osThreadNew+0x48>
        name = attr->name;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	699b      	ldr	r3, [r3, #24]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d002      	beq.n	800f0fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	699b      	ldr	r3, [r3, #24]
 800f0f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d008      	beq.n	800f112 <osThreadNew+0x6e>
 800f100:	69fb      	ldr	r3, [r7, #28]
 800f102:	2b38      	cmp	r3, #56	; 0x38
 800f104:	d805      	bhi.n	800f112 <osThreadNew+0x6e>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	f003 0301 	and.w	r3, r3, #1
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d001      	beq.n	800f116 <osThreadNew+0x72>
        return (NULL);
 800f112:	2300      	movs	r3, #0
 800f114:	e054      	b.n	800f1c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	695b      	ldr	r3, [r3, #20]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d003      	beq.n	800f126 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	695b      	ldr	r3, [r3, #20]
 800f122:	089b      	lsrs	r3, r3, #2
 800f124:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	689b      	ldr	r3, [r3, #8]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d00e      	beq.n	800f14c <osThreadNew+0xa8>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	68db      	ldr	r3, [r3, #12]
 800f132:	2b5b      	cmp	r3, #91	; 0x5b
 800f134:	d90a      	bls.n	800f14c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d006      	beq.n	800f14c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	695b      	ldr	r3, [r3, #20]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d002      	beq.n	800f14c <osThreadNew+0xa8>
        mem = 1;
 800f146:	2301      	movs	r3, #1
 800f148:	61bb      	str	r3, [r7, #24]
 800f14a:	e010      	b.n	800f16e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	689b      	ldr	r3, [r3, #8]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d10c      	bne.n	800f16e <osThreadNew+0xca>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	68db      	ldr	r3, [r3, #12]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d108      	bne.n	800f16e <osThreadNew+0xca>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	691b      	ldr	r3, [r3, #16]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d104      	bne.n	800f16e <osThreadNew+0xca>
          mem = 0;
 800f164:	2300      	movs	r3, #0
 800f166:	61bb      	str	r3, [r7, #24]
 800f168:	e001      	b.n	800f16e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f16a:	2300      	movs	r3, #0
 800f16c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	2b01      	cmp	r3, #1
 800f172:	d110      	bne.n	800f196 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f178:	687a      	ldr	r2, [r7, #4]
 800f17a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f17c:	9202      	str	r2, [sp, #8]
 800f17e:	9301      	str	r3, [sp, #4]
 800f180:	69fb      	ldr	r3, [r7, #28]
 800f182:	9300      	str	r3, [sp, #0]
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	6a3a      	ldr	r2, [r7, #32]
 800f188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f18a:	68f8      	ldr	r0, [r7, #12]
 800f18c:	f000 fe0c 	bl	800fda8 <xTaskCreateStatic>
 800f190:	4603      	mov	r3, r0
 800f192:	613b      	str	r3, [r7, #16]
 800f194:	e013      	b.n	800f1be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f196:	69bb      	ldr	r3, [r7, #24]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d110      	bne.n	800f1be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f19c:	6a3b      	ldr	r3, [r7, #32]
 800f19e:	b29a      	uxth	r2, r3
 800f1a0:	f107 0310 	add.w	r3, r7, #16
 800f1a4:	9301      	str	r3, [sp, #4]
 800f1a6:	69fb      	ldr	r3, [r7, #28]
 800f1a8:	9300      	str	r3, [sp, #0]
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f1ae:	68f8      	ldr	r0, [r7, #12]
 800f1b0:	f000 fe57 	bl	800fe62 <xTaskCreate>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	d001      	beq.n	800f1be <osThreadNew+0x11a>
            hTask = NULL;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f1be:	693b      	ldr	r3, [r7, #16]
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3728      	adds	r7, #40	; 0x28
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1d0:	f3ef 8305 	mrs	r3, IPSR
 800f1d4:	60bb      	str	r3, [r7, #8]
  return(result);
 800f1d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d003      	beq.n	800f1e4 <osDelay+0x1c>
    stat = osErrorISR;
 800f1dc:	f06f 0305 	mvn.w	r3, #5
 800f1e0:	60fb      	str	r3, [r7, #12]
 800f1e2:	e007      	b.n	800f1f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d002      	beq.n	800f1f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 ff7c 	bl	80100ec <vTaskDelay>
    }
  }

  return (stat);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3710      	adds	r7, #16
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
	...

0800f200 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f200:	b480      	push	{r7}
 800f202:	b085      	sub	sp, #20
 800f204:	af00      	add	r7, sp, #0
 800f206:	60f8      	str	r0, [r7, #12]
 800f208:	60b9      	str	r1, [r7, #8]
 800f20a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	4a07      	ldr	r2, [pc, #28]	; (800f22c <vApplicationGetIdleTaskMemory+0x2c>)
 800f210:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	4a06      	ldr	r2, [pc, #24]	; (800f230 <vApplicationGetIdleTaskMemory+0x30>)
 800f216:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2280      	movs	r2, #128	; 0x80
 800f21c:	601a      	str	r2, [r3, #0]
}
 800f21e:	bf00      	nop
 800f220:	3714      	adds	r7, #20
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr
 800f22a:	bf00      	nop
 800f22c:	20000244 	.word	0x20000244
 800f230:	200002a0 	.word	0x200002a0

0800f234 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f234:	b480      	push	{r7}
 800f236:	b085      	sub	sp, #20
 800f238:	af00      	add	r7, sp, #0
 800f23a:	60f8      	str	r0, [r7, #12]
 800f23c:	60b9      	str	r1, [r7, #8]
 800f23e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	4a07      	ldr	r2, [pc, #28]	; (800f260 <vApplicationGetTimerTaskMemory+0x2c>)
 800f244:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	4a06      	ldr	r2, [pc, #24]	; (800f264 <vApplicationGetTimerTaskMemory+0x30>)
 800f24a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f252:	601a      	str	r2, [r3, #0]
}
 800f254:	bf00      	nop
 800f256:	3714      	adds	r7, #20
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr
 800f260:	200004a0 	.word	0x200004a0
 800f264:	200004fc 	.word	0x200004fc

0800f268 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f268:	b480      	push	{r7}
 800f26a:	b083      	sub	sp, #12
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f103 0208 	add.w	r2, r3, #8
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f04f 32ff 	mov.w	r2, #4294967295
 800f280:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f103 0208 	add.w	r2, r3, #8
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f103 0208 	add.w	r2, r3, #8
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2200      	movs	r2, #0
 800f29a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f29c:	bf00      	nop
 800f29e:	370c      	adds	r7, #12
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr

0800f2a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b083      	sub	sp, #12
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f2b6:	bf00      	nop
 800f2b8:	370c      	adds	r7, #12
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr

0800f2c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f2c2:	b480      	push	{r7}
 800f2c4:	b085      	sub	sp, #20
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
 800f2ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	689a      	ldr	r2, [r3, #8]
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	689b      	ldr	r3, [r3, #8]
 800f2e4:	683a      	ldr	r2, [r7, #0]
 800f2e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	683a      	ldr	r2, [r7, #0]
 800f2ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	687a      	ldr	r2, [r7, #4]
 800f2f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	1c5a      	adds	r2, r3, #1
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	601a      	str	r2, [r3, #0]
}
 800f2fe:	bf00      	nop
 800f300:	3714      	adds	r7, #20
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr

0800f30a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f30a:	b480      	push	{r7}
 800f30c:	b085      	sub	sp, #20
 800f30e:	af00      	add	r7, sp, #0
 800f310:	6078      	str	r0, [r7, #4]
 800f312:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f320:	d103      	bne.n	800f32a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	691b      	ldr	r3, [r3, #16]
 800f326:	60fb      	str	r3, [r7, #12]
 800f328:	e00c      	b.n	800f344 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	3308      	adds	r3, #8
 800f32e:	60fb      	str	r3, [r7, #12]
 800f330:	e002      	b.n	800f338 <vListInsert+0x2e>
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	60fb      	str	r3, [r7, #12]
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	68ba      	ldr	r2, [r7, #8]
 800f340:	429a      	cmp	r2, r3
 800f342:	d2f6      	bcs.n	800f332 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	685a      	ldr	r2, [r3, #4]
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	683a      	ldr	r2, [r7, #0]
 800f352:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	68fa      	ldr	r2, [r7, #12]
 800f358:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	683a      	ldr	r2, [r7, #0]
 800f35e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	1c5a      	adds	r2, r3, #1
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	601a      	str	r2, [r3, #0]
}
 800f370:	bf00      	nop
 800f372:	3714      	adds	r7, #20
 800f374:	46bd      	mov	sp, r7
 800f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37a:	4770      	bx	lr

0800f37c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f37c:	b480      	push	{r7}
 800f37e:	b085      	sub	sp, #20
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	691b      	ldr	r3, [r3, #16]
 800f388:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	6892      	ldr	r2, [r2, #8]
 800f392:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	689b      	ldr	r3, [r3, #8]
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	6852      	ldr	r2, [r2, #4]
 800f39c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d103      	bne.n	800f3b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	689a      	ldr	r2, [r3, #8]
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	1e5a      	subs	r2, r3, #1
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3714      	adds	r7, #20
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr

0800f3d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d10a      	bne.n	800f3fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e8:	f383 8811 	msr	BASEPRI, r3
 800f3ec:	f3bf 8f6f 	isb	sy
 800f3f0:	f3bf 8f4f 	dsb	sy
 800f3f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f3f6:	bf00      	nop
 800f3f8:	e7fe      	b.n	800f3f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f3fa:	f002 f84b 	bl	8011494 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f406:	68f9      	ldr	r1, [r7, #12]
 800f408:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f40a:	fb01 f303 	mul.w	r3, r1, r3
 800f40e:	441a      	add	r2, r3
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2200      	movs	r2, #0
 800f418:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681a      	ldr	r2, [r3, #0]
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f42a:	3b01      	subs	r3, #1
 800f42c:	68f9      	ldr	r1, [r7, #12]
 800f42e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f430:	fb01 f303 	mul.w	r3, r1, r3
 800f434:	441a      	add	r2, r3
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	22ff      	movs	r2, #255	; 0xff
 800f43e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	22ff      	movs	r2, #255	; 0xff
 800f446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d114      	bne.n	800f47a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	691b      	ldr	r3, [r3, #16]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d01a      	beq.n	800f48e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	3310      	adds	r3, #16
 800f45c:	4618      	mov	r0, r3
 800f45e:	f001 f903 	bl	8010668 <xTaskRemoveFromEventList>
 800f462:	4603      	mov	r3, r0
 800f464:	2b00      	cmp	r3, #0
 800f466:	d012      	beq.n	800f48e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f468:	4b0c      	ldr	r3, [pc, #48]	; (800f49c <xQueueGenericReset+0xcc>)
 800f46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f46e:	601a      	str	r2, [r3, #0]
 800f470:	f3bf 8f4f 	dsb	sy
 800f474:	f3bf 8f6f 	isb	sy
 800f478:	e009      	b.n	800f48e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	3310      	adds	r3, #16
 800f47e:	4618      	mov	r0, r3
 800f480:	f7ff fef2 	bl	800f268 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	3324      	adds	r3, #36	; 0x24
 800f488:	4618      	mov	r0, r3
 800f48a:	f7ff feed 	bl	800f268 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f48e:	f002 f831 	bl	80114f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f492:	2301      	movs	r3, #1
}
 800f494:	4618      	mov	r0, r3
 800f496:	3710      	adds	r7, #16
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}
 800f49c:	e000ed04 	.word	0xe000ed04

0800f4a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b08e      	sub	sp, #56	; 0x38
 800f4a4:	af02      	add	r7, sp, #8
 800f4a6:	60f8      	str	r0, [r7, #12]
 800f4a8:	60b9      	str	r1, [r7, #8]
 800f4aa:	607a      	str	r2, [r7, #4]
 800f4ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d10a      	bne.n	800f4ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b8:	f383 8811 	msr	BASEPRI, r3
 800f4bc:	f3bf 8f6f 	isb	sy
 800f4c0:	f3bf 8f4f 	dsb	sy
 800f4c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f4c6:	bf00      	nop
 800f4c8:	e7fe      	b.n	800f4c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d10a      	bne.n	800f4e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d4:	f383 8811 	msr	BASEPRI, r3
 800f4d8:	f3bf 8f6f 	isb	sy
 800f4dc:	f3bf 8f4f 	dsb	sy
 800f4e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f4e2:	bf00      	nop
 800f4e4:	e7fe      	b.n	800f4e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d002      	beq.n	800f4f2 <xQueueGenericCreateStatic+0x52>
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d001      	beq.n	800f4f6 <xQueueGenericCreateStatic+0x56>
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	e000      	b.n	800f4f8 <xQueueGenericCreateStatic+0x58>
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d10a      	bne.n	800f512 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f500:	f383 8811 	msr	BASEPRI, r3
 800f504:	f3bf 8f6f 	isb	sy
 800f508:	f3bf 8f4f 	dsb	sy
 800f50c:	623b      	str	r3, [r7, #32]
}
 800f50e:	bf00      	nop
 800f510:	e7fe      	b.n	800f510 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d102      	bne.n	800f51e <xQueueGenericCreateStatic+0x7e>
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d101      	bne.n	800f522 <xQueueGenericCreateStatic+0x82>
 800f51e:	2301      	movs	r3, #1
 800f520:	e000      	b.n	800f524 <xQueueGenericCreateStatic+0x84>
 800f522:	2300      	movs	r3, #0
 800f524:	2b00      	cmp	r3, #0
 800f526:	d10a      	bne.n	800f53e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f52c:	f383 8811 	msr	BASEPRI, r3
 800f530:	f3bf 8f6f 	isb	sy
 800f534:	f3bf 8f4f 	dsb	sy
 800f538:	61fb      	str	r3, [r7, #28]
}
 800f53a:	bf00      	nop
 800f53c:	e7fe      	b.n	800f53c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f53e:	2350      	movs	r3, #80	; 0x50
 800f540:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	2b50      	cmp	r3, #80	; 0x50
 800f546:	d00a      	beq.n	800f55e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54c:	f383 8811 	msr	BASEPRI, r3
 800f550:	f3bf 8f6f 	isb	sy
 800f554:	f3bf 8f4f 	dsb	sy
 800f558:	61bb      	str	r3, [r7, #24]
}
 800f55a:	bf00      	nop
 800f55c:	e7fe      	b.n	800f55c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f55e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f566:	2b00      	cmp	r3, #0
 800f568:	d00d      	beq.n	800f586 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f56c:	2201      	movs	r2, #1
 800f56e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f572:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f578:	9300      	str	r3, [sp, #0]
 800f57a:	4613      	mov	r3, r2
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	68b9      	ldr	r1, [r7, #8]
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f000 f805 	bl	800f590 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f588:	4618      	mov	r0, r3
 800f58a:	3730      	adds	r7, #48	; 0x30
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
 800f59c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d103      	bne.n	800f5ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f5a4:	69bb      	ldr	r3, [r7, #24]
 800f5a6:	69ba      	ldr	r2, [r7, #24]
 800f5a8:	601a      	str	r2, [r3, #0]
 800f5aa:	e002      	b.n	800f5b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f5ac:	69bb      	ldr	r3, [r7, #24]
 800f5ae:	687a      	ldr	r2, [r7, #4]
 800f5b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	68fa      	ldr	r2, [r7, #12]
 800f5b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	68ba      	ldr	r2, [r7, #8]
 800f5bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f5be:	2101      	movs	r1, #1
 800f5c0:	69b8      	ldr	r0, [r7, #24]
 800f5c2:	f7ff ff05 	bl	800f3d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f5c6:	69bb      	ldr	r3, [r7, #24]
 800f5c8:	78fa      	ldrb	r2, [r7, #3]
 800f5ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f5ce:	bf00      	nop
 800f5d0:	3710      	adds	r7, #16
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
	...

0800f5d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b08e      	sub	sp, #56	; 0x38
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	60b9      	str	r1, [r7, #8]
 800f5e2:	607a      	str	r2, [r7, #4]
 800f5e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d10a      	bne.n	800f60a <xQueueGenericSend+0x32>
	__asm volatile
 800f5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f8:	f383 8811 	msr	BASEPRI, r3
 800f5fc:	f3bf 8f6f 	isb	sy
 800f600:	f3bf 8f4f 	dsb	sy
 800f604:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f606:	bf00      	nop
 800f608:	e7fe      	b.n	800f608 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d103      	bne.n	800f618 <xQueueGenericSend+0x40>
 800f610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f614:	2b00      	cmp	r3, #0
 800f616:	d101      	bne.n	800f61c <xQueueGenericSend+0x44>
 800f618:	2301      	movs	r3, #1
 800f61a:	e000      	b.n	800f61e <xQueueGenericSend+0x46>
 800f61c:	2300      	movs	r3, #0
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d10a      	bne.n	800f638 <xQueueGenericSend+0x60>
	__asm volatile
 800f622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f626:	f383 8811 	msr	BASEPRI, r3
 800f62a:	f3bf 8f6f 	isb	sy
 800f62e:	f3bf 8f4f 	dsb	sy
 800f632:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f634:	bf00      	nop
 800f636:	e7fe      	b.n	800f636 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	2b02      	cmp	r3, #2
 800f63c:	d103      	bne.n	800f646 <xQueueGenericSend+0x6e>
 800f63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f642:	2b01      	cmp	r3, #1
 800f644:	d101      	bne.n	800f64a <xQueueGenericSend+0x72>
 800f646:	2301      	movs	r3, #1
 800f648:	e000      	b.n	800f64c <xQueueGenericSend+0x74>
 800f64a:	2300      	movs	r3, #0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d10a      	bne.n	800f666 <xQueueGenericSend+0x8e>
	__asm volatile
 800f650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f654:	f383 8811 	msr	BASEPRI, r3
 800f658:	f3bf 8f6f 	isb	sy
 800f65c:	f3bf 8f4f 	dsb	sy
 800f660:	623b      	str	r3, [r7, #32]
}
 800f662:	bf00      	nop
 800f664:	e7fe      	b.n	800f664 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f666:	f001 f9bd 	bl	80109e4 <xTaskGetSchedulerState>
 800f66a:	4603      	mov	r3, r0
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d102      	bne.n	800f676 <xQueueGenericSend+0x9e>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d101      	bne.n	800f67a <xQueueGenericSend+0xa2>
 800f676:	2301      	movs	r3, #1
 800f678:	e000      	b.n	800f67c <xQueueGenericSend+0xa4>
 800f67a:	2300      	movs	r3, #0
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d10a      	bne.n	800f696 <xQueueGenericSend+0xbe>
	__asm volatile
 800f680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f684:	f383 8811 	msr	BASEPRI, r3
 800f688:	f3bf 8f6f 	isb	sy
 800f68c:	f3bf 8f4f 	dsb	sy
 800f690:	61fb      	str	r3, [r7, #28]
}
 800f692:	bf00      	nop
 800f694:	e7fe      	b.n	800f694 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f696:	f001 fefd 	bl	8011494 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d302      	bcc.n	800f6ac <xQueueGenericSend+0xd4>
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	2b02      	cmp	r3, #2
 800f6aa:	d129      	bne.n	800f700 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f6ac:	683a      	ldr	r2, [r7, #0]
 800f6ae:	68b9      	ldr	r1, [r7, #8]
 800f6b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6b2:	f000 fa0b 	bl	800facc <prvCopyDataToQueue>
 800f6b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d010      	beq.n	800f6e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c2:	3324      	adds	r3, #36	; 0x24
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f000 ffcf 	bl	8010668 <xTaskRemoveFromEventList>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d013      	beq.n	800f6f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f6d0:	4b3f      	ldr	r3, [pc, #252]	; (800f7d0 <xQueueGenericSend+0x1f8>)
 800f6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6d6:	601a      	str	r2, [r3, #0]
 800f6d8:	f3bf 8f4f 	dsb	sy
 800f6dc:	f3bf 8f6f 	isb	sy
 800f6e0:	e00a      	b.n	800f6f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d007      	beq.n	800f6f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f6e8:	4b39      	ldr	r3, [pc, #228]	; (800f7d0 <xQueueGenericSend+0x1f8>)
 800f6ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6ee:	601a      	str	r2, [r3, #0]
 800f6f0:	f3bf 8f4f 	dsb	sy
 800f6f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f6f8:	f001 fefc 	bl	80114f4 <vPortExitCritical>
				return pdPASS;
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	e063      	b.n	800f7c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d103      	bne.n	800f70e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f706:	f001 fef5 	bl	80114f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f70a:	2300      	movs	r3, #0
 800f70c:	e05c      	b.n	800f7c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f710:	2b00      	cmp	r3, #0
 800f712:	d106      	bne.n	800f722 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f714:	f107 0314 	add.w	r3, r7, #20
 800f718:	4618      	mov	r0, r3
 800f71a:	f001 f809 	bl	8010730 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f71e:	2301      	movs	r3, #1
 800f720:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f722:	f001 fee7 	bl	80114f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f726:	f000 fd7b 	bl	8010220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f72a:	f001 feb3 	bl	8011494 <vPortEnterCritical>
 800f72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f730:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f734:	b25b      	sxtb	r3, r3
 800f736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f73a:	d103      	bne.n	800f744 <xQueueGenericSend+0x16c>
 800f73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73e:	2200      	movs	r2, #0
 800f740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f74a:	b25b      	sxtb	r3, r3
 800f74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f750:	d103      	bne.n	800f75a <xQueueGenericSend+0x182>
 800f752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f754:	2200      	movs	r2, #0
 800f756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f75a:	f001 fecb 	bl	80114f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f75e:	1d3a      	adds	r2, r7, #4
 800f760:	f107 0314 	add.w	r3, r7, #20
 800f764:	4611      	mov	r1, r2
 800f766:	4618      	mov	r0, r3
 800f768:	f000 fff8 	bl	801075c <xTaskCheckForTimeOut>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d124      	bne.n	800f7bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f774:	f000 faa2 	bl	800fcbc <prvIsQueueFull>
 800f778:	4603      	mov	r3, r0
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d018      	beq.n	800f7b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f780:	3310      	adds	r3, #16
 800f782:	687a      	ldr	r2, [r7, #4]
 800f784:	4611      	mov	r1, r2
 800f786:	4618      	mov	r0, r3
 800f788:	f000 ff1e 	bl	80105c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f78c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f78e:	f000 fa2d 	bl	800fbec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f792:	f000 fd53 	bl	801023c <xTaskResumeAll>
 800f796:	4603      	mov	r3, r0
 800f798:	2b00      	cmp	r3, #0
 800f79a:	f47f af7c 	bne.w	800f696 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f79e:	4b0c      	ldr	r3, [pc, #48]	; (800f7d0 <xQueueGenericSend+0x1f8>)
 800f7a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7a4:	601a      	str	r2, [r3, #0]
 800f7a6:	f3bf 8f4f 	dsb	sy
 800f7aa:	f3bf 8f6f 	isb	sy
 800f7ae:	e772      	b.n	800f696 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f7b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7b2:	f000 fa1b 	bl	800fbec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f7b6:	f000 fd41 	bl	801023c <xTaskResumeAll>
 800f7ba:	e76c      	b.n	800f696 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f7bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7be:	f000 fa15 	bl	800fbec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f7c2:	f000 fd3b 	bl	801023c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f7c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3738      	adds	r7, #56	; 0x38
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	e000ed04 	.word	0xe000ed04

0800f7d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b090      	sub	sp, #64	; 0x40
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	60b9      	str	r1, [r7, #8]
 800f7de:	607a      	str	r2, [r7, #4]
 800f7e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d10a      	bne.n	800f802 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f0:	f383 8811 	msr	BASEPRI, r3
 800f7f4:	f3bf 8f6f 	isb	sy
 800f7f8:	f3bf 8f4f 	dsb	sy
 800f7fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f7fe:	bf00      	nop
 800f800:	e7fe      	b.n	800f800 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d103      	bne.n	800f810 <xQueueGenericSendFromISR+0x3c>
 800f808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d101      	bne.n	800f814 <xQueueGenericSendFromISR+0x40>
 800f810:	2301      	movs	r3, #1
 800f812:	e000      	b.n	800f816 <xQueueGenericSendFromISR+0x42>
 800f814:	2300      	movs	r3, #0
 800f816:	2b00      	cmp	r3, #0
 800f818:	d10a      	bne.n	800f830 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f81e:	f383 8811 	msr	BASEPRI, r3
 800f822:	f3bf 8f6f 	isb	sy
 800f826:	f3bf 8f4f 	dsb	sy
 800f82a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f82c:	bf00      	nop
 800f82e:	e7fe      	b.n	800f82e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	2b02      	cmp	r3, #2
 800f834:	d103      	bne.n	800f83e <xQueueGenericSendFromISR+0x6a>
 800f836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	d101      	bne.n	800f842 <xQueueGenericSendFromISR+0x6e>
 800f83e:	2301      	movs	r3, #1
 800f840:	e000      	b.n	800f844 <xQueueGenericSendFromISR+0x70>
 800f842:	2300      	movs	r3, #0
 800f844:	2b00      	cmp	r3, #0
 800f846:	d10a      	bne.n	800f85e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f84c:	f383 8811 	msr	BASEPRI, r3
 800f850:	f3bf 8f6f 	isb	sy
 800f854:	f3bf 8f4f 	dsb	sy
 800f858:	623b      	str	r3, [r7, #32]
}
 800f85a:	bf00      	nop
 800f85c:	e7fe      	b.n	800f85c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f85e:	f001 fefb 	bl	8011658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f862:	f3ef 8211 	mrs	r2, BASEPRI
 800f866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f86a:	f383 8811 	msr	BASEPRI, r3
 800f86e:	f3bf 8f6f 	isb	sy
 800f872:	f3bf 8f4f 	dsb	sy
 800f876:	61fa      	str	r2, [r7, #28]
 800f878:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f87a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f87c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f886:	429a      	cmp	r2, r3
 800f888:	d302      	bcc.n	800f890 <xQueueGenericSendFromISR+0xbc>
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	2b02      	cmp	r3, #2
 800f88e:	d12f      	bne.n	800f8f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f89e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f8a0:	683a      	ldr	r2, [r7, #0]
 800f8a2:	68b9      	ldr	r1, [r7, #8]
 800f8a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f8a6:	f000 f911 	bl	800facc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f8aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8b2:	d112      	bne.n	800f8da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d016      	beq.n	800f8ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8be:	3324      	adds	r3, #36	; 0x24
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f000 fed1 	bl	8010668 <xTaskRemoveFromEventList>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d00e      	beq.n	800f8ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d00b      	beq.n	800f8ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	601a      	str	r2, [r3, #0]
 800f8d8:	e007      	b.n	800f8ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f8da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f8de:	3301      	adds	r3, #1
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	b25a      	sxtb	r2, r3
 800f8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f8ee:	e001      	b.n	800f8f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f8fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f902:	4618      	mov	r0, r3
 800f904:	3740      	adds	r7, #64	; 0x40
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
	...

0800f90c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b08c      	sub	sp, #48	; 0x30
 800f910:	af00      	add	r7, sp, #0
 800f912:	60f8      	str	r0, [r7, #12]
 800f914:	60b9      	str	r1, [r7, #8]
 800f916:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f918:	2300      	movs	r3, #0
 800f91a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f922:	2b00      	cmp	r3, #0
 800f924:	d10a      	bne.n	800f93c <xQueueReceive+0x30>
	__asm volatile
 800f926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f92a:	f383 8811 	msr	BASEPRI, r3
 800f92e:	f3bf 8f6f 	isb	sy
 800f932:	f3bf 8f4f 	dsb	sy
 800f936:	623b      	str	r3, [r7, #32]
}
 800f938:	bf00      	nop
 800f93a:	e7fe      	b.n	800f93a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d103      	bne.n	800f94a <xQueueReceive+0x3e>
 800f942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f946:	2b00      	cmp	r3, #0
 800f948:	d101      	bne.n	800f94e <xQueueReceive+0x42>
 800f94a:	2301      	movs	r3, #1
 800f94c:	e000      	b.n	800f950 <xQueueReceive+0x44>
 800f94e:	2300      	movs	r3, #0
 800f950:	2b00      	cmp	r3, #0
 800f952:	d10a      	bne.n	800f96a <xQueueReceive+0x5e>
	__asm volatile
 800f954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f958:	f383 8811 	msr	BASEPRI, r3
 800f95c:	f3bf 8f6f 	isb	sy
 800f960:	f3bf 8f4f 	dsb	sy
 800f964:	61fb      	str	r3, [r7, #28]
}
 800f966:	bf00      	nop
 800f968:	e7fe      	b.n	800f968 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f96a:	f001 f83b 	bl	80109e4 <xTaskGetSchedulerState>
 800f96e:	4603      	mov	r3, r0
 800f970:	2b00      	cmp	r3, #0
 800f972:	d102      	bne.n	800f97a <xQueueReceive+0x6e>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d101      	bne.n	800f97e <xQueueReceive+0x72>
 800f97a:	2301      	movs	r3, #1
 800f97c:	e000      	b.n	800f980 <xQueueReceive+0x74>
 800f97e:	2300      	movs	r3, #0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d10a      	bne.n	800f99a <xQueueReceive+0x8e>
	__asm volatile
 800f984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f988:	f383 8811 	msr	BASEPRI, r3
 800f98c:	f3bf 8f6f 	isb	sy
 800f990:	f3bf 8f4f 	dsb	sy
 800f994:	61bb      	str	r3, [r7, #24]
}
 800f996:	bf00      	nop
 800f998:	e7fe      	b.n	800f998 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f99a:	f001 fd7b 	bl	8011494 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d01f      	beq.n	800f9ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f9aa:	68b9      	ldr	r1, [r7, #8]
 800f9ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9ae:	f000 f8f7 	bl	800fba0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b4:	1e5a      	subs	r2, r3, #1
 800f9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9bc:	691b      	ldr	r3, [r3, #16]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d00f      	beq.n	800f9e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c4:	3310      	adds	r3, #16
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f000 fe4e 	bl	8010668 <xTaskRemoveFromEventList>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d007      	beq.n	800f9e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f9d2:	4b3d      	ldr	r3, [pc, #244]	; (800fac8 <xQueueReceive+0x1bc>)
 800f9d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9d8:	601a      	str	r2, [r3, #0]
 800f9da:	f3bf 8f4f 	dsb	sy
 800f9de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f9e2:	f001 fd87 	bl	80114f4 <vPortExitCritical>
				return pdPASS;
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	e069      	b.n	800fabe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d103      	bne.n	800f9f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f9f0:	f001 fd80 	bl	80114f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	e062      	b.n	800fabe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d106      	bne.n	800fa0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f9fe:	f107 0310 	add.w	r3, r7, #16
 800fa02:	4618      	mov	r0, r3
 800fa04:	f000 fe94 	bl	8010730 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fa0c:	f001 fd72 	bl	80114f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fa10:	f000 fc06 	bl	8010220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fa14:	f001 fd3e 	bl	8011494 <vPortEnterCritical>
 800fa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa1e:	b25b      	sxtb	r3, r3
 800fa20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa24:	d103      	bne.n	800fa2e <xQueueReceive+0x122>
 800fa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa28:	2200      	movs	r2, #0
 800fa2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa34:	b25b      	sxtb	r3, r3
 800fa36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa3a:	d103      	bne.n	800fa44 <xQueueReceive+0x138>
 800fa3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa3e:	2200      	movs	r2, #0
 800fa40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa44:	f001 fd56 	bl	80114f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fa48:	1d3a      	adds	r2, r7, #4
 800fa4a:	f107 0310 	add.w	r3, r7, #16
 800fa4e:	4611      	mov	r1, r2
 800fa50:	4618      	mov	r0, r3
 800fa52:	f000 fe83 	bl	801075c <xTaskCheckForTimeOut>
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d123      	bne.n	800faa4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa5e:	f000 f917 	bl	800fc90 <prvIsQueueEmpty>
 800fa62:	4603      	mov	r3, r0
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d017      	beq.n	800fa98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6a:	3324      	adds	r3, #36	; 0x24
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	4611      	mov	r1, r2
 800fa70:	4618      	mov	r0, r3
 800fa72:	f000 fda9 	bl	80105c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fa76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa78:	f000 f8b8 	bl	800fbec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fa7c:	f000 fbde 	bl	801023c <xTaskResumeAll>
 800fa80:	4603      	mov	r3, r0
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d189      	bne.n	800f99a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800fa86:	4b10      	ldr	r3, [pc, #64]	; (800fac8 <xQueueReceive+0x1bc>)
 800fa88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa8c:	601a      	str	r2, [r3, #0]
 800fa8e:	f3bf 8f4f 	dsb	sy
 800fa92:	f3bf 8f6f 	isb	sy
 800fa96:	e780      	b.n	800f99a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fa98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa9a:	f000 f8a7 	bl	800fbec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa9e:	f000 fbcd 	bl	801023c <xTaskResumeAll>
 800faa2:	e77a      	b.n	800f99a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800faa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800faa6:	f000 f8a1 	bl	800fbec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800faaa:	f000 fbc7 	bl	801023c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800faae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fab0:	f000 f8ee 	bl	800fc90 <prvIsQueueEmpty>
 800fab4:	4603      	mov	r3, r0
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	f43f af6f 	beq.w	800f99a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fabc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3730      	adds	r7, #48	; 0x30
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
 800fac6:	bf00      	nop
 800fac8:	e000ed04 	.word	0xe000ed04

0800facc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800facc:	b580      	push	{r7, lr}
 800face:	b086      	sub	sp, #24
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	60f8      	str	r0, [r7, #12]
 800fad4:	60b9      	str	r1, [r7, #8]
 800fad6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fad8:	2300      	movs	r3, #0
 800fada:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fae0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d10d      	bne.n	800fb06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d14d      	bne.n	800fb8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	689b      	ldr	r3, [r3, #8]
 800faf6:	4618      	mov	r0, r3
 800faf8:	f000 ff92 	bl	8010a20 <xTaskPriorityDisinherit>
 800fafc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	2200      	movs	r2, #0
 800fb02:	609a      	str	r2, [r3, #8]
 800fb04:	e043      	b.n	800fb8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d119      	bne.n	800fb40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	6858      	ldr	r0, [r3, #4]
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb14:	461a      	mov	r2, r3
 800fb16:	68b9      	ldr	r1, [r7, #8]
 800fb18:	f002 fd10 	bl	801253c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	685a      	ldr	r2, [r3, #4]
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb24:	441a      	add	r2, r3
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	685a      	ldr	r2, [r3, #4]
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	689b      	ldr	r3, [r3, #8]
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d32b      	bcc.n	800fb8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	681a      	ldr	r2, [r3, #0]
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	605a      	str	r2, [r3, #4]
 800fb3e:	e026      	b.n	800fb8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	68d8      	ldr	r0, [r3, #12]
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb48:	461a      	mov	r2, r3
 800fb4a:	68b9      	ldr	r1, [r7, #8]
 800fb4c:	f002 fcf6 	bl	801253c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	68da      	ldr	r2, [r3, #12]
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb58:	425b      	negs	r3, r3
 800fb5a:	441a      	add	r2, r3
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	68da      	ldr	r2, [r3, #12]
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d207      	bcs.n	800fb7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	689a      	ldr	r2, [r3, #8]
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb74:	425b      	negs	r3, r3
 800fb76:	441a      	add	r2, r3
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2b02      	cmp	r3, #2
 800fb80:	d105      	bne.n	800fb8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d002      	beq.n	800fb8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	3b01      	subs	r3, #1
 800fb8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	1c5a      	adds	r2, r3, #1
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fb96:	697b      	ldr	r3, [r7, #20]
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3718      	adds	r7, #24
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d018      	beq.n	800fbe4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	68da      	ldr	r2, [r3, #12]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbba:	441a      	add	r2, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	68da      	ldr	r2, [r3, #12]
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	689b      	ldr	r3, [r3, #8]
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d303      	bcc.n	800fbd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681a      	ldr	r2, [r3, #0]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	68d9      	ldr	r1, [r3, #12]
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbdc:	461a      	mov	r2, r3
 800fbde:	6838      	ldr	r0, [r7, #0]
 800fbe0:	f002 fcac 	bl	801253c <memcpy>
	}
}
 800fbe4:	bf00      	nop
 800fbe6:	3708      	adds	r7, #8
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fbf4:	f001 fc4e 	bl	8011494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fbfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fc00:	e011      	b.n	800fc26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d012      	beq.n	800fc30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	3324      	adds	r3, #36	; 0x24
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f000 fd2a 	bl	8010668 <xTaskRemoveFromEventList>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d001      	beq.n	800fc1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fc1a:	f000 fe01 	bl	8010820 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fc1e:	7bfb      	ldrb	r3, [r7, #15]
 800fc20:	3b01      	subs	r3, #1
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fc26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	dce9      	bgt.n	800fc02 <prvUnlockQueue+0x16>
 800fc2e:	e000      	b.n	800fc32 <prvUnlockQueue+0x46>
					break;
 800fc30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	22ff      	movs	r2, #255	; 0xff
 800fc36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fc3a:	f001 fc5b 	bl	80114f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fc3e:	f001 fc29 	bl	8011494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fc4a:	e011      	b.n	800fc70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	691b      	ldr	r3, [r3, #16]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d012      	beq.n	800fc7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	3310      	adds	r3, #16
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f000 fd05 	bl	8010668 <xTaskRemoveFromEventList>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d001      	beq.n	800fc68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fc64:	f000 fddc 	bl	8010820 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fc68:	7bbb      	ldrb	r3, [r7, #14]
 800fc6a:	3b01      	subs	r3, #1
 800fc6c:	b2db      	uxtb	r3, r3
 800fc6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fc70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	dce9      	bgt.n	800fc4c <prvUnlockQueue+0x60>
 800fc78:	e000      	b.n	800fc7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fc7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	22ff      	movs	r2, #255	; 0xff
 800fc80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fc84:	f001 fc36 	bl	80114f4 <vPortExitCritical>
}
 800fc88:	bf00      	nop
 800fc8a:	3710      	adds	r7, #16
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fc98:	f001 fbfc 	bl	8011494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d102      	bne.n	800fcaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fca4:	2301      	movs	r3, #1
 800fca6:	60fb      	str	r3, [r7, #12]
 800fca8:	e001      	b.n	800fcae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fcae:	f001 fc21 	bl	80114f4 <vPortExitCritical>

	return xReturn;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3710      	adds	r7, #16
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b084      	sub	sp, #16
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fcc4:	f001 fbe6 	bl	8011494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d102      	bne.n	800fcda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	60fb      	str	r3, [r7, #12]
 800fcd8:	e001      	b.n	800fcde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fcde:	f001 fc09 	bl	80114f4 <vPortExitCritical>

	return xReturn;
 800fce2:	68fb      	ldr	r3, [r7, #12]
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3710      	adds	r7, #16
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}

0800fcec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fcec:	b480      	push	{r7}
 800fcee:	b085      	sub	sp, #20
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	60fb      	str	r3, [r7, #12]
 800fcfa:	e014      	b.n	800fd26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fcfc:	4a0f      	ldr	r2, [pc, #60]	; (800fd3c <vQueueAddToRegistry+0x50>)
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d10b      	bne.n	800fd20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fd08:	490c      	ldr	r1, [pc, #48]	; (800fd3c <vQueueAddToRegistry+0x50>)
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	683a      	ldr	r2, [r7, #0]
 800fd0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fd12:	4a0a      	ldr	r2, [pc, #40]	; (800fd3c <vQueueAddToRegistry+0x50>)
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	00db      	lsls	r3, r3, #3
 800fd18:	4413      	add	r3, r2
 800fd1a:	687a      	ldr	r2, [r7, #4]
 800fd1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fd1e:	e006      	b.n	800fd2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	3301      	adds	r3, #1
 800fd24:	60fb      	str	r3, [r7, #12]
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	2b07      	cmp	r3, #7
 800fd2a:	d9e7      	bls.n	800fcfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fd2c:	bf00      	nop
 800fd2e:	bf00      	nop
 800fd30:	3714      	adds	r7, #20
 800fd32:	46bd      	mov	sp, r7
 800fd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd38:	4770      	bx	lr
 800fd3a:	bf00      	nop
 800fd3c:	20005938 	.word	0x20005938

0800fd40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b086      	sub	sp, #24
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fd50:	f001 fba0 	bl	8011494 <vPortEnterCritical>
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd5a:	b25b      	sxtb	r3, r3
 800fd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd60:	d103      	bne.n	800fd6a <vQueueWaitForMessageRestricted+0x2a>
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	2200      	movs	r2, #0
 800fd66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd70:	b25b      	sxtb	r3, r3
 800fd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd76:	d103      	bne.n	800fd80 <vQueueWaitForMessageRestricted+0x40>
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd80:	f001 fbb8 	bl	80114f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d106      	bne.n	800fd9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	3324      	adds	r3, #36	; 0x24
 800fd90:	687a      	ldr	r2, [r7, #4]
 800fd92:	68b9      	ldr	r1, [r7, #8]
 800fd94:	4618      	mov	r0, r3
 800fd96:	f000 fc3b 	bl	8010610 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fd9a:	6978      	ldr	r0, [r7, #20]
 800fd9c:	f7ff ff26 	bl	800fbec <prvUnlockQueue>
	}
 800fda0:	bf00      	nop
 800fda2:	3718      	adds	r7, #24
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}

0800fda8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b08e      	sub	sp, #56	; 0x38
 800fdac:	af04      	add	r7, sp, #16
 800fdae:	60f8      	str	r0, [r7, #12]
 800fdb0:	60b9      	str	r1, [r7, #8]
 800fdb2:	607a      	str	r2, [r7, #4]
 800fdb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fdb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d10a      	bne.n	800fdd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800fdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc0:	f383 8811 	msr	BASEPRI, r3
 800fdc4:	f3bf 8f6f 	isb	sy
 800fdc8:	f3bf 8f4f 	dsb	sy
 800fdcc:	623b      	str	r3, [r7, #32]
}
 800fdce:	bf00      	nop
 800fdd0:	e7fe      	b.n	800fdd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d10a      	bne.n	800fdee <xTaskCreateStatic+0x46>
	__asm volatile
 800fdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fddc:	f383 8811 	msr	BASEPRI, r3
 800fde0:	f3bf 8f6f 	isb	sy
 800fde4:	f3bf 8f4f 	dsb	sy
 800fde8:	61fb      	str	r3, [r7, #28]
}
 800fdea:	bf00      	nop
 800fdec:	e7fe      	b.n	800fdec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fdee:	235c      	movs	r3, #92	; 0x5c
 800fdf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	2b5c      	cmp	r3, #92	; 0x5c
 800fdf6:	d00a      	beq.n	800fe0e <xTaskCreateStatic+0x66>
	__asm volatile
 800fdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfc:	f383 8811 	msr	BASEPRI, r3
 800fe00:	f3bf 8f6f 	isb	sy
 800fe04:	f3bf 8f4f 	dsb	sy
 800fe08:	61bb      	str	r3, [r7, #24]
}
 800fe0a:	bf00      	nop
 800fe0c:	e7fe      	b.n	800fe0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fe0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fe10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d01e      	beq.n	800fe54 <xTaskCreateStatic+0xac>
 800fe16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d01b      	beq.n	800fe54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fe1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fe20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fe26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe28:	2202      	movs	r2, #2
 800fe2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fe2e:	2300      	movs	r3, #0
 800fe30:	9303      	str	r3, [sp, #12]
 800fe32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe34:	9302      	str	r3, [sp, #8]
 800fe36:	f107 0314 	add.w	r3, r7, #20
 800fe3a:	9301      	str	r3, [sp, #4]
 800fe3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe3e:	9300      	str	r3, [sp, #0]
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	68b9      	ldr	r1, [r7, #8]
 800fe46:	68f8      	ldr	r0, [r7, #12]
 800fe48:	f000 f850 	bl	800feec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fe4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe4e:	f000 f8dd 	bl	801000c <prvAddNewTaskToReadyList>
 800fe52:	e001      	b.n	800fe58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fe54:	2300      	movs	r3, #0
 800fe56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fe58:	697b      	ldr	r3, [r7, #20]
	}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3728      	adds	r7, #40	; 0x28
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}

0800fe62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fe62:	b580      	push	{r7, lr}
 800fe64:	b08c      	sub	sp, #48	; 0x30
 800fe66:	af04      	add	r7, sp, #16
 800fe68:	60f8      	str	r0, [r7, #12]
 800fe6a:	60b9      	str	r1, [r7, #8]
 800fe6c:	603b      	str	r3, [r7, #0]
 800fe6e:	4613      	mov	r3, r2
 800fe70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fe72:	88fb      	ldrh	r3, [r7, #6]
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	4618      	mov	r0, r3
 800fe78:	f001 fc2e 	bl	80116d8 <pvPortMalloc>
 800fe7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d00e      	beq.n	800fea2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fe84:	205c      	movs	r0, #92	; 0x5c
 800fe86:	f001 fc27 	bl	80116d8 <pvPortMalloc>
 800fe8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d003      	beq.n	800fe9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	697a      	ldr	r2, [r7, #20]
 800fe96:	631a      	str	r2, [r3, #48]	; 0x30
 800fe98:	e005      	b.n	800fea6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fe9a:	6978      	ldr	r0, [r7, #20]
 800fe9c:	f001 fce8 	bl	8011870 <vPortFree>
 800fea0:	e001      	b.n	800fea6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fea2:	2300      	movs	r3, #0
 800fea4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fea6:	69fb      	ldr	r3, [r7, #28]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d017      	beq.n	800fedc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800feac:	69fb      	ldr	r3, [r7, #28]
 800feae:	2200      	movs	r2, #0
 800feb0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800feb4:	88fa      	ldrh	r2, [r7, #6]
 800feb6:	2300      	movs	r3, #0
 800feb8:	9303      	str	r3, [sp, #12]
 800feba:	69fb      	ldr	r3, [r7, #28]
 800febc:	9302      	str	r3, [sp, #8]
 800febe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec0:	9301      	str	r3, [sp, #4]
 800fec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec4:	9300      	str	r3, [sp, #0]
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	68b9      	ldr	r1, [r7, #8]
 800feca:	68f8      	ldr	r0, [r7, #12]
 800fecc:	f000 f80e 	bl	800feec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fed0:	69f8      	ldr	r0, [r7, #28]
 800fed2:	f000 f89b 	bl	801000c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fed6:	2301      	movs	r3, #1
 800fed8:	61bb      	str	r3, [r7, #24]
 800feda:	e002      	b.n	800fee2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fedc:	f04f 33ff 	mov.w	r3, #4294967295
 800fee0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fee2:	69bb      	ldr	r3, [r7, #24]
	}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3720      	adds	r7, #32
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b088      	sub	sp, #32
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	60f8      	str	r0, [r7, #12]
 800fef4:	60b9      	str	r1, [r7, #8]
 800fef6:	607a      	str	r2, [r7, #4]
 800fef8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	009b      	lsls	r3, r3, #2
 800ff02:	461a      	mov	r2, r3
 800ff04:	21a5      	movs	r1, #165	; 0xa5
 800ff06:	f002 fb27 	bl	8012558 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ff0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ff14:	3b01      	subs	r3, #1
 800ff16:	009b      	lsls	r3, r3, #2
 800ff18:	4413      	add	r3, r2
 800ff1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ff1c:	69bb      	ldr	r3, [r7, #24]
 800ff1e:	f023 0307 	bic.w	r3, r3, #7
 800ff22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ff24:	69bb      	ldr	r3, [r7, #24]
 800ff26:	f003 0307 	and.w	r3, r3, #7
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d00a      	beq.n	800ff44 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ff2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff32:	f383 8811 	msr	BASEPRI, r3
 800ff36:	f3bf 8f6f 	isb	sy
 800ff3a:	f3bf 8f4f 	dsb	sy
 800ff3e:	617b      	str	r3, [r7, #20]
}
 800ff40:	bf00      	nop
 800ff42:	e7fe      	b.n	800ff42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d01f      	beq.n	800ff8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	61fb      	str	r3, [r7, #28]
 800ff4e:	e012      	b.n	800ff76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ff50:	68ba      	ldr	r2, [r7, #8]
 800ff52:	69fb      	ldr	r3, [r7, #28]
 800ff54:	4413      	add	r3, r2
 800ff56:	7819      	ldrb	r1, [r3, #0]
 800ff58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff5a:	69fb      	ldr	r3, [r7, #28]
 800ff5c:	4413      	add	r3, r2
 800ff5e:	3334      	adds	r3, #52	; 0x34
 800ff60:	460a      	mov	r2, r1
 800ff62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ff64:	68ba      	ldr	r2, [r7, #8]
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	4413      	add	r3, r2
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d006      	beq.n	800ff7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	3301      	adds	r3, #1
 800ff74:	61fb      	str	r3, [r7, #28]
 800ff76:	69fb      	ldr	r3, [r7, #28]
 800ff78:	2b0f      	cmp	r3, #15
 800ff7a:	d9e9      	bls.n	800ff50 <prvInitialiseNewTask+0x64>
 800ff7c:	e000      	b.n	800ff80 <prvInitialiseNewTask+0x94>
			{
				break;
 800ff7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ff80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff82:	2200      	movs	r2, #0
 800ff84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ff88:	e003      	b.n	800ff92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ff8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ff92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff94:	2b37      	cmp	r3, #55	; 0x37
 800ff96:	d901      	bls.n	800ff9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ff98:	2337      	movs	r3, #55	; 0x37
 800ff9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ff9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffa0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ffa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffa6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ffa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffaa:	2200      	movs	r2, #0
 800ffac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ffae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb0:	3304      	adds	r3, #4
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7ff f978 	bl	800f2a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ffb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffba:	3318      	adds	r3, #24
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7ff f973 	bl	800f2a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ffc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ffce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ffd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ffd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffda:	2200      	movs	r2, #0
 800ffdc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ffde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ffe6:	683a      	ldr	r2, [r7, #0]
 800ffe8:	68f9      	ldr	r1, [r7, #12]
 800ffea:	69b8      	ldr	r0, [r7, #24]
 800ffec:	f001 f928 	bl	8011240 <pxPortInitialiseStack>
 800fff0:	4602      	mov	r2, r0
 800fff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d002      	beq.n	8010002 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010000:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010002:	bf00      	nop
 8010004:	3720      	adds	r7, #32
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
	...

0801000c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010014:	f001 fa3e 	bl	8011494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010018:	4b2d      	ldr	r3, [pc, #180]	; (80100d0 <prvAddNewTaskToReadyList+0xc4>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	3301      	adds	r3, #1
 801001e:	4a2c      	ldr	r2, [pc, #176]	; (80100d0 <prvAddNewTaskToReadyList+0xc4>)
 8010020:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010022:	4b2c      	ldr	r3, [pc, #176]	; (80100d4 <prvAddNewTaskToReadyList+0xc8>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d109      	bne.n	801003e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801002a:	4a2a      	ldr	r2, [pc, #168]	; (80100d4 <prvAddNewTaskToReadyList+0xc8>)
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010030:	4b27      	ldr	r3, [pc, #156]	; (80100d0 <prvAddNewTaskToReadyList+0xc4>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	2b01      	cmp	r3, #1
 8010036:	d110      	bne.n	801005a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010038:	f000 fc16 	bl	8010868 <prvInitialiseTaskLists>
 801003c:	e00d      	b.n	801005a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801003e:	4b26      	ldr	r3, [pc, #152]	; (80100d8 <prvAddNewTaskToReadyList+0xcc>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d109      	bne.n	801005a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010046:	4b23      	ldr	r3, [pc, #140]	; (80100d4 <prvAddNewTaskToReadyList+0xc8>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010050:	429a      	cmp	r2, r3
 8010052:	d802      	bhi.n	801005a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010054:	4a1f      	ldr	r2, [pc, #124]	; (80100d4 <prvAddNewTaskToReadyList+0xc8>)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801005a:	4b20      	ldr	r3, [pc, #128]	; (80100dc <prvAddNewTaskToReadyList+0xd0>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	3301      	adds	r3, #1
 8010060:	4a1e      	ldr	r2, [pc, #120]	; (80100dc <prvAddNewTaskToReadyList+0xd0>)
 8010062:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010064:	4b1d      	ldr	r3, [pc, #116]	; (80100dc <prvAddNewTaskToReadyList+0xd0>)
 8010066:	681a      	ldr	r2, [r3, #0]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010070:	4b1b      	ldr	r3, [pc, #108]	; (80100e0 <prvAddNewTaskToReadyList+0xd4>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	429a      	cmp	r2, r3
 8010076:	d903      	bls.n	8010080 <prvAddNewTaskToReadyList+0x74>
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801007c:	4a18      	ldr	r2, [pc, #96]	; (80100e0 <prvAddNewTaskToReadyList+0xd4>)
 801007e:	6013      	str	r3, [r2, #0]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010084:	4613      	mov	r3, r2
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	4413      	add	r3, r2
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	4a15      	ldr	r2, [pc, #84]	; (80100e4 <prvAddNewTaskToReadyList+0xd8>)
 801008e:	441a      	add	r2, r3
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	3304      	adds	r3, #4
 8010094:	4619      	mov	r1, r3
 8010096:	4610      	mov	r0, r2
 8010098:	f7ff f913 	bl	800f2c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801009c:	f001 fa2a 	bl	80114f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80100a0:	4b0d      	ldr	r3, [pc, #52]	; (80100d8 <prvAddNewTaskToReadyList+0xcc>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d00e      	beq.n	80100c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80100a8:	4b0a      	ldr	r3, [pc, #40]	; (80100d4 <prvAddNewTaskToReadyList+0xc8>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d207      	bcs.n	80100c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80100b6:	4b0c      	ldr	r3, [pc, #48]	; (80100e8 <prvAddNewTaskToReadyList+0xdc>)
 80100b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100bc:	601a      	str	r2, [r3, #0]
 80100be:	f3bf 8f4f 	dsb	sy
 80100c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80100c6:	bf00      	nop
 80100c8:	3708      	adds	r7, #8
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	20000dd0 	.word	0x20000dd0
 80100d4:	200008fc 	.word	0x200008fc
 80100d8:	20000ddc 	.word	0x20000ddc
 80100dc:	20000dec 	.word	0x20000dec
 80100e0:	20000dd8 	.word	0x20000dd8
 80100e4:	20000900 	.word	0x20000900
 80100e8:	e000ed04 	.word	0xe000ed04

080100ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80100f4:	2300      	movs	r3, #0
 80100f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d017      	beq.n	801012e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80100fe:	4b13      	ldr	r3, [pc, #76]	; (801014c <vTaskDelay+0x60>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d00a      	beq.n	801011c <vTaskDelay+0x30>
	__asm volatile
 8010106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801010a:	f383 8811 	msr	BASEPRI, r3
 801010e:	f3bf 8f6f 	isb	sy
 8010112:	f3bf 8f4f 	dsb	sy
 8010116:	60bb      	str	r3, [r7, #8]
}
 8010118:	bf00      	nop
 801011a:	e7fe      	b.n	801011a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801011c:	f000 f880 	bl	8010220 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010120:	2100      	movs	r1, #0
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f000 fcea 	bl	8010afc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010128:	f000 f888 	bl	801023c <xTaskResumeAll>
 801012c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d107      	bne.n	8010144 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010134:	4b06      	ldr	r3, [pc, #24]	; (8010150 <vTaskDelay+0x64>)
 8010136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801013a:	601a      	str	r2, [r3, #0]
 801013c:	f3bf 8f4f 	dsb	sy
 8010140:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010144:	bf00      	nop
 8010146:	3710      	adds	r7, #16
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}
 801014c:	20000df8 	.word	0x20000df8
 8010150:	e000ed04 	.word	0xe000ed04

08010154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b08a      	sub	sp, #40	; 0x28
 8010158:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801015a:	2300      	movs	r3, #0
 801015c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801015e:	2300      	movs	r3, #0
 8010160:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010162:	463a      	mov	r2, r7
 8010164:	1d39      	adds	r1, r7, #4
 8010166:	f107 0308 	add.w	r3, r7, #8
 801016a:	4618      	mov	r0, r3
 801016c:	f7ff f848 	bl	800f200 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010170:	6839      	ldr	r1, [r7, #0]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	68ba      	ldr	r2, [r7, #8]
 8010176:	9202      	str	r2, [sp, #8]
 8010178:	9301      	str	r3, [sp, #4]
 801017a:	2300      	movs	r3, #0
 801017c:	9300      	str	r3, [sp, #0]
 801017e:	2300      	movs	r3, #0
 8010180:	460a      	mov	r2, r1
 8010182:	4921      	ldr	r1, [pc, #132]	; (8010208 <vTaskStartScheduler+0xb4>)
 8010184:	4821      	ldr	r0, [pc, #132]	; (801020c <vTaskStartScheduler+0xb8>)
 8010186:	f7ff fe0f 	bl	800fda8 <xTaskCreateStatic>
 801018a:	4603      	mov	r3, r0
 801018c:	4a20      	ldr	r2, [pc, #128]	; (8010210 <vTaskStartScheduler+0xbc>)
 801018e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010190:	4b1f      	ldr	r3, [pc, #124]	; (8010210 <vTaskStartScheduler+0xbc>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d002      	beq.n	801019e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010198:	2301      	movs	r3, #1
 801019a:	617b      	str	r3, [r7, #20]
 801019c:	e001      	b.n	80101a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801019e:	2300      	movs	r3, #0
 80101a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	d102      	bne.n	80101ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80101a8:	f000 fcfc 	bl	8010ba4 <xTimerCreateTimerTask>
 80101ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	d116      	bne.n	80101e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80101b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b8:	f383 8811 	msr	BASEPRI, r3
 80101bc:	f3bf 8f6f 	isb	sy
 80101c0:	f3bf 8f4f 	dsb	sy
 80101c4:	613b      	str	r3, [r7, #16]
}
 80101c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80101c8:	4b12      	ldr	r3, [pc, #72]	; (8010214 <vTaskStartScheduler+0xc0>)
 80101ca:	f04f 32ff 	mov.w	r2, #4294967295
 80101ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80101d0:	4b11      	ldr	r3, [pc, #68]	; (8010218 <vTaskStartScheduler+0xc4>)
 80101d2:	2201      	movs	r2, #1
 80101d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80101d6:	4b11      	ldr	r3, [pc, #68]	; (801021c <vTaskStartScheduler+0xc8>)
 80101d8:	2200      	movs	r2, #0
 80101da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80101dc:	f001 f8b8 	bl	8011350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80101e0:	e00e      	b.n	8010200 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101e8:	d10a      	bne.n	8010200 <vTaskStartScheduler+0xac>
	__asm volatile
 80101ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ee:	f383 8811 	msr	BASEPRI, r3
 80101f2:	f3bf 8f6f 	isb	sy
 80101f6:	f3bf 8f4f 	dsb	sy
 80101fa:	60fb      	str	r3, [r7, #12]
}
 80101fc:	bf00      	nop
 80101fe:	e7fe      	b.n	80101fe <vTaskStartScheduler+0xaa>
}
 8010200:	bf00      	nop
 8010202:	3718      	adds	r7, #24
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}
 8010208:	08014238 	.word	0x08014238
 801020c:	08010839 	.word	0x08010839
 8010210:	20000df4 	.word	0x20000df4
 8010214:	20000df0 	.word	0x20000df0
 8010218:	20000ddc 	.word	0x20000ddc
 801021c:	20000dd4 	.word	0x20000dd4

08010220 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010220:	b480      	push	{r7}
 8010222:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010224:	4b04      	ldr	r3, [pc, #16]	; (8010238 <vTaskSuspendAll+0x18>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	3301      	adds	r3, #1
 801022a:	4a03      	ldr	r2, [pc, #12]	; (8010238 <vTaskSuspendAll+0x18>)
 801022c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801022e:	bf00      	nop
 8010230:	46bd      	mov	sp, r7
 8010232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010236:	4770      	bx	lr
 8010238:	20000df8 	.word	0x20000df8

0801023c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b084      	sub	sp, #16
 8010240:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010242:	2300      	movs	r3, #0
 8010244:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010246:	2300      	movs	r3, #0
 8010248:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801024a:	4b42      	ldr	r3, [pc, #264]	; (8010354 <xTaskResumeAll+0x118>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d10a      	bne.n	8010268 <xTaskResumeAll+0x2c>
	__asm volatile
 8010252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010256:	f383 8811 	msr	BASEPRI, r3
 801025a:	f3bf 8f6f 	isb	sy
 801025e:	f3bf 8f4f 	dsb	sy
 8010262:	603b      	str	r3, [r7, #0]
}
 8010264:	bf00      	nop
 8010266:	e7fe      	b.n	8010266 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010268:	f001 f914 	bl	8011494 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801026c:	4b39      	ldr	r3, [pc, #228]	; (8010354 <xTaskResumeAll+0x118>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	3b01      	subs	r3, #1
 8010272:	4a38      	ldr	r2, [pc, #224]	; (8010354 <xTaskResumeAll+0x118>)
 8010274:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010276:	4b37      	ldr	r3, [pc, #220]	; (8010354 <xTaskResumeAll+0x118>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d162      	bne.n	8010344 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801027e:	4b36      	ldr	r3, [pc, #216]	; (8010358 <xTaskResumeAll+0x11c>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d05e      	beq.n	8010344 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010286:	e02f      	b.n	80102e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010288:	4b34      	ldr	r3, [pc, #208]	; (801035c <xTaskResumeAll+0x120>)
 801028a:	68db      	ldr	r3, [r3, #12]
 801028c:	68db      	ldr	r3, [r3, #12]
 801028e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	3318      	adds	r3, #24
 8010294:	4618      	mov	r0, r3
 8010296:	f7ff f871 	bl	800f37c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	3304      	adds	r3, #4
 801029e:	4618      	mov	r0, r3
 80102a0:	f7ff f86c 	bl	800f37c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102a8:	4b2d      	ldr	r3, [pc, #180]	; (8010360 <xTaskResumeAll+0x124>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d903      	bls.n	80102b8 <xTaskResumeAll+0x7c>
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102b4:	4a2a      	ldr	r2, [pc, #168]	; (8010360 <xTaskResumeAll+0x124>)
 80102b6:	6013      	str	r3, [r2, #0]
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102bc:	4613      	mov	r3, r2
 80102be:	009b      	lsls	r3, r3, #2
 80102c0:	4413      	add	r3, r2
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	4a27      	ldr	r2, [pc, #156]	; (8010364 <xTaskResumeAll+0x128>)
 80102c6:	441a      	add	r2, r3
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	3304      	adds	r3, #4
 80102cc:	4619      	mov	r1, r3
 80102ce:	4610      	mov	r0, r2
 80102d0:	f7fe fff7 	bl	800f2c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102d8:	4b23      	ldr	r3, [pc, #140]	; (8010368 <xTaskResumeAll+0x12c>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102de:	429a      	cmp	r2, r3
 80102e0:	d302      	bcc.n	80102e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80102e2:	4b22      	ldr	r3, [pc, #136]	; (801036c <xTaskResumeAll+0x130>)
 80102e4:	2201      	movs	r2, #1
 80102e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80102e8:	4b1c      	ldr	r3, [pc, #112]	; (801035c <xTaskResumeAll+0x120>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d1cb      	bne.n	8010288 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d001      	beq.n	80102fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80102f6:	f000 fb55 	bl	80109a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80102fa:	4b1d      	ldr	r3, [pc, #116]	; (8010370 <xTaskResumeAll+0x134>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d010      	beq.n	8010328 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010306:	f000 f847 	bl	8010398 <xTaskIncrementTick>
 801030a:	4603      	mov	r3, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	d002      	beq.n	8010316 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010310:	4b16      	ldr	r3, [pc, #88]	; (801036c <xTaskResumeAll+0x130>)
 8010312:	2201      	movs	r2, #1
 8010314:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	3b01      	subs	r3, #1
 801031a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d1f1      	bne.n	8010306 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010322:	4b13      	ldr	r3, [pc, #76]	; (8010370 <xTaskResumeAll+0x134>)
 8010324:	2200      	movs	r2, #0
 8010326:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010328:	4b10      	ldr	r3, [pc, #64]	; (801036c <xTaskResumeAll+0x130>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d009      	beq.n	8010344 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010330:	2301      	movs	r3, #1
 8010332:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010334:	4b0f      	ldr	r3, [pc, #60]	; (8010374 <xTaskResumeAll+0x138>)
 8010336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801033a:	601a      	str	r2, [r3, #0]
 801033c:	f3bf 8f4f 	dsb	sy
 8010340:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010344:	f001 f8d6 	bl	80114f4 <vPortExitCritical>

	return xAlreadyYielded;
 8010348:	68bb      	ldr	r3, [r7, #8]
}
 801034a:	4618      	mov	r0, r3
 801034c:	3710      	adds	r7, #16
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}
 8010352:	bf00      	nop
 8010354:	20000df8 	.word	0x20000df8
 8010358:	20000dd0 	.word	0x20000dd0
 801035c:	20000d90 	.word	0x20000d90
 8010360:	20000dd8 	.word	0x20000dd8
 8010364:	20000900 	.word	0x20000900
 8010368:	200008fc 	.word	0x200008fc
 801036c:	20000de4 	.word	0x20000de4
 8010370:	20000de0 	.word	0x20000de0
 8010374:	e000ed04 	.word	0xe000ed04

08010378 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010378:	b480      	push	{r7}
 801037a:	b083      	sub	sp, #12
 801037c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801037e:	4b05      	ldr	r3, [pc, #20]	; (8010394 <xTaskGetTickCount+0x1c>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010384:	687b      	ldr	r3, [r7, #4]
}
 8010386:	4618      	mov	r0, r3
 8010388:	370c      	adds	r7, #12
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr
 8010392:	bf00      	nop
 8010394:	20000dd4 	.word	0x20000dd4

08010398 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b086      	sub	sp, #24
 801039c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801039e:	2300      	movs	r3, #0
 80103a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103a2:	4b4f      	ldr	r3, [pc, #316]	; (80104e0 <xTaskIncrementTick+0x148>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	f040 808f 	bne.w	80104ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80103ac:	4b4d      	ldr	r3, [pc, #308]	; (80104e4 <xTaskIncrementTick+0x14c>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	3301      	adds	r3, #1
 80103b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80103b4:	4a4b      	ldr	r2, [pc, #300]	; (80104e4 <xTaskIncrementTick+0x14c>)
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d120      	bne.n	8010402 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80103c0:	4b49      	ldr	r3, [pc, #292]	; (80104e8 <xTaskIncrementTick+0x150>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d00a      	beq.n	80103e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80103ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ce:	f383 8811 	msr	BASEPRI, r3
 80103d2:	f3bf 8f6f 	isb	sy
 80103d6:	f3bf 8f4f 	dsb	sy
 80103da:	603b      	str	r3, [r7, #0]
}
 80103dc:	bf00      	nop
 80103de:	e7fe      	b.n	80103de <xTaskIncrementTick+0x46>
 80103e0:	4b41      	ldr	r3, [pc, #260]	; (80104e8 <xTaskIncrementTick+0x150>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	60fb      	str	r3, [r7, #12]
 80103e6:	4b41      	ldr	r3, [pc, #260]	; (80104ec <xTaskIncrementTick+0x154>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	4a3f      	ldr	r2, [pc, #252]	; (80104e8 <xTaskIncrementTick+0x150>)
 80103ec:	6013      	str	r3, [r2, #0]
 80103ee:	4a3f      	ldr	r2, [pc, #252]	; (80104ec <xTaskIncrementTick+0x154>)
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	6013      	str	r3, [r2, #0]
 80103f4:	4b3e      	ldr	r3, [pc, #248]	; (80104f0 <xTaskIncrementTick+0x158>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	3301      	adds	r3, #1
 80103fa:	4a3d      	ldr	r2, [pc, #244]	; (80104f0 <xTaskIncrementTick+0x158>)
 80103fc:	6013      	str	r3, [r2, #0]
 80103fe:	f000 fad1 	bl	80109a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010402:	4b3c      	ldr	r3, [pc, #240]	; (80104f4 <xTaskIncrementTick+0x15c>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	693a      	ldr	r2, [r7, #16]
 8010408:	429a      	cmp	r2, r3
 801040a:	d349      	bcc.n	80104a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801040c:	4b36      	ldr	r3, [pc, #216]	; (80104e8 <xTaskIncrementTick+0x150>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d104      	bne.n	8010420 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010416:	4b37      	ldr	r3, [pc, #220]	; (80104f4 <xTaskIncrementTick+0x15c>)
 8010418:	f04f 32ff 	mov.w	r2, #4294967295
 801041c:	601a      	str	r2, [r3, #0]
					break;
 801041e:	e03f      	b.n	80104a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010420:	4b31      	ldr	r3, [pc, #196]	; (80104e8 <xTaskIncrementTick+0x150>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	68db      	ldr	r3, [r3, #12]
 8010426:	68db      	ldr	r3, [r3, #12]
 8010428:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	685b      	ldr	r3, [r3, #4]
 801042e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010430:	693a      	ldr	r2, [r7, #16]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	429a      	cmp	r2, r3
 8010436:	d203      	bcs.n	8010440 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010438:	4a2e      	ldr	r2, [pc, #184]	; (80104f4 <xTaskIncrementTick+0x15c>)
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801043e:	e02f      	b.n	80104a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	3304      	adds	r3, #4
 8010444:	4618      	mov	r0, r3
 8010446:	f7fe ff99 	bl	800f37c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801044e:	2b00      	cmp	r3, #0
 8010450:	d004      	beq.n	801045c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	3318      	adds	r3, #24
 8010456:	4618      	mov	r0, r3
 8010458:	f7fe ff90 	bl	800f37c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010460:	4b25      	ldr	r3, [pc, #148]	; (80104f8 <xTaskIncrementTick+0x160>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	429a      	cmp	r2, r3
 8010466:	d903      	bls.n	8010470 <xTaskIncrementTick+0xd8>
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801046c:	4a22      	ldr	r2, [pc, #136]	; (80104f8 <xTaskIncrementTick+0x160>)
 801046e:	6013      	str	r3, [r2, #0]
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010474:	4613      	mov	r3, r2
 8010476:	009b      	lsls	r3, r3, #2
 8010478:	4413      	add	r3, r2
 801047a:	009b      	lsls	r3, r3, #2
 801047c:	4a1f      	ldr	r2, [pc, #124]	; (80104fc <xTaskIncrementTick+0x164>)
 801047e:	441a      	add	r2, r3
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	3304      	adds	r3, #4
 8010484:	4619      	mov	r1, r3
 8010486:	4610      	mov	r0, r2
 8010488:	f7fe ff1b 	bl	800f2c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010490:	4b1b      	ldr	r3, [pc, #108]	; (8010500 <xTaskIncrementTick+0x168>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010496:	429a      	cmp	r2, r3
 8010498:	d3b8      	bcc.n	801040c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801049a:	2301      	movs	r3, #1
 801049c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801049e:	e7b5      	b.n	801040c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80104a0:	4b17      	ldr	r3, [pc, #92]	; (8010500 <xTaskIncrementTick+0x168>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104a6:	4915      	ldr	r1, [pc, #84]	; (80104fc <xTaskIncrementTick+0x164>)
 80104a8:	4613      	mov	r3, r2
 80104aa:	009b      	lsls	r3, r3, #2
 80104ac:	4413      	add	r3, r2
 80104ae:	009b      	lsls	r3, r3, #2
 80104b0:	440b      	add	r3, r1
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	2b01      	cmp	r3, #1
 80104b6:	d901      	bls.n	80104bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80104b8:	2301      	movs	r3, #1
 80104ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80104bc:	4b11      	ldr	r3, [pc, #68]	; (8010504 <xTaskIncrementTick+0x16c>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d007      	beq.n	80104d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80104c4:	2301      	movs	r3, #1
 80104c6:	617b      	str	r3, [r7, #20]
 80104c8:	e004      	b.n	80104d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80104ca:	4b0f      	ldr	r3, [pc, #60]	; (8010508 <xTaskIncrementTick+0x170>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	3301      	adds	r3, #1
 80104d0:	4a0d      	ldr	r2, [pc, #52]	; (8010508 <xTaskIncrementTick+0x170>)
 80104d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80104d4:	697b      	ldr	r3, [r7, #20]
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3718      	adds	r7, #24
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
 80104de:	bf00      	nop
 80104e0:	20000df8 	.word	0x20000df8
 80104e4:	20000dd4 	.word	0x20000dd4
 80104e8:	20000d88 	.word	0x20000d88
 80104ec:	20000d8c 	.word	0x20000d8c
 80104f0:	20000de8 	.word	0x20000de8
 80104f4:	20000df0 	.word	0x20000df0
 80104f8:	20000dd8 	.word	0x20000dd8
 80104fc:	20000900 	.word	0x20000900
 8010500:	200008fc 	.word	0x200008fc
 8010504:	20000de4 	.word	0x20000de4
 8010508:	20000de0 	.word	0x20000de0

0801050c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801050c:	b480      	push	{r7}
 801050e:	b085      	sub	sp, #20
 8010510:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010512:	4b28      	ldr	r3, [pc, #160]	; (80105b4 <vTaskSwitchContext+0xa8>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d003      	beq.n	8010522 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801051a:	4b27      	ldr	r3, [pc, #156]	; (80105b8 <vTaskSwitchContext+0xac>)
 801051c:	2201      	movs	r2, #1
 801051e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010520:	e041      	b.n	80105a6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8010522:	4b25      	ldr	r3, [pc, #148]	; (80105b8 <vTaskSwitchContext+0xac>)
 8010524:	2200      	movs	r2, #0
 8010526:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010528:	4b24      	ldr	r3, [pc, #144]	; (80105bc <vTaskSwitchContext+0xb0>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	60fb      	str	r3, [r7, #12]
 801052e:	e010      	b.n	8010552 <vTaskSwitchContext+0x46>
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d10a      	bne.n	801054c <vTaskSwitchContext+0x40>
	__asm volatile
 8010536:	f04f 0350 	mov.w	r3, #80	; 0x50
 801053a:	f383 8811 	msr	BASEPRI, r3
 801053e:	f3bf 8f6f 	isb	sy
 8010542:	f3bf 8f4f 	dsb	sy
 8010546:	607b      	str	r3, [r7, #4]
}
 8010548:	bf00      	nop
 801054a:	e7fe      	b.n	801054a <vTaskSwitchContext+0x3e>
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	3b01      	subs	r3, #1
 8010550:	60fb      	str	r3, [r7, #12]
 8010552:	491b      	ldr	r1, [pc, #108]	; (80105c0 <vTaskSwitchContext+0xb4>)
 8010554:	68fa      	ldr	r2, [r7, #12]
 8010556:	4613      	mov	r3, r2
 8010558:	009b      	lsls	r3, r3, #2
 801055a:	4413      	add	r3, r2
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	440b      	add	r3, r1
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d0e4      	beq.n	8010530 <vTaskSwitchContext+0x24>
 8010566:	68fa      	ldr	r2, [r7, #12]
 8010568:	4613      	mov	r3, r2
 801056a:	009b      	lsls	r3, r3, #2
 801056c:	4413      	add	r3, r2
 801056e:	009b      	lsls	r3, r3, #2
 8010570:	4a13      	ldr	r2, [pc, #76]	; (80105c0 <vTaskSwitchContext+0xb4>)
 8010572:	4413      	add	r3, r2
 8010574:	60bb      	str	r3, [r7, #8]
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	685a      	ldr	r2, [r3, #4]
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	605a      	str	r2, [r3, #4]
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	685a      	ldr	r2, [r3, #4]
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	3308      	adds	r3, #8
 8010588:	429a      	cmp	r2, r3
 801058a:	d104      	bne.n	8010596 <vTaskSwitchContext+0x8a>
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	685a      	ldr	r2, [r3, #4]
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	605a      	str	r2, [r3, #4]
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	685b      	ldr	r3, [r3, #4]
 801059a:	68db      	ldr	r3, [r3, #12]
 801059c:	4a09      	ldr	r2, [pc, #36]	; (80105c4 <vTaskSwitchContext+0xb8>)
 801059e:	6013      	str	r3, [r2, #0]
 80105a0:	4a06      	ldr	r2, [pc, #24]	; (80105bc <vTaskSwitchContext+0xb0>)
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	6013      	str	r3, [r2, #0]
}
 80105a6:	bf00      	nop
 80105a8:	3714      	adds	r7, #20
 80105aa:	46bd      	mov	sp, r7
 80105ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b0:	4770      	bx	lr
 80105b2:	bf00      	nop
 80105b4:	20000df8 	.word	0x20000df8
 80105b8:	20000de4 	.word	0x20000de4
 80105bc:	20000dd8 	.word	0x20000dd8
 80105c0:	20000900 	.word	0x20000900
 80105c4:	200008fc 	.word	0x200008fc

080105c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d10a      	bne.n	80105ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80105d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105dc:	f383 8811 	msr	BASEPRI, r3
 80105e0:	f3bf 8f6f 	isb	sy
 80105e4:	f3bf 8f4f 	dsb	sy
 80105e8:	60fb      	str	r3, [r7, #12]
}
 80105ea:	bf00      	nop
 80105ec:	e7fe      	b.n	80105ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80105ee:	4b07      	ldr	r3, [pc, #28]	; (801060c <vTaskPlaceOnEventList+0x44>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	3318      	adds	r3, #24
 80105f4:	4619      	mov	r1, r3
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f7fe fe87 	bl	800f30a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80105fc:	2101      	movs	r1, #1
 80105fe:	6838      	ldr	r0, [r7, #0]
 8010600:	f000 fa7c 	bl	8010afc <prvAddCurrentTaskToDelayedList>
}
 8010604:	bf00      	nop
 8010606:	3710      	adds	r7, #16
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}
 801060c:	200008fc 	.word	0x200008fc

08010610 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010610:	b580      	push	{r7, lr}
 8010612:	b086      	sub	sp, #24
 8010614:	af00      	add	r7, sp, #0
 8010616:	60f8      	str	r0, [r7, #12]
 8010618:	60b9      	str	r1, [r7, #8]
 801061a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d10a      	bne.n	8010638 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010626:	f383 8811 	msr	BASEPRI, r3
 801062a:	f3bf 8f6f 	isb	sy
 801062e:	f3bf 8f4f 	dsb	sy
 8010632:	617b      	str	r3, [r7, #20]
}
 8010634:	bf00      	nop
 8010636:	e7fe      	b.n	8010636 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010638:	4b0a      	ldr	r3, [pc, #40]	; (8010664 <vTaskPlaceOnEventListRestricted+0x54>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	3318      	adds	r3, #24
 801063e:	4619      	mov	r1, r3
 8010640:	68f8      	ldr	r0, [r7, #12]
 8010642:	f7fe fe3e 	bl	800f2c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d002      	beq.n	8010652 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801064c:	f04f 33ff 	mov.w	r3, #4294967295
 8010650:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010652:	6879      	ldr	r1, [r7, #4]
 8010654:	68b8      	ldr	r0, [r7, #8]
 8010656:	f000 fa51 	bl	8010afc <prvAddCurrentTaskToDelayedList>
	}
 801065a:	bf00      	nop
 801065c:	3718      	adds	r7, #24
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}
 8010662:	bf00      	nop
 8010664:	200008fc 	.word	0x200008fc

08010668 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b086      	sub	sp, #24
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	68db      	ldr	r3, [r3, #12]
 8010676:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010678:	693b      	ldr	r3, [r7, #16]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d10a      	bne.n	8010694 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010682:	f383 8811 	msr	BASEPRI, r3
 8010686:	f3bf 8f6f 	isb	sy
 801068a:	f3bf 8f4f 	dsb	sy
 801068e:	60fb      	str	r3, [r7, #12]
}
 8010690:	bf00      	nop
 8010692:	e7fe      	b.n	8010692 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	3318      	adds	r3, #24
 8010698:	4618      	mov	r0, r3
 801069a:	f7fe fe6f 	bl	800f37c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801069e:	4b1e      	ldr	r3, [pc, #120]	; (8010718 <xTaskRemoveFromEventList+0xb0>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d11d      	bne.n	80106e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	3304      	adds	r3, #4
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7fe fe66 	bl	800f37c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106b4:	4b19      	ldr	r3, [pc, #100]	; (801071c <xTaskRemoveFromEventList+0xb4>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d903      	bls.n	80106c4 <xTaskRemoveFromEventList+0x5c>
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106c0:	4a16      	ldr	r2, [pc, #88]	; (801071c <xTaskRemoveFromEventList+0xb4>)
 80106c2:	6013      	str	r3, [r2, #0]
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106c8:	4613      	mov	r3, r2
 80106ca:	009b      	lsls	r3, r3, #2
 80106cc:	4413      	add	r3, r2
 80106ce:	009b      	lsls	r3, r3, #2
 80106d0:	4a13      	ldr	r2, [pc, #76]	; (8010720 <xTaskRemoveFromEventList+0xb8>)
 80106d2:	441a      	add	r2, r3
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	3304      	adds	r3, #4
 80106d8:	4619      	mov	r1, r3
 80106da:	4610      	mov	r0, r2
 80106dc:	f7fe fdf1 	bl	800f2c2 <vListInsertEnd>
 80106e0:	e005      	b.n	80106ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	3318      	adds	r3, #24
 80106e6:	4619      	mov	r1, r3
 80106e8:	480e      	ldr	r0, [pc, #56]	; (8010724 <xTaskRemoveFromEventList+0xbc>)
 80106ea:	f7fe fdea 	bl	800f2c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106f2:	4b0d      	ldr	r3, [pc, #52]	; (8010728 <xTaskRemoveFromEventList+0xc0>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d905      	bls.n	8010708 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80106fc:	2301      	movs	r3, #1
 80106fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010700:	4b0a      	ldr	r3, [pc, #40]	; (801072c <xTaskRemoveFromEventList+0xc4>)
 8010702:	2201      	movs	r2, #1
 8010704:	601a      	str	r2, [r3, #0]
 8010706:	e001      	b.n	801070c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010708:	2300      	movs	r3, #0
 801070a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801070c:	697b      	ldr	r3, [r7, #20]
}
 801070e:	4618      	mov	r0, r3
 8010710:	3718      	adds	r7, #24
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
 8010716:	bf00      	nop
 8010718:	20000df8 	.word	0x20000df8
 801071c:	20000dd8 	.word	0x20000dd8
 8010720:	20000900 	.word	0x20000900
 8010724:	20000d90 	.word	0x20000d90
 8010728:	200008fc 	.word	0x200008fc
 801072c:	20000de4 	.word	0x20000de4

08010730 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010730:	b480      	push	{r7}
 8010732:	b083      	sub	sp, #12
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010738:	4b06      	ldr	r3, [pc, #24]	; (8010754 <vTaskInternalSetTimeOutState+0x24>)
 801073a:	681a      	ldr	r2, [r3, #0]
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010740:	4b05      	ldr	r3, [pc, #20]	; (8010758 <vTaskInternalSetTimeOutState+0x28>)
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	605a      	str	r2, [r3, #4]
}
 8010748:	bf00      	nop
 801074a:	370c      	adds	r7, #12
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr
 8010754:	20000de8 	.word	0x20000de8
 8010758:	20000dd4 	.word	0x20000dd4

0801075c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b088      	sub	sp, #32
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d10a      	bne.n	8010782 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801076c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010770:	f383 8811 	msr	BASEPRI, r3
 8010774:	f3bf 8f6f 	isb	sy
 8010778:	f3bf 8f4f 	dsb	sy
 801077c:	613b      	str	r3, [r7, #16]
}
 801077e:	bf00      	nop
 8010780:	e7fe      	b.n	8010780 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d10a      	bne.n	801079e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801078c:	f383 8811 	msr	BASEPRI, r3
 8010790:	f3bf 8f6f 	isb	sy
 8010794:	f3bf 8f4f 	dsb	sy
 8010798:	60fb      	str	r3, [r7, #12]
}
 801079a:	bf00      	nop
 801079c:	e7fe      	b.n	801079c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801079e:	f000 fe79 	bl	8011494 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80107a2:	4b1d      	ldr	r3, [pc, #116]	; (8010818 <xTaskCheckForTimeOut+0xbc>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	685b      	ldr	r3, [r3, #4]
 80107ac:	69ba      	ldr	r2, [r7, #24]
 80107ae:	1ad3      	subs	r3, r2, r3
 80107b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107ba:	d102      	bne.n	80107c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80107bc:	2300      	movs	r3, #0
 80107be:	61fb      	str	r3, [r7, #28]
 80107c0:	e023      	b.n	801080a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	4b15      	ldr	r3, [pc, #84]	; (801081c <xTaskCheckForTimeOut+0xc0>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d007      	beq.n	80107de <xTaskCheckForTimeOut+0x82>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	69ba      	ldr	r2, [r7, #24]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d302      	bcc.n	80107de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80107d8:	2301      	movs	r3, #1
 80107da:	61fb      	str	r3, [r7, #28]
 80107dc:	e015      	b.n	801080a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	697a      	ldr	r2, [r7, #20]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d20b      	bcs.n	8010800 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	681a      	ldr	r2, [r3, #0]
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	1ad2      	subs	r2, r2, r3
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f7ff ff9b 	bl	8010730 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80107fa:	2300      	movs	r3, #0
 80107fc:	61fb      	str	r3, [r7, #28]
 80107fe:	e004      	b.n	801080a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	2200      	movs	r2, #0
 8010804:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010806:	2301      	movs	r3, #1
 8010808:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801080a:	f000 fe73 	bl	80114f4 <vPortExitCritical>

	return xReturn;
 801080e:	69fb      	ldr	r3, [r7, #28]
}
 8010810:	4618      	mov	r0, r3
 8010812:	3720      	adds	r7, #32
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	20000dd4 	.word	0x20000dd4
 801081c:	20000de8 	.word	0x20000de8

08010820 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010820:	b480      	push	{r7}
 8010822:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010824:	4b03      	ldr	r3, [pc, #12]	; (8010834 <vTaskMissedYield+0x14>)
 8010826:	2201      	movs	r2, #1
 8010828:	601a      	str	r2, [r3, #0]
}
 801082a:	bf00      	nop
 801082c:	46bd      	mov	sp, r7
 801082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010832:	4770      	bx	lr
 8010834:	20000de4 	.word	0x20000de4

08010838 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010840:	f000 f852 	bl	80108e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010844:	4b06      	ldr	r3, [pc, #24]	; (8010860 <prvIdleTask+0x28>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	2b01      	cmp	r3, #1
 801084a:	d9f9      	bls.n	8010840 <prvIdleTask+0x8>
			{
				taskYIELD();
 801084c:	4b05      	ldr	r3, [pc, #20]	; (8010864 <prvIdleTask+0x2c>)
 801084e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010852:	601a      	str	r2, [r3, #0]
 8010854:	f3bf 8f4f 	dsb	sy
 8010858:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801085c:	e7f0      	b.n	8010840 <prvIdleTask+0x8>
 801085e:	bf00      	nop
 8010860:	20000900 	.word	0x20000900
 8010864:	e000ed04 	.word	0xe000ed04

08010868 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b082      	sub	sp, #8
 801086c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801086e:	2300      	movs	r3, #0
 8010870:	607b      	str	r3, [r7, #4]
 8010872:	e00c      	b.n	801088e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010874:	687a      	ldr	r2, [r7, #4]
 8010876:	4613      	mov	r3, r2
 8010878:	009b      	lsls	r3, r3, #2
 801087a:	4413      	add	r3, r2
 801087c:	009b      	lsls	r3, r3, #2
 801087e:	4a12      	ldr	r2, [pc, #72]	; (80108c8 <prvInitialiseTaskLists+0x60>)
 8010880:	4413      	add	r3, r2
 8010882:	4618      	mov	r0, r3
 8010884:	f7fe fcf0 	bl	800f268 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	3301      	adds	r3, #1
 801088c:	607b      	str	r3, [r7, #4]
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2b37      	cmp	r3, #55	; 0x37
 8010892:	d9ef      	bls.n	8010874 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010894:	480d      	ldr	r0, [pc, #52]	; (80108cc <prvInitialiseTaskLists+0x64>)
 8010896:	f7fe fce7 	bl	800f268 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801089a:	480d      	ldr	r0, [pc, #52]	; (80108d0 <prvInitialiseTaskLists+0x68>)
 801089c:	f7fe fce4 	bl	800f268 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80108a0:	480c      	ldr	r0, [pc, #48]	; (80108d4 <prvInitialiseTaskLists+0x6c>)
 80108a2:	f7fe fce1 	bl	800f268 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80108a6:	480c      	ldr	r0, [pc, #48]	; (80108d8 <prvInitialiseTaskLists+0x70>)
 80108a8:	f7fe fcde 	bl	800f268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80108ac:	480b      	ldr	r0, [pc, #44]	; (80108dc <prvInitialiseTaskLists+0x74>)
 80108ae:	f7fe fcdb 	bl	800f268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80108b2:	4b0b      	ldr	r3, [pc, #44]	; (80108e0 <prvInitialiseTaskLists+0x78>)
 80108b4:	4a05      	ldr	r2, [pc, #20]	; (80108cc <prvInitialiseTaskLists+0x64>)
 80108b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80108b8:	4b0a      	ldr	r3, [pc, #40]	; (80108e4 <prvInitialiseTaskLists+0x7c>)
 80108ba:	4a05      	ldr	r2, [pc, #20]	; (80108d0 <prvInitialiseTaskLists+0x68>)
 80108bc:	601a      	str	r2, [r3, #0]
}
 80108be:	bf00      	nop
 80108c0:	3708      	adds	r7, #8
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	20000900 	.word	0x20000900
 80108cc:	20000d60 	.word	0x20000d60
 80108d0:	20000d74 	.word	0x20000d74
 80108d4:	20000d90 	.word	0x20000d90
 80108d8:	20000da4 	.word	0x20000da4
 80108dc:	20000dbc 	.word	0x20000dbc
 80108e0:	20000d88 	.word	0x20000d88
 80108e4:	20000d8c 	.word	0x20000d8c

080108e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80108ee:	e019      	b.n	8010924 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80108f0:	f000 fdd0 	bl	8011494 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108f4:	4b10      	ldr	r3, [pc, #64]	; (8010938 <prvCheckTasksWaitingTermination+0x50>)
 80108f6:	68db      	ldr	r3, [r3, #12]
 80108f8:	68db      	ldr	r3, [r3, #12]
 80108fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	3304      	adds	r3, #4
 8010900:	4618      	mov	r0, r3
 8010902:	f7fe fd3b 	bl	800f37c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010906:	4b0d      	ldr	r3, [pc, #52]	; (801093c <prvCheckTasksWaitingTermination+0x54>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	3b01      	subs	r3, #1
 801090c:	4a0b      	ldr	r2, [pc, #44]	; (801093c <prvCheckTasksWaitingTermination+0x54>)
 801090e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010910:	4b0b      	ldr	r3, [pc, #44]	; (8010940 <prvCheckTasksWaitingTermination+0x58>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	3b01      	subs	r3, #1
 8010916:	4a0a      	ldr	r2, [pc, #40]	; (8010940 <prvCheckTasksWaitingTermination+0x58>)
 8010918:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801091a:	f000 fdeb 	bl	80114f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	f000 f810 	bl	8010944 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010924:	4b06      	ldr	r3, [pc, #24]	; (8010940 <prvCheckTasksWaitingTermination+0x58>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d1e1      	bne.n	80108f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801092c:	bf00      	nop
 801092e:	bf00      	nop
 8010930:	3708      	adds	r7, #8
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	20000da4 	.word	0x20000da4
 801093c:	20000dd0 	.word	0x20000dd0
 8010940:	20000db8 	.word	0x20000db8

08010944 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010952:	2b00      	cmp	r3, #0
 8010954:	d108      	bne.n	8010968 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801095a:	4618      	mov	r0, r3
 801095c:	f000 ff88 	bl	8011870 <vPortFree>
				vPortFree( pxTCB );
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f000 ff85 	bl	8011870 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010966:	e018      	b.n	801099a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801096e:	2b01      	cmp	r3, #1
 8010970:	d103      	bne.n	801097a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f000 ff7c 	bl	8011870 <vPortFree>
	}
 8010978:	e00f      	b.n	801099a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010980:	2b02      	cmp	r3, #2
 8010982:	d00a      	beq.n	801099a <prvDeleteTCB+0x56>
	__asm volatile
 8010984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010988:	f383 8811 	msr	BASEPRI, r3
 801098c:	f3bf 8f6f 	isb	sy
 8010990:	f3bf 8f4f 	dsb	sy
 8010994:	60fb      	str	r3, [r7, #12]
}
 8010996:	bf00      	nop
 8010998:	e7fe      	b.n	8010998 <prvDeleteTCB+0x54>
	}
 801099a:	bf00      	nop
 801099c:	3710      	adds	r7, #16
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
	...

080109a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80109a4:	b480      	push	{r7}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80109aa:	4b0c      	ldr	r3, [pc, #48]	; (80109dc <prvResetNextTaskUnblockTime+0x38>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d104      	bne.n	80109be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80109b4:	4b0a      	ldr	r3, [pc, #40]	; (80109e0 <prvResetNextTaskUnblockTime+0x3c>)
 80109b6:	f04f 32ff 	mov.w	r2, #4294967295
 80109ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80109bc:	e008      	b.n	80109d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109be:	4b07      	ldr	r3, [pc, #28]	; (80109dc <prvResetNextTaskUnblockTime+0x38>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	68db      	ldr	r3, [r3, #12]
 80109c4:	68db      	ldr	r3, [r3, #12]
 80109c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	4a04      	ldr	r2, [pc, #16]	; (80109e0 <prvResetNextTaskUnblockTime+0x3c>)
 80109ce:	6013      	str	r3, [r2, #0]
}
 80109d0:	bf00      	nop
 80109d2:	370c      	adds	r7, #12
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr
 80109dc:	20000d88 	.word	0x20000d88
 80109e0:	20000df0 	.word	0x20000df0

080109e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80109e4:	b480      	push	{r7}
 80109e6:	b083      	sub	sp, #12
 80109e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80109ea:	4b0b      	ldr	r3, [pc, #44]	; (8010a18 <xTaskGetSchedulerState+0x34>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d102      	bne.n	80109f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80109f2:	2301      	movs	r3, #1
 80109f4:	607b      	str	r3, [r7, #4]
 80109f6:	e008      	b.n	8010a0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109f8:	4b08      	ldr	r3, [pc, #32]	; (8010a1c <xTaskGetSchedulerState+0x38>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d102      	bne.n	8010a06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010a00:	2302      	movs	r3, #2
 8010a02:	607b      	str	r3, [r7, #4]
 8010a04:	e001      	b.n	8010a0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010a06:	2300      	movs	r3, #0
 8010a08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010a0a:	687b      	ldr	r3, [r7, #4]
	}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	370c      	adds	r7, #12
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr
 8010a18:	20000ddc 	.word	0x20000ddc
 8010a1c:	20000df8 	.word	0x20000df8

08010a20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b086      	sub	sp, #24
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d056      	beq.n	8010ae4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010a36:	4b2e      	ldr	r3, [pc, #184]	; (8010af0 <xTaskPriorityDisinherit+0xd0>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	693a      	ldr	r2, [r7, #16]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d00a      	beq.n	8010a56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a44:	f383 8811 	msr	BASEPRI, r3
 8010a48:	f3bf 8f6f 	isb	sy
 8010a4c:	f3bf 8f4f 	dsb	sy
 8010a50:	60fb      	str	r3, [r7, #12]
}
 8010a52:	bf00      	nop
 8010a54:	e7fe      	b.n	8010a54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010a56:	693b      	ldr	r3, [r7, #16]
 8010a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d10a      	bne.n	8010a74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a62:	f383 8811 	msr	BASEPRI, r3
 8010a66:	f3bf 8f6f 	isb	sy
 8010a6a:	f3bf 8f4f 	dsb	sy
 8010a6e:	60bb      	str	r3, [r7, #8]
}
 8010a70:	bf00      	nop
 8010a72:	e7fe      	b.n	8010a72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a78:	1e5a      	subs	r2, r3, #1
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a82:	693b      	ldr	r3, [r7, #16]
 8010a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d02c      	beq.n	8010ae4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010a8a:	693b      	ldr	r3, [r7, #16]
 8010a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d128      	bne.n	8010ae4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	3304      	adds	r3, #4
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7fe fc70 	bl	800f37c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010a9c:	693b      	ldr	r3, [r7, #16]
 8010a9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aa8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ab4:	4b0f      	ldr	r3, [pc, #60]	; (8010af4 <xTaskPriorityDisinherit+0xd4>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d903      	bls.n	8010ac4 <xTaskPriorityDisinherit+0xa4>
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ac0:	4a0c      	ldr	r2, [pc, #48]	; (8010af4 <xTaskPriorityDisinherit+0xd4>)
 8010ac2:	6013      	str	r3, [r2, #0]
 8010ac4:	693b      	ldr	r3, [r7, #16]
 8010ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ac8:	4613      	mov	r3, r2
 8010aca:	009b      	lsls	r3, r3, #2
 8010acc:	4413      	add	r3, r2
 8010ace:	009b      	lsls	r3, r3, #2
 8010ad0:	4a09      	ldr	r2, [pc, #36]	; (8010af8 <xTaskPriorityDisinherit+0xd8>)
 8010ad2:	441a      	add	r2, r3
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	3304      	adds	r3, #4
 8010ad8:	4619      	mov	r1, r3
 8010ada:	4610      	mov	r0, r2
 8010adc:	f7fe fbf1 	bl	800f2c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010ae4:	697b      	ldr	r3, [r7, #20]
	}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3718      	adds	r7, #24
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}
 8010aee:	bf00      	nop
 8010af0:	200008fc 	.word	0x200008fc
 8010af4:	20000dd8 	.word	0x20000dd8
 8010af8:	20000900 	.word	0x20000900

08010afc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b084      	sub	sp, #16
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
 8010b04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010b06:	4b21      	ldr	r3, [pc, #132]	; (8010b8c <prvAddCurrentTaskToDelayedList+0x90>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b0c:	4b20      	ldr	r3, [pc, #128]	; (8010b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	3304      	adds	r3, #4
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7fe fc32 	bl	800f37c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b1e:	d10a      	bne.n	8010b36 <prvAddCurrentTaskToDelayedList+0x3a>
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d007      	beq.n	8010b36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b26:	4b1a      	ldr	r3, [pc, #104]	; (8010b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	3304      	adds	r3, #4
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	4819      	ldr	r0, [pc, #100]	; (8010b94 <prvAddCurrentTaskToDelayedList+0x98>)
 8010b30:	f7fe fbc7 	bl	800f2c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010b34:	e026      	b.n	8010b84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010b36:	68fa      	ldr	r2, [r7, #12]
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	4413      	add	r3, r2
 8010b3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010b3e:	4b14      	ldr	r3, [pc, #80]	; (8010b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	68ba      	ldr	r2, [r7, #8]
 8010b44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010b46:	68ba      	ldr	r2, [r7, #8]
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d209      	bcs.n	8010b62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b4e:	4b12      	ldr	r3, [pc, #72]	; (8010b98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010b50:	681a      	ldr	r2, [r3, #0]
 8010b52:	4b0f      	ldr	r3, [pc, #60]	; (8010b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	3304      	adds	r3, #4
 8010b58:	4619      	mov	r1, r3
 8010b5a:	4610      	mov	r0, r2
 8010b5c:	f7fe fbd5 	bl	800f30a <vListInsert>
}
 8010b60:	e010      	b.n	8010b84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b62:	4b0e      	ldr	r3, [pc, #56]	; (8010b9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010b64:	681a      	ldr	r2, [r3, #0]
 8010b66:	4b0a      	ldr	r3, [pc, #40]	; (8010b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	3304      	adds	r3, #4
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	4610      	mov	r0, r2
 8010b70:	f7fe fbcb 	bl	800f30a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010b74:	4b0a      	ldr	r3, [pc, #40]	; (8010ba0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	68ba      	ldr	r2, [r7, #8]
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d202      	bcs.n	8010b84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010b7e:	4a08      	ldr	r2, [pc, #32]	; (8010ba0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	6013      	str	r3, [r2, #0]
}
 8010b84:	bf00      	nop
 8010b86:	3710      	adds	r7, #16
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	20000dd4 	.word	0x20000dd4
 8010b90:	200008fc 	.word	0x200008fc
 8010b94:	20000dbc 	.word	0x20000dbc
 8010b98:	20000d8c 	.word	0x20000d8c
 8010b9c:	20000d88 	.word	0x20000d88
 8010ba0:	20000df0 	.word	0x20000df0

08010ba4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b08a      	sub	sp, #40	; 0x28
 8010ba8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010baa:	2300      	movs	r3, #0
 8010bac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010bae:	f000 fb07 	bl	80111c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010bb2:	4b1c      	ldr	r3, [pc, #112]	; (8010c24 <xTimerCreateTimerTask+0x80>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d021      	beq.n	8010bfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010bc2:	1d3a      	adds	r2, r7, #4
 8010bc4:	f107 0108 	add.w	r1, r7, #8
 8010bc8:	f107 030c 	add.w	r3, r7, #12
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7fe fb31 	bl	800f234 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010bd2:	6879      	ldr	r1, [r7, #4]
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	68fa      	ldr	r2, [r7, #12]
 8010bd8:	9202      	str	r2, [sp, #8]
 8010bda:	9301      	str	r3, [sp, #4]
 8010bdc:	2302      	movs	r3, #2
 8010bde:	9300      	str	r3, [sp, #0]
 8010be0:	2300      	movs	r3, #0
 8010be2:	460a      	mov	r2, r1
 8010be4:	4910      	ldr	r1, [pc, #64]	; (8010c28 <xTimerCreateTimerTask+0x84>)
 8010be6:	4811      	ldr	r0, [pc, #68]	; (8010c2c <xTimerCreateTimerTask+0x88>)
 8010be8:	f7ff f8de 	bl	800fda8 <xTaskCreateStatic>
 8010bec:	4603      	mov	r3, r0
 8010bee:	4a10      	ldr	r2, [pc, #64]	; (8010c30 <xTimerCreateTimerTask+0x8c>)
 8010bf0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010bf2:	4b0f      	ldr	r3, [pc, #60]	; (8010c30 <xTimerCreateTimerTask+0x8c>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d001      	beq.n	8010bfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010bfa:	2301      	movs	r3, #1
 8010bfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d10a      	bne.n	8010c1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c08:	f383 8811 	msr	BASEPRI, r3
 8010c0c:	f3bf 8f6f 	isb	sy
 8010c10:	f3bf 8f4f 	dsb	sy
 8010c14:	613b      	str	r3, [r7, #16]
}
 8010c16:	bf00      	nop
 8010c18:	e7fe      	b.n	8010c18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010c1a:	697b      	ldr	r3, [r7, #20]
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3718      	adds	r7, #24
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	20000e2c 	.word	0x20000e2c
 8010c28:	08014240 	.word	0x08014240
 8010c2c:	08010d69 	.word	0x08010d69
 8010c30:	20000e30 	.word	0x20000e30

08010c34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b08a      	sub	sp, #40	; 0x28
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	60b9      	str	r1, [r7, #8]
 8010c3e:	607a      	str	r2, [r7, #4]
 8010c40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010c42:	2300      	movs	r3, #0
 8010c44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d10a      	bne.n	8010c62 <xTimerGenericCommand+0x2e>
	__asm volatile
 8010c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c50:	f383 8811 	msr	BASEPRI, r3
 8010c54:	f3bf 8f6f 	isb	sy
 8010c58:	f3bf 8f4f 	dsb	sy
 8010c5c:	623b      	str	r3, [r7, #32]
}
 8010c5e:	bf00      	nop
 8010c60:	e7fe      	b.n	8010c60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010c62:	4b1a      	ldr	r3, [pc, #104]	; (8010ccc <xTimerGenericCommand+0x98>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d02a      	beq.n	8010cc0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	2b05      	cmp	r3, #5
 8010c7a:	dc18      	bgt.n	8010cae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010c7c:	f7ff feb2 	bl	80109e4 <xTaskGetSchedulerState>
 8010c80:	4603      	mov	r3, r0
 8010c82:	2b02      	cmp	r3, #2
 8010c84:	d109      	bne.n	8010c9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010c86:	4b11      	ldr	r3, [pc, #68]	; (8010ccc <xTimerGenericCommand+0x98>)
 8010c88:	6818      	ldr	r0, [r3, #0]
 8010c8a:	f107 0110 	add.w	r1, r7, #16
 8010c8e:	2300      	movs	r3, #0
 8010c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c92:	f7fe fca1 	bl	800f5d8 <xQueueGenericSend>
 8010c96:	6278      	str	r0, [r7, #36]	; 0x24
 8010c98:	e012      	b.n	8010cc0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010c9a:	4b0c      	ldr	r3, [pc, #48]	; (8010ccc <xTimerGenericCommand+0x98>)
 8010c9c:	6818      	ldr	r0, [r3, #0]
 8010c9e:	f107 0110 	add.w	r1, r7, #16
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	f7fe fc97 	bl	800f5d8 <xQueueGenericSend>
 8010caa:	6278      	str	r0, [r7, #36]	; 0x24
 8010cac:	e008      	b.n	8010cc0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010cae:	4b07      	ldr	r3, [pc, #28]	; (8010ccc <xTimerGenericCommand+0x98>)
 8010cb0:	6818      	ldr	r0, [r3, #0]
 8010cb2:	f107 0110 	add.w	r1, r7, #16
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	683a      	ldr	r2, [r7, #0]
 8010cba:	f7fe fd8b 	bl	800f7d4 <xQueueGenericSendFromISR>
 8010cbe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3728      	adds	r7, #40	; 0x28
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	20000e2c 	.word	0x20000e2c

08010cd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b088      	sub	sp, #32
 8010cd4:	af02      	add	r7, sp, #8
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cda:	4b22      	ldr	r3, [pc, #136]	; (8010d64 <prvProcessExpiredTimer+0x94>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	68db      	ldr	r3, [r3, #12]
 8010ce0:	68db      	ldr	r3, [r3, #12]
 8010ce2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	3304      	adds	r3, #4
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7fe fb47 	bl	800f37c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cf4:	f003 0304 	and.w	r3, r3, #4
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d022      	beq.n	8010d42 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010cfc:	697b      	ldr	r3, [r7, #20]
 8010cfe:	699a      	ldr	r2, [r3, #24]
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	18d1      	adds	r1, r2, r3
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	683a      	ldr	r2, [r7, #0]
 8010d08:	6978      	ldr	r0, [r7, #20]
 8010d0a:	f000 f8d1 	bl	8010eb0 <prvInsertTimerInActiveList>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d01f      	beq.n	8010d54 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010d14:	2300      	movs	r3, #0
 8010d16:	9300      	str	r3, [sp, #0]
 8010d18:	2300      	movs	r3, #0
 8010d1a:	687a      	ldr	r2, [r7, #4]
 8010d1c:	2100      	movs	r1, #0
 8010d1e:	6978      	ldr	r0, [r7, #20]
 8010d20:	f7ff ff88 	bl	8010c34 <xTimerGenericCommand>
 8010d24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d113      	bne.n	8010d54 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d30:	f383 8811 	msr	BASEPRI, r3
 8010d34:	f3bf 8f6f 	isb	sy
 8010d38:	f3bf 8f4f 	dsb	sy
 8010d3c:	60fb      	str	r3, [r7, #12]
}
 8010d3e:	bf00      	nop
 8010d40:	e7fe      	b.n	8010d40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d48:	f023 0301 	bic.w	r3, r3, #1
 8010d4c:	b2da      	uxtb	r2, r3
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	6a1b      	ldr	r3, [r3, #32]
 8010d58:	6978      	ldr	r0, [r7, #20]
 8010d5a:	4798      	blx	r3
}
 8010d5c:	bf00      	nop
 8010d5e:	3718      	adds	r7, #24
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}
 8010d64:	20000e24 	.word	0x20000e24

08010d68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b084      	sub	sp, #16
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010d70:	f107 0308 	add.w	r3, r7, #8
 8010d74:	4618      	mov	r0, r3
 8010d76:	f000 f857 	bl	8010e28 <prvGetNextExpireTime>
 8010d7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	4619      	mov	r1, r3
 8010d80:	68f8      	ldr	r0, [r7, #12]
 8010d82:	f000 f803 	bl	8010d8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010d86:	f000 f8d5 	bl	8010f34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010d8a:	e7f1      	b.n	8010d70 <prvTimerTask+0x8>

08010d8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010d96:	f7ff fa43 	bl	8010220 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d9a:	f107 0308 	add.w	r3, r7, #8
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f000 f866 	bl	8010e70 <prvSampleTimeNow>
 8010da4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d130      	bne.n	8010e0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d10a      	bne.n	8010dc8 <prvProcessTimerOrBlockTask+0x3c>
 8010db2:	687a      	ldr	r2, [r7, #4]
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	429a      	cmp	r2, r3
 8010db8:	d806      	bhi.n	8010dc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010dba:	f7ff fa3f 	bl	801023c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010dbe:	68f9      	ldr	r1, [r7, #12]
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f7ff ff85 	bl	8010cd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010dc6:	e024      	b.n	8010e12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d008      	beq.n	8010de0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010dce:	4b13      	ldr	r3, [pc, #76]	; (8010e1c <prvProcessTimerOrBlockTask+0x90>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d101      	bne.n	8010ddc <prvProcessTimerOrBlockTask+0x50>
 8010dd8:	2301      	movs	r3, #1
 8010dda:	e000      	b.n	8010dde <prvProcessTimerOrBlockTask+0x52>
 8010ddc:	2300      	movs	r3, #0
 8010dde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010de0:	4b0f      	ldr	r3, [pc, #60]	; (8010e20 <prvProcessTimerOrBlockTask+0x94>)
 8010de2:	6818      	ldr	r0, [r3, #0]
 8010de4:	687a      	ldr	r2, [r7, #4]
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	1ad3      	subs	r3, r2, r3
 8010dea:	683a      	ldr	r2, [r7, #0]
 8010dec:	4619      	mov	r1, r3
 8010dee:	f7fe ffa7 	bl	800fd40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010df2:	f7ff fa23 	bl	801023c <xTaskResumeAll>
 8010df6:	4603      	mov	r3, r0
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d10a      	bne.n	8010e12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010dfc:	4b09      	ldr	r3, [pc, #36]	; (8010e24 <prvProcessTimerOrBlockTask+0x98>)
 8010dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e02:	601a      	str	r2, [r3, #0]
 8010e04:	f3bf 8f4f 	dsb	sy
 8010e08:	f3bf 8f6f 	isb	sy
}
 8010e0c:	e001      	b.n	8010e12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010e0e:	f7ff fa15 	bl	801023c <xTaskResumeAll>
}
 8010e12:	bf00      	nop
 8010e14:	3710      	adds	r7, #16
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	20000e28 	.word	0x20000e28
 8010e20:	20000e2c 	.word	0x20000e2c
 8010e24:	e000ed04 	.word	0xe000ed04

08010e28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b085      	sub	sp, #20
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010e30:	4b0e      	ldr	r3, [pc, #56]	; (8010e6c <prvGetNextExpireTime+0x44>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d101      	bne.n	8010e3e <prvGetNextExpireTime+0x16>
 8010e3a:	2201      	movs	r2, #1
 8010e3c:	e000      	b.n	8010e40 <prvGetNextExpireTime+0x18>
 8010e3e:	2200      	movs	r2, #0
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d105      	bne.n	8010e58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010e4c:	4b07      	ldr	r3, [pc, #28]	; (8010e6c <prvGetNextExpireTime+0x44>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	68db      	ldr	r3, [r3, #12]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	60fb      	str	r3, [r7, #12]
 8010e56:	e001      	b.n	8010e5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	3714      	adds	r7, #20
 8010e62:	46bd      	mov	sp, r7
 8010e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e68:	4770      	bx	lr
 8010e6a:	bf00      	nop
 8010e6c:	20000e24 	.word	0x20000e24

08010e70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b084      	sub	sp, #16
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010e78:	f7ff fa7e 	bl	8010378 <xTaskGetTickCount>
 8010e7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010e7e:	4b0b      	ldr	r3, [pc, #44]	; (8010eac <prvSampleTimeNow+0x3c>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	68fa      	ldr	r2, [r7, #12]
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d205      	bcs.n	8010e94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010e88:	f000 f936 	bl	80110f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2201      	movs	r2, #1
 8010e90:	601a      	str	r2, [r3, #0]
 8010e92:	e002      	b.n	8010e9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	2200      	movs	r2, #0
 8010e98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010e9a:	4a04      	ldr	r2, [pc, #16]	; (8010eac <prvSampleTimeNow+0x3c>)
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3710      	adds	r7, #16
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	20000e34 	.word	0x20000e34

08010eb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b086      	sub	sp, #24
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	60f8      	str	r0, [r7, #12]
 8010eb8:	60b9      	str	r1, [r7, #8]
 8010eba:	607a      	str	r2, [r7, #4]
 8010ebc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	68ba      	ldr	r2, [r7, #8]
 8010ec6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	68fa      	ldr	r2, [r7, #12]
 8010ecc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010ece:	68ba      	ldr	r2, [r7, #8]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d812      	bhi.n	8010efc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ed6:	687a      	ldr	r2, [r7, #4]
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	1ad2      	subs	r2, r2, r3
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	699b      	ldr	r3, [r3, #24]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d302      	bcc.n	8010eea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	617b      	str	r3, [r7, #20]
 8010ee8:	e01b      	b.n	8010f22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010eea:	4b10      	ldr	r3, [pc, #64]	; (8010f2c <prvInsertTimerInActiveList+0x7c>)
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	3304      	adds	r3, #4
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	4610      	mov	r0, r2
 8010ef6:	f7fe fa08 	bl	800f30a <vListInsert>
 8010efa:	e012      	b.n	8010f22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010efc:	687a      	ldr	r2, [r7, #4]
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	429a      	cmp	r2, r3
 8010f02:	d206      	bcs.n	8010f12 <prvInsertTimerInActiveList+0x62>
 8010f04:	68ba      	ldr	r2, [r7, #8]
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d302      	bcc.n	8010f12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	617b      	str	r3, [r7, #20]
 8010f10:	e007      	b.n	8010f22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010f12:	4b07      	ldr	r3, [pc, #28]	; (8010f30 <prvInsertTimerInActiveList+0x80>)
 8010f14:	681a      	ldr	r2, [r3, #0]
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	3304      	adds	r3, #4
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	4610      	mov	r0, r2
 8010f1e:	f7fe f9f4 	bl	800f30a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010f22:	697b      	ldr	r3, [r7, #20]
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	3718      	adds	r7, #24
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}
 8010f2c:	20000e28 	.word	0x20000e28
 8010f30:	20000e24 	.word	0x20000e24

08010f34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b08e      	sub	sp, #56	; 0x38
 8010f38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010f3a:	e0ca      	b.n	80110d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	da18      	bge.n	8010f74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010f42:	1d3b      	adds	r3, r7, #4
 8010f44:	3304      	adds	r3, #4
 8010f46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d10a      	bne.n	8010f64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f52:	f383 8811 	msr	BASEPRI, r3
 8010f56:	f3bf 8f6f 	isb	sy
 8010f5a:	f3bf 8f4f 	dsb	sy
 8010f5e:	61fb      	str	r3, [r7, #28]
}
 8010f60:	bf00      	nop
 8010f62:	e7fe      	b.n	8010f62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f6a:	6850      	ldr	r0, [r2, #4]
 8010f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f6e:	6892      	ldr	r2, [r2, #8]
 8010f70:	4611      	mov	r1, r2
 8010f72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	f2c0 80aa 	blt.w	80110d0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f82:	695b      	ldr	r3, [r3, #20]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d004      	beq.n	8010f92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f8a:	3304      	adds	r3, #4
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7fe f9f5 	bl	800f37c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010f92:	463b      	mov	r3, r7
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7ff ff6b 	bl	8010e70 <prvSampleTimeNow>
 8010f9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2b09      	cmp	r3, #9
 8010fa0:	f200 8097 	bhi.w	80110d2 <prvProcessReceivedCommands+0x19e>
 8010fa4:	a201      	add	r2, pc, #4	; (adr r2, 8010fac <prvProcessReceivedCommands+0x78>)
 8010fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010faa:	bf00      	nop
 8010fac:	08010fd5 	.word	0x08010fd5
 8010fb0:	08010fd5 	.word	0x08010fd5
 8010fb4:	08010fd5 	.word	0x08010fd5
 8010fb8:	08011049 	.word	0x08011049
 8010fbc:	0801105d 	.word	0x0801105d
 8010fc0:	080110a7 	.word	0x080110a7
 8010fc4:	08010fd5 	.word	0x08010fd5
 8010fc8:	08010fd5 	.word	0x08010fd5
 8010fcc:	08011049 	.word	0x08011049
 8010fd0:	0801105d 	.word	0x0801105d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fda:	f043 0301 	orr.w	r3, r3, #1
 8010fde:	b2da      	uxtb	r2, r3
 8010fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010fe6:	68ba      	ldr	r2, [r7, #8]
 8010fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fea:	699b      	ldr	r3, [r3, #24]
 8010fec:	18d1      	adds	r1, r2, r3
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ff4:	f7ff ff5c 	bl	8010eb0 <prvInsertTimerInActiveList>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d069      	beq.n	80110d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011000:	6a1b      	ldr	r3, [r3, #32]
 8011002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011004:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801100c:	f003 0304 	and.w	r3, r3, #4
 8011010:	2b00      	cmp	r3, #0
 8011012:	d05e      	beq.n	80110d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011014:	68ba      	ldr	r2, [r7, #8]
 8011016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011018:	699b      	ldr	r3, [r3, #24]
 801101a:	441a      	add	r2, r3
 801101c:	2300      	movs	r3, #0
 801101e:	9300      	str	r3, [sp, #0]
 8011020:	2300      	movs	r3, #0
 8011022:	2100      	movs	r1, #0
 8011024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011026:	f7ff fe05 	bl	8010c34 <xTimerGenericCommand>
 801102a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801102c:	6a3b      	ldr	r3, [r7, #32]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d14f      	bne.n	80110d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011036:	f383 8811 	msr	BASEPRI, r3
 801103a:	f3bf 8f6f 	isb	sy
 801103e:	f3bf 8f4f 	dsb	sy
 8011042:	61bb      	str	r3, [r7, #24]
}
 8011044:	bf00      	nop
 8011046:	e7fe      	b.n	8011046 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801104a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801104e:	f023 0301 	bic.w	r3, r3, #1
 8011052:	b2da      	uxtb	r2, r3
 8011054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801105a:	e03a      	b.n	80110d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801105e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011062:	f043 0301 	orr.w	r3, r3, #1
 8011066:	b2da      	uxtb	r2, r3
 8011068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801106a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801106e:	68ba      	ldr	r2, [r7, #8]
 8011070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011072:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011076:	699b      	ldr	r3, [r3, #24]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d10a      	bne.n	8011092 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801107c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011080:	f383 8811 	msr	BASEPRI, r3
 8011084:	f3bf 8f6f 	isb	sy
 8011088:	f3bf 8f4f 	dsb	sy
 801108c:	617b      	str	r3, [r7, #20]
}
 801108e:	bf00      	nop
 8011090:	e7fe      	b.n	8011090 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011094:	699a      	ldr	r2, [r3, #24]
 8011096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011098:	18d1      	adds	r1, r2, r3
 801109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801109c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801109e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110a0:	f7ff ff06 	bl	8010eb0 <prvInsertTimerInActiveList>
					break;
 80110a4:	e015      	b.n	80110d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80110a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110ac:	f003 0302 	and.w	r3, r3, #2
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d103      	bne.n	80110bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80110b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110b6:	f000 fbdb 	bl	8011870 <vPortFree>
 80110ba:	e00a      	b.n	80110d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80110bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110c2:	f023 0301 	bic.w	r3, r3, #1
 80110c6:	b2da      	uxtb	r2, r3
 80110c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80110ce:	e000      	b.n	80110d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80110d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80110d2:	4b08      	ldr	r3, [pc, #32]	; (80110f4 <prvProcessReceivedCommands+0x1c0>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	1d39      	adds	r1, r7, #4
 80110d8:	2200      	movs	r2, #0
 80110da:	4618      	mov	r0, r3
 80110dc:	f7fe fc16 	bl	800f90c <xQueueReceive>
 80110e0:	4603      	mov	r3, r0
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	f47f af2a 	bne.w	8010f3c <prvProcessReceivedCommands+0x8>
	}
}
 80110e8:	bf00      	nop
 80110ea:	bf00      	nop
 80110ec:	3730      	adds	r7, #48	; 0x30
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	20000e2c 	.word	0x20000e2c

080110f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b088      	sub	sp, #32
 80110fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80110fe:	e048      	b.n	8011192 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011100:	4b2d      	ldr	r3, [pc, #180]	; (80111b8 <prvSwitchTimerLists+0xc0>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	68db      	ldr	r3, [r3, #12]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801110a:	4b2b      	ldr	r3, [pc, #172]	; (80111b8 <prvSwitchTimerLists+0xc0>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	68db      	ldr	r3, [r3, #12]
 8011112:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	3304      	adds	r3, #4
 8011118:	4618      	mov	r0, r3
 801111a:	f7fe f92f 	bl	800f37c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	6a1b      	ldr	r3, [r3, #32]
 8011122:	68f8      	ldr	r0, [r7, #12]
 8011124:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801112c:	f003 0304 	and.w	r3, r3, #4
 8011130:	2b00      	cmp	r3, #0
 8011132:	d02e      	beq.n	8011192 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	699b      	ldr	r3, [r3, #24]
 8011138:	693a      	ldr	r2, [r7, #16]
 801113a:	4413      	add	r3, r2
 801113c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801113e:	68ba      	ldr	r2, [r7, #8]
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	429a      	cmp	r2, r3
 8011144:	d90e      	bls.n	8011164 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	68ba      	ldr	r2, [r7, #8]
 801114a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	68fa      	ldr	r2, [r7, #12]
 8011150:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011152:	4b19      	ldr	r3, [pc, #100]	; (80111b8 <prvSwitchTimerLists+0xc0>)
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	3304      	adds	r3, #4
 801115a:	4619      	mov	r1, r3
 801115c:	4610      	mov	r0, r2
 801115e:	f7fe f8d4 	bl	800f30a <vListInsert>
 8011162:	e016      	b.n	8011192 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011164:	2300      	movs	r3, #0
 8011166:	9300      	str	r3, [sp, #0]
 8011168:	2300      	movs	r3, #0
 801116a:	693a      	ldr	r2, [r7, #16]
 801116c:	2100      	movs	r1, #0
 801116e:	68f8      	ldr	r0, [r7, #12]
 8011170:	f7ff fd60 	bl	8010c34 <xTimerGenericCommand>
 8011174:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d10a      	bne.n	8011192 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801117c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011180:	f383 8811 	msr	BASEPRI, r3
 8011184:	f3bf 8f6f 	isb	sy
 8011188:	f3bf 8f4f 	dsb	sy
 801118c:	603b      	str	r3, [r7, #0]
}
 801118e:	bf00      	nop
 8011190:	e7fe      	b.n	8011190 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011192:	4b09      	ldr	r3, [pc, #36]	; (80111b8 <prvSwitchTimerLists+0xc0>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d1b1      	bne.n	8011100 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801119c:	4b06      	ldr	r3, [pc, #24]	; (80111b8 <prvSwitchTimerLists+0xc0>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80111a2:	4b06      	ldr	r3, [pc, #24]	; (80111bc <prvSwitchTimerLists+0xc4>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	4a04      	ldr	r2, [pc, #16]	; (80111b8 <prvSwitchTimerLists+0xc0>)
 80111a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80111aa:	4a04      	ldr	r2, [pc, #16]	; (80111bc <prvSwitchTimerLists+0xc4>)
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	6013      	str	r3, [r2, #0]
}
 80111b0:	bf00      	nop
 80111b2:	3718      	adds	r7, #24
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	20000e24 	.word	0x20000e24
 80111bc:	20000e28 	.word	0x20000e28

080111c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80111c6:	f000 f965 	bl	8011494 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80111ca:	4b15      	ldr	r3, [pc, #84]	; (8011220 <prvCheckForValidListAndQueue+0x60>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d120      	bne.n	8011214 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80111d2:	4814      	ldr	r0, [pc, #80]	; (8011224 <prvCheckForValidListAndQueue+0x64>)
 80111d4:	f7fe f848 	bl	800f268 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80111d8:	4813      	ldr	r0, [pc, #76]	; (8011228 <prvCheckForValidListAndQueue+0x68>)
 80111da:	f7fe f845 	bl	800f268 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80111de:	4b13      	ldr	r3, [pc, #76]	; (801122c <prvCheckForValidListAndQueue+0x6c>)
 80111e0:	4a10      	ldr	r2, [pc, #64]	; (8011224 <prvCheckForValidListAndQueue+0x64>)
 80111e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80111e4:	4b12      	ldr	r3, [pc, #72]	; (8011230 <prvCheckForValidListAndQueue+0x70>)
 80111e6:	4a10      	ldr	r2, [pc, #64]	; (8011228 <prvCheckForValidListAndQueue+0x68>)
 80111e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80111ea:	2300      	movs	r3, #0
 80111ec:	9300      	str	r3, [sp, #0]
 80111ee:	4b11      	ldr	r3, [pc, #68]	; (8011234 <prvCheckForValidListAndQueue+0x74>)
 80111f0:	4a11      	ldr	r2, [pc, #68]	; (8011238 <prvCheckForValidListAndQueue+0x78>)
 80111f2:	2110      	movs	r1, #16
 80111f4:	200a      	movs	r0, #10
 80111f6:	f7fe f953 	bl	800f4a0 <xQueueGenericCreateStatic>
 80111fa:	4603      	mov	r3, r0
 80111fc:	4a08      	ldr	r2, [pc, #32]	; (8011220 <prvCheckForValidListAndQueue+0x60>)
 80111fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011200:	4b07      	ldr	r3, [pc, #28]	; (8011220 <prvCheckForValidListAndQueue+0x60>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d005      	beq.n	8011214 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011208:	4b05      	ldr	r3, [pc, #20]	; (8011220 <prvCheckForValidListAndQueue+0x60>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	490b      	ldr	r1, [pc, #44]	; (801123c <prvCheckForValidListAndQueue+0x7c>)
 801120e:	4618      	mov	r0, r3
 8011210:	f7fe fd6c 	bl	800fcec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011214:	f000 f96e 	bl	80114f4 <vPortExitCritical>
}
 8011218:	bf00      	nop
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
 801121e:	bf00      	nop
 8011220:	20000e2c 	.word	0x20000e2c
 8011224:	20000dfc 	.word	0x20000dfc
 8011228:	20000e10 	.word	0x20000e10
 801122c:	20000e24 	.word	0x20000e24
 8011230:	20000e28 	.word	0x20000e28
 8011234:	20000ed8 	.word	0x20000ed8
 8011238:	20000e38 	.word	0x20000e38
 801123c:	08014248 	.word	0x08014248

08011240 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011240:	b480      	push	{r7}
 8011242:	b085      	sub	sp, #20
 8011244:	af00      	add	r7, sp, #0
 8011246:	60f8      	str	r0, [r7, #12]
 8011248:	60b9      	str	r1, [r7, #8]
 801124a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	3b04      	subs	r3, #4
 8011250:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011258:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	3b04      	subs	r3, #4
 801125e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	f023 0201 	bic.w	r2, r3, #1
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	3b04      	subs	r3, #4
 801126e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011270:	4a0c      	ldr	r2, [pc, #48]	; (80112a4 <pxPortInitialiseStack+0x64>)
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	3b14      	subs	r3, #20
 801127a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801127c:	687a      	ldr	r2, [r7, #4]
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	3b04      	subs	r3, #4
 8011286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	f06f 0202 	mvn.w	r2, #2
 801128e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	3b20      	subs	r3, #32
 8011294:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011296:	68fb      	ldr	r3, [r7, #12]
}
 8011298:	4618      	mov	r0, r3
 801129a:	3714      	adds	r7, #20
 801129c:	46bd      	mov	sp, r7
 801129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a2:	4770      	bx	lr
 80112a4:	080112a9 	.word	0x080112a9

080112a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80112a8:	b480      	push	{r7}
 80112aa:	b085      	sub	sp, #20
 80112ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80112ae:	2300      	movs	r3, #0
 80112b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80112b2:	4b12      	ldr	r3, [pc, #72]	; (80112fc <prvTaskExitError+0x54>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ba:	d00a      	beq.n	80112d2 <prvTaskExitError+0x2a>
	__asm volatile
 80112bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c0:	f383 8811 	msr	BASEPRI, r3
 80112c4:	f3bf 8f6f 	isb	sy
 80112c8:	f3bf 8f4f 	dsb	sy
 80112cc:	60fb      	str	r3, [r7, #12]
}
 80112ce:	bf00      	nop
 80112d0:	e7fe      	b.n	80112d0 <prvTaskExitError+0x28>
	__asm volatile
 80112d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d6:	f383 8811 	msr	BASEPRI, r3
 80112da:	f3bf 8f6f 	isb	sy
 80112de:	f3bf 8f4f 	dsb	sy
 80112e2:	60bb      	str	r3, [r7, #8]
}
 80112e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80112e6:	bf00      	nop
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d0fc      	beq.n	80112e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80112ee:	bf00      	nop
 80112f0:	bf00      	nop
 80112f2:	3714      	adds	r7, #20
 80112f4:	46bd      	mov	sp, r7
 80112f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fa:	4770      	bx	lr
 80112fc:	20000128 	.word	0x20000128

08011300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011300:	4b07      	ldr	r3, [pc, #28]	; (8011320 <pxCurrentTCBConst2>)
 8011302:	6819      	ldr	r1, [r3, #0]
 8011304:	6808      	ldr	r0, [r1, #0]
 8011306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801130a:	f380 8809 	msr	PSP, r0
 801130e:	f3bf 8f6f 	isb	sy
 8011312:	f04f 0000 	mov.w	r0, #0
 8011316:	f380 8811 	msr	BASEPRI, r0
 801131a:	4770      	bx	lr
 801131c:	f3af 8000 	nop.w

08011320 <pxCurrentTCBConst2>:
 8011320:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011324:	bf00      	nop
 8011326:	bf00      	nop

08011328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011328:	4808      	ldr	r0, [pc, #32]	; (801134c <prvPortStartFirstTask+0x24>)
 801132a:	6800      	ldr	r0, [r0, #0]
 801132c:	6800      	ldr	r0, [r0, #0]
 801132e:	f380 8808 	msr	MSP, r0
 8011332:	f04f 0000 	mov.w	r0, #0
 8011336:	f380 8814 	msr	CONTROL, r0
 801133a:	b662      	cpsie	i
 801133c:	b661      	cpsie	f
 801133e:	f3bf 8f4f 	dsb	sy
 8011342:	f3bf 8f6f 	isb	sy
 8011346:	df00      	svc	0
 8011348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801134a:	bf00      	nop
 801134c:	e000ed08 	.word	0xe000ed08

08011350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b086      	sub	sp, #24
 8011354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011356:	4b46      	ldr	r3, [pc, #280]	; (8011470 <xPortStartScheduler+0x120>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	4a46      	ldr	r2, [pc, #280]	; (8011474 <xPortStartScheduler+0x124>)
 801135c:	4293      	cmp	r3, r2
 801135e:	d10a      	bne.n	8011376 <xPortStartScheduler+0x26>
	__asm volatile
 8011360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011364:	f383 8811 	msr	BASEPRI, r3
 8011368:	f3bf 8f6f 	isb	sy
 801136c:	f3bf 8f4f 	dsb	sy
 8011370:	613b      	str	r3, [r7, #16]
}
 8011372:	bf00      	nop
 8011374:	e7fe      	b.n	8011374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011376:	4b3e      	ldr	r3, [pc, #248]	; (8011470 <xPortStartScheduler+0x120>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	4a3f      	ldr	r2, [pc, #252]	; (8011478 <xPortStartScheduler+0x128>)
 801137c:	4293      	cmp	r3, r2
 801137e:	d10a      	bne.n	8011396 <xPortStartScheduler+0x46>
	__asm volatile
 8011380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011384:	f383 8811 	msr	BASEPRI, r3
 8011388:	f3bf 8f6f 	isb	sy
 801138c:	f3bf 8f4f 	dsb	sy
 8011390:	60fb      	str	r3, [r7, #12]
}
 8011392:	bf00      	nop
 8011394:	e7fe      	b.n	8011394 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011396:	4b39      	ldr	r3, [pc, #228]	; (801147c <xPortStartScheduler+0x12c>)
 8011398:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	b2db      	uxtb	r3, r3
 80113a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	22ff      	movs	r2, #255	; 0xff
 80113a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	b2db      	uxtb	r3, r3
 80113ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80113b0:	78fb      	ldrb	r3, [r7, #3]
 80113b2:	b2db      	uxtb	r3, r3
 80113b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80113b8:	b2da      	uxtb	r2, r3
 80113ba:	4b31      	ldr	r3, [pc, #196]	; (8011480 <xPortStartScheduler+0x130>)
 80113bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80113be:	4b31      	ldr	r3, [pc, #196]	; (8011484 <xPortStartScheduler+0x134>)
 80113c0:	2207      	movs	r2, #7
 80113c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80113c4:	e009      	b.n	80113da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80113c6:	4b2f      	ldr	r3, [pc, #188]	; (8011484 <xPortStartScheduler+0x134>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	3b01      	subs	r3, #1
 80113cc:	4a2d      	ldr	r2, [pc, #180]	; (8011484 <xPortStartScheduler+0x134>)
 80113ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80113d0:	78fb      	ldrb	r3, [r7, #3]
 80113d2:	b2db      	uxtb	r3, r3
 80113d4:	005b      	lsls	r3, r3, #1
 80113d6:	b2db      	uxtb	r3, r3
 80113d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80113da:	78fb      	ldrb	r3, [r7, #3]
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113e2:	2b80      	cmp	r3, #128	; 0x80
 80113e4:	d0ef      	beq.n	80113c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80113e6:	4b27      	ldr	r3, [pc, #156]	; (8011484 <xPortStartScheduler+0x134>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	f1c3 0307 	rsb	r3, r3, #7
 80113ee:	2b04      	cmp	r3, #4
 80113f0:	d00a      	beq.n	8011408 <xPortStartScheduler+0xb8>
	__asm volatile
 80113f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f6:	f383 8811 	msr	BASEPRI, r3
 80113fa:	f3bf 8f6f 	isb	sy
 80113fe:	f3bf 8f4f 	dsb	sy
 8011402:	60bb      	str	r3, [r7, #8]
}
 8011404:	bf00      	nop
 8011406:	e7fe      	b.n	8011406 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011408:	4b1e      	ldr	r3, [pc, #120]	; (8011484 <xPortStartScheduler+0x134>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	021b      	lsls	r3, r3, #8
 801140e:	4a1d      	ldr	r2, [pc, #116]	; (8011484 <xPortStartScheduler+0x134>)
 8011410:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011412:	4b1c      	ldr	r3, [pc, #112]	; (8011484 <xPortStartScheduler+0x134>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801141a:	4a1a      	ldr	r2, [pc, #104]	; (8011484 <xPortStartScheduler+0x134>)
 801141c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	b2da      	uxtb	r2, r3
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011426:	4b18      	ldr	r3, [pc, #96]	; (8011488 <xPortStartScheduler+0x138>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	4a17      	ldr	r2, [pc, #92]	; (8011488 <xPortStartScheduler+0x138>)
 801142c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011432:	4b15      	ldr	r3, [pc, #84]	; (8011488 <xPortStartScheduler+0x138>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	4a14      	ldr	r2, [pc, #80]	; (8011488 <xPortStartScheduler+0x138>)
 8011438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801143c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801143e:	f000 f8dd 	bl	80115fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011442:	4b12      	ldr	r3, [pc, #72]	; (801148c <xPortStartScheduler+0x13c>)
 8011444:	2200      	movs	r2, #0
 8011446:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011448:	f000 f8fc 	bl	8011644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801144c:	4b10      	ldr	r3, [pc, #64]	; (8011490 <xPortStartScheduler+0x140>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	4a0f      	ldr	r2, [pc, #60]	; (8011490 <xPortStartScheduler+0x140>)
 8011452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011456:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011458:	f7ff ff66 	bl	8011328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801145c:	f7ff f856 	bl	801050c <vTaskSwitchContext>
	prvTaskExitError();
 8011460:	f7ff ff22 	bl	80112a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011464:	2300      	movs	r3, #0
}
 8011466:	4618      	mov	r0, r3
 8011468:	3718      	adds	r7, #24
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
 801146e:	bf00      	nop
 8011470:	e000ed00 	.word	0xe000ed00
 8011474:	410fc271 	.word	0x410fc271
 8011478:	410fc270 	.word	0x410fc270
 801147c:	e000e400 	.word	0xe000e400
 8011480:	20000f28 	.word	0x20000f28
 8011484:	20000f2c 	.word	0x20000f2c
 8011488:	e000ed20 	.word	0xe000ed20
 801148c:	20000128 	.word	0x20000128
 8011490:	e000ef34 	.word	0xe000ef34

08011494 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011494:	b480      	push	{r7}
 8011496:	b083      	sub	sp, #12
 8011498:	af00      	add	r7, sp, #0
	__asm volatile
 801149a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801149e:	f383 8811 	msr	BASEPRI, r3
 80114a2:	f3bf 8f6f 	isb	sy
 80114a6:	f3bf 8f4f 	dsb	sy
 80114aa:	607b      	str	r3, [r7, #4]
}
 80114ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80114ae:	4b0f      	ldr	r3, [pc, #60]	; (80114ec <vPortEnterCritical+0x58>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	3301      	adds	r3, #1
 80114b4:	4a0d      	ldr	r2, [pc, #52]	; (80114ec <vPortEnterCritical+0x58>)
 80114b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80114b8:	4b0c      	ldr	r3, [pc, #48]	; (80114ec <vPortEnterCritical+0x58>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	2b01      	cmp	r3, #1
 80114be:	d10f      	bne.n	80114e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80114c0:	4b0b      	ldr	r3, [pc, #44]	; (80114f0 <vPortEnterCritical+0x5c>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	b2db      	uxtb	r3, r3
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d00a      	beq.n	80114e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80114ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ce:	f383 8811 	msr	BASEPRI, r3
 80114d2:	f3bf 8f6f 	isb	sy
 80114d6:	f3bf 8f4f 	dsb	sy
 80114da:	603b      	str	r3, [r7, #0]
}
 80114dc:	bf00      	nop
 80114de:	e7fe      	b.n	80114de <vPortEnterCritical+0x4a>
	}
}
 80114e0:	bf00      	nop
 80114e2:	370c      	adds	r7, #12
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr
 80114ec:	20000128 	.word	0x20000128
 80114f0:	e000ed04 	.word	0xe000ed04

080114f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80114f4:	b480      	push	{r7}
 80114f6:	b083      	sub	sp, #12
 80114f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80114fa:	4b12      	ldr	r3, [pc, #72]	; (8011544 <vPortExitCritical+0x50>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d10a      	bne.n	8011518 <vPortExitCritical+0x24>
	__asm volatile
 8011502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011506:	f383 8811 	msr	BASEPRI, r3
 801150a:	f3bf 8f6f 	isb	sy
 801150e:	f3bf 8f4f 	dsb	sy
 8011512:	607b      	str	r3, [r7, #4]
}
 8011514:	bf00      	nop
 8011516:	e7fe      	b.n	8011516 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011518:	4b0a      	ldr	r3, [pc, #40]	; (8011544 <vPortExitCritical+0x50>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	3b01      	subs	r3, #1
 801151e:	4a09      	ldr	r2, [pc, #36]	; (8011544 <vPortExitCritical+0x50>)
 8011520:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011522:	4b08      	ldr	r3, [pc, #32]	; (8011544 <vPortExitCritical+0x50>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d105      	bne.n	8011536 <vPortExitCritical+0x42>
 801152a:	2300      	movs	r3, #0
 801152c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	f383 8811 	msr	BASEPRI, r3
}
 8011534:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011536:	bf00      	nop
 8011538:	370c      	adds	r7, #12
 801153a:	46bd      	mov	sp, r7
 801153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011540:	4770      	bx	lr
 8011542:	bf00      	nop
 8011544:	20000128 	.word	0x20000128
	...

08011550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011550:	f3ef 8009 	mrs	r0, PSP
 8011554:	f3bf 8f6f 	isb	sy
 8011558:	4b15      	ldr	r3, [pc, #84]	; (80115b0 <pxCurrentTCBConst>)
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	f01e 0f10 	tst.w	lr, #16
 8011560:	bf08      	it	eq
 8011562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801156a:	6010      	str	r0, [r2, #0]
 801156c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011574:	f380 8811 	msr	BASEPRI, r0
 8011578:	f3bf 8f4f 	dsb	sy
 801157c:	f3bf 8f6f 	isb	sy
 8011580:	f7fe ffc4 	bl	801050c <vTaskSwitchContext>
 8011584:	f04f 0000 	mov.w	r0, #0
 8011588:	f380 8811 	msr	BASEPRI, r0
 801158c:	bc09      	pop	{r0, r3}
 801158e:	6819      	ldr	r1, [r3, #0]
 8011590:	6808      	ldr	r0, [r1, #0]
 8011592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011596:	f01e 0f10 	tst.w	lr, #16
 801159a:	bf08      	it	eq
 801159c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80115a0:	f380 8809 	msr	PSP, r0
 80115a4:	f3bf 8f6f 	isb	sy
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop
 80115ac:	f3af 8000 	nop.w

080115b0 <pxCurrentTCBConst>:
 80115b0:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80115b4:	bf00      	nop
 80115b6:	bf00      	nop

080115b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
	__asm volatile
 80115be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c2:	f383 8811 	msr	BASEPRI, r3
 80115c6:	f3bf 8f6f 	isb	sy
 80115ca:	f3bf 8f4f 	dsb	sy
 80115ce:	607b      	str	r3, [r7, #4]
}
 80115d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80115d2:	f7fe fee1 	bl	8010398 <xTaskIncrementTick>
 80115d6:	4603      	mov	r3, r0
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d003      	beq.n	80115e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80115dc:	4b06      	ldr	r3, [pc, #24]	; (80115f8 <xPortSysTickHandler+0x40>)
 80115de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115e2:	601a      	str	r2, [r3, #0]
 80115e4:	2300      	movs	r3, #0
 80115e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	f383 8811 	msr	BASEPRI, r3
}
 80115ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80115f0:	bf00      	nop
 80115f2:	3708      	adds	r7, #8
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}
 80115f8:	e000ed04 	.word	0xe000ed04

080115fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80115fc:	b480      	push	{r7}
 80115fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011600:	4b0b      	ldr	r3, [pc, #44]	; (8011630 <vPortSetupTimerInterrupt+0x34>)
 8011602:	2200      	movs	r2, #0
 8011604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011606:	4b0b      	ldr	r3, [pc, #44]	; (8011634 <vPortSetupTimerInterrupt+0x38>)
 8011608:	2200      	movs	r2, #0
 801160a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801160c:	4b0a      	ldr	r3, [pc, #40]	; (8011638 <vPortSetupTimerInterrupt+0x3c>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	4a0a      	ldr	r2, [pc, #40]	; (801163c <vPortSetupTimerInterrupt+0x40>)
 8011612:	fba2 2303 	umull	r2, r3, r2, r3
 8011616:	099b      	lsrs	r3, r3, #6
 8011618:	4a09      	ldr	r2, [pc, #36]	; (8011640 <vPortSetupTimerInterrupt+0x44>)
 801161a:	3b01      	subs	r3, #1
 801161c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801161e:	4b04      	ldr	r3, [pc, #16]	; (8011630 <vPortSetupTimerInterrupt+0x34>)
 8011620:	2207      	movs	r2, #7
 8011622:	601a      	str	r2, [r3, #0]
}
 8011624:	bf00      	nop
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr
 801162e:	bf00      	nop
 8011630:	e000e010 	.word	0xe000e010
 8011634:	e000e018 	.word	0xe000e018
 8011638:	2000000c 	.word	0x2000000c
 801163c:	10624dd3 	.word	0x10624dd3
 8011640:	e000e014 	.word	0xe000e014

08011644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011654 <vPortEnableVFP+0x10>
 8011648:	6801      	ldr	r1, [r0, #0]
 801164a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801164e:	6001      	str	r1, [r0, #0]
 8011650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011652:	bf00      	nop
 8011654:	e000ed88 	.word	0xe000ed88

08011658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011658:	b480      	push	{r7}
 801165a:	b085      	sub	sp, #20
 801165c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801165e:	f3ef 8305 	mrs	r3, IPSR
 8011662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	2b0f      	cmp	r3, #15
 8011668:	d914      	bls.n	8011694 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801166a:	4a17      	ldr	r2, [pc, #92]	; (80116c8 <vPortValidateInterruptPriority+0x70>)
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	4413      	add	r3, r2
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011674:	4b15      	ldr	r3, [pc, #84]	; (80116cc <vPortValidateInterruptPriority+0x74>)
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	7afa      	ldrb	r2, [r7, #11]
 801167a:	429a      	cmp	r2, r3
 801167c:	d20a      	bcs.n	8011694 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801167e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011682:	f383 8811 	msr	BASEPRI, r3
 8011686:	f3bf 8f6f 	isb	sy
 801168a:	f3bf 8f4f 	dsb	sy
 801168e:	607b      	str	r3, [r7, #4]
}
 8011690:	bf00      	nop
 8011692:	e7fe      	b.n	8011692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011694:	4b0e      	ldr	r3, [pc, #56]	; (80116d0 <vPortValidateInterruptPriority+0x78>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801169c:	4b0d      	ldr	r3, [pc, #52]	; (80116d4 <vPortValidateInterruptPriority+0x7c>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d90a      	bls.n	80116ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80116a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a8:	f383 8811 	msr	BASEPRI, r3
 80116ac:	f3bf 8f6f 	isb	sy
 80116b0:	f3bf 8f4f 	dsb	sy
 80116b4:	603b      	str	r3, [r7, #0]
}
 80116b6:	bf00      	nop
 80116b8:	e7fe      	b.n	80116b8 <vPortValidateInterruptPriority+0x60>
	}
 80116ba:	bf00      	nop
 80116bc:	3714      	adds	r7, #20
 80116be:	46bd      	mov	sp, r7
 80116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop
 80116c8:	e000e3f0 	.word	0xe000e3f0
 80116cc:	20000f28 	.word	0x20000f28
 80116d0:	e000ed0c 	.word	0xe000ed0c
 80116d4:	20000f2c 	.word	0x20000f2c

080116d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b08a      	sub	sp, #40	; 0x28
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80116e0:	2300      	movs	r3, #0
 80116e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80116e4:	f7fe fd9c 	bl	8010220 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80116e8:	4b5b      	ldr	r3, [pc, #364]	; (8011858 <pvPortMalloc+0x180>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d101      	bne.n	80116f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80116f0:	f000 f920 	bl	8011934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80116f4:	4b59      	ldr	r3, [pc, #356]	; (801185c <pvPortMalloc+0x184>)
 80116f6:	681a      	ldr	r2, [r3, #0]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	4013      	ands	r3, r2
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	f040 8093 	bne.w	8011828 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d01d      	beq.n	8011744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011708:	2208      	movs	r2, #8
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	4413      	add	r3, r2
 801170e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f003 0307 	and.w	r3, r3, #7
 8011716:	2b00      	cmp	r3, #0
 8011718:	d014      	beq.n	8011744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f023 0307 	bic.w	r3, r3, #7
 8011720:	3308      	adds	r3, #8
 8011722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f003 0307 	and.w	r3, r3, #7
 801172a:	2b00      	cmp	r3, #0
 801172c:	d00a      	beq.n	8011744 <pvPortMalloc+0x6c>
	__asm volatile
 801172e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011732:	f383 8811 	msr	BASEPRI, r3
 8011736:	f3bf 8f6f 	isb	sy
 801173a:	f3bf 8f4f 	dsb	sy
 801173e:	617b      	str	r3, [r7, #20]
}
 8011740:	bf00      	nop
 8011742:	e7fe      	b.n	8011742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d06e      	beq.n	8011828 <pvPortMalloc+0x150>
 801174a:	4b45      	ldr	r3, [pc, #276]	; (8011860 <pvPortMalloc+0x188>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	429a      	cmp	r2, r3
 8011752:	d869      	bhi.n	8011828 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011754:	4b43      	ldr	r3, [pc, #268]	; (8011864 <pvPortMalloc+0x18c>)
 8011756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011758:	4b42      	ldr	r3, [pc, #264]	; (8011864 <pvPortMalloc+0x18c>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801175e:	e004      	b.n	801176a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176c:	685b      	ldr	r3, [r3, #4]
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	429a      	cmp	r2, r3
 8011772:	d903      	bls.n	801177c <pvPortMalloc+0xa4>
 8011774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d1f1      	bne.n	8011760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801177c:	4b36      	ldr	r3, [pc, #216]	; (8011858 <pvPortMalloc+0x180>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011782:	429a      	cmp	r2, r3
 8011784:	d050      	beq.n	8011828 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011786:	6a3b      	ldr	r3, [r7, #32]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	2208      	movs	r2, #8
 801178c:	4413      	add	r3, r2
 801178e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	6a3b      	ldr	r3, [r7, #32]
 8011796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801179a:	685a      	ldr	r2, [r3, #4]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	1ad2      	subs	r2, r2, r3
 80117a0:	2308      	movs	r3, #8
 80117a2:	005b      	lsls	r3, r3, #1
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d91f      	bls.n	80117e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80117a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4413      	add	r3, r2
 80117ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80117b0:	69bb      	ldr	r3, [r7, #24]
 80117b2:	f003 0307 	and.w	r3, r3, #7
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d00a      	beq.n	80117d0 <pvPortMalloc+0xf8>
	__asm volatile
 80117ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117be:	f383 8811 	msr	BASEPRI, r3
 80117c2:	f3bf 8f6f 	isb	sy
 80117c6:	f3bf 8f4f 	dsb	sy
 80117ca:	613b      	str	r3, [r7, #16]
}
 80117cc:	bf00      	nop
 80117ce:	e7fe      	b.n	80117ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80117d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d2:	685a      	ldr	r2, [r3, #4]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	1ad2      	subs	r2, r2, r3
 80117d8:	69bb      	ldr	r3, [r7, #24]
 80117da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80117dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117de:	687a      	ldr	r2, [r7, #4]
 80117e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80117e2:	69b8      	ldr	r0, [r7, #24]
 80117e4:	f000 f908 	bl	80119f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80117e8:	4b1d      	ldr	r3, [pc, #116]	; (8011860 <pvPortMalloc+0x188>)
 80117ea:	681a      	ldr	r2, [r3, #0]
 80117ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	1ad3      	subs	r3, r2, r3
 80117f2:	4a1b      	ldr	r2, [pc, #108]	; (8011860 <pvPortMalloc+0x188>)
 80117f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80117f6:	4b1a      	ldr	r3, [pc, #104]	; (8011860 <pvPortMalloc+0x188>)
 80117f8:	681a      	ldr	r2, [r3, #0]
 80117fa:	4b1b      	ldr	r3, [pc, #108]	; (8011868 <pvPortMalloc+0x190>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	429a      	cmp	r2, r3
 8011800:	d203      	bcs.n	801180a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011802:	4b17      	ldr	r3, [pc, #92]	; (8011860 <pvPortMalloc+0x188>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	4a18      	ldr	r2, [pc, #96]	; (8011868 <pvPortMalloc+0x190>)
 8011808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180c:	685a      	ldr	r2, [r3, #4]
 801180e:	4b13      	ldr	r3, [pc, #76]	; (801185c <pvPortMalloc+0x184>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	431a      	orrs	r2, r3
 8011814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801181a:	2200      	movs	r2, #0
 801181c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801181e:	4b13      	ldr	r3, [pc, #76]	; (801186c <pvPortMalloc+0x194>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	3301      	adds	r3, #1
 8011824:	4a11      	ldr	r2, [pc, #68]	; (801186c <pvPortMalloc+0x194>)
 8011826:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011828:	f7fe fd08 	bl	801023c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	f003 0307 	and.w	r3, r3, #7
 8011832:	2b00      	cmp	r3, #0
 8011834:	d00a      	beq.n	801184c <pvPortMalloc+0x174>
	__asm volatile
 8011836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183a:	f383 8811 	msr	BASEPRI, r3
 801183e:	f3bf 8f6f 	isb	sy
 8011842:	f3bf 8f4f 	dsb	sy
 8011846:	60fb      	str	r3, [r7, #12]
}
 8011848:	bf00      	nop
 801184a:	e7fe      	b.n	801184a <pvPortMalloc+0x172>
	return pvReturn;
 801184c:	69fb      	ldr	r3, [r7, #28]
}
 801184e:	4618      	mov	r0, r3
 8011850:	3728      	adds	r7, #40	; 0x28
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
 8011856:	bf00      	nop
 8011858:	20004b38 	.word	0x20004b38
 801185c:	20004b4c 	.word	0x20004b4c
 8011860:	20004b3c 	.word	0x20004b3c
 8011864:	20004b30 	.word	0x20004b30
 8011868:	20004b40 	.word	0x20004b40
 801186c:	20004b44 	.word	0x20004b44

08011870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b086      	sub	sp, #24
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d04d      	beq.n	801191e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011882:	2308      	movs	r3, #8
 8011884:	425b      	negs	r3, r3
 8011886:	697a      	ldr	r2, [r7, #20]
 8011888:	4413      	add	r3, r2
 801188a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	685a      	ldr	r2, [r3, #4]
 8011894:	4b24      	ldr	r3, [pc, #144]	; (8011928 <vPortFree+0xb8>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4013      	ands	r3, r2
 801189a:	2b00      	cmp	r3, #0
 801189c:	d10a      	bne.n	80118b4 <vPortFree+0x44>
	__asm volatile
 801189e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a2:	f383 8811 	msr	BASEPRI, r3
 80118a6:	f3bf 8f6f 	isb	sy
 80118aa:	f3bf 8f4f 	dsb	sy
 80118ae:	60fb      	str	r3, [r7, #12]
}
 80118b0:	bf00      	nop
 80118b2:	e7fe      	b.n	80118b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d00a      	beq.n	80118d2 <vPortFree+0x62>
	__asm volatile
 80118bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118c0:	f383 8811 	msr	BASEPRI, r3
 80118c4:	f3bf 8f6f 	isb	sy
 80118c8:	f3bf 8f4f 	dsb	sy
 80118cc:	60bb      	str	r3, [r7, #8]
}
 80118ce:	bf00      	nop
 80118d0:	e7fe      	b.n	80118d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	685a      	ldr	r2, [r3, #4]
 80118d6:	4b14      	ldr	r3, [pc, #80]	; (8011928 <vPortFree+0xb8>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	4013      	ands	r3, r2
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d01e      	beq.n	801191e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d11a      	bne.n	801191e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	685a      	ldr	r2, [r3, #4]
 80118ec:	4b0e      	ldr	r3, [pc, #56]	; (8011928 <vPortFree+0xb8>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	43db      	mvns	r3, r3
 80118f2:	401a      	ands	r2, r3
 80118f4:	693b      	ldr	r3, [r7, #16]
 80118f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80118f8:	f7fe fc92 	bl	8010220 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80118fc:	693b      	ldr	r3, [r7, #16]
 80118fe:	685a      	ldr	r2, [r3, #4]
 8011900:	4b0a      	ldr	r3, [pc, #40]	; (801192c <vPortFree+0xbc>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	4413      	add	r3, r2
 8011906:	4a09      	ldr	r2, [pc, #36]	; (801192c <vPortFree+0xbc>)
 8011908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801190a:	6938      	ldr	r0, [r7, #16]
 801190c:	f000 f874 	bl	80119f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011910:	4b07      	ldr	r3, [pc, #28]	; (8011930 <vPortFree+0xc0>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	3301      	adds	r3, #1
 8011916:	4a06      	ldr	r2, [pc, #24]	; (8011930 <vPortFree+0xc0>)
 8011918:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801191a:	f7fe fc8f 	bl	801023c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801191e:	bf00      	nop
 8011920:	3718      	adds	r7, #24
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	20004b4c 	.word	0x20004b4c
 801192c:	20004b3c 	.word	0x20004b3c
 8011930:	20004b48 	.word	0x20004b48

08011934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011934:	b480      	push	{r7}
 8011936:	b085      	sub	sp, #20
 8011938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801193a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801193e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011940:	4b27      	ldr	r3, [pc, #156]	; (80119e0 <prvHeapInit+0xac>)
 8011942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	f003 0307 	and.w	r3, r3, #7
 801194a:	2b00      	cmp	r3, #0
 801194c:	d00c      	beq.n	8011968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	3307      	adds	r3, #7
 8011952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f023 0307 	bic.w	r3, r3, #7
 801195a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801195c:	68ba      	ldr	r2, [r7, #8]
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	1ad3      	subs	r3, r2, r3
 8011962:	4a1f      	ldr	r2, [pc, #124]	; (80119e0 <prvHeapInit+0xac>)
 8011964:	4413      	add	r3, r2
 8011966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801196c:	4a1d      	ldr	r2, [pc, #116]	; (80119e4 <prvHeapInit+0xb0>)
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011972:	4b1c      	ldr	r3, [pc, #112]	; (80119e4 <prvHeapInit+0xb0>)
 8011974:	2200      	movs	r2, #0
 8011976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	68ba      	ldr	r2, [r7, #8]
 801197c:	4413      	add	r3, r2
 801197e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011980:	2208      	movs	r2, #8
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	1a9b      	subs	r3, r3, r2
 8011986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	f023 0307 	bic.w	r3, r3, #7
 801198e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	4a15      	ldr	r2, [pc, #84]	; (80119e8 <prvHeapInit+0xb4>)
 8011994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011996:	4b14      	ldr	r3, [pc, #80]	; (80119e8 <prvHeapInit+0xb4>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	2200      	movs	r2, #0
 801199c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801199e:	4b12      	ldr	r3, [pc, #72]	; (80119e8 <prvHeapInit+0xb4>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	2200      	movs	r2, #0
 80119a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	68fa      	ldr	r2, [r7, #12]
 80119ae:	1ad2      	subs	r2, r2, r3
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80119b4:	4b0c      	ldr	r3, [pc, #48]	; (80119e8 <prvHeapInit+0xb4>)
 80119b6:	681a      	ldr	r2, [r3, #0]
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	4a0a      	ldr	r2, [pc, #40]	; (80119ec <prvHeapInit+0xb8>)
 80119c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	685b      	ldr	r3, [r3, #4]
 80119c8:	4a09      	ldr	r2, [pc, #36]	; (80119f0 <prvHeapInit+0xbc>)
 80119ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80119cc:	4b09      	ldr	r3, [pc, #36]	; (80119f4 <prvHeapInit+0xc0>)
 80119ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80119d2:	601a      	str	r2, [r3, #0]
}
 80119d4:	bf00      	nop
 80119d6:	3714      	adds	r7, #20
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr
 80119e0:	20000f30 	.word	0x20000f30
 80119e4:	20004b30 	.word	0x20004b30
 80119e8:	20004b38 	.word	0x20004b38
 80119ec:	20004b40 	.word	0x20004b40
 80119f0:	20004b3c 	.word	0x20004b3c
 80119f4:	20004b4c 	.word	0x20004b4c

080119f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80119f8:	b480      	push	{r7}
 80119fa:	b085      	sub	sp, #20
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011a00:	4b28      	ldr	r3, [pc, #160]	; (8011aa4 <prvInsertBlockIntoFreeList+0xac>)
 8011a02:	60fb      	str	r3, [r7, #12]
 8011a04:	e002      	b.n	8011a0c <prvInsertBlockIntoFreeList+0x14>
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	60fb      	str	r3, [r7, #12]
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	687a      	ldr	r2, [r7, #4]
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d8f7      	bhi.n	8011a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	685b      	ldr	r3, [r3, #4]
 8011a1e:	68ba      	ldr	r2, [r7, #8]
 8011a20:	4413      	add	r3, r2
 8011a22:	687a      	ldr	r2, [r7, #4]
 8011a24:	429a      	cmp	r2, r3
 8011a26:	d108      	bne.n	8011a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	685a      	ldr	r2, [r3, #4]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	441a      	add	r2, r3
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	68ba      	ldr	r2, [r7, #8]
 8011a44:	441a      	add	r2, r3
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d118      	bne.n	8011a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	681a      	ldr	r2, [r3, #0]
 8011a52:	4b15      	ldr	r3, [pc, #84]	; (8011aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d00d      	beq.n	8011a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	685a      	ldr	r2, [r3, #4]
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	441a      	add	r2, r3
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	681a      	ldr	r2, [r3, #0]
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	601a      	str	r2, [r3, #0]
 8011a74:	e008      	b.n	8011a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011a76:	4b0c      	ldr	r3, [pc, #48]	; (8011aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8011a78:	681a      	ldr	r2, [r3, #0]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	601a      	str	r2, [r3, #0]
 8011a7e:	e003      	b.n	8011a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	681a      	ldr	r2, [r3, #0]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011a88:	68fa      	ldr	r2, [r7, #12]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d002      	beq.n	8011a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	687a      	ldr	r2, [r7, #4]
 8011a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a96:	bf00      	nop
 8011a98:	3714      	adds	r7, #20
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa0:	4770      	bx	lr
 8011aa2:	bf00      	nop
 8011aa4:	20004b30 	.word	0x20004b30
 8011aa8:	20004b38 	.word	0x20004b38

08011aac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	4912      	ldr	r1, [pc, #72]	; (8011afc <MX_USB_DEVICE_Init+0x50>)
 8011ab4:	4812      	ldr	r0, [pc, #72]	; (8011b00 <MX_USB_DEVICE_Init+0x54>)
 8011ab6:	f7fc f8fd 	bl	800dcb4 <USBD_Init>
 8011aba:	4603      	mov	r3, r0
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d001      	beq.n	8011ac4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011ac0:	f7f2 fae4 	bl	800408c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011ac4:	490f      	ldr	r1, [pc, #60]	; (8011b04 <MX_USB_DEVICE_Init+0x58>)
 8011ac6:	480e      	ldr	r0, [pc, #56]	; (8011b00 <MX_USB_DEVICE_Init+0x54>)
 8011ac8:	f7fc f924 	bl	800dd14 <USBD_RegisterClass>
 8011acc:	4603      	mov	r3, r0
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d001      	beq.n	8011ad6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011ad2:	f7f2 fadb 	bl	800408c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011ad6:	490c      	ldr	r1, [pc, #48]	; (8011b08 <MX_USB_DEVICE_Init+0x5c>)
 8011ad8:	4809      	ldr	r0, [pc, #36]	; (8011b00 <MX_USB_DEVICE_Init+0x54>)
 8011ada:	f7fc f845 	bl	800db68 <USBD_CDC_RegisterInterface>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d001      	beq.n	8011ae8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011ae4:	f7f2 fad2 	bl	800408c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011ae8:	4805      	ldr	r0, [pc, #20]	; (8011b00 <MX_USB_DEVICE_Init+0x54>)
 8011aea:	f7fc f93a 	bl	800dd62 <USBD_Start>
 8011aee:	4603      	mov	r3, r0
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d001      	beq.n	8011af8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011af4:	f7f2 faca 	bl	800408c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011af8:	bf00      	nop
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	20000140 	.word	0x20000140
 8011b00:	20005978 	.word	0x20005978
 8011b04:	20000024 	.word	0x20000024
 8011b08:	2000012c 	.word	0x2000012c

08011b0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011b10:	2200      	movs	r2, #0
 8011b12:	4905      	ldr	r1, [pc, #20]	; (8011b28 <CDC_Init_FS+0x1c>)
 8011b14:	4805      	ldr	r0, [pc, #20]	; (8011b2c <CDC_Init_FS+0x20>)
 8011b16:	f7fc f83c 	bl	800db92 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011b1a:	4905      	ldr	r1, [pc, #20]	; (8011b30 <CDC_Init_FS+0x24>)
 8011b1c:	4803      	ldr	r0, [pc, #12]	; (8011b2c <CDC_Init_FS+0x20>)
 8011b1e:	f7fc f856 	bl	800dbce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011b22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	20006448 	.word	0x20006448
 8011b2c:	20005978 	.word	0x20005978
 8011b30:	20005c48 	.word	0x20005c48

08011b34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011b34:	b480      	push	{r7}
 8011b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011b38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b42:	4770      	bx	lr

08011b44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011b44:	b480      	push	{r7}
 8011b46:	b083      	sub	sp, #12
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	6039      	str	r1, [r7, #0]
 8011b4e:	71fb      	strb	r3, [r7, #7]
 8011b50:	4613      	mov	r3, r2
 8011b52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011b54:	79fb      	ldrb	r3, [r7, #7]
 8011b56:	2b23      	cmp	r3, #35	; 0x23
 8011b58:	d84a      	bhi.n	8011bf0 <CDC_Control_FS+0xac>
 8011b5a:	a201      	add	r2, pc, #4	; (adr r2, 8011b60 <CDC_Control_FS+0x1c>)
 8011b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b60:	08011bf1 	.word	0x08011bf1
 8011b64:	08011bf1 	.word	0x08011bf1
 8011b68:	08011bf1 	.word	0x08011bf1
 8011b6c:	08011bf1 	.word	0x08011bf1
 8011b70:	08011bf1 	.word	0x08011bf1
 8011b74:	08011bf1 	.word	0x08011bf1
 8011b78:	08011bf1 	.word	0x08011bf1
 8011b7c:	08011bf1 	.word	0x08011bf1
 8011b80:	08011bf1 	.word	0x08011bf1
 8011b84:	08011bf1 	.word	0x08011bf1
 8011b88:	08011bf1 	.word	0x08011bf1
 8011b8c:	08011bf1 	.word	0x08011bf1
 8011b90:	08011bf1 	.word	0x08011bf1
 8011b94:	08011bf1 	.word	0x08011bf1
 8011b98:	08011bf1 	.word	0x08011bf1
 8011b9c:	08011bf1 	.word	0x08011bf1
 8011ba0:	08011bf1 	.word	0x08011bf1
 8011ba4:	08011bf1 	.word	0x08011bf1
 8011ba8:	08011bf1 	.word	0x08011bf1
 8011bac:	08011bf1 	.word	0x08011bf1
 8011bb0:	08011bf1 	.word	0x08011bf1
 8011bb4:	08011bf1 	.word	0x08011bf1
 8011bb8:	08011bf1 	.word	0x08011bf1
 8011bbc:	08011bf1 	.word	0x08011bf1
 8011bc0:	08011bf1 	.word	0x08011bf1
 8011bc4:	08011bf1 	.word	0x08011bf1
 8011bc8:	08011bf1 	.word	0x08011bf1
 8011bcc:	08011bf1 	.word	0x08011bf1
 8011bd0:	08011bf1 	.word	0x08011bf1
 8011bd4:	08011bf1 	.word	0x08011bf1
 8011bd8:	08011bf1 	.word	0x08011bf1
 8011bdc:	08011bf1 	.word	0x08011bf1
 8011be0:	08011bf1 	.word	0x08011bf1
 8011be4:	08011bf1 	.word	0x08011bf1
 8011be8:	08011bf1 	.word	0x08011bf1
 8011bec:	08011bf1 	.word	0x08011bf1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011bf0:	bf00      	nop
  }

  return (USBD_OK);
 8011bf2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	370c      	adds	r7, #12
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr

08011c00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011c0a:	6879      	ldr	r1, [r7, #4]
 8011c0c:	4805      	ldr	r0, [pc, #20]	; (8011c24 <CDC_Receive_FS+0x24>)
 8011c0e:	f7fb ffde 	bl	800dbce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011c12:	4804      	ldr	r0, [pc, #16]	; (8011c24 <CDC_Receive_FS+0x24>)
 8011c14:	f7fc f824 	bl	800dc60 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011c18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3708      	adds	r7, #8
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}
 8011c22:	bf00      	nop
 8011c24:	20005978 	.word	0x20005978

08011c28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b084      	sub	sp, #16
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
 8011c30:	460b      	mov	r3, r1
 8011c32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011c34:	2300      	movs	r3, #0
 8011c36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011c38:	4b0d      	ldr	r3, [pc, #52]	; (8011c70 <CDC_Transmit_FS+0x48>)
 8011c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011c3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d001      	beq.n	8011c4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	e00b      	b.n	8011c66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011c4e:	887b      	ldrh	r3, [r7, #2]
 8011c50:	461a      	mov	r2, r3
 8011c52:	6879      	ldr	r1, [r7, #4]
 8011c54:	4806      	ldr	r0, [pc, #24]	; (8011c70 <CDC_Transmit_FS+0x48>)
 8011c56:	f7fb ff9c 	bl	800db92 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011c5a:	4805      	ldr	r0, [pc, #20]	; (8011c70 <CDC_Transmit_FS+0x48>)
 8011c5c:	f7fb ffd0 	bl	800dc00 <USBD_CDC_TransmitPacket>
 8011c60:	4603      	mov	r3, r0
 8011c62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	3710      	adds	r7, #16
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
 8011c6e:	bf00      	nop
 8011c70:	20005978 	.word	0x20005978

08011c74 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011c74:	b480      	push	{r7}
 8011c76:	b087      	sub	sp, #28
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	60f8      	str	r0, [r7, #12]
 8011c7c:	60b9      	str	r1, [r7, #8]
 8011c7e:	4613      	mov	r3, r2
 8011c80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011c82:	2300      	movs	r3, #0
 8011c84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011c86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	371c      	adds	r7, #28
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c94:	4770      	bx	lr
	...

08011c98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	6039      	str	r1, [r7, #0]
 8011ca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	2212      	movs	r2, #18
 8011ca8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011caa:	4b03      	ldr	r3, [pc, #12]	; (8011cb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	370c      	adds	r7, #12
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb6:	4770      	bx	lr
 8011cb8:	2000015c 	.word	0x2000015c

08011cbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b083      	sub	sp, #12
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	6039      	str	r1, [r7, #0]
 8011cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	2204      	movs	r2, #4
 8011ccc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011cce:	4b03      	ldr	r3, [pc, #12]	; (8011cdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	370c      	adds	r7, #12
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cda:	4770      	bx	lr
 8011cdc:	20000170 	.word	0x20000170

08011ce0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b082      	sub	sp, #8
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	6039      	str	r1, [r7, #0]
 8011cea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011cec:	79fb      	ldrb	r3, [r7, #7]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d105      	bne.n	8011cfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011cf2:	683a      	ldr	r2, [r7, #0]
 8011cf4:	4907      	ldr	r1, [pc, #28]	; (8011d14 <USBD_FS_ProductStrDescriptor+0x34>)
 8011cf6:	4808      	ldr	r0, [pc, #32]	; (8011d18 <USBD_FS_ProductStrDescriptor+0x38>)
 8011cf8:	f7fd f865 	bl	800edc6 <USBD_GetString>
 8011cfc:	e004      	b.n	8011d08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011cfe:	683a      	ldr	r2, [r7, #0]
 8011d00:	4904      	ldr	r1, [pc, #16]	; (8011d14 <USBD_FS_ProductStrDescriptor+0x34>)
 8011d02:	4805      	ldr	r0, [pc, #20]	; (8011d18 <USBD_FS_ProductStrDescriptor+0x38>)
 8011d04:	f7fd f85f 	bl	800edc6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011d08:	4b02      	ldr	r3, [pc, #8]	; (8011d14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3708      	adds	r7, #8
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	20006c48 	.word	0x20006c48
 8011d18:	08014250 	.word	0x08014250

08011d1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	4603      	mov	r3, r0
 8011d24:	6039      	str	r1, [r7, #0]
 8011d26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011d28:	683a      	ldr	r2, [r7, #0]
 8011d2a:	4904      	ldr	r1, [pc, #16]	; (8011d3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011d2c:	4804      	ldr	r0, [pc, #16]	; (8011d40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011d2e:	f7fd f84a 	bl	800edc6 <USBD_GetString>
  return USBD_StrDesc;
 8011d32:	4b02      	ldr	r3, [pc, #8]	; (8011d3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	3708      	adds	r7, #8
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}
 8011d3c:	20006c48 	.word	0x20006c48
 8011d40:	08014260 	.word	0x08014260

08011d44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	6039      	str	r1, [r7, #0]
 8011d4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	221a      	movs	r2, #26
 8011d54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011d56:	f000 f843 	bl	8011de0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011d5a:	4b02      	ldr	r3, [pc, #8]	; (8011d64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3708      	adds	r7, #8
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}
 8011d64:	20000174 	.word	0x20000174

08011d68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	4603      	mov	r3, r0
 8011d70:	6039      	str	r1, [r7, #0]
 8011d72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011d74:	79fb      	ldrb	r3, [r7, #7]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d105      	bne.n	8011d86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011d7a:	683a      	ldr	r2, [r7, #0]
 8011d7c:	4907      	ldr	r1, [pc, #28]	; (8011d9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8011d7e:	4808      	ldr	r0, [pc, #32]	; (8011da0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011d80:	f7fd f821 	bl	800edc6 <USBD_GetString>
 8011d84:	e004      	b.n	8011d90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011d86:	683a      	ldr	r2, [r7, #0]
 8011d88:	4904      	ldr	r1, [pc, #16]	; (8011d9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8011d8a:	4805      	ldr	r0, [pc, #20]	; (8011da0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011d8c:	f7fd f81b 	bl	800edc6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011d90:	4b02      	ldr	r3, [pc, #8]	; (8011d9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3708      	adds	r7, #8
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
 8011d9a:	bf00      	nop
 8011d9c:	20006c48 	.word	0x20006c48
 8011da0:	08014274 	.word	0x08014274

08011da4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b082      	sub	sp, #8
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	4603      	mov	r3, r0
 8011dac:	6039      	str	r1, [r7, #0]
 8011dae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011db0:	79fb      	ldrb	r3, [r7, #7]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d105      	bne.n	8011dc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011db6:	683a      	ldr	r2, [r7, #0]
 8011db8:	4907      	ldr	r1, [pc, #28]	; (8011dd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011dba:	4808      	ldr	r0, [pc, #32]	; (8011ddc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011dbc:	f7fd f803 	bl	800edc6 <USBD_GetString>
 8011dc0:	e004      	b.n	8011dcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011dc2:	683a      	ldr	r2, [r7, #0]
 8011dc4:	4904      	ldr	r1, [pc, #16]	; (8011dd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011dc6:	4805      	ldr	r0, [pc, #20]	; (8011ddc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011dc8:	f7fc fffd 	bl	800edc6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011dcc:	4b02      	ldr	r3, [pc, #8]	; (8011dd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3708      	adds	r7, #8
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}
 8011dd6:	bf00      	nop
 8011dd8:	20006c48 	.word	0x20006c48
 8011ddc:	08014280 	.word	0x08014280

08011de0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b084      	sub	sp, #16
 8011de4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011de6:	4b0f      	ldr	r3, [pc, #60]	; (8011e24 <Get_SerialNum+0x44>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011dec:	4b0e      	ldr	r3, [pc, #56]	; (8011e28 <Get_SerialNum+0x48>)
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011df2:	4b0e      	ldr	r3, [pc, #56]	; (8011e2c <Get_SerialNum+0x4c>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011df8:	68fa      	ldr	r2, [r7, #12]
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	4413      	add	r3, r2
 8011dfe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d009      	beq.n	8011e1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011e06:	2208      	movs	r2, #8
 8011e08:	4909      	ldr	r1, [pc, #36]	; (8011e30 <Get_SerialNum+0x50>)
 8011e0a:	68f8      	ldr	r0, [r7, #12]
 8011e0c:	f000 f814 	bl	8011e38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011e10:	2204      	movs	r2, #4
 8011e12:	4908      	ldr	r1, [pc, #32]	; (8011e34 <Get_SerialNum+0x54>)
 8011e14:	68b8      	ldr	r0, [r7, #8]
 8011e16:	f000 f80f 	bl	8011e38 <IntToUnicode>
  }
}
 8011e1a:	bf00      	nop
 8011e1c:	3710      	adds	r7, #16
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}
 8011e22:	bf00      	nop
 8011e24:	1fff7a10 	.word	0x1fff7a10
 8011e28:	1fff7a14 	.word	0x1fff7a14
 8011e2c:	1fff7a18 	.word	0x1fff7a18
 8011e30:	20000176 	.word	0x20000176
 8011e34:	20000186 	.word	0x20000186

08011e38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011e38:	b480      	push	{r7}
 8011e3a:	b087      	sub	sp, #28
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	60f8      	str	r0, [r7, #12]
 8011e40:	60b9      	str	r1, [r7, #8]
 8011e42:	4613      	mov	r3, r2
 8011e44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011e46:	2300      	movs	r3, #0
 8011e48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	75fb      	strb	r3, [r7, #23]
 8011e4e:	e027      	b.n	8011ea0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	0f1b      	lsrs	r3, r3, #28
 8011e54:	2b09      	cmp	r3, #9
 8011e56:	d80b      	bhi.n	8011e70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	0f1b      	lsrs	r3, r3, #28
 8011e5c:	b2da      	uxtb	r2, r3
 8011e5e:	7dfb      	ldrb	r3, [r7, #23]
 8011e60:	005b      	lsls	r3, r3, #1
 8011e62:	4619      	mov	r1, r3
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	440b      	add	r3, r1
 8011e68:	3230      	adds	r2, #48	; 0x30
 8011e6a:	b2d2      	uxtb	r2, r2
 8011e6c:	701a      	strb	r2, [r3, #0]
 8011e6e:	e00a      	b.n	8011e86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	0f1b      	lsrs	r3, r3, #28
 8011e74:	b2da      	uxtb	r2, r3
 8011e76:	7dfb      	ldrb	r3, [r7, #23]
 8011e78:	005b      	lsls	r3, r3, #1
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	440b      	add	r3, r1
 8011e80:	3237      	adds	r2, #55	; 0x37
 8011e82:	b2d2      	uxtb	r2, r2
 8011e84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	011b      	lsls	r3, r3, #4
 8011e8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011e8c:	7dfb      	ldrb	r3, [r7, #23]
 8011e8e:	005b      	lsls	r3, r3, #1
 8011e90:	3301      	adds	r3, #1
 8011e92:	68ba      	ldr	r2, [r7, #8]
 8011e94:	4413      	add	r3, r2
 8011e96:	2200      	movs	r2, #0
 8011e98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011e9a:	7dfb      	ldrb	r3, [r7, #23]
 8011e9c:	3301      	adds	r3, #1
 8011e9e:	75fb      	strb	r3, [r7, #23]
 8011ea0:	7dfa      	ldrb	r2, [r7, #23]
 8011ea2:	79fb      	ldrb	r3, [r7, #7]
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d3d3      	bcc.n	8011e50 <IntToUnicode+0x18>
  }
}
 8011ea8:	bf00      	nop
 8011eaa:	bf00      	nop
 8011eac:	371c      	adds	r7, #28
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb4:	4770      	bx	lr
	...

08011eb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b08a      	sub	sp, #40	; 0x28
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011ec0:	f107 0314 	add.w	r3, r7, #20
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	601a      	str	r2, [r3, #0]
 8011ec8:	605a      	str	r2, [r3, #4]
 8011eca:	609a      	str	r2, [r3, #8]
 8011ecc:	60da      	str	r2, [r3, #12]
 8011ece:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011ed8:	d147      	bne.n	8011f6a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011eda:	2300      	movs	r3, #0
 8011edc:	613b      	str	r3, [r7, #16]
 8011ede:	4b25      	ldr	r3, [pc, #148]	; (8011f74 <HAL_PCD_MspInit+0xbc>)
 8011ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ee2:	4a24      	ldr	r2, [pc, #144]	; (8011f74 <HAL_PCD_MspInit+0xbc>)
 8011ee4:	f043 0301 	orr.w	r3, r3, #1
 8011ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8011eea:	4b22      	ldr	r3, [pc, #136]	; (8011f74 <HAL_PCD_MspInit+0xbc>)
 8011eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011eee:	f003 0301 	and.w	r3, r3, #1
 8011ef2:	613b      	str	r3, [r7, #16]
 8011ef4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8011ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011efc:	2300      	movs	r3, #0
 8011efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f00:	2300      	movs	r3, #0
 8011f02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8011f04:	f107 0314 	add.w	r3, r7, #20
 8011f08:	4619      	mov	r1, r3
 8011f0a:	481b      	ldr	r0, [pc, #108]	; (8011f78 <HAL_PCD_MspInit+0xc0>)
 8011f0c:	f7f3 fc8c 	bl	8005828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8011f10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8011f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f16:	2302      	movs	r3, #2
 8011f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011f1e:	2303      	movs	r3, #3
 8011f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011f22:	230a      	movs	r3, #10
 8011f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f26:	f107 0314 	add.w	r3, r7, #20
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	4812      	ldr	r0, [pc, #72]	; (8011f78 <HAL_PCD_MspInit+0xc0>)
 8011f2e:	f7f3 fc7b 	bl	8005828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011f32:	4b10      	ldr	r3, [pc, #64]	; (8011f74 <HAL_PCD_MspInit+0xbc>)
 8011f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f36:	4a0f      	ldr	r2, [pc, #60]	; (8011f74 <HAL_PCD_MspInit+0xbc>)
 8011f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f3c:	6353      	str	r3, [r2, #52]	; 0x34
 8011f3e:	2300      	movs	r3, #0
 8011f40:	60fb      	str	r3, [r7, #12]
 8011f42:	4b0c      	ldr	r3, [pc, #48]	; (8011f74 <HAL_PCD_MspInit+0xbc>)
 8011f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f46:	4a0b      	ldr	r2, [pc, #44]	; (8011f74 <HAL_PCD_MspInit+0xbc>)
 8011f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8011f4e:	4b09      	ldr	r3, [pc, #36]	; (8011f74 <HAL_PCD_MspInit+0xbc>)
 8011f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011f56:	60fb      	str	r3, [r7, #12]
 8011f58:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	2105      	movs	r1, #5
 8011f5e:	2043      	movs	r0, #67	; 0x43
 8011f60:	f7f3 fc08 	bl	8005774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011f64:	2043      	movs	r0, #67	; 0x43
 8011f66:	f7f3 fc21 	bl	80057ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011f6a:	bf00      	nop
 8011f6c:	3728      	adds	r7, #40	; 0x28
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	bf00      	nop
 8011f74:	40023800 	.word	0x40023800
 8011f78:	40020000 	.word	0x40020000

08011f7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011f90:	4619      	mov	r1, r3
 8011f92:	4610      	mov	r0, r2
 8011f94:	f7fb ff30 	bl	800ddf8 <USBD_LL_SetupStage>
}
 8011f98:	bf00      	nop
 8011f9a:	3708      	adds	r7, #8
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	460b      	mov	r3, r1
 8011faa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011fb2:	78fa      	ldrb	r2, [r7, #3]
 8011fb4:	6879      	ldr	r1, [r7, #4]
 8011fb6:	4613      	mov	r3, r2
 8011fb8:	00db      	lsls	r3, r3, #3
 8011fba:	1a9b      	subs	r3, r3, r2
 8011fbc:	009b      	lsls	r3, r3, #2
 8011fbe:	440b      	add	r3, r1
 8011fc0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011fc4:	681a      	ldr	r2, [r3, #0]
 8011fc6:	78fb      	ldrb	r3, [r7, #3]
 8011fc8:	4619      	mov	r1, r3
 8011fca:	f7fb ff6a 	bl	800dea2 <USBD_LL_DataOutStage>
}
 8011fce:	bf00      	nop
 8011fd0:	3708      	adds	r7, #8
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}

08011fd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fd6:	b580      	push	{r7, lr}
 8011fd8:	b082      	sub	sp, #8
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
 8011fde:	460b      	mov	r3, r1
 8011fe0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011fe8:	78fa      	ldrb	r2, [r7, #3]
 8011fea:	6879      	ldr	r1, [r7, #4]
 8011fec:	4613      	mov	r3, r2
 8011fee:	00db      	lsls	r3, r3, #3
 8011ff0:	1a9b      	subs	r3, r3, r2
 8011ff2:	009b      	lsls	r3, r3, #2
 8011ff4:	440b      	add	r3, r1
 8011ff6:	3348      	adds	r3, #72	; 0x48
 8011ff8:	681a      	ldr	r2, [r3, #0]
 8011ffa:	78fb      	ldrb	r3, [r7, #3]
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	f7fb ffb3 	bl	800df68 <USBD_LL_DataInStage>
}
 8012002:	bf00      	nop
 8012004:	3708      	adds	r7, #8
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}

0801200a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801200a:	b580      	push	{r7, lr}
 801200c:	b082      	sub	sp, #8
 801200e:	af00      	add	r7, sp, #0
 8012010:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012018:	4618      	mov	r0, r3
 801201a:	f7fc f8c7 	bl	800e1ac <USBD_LL_SOF>
}
 801201e:	bf00      	nop
 8012020:	3708      	adds	r7, #8
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}

08012026 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012026:	b580      	push	{r7, lr}
 8012028:	b084      	sub	sp, #16
 801202a:	af00      	add	r7, sp, #0
 801202c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801202e:	2301      	movs	r3, #1
 8012030:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	68db      	ldr	r3, [r3, #12]
 8012036:	2b02      	cmp	r3, #2
 8012038:	d001      	beq.n	801203e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801203a:	f7f2 f827 	bl	800408c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012044:	7bfa      	ldrb	r2, [r7, #15]
 8012046:	4611      	mov	r1, r2
 8012048:	4618      	mov	r0, r3
 801204a:	f7fc f871 	bl	800e130 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012054:	4618      	mov	r0, r3
 8012056:	f7fc f81d 	bl	800e094 <USBD_LL_Reset>
}
 801205a:	bf00      	nop
 801205c:	3710      	adds	r7, #16
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
	...

08012064 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b082      	sub	sp, #8
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012072:	4618      	mov	r0, r3
 8012074:	f7fc f86c 	bl	800e150 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	6812      	ldr	r2, [r2, #0]
 8012086:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801208a:	f043 0301 	orr.w	r3, r3, #1
 801208e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	6a1b      	ldr	r3, [r3, #32]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d005      	beq.n	80120a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012098:	4b04      	ldr	r3, [pc, #16]	; (80120ac <HAL_PCD_SuspendCallback+0x48>)
 801209a:	691b      	ldr	r3, [r3, #16]
 801209c:	4a03      	ldr	r2, [pc, #12]	; (80120ac <HAL_PCD_SuspendCallback+0x48>)
 801209e:	f043 0306 	orr.w	r3, r3, #6
 80120a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80120a4:	bf00      	nop
 80120a6:	3708      	adds	r7, #8
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}
 80120ac:	e000ed00 	.word	0xe000ed00

080120b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80120be:	4618      	mov	r0, r3
 80120c0:	f7fc f85c 	bl	800e17c <USBD_LL_Resume>
}
 80120c4:	bf00      	nop
 80120c6:	3708      	adds	r7, #8
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}

080120cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b082      	sub	sp, #8
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	460b      	mov	r3, r1
 80120d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80120de:	78fa      	ldrb	r2, [r7, #3]
 80120e0:	4611      	mov	r1, r2
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7fc f8aa 	bl	800e23c <USBD_LL_IsoOUTIncomplete>
}
 80120e8:	bf00      	nop
 80120ea:	3708      	adds	r7, #8
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}

080120f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b082      	sub	sp, #8
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	460b      	mov	r3, r1
 80120fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012102:	78fa      	ldrb	r2, [r7, #3]
 8012104:	4611      	mov	r1, r2
 8012106:	4618      	mov	r0, r3
 8012108:	f7fc f872 	bl	800e1f0 <USBD_LL_IsoINIncomplete>
}
 801210c:	bf00      	nop
 801210e:	3708      	adds	r7, #8
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}

08012114 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b082      	sub	sp, #8
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012122:	4618      	mov	r0, r3
 8012124:	f7fc f8b0 	bl	800e288 <USBD_LL_DevConnected>
}
 8012128:	bf00      	nop
 801212a:	3708      	adds	r7, #8
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b082      	sub	sp, #8
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801213e:	4618      	mov	r0, r3
 8012140:	f7fc f8ad 	bl	800e29e <USBD_LL_DevDisconnected>
}
 8012144:	bf00      	nop
 8012146:	3708      	adds	r7, #8
 8012148:	46bd      	mov	sp, r7
 801214a:	bd80      	pop	{r7, pc}

0801214c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	781b      	ldrb	r3, [r3, #0]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d13c      	bne.n	80121d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801215c:	4a20      	ldr	r2, [pc, #128]	; (80121e0 <USBD_LL_Init+0x94>)
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	4a1e      	ldr	r2, [pc, #120]	; (80121e0 <USBD_LL_Init+0x94>)
 8012168:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801216c:	4b1c      	ldr	r3, [pc, #112]	; (80121e0 <USBD_LL_Init+0x94>)
 801216e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012172:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8012174:	4b1a      	ldr	r3, [pc, #104]	; (80121e0 <USBD_LL_Init+0x94>)
 8012176:	2204      	movs	r2, #4
 8012178:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801217a:	4b19      	ldr	r3, [pc, #100]	; (80121e0 <USBD_LL_Init+0x94>)
 801217c:	2202      	movs	r2, #2
 801217e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012180:	4b17      	ldr	r3, [pc, #92]	; (80121e0 <USBD_LL_Init+0x94>)
 8012182:	2200      	movs	r2, #0
 8012184:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012186:	4b16      	ldr	r3, [pc, #88]	; (80121e0 <USBD_LL_Init+0x94>)
 8012188:	2202      	movs	r2, #2
 801218a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801218c:	4b14      	ldr	r3, [pc, #80]	; (80121e0 <USBD_LL_Init+0x94>)
 801218e:	2200      	movs	r2, #0
 8012190:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012192:	4b13      	ldr	r3, [pc, #76]	; (80121e0 <USBD_LL_Init+0x94>)
 8012194:	2200      	movs	r2, #0
 8012196:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012198:	4b11      	ldr	r3, [pc, #68]	; (80121e0 <USBD_LL_Init+0x94>)
 801219a:	2200      	movs	r2, #0
 801219c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801219e:	4b10      	ldr	r3, [pc, #64]	; (80121e0 <USBD_LL_Init+0x94>)
 80121a0:	2201      	movs	r2, #1
 80121a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80121a4:	4b0e      	ldr	r3, [pc, #56]	; (80121e0 <USBD_LL_Init+0x94>)
 80121a6:	2200      	movs	r2, #0
 80121a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80121aa:	480d      	ldr	r0, [pc, #52]	; (80121e0 <USBD_LL_Init+0x94>)
 80121ac:	f7f6 faf2 	bl	8008794 <HAL_PCD_Init>
 80121b0:	4603      	mov	r3, r0
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d001      	beq.n	80121ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80121b6:	f7f1 ff69 	bl	800408c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80121ba:	2180      	movs	r1, #128	; 0x80
 80121bc:	4808      	ldr	r0, [pc, #32]	; (80121e0 <USBD_LL_Init+0x94>)
 80121be:	f7f7 fc50 	bl	8009a62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80121c2:	2240      	movs	r2, #64	; 0x40
 80121c4:	2100      	movs	r1, #0
 80121c6:	4806      	ldr	r0, [pc, #24]	; (80121e0 <USBD_LL_Init+0x94>)
 80121c8:	f7f7 fc04 	bl	80099d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80121cc:	2280      	movs	r2, #128	; 0x80
 80121ce:	2101      	movs	r1, #1
 80121d0:	4803      	ldr	r0, [pc, #12]	; (80121e0 <USBD_LL_Init+0x94>)
 80121d2:	f7f7 fbff 	bl	80099d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80121d6:	2300      	movs	r3, #0
}
 80121d8:	4618      	mov	r0, r3
 80121da:	3708      	adds	r7, #8
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}
 80121e0:	20006e48 	.word	0x20006e48

080121e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b084      	sub	sp, #16
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121ec:	2300      	movs	r3, #0
 80121ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121f0:	2300      	movs	r3, #0
 80121f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7f6 fbe7 	bl	80089ce <HAL_PCD_Start>
 8012200:	4603      	mov	r3, r0
 8012202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012204:	7bfb      	ldrb	r3, [r7, #15]
 8012206:	4618      	mov	r0, r3
 8012208:	f000 f942 	bl	8012490 <USBD_Get_USB_Status>
 801220c:	4603      	mov	r3, r0
 801220e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012210:	7bbb      	ldrb	r3, [r7, #14]
}
 8012212:	4618      	mov	r0, r3
 8012214:	3710      	adds	r7, #16
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}

0801221a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801221a:	b580      	push	{r7, lr}
 801221c:	b084      	sub	sp, #16
 801221e:	af00      	add	r7, sp, #0
 8012220:	6078      	str	r0, [r7, #4]
 8012222:	4608      	mov	r0, r1
 8012224:	4611      	mov	r1, r2
 8012226:	461a      	mov	r2, r3
 8012228:	4603      	mov	r3, r0
 801222a:	70fb      	strb	r3, [r7, #3]
 801222c:	460b      	mov	r3, r1
 801222e:	70bb      	strb	r3, [r7, #2]
 8012230:	4613      	mov	r3, r2
 8012232:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012234:	2300      	movs	r3, #0
 8012236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012238:	2300      	movs	r3, #0
 801223a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012242:	78bb      	ldrb	r3, [r7, #2]
 8012244:	883a      	ldrh	r2, [r7, #0]
 8012246:	78f9      	ldrb	r1, [r7, #3]
 8012248:	f7f6 ffcb 	bl	80091e2 <HAL_PCD_EP_Open>
 801224c:	4603      	mov	r3, r0
 801224e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012250:	7bfb      	ldrb	r3, [r7, #15]
 8012252:	4618      	mov	r0, r3
 8012254:	f000 f91c 	bl	8012490 <USBD_Get_USB_Status>
 8012258:	4603      	mov	r3, r0
 801225a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801225c:	7bbb      	ldrb	r3, [r7, #14]
}
 801225e:	4618      	mov	r0, r3
 8012260:	3710      	adds	r7, #16
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}

08012266 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012266:	b580      	push	{r7, lr}
 8012268:	b084      	sub	sp, #16
 801226a:	af00      	add	r7, sp, #0
 801226c:	6078      	str	r0, [r7, #4]
 801226e:	460b      	mov	r3, r1
 8012270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012272:	2300      	movs	r3, #0
 8012274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012276:	2300      	movs	r3, #0
 8012278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012280:	78fa      	ldrb	r2, [r7, #3]
 8012282:	4611      	mov	r1, r2
 8012284:	4618      	mov	r0, r3
 8012286:	f7f7 f814 	bl	80092b2 <HAL_PCD_EP_Close>
 801228a:	4603      	mov	r3, r0
 801228c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801228e:	7bfb      	ldrb	r3, [r7, #15]
 8012290:	4618      	mov	r0, r3
 8012292:	f000 f8fd 	bl	8012490 <USBD_Get_USB_Status>
 8012296:	4603      	mov	r3, r0
 8012298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801229a:	7bbb      	ldrb	r3, [r7, #14]
}
 801229c:	4618      	mov	r0, r3
 801229e:	3710      	adds	r7, #16
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}

080122a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	460b      	mov	r3, r1
 80122ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122b0:	2300      	movs	r3, #0
 80122b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122b4:	2300      	movs	r3, #0
 80122b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80122be:	78fa      	ldrb	r2, [r7, #3]
 80122c0:	4611      	mov	r1, r2
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7f7 f8ec 	bl	80094a0 <HAL_PCD_EP_SetStall>
 80122c8:	4603      	mov	r3, r0
 80122ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122cc:	7bfb      	ldrb	r3, [r7, #15]
 80122ce:	4618      	mov	r0, r3
 80122d0:	f000 f8de 	bl	8012490 <USBD_Get_USB_Status>
 80122d4:	4603      	mov	r3, r0
 80122d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3710      	adds	r7, #16
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}

080122e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122e2:	b580      	push	{r7, lr}
 80122e4:	b084      	sub	sp, #16
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	6078      	str	r0, [r7, #4]
 80122ea:	460b      	mov	r3, r1
 80122ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122ee:	2300      	movs	r3, #0
 80122f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122f2:	2300      	movs	r3, #0
 80122f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80122fc:	78fa      	ldrb	r2, [r7, #3]
 80122fe:	4611      	mov	r1, r2
 8012300:	4618      	mov	r0, r3
 8012302:	f7f7 f931 	bl	8009568 <HAL_PCD_EP_ClrStall>
 8012306:	4603      	mov	r3, r0
 8012308:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801230a:	7bfb      	ldrb	r3, [r7, #15]
 801230c:	4618      	mov	r0, r3
 801230e:	f000 f8bf 	bl	8012490 <USBD_Get_USB_Status>
 8012312:	4603      	mov	r3, r0
 8012314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012316:	7bbb      	ldrb	r3, [r7, #14]
}
 8012318:	4618      	mov	r0, r3
 801231a:	3710      	adds	r7, #16
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012320:	b480      	push	{r7}
 8012322:	b085      	sub	sp, #20
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	460b      	mov	r3, r1
 801232a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012332:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012338:	2b00      	cmp	r3, #0
 801233a:	da0b      	bge.n	8012354 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801233c:	78fb      	ldrb	r3, [r7, #3]
 801233e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012342:	68f9      	ldr	r1, [r7, #12]
 8012344:	4613      	mov	r3, r2
 8012346:	00db      	lsls	r3, r3, #3
 8012348:	1a9b      	subs	r3, r3, r2
 801234a:	009b      	lsls	r3, r3, #2
 801234c:	440b      	add	r3, r1
 801234e:	333e      	adds	r3, #62	; 0x3e
 8012350:	781b      	ldrb	r3, [r3, #0]
 8012352:	e00b      	b.n	801236c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012354:	78fb      	ldrb	r3, [r7, #3]
 8012356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801235a:	68f9      	ldr	r1, [r7, #12]
 801235c:	4613      	mov	r3, r2
 801235e:	00db      	lsls	r3, r3, #3
 8012360:	1a9b      	subs	r3, r3, r2
 8012362:	009b      	lsls	r3, r3, #2
 8012364:	440b      	add	r3, r1
 8012366:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801236a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801236c:	4618      	mov	r0, r3
 801236e:	3714      	adds	r7, #20
 8012370:	46bd      	mov	sp, r7
 8012372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012376:	4770      	bx	lr

08012378 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b084      	sub	sp, #16
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	460b      	mov	r3, r1
 8012382:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012384:	2300      	movs	r3, #0
 8012386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012388:	2300      	movs	r3, #0
 801238a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012392:	78fa      	ldrb	r2, [r7, #3]
 8012394:	4611      	mov	r1, r2
 8012396:	4618      	mov	r0, r3
 8012398:	f7f6 fefe 	bl	8009198 <HAL_PCD_SetAddress>
 801239c:	4603      	mov	r3, r0
 801239e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123a0:	7bfb      	ldrb	r3, [r7, #15]
 80123a2:	4618      	mov	r0, r3
 80123a4:	f000 f874 	bl	8012490 <USBD_Get_USB_Status>
 80123a8:	4603      	mov	r3, r0
 80123aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3710      	adds	r7, #16
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}

080123b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80123b6:	b580      	push	{r7, lr}
 80123b8:	b086      	sub	sp, #24
 80123ba:	af00      	add	r7, sp, #0
 80123bc:	60f8      	str	r0, [r7, #12]
 80123be:	607a      	str	r2, [r7, #4]
 80123c0:	603b      	str	r3, [r7, #0]
 80123c2:	460b      	mov	r3, r1
 80123c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123c6:	2300      	movs	r3, #0
 80123c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123ca:	2300      	movs	r3, #0
 80123cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80123d4:	7af9      	ldrb	r1, [r7, #11]
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	687a      	ldr	r2, [r7, #4]
 80123da:	f7f7 f817 	bl	800940c <HAL_PCD_EP_Transmit>
 80123de:	4603      	mov	r3, r0
 80123e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123e2:	7dfb      	ldrb	r3, [r7, #23]
 80123e4:	4618      	mov	r0, r3
 80123e6:	f000 f853 	bl	8012490 <USBD_Get_USB_Status>
 80123ea:	4603      	mov	r3, r0
 80123ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80123ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80123f0:	4618      	mov	r0, r3
 80123f2:	3718      	adds	r7, #24
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}

080123f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b086      	sub	sp, #24
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	60f8      	str	r0, [r7, #12]
 8012400:	607a      	str	r2, [r7, #4]
 8012402:	603b      	str	r3, [r7, #0]
 8012404:	460b      	mov	r3, r1
 8012406:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012408:	2300      	movs	r3, #0
 801240a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801240c:	2300      	movs	r3, #0
 801240e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012416:	7af9      	ldrb	r1, [r7, #11]
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	687a      	ldr	r2, [r7, #4]
 801241c:	f7f6 ff93 	bl	8009346 <HAL_PCD_EP_Receive>
 8012420:	4603      	mov	r3, r0
 8012422:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012424:	7dfb      	ldrb	r3, [r7, #23]
 8012426:	4618      	mov	r0, r3
 8012428:	f000 f832 	bl	8012490 <USBD_Get_USB_Status>
 801242c:	4603      	mov	r3, r0
 801242e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012430:	7dbb      	ldrb	r3, [r7, #22]
}
 8012432:	4618      	mov	r0, r3
 8012434:	3718      	adds	r7, #24
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}

0801243a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801243a:	b580      	push	{r7, lr}
 801243c:	b082      	sub	sp, #8
 801243e:	af00      	add	r7, sp, #0
 8012440:	6078      	str	r0, [r7, #4]
 8012442:	460b      	mov	r3, r1
 8012444:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801244c:	78fa      	ldrb	r2, [r7, #3]
 801244e:	4611      	mov	r1, r2
 8012450:	4618      	mov	r0, r3
 8012452:	f7f6 ffc3 	bl	80093dc <HAL_PCD_EP_GetRxCount>
 8012456:	4603      	mov	r3, r0
}
 8012458:	4618      	mov	r0, r3
 801245a:	3708      	adds	r7, #8
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}

08012460 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012460:	b480      	push	{r7}
 8012462:	b083      	sub	sp, #12
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012468:	4b03      	ldr	r3, [pc, #12]	; (8012478 <USBD_static_malloc+0x18>)
}
 801246a:	4618      	mov	r0, r3
 801246c:	370c      	adds	r7, #12
 801246e:	46bd      	mov	sp, r7
 8012470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012474:	4770      	bx	lr
 8012476:	bf00      	nop
 8012478:	20004b50 	.word	0x20004b50

0801247c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801247c:	b480      	push	{r7}
 801247e:	b083      	sub	sp, #12
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]

}
 8012484:	bf00      	nop
 8012486:	370c      	adds	r7, #12
 8012488:	46bd      	mov	sp, r7
 801248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248e:	4770      	bx	lr

08012490 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012490:	b480      	push	{r7}
 8012492:	b085      	sub	sp, #20
 8012494:	af00      	add	r7, sp, #0
 8012496:	4603      	mov	r3, r0
 8012498:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801249a:	2300      	movs	r3, #0
 801249c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801249e:	79fb      	ldrb	r3, [r7, #7]
 80124a0:	2b03      	cmp	r3, #3
 80124a2:	d817      	bhi.n	80124d4 <USBD_Get_USB_Status+0x44>
 80124a4:	a201      	add	r2, pc, #4	; (adr r2, 80124ac <USBD_Get_USB_Status+0x1c>)
 80124a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124aa:	bf00      	nop
 80124ac:	080124bd 	.word	0x080124bd
 80124b0:	080124c3 	.word	0x080124c3
 80124b4:	080124c9 	.word	0x080124c9
 80124b8:	080124cf 	.word	0x080124cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80124bc:	2300      	movs	r3, #0
 80124be:	73fb      	strb	r3, [r7, #15]
    break;
 80124c0:	e00b      	b.n	80124da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80124c2:	2303      	movs	r3, #3
 80124c4:	73fb      	strb	r3, [r7, #15]
    break;
 80124c6:	e008      	b.n	80124da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80124c8:	2301      	movs	r3, #1
 80124ca:	73fb      	strb	r3, [r7, #15]
    break;
 80124cc:	e005      	b.n	80124da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80124ce:	2303      	movs	r3, #3
 80124d0:	73fb      	strb	r3, [r7, #15]
    break;
 80124d2:	e002      	b.n	80124da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80124d4:	2303      	movs	r3, #3
 80124d6:	73fb      	strb	r3, [r7, #15]
    break;
 80124d8:	bf00      	nop
  }
  return usb_status;
 80124da:	7bfb      	ldrb	r3, [r7, #15]
}
 80124dc:	4618      	mov	r0, r3
 80124de:	3714      	adds	r7, #20
 80124e0:	46bd      	mov	sp, r7
 80124e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e6:	4770      	bx	lr

080124e8 <__errno>:
 80124e8:	4b01      	ldr	r3, [pc, #4]	; (80124f0 <__errno+0x8>)
 80124ea:	6818      	ldr	r0, [r3, #0]
 80124ec:	4770      	bx	lr
 80124ee:	bf00      	nop
 80124f0:	20000190 	.word	0x20000190

080124f4 <__libc_init_array>:
 80124f4:	b570      	push	{r4, r5, r6, lr}
 80124f6:	4d0d      	ldr	r5, [pc, #52]	; (801252c <__libc_init_array+0x38>)
 80124f8:	4c0d      	ldr	r4, [pc, #52]	; (8012530 <__libc_init_array+0x3c>)
 80124fa:	1b64      	subs	r4, r4, r5
 80124fc:	10a4      	asrs	r4, r4, #2
 80124fe:	2600      	movs	r6, #0
 8012500:	42a6      	cmp	r6, r4
 8012502:	d109      	bne.n	8012518 <__libc_init_array+0x24>
 8012504:	4d0b      	ldr	r5, [pc, #44]	; (8012534 <__libc_init_array+0x40>)
 8012506:	4c0c      	ldr	r4, [pc, #48]	; (8012538 <__libc_init_array+0x44>)
 8012508:	f001 fe64 	bl	80141d4 <_init>
 801250c:	1b64      	subs	r4, r4, r5
 801250e:	10a4      	asrs	r4, r4, #2
 8012510:	2600      	movs	r6, #0
 8012512:	42a6      	cmp	r6, r4
 8012514:	d105      	bne.n	8012522 <__libc_init_array+0x2e>
 8012516:	bd70      	pop	{r4, r5, r6, pc}
 8012518:	f855 3b04 	ldr.w	r3, [r5], #4
 801251c:	4798      	blx	r3
 801251e:	3601      	adds	r6, #1
 8012520:	e7ee      	b.n	8012500 <__libc_init_array+0xc>
 8012522:	f855 3b04 	ldr.w	r3, [r5], #4
 8012526:	4798      	blx	r3
 8012528:	3601      	adds	r6, #1
 801252a:	e7f2      	b.n	8012512 <__libc_init_array+0x1e>
 801252c:	080145a0 	.word	0x080145a0
 8012530:	080145a0 	.word	0x080145a0
 8012534:	080145a0 	.word	0x080145a0
 8012538:	080145a4 	.word	0x080145a4

0801253c <memcpy>:
 801253c:	440a      	add	r2, r1
 801253e:	4291      	cmp	r1, r2
 8012540:	f100 33ff 	add.w	r3, r0, #4294967295
 8012544:	d100      	bne.n	8012548 <memcpy+0xc>
 8012546:	4770      	bx	lr
 8012548:	b510      	push	{r4, lr}
 801254a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801254e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012552:	4291      	cmp	r1, r2
 8012554:	d1f9      	bne.n	801254a <memcpy+0xe>
 8012556:	bd10      	pop	{r4, pc}

08012558 <memset>:
 8012558:	4402      	add	r2, r0
 801255a:	4603      	mov	r3, r0
 801255c:	4293      	cmp	r3, r2
 801255e:	d100      	bne.n	8012562 <memset+0xa>
 8012560:	4770      	bx	lr
 8012562:	f803 1b01 	strb.w	r1, [r3], #1
 8012566:	e7f9      	b.n	801255c <memset+0x4>

08012568 <cos>:
 8012568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801256a:	ec53 2b10 	vmov	r2, r3, d0
 801256e:	4824      	ldr	r0, [pc, #144]	; (8012600 <cos+0x98>)
 8012570:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012574:	4281      	cmp	r1, r0
 8012576:	dc06      	bgt.n	8012586 <cos+0x1e>
 8012578:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80125f8 <cos+0x90>
 801257c:	f000 fea8 	bl	80132d0 <__kernel_cos>
 8012580:	ec51 0b10 	vmov	r0, r1, d0
 8012584:	e007      	b.n	8012596 <cos+0x2e>
 8012586:	481f      	ldr	r0, [pc, #124]	; (8012604 <cos+0x9c>)
 8012588:	4281      	cmp	r1, r0
 801258a:	dd09      	ble.n	80125a0 <cos+0x38>
 801258c:	ee10 0a10 	vmov	r0, s0
 8012590:	4619      	mov	r1, r3
 8012592:	f7ed fe29 	bl	80001e8 <__aeabi_dsub>
 8012596:	ec41 0b10 	vmov	d0, r0, r1
 801259a:	b005      	add	sp, #20
 801259c:	f85d fb04 	ldr.w	pc, [sp], #4
 80125a0:	4668      	mov	r0, sp
 80125a2:	f000 fbd5 	bl	8012d50 <__ieee754_rem_pio2>
 80125a6:	f000 0003 	and.w	r0, r0, #3
 80125aa:	2801      	cmp	r0, #1
 80125ac:	d007      	beq.n	80125be <cos+0x56>
 80125ae:	2802      	cmp	r0, #2
 80125b0:	d012      	beq.n	80125d8 <cos+0x70>
 80125b2:	b9c0      	cbnz	r0, 80125e6 <cos+0x7e>
 80125b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80125b8:	ed9d 0b00 	vldr	d0, [sp]
 80125bc:	e7de      	b.n	801257c <cos+0x14>
 80125be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80125c2:	ed9d 0b00 	vldr	d0, [sp]
 80125c6:	f001 fa8b 	bl	8013ae0 <__kernel_sin>
 80125ca:	ec53 2b10 	vmov	r2, r3, d0
 80125ce:	ee10 0a10 	vmov	r0, s0
 80125d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80125d6:	e7de      	b.n	8012596 <cos+0x2e>
 80125d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80125dc:	ed9d 0b00 	vldr	d0, [sp]
 80125e0:	f000 fe76 	bl	80132d0 <__kernel_cos>
 80125e4:	e7f1      	b.n	80125ca <cos+0x62>
 80125e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80125ea:	ed9d 0b00 	vldr	d0, [sp]
 80125ee:	2001      	movs	r0, #1
 80125f0:	f001 fa76 	bl	8013ae0 <__kernel_sin>
 80125f4:	e7c4      	b.n	8012580 <cos+0x18>
 80125f6:	bf00      	nop
	...
 8012600:	3fe921fb 	.word	0x3fe921fb
 8012604:	7fefffff 	.word	0x7fefffff

08012608 <sin>:
 8012608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801260a:	ec53 2b10 	vmov	r2, r3, d0
 801260e:	4826      	ldr	r0, [pc, #152]	; (80126a8 <sin+0xa0>)
 8012610:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012614:	4281      	cmp	r1, r0
 8012616:	dc07      	bgt.n	8012628 <sin+0x20>
 8012618:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80126a0 <sin+0x98>
 801261c:	2000      	movs	r0, #0
 801261e:	f001 fa5f 	bl	8013ae0 <__kernel_sin>
 8012622:	ec51 0b10 	vmov	r0, r1, d0
 8012626:	e007      	b.n	8012638 <sin+0x30>
 8012628:	4820      	ldr	r0, [pc, #128]	; (80126ac <sin+0xa4>)
 801262a:	4281      	cmp	r1, r0
 801262c:	dd09      	ble.n	8012642 <sin+0x3a>
 801262e:	ee10 0a10 	vmov	r0, s0
 8012632:	4619      	mov	r1, r3
 8012634:	f7ed fdd8 	bl	80001e8 <__aeabi_dsub>
 8012638:	ec41 0b10 	vmov	d0, r0, r1
 801263c:	b005      	add	sp, #20
 801263e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012642:	4668      	mov	r0, sp
 8012644:	f000 fb84 	bl	8012d50 <__ieee754_rem_pio2>
 8012648:	f000 0003 	and.w	r0, r0, #3
 801264c:	2801      	cmp	r0, #1
 801264e:	d008      	beq.n	8012662 <sin+0x5a>
 8012650:	2802      	cmp	r0, #2
 8012652:	d00d      	beq.n	8012670 <sin+0x68>
 8012654:	b9d0      	cbnz	r0, 801268c <sin+0x84>
 8012656:	ed9d 1b02 	vldr	d1, [sp, #8]
 801265a:	ed9d 0b00 	vldr	d0, [sp]
 801265e:	2001      	movs	r0, #1
 8012660:	e7dd      	b.n	801261e <sin+0x16>
 8012662:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012666:	ed9d 0b00 	vldr	d0, [sp]
 801266a:	f000 fe31 	bl	80132d0 <__kernel_cos>
 801266e:	e7d8      	b.n	8012622 <sin+0x1a>
 8012670:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012674:	ed9d 0b00 	vldr	d0, [sp]
 8012678:	2001      	movs	r0, #1
 801267a:	f001 fa31 	bl	8013ae0 <__kernel_sin>
 801267e:	ec53 2b10 	vmov	r2, r3, d0
 8012682:	ee10 0a10 	vmov	r0, s0
 8012686:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801268a:	e7d5      	b.n	8012638 <sin+0x30>
 801268c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012690:	ed9d 0b00 	vldr	d0, [sp]
 8012694:	f000 fe1c 	bl	80132d0 <__kernel_cos>
 8012698:	e7f1      	b.n	801267e <sin+0x76>
 801269a:	bf00      	nop
 801269c:	f3af 8000 	nop.w
	...
 80126a8:	3fe921fb 	.word	0x3fe921fb
 80126ac:	7fefffff 	.word	0x7fefffff

080126b0 <asin>:
 80126b0:	b538      	push	{r3, r4, r5, lr}
 80126b2:	ed2d 8b02 	vpush	{d8}
 80126b6:	ec55 4b10 	vmov	r4, r5, d0
 80126ba:	f000 f869 	bl	8012790 <__ieee754_asin>
 80126be:	4b16      	ldr	r3, [pc, #88]	; (8012718 <asin+0x68>)
 80126c0:	eeb0 8a40 	vmov.f32	s16, s0
 80126c4:	eef0 8a60 	vmov.f32	s17, s1
 80126c8:	f993 3000 	ldrsb.w	r3, [r3]
 80126cc:	3301      	adds	r3, #1
 80126ce:	d01c      	beq.n	801270a <asin+0x5a>
 80126d0:	4622      	mov	r2, r4
 80126d2:	462b      	mov	r3, r5
 80126d4:	4620      	mov	r0, r4
 80126d6:	4629      	mov	r1, r5
 80126d8:	f7ee f9d8 	bl	8000a8c <__aeabi_dcmpun>
 80126dc:	b9a8      	cbnz	r0, 801270a <asin+0x5a>
 80126de:	ec45 4b10 	vmov	d0, r4, r5
 80126e2:	f001 fc5d 	bl	8013fa0 <fabs>
 80126e6:	4b0d      	ldr	r3, [pc, #52]	; (801271c <asin+0x6c>)
 80126e8:	ec51 0b10 	vmov	r0, r1, d0
 80126ec:	2200      	movs	r2, #0
 80126ee:	f7ee f9c3 	bl	8000a78 <__aeabi_dcmpgt>
 80126f2:	b150      	cbz	r0, 801270a <asin+0x5a>
 80126f4:	f7ff fef8 	bl	80124e8 <__errno>
 80126f8:	ecbd 8b02 	vpop	{d8}
 80126fc:	2321      	movs	r3, #33	; 0x21
 80126fe:	6003      	str	r3, [r0, #0]
 8012700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012704:	4806      	ldr	r0, [pc, #24]	; (8012720 <asin+0x70>)
 8012706:	f001 bcd7 	b.w	80140b8 <nan>
 801270a:	eeb0 0a48 	vmov.f32	s0, s16
 801270e:	eef0 0a68 	vmov.f32	s1, s17
 8012712:	ecbd 8b02 	vpop	{d8}
 8012716:	bd38      	pop	{r3, r4, r5, pc}
 8012718:	200001f4 	.word	0x200001f4
 801271c:	3ff00000 	.word	0x3ff00000
 8012720:	0801434c 	.word	0x0801434c

08012724 <atan2>:
 8012724:	f000 ba48 	b.w	8012bb8 <__ieee754_atan2>

08012728 <sqrt>:
 8012728:	b538      	push	{r3, r4, r5, lr}
 801272a:	ed2d 8b02 	vpush	{d8}
 801272e:	ec55 4b10 	vmov	r4, r5, d0
 8012732:	f000 fd17 	bl	8013164 <__ieee754_sqrt>
 8012736:	4b15      	ldr	r3, [pc, #84]	; (801278c <sqrt+0x64>)
 8012738:	eeb0 8a40 	vmov.f32	s16, s0
 801273c:	eef0 8a60 	vmov.f32	s17, s1
 8012740:	f993 3000 	ldrsb.w	r3, [r3]
 8012744:	3301      	adds	r3, #1
 8012746:	d019      	beq.n	801277c <sqrt+0x54>
 8012748:	4622      	mov	r2, r4
 801274a:	462b      	mov	r3, r5
 801274c:	4620      	mov	r0, r4
 801274e:	4629      	mov	r1, r5
 8012750:	f7ee f99c 	bl	8000a8c <__aeabi_dcmpun>
 8012754:	b990      	cbnz	r0, 801277c <sqrt+0x54>
 8012756:	2200      	movs	r2, #0
 8012758:	2300      	movs	r3, #0
 801275a:	4620      	mov	r0, r4
 801275c:	4629      	mov	r1, r5
 801275e:	f7ee f96d 	bl	8000a3c <__aeabi_dcmplt>
 8012762:	b158      	cbz	r0, 801277c <sqrt+0x54>
 8012764:	f7ff fec0 	bl	80124e8 <__errno>
 8012768:	2321      	movs	r3, #33	; 0x21
 801276a:	6003      	str	r3, [r0, #0]
 801276c:	2200      	movs	r2, #0
 801276e:	2300      	movs	r3, #0
 8012770:	4610      	mov	r0, r2
 8012772:	4619      	mov	r1, r3
 8012774:	f7ee f81a 	bl	80007ac <__aeabi_ddiv>
 8012778:	ec41 0b18 	vmov	d8, r0, r1
 801277c:	eeb0 0a48 	vmov.f32	s0, s16
 8012780:	eef0 0a68 	vmov.f32	s1, s17
 8012784:	ecbd 8b02 	vpop	{d8}
 8012788:	bd38      	pop	{r3, r4, r5, pc}
 801278a:	bf00      	nop
 801278c:	200001f4 	.word	0x200001f4

08012790 <__ieee754_asin>:
 8012790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012794:	ed2d 8b04 	vpush	{d8-d9}
 8012798:	ec55 4b10 	vmov	r4, r5, d0
 801279c:	4bcc      	ldr	r3, [pc, #816]	; (8012ad0 <__ieee754_asin+0x340>)
 801279e:	b083      	sub	sp, #12
 80127a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80127a4:	4598      	cmp	r8, r3
 80127a6:	9501      	str	r5, [sp, #4]
 80127a8:	dd35      	ble.n	8012816 <__ieee754_asin+0x86>
 80127aa:	ee10 3a10 	vmov	r3, s0
 80127ae:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80127b2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80127b6:	ea58 0303 	orrs.w	r3, r8, r3
 80127ba:	d117      	bne.n	80127ec <__ieee754_asin+0x5c>
 80127bc:	a3aa      	add	r3, pc, #680	; (adr r3, 8012a68 <__ieee754_asin+0x2d8>)
 80127be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c2:	ee10 0a10 	vmov	r0, s0
 80127c6:	4629      	mov	r1, r5
 80127c8:	f7ed fec6 	bl	8000558 <__aeabi_dmul>
 80127cc:	a3a8      	add	r3, pc, #672	; (adr r3, 8012a70 <__ieee754_asin+0x2e0>)
 80127ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d2:	4606      	mov	r6, r0
 80127d4:	460f      	mov	r7, r1
 80127d6:	4620      	mov	r0, r4
 80127d8:	4629      	mov	r1, r5
 80127da:	f7ed febd 	bl	8000558 <__aeabi_dmul>
 80127de:	4602      	mov	r2, r0
 80127e0:	460b      	mov	r3, r1
 80127e2:	4630      	mov	r0, r6
 80127e4:	4639      	mov	r1, r7
 80127e6:	f7ed fd01 	bl	80001ec <__adddf3>
 80127ea:	e00b      	b.n	8012804 <__ieee754_asin+0x74>
 80127ec:	ee10 2a10 	vmov	r2, s0
 80127f0:	462b      	mov	r3, r5
 80127f2:	ee10 0a10 	vmov	r0, s0
 80127f6:	4629      	mov	r1, r5
 80127f8:	f7ed fcf6 	bl	80001e8 <__aeabi_dsub>
 80127fc:	4602      	mov	r2, r0
 80127fe:	460b      	mov	r3, r1
 8012800:	f7ed ffd4 	bl	80007ac <__aeabi_ddiv>
 8012804:	4604      	mov	r4, r0
 8012806:	460d      	mov	r5, r1
 8012808:	ec45 4b10 	vmov	d0, r4, r5
 801280c:	b003      	add	sp, #12
 801280e:	ecbd 8b04 	vpop	{d8-d9}
 8012812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012816:	4baf      	ldr	r3, [pc, #700]	; (8012ad4 <__ieee754_asin+0x344>)
 8012818:	4598      	cmp	r8, r3
 801281a:	dc11      	bgt.n	8012840 <__ieee754_asin+0xb0>
 801281c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012820:	f280 80ae 	bge.w	8012980 <__ieee754_asin+0x1f0>
 8012824:	a394      	add	r3, pc, #592	; (adr r3, 8012a78 <__ieee754_asin+0x2e8>)
 8012826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801282a:	ee10 0a10 	vmov	r0, s0
 801282e:	4629      	mov	r1, r5
 8012830:	f7ed fcdc 	bl	80001ec <__adddf3>
 8012834:	4ba8      	ldr	r3, [pc, #672]	; (8012ad8 <__ieee754_asin+0x348>)
 8012836:	2200      	movs	r2, #0
 8012838:	f7ee f91e 	bl	8000a78 <__aeabi_dcmpgt>
 801283c:	2800      	cmp	r0, #0
 801283e:	d1e3      	bne.n	8012808 <__ieee754_asin+0x78>
 8012840:	ec45 4b10 	vmov	d0, r4, r5
 8012844:	f001 fbac 	bl	8013fa0 <fabs>
 8012848:	49a3      	ldr	r1, [pc, #652]	; (8012ad8 <__ieee754_asin+0x348>)
 801284a:	ec53 2b10 	vmov	r2, r3, d0
 801284e:	2000      	movs	r0, #0
 8012850:	f7ed fcca 	bl	80001e8 <__aeabi_dsub>
 8012854:	4ba1      	ldr	r3, [pc, #644]	; (8012adc <__ieee754_asin+0x34c>)
 8012856:	2200      	movs	r2, #0
 8012858:	f7ed fe7e 	bl	8000558 <__aeabi_dmul>
 801285c:	a388      	add	r3, pc, #544	; (adr r3, 8012a80 <__ieee754_asin+0x2f0>)
 801285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012862:	4604      	mov	r4, r0
 8012864:	460d      	mov	r5, r1
 8012866:	f7ed fe77 	bl	8000558 <__aeabi_dmul>
 801286a:	a387      	add	r3, pc, #540	; (adr r3, 8012a88 <__ieee754_asin+0x2f8>)
 801286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012870:	f7ed fcbc 	bl	80001ec <__adddf3>
 8012874:	4622      	mov	r2, r4
 8012876:	462b      	mov	r3, r5
 8012878:	f7ed fe6e 	bl	8000558 <__aeabi_dmul>
 801287c:	a384      	add	r3, pc, #528	; (adr r3, 8012a90 <__ieee754_asin+0x300>)
 801287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012882:	f7ed fcb1 	bl	80001e8 <__aeabi_dsub>
 8012886:	4622      	mov	r2, r4
 8012888:	462b      	mov	r3, r5
 801288a:	f7ed fe65 	bl	8000558 <__aeabi_dmul>
 801288e:	a382      	add	r3, pc, #520	; (adr r3, 8012a98 <__ieee754_asin+0x308>)
 8012890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012894:	f7ed fcaa 	bl	80001ec <__adddf3>
 8012898:	4622      	mov	r2, r4
 801289a:	462b      	mov	r3, r5
 801289c:	f7ed fe5c 	bl	8000558 <__aeabi_dmul>
 80128a0:	a37f      	add	r3, pc, #508	; (adr r3, 8012aa0 <__ieee754_asin+0x310>)
 80128a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a6:	f7ed fc9f 	bl	80001e8 <__aeabi_dsub>
 80128aa:	4622      	mov	r2, r4
 80128ac:	462b      	mov	r3, r5
 80128ae:	f7ed fe53 	bl	8000558 <__aeabi_dmul>
 80128b2:	a37d      	add	r3, pc, #500	; (adr r3, 8012aa8 <__ieee754_asin+0x318>)
 80128b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b8:	f7ed fc98 	bl	80001ec <__adddf3>
 80128bc:	4622      	mov	r2, r4
 80128be:	462b      	mov	r3, r5
 80128c0:	f7ed fe4a 	bl	8000558 <__aeabi_dmul>
 80128c4:	a37a      	add	r3, pc, #488	; (adr r3, 8012ab0 <__ieee754_asin+0x320>)
 80128c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ca:	ec41 0b18 	vmov	d8, r0, r1
 80128ce:	4620      	mov	r0, r4
 80128d0:	4629      	mov	r1, r5
 80128d2:	f7ed fe41 	bl	8000558 <__aeabi_dmul>
 80128d6:	a378      	add	r3, pc, #480	; (adr r3, 8012ab8 <__ieee754_asin+0x328>)
 80128d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128dc:	f7ed fc84 	bl	80001e8 <__aeabi_dsub>
 80128e0:	4622      	mov	r2, r4
 80128e2:	462b      	mov	r3, r5
 80128e4:	f7ed fe38 	bl	8000558 <__aeabi_dmul>
 80128e8:	a375      	add	r3, pc, #468	; (adr r3, 8012ac0 <__ieee754_asin+0x330>)
 80128ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ee:	f7ed fc7d 	bl	80001ec <__adddf3>
 80128f2:	4622      	mov	r2, r4
 80128f4:	462b      	mov	r3, r5
 80128f6:	f7ed fe2f 	bl	8000558 <__aeabi_dmul>
 80128fa:	a373      	add	r3, pc, #460	; (adr r3, 8012ac8 <__ieee754_asin+0x338>)
 80128fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012900:	f7ed fc72 	bl	80001e8 <__aeabi_dsub>
 8012904:	4622      	mov	r2, r4
 8012906:	462b      	mov	r3, r5
 8012908:	f7ed fe26 	bl	8000558 <__aeabi_dmul>
 801290c:	4b72      	ldr	r3, [pc, #456]	; (8012ad8 <__ieee754_asin+0x348>)
 801290e:	2200      	movs	r2, #0
 8012910:	f7ed fc6c 	bl	80001ec <__adddf3>
 8012914:	ec45 4b10 	vmov	d0, r4, r5
 8012918:	4606      	mov	r6, r0
 801291a:	460f      	mov	r7, r1
 801291c:	f000 fc22 	bl	8013164 <__ieee754_sqrt>
 8012920:	4b6f      	ldr	r3, [pc, #444]	; (8012ae0 <__ieee754_asin+0x350>)
 8012922:	4598      	cmp	r8, r3
 8012924:	ec5b ab10 	vmov	sl, fp, d0
 8012928:	f340 80dc 	ble.w	8012ae4 <__ieee754_asin+0x354>
 801292c:	4632      	mov	r2, r6
 801292e:	463b      	mov	r3, r7
 8012930:	ec51 0b18 	vmov	r0, r1, d8
 8012934:	f7ed ff3a 	bl	80007ac <__aeabi_ddiv>
 8012938:	4652      	mov	r2, sl
 801293a:	465b      	mov	r3, fp
 801293c:	f7ed fe0c 	bl	8000558 <__aeabi_dmul>
 8012940:	4652      	mov	r2, sl
 8012942:	465b      	mov	r3, fp
 8012944:	f7ed fc52 	bl	80001ec <__adddf3>
 8012948:	4602      	mov	r2, r0
 801294a:	460b      	mov	r3, r1
 801294c:	f7ed fc4e 	bl	80001ec <__adddf3>
 8012950:	a347      	add	r3, pc, #284	; (adr r3, 8012a70 <__ieee754_asin+0x2e0>)
 8012952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012956:	f7ed fc47 	bl	80001e8 <__aeabi_dsub>
 801295a:	4602      	mov	r2, r0
 801295c:	460b      	mov	r3, r1
 801295e:	a142      	add	r1, pc, #264	; (adr r1, 8012a68 <__ieee754_asin+0x2d8>)
 8012960:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012964:	f7ed fc40 	bl	80001e8 <__aeabi_dsub>
 8012968:	9b01      	ldr	r3, [sp, #4]
 801296a:	2b00      	cmp	r3, #0
 801296c:	bfdc      	itt	le
 801296e:	4602      	movle	r2, r0
 8012970:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8012974:	4604      	mov	r4, r0
 8012976:	460d      	mov	r5, r1
 8012978:	bfdc      	itt	le
 801297a:	4614      	movle	r4, r2
 801297c:	461d      	movle	r5, r3
 801297e:	e743      	b.n	8012808 <__ieee754_asin+0x78>
 8012980:	ee10 2a10 	vmov	r2, s0
 8012984:	ee10 0a10 	vmov	r0, s0
 8012988:	462b      	mov	r3, r5
 801298a:	4629      	mov	r1, r5
 801298c:	f7ed fde4 	bl	8000558 <__aeabi_dmul>
 8012990:	a33b      	add	r3, pc, #236	; (adr r3, 8012a80 <__ieee754_asin+0x2f0>)
 8012992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012996:	4606      	mov	r6, r0
 8012998:	460f      	mov	r7, r1
 801299a:	f7ed fddd 	bl	8000558 <__aeabi_dmul>
 801299e:	a33a      	add	r3, pc, #232	; (adr r3, 8012a88 <__ieee754_asin+0x2f8>)
 80129a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a4:	f7ed fc22 	bl	80001ec <__adddf3>
 80129a8:	4632      	mov	r2, r6
 80129aa:	463b      	mov	r3, r7
 80129ac:	f7ed fdd4 	bl	8000558 <__aeabi_dmul>
 80129b0:	a337      	add	r3, pc, #220	; (adr r3, 8012a90 <__ieee754_asin+0x300>)
 80129b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129b6:	f7ed fc17 	bl	80001e8 <__aeabi_dsub>
 80129ba:	4632      	mov	r2, r6
 80129bc:	463b      	mov	r3, r7
 80129be:	f7ed fdcb 	bl	8000558 <__aeabi_dmul>
 80129c2:	a335      	add	r3, pc, #212	; (adr r3, 8012a98 <__ieee754_asin+0x308>)
 80129c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c8:	f7ed fc10 	bl	80001ec <__adddf3>
 80129cc:	4632      	mov	r2, r6
 80129ce:	463b      	mov	r3, r7
 80129d0:	f7ed fdc2 	bl	8000558 <__aeabi_dmul>
 80129d4:	a332      	add	r3, pc, #200	; (adr r3, 8012aa0 <__ieee754_asin+0x310>)
 80129d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129da:	f7ed fc05 	bl	80001e8 <__aeabi_dsub>
 80129de:	4632      	mov	r2, r6
 80129e0:	463b      	mov	r3, r7
 80129e2:	f7ed fdb9 	bl	8000558 <__aeabi_dmul>
 80129e6:	a330      	add	r3, pc, #192	; (adr r3, 8012aa8 <__ieee754_asin+0x318>)
 80129e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ec:	f7ed fbfe 	bl	80001ec <__adddf3>
 80129f0:	4632      	mov	r2, r6
 80129f2:	463b      	mov	r3, r7
 80129f4:	f7ed fdb0 	bl	8000558 <__aeabi_dmul>
 80129f8:	a32d      	add	r3, pc, #180	; (adr r3, 8012ab0 <__ieee754_asin+0x320>)
 80129fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129fe:	4680      	mov	r8, r0
 8012a00:	4689      	mov	r9, r1
 8012a02:	4630      	mov	r0, r6
 8012a04:	4639      	mov	r1, r7
 8012a06:	f7ed fda7 	bl	8000558 <__aeabi_dmul>
 8012a0a:	a32b      	add	r3, pc, #172	; (adr r3, 8012ab8 <__ieee754_asin+0x328>)
 8012a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a10:	f7ed fbea 	bl	80001e8 <__aeabi_dsub>
 8012a14:	4632      	mov	r2, r6
 8012a16:	463b      	mov	r3, r7
 8012a18:	f7ed fd9e 	bl	8000558 <__aeabi_dmul>
 8012a1c:	a328      	add	r3, pc, #160	; (adr r3, 8012ac0 <__ieee754_asin+0x330>)
 8012a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a22:	f7ed fbe3 	bl	80001ec <__adddf3>
 8012a26:	4632      	mov	r2, r6
 8012a28:	463b      	mov	r3, r7
 8012a2a:	f7ed fd95 	bl	8000558 <__aeabi_dmul>
 8012a2e:	a326      	add	r3, pc, #152	; (adr r3, 8012ac8 <__ieee754_asin+0x338>)
 8012a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a34:	f7ed fbd8 	bl	80001e8 <__aeabi_dsub>
 8012a38:	4632      	mov	r2, r6
 8012a3a:	463b      	mov	r3, r7
 8012a3c:	f7ed fd8c 	bl	8000558 <__aeabi_dmul>
 8012a40:	4b25      	ldr	r3, [pc, #148]	; (8012ad8 <__ieee754_asin+0x348>)
 8012a42:	2200      	movs	r2, #0
 8012a44:	f7ed fbd2 	bl	80001ec <__adddf3>
 8012a48:	4602      	mov	r2, r0
 8012a4a:	460b      	mov	r3, r1
 8012a4c:	4640      	mov	r0, r8
 8012a4e:	4649      	mov	r1, r9
 8012a50:	f7ed feac 	bl	80007ac <__aeabi_ddiv>
 8012a54:	4622      	mov	r2, r4
 8012a56:	462b      	mov	r3, r5
 8012a58:	f7ed fd7e 	bl	8000558 <__aeabi_dmul>
 8012a5c:	4602      	mov	r2, r0
 8012a5e:	460b      	mov	r3, r1
 8012a60:	4620      	mov	r0, r4
 8012a62:	4629      	mov	r1, r5
 8012a64:	e6bf      	b.n	80127e6 <__ieee754_asin+0x56>
 8012a66:	bf00      	nop
 8012a68:	54442d18 	.word	0x54442d18
 8012a6c:	3ff921fb 	.word	0x3ff921fb
 8012a70:	33145c07 	.word	0x33145c07
 8012a74:	3c91a626 	.word	0x3c91a626
 8012a78:	8800759c 	.word	0x8800759c
 8012a7c:	7e37e43c 	.word	0x7e37e43c
 8012a80:	0dfdf709 	.word	0x0dfdf709
 8012a84:	3f023de1 	.word	0x3f023de1
 8012a88:	7501b288 	.word	0x7501b288
 8012a8c:	3f49efe0 	.word	0x3f49efe0
 8012a90:	b5688f3b 	.word	0xb5688f3b
 8012a94:	3fa48228 	.word	0x3fa48228
 8012a98:	0e884455 	.word	0x0e884455
 8012a9c:	3fc9c155 	.word	0x3fc9c155
 8012aa0:	03eb6f7d 	.word	0x03eb6f7d
 8012aa4:	3fd4d612 	.word	0x3fd4d612
 8012aa8:	55555555 	.word	0x55555555
 8012aac:	3fc55555 	.word	0x3fc55555
 8012ab0:	b12e9282 	.word	0xb12e9282
 8012ab4:	3fb3b8c5 	.word	0x3fb3b8c5
 8012ab8:	1b8d0159 	.word	0x1b8d0159
 8012abc:	3fe6066c 	.word	0x3fe6066c
 8012ac0:	9c598ac8 	.word	0x9c598ac8
 8012ac4:	40002ae5 	.word	0x40002ae5
 8012ac8:	1c8a2d4b 	.word	0x1c8a2d4b
 8012acc:	40033a27 	.word	0x40033a27
 8012ad0:	3fefffff 	.word	0x3fefffff
 8012ad4:	3fdfffff 	.word	0x3fdfffff
 8012ad8:	3ff00000 	.word	0x3ff00000
 8012adc:	3fe00000 	.word	0x3fe00000
 8012ae0:	3fef3332 	.word	0x3fef3332
 8012ae4:	ee10 2a10 	vmov	r2, s0
 8012ae8:	ee10 0a10 	vmov	r0, s0
 8012aec:	465b      	mov	r3, fp
 8012aee:	4659      	mov	r1, fp
 8012af0:	f7ed fb7c 	bl	80001ec <__adddf3>
 8012af4:	4632      	mov	r2, r6
 8012af6:	463b      	mov	r3, r7
 8012af8:	ec41 0b19 	vmov	d9, r0, r1
 8012afc:	ec51 0b18 	vmov	r0, r1, d8
 8012b00:	f7ed fe54 	bl	80007ac <__aeabi_ddiv>
 8012b04:	4602      	mov	r2, r0
 8012b06:	460b      	mov	r3, r1
 8012b08:	ec51 0b19 	vmov	r0, r1, d9
 8012b0c:	f7ed fd24 	bl	8000558 <__aeabi_dmul>
 8012b10:	f04f 0800 	mov.w	r8, #0
 8012b14:	4606      	mov	r6, r0
 8012b16:	460f      	mov	r7, r1
 8012b18:	4642      	mov	r2, r8
 8012b1a:	465b      	mov	r3, fp
 8012b1c:	4640      	mov	r0, r8
 8012b1e:	4659      	mov	r1, fp
 8012b20:	f7ed fd1a 	bl	8000558 <__aeabi_dmul>
 8012b24:	4602      	mov	r2, r0
 8012b26:	460b      	mov	r3, r1
 8012b28:	4620      	mov	r0, r4
 8012b2a:	4629      	mov	r1, r5
 8012b2c:	f7ed fb5c 	bl	80001e8 <__aeabi_dsub>
 8012b30:	4642      	mov	r2, r8
 8012b32:	4604      	mov	r4, r0
 8012b34:	460d      	mov	r5, r1
 8012b36:	465b      	mov	r3, fp
 8012b38:	4650      	mov	r0, sl
 8012b3a:	4659      	mov	r1, fp
 8012b3c:	f7ed fb56 	bl	80001ec <__adddf3>
 8012b40:	4602      	mov	r2, r0
 8012b42:	460b      	mov	r3, r1
 8012b44:	4620      	mov	r0, r4
 8012b46:	4629      	mov	r1, r5
 8012b48:	f7ed fe30 	bl	80007ac <__aeabi_ddiv>
 8012b4c:	4602      	mov	r2, r0
 8012b4e:	460b      	mov	r3, r1
 8012b50:	f7ed fb4c 	bl	80001ec <__adddf3>
 8012b54:	4602      	mov	r2, r0
 8012b56:	460b      	mov	r3, r1
 8012b58:	a113      	add	r1, pc, #76	; (adr r1, 8012ba8 <__ieee754_asin+0x418>)
 8012b5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b5e:	f7ed fb43 	bl	80001e8 <__aeabi_dsub>
 8012b62:	4602      	mov	r2, r0
 8012b64:	460b      	mov	r3, r1
 8012b66:	4630      	mov	r0, r6
 8012b68:	4639      	mov	r1, r7
 8012b6a:	f7ed fb3d 	bl	80001e8 <__aeabi_dsub>
 8012b6e:	4642      	mov	r2, r8
 8012b70:	4604      	mov	r4, r0
 8012b72:	460d      	mov	r5, r1
 8012b74:	465b      	mov	r3, fp
 8012b76:	4640      	mov	r0, r8
 8012b78:	4659      	mov	r1, fp
 8012b7a:	f7ed fb37 	bl	80001ec <__adddf3>
 8012b7e:	4602      	mov	r2, r0
 8012b80:	460b      	mov	r3, r1
 8012b82:	a10b      	add	r1, pc, #44	; (adr r1, 8012bb0 <__ieee754_asin+0x420>)
 8012b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b88:	f7ed fb2e 	bl	80001e8 <__aeabi_dsub>
 8012b8c:	4602      	mov	r2, r0
 8012b8e:	460b      	mov	r3, r1
 8012b90:	4620      	mov	r0, r4
 8012b92:	4629      	mov	r1, r5
 8012b94:	f7ed fb28 	bl	80001e8 <__aeabi_dsub>
 8012b98:	4602      	mov	r2, r0
 8012b9a:	460b      	mov	r3, r1
 8012b9c:	a104      	add	r1, pc, #16	; (adr r1, 8012bb0 <__ieee754_asin+0x420>)
 8012b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ba2:	e6df      	b.n	8012964 <__ieee754_asin+0x1d4>
 8012ba4:	f3af 8000 	nop.w
 8012ba8:	33145c07 	.word	0x33145c07
 8012bac:	3c91a626 	.word	0x3c91a626
 8012bb0:	54442d18 	.word	0x54442d18
 8012bb4:	3fe921fb 	.word	0x3fe921fb

08012bb8 <__ieee754_atan2>:
 8012bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bbc:	ec57 6b11 	vmov	r6, r7, d1
 8012bc0:	4273      	negs	r3, r6
 8012bc2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8012d48 <__ieee754_atan2+0x190>
 8012bc6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8012bca:	4333      	orrs	r3, r6
 8012bcc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012bd0:	4573      	cmp	r3, lr
 8012bd2:	ec51 0b10 	vmov	r0, r1, d0
 8012bd6:	ee11 8a10 	vmov	r8, s2
 8012bda:	d80a      	bhi.n	8012bf2 <__ieee754_atan2+0x3a>
 8012bdc:	4244      	negs	r4, r0
 8012bde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012be2:	4304      	orrs	r4, r0
 8012be4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012be8:	4574      	cmp	r4, lr
 8012bea:	ee10 9a10 	vmov	r9, s0
 8012bee:	468c      	mov	ip, r1
 8012bf0:	d907      	bls.n	8012c02 <__ieee754_atan2+0x4a>
 8012bf2:	4632      	mov	r2, r6
 8012bf4:	463b      	mov	r3, r7
 8012bf6:	f7ed faf9 	bl	80001ec <__adddf3>
 8012bfa:	ec41 0b10 	vmov	d0, r0, r1
 8012bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8012c06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012c0a:	4334      	orrs	r4, r6
 8012c0c:	d103      	bne.n	8012c16 <__ieee754_atan2+0x5e>
 8012c0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c12:	f001 b825 	b.w	8013c60 <atan>
 8012c16:	17bc      	asrs	r4, r7, #30
 8012c18:	f004 0402 	and.w	r4, r4, #2
 8012c1c:	ea53 0909 	orrs.w	r9, r3, r9
 8012c20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8012c24:	d107      	bne.n	8012c36 <__ieee754_atan2+0x7e>
 8012c26:	2c02      	cmp	r4, #2
 8012c28:	d060      	beq.n	8012cec <__ieee754_atan2+0x134>
 8012c2a:	2c03      	cmp	r4, #3
 8012c2c:	d1e5      	bne.n	8012bfa <__ieee754_atan2+0x42>
 8012c2e:	a142      	add	r1, pc, #264	; (adr r1, 8012d38 <__ieee754_atan2+0x180>)
 8012c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c34:	e7e1      	b.n	8012bfa <__ieee754_atan2+0x42>
 8012c36:	ea52 0808 	orrs.w	r8, r2, r8
 8012c3a:	d106      	bne.n	8012c4a <__ieee754_atan2+0x92>
 8012c3c:	f1bc 0f00 	cmp.w	ip, #0
 8012c40:	da5f      	bge.n	8012d02 <__ieee754_atan2+0x14a>
 8012c42:	a13f      	add	r1, pc, #252	; (adr r1, 8012d40 <__ieee754_atan2+0x188>)
 8012c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c48:	e7d7      	b.n	8012bfa <__ieee754_atan2+0x42>
 8012c4a:	4572      	cmp	r2, lr
 8012c4c:	d10f      	bne.n	8012c6e <__ieee754_atan2+0xb6>
 8012c4e:	4293      	cmp	r3, r2
 8012c50:	f104 34ff 	add.w	r4, r4, #4294967295
 8012c54:	d107      	bne.n	8012c66 <__ieee754_atan2+0xae>
 8012c56:	2c02      	cmp	r4, #2
 8012c58:	d84c      	bhi.n	8012cf4 <__ieee754_atan2+0x13c>
 8012c5a:	4b35      	ldr	r3, [pc, #212]	; (8012d30 <__ieee754_atan2+0x178>)
 8012c5c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012c60:	e9d4 0100 	ldrd	r0, r1, [r4]
 8012c64:	e7c9      	b.n	8012bfa <__ieee754_atan2+0x42>
 8012c66:	2c02      	cmp	r4, #2
 8012c68:	d848      	bhi.n	8012cfc <__ieee754_atan2+0x144>
 8012c6a:	4b32      	ldr	r3, [pc, #200]	; (8012d34 <__ieee754_atan2+0x17c>)
 8012c6c:	e7f6      	b.n	8012c5c <__ieee754_atan2+0xa4>
 8012c6e:	4573      	cmp	r3, lr
 8012c70:	d0e4      	beq.n	8012c3c <__ieee754_atan2+0x84>
 8012c72:	1a9b      	subs	r3, r3, r2
 8012c74:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8012c78:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012c7c:	da1e      	bge.n	8012cbc <__ieee754_atan2+0x104>
 8012c7e:	2f00      	cmp	r7, #0
 8012c80:	da01      	bge.n	8012c86 <__ieee754_atan2+0xce>
 8012c82:	323c      	adds	r2, #60	; 0x3c
 8012c84:	db1e      	blt.n	8012cc4 <__ieee754_atan2+0x10c>
 8012c86:	4632      	mov	r2, r6
 8012c88:	463b      	mov	r3, r7
 8012c8a:	f7ed fd8f 	bl	80007ac <__aeabi_ddiv>
 8012c8e:	ec41 0b10 	vmov	d0, r0, r1
 8012c92:	f001 f985 	bl	8013fa0 <fabs>
 8012c96:	f000 ffe3 	bl	8013c60 <atan>
 8012c9a:	ec51 0b10 	vmov	r0, r1, d0
 8012c9e:	2c01      	cmp	r4, #1
 8012ca0:	d013      	beq.n	8012cca <__ieee754_atan2+0x112>
 8012ca2:	2c02      	cmp	r4, #2
 8012ca4:	d015      	beq.n	8012cd2 <__ieee754_atan2+0x11a>
 8012ca6:	2c00      	cmp	r4, #0
 8012ca8:	d0a7      	beq.n	8012bfa <__ieee754_atan2+0x42>
 8012caa:	a319      	add	r3, pc, #100	; (adr r3, 8012d10 <__ieee754_atan2+0x158>)
 8012cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb0:	f7ed fa9a 	bl	80001e8 <__aeabi_dsub>
 8012cb4:	a318      	add	r3, pc, #96	; (adr r3, 8012d18 <__ieee754_atan2+0x160>)
 8012cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cba:	e014      	b.n	8012ce6 <__ieee754_atan2+0x12e>
 8012cbc:	a118      	add	r1, pc, #96	; (adr r1, 8012d20 <__ieee754_atan2+0x168>)
 8012cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cc2:	e7ec      	b.n	8012c9e <__ieee754_atan2+0xe6>
 8012cc4:	2000      	movs	r0, #0
 8012cc6:	2100      	movs	r1, #0
 8012cc8:	e7e9      	b.n	8012c9e <__ieee754_atan2+0xe6>
 8012cca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012cce:	4619      	mov	r1, r3
 8012cd0:	e793      	b.n	8012bfa <__ieee754_atan2+0x42>
 8012cd2:	a30f      	add	r3, pc, #60	; (adr r3, 8012d10 <__ieee754_atan2+0x158>)
 8012cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd8:	f7ed fa86 	bl	80001e8 <__aeabi_dsub>
 8012cdc:	4602      	mov	r2, r0
 8012cde:	460b      	mov	r3, r1
 8012ce0:	a10d      	add	r1, pc, #52	; (adr r1, 8012d18 <__ieee754_atan2+0x160>)
 8012ce2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ce6:	f7ed fa7f 	bl	80001e8 <__aeabi_dsub>
 8012cea:	e786      	b.n	8012bfa <__ieee754_atan2+0x42>
 8012cec:	a10a      	add	r1, pc, #40	; (adr r1, 8012d18 <__ieee754_atan2+0x160>)
 8012cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cf2:	e782      	b.n	8012bfa <__ieee754_atan2+0x42>
 8012cf4:	a10c      	add	r1, pc, #48	; (adr r1, 8012d28 <__ieee754_atan2+0x170>)
 8012cf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cfa:	e77e      	b.n	8012bfa <__ieee754_atan2+0x42>
 8012cfc:	2000      	movs	r0, #0
 8012cfe:	2100      	movs	r1, #0
 8012d00:	e77b      	b.n	8012bfa <__ieee754_atan2+0x42>
 8012d02:	a107      	add	r1, pc, #28	; (adr r1, 8012d20 <__ieee754_atan2+0x168>)
 8012d04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d08:	e777      	b.n	8012bfa <__ieee754_atan2+0x42>
 8012d0a:	bf00      	nop
 8012d0c:	f3af 8000 	nop.w
 8012d10:	33145c07 	.word	0x33145c07
 8012d14:	3ca1a626 	.word	0x3ca1a626
 8012d18:	54442d18 	.word	0x54442d18
 8012d1c:	400921fb 	.word	0x400921fb
 8012d20:	54442d18 	.word	0x54442d18
 8012d24:	3ff921fb 	.word	0x3ff921fb
 8012d28:	54442d18 	.word	0x54442d18
 8012d2c:	3fe921fb 	.word	0x3fe921fb
 8012d30:	08014350 	.word	0x08014350
 8012d34:	08014368 	.word	0x08014368
 8012d38:	54442d18 	.word	0x54442d18
 8012d3c:	c00921fb 	.word	0xc00921fb
 8012d40:	54442d18 	.word	0x54442d18
 8012d44:	bff921fb 	.word	0xbff921fb
 8012d48:	7ff00000 	.word	0x7ff00000
 8012d4c:	00000000 	.word	0x00000000

08012d50 <__ieee754_rem_pio2>:
 8012d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d54:	ed2d 8b02 	vpush	{d8}
 8012d58:	ec55 4b10 	vmov	r4, r5, d0
 8012d5c:	4bca      	ldr	r3, [pc, #808]	; (8013088 <__ieee754_rem_pio2+0x338>)
 8012d5e:	b08b      	sub	sp, #44	; 0x2c
 8012d60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012d64:	4598      	cmp	r8, r3
 8012d66:	4682      	mov	sl, r0
 8012d68:	9502      	str	r5, [sp, #8]
 8012d6a:	dc08      	bgt.n	8012d7e <__ieee754_rem_pio2+0x2e>
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	2300      	movs	r3, #0
 8012d70:	ed80 0b00 	vstr	d0, [r0]
 8012d74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012d78:	f04f 0b00 	mov.w	fp, #0
 8012d7c:	e028      	b.n	8012dd0 <__ieee754_rem_pio2+0x80>
 8012d7e:	4bc3      	ldr	r3, [pc, #780]	; (801308c <__ieee754_rem_pio2+0x33c>)
 8012d80:	4598      	cmp	r8, r3
 8012d82:	dc78      	bgt.n	8012e76 <__ieee754_rem_pio2+0x126>
 8012d84:	9b02      	ldr	r3, [sp, #8]
 8012d86:	4ec2      	ldr	r6, [pc, #776]	; (8013090 <__ieee754_rem_pio2+0x340>)
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	ee10 0a10 	vmov	r0, s0
 8012d8e:	a3b0      	add	r3, pc, #704	; (adr r3, 8013050 <__ieee754_rem_pio2+0x300>)
 8012d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d94:	4629      	mov	r1, r5
 8012d96:	dd39      	ble.n	8012e0c <__ieee754_rem_pio2+0xbc>
 8012d98:	f7ed fa26 	bl	80001e8 <__aeabi_dsub>
 8012d9c:	45b0      	cmp	r8, r6
 8012d9e:	4604      	mov	r4, r0
 8012da0:	460d      	mov	r5, r1
 8012da2:	d01b      	beq.n	8012ddc <__ieee754_rem_pio2+0x8c>
 8012da4:	a3ac      	add	r3, pc, #688	; (adr r3, 8013058 <__ieee754_rem_pio2+0x308>)
 8012da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012daa:	f7ed fa1d 	bl	80001e8 <__aeabi_dsub>
 8012dae:	4602      	mov	r2, r0
 8012db0:	460b      	mov	r3, r1
 8012db2:	e9ca 2300 	strd	r2, r3, [sl]
 8012db6:	4620      	mov	r0, r4
 8012db8:	4629      	mov	r1, r5
 8012dba:	f7ed fa15 	bl	80001e8 <__aeabi_dsub>
 8012dbe:	a3a6      	add	r3, pc, #664	; (adr r3, 8013058 <__ieee754_rem_pio2+0x308>)
 8012dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc4:	f7ed fa10 	bl	80001e8 <__aeabi_dsub>
 8012dc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012dcc:	f04f 0b01 	mov.w	fp, #1
 8012dd0:	4658      	mov	r0, fp
 8012dd2:	b00b      	add	sp, #44	; 0x2c
 8012dd4:	ecbd 8b02 	vpop	{d8}
 8012dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ddc:	a3a0      	add	r3, pc, #640	; (adr r3, 8013060 <__ieee754_rem_pio2+0x310>)
 8012dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de2:	f7ed fa01 	bl	80001e8 <__aeabi_dsub>
 8012de6:	a3a0      	add	r3, pc, #640	; (adr r3, 8013068 <__ieee754_rem_pio2+0x318>)
 8012de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dec:	4604      	mov	r4, r0
 8012dee:	460d      	mov	r5, r1
 8012df0:	f7ed f9fa 	bl	80001e8 <__aeabi_dsub>
 8012df4:	4602      	mov	r2, r0
 8012df6:	460b      	mov	r3, r1
 8012df8:	e9ca 2300 	strd	r2, r3, [sl]
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	4629      	mov	r1, r5
 8012e00:	f7ed f9f2 	bl	80001e8 <__aeabi_dsub>
 8012e04:	a398      	add	r3, pc, #608	; (adr r3, 8013068 <__ieee754_rem_pio2+0x318>)
 8012e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e0a:	e7db      	b.n	8012dc4 <__ieee754_rem_pio2+0x74>
 8012e0c:	f7ed f9ee 	bl	80001ec <__adddf3>
 8012e10:	45b0      	cmp	r8, r6
 8012e12:	4604      	mov	r4, r0
 8012e14:	460d      	mov	r5, r1
 8012e16:	d016      	beq.n	8012e46 <__ieee754_rem_pio2+0xf6>
 8012e18:	a38f      	add	r3, pc, #572	; (adr r3, 8013058 <__ieee754_rem_pio2+0x308>)
 8012e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1e:	f7ed f9e5 	bl	80001ec <__adddf3>
 8012e22:	4602      	mov	r2, r0
 8012e24:	460b      	mov	r3, r1
 8012e26:	e9ca 2300 	strd	r2, r3, [sl]
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	4629      	mov	r1, r5
 8012e2e:	f7ed f9db 	bl	80001e8 <__aeabi_dsub>
 8012e32:	a389      	add	r3, pc, #548	; (adr r3, 8013058 <__ieee754_rem_pio2+0x308>)
 8012e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e38:	f7ed f9d8 	bl	80001ec <__adddf3>
 8012e3c:	f04f 3bff 	mov.w	fp, #4294967295
 8012e40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012e44:	e7c4      	b.n	8012dd0 <__ieee754_rem_pio2+0x80>
 8012e46:	a386      	add	r3, pc, #536	; (adr r3, 8013060 <__ieee754_rem_pio2+0x310>)
 8012e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e4c:	f7ed f9ce 	bl	80001ec <__adddf3>
 8012e50:	a385      	add	r3, pc, #532	; (adr r3, 8013068 <__ieee754_rem_pio2+0x318>)
 8012e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e56:	4604      	mov	r4, r0
 8012e58:	460d      	mov	r5, r1
 8012e5a:	f7ed f9c7 	bl	80001ec <__adddf3>
 8012e5e:	4602      	mov	r2, r0
 8012e60:	460b      	mov	r3, r1
 8012e62:	e9ca 2300 	strd	r2, r3, [sl]
 8012e66:	4620      	mov	r0, r4
 8012e68:	4629      	mov	r1, r5
 8012e6a:	f7ed f9bd 	bl	80001e8 <__aeabi_dsub>
 8012e6e:	a37e      	add	r3, pc, #504	; (adr r3, 8013068 <__ieee754_rem_pio2+0x318>)
 8012e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e74:	e7e0      	b.n	8012e38 <__ieee754_rem_pio2+0xe8>
 8012e76:	4b87      	ldr	r3, [pc, #540]	; (8013094 <__ieee754_rem_pio2+0x344>)
 8012e78:	4598      	cmp	r8, r3
 8012e7a:	f300 80d9 	bgt.w	8013030 <__ieee754_rem_pio2+0x2e0>
 8012e7e:	f001 f88f 	bl	8013fa0 <fabs>
 8012e82:	ec55 4b10 	vmov	r4, r5, d0
 8012e86:	ee10 0a10 	vmov	r0, s0
 8012e8a:	a379      	add	r3, pc, #484	; (adr r3, 8013070 <__ieee754_rem_pio2+0x320>)
 8012e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e90:	4629      	mov	r1, r5
 8012e92:	f7ed fb61 	bl	8000558 <__aeabi_dmul>
 8012e96:	4b80      	ldr	r3, [pc, #512]	; (8013098 <__ieee754_rem_pio2+0x348>)
 8012e98:	2200      	movs	r2, #0
 8012e9a:	f7ed f9a7 	bl	80001ec <__adddf3>
 8012e9e:	f7ed fe0b 	bl	8000ab8 <__aeabi_d2iz>
 8012ea2:	4683      	mov	fp, r0
 8012ea4:	f7ed faee 	bl	8000484 <__aeabi_i2d>
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	460b      	mov	r3, r1
 8012eac:	ec43 2b18 	vmov	d8, r2, r3
 8012eb0:	a367      	add	r3, pc, #412	; (adr r3, 8013050 <__ieee754_rem_pio2+0x300>)
 8012eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb6:	f7ed fb4f 	bl	8000558 <__aeabi_dmul>
 8012eba:	4602      	mov	r2, r0
 8012ebc:	460b      	mov	r3, r1
 8012ebe:	4620      	mov	r0, r4
 8012ec0:	4629      	mov	r1, r5
 8012ec2:	f7ed f991 	bl	80001e8 <__aeabi_dsub>
 8012ec6:	a364      	add	r3, pc, #400	; (adr r3, 8013058 <__ieee754_rem_pio2+0x308>)
 8012ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ecc:	4606      	mov	r6, r0
 8012ece:	460f      	mov	r7, r1
 8012ed0:	ec51 0b18 	vmov	r0, r1, d8
 8012ed4:	f7ed fb40 	bl	8000558 <__aeabi_dmul>
 8012ed8:	f1bb 0f1f 	cmp.w	fp, #31
 8012edc:	4604      	mov	r4, r0
 8012ede:	460d      	mov	r5, r1
 8012ee0:	dc0d      	bgt.n	8012efe <__ieee754_rem_pio2+0x1ae>
 8012ee2:	4b6e      	ldr	r3, [pc, #440]	; (801309c <__ieee754_rem_pio2+0x34c>)
 8012ee4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eec:	4543      	cmp	r3, r8
 8012eee:	d006      	beq.n	8012efe <__ieee754_rem_pio2+0x1ae>
 8012ef0:	4622      	mov	r2, r4
 8012ef2:	462b      	mov	r3, r5
 8012ef4:	4630      	mov	r0, r6
 8012ef6:	4639      	mov	r1, r7
 8012ef8:	f7ed f976 	bl	80001e8 <__aeabi_dsub>
 8012efc:	e00f      	b.n	8012f1e <__ieee754_rem_pio2+0x1ce>
 8012efe:	462b      	mov	r3, r5
 8012f00:	4622      	mov	r2, r4
 8012f02:	4630      	mov	r0, r6
 8012f04:	4639      	mov	r1, r7
 8012f06:	f7ed f96f 	bl	80001e8 <__aeabi_dsub>
 8012f0a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012f0e:	9303      	str	r3, [sp, #12]
 8012f10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012f14:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012f18:	f1b8 0f10 	cmp.w	r8, #16
 8012f1c:	dc02      	bgt.n	8012f24 <__ieee754_rem_pio2+0x1d4>
 8012f1e:	e9ca 0100 	strd	r0, r1, [sl]
 8012f22:	e039      	b.n	8012f98 <__ieee754_rem_pio2+0x248>
 8012f24:	a34e      	add	r3, pc, #312	; (adr r3, 8013060 <__ieee754_rem_pio2+0x310>)
 8012f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2a:	ec51 0b18 	vmov	r0, r1, d8
 8012f2e:	f7ed fb13 	bl	8000558 <__aeabi_dmul>
 8012f32:	4604      	mov	r4, r0
 8012f34:	460d      	mov	r5, r1
 8012f36:	4602      	mov	r2, r0
 8012f38:	460b      	mov	r3, r1
 8012f3a:	4630      	mov	r0, r6
 8012f3c:	4639      	mov	r1, r7
 8012f3e:	f7ed f953 	bl	80001e8 <__aeabi_dsub>
 8012f42:	4602      	mov	r2, r0
 8012f44:	460b      	mov	r3, r1
 8012f46:	4680      	mov	r8, r0
 8012f48:	4689      	mov	r9, r1
 8012f4a:	4630      	mov	r0, r6
 8012f4c:	4639      	mov	r1, r7
 8012f4e:	f7ed f94b 	bl	80001e8 <__aeabi_dsub>
 8012f52:	4622      	mov	r2, r4
 8012f54:	462b      	mov	r3, r5
 8012f56:	f7ed f947 	bl	80001e8 <__aeabi_dsub>
 8012f5a:	a343      	add	r3, pc, #268	; (adr r3, 8013068 <__ieee754_rem_pio2+0x318>)
 8012f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f60:	4604      	mov	r4, r0
 8012f62:	460d      	mov	r5, r1
 8012f64:	ec51 0b18 	vmov	r0, r1, d8
 8012f68:	f7ed faf6 	bl	8000558 <__aeabi_dmul>
 8012f6c:	4622      	mov	r2, r4
 8012f6e:	462b      	mov	r3, r5
 8012f70:	f7ed f93a 	bl	80001e8 <__aeabi_dsub>
 8012f74:	4602      	mov	r2, r0
 8012f76:	460b      	mov	r3, r1
 8012f78:	4604      	mov	r4, r0
 8012f7a:	460d      	mov	r5, r1
 8012f7c:	4640      	mov	r0, r8
 8012f7e:	4649      	mov	r1, r9
 8012f80:	f7ed f932 	bl	80001e8 <__aeabi_dsub>
 8012f84:	9a03      	ldr	r2, [sp, #12]
 8012f86:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012f8a:	1ad3      	subs	r3, r2, r3
 8012f8c:	2b31      	cmp	r3, #49	; 0x31
 8012f8e:	dc24      	bgt.n	8012fda <__ieee754_rem_pio2+0x28a>
 8012f90:	e9ca 0100 	strd	r0, r1, [sl]
 8012f94:	4646      	mov	r6, r8
 8012f96:	464f      	mov	r7, r9
 8012f98:	e9da 8900 	ldrd	r8, r9, [sl]
 8012f9c:	4630      	mov	r0, r6
 8012f9e:	4642      	mov	r2, r8
 8012fa0:	464b      	mov	r3, r9
 8012fa2:	4639      	mov	r1, r7
 8012fa4:	f7ed f920 	bl	80001e8 <__aeabi_dsub>
 8012fa8:	462b      	mov	r3, r5
 8012faa:	4622      	mov	r2, r4
 8012fac:	f7ed f91c 	bl	80001e8 <__aeabi_dsub>
 8012fb0:	9b02      	ldr	r3, [sp, #8]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012fb8:	f6bf af0a 	bge.w	8012dd0 <__ieee754_rem_pio2+0x80>
 8012fbc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012fc0:	f8ca 3004 	str.w	r3, [sl, #4]
 8012fc4:	f8ca 8000 	str.w	r8, [sl]
 8012fc8:	f8ca 0008 	str.w	r0, [sl, #8]
 8012fcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012fd0:	f8ca 300c 	str.w	r3, [sl, #12]
 8012fd4:	f1cb 0b00 	rsb	fp, fp, #0
 8012fd8:	e6fa      	b.n	8012dd0 <__ieee754_rem_pio2+0x80>
 8012fda:	a327      	add	r3, pc, #156	; (adr r3, 8013078 <__ieee754_rem_pio2+0x328>)
 8012fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe0:	ec51 0b18 	vmov	r0, r1, d8
 8012fe4:	f7ed fab8 	bl	8000558 <__aeabi_dmul>
 8012fe8:	4604      	mov	r4, r0
 8012fea:	460d      	mov	r5, r1
 8012fec:	4602      	mov	r2, r0
 8012fee:	460b      	mov	r3, r1
 8012ff0:	4640      	mov	r0, r8
 8012ff2:	4649      	mov	r1, r9
 8012ff4:	f7ed f8f8 	bl	80001e8 <__aeabi_dsub>
 8012ff8:	4602      	mov	r2, r0
 8012ffa:	460b      	mov	r3, r1
 8012ffc:	4606      	mov	r6, r0
 8012ffe:	460f      	mov	r7, r1
 8013000:	4640      	mov	r0, r8
 8013002:	4649      	mov	r1, r9
 8013004:	f7ed f8f0 	bl	80001e8 <__aeabi_dsub>
 8013008:	4622      	mov	r2, r4
 801300a:	462b      	mov	r3, r5
 801300c:	f7ed f8ec 	bl	80001e8 <__aeabi_dsub>
 8013010:	a31b      	add	r3, pc, #108	; (adr r3, 8013080 <__ieee754_rem_pio2+0x330>)
 8013012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013016:	4604      	mov	r4, r0
 8013018:	460d      	mov	r5, r1
 801301a:	ec51 0b18 	vmov	r0, r1, d8
 801301e:	f7ed fa9b 	bl	8000558 <__aeabi_dmul>
 8013022:	4622      	mov	r2, r4
 8013024:	462b      	mov	r3, r5
 8013026:	f7ed f8df 	bl	80001e8 <__aeabi_dsub>
 801302a:	4604      	mov	r4, r0
 801302c:	460d      	mov	r5, r1
 801302e:	e75f      	b.n	8012ef0 <__ieee754_rem_pio2+0x1a0>
 8013030:	4b1b      	ldr	r3, [pc, #108]	; (80130a0 <__ieee754_rem_pio2+0x350>)
 8013032:	4598      	cmp	r8, r3
 8013034:	dd36      	ble.n	80130a4 <__ieee754_rem_pio2+0x354>
 8013036:	ee10 2a10 	vmov	r2, s0
 801303a:	462b      	mov	r3, r5
 801303c:	4620      	mov	r0, r4
 801303e:	4629      	mov	r1, r5
 8013040:	f7ed f8d2 	bl	80001e8 <__aeabi_dsub>
 8013044:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013048:	e9ca 0100 	strd	r0, r1, [sl]
 801304c:	e694      	b.n	8012d78 <__ieee754_rem_pio2+0x28>
 801304e:	bf00      	nop
 8013050:	54400000 	.word	0x54400000
 8013054:	3ff921fb 	.word	0x3ff921fb
 8013058:	1a626331 	.word	0x1a626331
 801305c:	3dd0b461 	.word	0x3dd0b461
 8013060:	1a600000 	.word	0x1a600000
 8013064:	3dd0b461 	.word	0x3dd0b461
 8013068:	2e037073 	.word	0x2e037073
 801306c:	3ba3198a 	.word	0x3ba3198a
 8013070:	6dc9c883 	.word	0x6dc9c883
 8013074:	3fe45f30 	.word	0x3fe45f30
 8013078:	2e000000 	.word	0x2e000000
 801307c:	3ba3198a 	.word	0x3ba3198a
 8013080:	252049c1 	.word	0x252049c1
 8013084:	397b839a 	.word	0x397b839a
 8013088:	3fe921fb 	.word	0x3fe921fb
 801308c:	4002d97b 	.word	0x4002d97b
 8013090:	3ff921fb 	.word	0x3ff921fb
 8013094:	413921fb 	.word	0x413921fb
 8013098:	3fe00000 	.word	0x3fe00000
 801309c:	08014380 	.word	0x08014380
 80130a0:	7fefffff 	.word	0x7fefffff
 80130a4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80130a8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80130ac:	ee10 0a10 	vmov	r0, s0
 80130b0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80130b4:	ee10 6a10 	vmov	r6, s0
 80130b8:	460f      	mov	r7, r1
 80130ba:	f7ed fcfd 	bl	8000ab8 <__aeabi_d2iz>
 80130be:	f7ed f9e1 	bl	8000484 <__aeabi_i2d>
 80130c2:	4602      	mov	r2, r0
 80130c4:	460b      	mov	r3, r1
 80130c6:	4630      	mov	r0, r6
 80130c8:	4639      	mov	r1, r7
 80130ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80130ce:	f7ed f88b 	bl	80001e8 <__aeabi_dsub>
 80130d2:	4b22      	ldr	r3, [pc, #136]	; (801315c <__ieee754_rem_pio2+0x40c>)
 80130d4:	2200      	movs	r2, #0
 80130d6:	f7ed fa3f 	bl	8000558 <__aeabi_dmul>
 80130da:	460f      	mov	r7, r1
 80130dc:	4606      	mov	r6, r0
 80130de:	f7ed fceb 	bl	8000ab8 <__aeabi_d2iz>
 80130e2:	f7ed f9cf 	bl	8000484 <__aeabi_i2d>
 80130e6:	4602      	mov	r2, r0
 80130e8:	460b      	mov	r3, r1
 80130ea:	4630      	mov	r0, r6
 80130ec:	4639      	mov	r1, r7
 80130ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80130f2:	f7ed f879 	bl	80001e8 <__aeabi_dsub>
 80130f6:	4b19      	ldr	r3, [pc, #100]	; (801315c <__ieee754_rem_pio2+0x40c>)
 80130f8:	2200      	movs	r2, #0
 80130fa:	f7ed fa2d 	bl	8000558 <__aeabi_dmul>
 80130fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013102:	ad04      	add	r5, sp, #16
 8013104:	f04f 0803 	mov.w	r8, #3
 8013108:	46a9      	mov	r9, r5
 801310a:	2600      	movs	r6, #0
 801310c:	2700      	movs	r7, #0
 801310e:	4632      	mov	r2, r6
 8013110:	463b      	mov	r3, r7
 8013112:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8013116:	46c3      	mov	fp, r8
 8013118:	3d08      	subs	r5, #8
 801311a:	f108 38ff 	add.w	r8, r8, #4294967295
 801311e:	f7ed fc83 	bl	8000a28 <__aeabi_dcmpeq>
 8013122:	2800      	cmp	r0, #0
 8013124:	d1f3      	bne.n	801310e <__ieee754_rem_pio2+0x3be>
 8013126:	4b0e      	ldr	r3, [pc, #56]	; (8013160 <__ieee754_rem_pio2+0x410>)
 8013128:	9301      	str	r3, [sp, #4]
 801312a:	2302      	movs	r3, #2
 801312c:	9300      	str	r3, [sp, #0]
 801312e:	4622      	mov	r2, r4
 8013130:	465b      	mov	r3, fp
 8013132:	4651      	mov	r1, sl
 8013134:	4648      	mov	r0, r9
 8013136:	f000 f993 	bl	8013460 <__kernel_rem_pio2>
 801313a:	9b02      	ldr	r3, [sp, #8]
 801313c:	2b00      	cmp	r3, #0
 801313e:	4683      	mov	fp, r0
 8013140:	f6bf ae46 	bge.w	8012dd0 <__ieee754_rem_pio2+0x80>
 8013144:	f8da 3004 	ldr.w	r3, [sl, #4]
 8013148:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801314c:	f8ca 3004 	str.w	r3, [sl, #4]
 8013150:	f8da 300c 	ldr.w	r3, [sl, #12]
 8013154:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013158:	e73a      	b.n	8012fd0 <__ieee754_rem_pio2+0x280>
 801315a:	bf00      	nop
 801315c:	41700000 	.word	0x41700000
 8013160:	08014400 	.word	0x08014400

08013164 <__ieee754_sqrt>:
 8013164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013168:	ec55 4b10 	vmov	r4, r5, d0
 801316c:	4e56      	ldr	r6, [pc, #344]	; (80132c8 <__ieee754_sqrt+0x164>)
 801316e:	43ae      	bics	r6, r5
 8013170:	ee10 0a10 	vmov	r0, s0
 8013174:	ee10 3a10 	vmov	r3, s0
 8013178:	4629      	mov	r1, r5
 801317a:	462a      	mov	r2, r5
 801317c:	d110      	bne.n	80131a0 <__ieee754_sqrt+0x3c>
 801317e:	ee10 2a10 	vmov	r2, s0
 8013182:	462b      	mov	r3, r5
 8013184:	f7ed f9e8 	bl	8000558 <__aeabi_dmul>
 8013188:	4602      	mov	r2, r0
 801318a:	460b      	mov	r3, r1
 801318c:	4620      	mov	r0, r4
 801318e:	4629      	mov	r1, r5
 8013190:	f7ed f82c 	bl	80001ec <__adddf3>
 8013194:	4604      	mov	r4, r0
 8013196:	460d      	mov	r5, r1
 8013198:	ec45 4b10 	vmov	d0, r4, r5
 801319c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131a0:	2d00      	cmp	r5, #0
 80131a2:	dc10      	bgt.n	80131c6 <__ieee754_sqrt+0x62>
 80131a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80131a8:	4330      	orrs	r0, r6
 80131aa:	d0f5      	beq.n	8013198 <__ieee754_sqrt+0x34>
 80131ac:	b15d      	cbz	r5, 80131c6 <__ieee754_sqrt+0x62>
 80131ae:	ee10 2a10 	vmov	r2, s0
 80131b2:	462b      	mov	r3, r5
 80131b4:	ee10 0a10 	vmov	r0, s0
 80131b8:	f7ed f816 	bl	80001e8 <__aeabi_dsub>
 80131bc:	4602      	mov	r2, r0
 80131be:	460b      	mov	r3, r1
 80131c0:	f7ed faf4 	bl	80007ac <__aeabi_ddiv>
 80131c4:	e7e6      	b.n	8013194 <__ieee754_sqrt+0x30>
 80131c6:	1509      	asrs	r1, r1, #20
 80131c8:	d076      	beq.n	80132b8 <__ieee754_sqrt+0x154>
 80131ca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80131ce:	07ce      	lsls	r6, r1, #31
 80131d0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80131d4:	bf5e      	ittt	pl
 80131d6:	0fda      	lsrpl	r2, r3, #31
 80131d8:	005b      	lslpl	r3, r3, #1
 80131da:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80131de:	0fda      	lsrs	r2, r3, #31
 80131e0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80131e4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80131e8:	2000      	movs	r0, #0
 80131ea:	106d      	asrs	r5, r5, #1
 80131ec:	005b      	lsls	r3, r3, #1
 80131ee:	f04f 0e16 	mov.w	lr, #22
 80131f2:	4684      	mov	ip, r0
 80131f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80131f8:	eb0c 0401 	add.w	r4, ip, r1
 80131fc:	4294      	cmp	r4, r2
 80131fe:	bfde      	ittt	le
 8013200:	1b12      	suble	r2, r2, r4
 8013202:	eb04 0c01 	addle.w	ip, r4, r1
 8013206:	1840      	addle	r0, r0, r1
 8013208:	0052      	lsls	r2, r2, #1
 801320a:	f1be 0e01 	subs.w	lr, lr, #1
 801320e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8013212:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013216:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801321a:	d1ed      	bne.n	80131f8 <__ieee754_sqrt+0x94>
 801321c:	4671      	mov	r1, lr
 801321e:	2720      	movs	r7, #32
 8013220:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8013224:	4562      	cmp	r2, ip
 8013226:	eb04 060e 	add.w	r6, r4, lr
 801322a:	dc02      	bgt.n	8013232 <__ieee754_sqrt+0xce>
 801322c:	d113      	bne.n	8013256 <__ieee754_sqrt+0xf2>
 801322e:	429e      	cmp	r6, r3
 8013230:	d811      	bhi.n	8013256 <__ieee754_sqrt+0xf2>
 8013232:	2e00      	cmp	r6, #0
 8013234:	eb06 0e04 	add.w	lr, r6, r4
 8013238:	da43      	bge.n	80132c2 <__ieee754_sqrt+0x15e>
 801323a:	f1be 0f00 	cmp.w	lr, #0
 801323e:	db40      	blt.n	80132c2 <__ieee754_sqrt+0x15e>
 8013240:	f10c 0801 	add.w	r8, ip, #1
 8013244:	eba2 020c 	sub.w	r2, r2, ip
 8013248:	429e      	cmp	r6, r3
 801324a:	bf88      	it	hi
 801324c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8013250:	1b9b      	subs	r3, r3, r6
 8013252:	4421      	add	r1, r4
 8013254:	46c4      	mov	ip, r8
 8013256:	0052      	lsls	r2, r2, #1
 8013258:	3f01      	subs	r7, #1
 801325a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801325e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8013262:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013266:	d1dd      	bne.n	8013224 <__ieee754_sqrt+0xc0>
 8013268:	4313      	orrs	r3, r2
 801326a:	d006      	beq.n	801327a <__ieee754_sqrt+0x116>
 801326c:	1c4c      	adds	r4, r1, #1
 801326e:	bf13      	iteet	ne
 8013270:	3101      	addne	r1, #1
 8013272:	3001      	addeq	r0, #1
 8013274:	4639      	moveq	r1, r7
 8013276:	f021 0101 	bicne.w	r1, r1, #1
 801327a:	1043      	asrs	r3, r0, #1
 801327c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013280:	0849      	lsrs	r1, r1, #1
 8013282:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013286:	07c2      	lsls	r2, r0, #31
 8013288:	bf48      	it	mi
 801328a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801328e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8013292:	460c      	mov	r4, r1
 8013294:	463d      	mov	r5, r7
 8013296:	e77f      	b.n	8013198 <__ieee754_sqrt+0x34>
 8013298:	0ada      	lsrs	r2, r3, #11
 801329a:	3815      	subs	r0, #21
 801329c:	055b      	lsls	r3, r3, #21
 801329e:	2a00      	cmp	r2, #0
 80132a0:	d0fa      	beq.n	8013298 <__ieee754_sqrt+0x134>
 80132a2:	02d7      	lsls	r7, r2, #11
 80132a4:	d50a      	bpl.n	80132bc <__ieee754_sqrt+0x158>
 80132a6:	f1c1 0420 	rsb	r4, r1, #32
 80132aa:	fa23 f404 	lsr.w	r4, r3, r4
 80132ae:	1e4d      	subs	r5, r1, #1
 80132b0:	408b      	lsls	r3, r1
 80132b2:	4322      	orrs	r2, r4
 80132b4:	1b41      	subs	r1, r0, r5
 80132b6:	e788      	b.n	80131ca <__ieee754_sqrt+0x66>
 80132b8:	4608      	mov	r0, r1
 80132ba:	e7f0      	b.n	801329e <__ieee754_sqrt+0x13a>
 80132bc:	0052      	lsls	r2, r2, #1
 80132be:	3101      	adds	r1, #1
 80132c0:	e7ef      	b.n	80132a2 <__ieee754_sqrt+0x13e>
 80132c2:	46e0      	mov	r8, ip
 80132c4:	e7be      	b.n	8013244 <__ieee754_sqrt+0xe0>
 80132c6:	bf00      	nop
 80132c8:	7ff00000 	.word	0x7ff00000
 80132cc:	00000000 	.word	0x00000000

080132d0 <__kernel_cos>:
 80132d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d4:	ec57 6b10 	vmov	r6, r7, d0
 80132d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80132dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80132e0:	ed8d 1b00 	vstr	d1, [sp]
 80132e4:	da07      	bge.n	80132f6 <__kernel_cos+0x26>
 80132e6:	ee10 0a10 	vmov	r0, s0
 80132ea:	4639      	mov	r1, r7
 80132ec:	f7ed fbe4 	bl	8000ab8 <__aeabi_d2iz>
 80132f0:	2800      	cmp	r0, #0
 80132f2:	f000 8088 	beq.w	8013406 <__kernel_cos+0x136>
 80132f6:	4632      	mov	r2, r6
 80132f8:	463b      	mov	r3, r7
 80132fa:	4630      	mov	r0, r6
 80132fc:	4639      	mov	r1, r7
 80132fe:	f7ed f92b 	bl	8000558 <__aeabi_dmul>
 8013302:	4b51      	ldr	r3, [pc, #324]	; (8013448 <__kernel_cos+0x178>)
 8013304:	2200      	movs	r2, #0
 8013306:	4604      	mov	r4, r0
 8013308:	460d      	mov	r5, r1
 801330a:	f7ed f925 	bl	8000558 <__aeabi_dmul>
 801330e:	a340      	add	r3, pc, #256	; (adr r3, 8013410 <__kernel_cos+0x140>)
 8013310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013314:	4682      	mov	sl, r0
 8013316:	468b      	mov	fp, r1
 8013318:	4620      	mov	r0, r4
 801331a:	4629      	mov	r1, r5
 801331c:	f7ed f91c 	bl	8000558 <__aeabi_dmul>
 8013320:	a33d      	add	r3, pc, #244	; (adr r3, 8013418 <__kernel_cos+0x148>)
 8013322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013326:	f7ec ff61 	bl	80001ec <__adddf3>
 801332a:	4622      	mov	r2, r4
 801332c:	462b      	mov	r3, r5
 801332e:	f7ed f913 	bl	8000558 <__aeabi_dmul>
 8013332:	a33b      	add	r3, pc, #236	; (adr r3, 8013420 <__kernel_cos+0x150>)
 8013334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013338:	f7ec ff56 	bl	80001e8 <__aeabi_dsub>
 801333c:	4622      	mov	r2, r4
 801333e:	462b      	mov	r3, r5
 8013340:	f7ed f90a 	bl	8000558 <__aeabi_dmul>
 8013344:	a338      	add	r3, pc, #224	; (adr r3, 8013428 <__kernel_cos+0x158>)
 8013346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334a:	f7ec ff4f 	bl	80001ec <__adddf3>
 801334e:	4622      	mov	r2, r4
 8013350:	462b      	mov	r3, r5
 8013352:	f7ed f901 	bl	8000558 <__aeabi_dmul>
 8013356:	a336      	add	r3, pc, #216	; (adr r3, 8013430 <__kernel_cos+0x160>)
 8013358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335c:	f7ec ff44 	bl	80001e8 <__aeabi_dsub>
 8013360:	4622      	mov	r2, r4
 8013362:	462b      	mov	r3, r5
 8013364:	f7ed f8f8 	bl	8000558 <__aeabi_dmul>
 8013368:	a333      	add	r3, pc, #204	; (adr r3, 8013438 <__kernel_cos+0x168>)
 801336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801336e:	f7ec ff3d 	bl	80001ec <__adddf3>
 8013372:	4622      	mov	r2, r4
 8013374:	462b      	mov	r3, r5
 8013376:	f7ed f8ef 	bl	8000558 <__aeabi_dmul>
 801337a:	4622      	mov	r2, r4
 801337c:	462b      	mov	r3, r5
 801337e:	f7ed f8eb 	bl	8000558 <__aeabi_dmul>
 8013382:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013386:	4604      	mov	r4, r0
 8013388:	460d      	mov	r5, r1
 801338a:	4630      	mov	r0, r6
 801338c:	4639      	mov	r1, r7
 801338e:	f7ed f8e3 	bl	8000558 <__aeabi_dmul>
 8013392:	460b      	mov	r3, r1
 8013394:	4602      	mov	r2, r0
 8013396:	4629      	mov	r1, r5
 8013398:	4620      	mov	r0, r4
 801339a:	f7ec ff25 	bl	80001e8 <__aeabi_dsub>
 801339e:	4b2b      	ldr	r3, [pc, #172]	; (801344c <__kernel_cos+0x17c>)
 80133a0:	4598      	cmp	r8, r3
 80133a2:	4606      	mov	r6, r0
 80133a4:	460f      	mov	r7, r1
 80133a6:	dc10      	bgt.n	80133ca <__kernel_cos+0xfa>
 80133a8:	4602      	mov	r2, r0
 80133aa:	460b      	mov	r3, r1
 80133ac:	4650      	mov	r0, sl
 80133ae:	4659      	mov	r1, fp
 80133b0:	f7ec ff1a 	bl	80001e8 <__aeabi_dsub>
 80133b4:	460b      	mov	r3, r1
 80133b6:	4926      	ldr	r1, [pc, #152]	; (8013450 <__kernel_cos+0x180>)
 80133b8:	4602      	mov	r2, r0
 80133ba:	2000      	movs	r0, #0
 80133bc:	f7ec ff14 	bl	80001e8 <__aeabi_dsub>
 80133c0:	ec41 0b10 	vmov	d0, r0, r1
 80133c4:	b003      	add	sp, #12
 80133c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ca:	4b22      	ldr	r3, [pc, #136]	; (8013454 <__kernel_cos+0x184>)
 80133cc:	4920      	ldr	r1, [pc, #128]	; (8013450 <__kernel_cos+0x180>)
 80133ce:	4598      	cmp	r8, r3
 80133d0:	bfcc      	ite	gt
 80133d2:	4d21      	ldrgt	r5, [pc, #132]	; (8013458 <__kernel_cos+0x188>)
 80133d4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80133d8:	2400      	movs	r4, #0
 80133da:	4622      	mov	r2, r4
 80133dc:	462b      	mov	r3, r5
 80133de:	2000      	movs	r0, #0
 80133e0:	f7ec ff02 	bl	80001e8 <__aeabi_dsub>
 80133e4:	4622      	mov	r2, r4
 80133e6:	4680      	mov	r8, r0
 80133e8:	4689      	mov	r9, r1
 80133ea:	462b      	mov	r3, r5
 80133ec:	4650      	mov	r0, sl
 80133ee:	4659      	mov	r1, fp
 80133f0:	f7ec fefa 	bl	80001e8 <__aeabi_dsub>
 80133f4:	4632      	mov	r2, r6
 80133f6:	463b      	mov	r3, r7
 80133f8:	f7ec fef6 	bl	80001e8 <__aeabi_dsub>
 80133fc:	4602      	mov	r2, r0
 80133fe:	460b      	mov	r3, r1
 8013400:	4640      	mov	r0, r8
 8013402:	4649      	mov	r1, r9
 8013404:	e7da      	b.n	80133bc <__kernel_cos+0xec>
 8013406:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013440 <__kernel_cos+0x170>
 801340a:	e7db      	b.n	80133c4 <__kernel_cos+0xf4>
 801340c:	f3af 8000 	nop.w
 8013410:	be8838d4 	.word	0xbe8838d4
 8013414:	bda8fae9 	.word	0xbda8fae9
 8013418:	bdb4b1c4 	.word	0xbdb4b1c4
 801341c:	3e21ee9e 	.word	0x3e21ee9e
 8013420:	809c52ad 	.word	0x809c52ad
 8013424:	3e927e4f 	.word	0x3e927e4f
 8013428:	19cb1590 	.word	0x19cb1590
 801342c:	3efa01a0 	.word	0x3efa01a0
 8013430:	16c15177 	.word	0x16c15177
 8013434:	3f56c16c 	.word	0x3f56c16c
 8013438:	5555554c 	.word	0x5555554c
 801343c:	3fa55555 	.word	0x3fa55555
 8013440:	00000000 	.word	0x00000000
 8013444:	3ff00000 	.word	0x3ff00000
 8013448:	3fe00000 	.word	0x3fe00000
 801344c:	3fd33332 	.word	0x3fd33332
 8013450:	3ff00000 	.word	0x3ff00000
 8013454:	3fe90000 	.word	0x3fe90000
 8013458:	3fd20000 	.word	0x3fd20000
 801345c:	00000000 	.word	0x00000000

08013460 <__kernel_rem_pio2>:
 8013460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013464:	ed2d 8b02 	vpush	{d8}
 8013468:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801346c:	f112 0f14 	cmn.w	r2, #20
 8013470:	9308      	str	r3, [sp, #32]
 8013472:	9101      	str	r1, [sp, #4]
 8013474:	4bc6      	ldr	r3, [pc, #792]	; (8013790 <__kernel_rem_pio2+0x330>)
 8013476:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8013478:	9009      	str	r0, [sp, #36]	; 0x24
 801347a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801347e:	9304      	str	r3, [sp, #16]
 8013480:	9b08      	ldr	r3, [sp, #32]
 8013482:	f103 33ff 	add.w	r3, r3, #4294967295
 8013486:	bfa8      	it	ge
 8013488:	1ed4      	subge	r4, r2, #3
 801348a:	9306      	str	r3, [sp, #24]
 801348c:	bfb2      	itee	lt
 801348e:	2400      	movlt	r4, #0
 8013490:	2318      	movge	r3, #24
 8013492:	fb94 f4f3 	sdivge	r4, r4, r3
 8013496:	f06f 0317 	mvn.w	r3, #23
 801349a:	fb04 3303 	mla	r3, r4, r3, r3
 801349e:	eb03 0a02 	add.w	sl, r3, r2
 80134a2:	9b04      	ldr	r3, [sp, #16]
 80134a4:	9a06      	ldr	r2, [sp, #24]
 80134a6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8013780 <__kernel_rem_pio2+0x320>
 80134aa:	eb03 0802 	add.w	r8, r3, r2
 80134ae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80134b0:	1aa7      	subs	r7, r4, r2
 80134b2:	ae20      	add	r6, sp, #128	; 0x80
 80134b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80134b8:	2500      	movs	r5, #0
 80134ba:	4545      	cmp	r5, r8
 80134bc:	dd18      	ble.n	80134f0 <__kernel_rem_pio2+0x90>
 80134be:	9b08      	ldr	r3, [sp, #32]
 80134c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80134c4:	aa20      	add	r2, sp, #128	; 0x80
 80134c6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8013780 <__kernel_rem_pio2+0x320>
 80134ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80134ce:	f1c3 0301 	rsb	r3, r3, #1
 80134d2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80134d6:	9307      	str	r3, [sp, #28]
 80134d8:	9b07      	ldr	r3, [sp, #28]
 80134da:	9a04      	ldr	r2, [sp, #16]
 80134dc:	4443      	add	r3, r8
 80134de:	429a      	cmp	r2, r3
 80134e0:	db2f      	blt.n	8013542 <__kernel_rem_pio2+0xe2>
 80134e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80134e6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80134ea:	462f      	mov	r7, r5
 80134ec:	2600      	movs	r6, #0
 80134ee:	e01b      	b.n	8013528 <__kernel_rem_pio2+0xc8>
 80134f0:	42ef      	cmn	r7, r5
 80134f2:	d407      	bmi.n	8013504 <__kernel_rem_pio2+0xa4>
 80134f4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80134f8:	f7ec ffc4 	bl	8000484 <__aeabi_i2d>
 80134fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013500:	3501      	adds	r5, #1
 8013502:	e7da      	b.n	80134ba <__kernel_rem_pio2+0x5a>
 8013504:	ec51 0b18 	vmov	r0, r1, d8
 8013508:	e7f8      	b.n	80134fc <__kernel_rem_pio2+0x9c>
 801350a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801350e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013512:	f7ed f821 	bl	8000558 <__aeabi_dmul>
 8013516:	4602      	mov	r2, r0
 8013518:	460b      	mov	r3, r1
 801351a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801351e:	f7ec fe65 	bl	80001ec <__adddf3>
 8013522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013526:	3601      	adds	r6, #1
 8013528:	9b06      	ldr	r3, [sp, #24]
 801352a:	429e      	cmp	r6, r3
 801352c:	f1a7 0708 	sub.w	r7, r7, #8
 8013530:	ddeb      	ble.n	801350a <__kernel_rem_pio2+0xaa>
 8013532:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013536:	3508      	adds	r5, #8
 8013538:	ecab 7b02 	vstmia	fp!, {d7}
 801353c:	f108 0801 	add.w	r8, r8, #1
 8013540:	e7ca      	b.n	80134d8 <__kernel_rem_pio2+0x78>
 8013542:	9b04      	ldr	r3, [sp, #16]
 8013544:	aa0c      	add	r2, sp, #48	; 0x30
 8013546:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801354a:	930b      	str	r3, [sp, #44]	; 0x2c
 801354c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801354e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013552:	9c04      	ldr	r4, [sp, #16]
 8013554:	930a      	str	r3, [sp, #40]	; 0x28
 8013556:	ab98      	add	r3, sp, #608	; 0x260
 8013558:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801355c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8013560:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8013564:	f8cd b008 	str.w	fp, [sp, #8]
 8013568:	4625      	mov	r5, r4
 801356a:	2d00      	cmp	r5, #0
 801356c:	dc78      	bgt.n	8013660 <__kernel_rem_pio2+0x200>
 801356e:	ec47 6b10 	vmov	d0, r6, r7
 8013572:	4650      	mov	r0, sl
 8013574:	f000 fda8 	bl	80140c8 <scalbn>
 8013578:	ec57 6b10 	vmov	r6, r7, d0
 801357c:	2200      	movs	r2, #0
 801357e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013582:	ee10 0a10 	vmov	r0, s0
 8013586:	4639      	mov	r1, r7
 8013588:	f7ec ffe6 	bl	8000558 <__aeabi_dmul>
 801358c:	ec41 0b10 	vmov	d0, r0, r1
 8013590:	f000 fd12 	bl	8013fb8 <floor>
 8013594:	4b7f      	ldr	r3, [pc, #508]	; (8013794 <__kernel_rem_pio2+0x334>)
 8013596:	ec51 0b10 	vmov	r0, r1, d0
 801359a:	2200      	movs	r2, #0
 801359c:	f7ec ffdc 	bl	8000558 <__aeabi_dmul>
 80135a0:	4602      	mov	r2, r0
 80135a2:	460b      	mov	r3, r1
 80135a4:	4630      	mov	r0, r6
 80135a6:	4639      	mov	r1, r7
 80135a8:	f7ec fe1e 	bl	80001e8 <__aeabi_dsub>
 80135ac:	460f      	mov	r7, r1
 80135ae:	4606      	mov	r6, r0
 80135b0:	f7ed fa82 	bl	8000ab8 <__aeabi_d2iz>
 80135b4:	9007      	str	r0, [sp, #28]
 80135b6:	f7ec ff65 	bl	8000484 <__aeabi_i2d>
 80135ba:	4602      	mov	r2, r0
 80135bc:	460b      	mov	r3, r1
 80135be:	4630      	mov	r0, r6
 80135c0:	4639      	mov	r1, r7
 80135c2:	f7ec fe11 	bl	80001e8 <__aeabi_dsub>
 80135c6:	f1ba 0f00 	cmp.w	sl, #0
 80135ca:	4606      	mov	r6, r0
 80135cc:	460f      	mov	r7, r1
 80135ce:	dd70      	ble.n	80136b2 <__kernel_rem_pio2+0x252>
 80135d0:	1e62      	subs	r2, r4, #1
 80135d2:	ab0c      	add	r3, sp, #48	; 0x30
 80135d4:	9d07      	ldr	r5, [sp, #28]
 80135d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80135da:	f1ca 0118 	rsb	r1, sl, #24
 80135de:	fa40 f301 	asr.w	r3, r0, r1
 80135e2:	441d      	add	r5, r3
 80135e4:	408b      	lsls	r3, r1
 80135e6:	1ac0      	subs	r0, r0, r3
 80135e8:	ab0c      	add	r3, sp, #48	; 0x30
 80135ea:	9507      	str	r5, [sp, #28]
 80135ec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80135f0:	f1ca 0317 	rsb	r3, sl, #23
 80135f4:	fa40 f303 	asr.w	r3, r0, r3
 80135f8:	9302      	str	r3, [sp, #8]
 80135fa:	9b02      	ldr	r3, [sp, #8]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	dd66      	ble.n	80136ce <__kernel_rem_pio2+0x26e>
 8013600:	9b07      	ldr	r3, [sp, #28]
 8013602:	2200      	movs	r2, #0
 8013604:	3301      	adds	r3, #1
 8013606:	9307      	str	r3, [sp, #28]
 8013608:	4615      	mov	r5, r2
 801360a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801360e:	4294      	cmp	r4, r2
 8013610:	f300 8099 	bgt.w	8013746 <__kernel_rem_pio2+0x2e6>
 8013614:	f1ba 0f00 	cmp.w	sl, #0
 8013618:	dd07      	ble.n	801362a <__kernel_rem_pio2+0x1ca>
 801361a:	f1ba 0f01 	cmp.w	sl, #1
 801361e:	f000 80a5 	beq.w	801376c <__kernel_rem_pio2+0x30c>
 8013622:	f1ba 0f02 	cmp.w	sl, #2
 8013626:	f000 80c1 	beq.w	80137ac <__kernel_rem_pio2+0x34c>
 801362a:	9b02      	ldr	r3, [sp, #8]
 801362c:	2b02      	cmp	r3, #2
 801362e:	d14e      	bne.n	80136ce <__kernel_rem_pio2+0x26e>
 8013630:	4632      	mov	r2, r6
 8013632:	463b      	mov	r3, r7
 8013634:	4958      	ldr	r1, [pc, #352]	; (8013798 <__kernel_rem_pio2+0x338>)
 8013636:	2000      	movs	r0, #0
 8013638:	f7ec fdd6 	bl	80001e8 <__aeabi_dsub>
 801363c:	4606      	mov	r6, r0
 801363e:	460f      	mov	r7, r1
 8013640:	2d00      	cmp	r5, #0
 8013642:	d044      	beq.n	80136ce <__kernel_rem_pio2+0x26e>
 8013644:	4650      	mov	r0, sl
 8013646:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8013788 <__kernel_rem_pio2+0x328>
 801364a:	f000 fd3d 	bl	80140c8 <scalbn>
 801364e:	4630      	mov	r0, r6
 8013650:	4639      	mov	r1, r7
 8013652:	ec53 2b10 	vmov	r2, r3, d0
 8013656:	f7ec fdc7 	bl	80001e8 <__aeabi_dsub>
 801365a:	4606      	mov	r6, r0
 801365c:	460f      	mov	r7, r1
 801365e:	e036      	b.n	80136ce <__kernel_rem_pio2+0x26e>
 8013660:	4b4e      	ldr	r3, [pc, #312]	; (801379c <__kernel_rem_pio2+0x33c>)
 8013662:	2200      	movs	r2, #0
 8013664:	4630      	mov	r0, r6
 8013666:	4639      	mov	r1, r7
 8013668:	f7ec ff76 	bl	8000558 <__aeabi_dmul>
 801366c:	f7ed fa24 	bl	8000ab8 <__aeabi_d2iz>
 8013670:	f7ec ff08 	bl	8000484 <__aeabi_i2d>
 8013674:	4b4a      	ldr	r3, [pc, #296]	; (80137a0 <__kernel_rem_pio2+0x340>)
 8013676:	2200      	movs	r2, #0
 8013678:	4680      	mov	r8, r0
 801367a:	4689      	mov	r9, r1
 801367c:	f7ec ff6c 	bl	8000558 <__aeabi_dmul>
 8013680:	4602      	mov	r2, r0
 8013682:	460b      	mov	r3, r1
 8013684:	4630      	mov	r0, r6
 8013686:	4639      	mov	r1, r7
 8013688:	f7ec fdae 	bl	80001e8 <__aeabi_dsub>
 801368c:	f7ed fa14 	bl	8000ab8 <__aeabi_d2iz>
 8013690:	9b02      	ldr	r3, [sp, #8]
 8013692:	f843 0b04 	str.w	r0, [r3], #4
 8013696:	3d01      	subs	r5, #1
 8013698:	9302      	str	r3, [sp, #8]
 801369a:	ab70      	add	r3, sp, #448	; 0x1c0
 801369c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80136a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a4:	4640      	mov	r0, r8
 80136a6:	4649      	mov	r1, r9
 80136a8:	f7ec fda0 	bl	80001ec <__adddf3>
 80136ac:	4606      	mov	r6, r0
 80136ae:	460f      	mov	r7, r1
 80136b0:	e75b      	b.n	801356a <__kernel_rem_pio2+0x10a>
 80136b2:	d105      	bne.n	80136c0 <__kernel_rem_pio2+0x260>
 80136b4:	1e63      	subs	r3, r4, #1
 80136b6:	aa0c      	add	r2, sp, #48	; 0x30
 80136b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80136bc:	15c3      	asrs	r3, r0, #23
 80136be:	e79b      	b.n	80135f8 <__kernel_rem_pio2+0x198>
 80136c0:	4b38      	ldr	r3, [pc, #224]	; (80137a4 <__kernel_rem_pio2+0x344>)
 80136c2:	2200      	movs	r2, #0
 80136c4:	f7ed f9ce 	bl	8000a64 <__aeabi_dcmpge>
 80136c8:	2800      	cmp	r0, #0
 80136ca:	d139      	bne.n	8013740 <__kernel_rem_pio2+0x2e0>
 80136cc:	9002      	str	r0, [sp, #8]
 80136ce:	2200      	movs	r2, #0
 80136d0:	2300      	movs	r3, #0
 80136d2:	4630      	mov	r0, r6
 80136d4:	4639      	mov	r1, r7
 80136d6:	f7ed f9a7 	bl	8000a28 <__aeabi_dcmpeq>
 80136da:	2800      	cmp	r0, #0
 80136dc:	f000 80b4 	beq.w	8013848 <__kernel_rem_pio2+0x3e8>
 80136e0:	f104 3bff 	add.w	fp, r4, #4294967295
 80136e4:	465b      	mov	r3, fp
 80136e6:	2200      	movs	r2, #0
 80136e8:	9904      	ldr	r1, [sp, #16]
 80136ea:	428b      	cmp	r3, r1
 80136ec:	da65      	bge.n	80137ba <__kernel_rem_pio2+0x35a>
 80136ee:	2a00      	cmp	r2, #0
 80136f0:	d07b      	beq.n	80137ea <__kernel_rem_pio2+0x38a>
 80136f2:	ab0c      	add	r3, sp, #48	; 0x30
 80136f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80136f8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	f000 80a0 	beq.w	8013842 <__kernel_rem_pio2+0x3e2>
 8013702:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8013788 <__kernel_rem_pio2+0x328>
 8013706:	4650      	mov	r0, sl
 8013708:	f000 fcde 	bl	80140c8 <scalbn>
 801370c:	4f23      	ldr	r7, [pc, #140]	; (801379c <__kernel_rem_pio2+0x33c>)
 801370e:	ec55 4b10 	vmov	r4, r5, d0
 8013712:	46d8      	mov	r8, fp
 8013714:	2600      	movs	r6, #0
 8013716:	f1b8 0f00 	cmp.w	r8, #0
 801371a:	f280 80cf 	bge.w	80138bc <__kernel_rem_pio2+0x45c>
 801371e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8013780 <__kernel_rem_pio2+0x320>
 8013722:	465f      	mov	r7, fp
 8013724:	f04f 0800 	mov.w	r8, #0
 8013728:	2f00      	cmp	r7, #0
 801372a:	f2c0 80fd 	blt.w	8013928 <__kernel_rem_pio2+0x4c8>
 801372e:	ab70      	add	r3, sp, #448	; 0x1c0
 8013730:	f8df a074 	ldr.w	sl, [pc, #116]	; 80137a8 <__kernel_rem_pio2+0x348>
 8013734:	ec55 4b18 	vmov	r4, r5, d8
 8013738:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801373c:	2600      	movs	r6, #0
 801373e:	e0e5      	b.n	801390c <__kernel_rem_pio2+0x4ac>
 8013740:	2302      	movs	r3, #2
 8013742:	9302      	str	r3, [sp, #8]
 8013744:	e75c      	b.n	8013600 <__kernel_rem_pio2+0x1a0>
 8013746:	f8db 3000 	ldr.w	r3, [fp]
 801374a:	b955      	cbnz	r5, 8013762 <__kernel_rem_pio2+0x302>
 801374c:	b123      	cbz	r3, 8013758 <__kernel_rem_pio2+0x2f8>
 801374e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013752:	f8cb 3000 	str.w	r3, [fp]
 8013756:	2301      	movs	r3, #1
 8013758:	3201      	adds	r2, #1
 801375a:	f10b 0b04 	add.w	fp, fp, #4
 801375e:	461d      	mov	r5, r3
 8013760:	e755      	b.n	801360e <__kernel_rem_pio2+0x1ae>
 8013762:	1acb      	subs	r3, r1, r3
 8013764:	f8cb 3000 	str.w	r3, [fp]
 8013768:	462b      	mov	r3, r5
 801376a:	e7f5      	b.n	8013758 <__kernel_rem_pio2+0x2f8>
 801376c:	1e62      	subs	r2, r4, #1
 801376e:	ab0c      	add	r3, sp, #48	; 0x30
 8013770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013774:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013778:	a90c      	add	r1, sp, #48	; 0x30
 801377a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801377e:	e754      	b.n	801362a <__kernel_rem_pio2+0x1ca>
	...
 801378c:	3ff00000 	.word	0x3ff00000
 8013790:	08014548 	.word	0x08014548
 8013794:	40200000 	.word	0x40200000
 8013798:	3ff00000 	.word	0x3ff00000
 801379c:	3e700000 	.word	0x3e700000
 80137a0:	41700000 	.word	0x41700000
 80137a4:	3fe00000 	.word	0x3fe00000
 80137a8:	08014508 	.word	0x08014508
 80137ac:	1e62      	subs	r2, r4, #1
 80137ae:	ab0c      	add	r3, sp, #48	; 0x30
 80137b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80137b8:	e7de      	b.n	8013778 <__kernel_rem_pio2+0x318>
 80137ba:	a90c      	add	r1, sp, #48	; 0x30
 80137bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80137c0:	3b01      	subs	r3, #1
 80137c2:	430a      	orrs	r2, r1
 80137c4:	e790      	b.n	80136e8 <__kernel_rem_pio2+0x288>
 80137c6:	3301      	adds	r3, #1
 80137c8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80137cc:	2900      	cmp	r1, #0
 80137ce:	d0fa      	beq.n	80137c6 <__kernel_rem_pio2+0x366>
 80137d0:	9a08      	ldr	r2, [sp, #32]
 80137d2:	18e3      	adds	r3, r4, r3
 80137d4:	18a6      	adds	r6, r4, r2
 80137d6:	aa20      	add	r2, sp, #128	; 0x80
 80137d8:	1c65      	adds	r5, r4, #1
 80137da:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80137de:	9302      	str	r3, [sp, #8]
 80137e0:	9b02      	ldr	r3, [sp, #8]
 80137e2:	42ab      	cmp	r3, r5
 80137e4:	da04      	bge.n	80137f0 <__kernel_rem_pio2+0x390>
 80137e6:	461c      	mov	r4, r3
 80137e8:	e6b5      	b.n	8013556 <__kernel_rem_pio2+0xf6>
 80137ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80137ec:	2301      	movs	r3, #1
 80137ee:	e7eb      	b.n	80137c8 <__kernel_rem_pio2+0x368>
 80137f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80137f6:	f7ec fe45 	bl	8000484 <__aeabi_i2d>
 80137fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80137fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013800:	46b3      	mov	fp, r6
 8013802:	461c      	mov	r4, r3
 8013804:	2700      	movs	r7, #0
 8013806:	f04f 0800 	mov.w	r8, #0
 801380a:	f04f 0900 	mov.w	r9, #0
 801380e:	9b06      	ldr	r3, [sp, #24]
 8013810:	429f      	cmp	r7, r3
 8013812:	dd06      	ble.n	8013822 <__kernel_rem_pio2+0x3c2>
 8013814:	ab70      	add	r3, sp, #448	; 0x1c0
 8013816:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801381a:	e9c3 8900 	strd	r8, r9, [r3]
 801381e:	3501      	adds	r5, #1
 8013820:	e7de      	b.n	80137e0 <__kernel_rem_pio2+0x380>
 8013822:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013826:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801382a:	f7ec fe95 	bl	8000558 <__aeabi_dmul>
 801382e:	4602      	mov	r2, r0
 8013830:	460b      	mov	r3, r1
 8013832:	4640      	mov	r0, r8
 8013834:	4649      	mov	r1, r9
 8013836:	f7ec fcd9 	bl	80001ec <__adddf3>
 801383a:	3701      	adds	r7, #1
 801383c:	4680      	mov	r8, r0
 801383e:	4689      	mov	r9, r1
 8013840:	e7e5      	b.n	801380e <__kernel_rem_pio2+0x3ae>
 8013842:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013846:	e754      	b.n	80136f2 <__kernel_rem_pio2+0x292>
 8013848:	ec47 6b10 	vmov	d0, r6, r7
 801384c:	f1ca 0000 	rsb	r0, sl, #0
 8013850:	f000 fc3a 	bl	80140c8 <scalbn>
 8013854:	ec57 6b10 	vmov	r6, r7, d0
 8013858:	4b9f      	ldr	r3, [pc, #636]	; (8013ad8 <__kernel_rem_pio2+0x678>)
 801385a:	ee10 0a10 	vmov	r0, s0
 801385e:	2200      	movs	r2, #0
 8013860:	4639      	mov	r1, r7
 8013862:	f7ed f8ff 	bl	8000a64 <__aeabi_dcmpge>
 8013866:	b300      	cbz	r0, 80138aa <__kernel_rem_pio2+0x44a>
 8013868:	4b9c      	ldr	r3, [pc, #624]	; (8013adc <__kernel_rem_pio2+0x67c>)
 801386a:	2200      	movs	r2, #0
 801386c:	4630      	mov	r0, r6
 801386e:	4639      	mov	r1, r7
 8013870:	f7ec fe72 	bl	8000558 <__aeabi_dmul>
 8013874:	f7ed f920 	bl	8000ab8 <__aeabi_d2iz>
 8013878:	4605      	mov	r5, r0
 801387a:	f7ec fe03 	bl	8000484 <__aeabi_i2d>
 801387e:	4b96      	ldr	r3, [pc, #600]	; (8013ad8 <__kernel_rem_pio2+0x678>)
 8013880:	2200      	movs	r2, #0
 8013882:	f7ec fe69 	bl	8000558 <__aeabi_dmul>
 8013886:	460b      	mov	r3, r1
 8013888:	4602      	mov	r2, r0
 801388a:	4639      	mov	r1, r7
 801388c:	4630      	mov	r0, r6
 801388e:	f7ec fcab 	bl	80001e8 <__aeabi_dsub>
 8013892:	f7ed f911 	bl	8000ab8 <__aeabi_d2iz>
 8013896:	f104 0b01 	add.w	fp, r4, #1
 801389a:	ab0c      	add	r3, sp, #48	; 0x30
 801389c:	f10a 0a18 	add.w	sl, sl, #24
 80138a0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80138a4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80138a8:	e72b      	b.n	8013702 <__kernel_rem_pio2+0x2a2>
 80138aa:	4630      	mov	r0, r6
 80138ac:	4639      	mov	r1, r7
 80138ae:	f7ed f903 	bl	8000ab8 <__aeabi_d2iz>
 80138b2:	ab0c      	add	r3, sp, #48	; 0x30
 80138b4:	46a3      	mov	fp, r4
 80138b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80138ba:	e722      	b.n	8013702 <__kernel_rem_pio2+0x2a2>
 80138bc:	ab70      	add	r3, sp, #448	; 0x1c0
 80138be:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80138c2:	ab0c      	add	r3, sp, #48	; 0x30
 80138c4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80138c8:	f7ec fddc 	bl	8000484 <__aeabi_i2d>
 80138cc:	4622      	mov	r2, r4
 80138ce:	462b      	mov	r3, r5
 80138d0:	f7ec fe42 	bl	8000558 <__aeabi_dmul>
 80138d4:	4632      	mov	r2, r6
 80138d6:	e9c9 0100 	strd	r0, r1, [r9]
 80138da:	463b      	mov	r3, r7
 80138dc:	4620      	mov	r0, r4
 80138de:	4629      	mov	r1, r5
 80138e0:	f7ec fe3a 	bl	8000558 <__aeabi_dmul>
 80138e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80138e8:	4604      	mov	r4, r0
 80138ea:	460d      	mov	r5, r1
 80138ec:	e713      	b.n	8013716 <__kernel_rem_pio2+0x2b6>
 80138ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80138f2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80138f6:	f7ec fe2f 	bl	8000558 <__aeabi_dmul>
 80138fa:	4602      	mov	r2, r0
 80138fc:	460b      	mov	r3, r1
 80138fe:	4620      	mov	r0, r4
 8013900:	4629      	mov	r1, r5
 8013902:	f7ec fc73 	bl	80001ec <__adddf3>
 8013906:	3601      	adds	r6, #1
 8013908:	4604      	mov	r4, r0
 801390a:	460d      	mov	r5, r1
 801390c:	9b04      	ldr	r3, [sp, #16]
 801390e:	429e      	cmp	r6, r3
 8013910:	dc01      	bgt.n	8013916 <__kernel_rem_pio2+0x4b6>
 8013912:	45b0      	cmp	r8, r6
 8013914:	daeb      	bge.n	80138ee <__kernel_rem_pio2+0x48e>
 8013916:	ab48      	add	r3, sp, #288	; 0x120
 8013918:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801391c:	e9c3 4500 	strd	r4, r5, [r3]
 8013920:	3f01      	subs	r7, #1
 8013922:	f108 0801 	add.w	r8, r8, #1
 8013926:	e6ff      	b.n	8013728 <__kernel_rem_pio2+0x2c8>
 8013928:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801392a:	2b02      	cmp	r3, #2
 801392c:	dc0b      	bgt.n	8013946 <__kernel_rem_pio2+0x4e6>
 801392e:	2b00      	cmp	r3, #0
 8013930:	dc6e      	bgt.n	8013a10 <__kernel_rem_pio2+0x5b0>
 8013932:	d045      	beq.n	80139c0 <__kernel_rem_pio2+0x560>
 8013934:	9b07      	ldr	r3, [sp, #28]
 8013936:	f003 0007 	and.w	r0, r3, #7
 801393a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801393e:	ecbd 8b02 	vpop	{d8}
 8013942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013946:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013948:	2b03      	cmp	r3, #3
 801394a:	d1f3      	bne.n	8013934 <__kernel_rem_pio2+0x4d4>
 801394c:	ab48      	add	r3, sp, #288	; 0x120
 801394e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8013952:	46d0      	mov	r8, sl
 8013954:	46d9      	mov	r9, fp
 8013956:	f1b9 0f00 	cmp.w	r9, #0
 801395a:	f1a8 0808 	sub.w	r8, r8, #8
 801395e:	dc64      	bgt.n	8013a2a <__kernel_rem_pio2+0x5ca>
 8013960:	465c      	mov	r4, fp
 8013962:	2c01      	cmp	r4, #1
 8013964:	f1aa 0a08 	sub.w	sl, sl, #8
 8013968:	dc7e      	bgt.n	8013a68 <__kernel_rem_pio2+0x608>
 801396a:	2000      	movs	r0, #0
 801396c:	2100      	movs	r1, #0
 801396e:	f1bb 0f01 	cmp.w	fp, #1
 8013972:	f300 8097 	bgt.w	8013aa4 <__kernel_rem_pio2+0x644>
 8013976:	9b02      	ldr	r3, [sp, #8]
 8013978:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801397c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8013980:	2b00      	cmp	r3, #0
 8013982:	f040 8099 	bne.w	8013ab8 <__kernel_rem_pio2+0x658>
 8013986:	9b01      	ldr	r3, [sp, #4]
 8013988:	e9c3 5600 	strd	r5, r6, [r3]
 801398c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013990:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013994:	e7ce      	b.n	8013934 <__kernel_rem_pio2+0x4d4>
 8013996:	ab48      	add	r3, sp, #288	; 0x120
 8013998:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a0:	f7ec fc24 	bl	80001ec <__adddf3>
 80139a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80139a8:	f1bb 0f00 	cmp.w	fp, #0
 80139ac:	daf3      	bge.n	8013996 <__kernel_rem_pio2+0x536>
 80139ae:	9b02      	ldr	r3, [sp, #8]
 80139b0:	b113      	cbz	r3, 80139b8 <__kernel_rem_pio2+0x558>
 80139b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80139b6:	4619      	mov	r1, r3
 80139b8:	9b01      	ldr	r3, [sp, #4]
 80139ba:	e9c3 0100 	strd	r0, r1, [r3]
 80139be:	e7b9      	b.n	8013934 <__kernel_rem_pio2+0x4d4>
 80139c0:	2000      	movs	r0, #0
 80139c2:	2100      	movs	r1, #0
 80139c4:	e7f0      	b.n	80139a8 <__kernel_rem_pio2+0x548>
 80139c6:	ab48      	add	r3, sp, #288	; 0x120
 80139c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80139cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d0:	f7ec fc0c 	bl	80001ec <__adddf3>
 80139d4:	3c01      	subs	r4, #1
 80139d6:	2c00      	cmp	r4, #0
 80139d8:	daf5      	bge.n	80139c6 <__kernel_rem_pio2+0x566>
 80139da:	9b02      	ldr	r3, [sp, #8]
 80139dc:	b1e3      	cbz	r3, 8013a18 <__kernel_rem_pio2+0x5b8>
 80139de:	4602      	mov	r2, r0
 80139e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80139e4:	9c01      	ldr	r4, [sp, #4]
 80139e6:	e9c4 2300 	strd	r2, r3, [r4]
 80139ea:	4602      	mov	r2, r0
 80139ec:	460b      	mov	r3, r1
 80139ee:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80139f2:	f7ec fbf9 	bl	80001e8 <__aeabi_dsub>
 80139f6:	ad4a      	add	r5, sp, #296	; 0x128
 80139f8:	2401      	movs	r4, #1
 80139fa:	45a3      	cmp	fp, r4
 80139fc:	da0f      	bge.n	8013a1e <__kernel_rem_pio2+0x5be>
 80139fe:	9b02      	ldr	r3, [sp, #8]
 8013a00:	b113      	cbz	r3, 8013a08 <__kernel_rem_pio2+0x5a8>
 8013a02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a06:	4619      	mov	r1, r3
 8013a08:	9b01      	ldr	r3, [sp, #4]
 8013a0a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013a0e:	e791      	b.n	8013934 <__kernel_rem_pio2+0x4d4>
 8013a10:	465c      	mov	r4, fp
 8013a12:	2000      	movs	r0, #0
 8013a14:	2100      	movs	r1, #0
 8013a16:	e7de      	b.n	80139d6 <__kernel_rem_pio2+0x576>
 8013a18:	4602      	mov	r2, r0
 8013a1a:	460b      	mov	r3, r1
 8013a1c:	e7e2      	b.n	80139e4 <__kernel_rem_pio2+0x584>
 8013a1e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8013a22:	f7ec fbe3 	bl	80001ec <__adddf3>
 8013a26:	3401      	adds	r4, #1
 8013a28:	e7e7      	b.n	80139fa <__kernel_rem_pio2+0x59a>
 8013a2a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8013a2e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8013a32:	4620      	mov	r0, r4
 8013a34:	4632      	mov	r2, r6
 8013a36:	463b      	mov	r3, r7
 8013a38:	4629      	mov	r1, r5
 8013a3a:	f7ec fbd7 	bl	80001ec <__adddf3>
 8013a3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a42:	4602      	mov	r2, r0
 8013a44:	460b      	mov	r3, r1
 8013a46:	4620      	mov	r0, r4
 8013a48:	4629      	mov	r1, r5
 8013a4a:	f7ec fbcd 	bl	80001e8 <__aeabi_dsub>
 8013a4e:	4632      	mov	r2, r6
 8013a50:	463b      	mov	r3, r7
 8013a52:	f7ec fbcb 	bl	80001ec <__adddf3>
 8013a56:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013a5a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8013a5e:	ed88 7b00 	vstr	d7, [r8]
 8013a62:	f109 39ff 	add.w	r9, r9, #4294967295
 8013a66:	e776      	b.n	8013956 <__kernel_rem_pio2+0x4f6>
 8013a68:	e9da 8900 	ldrd	r8, r9, [sl]
 8013a6c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013a70:	4640      	mov	r0, r8
 8013a72:	4632      	mov	r2, r6
 8013a74:	463b      	mov	r3, r7
 8013a76:	4649      	mov	r1, r9
 8013a78:	f7ec fbb8 	bl	80001ec <__adddf3>
 8013a7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a80:	4602      	mov	r2, r0
 8013a82:	460b      	mov	r3, r1
 8013a84:	4640      	mov	r0, r8
 8013a86:	4649      	mov	r1, r9
 8013a88:	f7ec fbae 	bl	80001e8 <__aeabi_dsub>
 8013a8c:	4632      	mov	r2, r6
 8013a8e:	463b      	mov	r3, r7
 8013a90:	f7ec fbac 	bl	80001ec <__adddf3>
 8013a94:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013a98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013a9c:	ed8a 7b00 	vstr	d7, [sl]
 8013aa0:	3c01      	subs	r4, #1
 8013aa2:	e75e      	b.n	8013962 <__kernel_rem_pio2+0x502>
 8013aa4:	ab48      	add	r3, sp, #288	; 0x120
 8013aa6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aae:	f7ec fb9d 	bl	80001ec <__adddf3>
 8013ab2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013ab6:	e75a      	b.n	801396e <__kernel_rem_pio2+0x50e>
 8013ab8:	9b01      	ldr	r3, [sp, #4]
 8013aba:	9a01      	ldr	r2, [sp, #4]
 8013abc:	601d      	str	r5, [r3, #0]
 8013abe:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8013ac2:	605c      	str	r4, [r3, #4]
 8013ac4:	609f      	str	r7, [r3, #8]
 8013ac6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8013aca:	60d3      	str	r3, [r2, #12]
 8013acc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013ad0:	6110      	str	r0, [r2, #16]
 8013ad2:	6153      	str	r3, [r2, #20]
 8013ad4:	e72e      	b.n	8013934 <__kernel_rem_pio2+0x4d4>
 8013ad6:	bf00      	nop
 8013ad8:	41700000 	.word	0x41700000
 8013adc:	3e700000 	.word	0x3e700000

08013ae0 <__kernel_sin>:
 8013ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae4:	ed2d 8b04 	vpush	{d8-d9}
 8013ae8:	eeb0 8a41 	vmov.f32	s16, s2
 8013aec:	eef0 8a61 	vmov.f32	s17, s3
 8013af0:	ec55 4b10 	vmov	r4, r5, d0
 8013af4:	b083      	sub	sp, #12
 8013af6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013afa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013afe:	9001      	str	r0, [sp, #4]
 8013b00:	da06      	bge.n	8013b10 <__kernel_sin+0x30>
 8013b02:	ee10 0a10 	vmov	r0, s0
 8013b06:	4629      	mov	r1, r5
 8013b08:	f7ec ffd6 	bl	8000ab8 <__aeabi_d2iz>
 8013b0c:	2800      	cmp	r0, #0
 8013b0e:	d051      	beq.n	8013bb4 <__kernel_sin+0xd4>
 8013b10:	4622      	mov	r2, r4
 8013b12:	462b      	mov	r3, r5
 8013b14:	4620      	mov	r0, r4
 8013b16:	4629      	mov	r1, r5
 8013b18:	f7ec fd1e 	bl	8000558 <__aeabi_dmul>
 8013b1c:	4682      	mov	sl, r0
 8013b1e:	468b      	mov	fp, r1
 8013b20:	4602      	mov	r2, r0
 8013b22:	460b      	mov	r3, r1
 8013b24:	4620      	mov	r0, r4
 8013b26:	4629      	mov	r1, r5
 8013b28:	f7ec fd16 	bl	8000558 <__aeabi_dmul>
 8013b2c:	a341      	add	r3, pc, #260	; (adr r3, 8013c34 <__kernel_sin+0x154>)
 8013b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b32:	4680      	mov	r8, r0
 8013b34:	4689      	mov	r9, r1
 8013b36:	4650      	mov	r0, sl
 8013b38:	4659      	mov	r1, fp
 8013b3a:	f7ec fd0d 	bl	8000558 <__aeabi_dmul>
 8013b3e:	a33f      	add	r3, pc, #252	; (adr r3, 8013c3c <__kernel_sin+0x15c>)
 8013b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b44:	f7ec fb50 	bl	80001e8 <__aeabi_dsub>
 8013b48:	4652      	mov	r2, sl
 8013b4a:	465b      	mov	r3, fp
 8013b4c:	f7ec fd04 	bl	8000558 <__aeabi_dmul>
 8013b50:	a33c      	add	r3, pc, #240	; (adr r3, 8013c44 <__kernel_sin+0x164>)
 8013b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b56:	f7ec fb49 	bl	80001ec <__adddf3>
 8013b5a:	4652      	mov	r2, sl
 8013b5c:	465b      	mov	r3, fp
 8013b5e:	f7ec fcfb 	bl	8000558 <__aeabi_dmul>
 8013b62:	a33a      	add	r3, pc, #232	; (adr r3, 8013c4c <__kernel_sin+0x16c>)
 8013b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b68:	f7ec fb3e 	bl	80001e8 <__aeabi_dsub>
 8013b6c:	4652      	mov	r2, sl
 8013b6e:	465b      	mov	r3, fp
 8013b70:	f7ec fcf2 	bl	8000558 <__aeabi_dmul>
 8013b74:	a337      	add	r3, pc, #220	; (adr r3, 8013c54 <__kernel_sin+0x174>)
 8013b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b7a:	f7ec fb37 	bl	80001ec <__adddf3>
 8013b7e:	9b01      	ldr	r3, [sp, #4]
 8013b80:	4606      	mov	r6, r0
 8013b82:	460f      	mov	r7, r1
 8013b84:	b9eb      	cbnz	r3, 8013bc2 <__kernel_sin+0xe2>
 8013b86:	4602      	mov	r2, r0
 8013b88:	460b      	mov	r3, r1
 8013b8a:	4650      	mov	r0, sl
 8013b8c:	4659      	mov	r1, fp
 8013b8e:	f7ec fce3 	bl	8000558 <__aeabi_dmul>
 8013b92:	a325      	add	r3, pc, #148	; (adr r3, 8013c28 <__kernel_sin+0x148>)
 8013b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b98:	f7ec fb26 	bl	80001e8 <__aeabi_dsub>
 8013b9c:	4642      	mov	r2, r8
 8013b9e:	464b      	mov	r3, r9
 8013ba0:	f7ec fcda 	bl	8000558 <__aeabi_dmul>
 8013ba4:	4602      	mov	r2, r0
 8013ba6:	460b      	mov	r3, r1
 8013ba8:	4620      	mov	r0, r4
 8013baa:	4629      	mov	r1, r5
 8013bac:	f7ec fb1e 	bl	80001ec <__adddf3>
 8013bb0:	4604      	mov	r4, r0
 8013bb2:	460d      	mov	r5, r1
 8013bb4:	ec45 4b10 	vmov	d0, r4, r5
 8013bb8:	b003      	add	sp, #12
 8013bba:	ecbd 8b04 	vpop	{d8-d9}
 8013bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bc2:	4b1b      	ldr	r3, [pc, #108]	; (8013c30 <__kernel_sin+0x150>)
 8013bc4:	ec51 0b18 	vmov	r0, r1, d8
 8013bc8:	2200      	movs	r2, #0
 8013bca:	f7ec fcc5 	bl	8000558 <__aeabi_dmul>
 8013bce:	4632      	mov	r2, r6
 8013bd0:	ec41 0b19 	vmov	d9, r0, r1
 8013bd4:	463b      	mov	r3, r7
 8013bd6:	4640      	mov	r0, r8
 8013bd8:	4649      	mov	r1, r9
 8013bda:	f7ec fcbd 	bl	8000558 <__aeabi_dmul>
 8013bde:	4602      	mov	r2, r0
 8013be0:	460b      	mov	r3, r1
 8013be2:	ec51 0b19 	vmov	r0, r1, d9
 8013be6:	f7ec faff 	bl	80001e8 <__aeabi_dsub>
 8013bea:	4652      	mov	r2, sl
 8013bec:	465b      	mov	r3, fp
 8013bee:	f7ec fcb3 	bl	8000558 <__aeabi_dmul>
 8013bf2:	ec53 2b18 	vmov	r2, r3, d8
 8013bf6:	f7ec faf7 	bl	80001e8 <__aeabi_dsub>
 8013bfa:	a30b      	add	r3, pc, #44	; (adr r3, 8013c28 <__kernel_sin+0x148>)
 8013bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c00:	4606      	mov	r6, r0
 8013c02:	460f      	mov	r7, r1
 8013c04:	4640      	mov	r0, r8
 8013c06:	4649      	mov	r1, r9
 8013c08:	f7ec fca6 	bl	8000558 <__aeabi_dmul>
 8013c0c:	4602      	mov	r2, r0
 8013c0e:	460b      	mov	r3, r1
 8013c10:	4630      	mov	r0, r6
 8013c12:	4639      	mov	r1, r7
 8013c14:	f7ec faea 	bl	80001ec <__adddf3>
 8013c18:	4602      	mov	r2, r0
 8013c1a:	460b      	mov	r3, r1
 8013c1c:	4620      	mov	r0, r4
 8013c1e:	4629      	mov	r1, r5
 8013c20:	f7ec fae2 	bl	80001e8 <__aeabi_dsub>
 8013c24:	e7c4      	b.n	8013bb0 <__kernel_sin+0xd0>
 8013c26:	bf00      	nop
 8013c28:	55555549 	.word	0x55555549
 8013c2c:	3fc55555 	.word	0x3fc55555
 8013c30:	3fe00000 	.word	0x3fe00000
 8013c34:	5acfd57c 	.word	0x5acfd57c
 8013c38:	3de5d93a 	.word	0x3de5d93a
 8013c3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013c40:	3e5ae5e6 	.word	0x3e5ae5e6
 8013c44:	57b1fe7d 	.word	0x57b1fe7d
 8013c48:	3ec71de3 	.word	0x3ec71de3
 8013c4c:	19c161d5 	.word	0x19c161d5
 8013c50:	3f2a01a0 	.word	0x3f2a01a0
 8013c54:	1110f8a6 	.word	0x1110f8a6
 8013c58:	3f811111 	.word	0x3f811111
 8013c5c:	00000000 	.word	0x00000000

08013c60 <atan>:
 8013c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c64:	ec55 4b10 	vmov	r4, r5, d0
 8013c68:	4bc3      	ldr	r3, [pc, #780]	; (8013f78 <atan+0x318>)
 8013c6a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013c6e:	429e      	cmp	r6, r3
 8013c70:	46ab      	mov	fp, r5
 8013c72:	dd18      	ble.n	8013ca6 <atan+0x46>
 8013c74:	4bc1      	ldr	r3, [pc, #772]	; (8013f7c <atan+0x31c>)
 8013c76:	429e      	cmp	r6, r3
 8013c78:	dc01      	bgt.n	8013c7e <atan+0x1e>
 8013c7a:	d109      	bne.n	8013c90 <atan+0x30>
 8013c7c:	b144      	cbz	r4, 8013c90 <atan+0x30>
 8013c7e:	4622      	mov	r2, r4
 8013c80:	462b      	mov	r3, r5
 8013c82:	4620      	mov	r0, r4
 8013c84:	4629      	mov	r1, r5
 8013c86:	f7ec fab1 	bl	80001ec <__adddf3>
 8013c8a:	4604      	mov	r4, r0
 8013c8c:	460d      	mov	r5, r1
 8013c8e:	e006      	b.n	8013c9e <atan+0x3e>
 8013c90:	f1bb 0f00 	cmp.w	fp, #0
 8013c94:	f300 8131 	bgt.w	8013efa <atan+0x29a>
 8013c98:	a59b      	add	r5, pc, #620	; (adr r5, 8013f08 <atan+0x2a8>)
 8013c9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013c9e:	ec45 4b10 	vmov	d0, r4, r5
 8013ca2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ca6:	4bb6      	ldr	r3, [pc, #728]	; (8013f80 <atan+0x320>)
 8013ca8:	429e      	cmp	r6, r3
 8013caa:	dc14      	bgt.n	8013cd6 <atan+0x76>
 8013cac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8013cb0:	429e      	cmp	r6, r3
 8013cb2:	dc0d      	bgt.n	8013cd0 <atan+0x70>
 8013cb4:	a396      	add	r3, pc, #600	; (adr r3, 8013f10 <atan+0x2b0>)
 8013cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cba:	ee10 0a10 	vmov	r0, s0
 8013cbe:	4629      	mov	r1, r5
 8013cc0:	f7ec fa94 	bl	80001ec <__adddf3>
 8013cc4:	4baf      	ldr	r3, [pc, #700]	; (8013f84 <atan+0x324>)
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	f7ec fed6 	bl	8000a78 <__aeabi_dcmpgt>
 8013ccc:	2800      	cmp	r0, #0
 8013cce:	d1e6      	bne.n	8013c9e <atan+0x3e>
 8013cd0:	f04f 3aff 	mov.w	sl, #4294967295
 8013cd4:	e02b      	b.n	8013d2e <atan+0xce>
 8013cd6:	f000 f963 	bl	8013fa0 <fabs>
 8013cda:	4bab      	ldr	r3, [pc, #684]	; (8013f88 <atan+0x328>)
 8013cdc:	429e      	cmp	r6, r3
 8013cde:	ec55 4b10 	vmov	r4, r5, d0
 8013ce2:	f300 80bf 	bgt.w	8013e64 <atan+0x204>
 8013ce6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8013cea:	429e      	cmp	r6, r3
 8013cec:	f300 80a0 	bgt.w	8013e30 <atan+0x1d0>
 8013cf0:	ee10 2a10 	vmov	r2, s0
 8013cf4:	ee10 0a10 	vmov	r0, s0
 8013cf8:	462b      	mov	r3, r5
 8013cfa:	4629      	mov	r1, r5
 8013cfc:	f7ec fa76 	bl	80001ec <__adddf3>
 8013d00:	4ba0      	ldr	r3, [pc, #640]	; (8013f84 <atan+0x324>)
 8013d02:	2200      	movs	r2, #0
 8013d04:	f7ec fa70 	bl	80001e8 <__aeabi_dsub>
 8013d08:	2200      	movs	r2, #0
 8013d0a:	4606      	mov	r6, r0
 8013d0c:	460f      	mov	r7, r1
 8013d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013d12:	4620      	mov	r0, r4
 8013d14:	4629      	mov	r1, r5
 8013d16:	f7ec fa69 	bl	80001ec <__adddf3>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	460b      	mov	r3, r1
 8013d1e:	4630      	mov	r0, r6
 8013d20:	4639      	mov	r1, r7
 8013d22:	f7ec fd43 	bl	80007ac <__aeabi_ddiv>
 8013d26:	f04f 0a00 	mov.w	sl, #0
 8013d2a:	4604      	mov	r4, r0
 8013d2c:	460d      	mov	r5, r1
 8013d2e:	4622      	mov	r2, r4
 8013d30:	462b      	mov	r3, r5
 8013d32:	4620      	mov	r0, r4
 8013d34:	4629      	mov	r1, r5
 8013d36:	f7ec fc0f 	bl	8000558 <__aeabi_dmul>
 8013d3a:	4602      	mov	r2, r0
 8013d3c:	460b      	mov	r3, r1
 8013d3e:	4680      	mov	r8, r0
 8013d40:	4689      	mov	r9, r1
 8013d42:	f7ec fc09 	bl	8000558 <__aeabi_dmul>
 8013d46:	a374      	add	r3, pc, #464	; (adr r3, 8013f18 <atan+0x2b8>)
 8013d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d4c:	4606      	mov	r6, r0
 8013d4e:	460f      	mov	r7, r1
 8013d50:	f7ec fc02 	bl	8000558 <__aeabi_dmul>
 8013d54:	a372      	add	r3, pc, #456	; (adr r3, 8013f20 <atan+0x2c0>)
 8013d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d5a:	f7ec fa47 	bl	80001ec <__adddf3>
 8013d5e:	4632      	mov	r2, r6
 8013d60:	463b      	mov	r3, r7
 8013d62:	f7ec fbf9 	bl	8000558 <__aeabi_dmul>
 8013d66:	a370      	add	r3, pc, #448	; (adr r3, 8013f28 <atan+0x2c8>)
 8013d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d6c:	f7ec fa3e 	bl	80001ec <__adddf3>
 8013d70:	4632      	mov	r2, r6
 8013d72:	463b      	mov	r3, r7
 8013d74:	f7ec fbf0 	bl	8000558 <__aeabi_dmul>
 8013d78:	a36d      	add	r3, pc, #436	; (adr r3, 8013f30 <atan+0x2d0>)
 8013d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d7e:	f7ec fa35 	bl	80001ec <__adddf3>
 8013d82:	4632      	mov	r2, r6
 8013d84:	463b      	mov	r3, r7
 8013d86:	f7ec fbe7 	bl	8000558 <__aeabi_dmul>
 8013d8a:	a36b      	add	r3, pc, #428	; (adr r3, 8013f38 <atan+0x2d8>)
 8013d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d90:	f7ec fa2c 	bl	80001ec <__adddf3>
 8013d94:	4632      	mov	r2, r6
 8013d96:	463b      	mov	r3, r7
 8013d98:	f7ec fbde 	bl	8000558 <__aeabi_dmul>
 8013d9c:	a368      	add	r3, pc, #416	; (adr r3, 8013f40 <atan+0x2e0>)
 8013d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da2:	f7ec fa23 	bl	80001ec <__adddf3>
 8013da6:	4642      	mov	r2, r8
 8013da8:	464b      	mov	r3, r9
 8013daa:	f7ec fbd5 	bl	8000558 <__aeabi_dmul>
 8013dae:	a366      	add	r3, pc, #408	; (adr r3, 8013f48 <atan+0x2e8>)
 8013db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db4:	4680      	mov	r8, r0
 8013db6:	4689      	mov	r9, r1
 8013db8:	4630      	mov	r0, r6
 8013dba:	4639      	mov	r1, r7
 8013dbc:	f7ec fbcc 	bl	8000558 <__aeabi_dmul>
 8013dc0:	a363      	add	r3, pc, #396	; (adr r3, 8013f50 <atan+0x2f0>)
 8013dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc6:	f7ec fa0f 	bl	80001e8 <__aeabi_dsub>
 8013dca:	4632      	mov	r2, r6
 8013dcc:	463b      	mov	r3, r7
 8013dce:	f7ec fbc3 	bl	8000558 <__aeabi_dmul>
 8013dd2:	a361      	add	r3, pc, #388	; (adr r3, 8013f58 <atan+0x2f8>)
 8013dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd8:	f7ec fa06 	bl	80001e8 <__aeabi_dsub>
 8013ddc:	4632      	mov	r2, r6
 8013dde:	463b      	mov	r3, r7
 8013de0:	f7ec fbba 	bl	8000558 <__aeabi_dmul>
 8013de4:	a35e      	add	r3, pc, #376	; (adr r3, 8013f60 <atan+0x300>)
 8013de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dea:	f7ec f9fd 	bl	80001e8 <__aeabi_dsub>
 8013dee:	4632      	mov	r2, r6
 8013df0:	463b      	mov	r3, r7
 8013df2:	f7ec fbb1 	bl	8000558 <__aeabi_dmul>
 8013df6:	a35c      	add	r3, pc, #368	; (adr r3, 8013f68 <atan+0x308>)
 8013df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dfc:	f7ec f9f4 	bl	80001e8 <__aeabi_dsub>
 8013e00:	4632      	mov	r2, r6
 8013e02:	463b      	mov	r3, r7
 8013e04:	f7ec fba8 	bl	8000558 <__aeabi_dmul>
 8013e08:	4602      	mov	r2, r0
 8013e0a:	460b      	mov	r3, r1
 8013e0c:	4640      	mov	r0, r8
 8013e0e:	4649      	mov	r1, r9
 8013e10:	f7ec f9ec 	bl	80001ec <__adddf3>
 8013e14:	4622      	mov	r2, r4
 8013e16:	462b      	mov	r3, r5
 8013e18:	f7ec fb9e 	bl	8000558 <__aeabi_dmul>
 8013e1c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013e20:	4602      	mov	r2, r0
 8013e22:	460b      	mov	r3, r1
 8013e24:	d14b      	bne.n	8013ebe <atan+0x25e>
 8013e26:	4620      	mov	r0, r4
 8013e28:	4629      	mov	r1, r5
 8013e2a:	f7ec f9dd 	bl	80001e8 <__aeabi_dsub>
 8013e2e:	e72c      	b.n	8013c8a <atan+0x2a>
 8013e30:	ee10 0a10 	vmov	r0, s0
 8013e34:	4b53      	ldr	r3, [pc, #332]	; (8013f84 <atan+0x324>)
 8013e36:	2200      	movs	r2, #0
 8013e38:	4629      	mov	r1, r5
 8013e3a:	f7ec f9d5 	bl	80001e8 <__aeabi_dsub>
 8013e3e:	4b51      	ldr	r3, [pc, #324]	; (8013f84 <atan+0x324>)
 8013e40:	4606      	mov	r6, r0
 8013e42:	460f      	mov	r7, r1
 8013e44:	2200      	movs	r2, #0
 8013e46:	4620      	mov	r0, r4
 8013e48:	4629      	mov	r1, r5
 8013e4a:	f7ec f9cf 	bl	80001ec <__adddf3>
 8013e4e:	4602      	mov	r2, r0
 8013e50:	460b      	mov	r3, r1
 8013e52:	4630      	mov	r0, r6
 8013e54:	4639      	mov	r1, r7
 8013e56:	f7ec fca9 	bl	80007ac <__aeabi_ddiv>
 8013e5a:	f04f 0a01 	mov.w	sl, #1
 8013e5e:	4604      	mov	r4, r0
 8013e60:	460d      	mov	r5, r1
 8013e62:	e764      	b.n	8013d2e <atan+0xce>
 8013e64:	4b49      	ldr	r3, [pc, #292]	; (8013f8c <atan+0x32c>)
 8013e66:	429e      	cmp	r6, r3
 8013e68:	da1d      	bge.n	8013ea6 <atan+0x246>
 8013e6a:	ee10 0a10 	vmov	r0, s0
 8013e6e:	4b48      	ldr	r3, [pc, #288]	; (8013f90 <atan+0x330>)
 8013e70:	2200      	movs	r2, #0
 8013e72:	4629      	mov	r1, r5
 8013e74:	f7ec f9b8 	bl	80001e8 <__aeabi_dsub>
 8013e78:	4b45      	ldr	r3, [pc, #276]	; (8013f90 <atan+0x330>)
 8013e7a:	4606      	mov	r6, r0
 8013e7c:	460f      	mov	r7, r1
 8013e7e:	2200      	movs	r2, #0
 8013e80:	4620      	mov	r0, r4
 8013e82:	4629      	mov	r1, r5
 8013e84:	f7ec fb68 	bl	8000558 <__aeabi_dmul>
 8013e88:	4b3e      	ldr	r3, [pc, #248]	; (8013f84 <atan+0x324>)
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	f7ec f9ae 	bl	80001ec <__adddf3>
 8013e90:	4602      	mov	r2, r0
 8013e92:	460b      	mov	r3, r1
 8013e94:	4630      	mov	r0, r6
 8013e96:	4639      	mov	r1, r7
 8013e98:	f7ec fc88 	bl	80007ac <__aeabi_ddiv>
 8013e9c:	f04f 0a02 	mov.w	sl, #2
 8013ea0:	4604      	mov	r4, r0
 8013ea2:	460d      	mov	r5, r1
 8013ea4:	e743      	b.n	8013d2e <atan+0xce>
 8013ea6:	462b      	mov	r3, r5
 8013ea8:	ee10 2a10 	vmov	r2, s0
 8013eac:	4939      	ldr	r1, [pc, #228]	; (8013f94 <atan+0x334>)
 8013eae:	2000      	movs	r0, #0
 8013eb0:	f7ec fc7c 	bl	80007ac <__aeabi_ddiv>
 8013eb4:	f04f 0a03 	mov.w	sl, #3
 8013eb8:	4604      	mov	r4, r0
 8013eba:	460d      	mov	r5, r1
 8013ebc:	e737      	b.n	8013d2e <atan+0xce>
 8013ebe:	4b36      	ldr	r3, [pc, #216]	; (8013f98 <atan+0x338>)
 8013ec0:	4e36      	ldr	r6, [pc, #216]	; (8013f9c <atan+0x33c>)
 8013ec2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8013ec6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8013eca:	e9da 2300 	ldrd	r2, r3, [sl]
 8013ece:	f7ec f98b 	bl	80001e8 <__aeabi_dsub>
 8013ed2:	4622      	mov	r2, r4
 8013ed4:	462b      	mov	r3, r5
 8013ed6:	f7ec f987 	bl	80001e8 <__aeabi_dsub>
 8013eda:	4602      	mov	r2, r0
 8013edc:	460b      	mov	r3, r1
 8013ede:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013ee2:	f7ec f981 	bl	80001e8 <__aeabi_dsub>
 8013ee6:	f1bb 0f00 	cmp.w	fp, #0
 8013eea:	4604      	mov	r4, r0
 8013eec:	460d      	mov	r5, r1
 8013eee:	f6bf aed6 	bge.w	8013c9e <atan+0x3e>
 8013ef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013ef6:	461d      	mov	r5, r3
 8013ef8:	e6d1      	b.n	8013c9e <atan+0x3e>
 8013efa:	a51d      	add	r5, pc, #116	; (adr r5, 8013f70 <atan+0x310>)
 8013efc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013f00:	e6cd      	b.n	8013c9e <atan+0x3e>
 8013f02:	bf00      	nop
 8013f04:	f3af 8000 	nop.w
 8013f08:	54442d18 	.word	0x54442d18
 8013f0c:	bff921fb 	.word	0xbff921fb
 8013f10:	8800759c 	.word	0x8800759c
 8013f14:	7e37e43c 	.word	0x7e37e43c
 8013f18:	e322da11 	.word	0xe322da11
 8013f1c:	3f90ad3a 	.word	0x3f90ad3a
 8013f20:	24760deb 	.word	0x24760deb
 8013f24:	3fa97b4b 	.word	0x3fa97b4b
 8013f28:	a0d03d51 	.word	0xa0d03d51
 8013f2c:	3fb10d66 	.word	0x3fb10d66
 8013f30:	c54c206e 	.word	0xc54c206e
 8013f34:	3fb745cd 	.word	0x3fb745cd
 8013f38:	920083ff 	.word	0x920083ff
 8013f3c:	3fc24924 	.word	0x3fc24924
 8013f40:	5555550d 	.word	0x5555550d
 8013f44:	3fd55555 	.word	0x3fd55555
 8013f48:	2c6a6c2f 	.word	0x2c6a6c2f
 8013f4c:	bfa2b444 	.word	0xbfa2b444
 8013f50:	52defd9a 	.word	0x52defd9a
 8013f54:	3fadde2d 	.word	0x3fadde2d
 8013f58:	af749a6d 	.word	0xaf749a6d
 8013f5c:	3fb3b0f2 	.word	0x3fb3b0f2
 8013f60:	fe231671 	.word	0xfe231671
 8013f64:	3fbc71c6 	.word	0x3fbc71c6
 8013f68:	9998ebc4 	.word	0x9998ebc4
 8013f6c:	3fc99999 	.word	0x3fc99999
 8013f70:	54442d18 	.word	0x54442d18
 8013f74:	3ff921fb 	.word	0x3ff921fb
 8013f78:	440fffff 	.word	0x440fffff
 8013f7c:	7ff00000 	.word	0x7ff00000
 8013f80:	3fdbffff 	.word	0x3fdbffff
 8013f84:	3ff00000 	.word	0x3ff00000
 8013f88:	3ff2ffff 	.word	0x3ff2ffff
 8013f8c:	40038000 	.word	0x40038000
 8013f90:	3ff80000 	.word	0x3ff80000
 8013f94:	bff00000 	.word	0xbff00000
 8013f98:	08014578 	.word	0x08014578
 8013f9c:	08014558 	.word	0x08014558

08013fa0 <fabs>:
 8013fa0:	ec51 0b10 	vmov	r0, r1, d0
 8013fa4:	ee10 2a10 	vmov	r2, s0
 8013fa8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013fac:	ec43 2b10 	vmov	d0, r2, r3
 8013fb0:	4770      	bx	lr
 8013fb2:	0000      	movs	r0, r0
 8013fb4:	0000      	movs	r0, r0
	...

08013fb8 <floor>:
 8013fb8:	ec51 0b10 	vmov	r0, r1, d0
 8013fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fc0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013fc4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013fc8:	2e13      	cmp	r6, #19
 8013fca:	ee10 5a10 	vmov	r5, s0
 8013fce:	ee10 8a10 	vmov	r8, s0
 8013fd2:	460c      	mov	r4, r1
 8013fd4:	dc32      	bgt.n	801403c <floor+0x84>
 8013fd6:	2e00      	cmp	r6, #0
 8013fd8:	da14      	bge.n	8014004 <floor+0x4c>
 8013fda:	a333      	add	r3, pc, #204	; (adr r3, 80140a8 <floor+0xf0>)
 8013fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fe0:	f7ec f904 	bl	80001ec <__adddf3>
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	f7ec fd46 	bl	8000a78 <__aeabi_dcmpgt>
 8013fec:	b138      	cbz	r0, 8013ffe <floor+0x46>
 8013fee:	2c00      	cmp	r4, #0
 8013ff0:	da57      	bge.n	80140a2 <floor+0xea>
 8013ff2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013ff6:	431d      	orrs	r5, r3
 8013ff8:	d001      	beq.n	8013ffe <floor+0x46>
 8013ffa:	4c2d      	ldr	r4, [pc, #180]	; (80140b0 <floor+0xf8>)
 8013ffc:	2500      	movs	r5, #0
 8013ffe:	4621      	mov	r1, r4
 8014000:	4628      	mov	r0, r5
 8014002:	e025      	b.n	8014050 <floor+0x98>
 8014004:	4f2b      	ldr	r7, [pc, #172]	; (80140b4 <floor+0xfc>)
 8014006:	4137      	asrs	r7, r6
 8014008:	ea01 0307 	and.w	r3, r1, r7
 801400c:	4303      	orrs	r3, r0
 801400e:	d01f      	beq.n	8014050 <floor+0x98>
 8014010:	a325      	add	r3, pc, #148	; (adr r3, 80140a8 <floor+0xf0>)
 8014012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014016:	f7ec f8e9 	bl	80001ec <__adddf3>
 801401a:	2200      	movs	r2, #0
 801401c:	2300      	movs	r3, #0
 801401e:	f7ec fd2b 	bl	8000a78 <__aeabi_dcmpgt>
 8014022:	2800      	cmp	r0, #0
 8014024:	d0eb      	beq.n	8013ffe <floor+0x46>
 8014026:	2c00      	cmp	r4, #0
 8014028:	bfbe      	ittt	lt
 801402a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801402e:	fa43 f606 	asrlt.w	r6, r3, r6
 8014032:	19a4      	addlt	r4, r4, r6
 8014034:	ea24 0407 	bic.w	r4, r4, r7
 8014038:	2500      	movs	r5, #0
 801403a:	e7e0      	b.n	8013ffe <floor+0x46>
 801403c:	2e33      	cmp	r6, #51	; 0x33
 801403e:	dd0b      	ble.n	8014058 <floor+0xa0>
 8014040:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014044:	d104      	bne.n	8014050 <floor+0x98>
 8014046:	ee10 2a10 	vmov	r2, s0
 801404a:	460b      	mov	r3, r1
 801404c:	f7ec f8ce 	bl	80001ec <__adddf3>
 8014050:	ec41 0b10 	vmov	d0, r0, r1
 8014054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014058:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801405c:	f04f 33ff 	mov.w	r3, #4294967295
 8014060:	fa23 f707 	lsr.w	r7, r3, r7
 8014064:	4207      	tst	r7, r0
 8014066:	d0f3      	beq.n	8014050 <floor+0x98>
 8014068:	a30f      	add	r3, pc, #60	; (adr r3, 80140a8 <floor+0xf0>)
 801406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801406e:	f7ec f8bd 	bl	80001ec <__adddf3>
 8014072:	2200      	movs	r2, #0
 8014074:	2300      	movs	r3, #0
 8014076:	f7ec fcff 	bl	8000a78 <__aeabi_dcmpgt>
 801407a:	2800      	cmp	r0, #0
 801407c:	d0bf      	beq.n	8013ffe <floor+0x46>
 801407e:	2c00      	cmp	r4, #0
 8014080:	da02      	bge.n	8014088 <floor+0xd0>
 8014082:	2e14      	cmp	r6, #20
 8014084:	d103      	bne.n	801408e <floor+0xd6>
 8014086:	3401      	adds	r4, #1
 8014088:	ea25 0507 	bic.w	r5, r5, r7
 801408c:	e7b7      	b.n	8013ffe <floor+0x46>
 801408e:	2301      	movs	r3, #1
 8014090:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014094:	fa03 f606 	lsl.w	r6, r3, r6
 8014098:	4435      	add	r5, r6
 801409a:	4545      	cmp	r5, r8
 801409c:	bf38      	it	cc
 801409e:	18e4      	addcc	r4, r4, r3
 80140a0:	e7f2      	b.n	8014088 <floor+0xd0>
 80140a2:	2500      	movs	r5, #0
 80140a4:	462c      	mov	r4, r5
 80140a6:	e7aa      	b.n	8013ffe <floor+0x46>
 80140a8:	8800759c 	.word	0x8800759c
 80140ac:	7e37e43c 	.word	0x7e37e43c
 80140b0:	bff00000 	.word	0xbff00000
 80140b4:	000fffff 	.word	0x000fffff

080140b8 <nan>:
 80140b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80140c0 <nan+0x8>
 80140bc:	4770      	bx	lr
 80140be:	bf00      	nop
 80140c0:	00000000 	.word	0x00000000
 80140c4:	7ff80000 	.word	0x7ff80000

080140c8 <scalbn>:
 80140c8:	b570      	push	{r4, r5, r6, lr}
 80140ca:	ec55 4b10 	vmov	r4, r5, d0
 80140ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80140d2:	4606      	mov	r6, r0
 80140d4:	462b      	mov	r3, r5
 80140d6:	b99a      	cbnz	r2, 8014100 <scalbn+0x38>
 80140d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80140dc:	4323      	orrs	r3, r4
 80140de:	d036      	beq.n	801414e <scalbn+0x86>
 80140e0:	4b39      	ldr	r3, [pc, #228]	; (80141c8 <scalbn+0x100>)
 80140e2:	4629      	mov	r1, r5
 80140e4:	ee10 0a10 	vmov	r0, s0
 80140e8:	2200      	movs	r2, #0
 80140ea:	f7ec fa35 	bl	8000558 <__aeabi_dmul>
 80140ee:	4b37      	ldr	r3, [pc, #220]	; (80141cc <scalbn+0x104>)
 80140f0:	429e      	cmp	r6, r3
 80140f2:	4604      	mov	r4, r0
 80140f4:	460d      	mov	r5, r1
 80140f6:	da10      	bge.n	801411a <scalbn+0x52>
 80140f8:	a32b      	add	r3, pc, #172	; (adr r3, 80141a8 <scalbn+0xe0>)
 80140fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140fe:	e03a      	b.n	8014176 <scalbn+0xae>
 8014100:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014104:	428a      	cmp	r2, r1
 8014106:	d10c      	bne.n	8014122 <scalbn+0x5a>
 8014108:	ee10 2a10 	vmov	r2, s0
 801410c:	4620      	mov	r0, r4
 801410e:	4629      	mov	r1, r5
 8014110:	f7ec f86c 	bl	80001ec <__adddf3>
 8014114:	4604      	mov	r4, r0
 8014116:	460d      	mov	r5, r1
 8014118:	e019      	b.n	801414e <scalbn+0x86>
 801411a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801411e:	460b      	mov	r3, r1
 8014120:	3a36      	subs	r2, #54	; 0x36
 8014122:	4432      	add	r2, r6
 8014124:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014128:	428a      	cmp	r2, r1
 801412a:	dd08      	ble.n	801413e <scalbn+0x76>
 801412c:	2d00      	cmp	r5, #0
 801412e:	a120      	add	r1, pc, #128	; (adr r1, 80141b0 <scalbn+0xe8>)
 8014130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014134:	da1c      	bge.n	8014170 <scalbn+0xa8>
 8014136:	a120      	add	r1, pc, #128	; (adr r1, 80141b8 <scalbn+0xf0>)
 8014138:	e9d1 0100 	ldrd	r0, r1, [r1]
 801413c:	e018      	b.n	8014170 <scalbn+0xa8>
 801413e:	2a00      	cmp	r2, #0
 8014140:	dd08      	ble.n	8014154 <scalbn+0x8c>
 8014142:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014146:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801414a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801414e:	ec45 4b10 	vmov	d0, r4, r5
 8014152:	bd70      	pop	{r4, r5, r6, pc}
 8014154:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014158:	da19      	bge.n	801418e <scalbn+0xc6>
 801415a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801415e:	429e      	cmp	r6, r3
 8014160:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8014164:	dd0a      	ble.n	801417c <scalbn+0xb4>
 8014166:	a112      	add	r1, pc, #72	; (adr r1, 80141b0 <scalbn+0xe8>)
 8014168:	e9d1 0100 	ldrd	r0, r1, [r1]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d1e2      	bne.n	8014136 <scalbn+0x6e>
 8014170:	a30f      	add	r3, pc, #60	; (adr r3, 80141b0 <scalbn+0xe8>)
 8014172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014176:	f7ec f9ef 	bl	8000558 <__aeabi_dmul>
 801417a:	e7cb      	b.n	8014114 <scalbn+0x4c>
 801417c:	a10a      	add	r1, pc, #40	; (adr r1, 80141a8 <scalbn+0xe0>)
 801417e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d0b8      	beq.n	80140f8 <scalbn+0x30>
 8014186:	a10e      	add	r1, pc, #56	; (adr r1, 80141c0 <scalbn+0xf8>)
 8014188:	e9d1 0100 	ldrd	r0, r1, [r1]
 801418c:	e7b4      	b.n	80140f8 <scalbn+0x30>
 801418e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014192:	3236      	adds	r2, #54	; 0x36
 8014194:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014198:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801419c:	4620      	mov	r0, r4
 801419e:	4b0c      	ldr	r3, [pc, #48]	; (80141d0 <scalbn+0x108>)
 80141a0:	2200      	movs	r2, #0
 80141a2:	e7e8      	b.n	8014176 <scalbn+0xae>
 80141a4:	f3af 8000 	nop.w
 80141a8:	c2f8f359 	.word	0xc2f8f359
 80141ac:	01a56e1f 	.word	0x01a56e1f
 80141b0:	8800759c 	.word	0x8800759c
 80141b4:	7e37e43c 	.word	0x7e37e43c
 80141b8:	8800759c 	.word	0x8800759c
 80141bc:	fe37e43c 	.word	0xfe37e43c
 80141c0:	c2f8f359 	.word	0xc2f8f359
 80141c4:	81a56e1f 	.word	0x81a56e1f
 80141c8:	43500000 	.word	0x43500000
 80141cc:	ffff3cb0 	.word	0xffff3cb0
 80141d0:	3c900000 	.word	0x3c900000

080141d4 <_init>:
 80141d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141d6:	bf00      	nop
 80141d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141da:	bc08      	pop	{r3}
 80141dc:	469e      	mov	lr, r3
 80141de:	4770      	bx	lr

080141e0 <_fini>:
 80141e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141e2:	bf00      	nop
 80141e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141e6:	bc08      	pop	{r3}
 80141e8:	469e      	mov	lr, r3
 80141ea:	4770      	bx	lr
