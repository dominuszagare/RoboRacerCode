
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08012260  08012260  00022260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012588  08012588  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08012588  08012588  00022588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012590  08012590  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012590  08012590  00022590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012594  08012594  00022594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08012598  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015488  200001fc  08012794  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015684  08012794  00035684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f47f  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005aae  00000000  00000000  0005f6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc0  00000000  00000000  00065160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bb0  00000000  00000000  00066f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf2a  00000000  00000000  00068ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002820c  00000000  00000000  000859fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f08a  00000000  00000000  000adc06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014cc90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008248  00000000  00000000  0014cce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012244 	.word	0x08012244

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	08012244 	.word	0x08012244

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0ae      	sub	sp, #184	; 0xb8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8000eaa:	edc7 0a08 	vstr	s1, [r7, #32]
 8000eae:	ed87 1a07 	vstr	s2, [r7, #28]
 8000eb2:	edc7 1a06 	vstr	s3, [r7, #24]
 8000eb6:	ed87 2a05 	vstr	s4, [r7, #20]
 8000eba:	edc7 2a04 	vstr	s5, [r7, #16]
 8000ebe:	ed87 3a03 	vstr	s6, [r7, #12]
 8000ec2:	edc7 3a02 	vstr	s7, [r7, #8]
 8000ec6:	ed87 4a01 	vstr	s8, [r7, #4]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8000eca:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ece:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed6:	d11d      	bne.n	8000f14 <MadgwickAHRSupdate+0x74>
 8000ed8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000edc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee4:	d116      	bne.n	8000f14 <MadgwickAHRSupdate+0x74>
 8000ee6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef2:	d10f      	bne.n	8000f14 <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8000ef4:	edd7 2a04 	vldr	s5, [r7, #16]
 8000ef8:	ed97 2a05 	vldr	s4, [r7, #20]
 8000efc:	edd7 1a06 	vldr	s3, [r7, #24]
 8000f00:	ed97 1a07 	vldr	s2, [r7, #28]
 8000f04:	edd7 0a08 	vldr	s1, [r7, #32]
 8000f08:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000f0c:	f000 fede 	bl	8001ccc <MadgwickAHRSupdateIMU>
		return;
 8000f10:	f000 becc 	b.w	8001cac <MadgwickAHRSupdate+0xe0c>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000f14:	4be6      	ldr	r3, [pc, #920]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 8000f16:	edd3 7a00 	vldr	s15, [r3]
 8000f1a:	eeb1 7a67 	vneg.f32	s14, s15
 8000f1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f26:	4be3      	ldr	r3, [pc, #908]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8000f28:	edd3 6a00 	vldr	s13, [r3]
 8000f2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f38:	4bdf      	ldr	r3, [pc, #892]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 8000f3a:	edd3 6a00 	vldr	s13, [r3]
 8000f3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f52:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000f56:	4bd9      	ldr	r3, [pc, #868]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 8000f58:	ed93 7a00 	vldr	s14, [r3]
 8000f5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f64:	4bd3      	ldr	r3, [pc, #844]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8000f66:	edd3 6a00 	vldr	s13, [r3]
 8000f6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f76:	4bd0      	ldr	r3, [pc, #832]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 8000f78:	edd3 6a00 	vldr	s13, [r3]
 8000f7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f88:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f90:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8000f94:	4bc9      	ldr	r3, [pc, #804]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 8000f96:	ed93 7a00 	vldr	s14, [r3]
 8000f9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa2:	4bc3      	ldr	r3, [pc, #780]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 8000fa4:	edd3 6a00 	vldr	s13, [r3]
 8000fa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fb4:	4bc0      	ldr	r3, [pc, #768]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 8000fb6:	edd3 6a00 	vldr	s13, [r3]
 8000fba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fce:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8000fd2:	4bba      	ldr	r3, [pc, #744]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 8000fd4:	ed93 7a00 	vldr	s14, [r3]
 8000fd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe0:	4bb3      	ldr	r3, [pc, #716]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 8000fe2:	edd3 6a00 	vldr	s13, [r3]
 8000fe6:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ff2:	4bb0      	ldr	r3, [pc, #704]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8000ff4:	edd3 6a00 	vldr	s13, [r3]
 8000ff8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001000:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001004:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001008:	ee67 7a87 	vmul.f32	s15, s15, s14
 800100c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001010:	edd7 7a06 	vldr	s15, [r7, #24]
 8001014:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101c:	d10e      	bne.n	800103c <MadgwickAHRSupdate+0x19c>
 800101e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001022:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102a:	d107      	bne.n	800103c <MadgwickAHRSupdate+0x19c>
 800102c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001030:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001038:	f000 85ac 	beq.w	8001b94 <MadgwickAHRSupdate+0xcf4>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800103c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001040:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001044:	edd7 7a05 	vldr	s15, [r7, #20]
 8001048:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800104c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001050:	edd7 7a04 	vldr	s15, [r7, #16]
 8001054:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105c:	eeb0 0a67 	vmov.f32	s0, s15
 8001060:	f001 f958 	bl	8002314 <invSqrt>
 8001064:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 8001068:	ed97 7a06 	vldr	s14, [r7, #24]
 800106c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001074:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8001078:	ed97 7a05 	vldr	s14, [r7, #20]
 800107c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001084:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001088:	ed97 7a04 	vldr	s14, [r7, #16]
 800108c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001094:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001098:	edd7 7a03 	vldr	s15, [r7, #12]
 800109c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80010a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b8:	eeb0 0a67 	vmov.f32	s0, s15
 80010bc:	f001 f92a 	bl	8002314 <invSqrt>
 80010c0:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 80010c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80010c8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d0:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 80010d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80010d8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e0:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 80010e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80010e8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f0:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 80010f4:	4b71      	ldr	r3, [pc, #452]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
 80010fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001106:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 800110a:	4b6c      	ldr	r3, [pc, #432]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001114:	ed97 7a02 	vldr	s14, [r7, #8]
 8001118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800111c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001120:	4b66      	ldr	r3, [pc, #408]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800112a:	ed97 7a01 	vldr	s14, [r7, #4]
 800112e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001132:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 8001136:	4b5e      	ldr	r3, [pc, #376]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001140:	ed97 7a03 	vldr	s14, [r7, #12]
 8001144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001148:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 800114c:	4b5b      	ldr	r3, [pc, #364]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001156:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 800115a:	4b55      	ldr	r3, [pc, #340]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 800115c:	edd3 7a00 	vldr	s15, [r3]
 8001160:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001164:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 8001168:	4b52      	ldr	r3, [pc, #328]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001172:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 8001176:	4b50      	ldr	r3, [pc, #320]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001180:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8001184:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800118e:	4b49      	ldr	r3, [pc, #292]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001198:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 800119c:	4b45      	ldr	r3, [pc, #276]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011a6:	4b44      	ldr	r3, [pc, #272]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 80011b4:	4b41      	ldr	r3, [pc, #260]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 80011b6:	ed93 7a00 	vldr	s14, [r3]
 80011ba:	4b40      	ldr	r3, [pc, #256]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 80011c8:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 80011ca:	ed93 7a00 	vldr	s14, [r3]
 80011ce:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 80011dc:	4b37      	ldr	r3, [pc, #220]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ec:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <MadgwickAHRSupdate+0x41c>)
 80011f2:	ed93 7a00 	vldr	s14, [r3]
 80011f6:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 8001206:	ed93 7a00 	vldr	s14, [r3]
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001214:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001218:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 800121a:	ed93 7a00 	vldr	s14, [r3]
 800121e:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001228:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <MadgwickAHRSupdate+0x410>)
 800122e:	ed93 7a00 	vldr	s14, [r3]
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8001242:	ed93 7a00 	vldr	s14, [r3]
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001250:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 8001256:	ed93 7a00 	vldr	s14, [r3]
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001264:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 800126a:	ed93 7a00 	vldr	s14, [r3]
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001278:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800127c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001280:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001284:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MadgwickAHRSupdate+0x418>)
 800128a:	edd3 6a00 	vldr	s13, [r3]
 800128e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MadgwickAHRSupdate+0x414>)
 800129c:	edd3 6a00 	vldr	s13, [r3]
 80012a0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80012a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ac:	e008      	b.n	80012c0 <MadgwickAHRSupdate+0x420>
 80012ae:	bf00      	nop
 80012b0:	20000218 	.word	0x20000218
 80012b4:	2000021c 	.word	0x2000021c
 80012b8:	20000220 	.word	0x20000220
 80012bc:	20000004 	.word	0x20000004
 80012c0:	edd7 6a03 	vldr	s13, [r7, #12]
 80012c4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80012c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012d0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80012d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012dc:	4bf5      	ldr	r3, [pc, #980]	; (80016b4 <MadgwickAHRSupdate+0x814>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ea:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80012ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012f6:	4bf0      	ldr	r3, [pc, #960]	; (80016b8 <MadgwickAHRSupdate+0x818>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001300:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001304:	edd7 6a03 	vldr	s13, [r7, #12]
 8001308:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800130c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001310:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001314:	edd7 6a03 	vldr	s13, [r7, #12]
 8001318:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800131c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001324:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001328:	4be3      	ldr	r3, [pc, #908]	; (80016b8 <MadgwickAHRSupdate+0x818>)
 800132a:	ed93 7a00 	vldr	s14, [r3]
 800132e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001332:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001336:	edd7 6a02 	vldr	s13, [r7, #8]
 800133a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800133e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001342:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001346:	4bdd      	ldr	r3, [pc, #884]	; (80016bc <MadgwickAHRSupdate+0x81c>)
 8001348:	edd3 6a00 	vldr	s13, [r3]
 800134c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001354:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001358:	4bd6      	ldr	r3, [pc, #856]	; (80016b4 <MadgwickAHRSupdate+0x814>)
 800135a:	edd3 6a00 	vldr	s13, [r3]
 800135e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001366:	ee37 7a27 	vadd.f32	s14, s14, s15
 800136a:	edd7 6a02 	vldr	s13, [r7, #8]
 800136e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001376:	ee37 7a67 	vsub.f32	s14, s14, s15
 800137a:	edd7 6a02 	vldr	s13, [r7, #8]
 800137e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001386:	ee37 7a27 	vadd.f32	s14, s14, s15
 800138a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800138e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001392:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001396:	4bc8      	ldr	r3, [pc, #800]	; (80016b8 <MadgwickAHRSupdate+0x818>)
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013a4:	edd7 6a02 	vldr	s13, [r7, #8]
 80013a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 80013b8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80013bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013c0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80013c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013cc:	ee17 0a90 	vmov	r0, s15
 80013d0:	f7ff f86a 	bl	80004a8 <__aeabi_f2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	ec43 2b10 	vmov	d0, r2, r3
 80013dc:	f00f f9dc 	bl	8010798 <sqrt>
 80013e0:	ec53 2b10 	vmov	r2, r3, d0
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fb8e 	bl	8000b08 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80013f0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80013f4:	eeb1 7a67 	vneg.f32	s14, s15
 80013f8:	4bae      	ldr	r3, [pc, #696]	; (80016b4 <MadgwickAHRSupdate+0x814>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001402:	4bae      	ldr	r3, [pc, #696]	; (80016bc <MadgwickAHRSupdate+0x81c>)
 8001404:	edd3 6a00 	vldr	s13, [r3]
 8001408:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800140c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001414:	edd7 6a01 	vldr	s13, [r7, #4]
 8001418:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800141c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001420:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001424:	4ba4      	ldr	r3, [pc, #656]	; (80016b8 <MadgwickAHRSupdate+0x818>)
 8001426:	edd3 6a00 	vldr	s13, [r3]
 800142a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800142e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001436:	edd7 6a01 	vldr	s13, [r7, #4]
 800143a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800143e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001442:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001446:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800144a:	edd7 7a02 	vldr	s15, [r7, #8]
 800144e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001452:	4b99      	ldr	r3, [pc, #612]	; (80016b8 <MadgwickAHRSupdate+0x818>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001460:	edd7 6a01 	vldr	s13, [r7, #4]
 8001464:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001470:	edd7 6a01 	vldr	s13, [r7, #4]
 8001474:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800147c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001480:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001484:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001488:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800148c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 8001490:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001494:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001498:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800149c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80014a0:	eeb1 7a67 	vneg.f32	s14, s15
 80014a4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80014a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80014ac:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80014b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80014c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80014c8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80014cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80014d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014d8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80014dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e4:	4b73      	ldr	r3, [pc, #460]	; (80016b4 <MadgwickAHRSupdate+0x814>)
 80014e6:	edd3 6a00 	vldr	s13, [r3]
 80014ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014f2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80014f6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80014fa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80014fe:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001502:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001506:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800150a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800150e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001512:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001516:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800151a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800151e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001522:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001526:	edd7 7a03 	vldr	s15, [r7, #12]
 800152a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800152e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001532:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001536:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800153a:	eef1 6a67 	vneg.f32	s13, s15
 800153e:	4b5e      	ldr	r3, [pc, #376]	; (80016b8 <MadgwickAHRSupdate+0x818>)
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001548:	4b5c      	ldr	r3, [pc, #368]	; (80016bc <MadgwickAHRSupdate+0x81c>)
 800154a:	ed93 6a00 	vldr	s12, [r3]
 800154e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001552:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001556:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800155a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800155e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001562:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001566:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800156a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800156e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001572:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001576:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800157a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800157e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001582:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001586:	edd7 7a02 	vldr	s15, [r7, #8]
 800158a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800158e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001592:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <MadgwickAHRSupdate+0x814>)
 8001598:	edd3 6a00 	vldr	s13, [r3]
 800159c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015a4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80015a8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80015ac:	ee36 6a27 	vadd.f32	s12, s12, s15
 80015b0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015b4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015b8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80015bc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80015c0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80015c4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80015c8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80015cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80015d0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80015d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80015d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80015e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80015ec:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80015f0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015f4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80015f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001600:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001604:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001608:	ee27 7a27 	vmul.f32	s14, s14, s15
 800160c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001610:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001614:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001618:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800161c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001620:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001624:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <MadgwickAHRSupdate+0x81c>)
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800163a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800163e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001642:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001646:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800164a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800164e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001652:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001656:	ee36 6a67 	vsub.f32	s12, s12, s15
 800165a:	edd7 7a04 	vldr	s15, [r7, #16]
 800165e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001666:	ee37 7a67 	vsub.f32	s14, s14, s15
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <MadgwickAHRSupdate+0x818>)
 800166c:	edd3 6a00 	vldr	s13, [r3]
 8001670:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001674:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001678:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800167c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001680:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001684:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001688:	ee36 6a67 	vsub.f32	s12, s12, s15
 800168c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001690:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001694:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001698:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800169c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80016a0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016a4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80016a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80016ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b0:	e006      	b.n	80016c0 <MadgwickAHRSupdate+0x820>
 80016b2:	bf00      	nop
 80016b4:	2000021c 	.word	0x2000021c
 80016b8:	20000220 	.word	0x20000220
 80016bc:	20000218 	.word	0x20000218
 80016c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80016c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016cc:	4bf6      	ldr	r3, [pc, #984]	; (8001aa8 <MadgwickAHRSupdate+0xc08>)
 80016ce:	edd3 6a00 	vldr	s13, [r3]
 80016d2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016da:	4bf4      	ldr	r3, [pc, #976]	; (8001aac <MadgwickAHRSupdate+0xc0c>)
 80016dc:	ed93 6a00 	vldr	s12, [r3]
 80016e0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016ec:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80016f0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80016f4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80016f8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001700:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001704:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001708:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800170c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001710:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001714:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001718:	edd7 7a02 	vldr	s15, [r7, #8]
 800171c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001720:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001728:	4be1      	ldr	r3, [pc, #900]	; (8001ab0 <MadgwickAHRSupdate+0xc10>)
 800172a:	edd3 6a00 	vldr	s13, [r3]
 800172e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001732:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001736:	4bdf      	ldr	r3, [pc, #892]	; (8001ab4 <MadgwickAHRSupdate+0xc14>)
 8001738:	ed93 6a00 	vldr	s12, [r3]
 800173c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001740:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001744:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001748:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800174c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001750:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001754:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001758:	ee26 6a27 	vmul.f32	s12, s12, s15
 800175c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001760:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001764:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001768:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800176c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001770:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001774:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001778:	ee36 6a27 	vadd.f32	s12, s12, s15
 800177c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001780:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001790:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001794:	eeb1 7a67 	vneg.f32	s14, s15
 8001798:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800179c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80017a0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80017a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80017ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80017b8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80017bc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80017c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017cc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80017d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d8:	4bb3      	ldr	r3, [pc, #716]	; (8001aa8 <MadgwickAHRSupdate+0xc08>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80017e2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80017e6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017ee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80017f2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017f6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017fe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001802:	edd7 7a04 	vldr	s15, [r7, #16]
 8001806:	ee76 7a67 	vsub.f32	s15, s12, s15
 800180a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001812:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001816:	eef1 6a67 	vneg.f32	s13, s15
 800181a:	4ba3      	ldr	r3, [pc, #652]	; (8001aa8 <MadgwickAHRSupdate+0xc08>)
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001824:	4ba1      	ldr	r3, [pc, #644]	; (8001aac <MadgwickAHRSupdate+0xc0c>)
 8001826:	ed93 6a00 	vldr	s12, [r3]
 800182a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800182e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001832:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001836:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800183a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800183e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001842:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001846:	ee36 6a67 	vsub.f32	s12, s12, s15
 800184a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800184e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001852:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001856:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800185a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800185e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001862:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001866:	ee36 6a27 	vadd.f32	s12, s12, s15
 800186a:	edd7 7a03 	vldr	s15, [r7, #12]
 800186e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001876:	ee37 7a27 	vadd.f32	s14, s14, s15
 800187a:	4b8e      	ldr	r3, [pc, #568]	; (8001ab4 <MadgwickAHRSupdate+0xc14>)
 800187c:	edd3 6a00 	vldr	s13, [r3]
 8001880:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001884:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001888:	4b89      	ldr	r3, [pc, #548]	; (8001ab0 <MadgwickAHRSupdate+0xc10>)
 800188a:	ed93 6a00 	vldr	s12, [r3]
 800188e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001892:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001896:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800189a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800189e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80018a2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018a6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018aa:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018ae:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80018b2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80018b6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80018ba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018be:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018c2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ca:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018d6:	4b75      	ldr	r3, [pc, #468]	; (8001aac <MadgwickAHRSupdate+0xc0c>)
 80018d8:	edd3 6a00 	vldr	s13, [r3]
 80018dc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018e4:	4b70      	ldr	r3, [pc, #448]	; (8001aa8 <MadgwickAHRSupdate+0xc08>)
 80018e6:	ed93 6a00 	vldr	s12, [r3]
 80018ea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80018ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018f6:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80018fa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018fe:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001902:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001906:	ee26 6a27 	vmul.f32	s12, s12, s15
 800190a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800190e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001912:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001916:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800191a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800191e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001922:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001926:	ee36 6a27 	vadd.f32	s12, s12, s15
 800192a:	edd7 7a01 	vldr	s15, [r7, #4]
 800192e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800193e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001942:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001946:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800194a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800194e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001952:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001956:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800195a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800195e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001962:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001966:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800196a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800196e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001972:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001976:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800197a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001982:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001986:	eef1 6a67 	vneg.f32	s13, s15
 800198a:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <MadgwickAHRSupdate+0xc10>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001994:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <MadgwickAHRSupdate+0xc14>)
 8001996:	ed93 6a00 	vldr	s12, [r3]
 800199a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800199e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019a6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80019aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019ae:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019b2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80019b6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019ba:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019be:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019c2:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80019c6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80019ca:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019d2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019d6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019da:	edd7 7a03 	vldr	s15, [r7, #12]
 80019de:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019ee:	eef1 6a67 	vneg.f32	s13, s15
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <MadgwickAHRSupdate+0xc0c>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <MadgwickAHRSupdate+0xc08>)
 80019fe:	ed93 6a00 	vldr	s12, [r3]
 8001a02:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a06:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a0a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a0e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001a12:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001a16:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a1a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a1e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a22:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001a26:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001a2a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001a2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a32:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a36:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a3e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <MadgwickAHRSupdate+0xc14>)
 8001a4c:	edd3 6a00 	vldr	s13, [r3]
 8001a50:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a58:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001a5c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a60:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a64:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a68:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a6c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001a70:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a74:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a78:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a7c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a80:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a84:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a88:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a90:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001aa0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001aa4:	e008      	b.n	8001ab8 <MadgwickAHRSupdate+0xc18>
 8001aa6:	bf00      	nop
 8001aa8:	2000021c 	.word	0x2000021c
 8001aac:	20000004 	.word	0x20000004
 8001ab0:	20000220 	.word	0x20000220
 8001ab4:	20000218 	.word	0x20000218
 8001ab8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001abc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ac0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001acc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ad8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae4:	f000 fc16 	bl	8002314 <invSqrt>
 8001ae8:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001aec:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001af0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001afc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001b00:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b08:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001b0c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001b10:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b18:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001b1c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001b20:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b28:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001b2c:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <MadgwickAHRSupdate+0xe14>)
 8001b2e:	ed93 7a00 	vldr	s14, [r3]
 8001b32:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b42:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001b46:	4b5b      	ldr	r3, [pc, #364]	; (8001cb4 <MadgwickAHRSupdate+0xe14>)
 8001b48:	ed93 7a00 	vldr	s14, [r3]
 8001b4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b54:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001b60:	4b54      	ldr	r3, [pc, #336]	; (8001cb4 <MadgwickAHRSupdate+0xe14>)
 8001b62:	ed93 7a00 	vldr	s14, [r3]
 8001b66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b76:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001b7a:	4b4e      	ldr	r3, [pc, #312]	; (8001cb4 <MadgwickAHRSupdate+0xe14>)
 8001b7c:	ed93 7a00 	vldr	s14, [r3]
 8001b80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b88:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b90:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001b94:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001b98:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001cb8 <MadgwickAHRSupdate+0xe18>
 8001b9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ba0:	4b46      	ldr	r3, [pc, #280]	; (8001cbc <MadgwickAHRSupdate+0xe1c>)
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001baa:	4b44      	ldr	r3, [pc, #272]	; (8001cbc <MadgwickAHRSupdate+0xe1c>)
 8001bac:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001bb0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001bb4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001cb8 <MadgwickAHRSupdate+0xe18>
 8001bb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bbc:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <MadgwickAHRSupdate+0xe20>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <MadgwickAHRSupdate+0xe20>)
 8001bc8:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001bcc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001bd0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001cb8 <MadgwickAHRSupdate+0xe18>
 8001bd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <MadgwickAHRSupdate+0xe24>)
 8001bda:	edd3 7a00 	vldr	s15, [r3]
 8001bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be2:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <MadgwickAHRSupdate+0xe24>)
 8001be4:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001be8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001bec:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001cb8 <MadgwickAHRSupdate+0xe18>
 8001bf0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <MadgwickAHRSupdate+0xe28>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfe:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <MadgwickAHRSupdate+0xe28>)
 8001c00:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <MadgwickAHRSupdate+0xe1c>)
 8001c06:	ed93 7a00 	vldr	s14, [r3]
 8001c0a:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <MadgwickAHRSupdate+0xe1c>)
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <MadgwickAHRSupdate+0xe20>)
 8001c16:	edd3 6a00 	vldr	s13, [r3]
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <MadgwickAHRSupdate+0xe20>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c28:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <MadgwickAHRSupdate+0xe24>)
 8001c2a:	edd3 6a00 	vldr	s13, [r3]
 8001c2e:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <MadgwickAHRSupdate+0xe24>)
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c3c:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <MadgwickAHRSupdate+0xe28>)
 8001c3e:	edd3 6a00 	vldr	s13, [r3]
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <MadgwickAHRSupdate+0xe28>)
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c50:	eeb0 0a67 	vmov.f32	s0, s15
 8001c54:	f000 fb5e 	bl	8002314 <invSqrt>
 8001c58:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <MadgwickAHRSupdate+0xe1c>)
 8001c5e:	ed93 7a00 	vldr	s14, [r3]
 8001c62:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <MadgwickAHRSupdate+0xe1c>)
 8001c6c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001c70:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <MadgwickAHRSupdate+0xe20>)
 8001c72:	ed93 7a00 	vldr	s14, [r3]
 8001c76:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <MadgwickAHRSupdate+0xe20>)
 8001c80:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MadgwickAHRSupdate+0xe24>)
 8001c86:	ed93 7a00 	vldr	s14, [r3]
 8001c8a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MadgwickAHRSupdate+0xe24>)
 8001c94:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <MadgwickAHRSupdate+0xe28>)
 8001c9a:	ed93 7a00 	vldr	s14, [r3]
 8001c9e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <MadgwickAHRSupdate+0xe28>)
 8001ca8:	edc3 7a00 	vstr	s15, [r3]
}
 8001cac:	37b8      	adds	r7, #184	; 0xb8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	3ba3d70a 	.word	0x3ba3d70a
 8001cbc:	20000004 	.word	0x20000004
 8001cc0:	20000218 	.word	0x20000218
 8001cc4:	2000021c 	.word	0x2000021c
 8001cc8:	20000220 	.word	0x20000220

08001ccc <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b09c      	sub	sp, #112	; 0x70
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	ed87 0a05 	vstr	s0, [r7, #20]
 8001cd6:	edc7 0a04 	vstr	s1, [r7, #16]
 8001cda:	ed87 1a03 	vstr	s2, [r7, #12]
 8001cde:	edc7 1a02 	vstr	s3, [r7, #8]
 8001ce2:	ed87 2a01 	vstr	s4, [r7, #4]
 8001ce6:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001cea:	4bee      	ldr	r3, [pc, #952]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	eeb1 7a67 	vneg.f32	s14, s15
 8001cf4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cfc:	4bea      	ldr	r3, [pc, #936]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001cfe:	edd3 6a00 	vldr	s13, [r3]
 8001d02:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d0e:	4be7      	ldr	r3, [pc, #924]	; (80020ac <MadgwickAHRSupdateIMU+0x3e0>)
 8001d10:	edd3 6a00 	vldr	s13, [r3]
 8001d14:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d20:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d28:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001d2c:	4be0      	ldr	r3, [pc, #896]	; (80020b0 <MadgwickAHRSupdateIMU+0x3e4>)
 8001d2e:	ed93 7a00 	vldr	s14, [r3]
 8001d32:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d3a:	4bdb      	ldr	r3, [pc, #876]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001d3c:	edd3 6a00 	vldr	s13, [r3]
 8001d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d4c:	4bd7      	ldr	r3, [pc, #860]	; (80020ac <MadgwickAHRSupdateIMU+0x3e0>)
 8001d4e:	edd3 6a00 	vldr	s13, [r3]
 8001d52:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d66:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001d6a:	4bd1      	ldr	r3, [pc, #836]	; (80020b0 <MadgwickAHRSupdateIMU+0x3e4>)
 8001d6c:	ed93 7a00 	vldr	s14, [r3]
 8001d70:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d78:	4bca      	ldr	r3, [pc, #808]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001d7a:	edd3 6a00 	vldr	s13, [r3]
 8001d7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d8a:	4bc8      	ldr	r3, [pc, #800]	; (80020ac <MadgwickAHRSupdateIMU+0x3e0>)
 8001d8c:	edd3 6a00 	vldr	s13, [r3]
 8001d90:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001da8:	4bc1      	ldr	r3, [pc, #772]	; (80020b0 <MadgwickAHRSupdateIMU+0x3e4>)
 8001daa:	ed93 7a00 	vldr	s14, [r3]
 8001dae:	edd7 7a03 	vldr	s15, [r7, #12]
 8001db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db6:	4bbb      	ldr	r3, [pc, #748]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001db8:	edd3 6a00 	vldr	s13, [r3]
 8001dbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc8:	4bb7      	ldr	r3, [pc, #732]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001dca:	edd3 6a00 	vldr	s13, [r3]
 8001dce:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001de6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df2:	d10e      	bne.n	8001e12 <MadgwickAHRSupdateIMU+0x146>
 8001df4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001df8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e00:	d107      	bne.n	8001e12 <MadgwickAHRSupdateIMU+0x146>
 8001e02:	edd7 7a00 	vldr	s15, [r7]
 8001e06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	f000 81e5 	beq.w	80021dc <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e16:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e26:	edd7 7a00 	vldr	s15, [r7]
 8001e2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e32:	eeb0 0a67 	vmov.f32	s0, s15
 8001e36:	f000 fa6d 	bl	8002314 <invSqrt>
 8001e3a:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8001e3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e42:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4a:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8001e4e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e52:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5a:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 8001e5e:	ed97 7a00 	vldr	s14, [r7]
 8001e62:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6a:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001e6e:	4b90      	ldr	r3, [pc, #576]	; (80020b0 <MadgwickAHRSupdateIMU+0x3e4>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e78:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8001e7c:	4b89      	ldr	r3, [pc, #548]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e86:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 8001e8a:	4b87      	ldr	r3, [pc, #540]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e94:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8001e98:	4b84      	ldr	r3, [pc, #528]	; (80020ac <MadgwickAHRSupdateIMU+0x3e0>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ea2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 8001ea6:	4b82      	ldr	r3, [pc, #520]	; (80020b0 <MadgwickAHRSupdateIMU+0x3e4>)
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001eb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8001eb8:	4b7a      	ldr	r3, [pc, #488]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8001eca:	4b77      	ldr	r3, [pc, #476]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8001edc:	4b71      	ldr	r3, [pc, #452]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8001eee:	4b6e      	ldr	r3, [pc, #440]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001ef0:	edd3 7a00 	vldr	s15, [r3]
 8001ef4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001ef8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001efc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8001f00:	4b6b      	ldr	r3, [pc, #428]	; (80020b0 <MadgwickAHRSupdateIMU+0x3e4>)
 8001f02:	ed93 7a00 	vldr	s14, [r3]
 8001f06:	4b6a      	ldr	r3, [pc, #424]	; (80020b0 <MadgwickAHRSupdateIMU+0x3e4>)
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f10:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8001f14:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001f16:	ed93 7a00 	vldr	s14, [r3]
 8001f1a:	4b62      	ldr	r3, [pc, #392]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f24:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8001f28:	4b5f      	ldr	r3, [pc, #380]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001f2a:	ed93 7a00 	vldr	s14, [r3]
 8001f2e:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f38:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8001f3c:	4b5b      	ldr	r3, [pc, #364]	; (80020ac <MadgwickAHRSupdateIMU+0x3e0>)
 8001f3e:	ed93 7a00 	vldr	s14, [r3]
 8001f42:	4b5a      	ldr	r3, [pc, #360]	; (80020ac <MadgwickAHRSupdateIMU+0x3e0>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8001f50:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001f54:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f5c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001f60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f6c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001f70:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f7c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001f80:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001f90:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001f94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f9c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001fa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fb0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001fb4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <MadgwickAHRSupdateIMU+0x3d8>)
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fc6:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fd6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fde:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001fe2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fee:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001ff2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ff6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ffa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ffe:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002002:	edd7 7a00 	vldr	s15, [r7]
 8002006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200e:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002012:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002016:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800201a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800201e:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <MadgwickAHRSupdateIMU+0x3dc>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002028:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800202c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002034:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002038:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800203c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002048:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800204c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002054:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002058:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800205c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002060:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002064:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800206c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002070:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002074:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800207c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002080:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002084:	edd7 7a00 	vldr	s15, [r7]
 8002088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800208c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002090:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002094:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002098:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800209c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020a0:	e008      	b.n	80020b4 <MadgwickAHRSupdateIMU+0x3e8>
 80020a2:	bf00      	nop
 80020a4:	20000218 	.word	0x20000218
 80020a8:	2000021c 	.word	0x2000021c
 80020ac:	20000220 	.word	0x20000220
 80020b0:	20000004 	.word	0x20000004
 80020b4:	4b91      	ldr	r3, [pc, #580]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 80020b6:	edd3 7a00 	vldr	s15, [r3]
 80020ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020be:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80020c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80020c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80020d2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80020d6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80020da:	4b88      	ldr	r3, [pc, #544]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020e8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80020ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f8:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80020fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002100:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002104:	edd7 7a08 	vldr	s15, [r7, #32]
 8002108:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800210c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002110:	edd7 7a07 	vldr	s15, [r7, #28]
 8002114:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002118:	ee37 7a27 	vadd.f32	s14, s14, s15
 800211c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002120:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002128:	eeb0 0a67 	vmov.f32	s0, s15
 800212c:	f000 f8f2 	bl	8002314 <invSqrt>
 8002130:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8002134:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002138:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800213c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002140:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8002144:	ed97 7a08 	vldr	s14, [r7, #32]
 8002148:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800214c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002150:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8002154:	ed97 7a07 	vldr	s14, [r7, #28]
 8002158:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800215c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002160:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8002164:	ed97 7a06 	vldr	s14, [r7, #24]
 8002168:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800216c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002170:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002174:	4b62      	ldr	r3, [pc, #392]	; (8002300 <MadgwickAHRSupdateIMU+0x634>)
 8002176:	ed93 7a00 	vldr	s14, [r3]
 800217a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800218a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 800218e:	4b5c      	ldr	r3, [pc, #368]	; (8002300 <MadgwickAHRSupdateIMU+0x634>)
 8002190:	ed93 7a00 	vldr	s14, [r3]
 8002194:	edd7 7a08 	vldr	s15, [r7, #32]
 8002198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80021a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 80021a8:	4b55      	ldr	r3, [pc, #340]	; (8002300 <MadgwickAHRSupdateIMU+0x634>)
 80021aa:	ed93 7a00 	vldr	s14, [r3]
 80021ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80021b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b6:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80021ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021be:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 80021c2:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <MadgwickAHRSupdateIMU+0x634>)
 80021c4:	ed93 7a00 	vldr	s14, [r3]
 80021c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80021cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80021d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80021dc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80021e0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002304 <MadgwickAHRSupdateIMU+0x638>
 80021e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021e8:	4b47      	ldr	r3, [pc, #284]	; (8002308 <MadgwickAHRSupdateIMU+0x63c>)
 80021ea:	edd3 7a00 	vldr	s15, [r3]
 80021ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f2:	4b45      	ldr	r3, [pc, #276]	; (8002308 <MadgwickAHRSupdateIMU+0x63c>)
 80021f4:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80021f8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80021fc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002304 <MadgwickAHRSupdateIMU+0x638>
 8002200:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002204:	4b41      	ldr	r3, [pc, #260]	; (800230c <MadgwickAHRSupdateIMU+0x640>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220e:	4b3f      	ldr	r3, [pc, #252]	; (800230c <MadgwickAHRSupdateIMU+0x640>)
 8002210:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002214:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002218:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002304 <MadgwickAHRSupdateIMU+0x638>
 800221c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002220:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <MadgwickAHRSupdateIMU+0x644>)
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222a:	4b39      	ldr	r3, [pc, #228]	; (8002310 <MadgwickAHRSupdateIMU+0x644>)
 800222c:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002230:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002234:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002304 <MadgwickAHRSupdateIMU+0x638>
 8002238:	ee27 7a87 	vmul.f32	s14, s15, s14
 800223c:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 800223e:	edd3 7a00 	vldr	s15, [r3]
 8002242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002246:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 8002248:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800224c:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <MadgwickAHRSupdateIMU+0x63c>)
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <MadgwickAHRSupdateIMU+0x63c>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <MadgwickAHRSupdateIMU+0x640>)
 800225e:	edd3 6a00 	vldr	s13, [r3]
 8002262:	4b2a      	ldr	r3, [pc, #168]	; (800230c <MadgwickAHRSupdateIMU+0x640>)
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800226c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <MadgwickAHRSupdateIMU+0x644>)
 8002272:	edd3 6a00 	vldr	s13, [r3]
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <MadgwickAHRSupdateIMU+0x644>)
 8002278:	edd3 7a00 	vldr	s15, [r3]
 800227c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002280:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 8002286:	edd3 6a00 	vldr	s13, [r3]
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002298:	eeb0 0a67 	vmov.f32	s0, s15
 800229c:	f000 f83a 	bl	8002314 <invSqrt>
 80022a0:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 80022a4:	4b18      	ldr	r3, [pc, #96]	; (8002308 <MadgwickAHRSupdateIMU+0x63c>)
 80022a6:	ed93 7a00 	vldr	s14, [r3]
 80022aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <MadgwickAHRSupdateIMU+0x63c>)
 80022b4:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <MadgwickAHRSupdateIMU+0x640>)
 80022ba:	ed93 7a00 	vldr	s14, [r3]
 80022be:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <MadgwickAHRSupdateIMU+0x640>)
 80022c8:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80022cc:	4b10      	ldr	r3, [pc, #64]	; (8002310 <MadgwickAHRSupdateIMU+0x644>)
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <MadgwickAHRSupdateIMU+0x644>)
 80022dc:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ee:	4b03      	ldr	r3, [pc, #12]	; (80022fc <MadgwickAHRSupdateIMU+0x630>)
 80022f0:	edc3 7a00 	vstr	s15, [r3]
}
 80022f4:	bf00      	nop
 80022f6:	3770      	adds	r7, #112	; 0x70
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000220 	.word	0x20000220
 8002300:	20000000 	.word	0x20000000
 8002304:	3ba3d70a 	.word	0x3ba3d70a
 8002308:	20000004 	.word	0x20000004
 800230c:	20000218 	.word	0x20000218
 8002310:	2000021c 	.word	0x2000021c

08002314 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800231e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002322:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002326:	ee67 7a87 	vmul.f32	s15, s15, s14
 800232a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002332:	f107 0310 	add.w	r3, r7, #16
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	105a      	asrs	r2, r3, #1
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <invSqrt+0x74>)
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002344:	f107 030c 	add.w	r3, r7, #12
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800234c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002350:	edd7 7a05 	vldr	s15, [r7, #20]
 8002354:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002358:	edd7 7a04 	vldr	s15, [r7, #16]
 800235c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002360:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002364:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002368:	edd7 7a04 	vldr	s15, [r7, #16]
 800236c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002370:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	ee07 3a90 	vmov	s15, r3
}
 800237a:	eeb0 0a67 	vmov.f32	s0, s15
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	5f3759df 	.word	0x5f3759df

0800238c <nRF24_CE_H>:

static inline void nRF24_CE_L() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
}

static inline void nRF24_CE_H() {
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8002390:	2201      	movs	r2, #1
 8002392:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002396:	4802      	ldr	r0, [pc, #8]	; (80023a0 <nRF24_CE_H+0x14>)
 8002398:	f003 fe1a 	bl	8005fd0 <HAL_GPIO_WritePin>
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40020c00 	.word	0x40020c00

080023a4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	80fb      	strh	r3, [r7, #6]
	//kateri pin je poklical EXIT event
	if(GPIO_Pin == GPIO_PIN_14){
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023b4:	d103      	bne.n	80023be <HAL_GPIO_EXTI_Callback+0x1a>
		nRF24_dataReady = 1; //spremenil se je status register pejt pogledat kaj se je zgodilo
 80023b6:	4b44      	ldr	r3, [pc, #272]	; (80024c8 <HAL_GPIO_EXTI_Callback+0x124>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
		//data ready megnetometer
		i2c1_beriRegistre(0x1e, 0x68,(uint8_t*)&Mag, 6);
		MagReady = 1; //100Hz
	}

}
 80023bc:	e07f      	b.n	80024be <HAL_GPIO_EXTI_Callback+0x11a>
	else if(GPIO_Pin == GPIO_PIN_15){
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023c4:	d112      	bne.n	80023ec <HAL_GPIO_EXTI_Callback+0x48>
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){motorLF.poz--;}
 80023c6:	2104      	movs	r1, #4
 80023c8:	4840      	ldr	r0, [pc, #256]	; (80024cc <HAL_GPIO_EXTI_Callback+0x128>)
 80023ca:	f003 fde9 	bl	8005fa0 <HAL_GPIO_ReadPin>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_GPIO_EXTI_Callback+0x3c>
 80023d4:	4b3e      	ldr	r3, [pc, #248]	; (80024d0 <HAL_GPIO_EXTI_Callback+0x12c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	3b01      	subs	r3, #1
 80023da:	4a3d      	ldr	r2, [pc, #244]	; (80024d0 <HAL_GPIO_EXTI_Callback+0x12c>)
 80023dc:	6013      	str	r3, [r2, #0]
}
 80023de:	e06e      	b.n	80024be <HAL_GPIO_EXTI_Callback+0x11a>
		else{motorLF.poz++;}
 80023e0:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_GPIO_EXTI_Callback+0x12c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3301      	adds	r3, #1
 80023e6:	4a3a      	ldr	r2, [pc, #232]	; (80024d0 <HAL_GPIO_EXTI_Callback+0x12c>)
 80023e8:	6013      	str	r3, [r2, #0]
}
 80023ea:	e068      	b.n	80024be <HAL_GPIO_EXTI_Callback+0x11a>
	else if(GPIO_Pin == GPIO_PIN_7){
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	2b80      	cmp	r3, #128	; 0x80
 80023f0:	d112      	bne.n	8002418 <HAL_GPIO_EXTI_Callback+0x74>
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_5)){motorRF.poz--;}
 80023f2:	2120      	movs	r1, #32
 80023f4:	4835      	ldr	r0, [pc, #212]	; (80024cc <HAL_GPIO_EXTI_Callback+0x128>)
 80023f6:	f003 fdd3 	bl	8005fa0 <HAL_GPIO_ReadPin>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_GPIO_EXTI_Callback+0x68>
 8002400:	4b34      	ldr	r3, [pc, #208]	; (80024d4 <HAL_GPIO_EXTI_Callback+0x130>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3b01      	subs	r3, #1
 8002406:	4a33      	ldr	r2, [pc, #204]	; (80024d4 <HAL_GPIO_EXTI_Callback+0x130>)
 8002408:	6013      	str	r3, [r2, #0]
}
 800240a:	e058      	b.n	80024be <HAL_GPIO_EXTI_Callback+0x11a>
		else{motorRF.poz++;}
 800240c:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <HAL_GPIO_EXTI_Callback+0x130>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a30      	ldr	r2, [pc, #192]	; (80024d4 <HAL_GPIO_EXTI_Callback+0x130>)
 8002414:	6013      	str	r3, [r2, #0]
}
 8002416:	e052      	b.n	80024be <HAL_GPIO_EXTI_Callback+0x11a>
	else if(GPIO_Pin == GPIO_PIN_3){
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	2b08      	cmp	r3, #8
 800241c:	d113      	bne.n	8002446 <HAL_GPIO_EXTI_Callback+0xa2>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11)){motorRB.poz--;}
 800241e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002422:	482d      	ldr	r0, [pc, #180]	; (80024d8 <HAL_GPIO_EXTI_Callback+0x134>)
 8002424:	f003 fdbc 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_GPIO_EXTI_Callback+0x96>
 800242e:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_GPIO_EXTI_Callback+0x138>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3b01      	subs	r3, #1
 8002434:	4a29      	ldr	r2, [pc, #164]	; (80024dc <HAL_GPIO_EXTI_Callback+0x138>)
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	e041      	b.n	80024be <HAL_GPIO_EXTI_Callback+0x11a>
		else{motorRB.poz++;}
 800243a:	4b28      	ldr	r3, [pc, #160]	; (80024dc <HAL_GPIO_EXTI_Callback+0x138>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	4a26      	ldr	r2, [pc, #152]	; (80024dc <HAL_GPIO_EXTI_Callback+0x138>)
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	e03b      	b.n	80024be <HAL_GPIO_EXTI_Callback+0x11a>
	else if(GPIO_Pin == GPIO_PIN_8){
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800244c:	d112      	bne.n	8002474 <HAL_GPIO_EXTI_Callback+0xd0>
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_6)){motorLB.poz--;}
 800244e:	2140      	movs	r1, #64	; 0x40
 8002450:	481e      	ldr	r0, [pc, #120]	; (80024cc <HAL_GPIO_EXTI_Callback+0x128>)
 8002452:	f003 fda5 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_GPIO_EXTI_Callback+0xc4>
 800245c:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x13c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	3b01      	subs	r3, #1
 8002462:	4a1f      	ldr	r2, [pc, #124]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002464:	6013      	str	r3, [r2, #0]
}
 8002466:	e02a      	b.n	80024be <HAL_GPIO_EXTI_Callback+0x11a>
		else{motorLB.poz++;}
 8002468:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x13c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3301      	adds	r3, #1
 800246e:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002470:	6013      	str	r3, [r2, #0]
}
 8002472:	e024      	b.n	80024be <HAL_GPIO_EXTI_Callback+0x11a>
	else if(GPIO_Pin == GPIO_PIN_1){ //vsakic ko dobis interupt posodobi podatke
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d108      	bne.n	800248c <HAL_GPIO_EXTI_Callback+0xe8>
		spi1_beriRegistre(0x28, (uint8_t*)&Gyro, 6);
 800247a:	2206      	movs	r2, #6
 800247c:	4919      	ldr	r1, [pc, #100]	; (80024e4 <HAL_GPIO_EXTI_Callback+0x140>)
 800247e:	2028      	movs	r0, #40	; 0x28
 8002480:	f001 fa78 	bl	8003974 <spi1_beriRegistre>
		GyroReady = 1; //zastavica da so na voljo novi podatki 200Hz
 8002484:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <HAL_GPIO_EXTI_Callback+0x144>)
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
}
 800248a:	e018      	b.n	80024be <HAL_GPIO_EXTI_Callback+0x11a>
	else if(GPIO_Pin == GPIO_PIN_4){
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	2b10      	cmp	r3, #16
 8002490:	d109      	bne.n	80024a6 <HAL_GPIO_EXTI_Callback+0x102>
		i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&Acc, 6);
 8002492:	2306      	movs	r3, #6
 8002494:	4a15      	ldr	r2, [pc, #84]	; (80024ec <HAL_GPIO_EXTI_Callback+0x148>)
 8002496:	2128      	movs	r1, #40	; 0x28
 8002498:	2019      	movs	r0, #25
 800249a:	f001 f9d3 	bl	8003844 <i2c1_beriRegistre>
		AccReady = 1; //200Hz
 800249e:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <HAL_GPIO_EXTI_Callback+0x14c>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
}
 80024a4:	e00b      	b.n	80024be <HAL_GPIO_EXTI_Callback+0x11a>
	else if(GPIO_Pin == GPIO_PIN_2){
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d108      	bne.n	80024be <HAL_GPIO_EXTI_Callback+0x11a>
		i2c1_beriRegistre(0x1e, 0x68,(uint8_t*)&Mag, 6);
 80024ac:	2306      	movs	r3, #6
 80024ae:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x150>)
 80024b0:	2168      	movs	r1, #104	; 0x68
 80024b2:	201e      	movs	r0, #30
 80024b4:	f001 f9c6 	bl	8003844 <i2c1_beriRegistre>
		MagReady = 1; //100Hz
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_GPIO_EXTI_Callback+0x154>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000224 	.word	0x20000224
 80024cc:	40020c00 	.word	0x40020c00
 80024d0:	20013870 	.word	0x20013870
 80024d4:	20013ca0 	.word	0x20013ca0
 80024d8:	40020800 	.word	0x40020800
 80024dc:	20013bb4 	.word	0x20013bb4
 80024e0:	200136b4 	.word	0x200136b4
 80024e4:	20013aac 	.word	0x20013aac
 80024e8:	20000226 	.word	0x20000226
 80024ec:	20013a14 	.word	0x20013a14
 80024f0:	20000227 	.word	0x20000227
 80024f4:	20013700 	.word	0x20013700
 80024f8:	20000228 	.word	0x20000228

080024fc <nRF24SetChip>:
	//	//HAL_SPI_Transmit(&hspi5, (uint8_t*)&P, 28, 100);
	//}
}


void nRF24SetChip(){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	nRF24_Init();
 8002500:	f000 ff09 	bl	8003316 <nRF24_Init>

	nRF24_DisableAA(0xFF);
 8002504:	20ff      	movs	r0, #255	; 0xff
 8002506:	f001 f8bb 	bl	8003680 <nRF24_DisableAA>
	nRF24_SetRFChannel(115);
 800250a:	2073      	movs	r0, #115	; 0x73
 800250c:	f000 ffdf 	bl	80034ce <nRF24_SetRFChannel>
	nRF24_SetDataRate(nRF24_DR_1Mbps);
 8002510:	2000      	movs	r0, #0
 8002512:	f001 f845 	bl	80035a0 <nRF24_SetDataRate>
	nRF24_SetCRCScheme(nRF24_CRC_off);
 8002516:	2000      	movs	r0, #0
 8002518:	f000 ffb8 	bl	800348c <nRF24_SetCRCScheme>
	nRF24_SetAddrWidth(3);
 800251c:	2003      	movs	r0, #3
 800251e:	f000 ffe4 	bl	80034ea <nRF24_SetAddrWidth>

	static const uint8_t nRF24_ADDR[] = { 0xE7, 0x1C, 0xE3 };
	nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for RX pipe #1
 8002522:	490b      	ldr	r1, [pc, #44]	; (8002550 <nRF24SetChip+0x54>)
 8002524:	2001      	movs	r0, #1
 8002526:	f000 fff1 	bl	800350c <nRF24_SetAddr>
	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, payload_length); // Auto-ACK: disabled, payload length: 5 bytes
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <nRF24SetChip+0x58>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	2100      	movs	r1, #0
 8002534:	2001      	movs	r0, #1
 8002536:	f001 f84f 	bl	80035d8 <nRF24_SetRXPipe>
	nRF24_SetOperationalMode(nRF24_MODE_RX);
 800253a:	2001      	movs	r0, #1
 800253c:	f000 ff85 	bl	800344a <nRF24_SetOperationalMode>
	nRF24_SetPowerMode(nRF24_PWR_UP);
 8002540:	2002      	movs	r0, #2
 8002542:	f000 ff63 	bl	800340c <nRF24_SetPowerMode>
	nRF24_CE_H();
 8002546:	f7ff ff21 	bl	800238c <nRF24_CE_H>
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	08012304 	.word	0x08012304
 8002554:	20000008 	.word	0x20000008

08002558 <inicilizirajCipe>:

void inicilizirajCipe(){
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	__HAL_I2C_ENABLE(&hi2c1); //omogocimo I2C1 za komunikacijo z vgrajenimi cipi
 800255c:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <inicilizirajCipe+0x80>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <inicilizirajCipe+0x80>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi1); //komunikacija gyro
 800256c:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <inicilizirajCipe+0x84>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <inicilizirajCipe+0x84>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800257a:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi2); //komunikacija z nRF24
 800257c:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <inicilizirajCipe+0x88>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <inicilizirajCipe+0x88>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800258a:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi5); //rasbery pi
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <inicilizirajCipe+0x8c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <inicilizirajCipe+0x8c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800259a:	601a      	str	r2, [r3, #0]
	HAL_Delay(50);
 800259c:	2032      	movs	r0, #50	; 0x32
 800259e:	f002 ff8b 	bl	80054b8 <HAL_Delay>
	nRF24SetChip();
 80025a2:	f7ff ffab 	bl	80024fc <nRF24SetChip>
	nastaviPospeskometer();
 80025a6:	f001 fa11 	bl	80039cc <nastaviPospeskometer>
	nastaviMagnetometer();
 80025aa:	f001 fa36 	bl	8003a1a <nastaviMagnetometer>
	nastaviGiroskop();
 80025ae:	f001 fa4c 	bl	8003a4a <nastaviGiroskop>
	//prvic preberi podatke da se generirajo interupti
	spi1_beriRegistre(0x28, (uint8_t*)&Gyro, 6);
 80025b2:	2206      	movs	r2, #6
 80025b4:	490c      	ldr	r1, [pc, #48]	; (80025e8 <inicilizirajCipe+0x90>)
 80025b6:	2028      	movs	r0, #40	; 0x28
 80025b8:	f001 f9dc 	bl	8003974 <spi1_beriRegistre>
	i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&Acc, 6);
 80025bc:	2306      	movs	r3, #6
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <inicilizirajCipe+0x94>)
 80025c0:	2128      	movs	r1, #40	; 0x28
 80025c2:	2019      	movs	r0, #25
 80025c4:	f001 f93e 	bl	8003844 <i2c1_beriRegistre>
	i2c1_beriRegistre(0x1e, 0x68,(uint8_t*)&Mag, 6);
 80025c8:	2306      	movs	r3, #6
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <inicilizirajCipe+0x98>)
 80025cc:	2168      	movs	r1, #104	; 0x68
 80025ce:	201e      	movs	r0, #30
 80025d0:	f001 f938 	bl	8003844 <i2c1_beriRegistre>
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20013484 	.word	0x20013484
 80025dc:	200139bc 	.word	0x200139bc
 80025e0:	20013240 	.word	0x20013240
 80025e4:	2001332c 	.word	0x2001332c
 80025e8:	20013aac 	.word	0x20013aac
 80025ec:	20013a14 	.word	0x20013a14
 80025f0:	20013700 	.word	0x20013700

080025f4 <getDrift>:



void getDrift(){
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80025fa:	2201      	movs	r2, #1
 80025fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002600:	4845      	ldr	r0, [pc, #276]	; (8002718 <getDrift+0x124>)
 8002602:	f003 fce5 	bl	8005fd0 <HAL_GPIO_WritePin>
	int32_t sumGyrox = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
	int32_t sumGyroy = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
	int32_t sumGyroz = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
	int32_t sumAccx = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
	int32_t sumAccy = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
	int32_t sumAccz = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
	for(int i=0; i < 400; i++){
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	e02f      	b.n	8002684 <getDrift+0x90>
		sumGyrox += Gyro.x;
 8002624:	4b3d      	ldr	r3, [pc, #244]	; (800271c <getDrift+0x128>)
 8002626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262a:	461a      	mov	r2, r3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	61fb      	str	r3, [r7, #28]
		sumGyroy += Gyro.y;
 8002632:	4b3a      	ldr	r3, [pc, #232]	; (800271c <getDrift+0x128>)
 8002634:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002638:	461a      	mov	r2, r3
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4413      	add	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
		sumGyroz += Gyro.z;
 8002640:	4b36      	ldr	r3, [pc, #216]	; (800271c <getDrift+0x128>)
 8002642:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002646:	461a      	mov	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	4413      	add	r3, r2
 800264c:	617b      	str	r3, [r7, #20]
		sumAccx += Acc.x;
 800264e:	4b34      	ldr	r3, [pc, #208]	; (8002720 <getDrift+0x12c>)
 8002650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002654:	461a      	mov	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
		sumAccy += Acc.y;
 800265c:	4b30      	ldr	r3, [pc, #192]	; (8002720 <getDrift+0x12c>)
 800265e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4413      	add	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
		sumAccz += Acc.z;
 800266a:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <getDrift+0x12c>)
 800266c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002670:	461a      	mov	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	4413      	add	r3, r2
 8002676:	60bb      	str	r3, [r7, #8]
		HAL_Delay(6);
 8002678:	2006      	movs	r0, #6
 800267a:	f002 ff1d 	bl	80054b8 <HAL_Delay>
	for(int i=0; i < 400; i++){
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3301      	adds	r3, #1
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800268a:	dbcb      	blt.n	8002624 <getDrift+0x30>
	}
	E.Accx = sumAccx/400; //vektor gravitacije
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4a25      	ldr	r2, [pc, #148]	; (8002724 <getDrift+0x130>)
 8002690:	fb82 1203 	smull	r1, r2, r2, r3
 8002694:	11d2      	asrs	r2, r2, #7
 8002696:	17db      	asrs	r3, r3, #31
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	b21a      	sxth	r2, r3
 800269c:	4b22      	ldr	r3, [pc, #136]	; (8002728 <getDrift+0x134>)
 800269e:	841a      	strh	r2, [r3, #32]
	E.Accy = sumAccy/400;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a20      	ldr	r2, [pc, #128]	; (8002724 <getDrift+0x130>)
 80026a4:	fb82 1203 	smull	r1, r2, r2, r3
 80026a8:	11d2      	asrs	r2, r2, #7
 80026aa:	17db      	asrs	r3, r3, #31
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	b21a      	sxth	r2, r3
 80026b0:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <getDrift+0x134>)
 80026b2:	845a      	strh	r2, [r3, #34]	; 0x22
	E.Accz = sumAccz/400;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <getDrift+0x130>)
 80026b8:	fb82 1203 	smull	r1, r2, r2, r3
 80026bc:	11d2      	asrs	r2, r2, #7
 80026be:	17db      	asrs	r3, r3, #31
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	b21a      	sxth	r2, r3
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <getDrift+0x134>)
 80026c6:	849a      	strh	r2, [r3, #36]	; 0x24
	E.Gyrox = sumGyrox/400;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <getDrift+0x130>)
 80026cc:	fb82 1203 	smull	r1, r2, r2, r3
 80026d0:	11d2      	asrs	r2, r2, #7
 80026d2:	17db      	asrs	r3, r3, #31
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	b21a      	sxth	r2, r3
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <getDrift+0x134>)
 80026da:	801a      	strh	r2, [r3, #0]
	E.Gyroy = sumGyroy/400;
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	4a11      	ldr	r2, [pc, #68]	; (8002724 <getDrift+0x130>)
 80026e0:	fb82 1203 	smull	r1, r2, r2, r3
 80026e4:	11d2      	asrs	r2, r2, #7
 80026e6:	17db      	asrs	r3, r3, #31
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	b21a      	sxth	r2, r3
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <getDrift+0x134>)
 80026ee:	805a      	strh	r2, [r3, #2]
	E.Gyroz = sumGyroz/400;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <getDrift+0x130>)
 80026f4:	fb82 1203 	smull	r1, r2, r2, r3
 80026f8:	11d2      	asrs	r2, r2, #7
 80026fa:	17db      	asrs	r3, r3, #31
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	b21a      	sxth	r2, r3
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <getDrift+0x134>)
 8002702:	809a      	strh	r2, [r3, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8002704:	2200      	movs	r2, #0
 8002706:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800270a:	4803      	ldr	r0, [pc, #12]	; (8002718 <getDrift+0x124>)
 800270c:	f003 fc60 	bl	8005fd0 <HAL_GPIO_WritePin>
}
 8002710:	bf00      	nop
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40020c00 	.word	0x40020c00
 800271c:	20013aac 	.word	0x20013aac
 8002720:	20013a14 	.word	0x20013a14
 8002724:	51eb851f 	.word	0x51eb851f
 8002728:	20013a24 	.word	0x20013a24

0800272c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002732:	f002 fe7f 	bl	8005434 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002736:	f000 f905 	bl	8002944 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800273a:	f000 fb61 	bl	8002e00 <MX_GPIO_Init>
  MX_DMA_Init();
 800273e:	f000 fb37 	bl	8002db0 <MX_DMA_Init>
  MX_I2C1_Init();
 8002742:	f000 f967 	bl	8002a14 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002746:	f000 f993 	bl	8002a70 <MX_SPI1_Init>
  MX_TIM2_Init();
 800274a:	f000 fa2f 	bl	8002bac <MX_TIM2_Init>
  MX_SPI2_Init();
 800274e:	f000 f9c5 	bl	8002adc <MX_SPI2_Init>
  MX_TIM3_Init();
 8002752:	f000 fab7 	bl	8002cc4 <MX_TIM3_Init>
  MX_SPI5_Init();
 8002756:	f000 f9f7 	bl	8002b48 <MX_SPI5_Init>
  MX_USB_DEVICE_Init();
 800275a:	f00d f9dd 	bl	800fb18 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 800275e:	4864      	ldr	r0, [pc, #400]	; (80028f0 <main+0x1c4>)
 8002760:	f007 f848 	bl	80097f4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8002764:	4863      	ldr	r0, [pc, #396]	; (80028f4 <main+0x1c8>)
 8002766:	f007 f845 	bl	80097f4 <HAL_TIM_Base_Start>
  // zazenemo PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800276a:	210c      	movs	r1, #12
 800276c:	4861      	ldr	r0, [pc, #388]	; (80028f4 <main+0x1c8>)
 800276e:	f007 f957 	bl	8009a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002772:	2104      	movs	r1, #4
 8002774:	485e      	ldr	r0, [pc, #376]	; (80028f0 <main+0x1c4>)
 8002776:	f007 f953 	bl	8009a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800277a:	2108      	movs	r1, #8
 800277c:	485c      	ldr	r0, [pc, #368]	; (80028f0 <main+0x1c4>)
 800277e:	f007 f94f 	bl	8009a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002782:	210c      	movs	r1, #12
 8002784:	485a      	ldr	r0, [pc, #360]	; (80028f0 <main+0x1c4>)
 8002786:	f007 f94b 	bl	8009a20 <HAL_TIM_PWM_Start>

  HAL_Delay(100);
 800278a:	2064      	movs	r0, #100	; 0x64
 800278c:	f002 fe94 	bl	80054b8 <HAL_Delay>

  inicilizirajCipe();
 8002790:	f7ff fee2 	bl	8002558 <inicilizirajCipe>
  nRF24_status = nRF24_Check();
 8002794:	f000 fe0c 	bl	80033b0 <nRF24_Check>
 8002798:	4603      	mov	r3, r0
 800279a:	461a      	mov	r2, r3
 800279c:	4b56      	ldr	r3, [pc, #344]	; (80028f8 <main+0x1cc>)
 800279e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,nRF24_status); //ce dela prizgi ledico
 80027a0:	4b55      	ldr	r3, [pc, #340]	; (80028f8 <main+0x1cc>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ac:	4853      	ldr	r0, [pc, #332]	; (80028fc <main+0x1d0>)
 80027ae:	f003 fc0f 	bl	8005fd0 <HAL_GPIO_WritePin>

	B1.flags = 0;
 80027b2:	4b53      	ldr	r3, [pc, #332]	; (8002900 <main+0x1d4>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
	B1.presedConf = 0;
 80027b8:	4b51      	ldr	r3, [pc, #324]	; (8002900 <main+0x1d4>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	605a      	str	r2, [r3, #4]
	B1.relesedConf = 0;
 80027be:	4b50      	ldr	r3, [pc, #320]	; (8002900 <main+0x1d4>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
	B1.port = GPIOA;
 80027c4:	4b4e      	ldr	r3, [pc, #312]	; (8002900 <main+0x1d4>)
 80027c6:	4a4f      	ldr	r2, [pc, #316]	; (8002904 <main+0x1d8>)
 80027c8:	60da      	str	r2, [r3, #12]
	B1.pin = GPIO_PIN_0;
 80027ca:	4b4d      	ldr	r3, [pc, #308]	; (8002900 <main+0x1d4>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	821a      	strh	r2, [r3, #16]
	B1.debaunceCycles = 10;
 80027d0:	4b4b      	ldr	r3, [pc, #300]	; (8002900 <main+0x1d4>)
 80027d2:	220a      	movs	r2, #10
 80027d4:	825a      	strh	r2, [r3, #18]
	B1.presses = 0;
 80027d6:	4b4a      	ldr	r3, [pc, #296]	; (8002900 <main+0x1d4>)
 80027d8:	2200      	movs	r2, #0
 80027da:	751a      	strb	r2, [r3, #20]


	//iniciliziramo vse spremenljivke
	robotPay.x1 = 0; //nastavimo na srednje vrednosti
 80027dc:	4b4a      	ldr	r3, [pc, #296]	; (8002908 <main+0x1dc>)
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
	robotPay.x2 = 0;
 80027e2:	4b49      	ldr	r3, [pc, #292]	; (8002908 <main+0x1dc>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	709a      	strb	r2, [r3, #2]
	robotPay.y1 = 0;
 80027e8:	4b47      	ldr	r3, [pc, #284]	; (8002908 <main+0x1dc>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	705a      	strb	r2, [r3, #1]
	robotPay.y2 = 0;
 80027ee:	4b46      	ldr	r3, [pc, #280]	; (8002908 <main+0x1dc>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	70da      	strb	r2, [r3, #3]
	robotPay.speed = 100;
 80027f4:	4b44      	ldr	r3, [pc, #272]	; (8002908 <main+0x1dc>)
 80027f6:	2264      	movs	r2, #100	; 0x64
 80027f8:	711a      	strb	r2, [r3, #4]

	nastaviMotor(RF,0);
 80027fa:	2100      	movs	r1, #0
 80027fc:	2000      	movs	r0, #0
 80027fe:	f001 f9bb 	bl	8003b78 <nastaviMotor>
	nastaviMotor(LF,0);
 8002802:	2100      	movs	r1, #0
 8002804:	2003      	movs	r0, #3
 8002806:	f001 f9b7 	bl	8003b78 <nastaviMotor>
	nastaviMotor(LB,0);
 800280a:	2100      	movs	r1, #0
 800280c:	2002      	movs	r0, #2
 800280e:	f001 f9b3 	bl	8003b78 <nastaviMotor>
	nastaviMotor(RB,0);
 8002812:	2100      	movs	r1, #0
 8002814:	2001      	movs	r0, #1
 8002816:	f001 f9af 	bl	8003b78 <nastaviMotor>


	motorLF.num = LF;
 800281a:	4b3c      	ldr	r3, [pc, #240]	; (800290c <main+0x1e0>)
 800281c:	2203      	movs	r2, #3
 800281e:	721a      	strb	r2, [r3, #8]
	motorLB.num = LB;
 8002820:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <main+0x1e4>)
 8002822:	2202      	movs	r2, #2
 8002824:	721a      	strb	r2, [r3, #8]
	motorRB.num = RB;
 8002826:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <main+0x1e8>)
 8002828:	2201      	movs	r2, #1
 800282a:	721a      	strb	r2, [r3, #8]
	motorRF.num = RF;
 800282c:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <main+0x1ec>)
 800282e:	2200      	movs	r2, #0
 8002830:	721a      	strb	r2, [r3, #8]

	E.Accx = 0;
 8002832:	4b3a      	ldr	r3, [pc, #232]	; (800291c <main+0x1f0>)
 8002834:	2200      	movs	r2, #0
 8002836:	841a      	strh	r2, [r3, #32]
	E.Accy = 0;
 8002838:	4b38      	ldr	r3, [pc, #224]	; (800291c <main+0x1f0>)
 800283a:	2200      	movs	r2, #0
 800283c:	845a      	strh	r2, [r3, #34]	; 0x22
	E.Accz = 0;
 800283e:	4b37      	ldr	r3, [pc, #220]	; (800291c <main+0x1f0>)
 8002840:	2200      	movs	r2, #0
 8002842:	849a      	strh	r2, [r3, #36]	; 0x24
	E.Gyrox = 0;
 8002844:	4b35      	ldr	r3, [pc, #212]	; (800291c <main+0x1f0>)
 8002846:	2200      	movs	r2, #0
 8002848:	801a      	strh	r2, [r3, #0]
	E.Gyroy = 0;
 800284a:	4b34      	ldr	r3, [pc, #208]	; (800291c <main+0x1f0>)
 800284c:	2200      	movs	r2, #0
 800284e:	805a      	strh	r2, [r3, #2]
	E.Gyroz = 0;
 8002850:	4b32      	ldr	r3, [pc, #200]	; (800291c <main+0x1f0>)
 8002852:	2200      	movs	r2, #0
 8002854:	809a      	strh	r2, [r3, #4]
	E.HardIronMagx = 0;
 8002856:	4b31      	ldr	r3, [pc, #196]	; (800291c <main+0x1f0>)
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
	E.HardIronMagy = 0;
 800285e:	4b2f      	ldr	r3, [pc, #188]	; (800291c <main+0x1f0>)
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
	E.HardIronMagz = 0;
 8002866:	4b2d      	ldr	r3, [pc, #180]	; (800291c <main+0x1f0>)
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
	E.SoftIronMagx = 1;
 800286e:	4b2b      	ldr	r3, [pc, #172]	; (800291c <main+0x1f0>)
 8002870:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002874:	615a      	str	r2, [r3, #20]
	E.SoftIronMagy = 1;
 8002876:	4b29      	ldr	r3, [pc, #164]	; (800291c <main+0x1f0>)
 8002878:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800287c:	619a      	str	r2, [r3, #24]
	E.SoftIronMagz = 1;
 800287e:	4b27      	ldr	r3, [pc, #156]	; (800291c <main+0x1f0>)
 8002880:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002884:	61da      	str	r2, [r3, #28]

	P.pozX = 0;
 8002886:	4b26      	ldr	r3, [pc, #152]	; (8002920 <main+0x1f4>)
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	621a      	str	r2, [r3, #32]
	P.pozY = 0;
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <main+0x1f4>)
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

	getDrift();
 8002896:	f7ff fead 	bl	80025f4 <getDrift>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	xTaskCreate(StartRecivingCommandsNRF24, "recivingCommands", 100, NULL, ( tskIDLE_PRIORITY + 4UL ), (TaskHandle_t *)NULL);
 800289a:	2300      	movs	r3, #0
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	2304      	movs	r3, #4
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2300      	movs	r3, #0
 80028a4:	2264      	movs	r2, #100	; 0x64
 80028a6:	491f      	ldr	r1, [pc, #124]	; (8002924 <main+0x1f8>)
 80028a8:	481f      	ldr	r0, [pc, #124]	; (8002928 <main+0x1fc>)
 80028aa:	f009 fe6d 	bl	800c588 <xTaskCreate>
	xTaskCreate(StartCalculatingPoz, "calculatePoz", 100, NULL, ( tskIDLE_PRIORITY + 2UL ), (TaskHandle_t *)NULL);
 80028ae:	2300      	movs	r3, #0
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	2302      	movs	r3, #2
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2300      	movs	r3, #0
 80028b8:	2264      	movs	r2, #100	; 0x64
 80028ba:	491c      	ldr	r1, [pc, #112]	; (800292c <main+0x200>)
 80028bc:	481c      	ldr	r0, [pc, #112]	; (8002930 <main+0x204>)
 80028be:	f009 fe63 	bl	800c588 <xTaskCreate>
	xTaskCreate(StartMotorControl, "motorControl", 100, NULL, ( tskIDLE_PRIORITY + 2UL ), (TaskHandle_t *)NULL);
 80028c2:	2300      	movs	r3, #0
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	2302      	movs	r3, #2
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	2300      	movs	r3, #0
 80028cc:	2264      	movs	r2, #100	; 0x64
 80028ce:	4919      	ldr	r1, [pc, #100]	; (8002934 <main+0x208>)
 80028d0:	4819      	ldr	r0, [pc, #100]	; (8002938 <main+0x20c>)
 80028d2:	f009 fe59 	bl	800c588 <xTaskCreate>
	xTaskCreate(StartCalculatingPath, "calculatePath", 100, NULL, ( tskIDLE_PRIORITY + 1UL ), (TaskHandle_t *)NULL);
 80028d6:	2300      	movs	r3, #0
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	2301      	movs	r3, #1
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	2300      	movs	r3, #0
 80028e0:	2264      	movs	r2, #100	; 0x64
 80028e2:	4916      	ldr	r1, [pc, #88]	; (800293c <main+0x210>)
 80028e4:	4816      	ldr	r0, [pc, #88]	; (8002940 <main+0x214>)
 80028e6:	f009 fe4f 	bl	800c588 <xTaskCreate>

	vTaskStartScheduler();
 80028ea:	f009 fffd 	bl	800c8e8 <vTaskStartScheduler>

  while (1)
 80028ee:	e7fe      	b.n	80028ee <main+0x1c2>
 80028f0:	20013a4c 	.word	0x20013a4c
 80028f4:	20013540 	.word	0x20013540
 80028f8:	20000225 	.word	0x20000225
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	20013a94 	.word	0x20013a94
 8002904:	40020000 	.word	0x40020000
 8002908:	2001358c 	.word	0x2001358c
 800290c:	20013870 	.word	0x20013870
 8002910:	200136b4 	.word	0x200136b4
 8002914:	20013bb4 	.word	0x20013bb4
 8002918:	20013ca0 	.word	0x20013ca0
 800291c:	20013a24 	.word	0x20013a24
 8002920:	20013cec 	.word	0x20013cec
 8002924:	08012260 	.word	0x08012260
 8002928:	08004999 	.word	0x08004999
 800292c:	08012274 	.word	0x08012274
 8002930:	08004195 	.word	0x08004195
 8002934:	08012284 	.word	0x08012284
 8002938:	08004b75 	.word	0x08004b75
 800293c:	08012294 	.word	0x08012294
 8002940:	08004c45 	.word	0x08004c45

08002944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b094      	sub	sp, #80	; 0x50
 8002948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800294a:	f107 0320 	add.w	r3, r7, #32
 800294e:	2230      	movs	r2, #48	; 0x30
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f00d fe36 	bl	80105c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002958:	f107 030c 	add.w	r3, r7, #12
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002968:	2300      	movs	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <SystemClock_Config+0xc8>)
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	4a26      	ldr	r2, [pc, #152]	; (8002a0c <SystemClock_Config+0xc8>)
 8002972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002976:	6413      	str	r3, [r2, #64]	; 0x40
 8002978:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <SystemClock_Config+0xc8>)
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002984:	2300      	movs	r3, #0
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <SystemClock_Config+0xcc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a20      	ldr	r2, [pc, #128]	; (8002a10 <SystemClock_Config+0xcc>)
 800298e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <SystemClock_Config+0xcc>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029a0:	2301      	movs	r3, #1
 80029a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029aa:	2302      	movs	r3, #2
 80029ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80029b4:	2304      	movs	r3, #4
 80029b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80029b8:	23a8      	movs	r3, #168	; 0xa8
 80029ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80029bc:	2304      	movs	r3, #4
 80029be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80029c0:	2307      	movs	r3, #7
 80029c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029c4:	f107 0320 	add.w	r3, r7, #32
 80029c8:	4618      	mov	r0, r3
 80029ca:	f005 fc75 	bl	80082b8 <HAL_RCC_OscConfig>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80029d4:	f000 fbd0 	bl	8003178 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029d8:	230f      	movs	r3, #15
 80029da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029dc:	2302      	movs	r3, #2
 80029de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029ee:	f107 030c 	add.w	r3, r7, #12
 80029f2:	2102      	movs	r1, #2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f005 fed7 	bl	80087a8 <HAL_RCC_ClockConfig>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002a00:	f000 fbba 	bl	8003178 <Error_Handler>
  }
}
 8002a04:	bf00      	nop
 8002a06:	3750      	adds	r7, #80	; 0x50
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40007000 	.word	0x40007000

08002a14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <MX_I2C1_Init+0x50>)
 8002a1a:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <MX_I2C1_Init+0x54>)
 8002a1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002a1e:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <MX_I2C1_Init+0x50>)
 8002a20:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <MX_I2C1_Init+0x58>)
 8002a22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <MX_I2C1_Init+0x50>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <MX_I2C1_Init+0x50>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <MX_I2C1_Init+0x50>)
 8002a32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <MX_I2C1_Init+0x50>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <MX_I2C1_Init+0x50>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a44:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <MX_I2C1_Init+0x50>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <MX_I2C1_Init+0x50>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a50:	4804      	ldr	r0, [pc, #16]	; (8002a64 <MX_I2C1_Init+0x50>)
 8002a52:	f003 faef 	bl	8006034 <HAL_I2C_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a5c:	f000 fb8c 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20013484 	.word	0x20013484
 8002a68:	40005400 	.word	0x40005400
 8002a6c:	00061a80 	.word	0x00061a80

08002a70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002a76:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <MX_SPI1_Init+0x68>)
 8002a78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002a7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a8e:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002aa4:	2218      	movs	r2, #24
 8002aa6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab4:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002abc:	220a      	movs	r2, #10
 8002abe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ac0:	4804      	ldr	r0, [pc, #16]	; (8002ad4 <MX_SPI1_Init+0x64>)
 8002ac2:	f006 f89f 	bl	8008c04 <HAL_SPI_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002acc:	f000 fb54 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	200139bc 	.word	0x200139bc
 8002ad8:	40013000 	.word	0x40013000

08002adc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <MX_SPI2_Init+0x64>)
 8002ae2:	4a18      	ldr	r2, [pc, #96]	; (8002b44 <MX_SPI2_Init+0x68>)
 8002ae4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <MX_SPI2_Init+0x64>)
 8002ae8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002aec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <MX_SPI2_Init+0x64>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <MX_SPI2_Init+0x64>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <MX_SPI2_Init+0x64>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <MX_SPI2_Init+0x64>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b06:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <MX_SPI2_Init+0x64>)
 8002b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <MX_SPI2_Init+0x64>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <MX_SPI2_Init+0x64>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <MX_SPI2_Init+0x64>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <MX_SPI2_Init+0x64>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <MX_SPI2_Init+0x64>)
 8002b28:	220a      	movs	r2, #10
 8002b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b2c:	4804      	ldr	r0, [pc, #16]	; (8002b40 <MX_SPI2_Init+0x64>)
 8002b2e:	f006 f869 	bl	8008c04 <HAL_SPI_Init>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b38:	f000 fb1e 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20013240 	.word	0x20013240
 8002b44:	40003800 	.word	0x40003800

08002b48 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002b4c:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <MX_SPI5_Init+0x5c>)
 8002b4e:	4a16      	ldr	r2, [pc, #88]	; (8002ba8 <MX_SPI5_Init+0x60>)
 8002b50:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8002b52:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <MX_SPI5_Init+0x5c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <MX_SPI5_Init+0x5c>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b5e:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <MX_SPI5_Init+0x5c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <MX_SPI5_Init+0x5c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <MX_SPI5_Init+0x5c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <MX_SPI5_Init+0x5c>)
 8002b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b76:	619a      	str	r2, [r3, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <MX_SPI5_Init+0x5c>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <MX_SPI5_Init+0x5c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b84:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <MX_SPI5_Init+0x5c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <MX_SPI5_Init+0x5c>)
 8002b8c:	220a      	movs	r2, #10
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002b90:	4804      	ldr	r0, [pc, #16]	; (8002ba4 <MX_SPI5_Init+0x5c>)
 8002b92:	f006 f837 	bl	8008c04 <HAL_SPI_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_SPI5_Init+0x58>
  {
    Error_Handler();
 8002b9c:	f000 faec 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	2001332c 	.word	0x2001332c
 8002ba8:	40015000 	.word	0x40015000

08002bac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08e      	sub	sp, #56	; 0x38
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc0:	f107 0320 	add.w	r3, r7, #32
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
 8002bd8:	615a      	str	r2, [r3, #20]
 8002bda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bdc:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <MX_TIM2_Init+0x114>)
 8002bde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002be2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002be4:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <MX_TIM2_Init+0x114>)
 8002be6:	2253      	movs	r2, #83	; 0x53
 8002be8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bea:	4b35      	ldr	r3, [pc, #212]	; (8002cc0 <MX_TIM2_Init+0x114>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002bf0:	4b33      	ldr	r3, [pc, #204]	; (8002cc0 <MX_TIM2_Init+0x114>)
 8002bf2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bf6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf8:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <MX_TIM2_Init+0x114>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bfe:	4b30      	ldr	r3, [pc, #192]	; (8002cc0 <MX_TIM2_Init+0x114>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c04:	482e      	ldr	r0, [pc, #184]	; (8002cc0 <MX_TIM2_Init+0x114>)
 8002c06:	f006 fda5 	bl	8009754 <HAL_TIM_Base_Init>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002c10:	f000 fab2 	bl	8003178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4827      	ldr	r0, [pc, #156]	; (8002cc0 <MX_TIM2_Init+0x114>)
 8002c22:	f007 f977 	bl	8009f14 <HAL_TIM_ConfigClockSource>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002c2c:	f000 faa4 	bl	8003178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c30:	4823      	ldr	r0, [pc, #140]	; (8002cc0 <MX_TIM2_Init+0x114>)
 8002c32:	f006 fe9b 	bl	800996c <HAL_TIM_PWM_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002c3c:	f000 fa9c 	bl	8003178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c40:	2300      	movs	r3, #0
 8002c42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c48:	f107 0320 	add.w	r3, r7, #32
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	481c      	ldr	r0, [pc, #112]	; (8002cc0 <MX_TIM2_Init+0x114>)
 8002c50:	f007 fd1c 	bl	800a68c <HAL_TIMEx_MasterConfigSynchronization>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002c5a:	f000 fa8d 	bl	8003178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c5e:	2360      	movs	r3, #96	; 0x60
 8002c60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c6e:	1d3b      	adds	r3, r7, #4
 8002c70:	2204      	movs	r2, #4
 8002c72:	4619      	mov	r1, r3
 8002c74:	4812      	ldr	r0, [pc, #72]	; (8002cc0 <MX_TIM2_Init+0x114>)
 8002c76:	f007 f88b 	bl	8009d90 <HAL_TIM_PWM_ConfigChannel>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002c80:	f000 fa7a 	bl	8003178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	2208      	movs	r2, #8
 8002c88:	4619      	mov	r1, r3
 8002c8a:	480d      	ldr	r0, [pc, #52]	; (8002cc0 <MX_TIM2_Init+0x114>)
 8002c8c:	f007 f880 	bl	8009d90 <HAL_TIM_PWM_ConfigChannel>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002c96:	f000 fa6f 	bl	8003178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	220c      	movs	r2, #12
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4807      	ldr	r0, [pc, #28]	; (8002cc0 <MX_TIM2_Init+0x114>)
 8002ca2:	f007 f875 	bl	8009d90 <HAL_TIM_PWM_ConfigChannel>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002cac:	f000 fa64 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002cb0:	4803      	ldr	r0, [pc, #12]	; (8002cc0 <MX_TIM2_Init+0x114>)
 8002cb2:	f002 fa4f 	bl	8005154 <HAL_TIM_MspPostInit>

}
 8002cb6:	bf00      	nop
 8002cb8:	3738      	adds	r7, #56	; 0x38
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20013a4c 	.word	0x20013a4c

08002cc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08e      	sub	sp, #56	; 0x38
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd8:	f107 0320 	add.w	r3, r7, #32
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
 8002cf0:	615a      	str	r2, [r3, #20]
 8002cf2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cf4:	4b2c      	ldr	r3, [pc, #176]	; (8002da8 <MX_TIM3_Init+0xe4>)
 8002cf6:	4a2d      	ldr	r2, [pc, #180]	; (8002dac <MX_TIM3_Init+0xe8>)
 8002cf8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8002cfa:	4b2b      	ldr	r3, [pc, #172]	; (8002da8 <MX_TIM3_Init+0xe4>)
 8002cfc:	2254      	movs	r2, #84	; 0x54
 8002cfe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d00:	4b29      	ldr	r3, [pc, #164]	; (8002da8 <MX_TIM3_Init+0xe4>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002d06:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <MX_TIM3_Init+0xe4>)
 8002d08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d0e:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <MX_TIM3_Init+0xe4>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d14:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <MX_TIM3_Init+0xe4>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d1a:	4823      	ldr	r0, [pc, #140]	; (8002da8 <MX_TIM3_Init+0xe4>)
 8002d1c:	f006 fd1a 	bl	8009754 <HAL_TIM_Base_Init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002d26:	f000 fa27 	bl	8003178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d34:	4619      	mov	r1, r3
 8002d36:	481c      	ldr	r0, [pc, #112]	; (8002da8 <MX_TIM3_Init+0xe4>)
 8002d38:	f007 f8ec 	bl	8009f14 <HAL_TIM_ConfigClockSource>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002d42:	f000 fa19 	bl	8003178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d46:	4818      	ldr	r0, [pc, #96]	; (8002da8 <MX_TIM3_Init+0xe4>)
 8002d48:	f006 fe10 	bl	800996c <HAL_TIM_PWM_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002d52:	f000 fa11 	bl	8003178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d5e:	f107 0320 	add.w	r3, r7, #32
 8002d62:	4619      	mov	r1, r3
 8002d64:	4810      	ldr	r0, [pc, #64]	; (8002da8 <MX_TIM3_Init+0xe4>)
 8002d66:	f007 fc91 	bl	800a68c <HAL_TIMEx_MasterConfigSynchronization>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002d70:	f000 fa02 	bl	8003178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d74:	2360      	movs	r3, #96	; 0x60
 8002d76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	220c      	movs	r2, #12
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4807      	ldr	r0, [pc, #28]	; (8002da8 <MX_TIM3_Init+0xe4>)
 8002d8c:	f007 f800 	bl	8009d90 <HAL_TIM_PWM_ConfigChannel>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002d96:	f000 f9ef 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d9a:	4803      	ldr	r0, [pc, #12]	; (8002da8 <MX_TIM3_Init+0xe4>)
 8002d9c:	f002 f9da 	bl	8005154 <HAL_TIM_MspPostInit>

}
 8002da0:	bf00      	nop
 8002da2:	3738      	adds	r7, #56	; 0x38
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20013540 	.word	0x20013540
 8002dac:	40000400 	.word	0x40000400

08002db0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <MX_DMA_Init+0x4c>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a0f      	ldr	r2, [pc, #60]	; (8002dfc <MX_DMA_Init+0x4c>)
 8002dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <MX_DMA_Init+0x4c>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	203b      	movs	r0, #59	; 0x3b
 8002dd8:	f002 fc4a 	bl	8005670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002ddc:	203b      	movs	r0, #59	; 0x3b
 8002dde:	f002 fc63 	bl	80056a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	203c      	movs	r0, #60	; 0x3c
 8002de8:	f002 fc42 	bl	8005670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002dec:	203c      	movs	r0, #60	; 0x3c
 8002dee:	f002 fc5b 	bl	80056a8 <HAL_NVIC_EnableIRQ>

}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800

08002e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08c      	sub	sp, #48	; 0x30
 8002e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e06:	f107 031c 	add.w	r3, r7, #28
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	60da      	str	r2, [r3, #12]
 8002e14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	4bb9      	ldr	r3, [pc, #740]	; (8003100 <MX_GPIO_Init+0x300>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4ab8      	ldr	r2, [pc, #736]	; (8003100 <MX_GPIO_Init+0x300>)
 8002e20:	f043 0310 	orr.w	r3, r3, #16
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4bb6      	ldr	r3, [pc, #728]	; (8003100 <MX_GPIO_Init+0x300>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	4bb2      	ldr	r3, [pc, #712]	; (8003100 <MX_GPIO_Init+0x300>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	4ab1      	ldr	r2, [pc, #708]	; (8003100 <MX_GPIO_Init+0x300>)
 8002e3c:	f043 0304 	orr.w	r3, r3, #4
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
 8002e42:	4baf      	ldr	r3, [pc, #700]	; (8003100 <MX_GPIO_Init+0x300>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	4bab      	ldr	r3, [pc, #684]	; (8003100 <MX_GPIO_Init+0x300>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4aaa      	ldr	r2, [pc, #680]	; (8003100 <MX_GPIO_Init+0x300>)
 8002e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4ba8      	ldr	r3, [pc, #672]	; (8003100 <MX_GPIO_Init+0x300>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	4ba4      	ldr	r3, [pc, #656]	; (8003100 <MX_GPIO_Init+0x300>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4aa3      	ldr	r2, [pc, #652]	; (8003100 <MX_GPIO_Init+0x300>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4ba1      	ldr	r3, [pc, #644]	; (8003100 <MX_GPIO_Init+0x300>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	4b9d      	ldr	r3, [pc, #628]	; (8003100 <MX_GPIO_Init+0x300>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a9c      	ldr	r2, [pc, #624]	; (8003100 <MX_GPIO_Init+0x300>)
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b9a      	ldr	r3, [pc, #616]	; (8003100 <MX_GPIO_Init+0x300>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	4b96      	ldr	r3, [pc, #600]	; (8003100 <MX_GPIO_Init+0x300>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	4a95      	ldr	r2, [pc, #596]	; (8003100 <MX_GPIO_Init+0x300>)
 8002eac:	f043 0308 	orr.w	r3, r3, #8
 8002eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb2:	4b93      	ldr	r3, [pc, #588]	; (8003100 <MX_GPIO_Init+0x300>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_SPI1_Pin|mf_lf_Pin|mb_lf_Pin|GPIO_PIN_9
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f647 7188 	movw	r1, #32648	; 0x7f88
 8002ec4:	488f      	ldr	r0, [pc, #572]	; (8003104 <MX_GPIO_Init+0x304>)
 8002ec6:	f003 f883 	bl	8005fd0 <HAL_GPIO_WritePin>
                          |mb_rb_Pin|GPIO_PIN_11|mf_rb_Pin|GPIO_PIN_13
                          |mb_lb_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002eca:	2201      	movs	r2, #1
 8002ecc:	2101      	movs	r1, #1
 8002ece:	488e      	ldr	r0, [pc, #568]	; (8003108 <MX_GPIO_Init+0x308>)
 8002ed0:	f003 f87e 	bl	8005fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2104      	movs	r1, #4
 8002ed8:	488c      	ldr	r0, [pc, #560]	; (800310c <MX_GPIO_Init+0x30c>)
 8002eda:	f003 f879 	bl	8005fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, NRF_CSN_Pin|NRF_CE_Pin|LD4_Pin|LD3_Pin
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f24f 3113 	movw	r1, #62227	; 0xf313
 8002ee4:	488a      	ldr	r0, [pc, #552]	; (8003110 <MX_GPIO_Init+0x310>)
 8002ee6:	f003 f873 	bl	8005fd0 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|CE1_SPI5_Pin|CSN1_SPI5_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_1;
 8002eea:	2316      	movs	r3, #22
 8002eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002eee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	4619      	mov	r1, r3
 8002efe:	4881      	ldr	r0, [pc, #516]	; (8003104 <MX_GPIO_Init+0x304>)
 8002f00:	f002 feca 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SPI1_Pin */
  GPIO_InitStruct.Pin = CS_SPI1_Pin;
 8002f04:	2308      	movs	r3, #8
 8002f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f10:	2302      	movs	r3, #2
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_SPI1_GPIO_Port, &GPIO_InitStruct);
 8002f14:	f107 031c 	add.w	r3, r7, #28
 8002f18:	4619      	mov	r1, r3
 8002f1a:	487a      	ldr	r0, [pc, #488]	; (8003104 <MX_GPIO_Init+0x304>)
 8002f1c:	f002 febc 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002f20:	2301      	movs	r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f24:	2301      	movs	r3, #1
 8002f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002f30:	f107 031c 	add.w	r3, r7, #28
 8002f34:	4619      	mov	r1, r3
 8002f36:	4874      	ldr	r0, [pc, #464]	; (8003108 <MX_GPIO_Init+0x308>)
 8002f38:	f002 feae 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002f3c:	2308      	movs	r3, #8
 8002f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f4c:	2305      	movs	r3, #5
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002f50:	f107 031c 	add.w	r3, r7, #28
 8002f54:	4619      	mov	r1, r3
 8002f56:	486c      	ldr	r0, [pc, #432]	; (8003108 <MX_GPIO_Init+0x308>)
 8002f58:	f002 fe9e 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f60:	2300      	movs	r3, #0
 8002f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4869      	ldr	r0, [pc, #420]	; (8003114 <MX_GPIO_Init+0x314>)
 8002f70:	f002 fe92 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002f74:	2310      	movs	r3, #16
 8002f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	2300      	movs	r3, #0
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f84:	2306      	movs	r3, #6
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002f88:	f107 031c 	add.w	r3, r7, #28
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4861      	ldr	r0, [pc, #388]	; (8003114 <MX_GPIO_Init+0x314>)
 8002f90:	f002 fe82 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f94:	2304      	movs	r3, #4
 8002f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa4:	f107 031c 	add.w	r3, r7, #28
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4858      	ldr	r0, [pc, #352]	; (800310c <MX_GPIO_Init+0x30c>)
 8002fac:	f002 fe74 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : mf_lf_Pin mb_lf_Pin PE9 mb_rb_Pin
                           PE11 mf_rb_Pin PE13 mb_lb_Pin */
  GPIO_InitStruct.Pin = mf_lf_Pin|mb_lf_Pin|GPIO_PIN_9|mb_rb_Pin
 8002fb0:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 8002fb4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|mf_rb_Pin|GPIO_PIN_13|mb_lb_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fc2:	f107 031c 	add.w	r3, r7, #28
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	484e      	ldr	r0, [pc, #312]	; (8003104 <MX_GPIO_Init+0x304>)
 8002fca:	f002 fe65 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8002fce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fe0:	2305      	movs	r3, #5
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe4:	f107 031c 	add.w	r3, r7, #28
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4848      	ldr	r0, [pc, #288]	; (800310c <MX_GPIO_Init+0x30c>)
 8002fec:	f002 fe54 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8002ff0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ff6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003000:	f107 031c 	add.w	r3, r7, #28
 8003004:	4619      	mov	r1, r3
 8003006:	4841      	ldr	r0, [pc, #260]	; (800310c <MX_GPIO_Init+0x30c>)
 8003008:	f002 fe46 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CSN_Pin NRF_CE_Pin LD4_Pin LD3_Pin
                           LD5_Pin LD6_Pin CE1_SPI5_Pin CSN1_SPI5_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_CE_Pin|LD4_Pin|LD3_Pin
 800300c:	f24f 3313 	movw	r3, #62227	; 0xf313
 8003010:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|CE1_SPI5_Pin|CSN1_SPI5_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003012:	2301      	movs	r3, #1
 8003014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	2300      	movs	r3, #0
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800301e:	f107 031c 	add.w	r3, r7, #28
 8003022:	4619      	mov	r1, r3
 8003024:	483a      	ldr	r0, [pc, #232]	; (8003110 <MX_GPIO_Init+0x310>)
 8003026:	f002 fe37 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800302a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800302e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	2300      	movs	r3, #0
 800303a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800303c:	2306      	movs	r3, #6
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003040:	f107 031c 	add.w	r3, r7, #28
 8003044:	4619      	mov	r1, r3
 8003046:	4830      	ldr	r0, [pc, #192]	; (8003108 <MX_GPIO_Init+0x308>)
 8003048:	f002 fe26 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800304c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003052:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305c:	f107 031c 	add.w	r3, r7, #28
 8003060:	4619      	mov	r1, r3
 8003062:	482c      	ldr	r0, [pc, #176]	; (8003114 <MX_GPIO_Init+0x314>)
 8003064:	f002 fe18 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003068:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800306c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800306e:	2300      	movs	r3, #0
 8003070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003076:	f107 031c 	add.w	r3, r7, #28
 800307a:	4619      	mov	r1, r3
 800307c:	4822      	ldr	r0, [pc, #136]	; (8003108 <MX_GPIO_Init+0x308>)
 800307e:	f002 fe0b 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8003082:	2364      	movs	r3, #100	; 0x64
 8003084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003086:	2300      	movs	r3, #0
 8003088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800308e:	f107 031c 	add.w	r3, r7, #28
 8003092:	4619      	mov	r1, r3
 8003094:	481e      	ldr	r0, [pc, #120]	; (8003110 <MX_GPIO_Init+0x310>)
 8003096:	f002 fdff 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 800309a:	2388      	movs	r3, #136	; 0x88
 800309c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800309e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80030a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030a8:	f107 031c 	add.w	r3, r7, #28
 80030ac:	4619      	mov	r1, r3
 80030ae:	4818      	ldr	r0, [pc, #96]	; (8003110 <MX_GPIO_Init+0x310>)
 80030b0:	f002 fdf2 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80030be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c4:	f107 031c 	add.w	r3, r7, #28
 80030c8:	4619      	mov	r1, r3
 80030ca:	4810      	ldr	r0, [pc, #64]	; (800310c <MX_GPIO_Init+0x30c>)
 80030cc:	f002 fde4 	bl	8005c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80030d0:	2200      	movs	r2, #0
 80030d2:	2100      	movs	r1, #0
 80030d4:	2007      	movs	r0, #7
 80030d6:	f002 facb 	bl	8005670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80030da:	2007      	movs	r0, #7
 80030dc:	f002 fae4 	bl	80056a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80030e0:	2200      	movs	r2, #0
 80030e2:	2100      	movs	r1, #0
 80030e4:	2008      	movs	r0, #8
 80030e6:	f002 fac3 	bl	8005670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80030ea:	2008      	movs	r0, #8
 80030ec:	f002 fadc 	bl	80056a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80030f0:	2200      	movs	r2, #0
 80030f2:	2100      	movs	r1, #0
 80030f4:	2009      	movs	r0, #9
 80030f6:	f002 fabb 	bl	8005670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80030fa:	2009      	movs	r0, #9
 80030fc:	e00c      	b.n	8003118 <MX_GPIO_Init+0x318>
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	40021000 	.word	0x40021000
 8003108:	40020800 	.word	0x40020800
 800310c:	40020400 	.word	0x40020400
 8003110:	40020c00 	.word	0x40020c00
 8003114:	40020000 	.word	0x40020000
 8003118:	f002 fac6 	bl	80056a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800311c:	2200      	movs	r2, #0
 800311e:	2100      	movs	r1, #0
 8003120:	200a      	movs	r0, #10
 8003122:	f002 faa5 	bl	8005670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003126:	200a      	movs	r0, #10
 8003128:	f002 fabe 	bl	80056a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800312c:	2200      	movs	r2, #0
 800312e:	2100      	movs	r1, #0
 8003130:	2017      	movs	r0, #23
 8003132:	f002 fa9d 	bl	8005670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003136:	2017      	movs	r0, #23
 8003138:	f002 fab6 	bl	80056a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800313c:	2200      	movs	r2, #0
 800313e:	2100      	movs	r1, #0
 8003140:	2028      	movs	r0, #40	; 0x28
 8003142:	f002 fa95 	bl	8005670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003146:	2028      	movs	r0, #40	; 0x28
 8003148:	f002 faae 	bl	80056a8 <HAL_NVIC_EnableIRQ>

}
 800314c:	bf00      	nop
 800314e:	3730      	adds	r7, #48	; 0x30
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a04      	ldr	r2, [pc, #16]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003166:	f002 f987 	bl	8005478 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40014800 	.word	0x40014800

08003178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800317c:	b672      	cpsid	i
}
 800317e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003180:	e7fe      	b.n	8003180 <Error_Handler+0x8>
	...

08003184 <nRF24_CSN_L>:

static inline void nRF24_CSN_L() {
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8003188:	2200      	movs	r2, #0
 800318a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800318e:	4802      	ldr	r0, [pc, #8]	; (8003198 <nRF24_CSN_L+0x14>)
 8003190:	f002 ff1e 	bl	8005fd0 <HAL_GPIO_WritePin>
}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40020c00 	.word	0x40020c00

0800319c <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 80031a0:	2201      	movs	r2, #1
 80031a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031a6:	4802      	ldr	r0, [pc, #8]	; (80031b0 <nRF24_CSN_H+0x14>)
 80031a8:	f002 ff12 	bl	8005fd0 <HAL_GPIO_WritePin>
}
 80031ac:	bf00      	nop
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40020c00 	.word	0x40020c00

080031b4 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi2,&data,&result,1,2000)!=HAL_OK) {  //<-spi handle --------change
 80031be:	f107 020f 	add.w	r2, r7, #15
 80031c2:	1df9      	adds	r1, r7, #7
 80031c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	2301      	movs	r3, #1
 80031cc:	4806      	ldr	r0, [pc, #24]	; (80031e8 <nRF24_LL_RW+0x34>)
 80031ce:	f005 ffef 	bl	80091b0 <HAL_SPI_TransmitReceive>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <nRF24_LL_RW+0x28>
        Error_Handler();
 80031d8:	f7ff ffce 	bl	8003178 <Error_Handler>
    };
    return result;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20013240 	.word	0x20013240

080031ec <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 80031f6:	f7ff ffc5 	bl	8003184 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	b2db      	uxtb	r3, r3
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ffd6 	bl	80031b4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8003208:	20ff      	movs	r0, #255	; 0xff
 800320a:	f7ff ffd3 	bl	80031b4 <nRF24_LL_RW>
 800320e:	4603      	mov	r3, r0
 8003210:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8003212:	f7ff ffc3 	bl	800319c <nRF24_CSN_H>

	return value;
 8003216:	7bfb      	ldrb	r3, [r7, #15]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	460a      	mov	r2, r1
 800322a:	71fb      	strb	r3, [r7, #7]
 800322c:	4613      	mov	r3, r2
 800322e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8003230:	f7ff ffa8 	bl	8003184 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	2b1f      	cmp	r3, #31
 8003238:	d810      	bhi.n	800325c <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	b25b      	sxtb	r3, r3
 8003244:	f043 0320 	orr.w	r3, r3, #32
 8003248:	b25b      	sxtb	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ffb1 	bl	80031b4 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8003252:	79bb      	ldrb	r3, [r7, #6]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ffad 	bl	80031b4 <nRF24_LL_RW>
 800325a:	e013      	b.n	8003284 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff ffa8 	bl	80031b4 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	2be1      	cmp	r3, #225	; 0xe1
 8003268:	d00c      	beq.n	8003284 <nRF24_WriteReg+0x64>
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	2be2      	cmp	r3, #226	; 0xe2
 800326e:	d009      	beq.n	8003284 <nRF24_WriteReg+0x64>
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	2be3      	cmp	r3, #227	; 0xe3
 8003274:	d006      	beq.n	8003284 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	2bff      	cmp	r3, #255	; 0xff
 800327a:	d003      	beq.n	8003284 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 800327c:	79bb      	ldrb	r3, [r7, #6]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff98 	bl	80031b4 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8003284:	f7ff ff8a 	bl	800319c <nRF24_CSN_H>
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	6039      	str	r1, [r7, #0]
 800329a:	71fb      	strb	r3, [r7, #7]
 800329c:	4613      	mov	r3, r2
 800329e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80032a0:	f7ff ff70 	bl	8003184 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ff84 	bl	80031b4 <nRF24_LL_RW>
	while (count--) {
 80032ac:	e007      	b.n	80032be <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80032ae:	683c      	ldr	r4, [r7, #0]
 80032b0:	1c63      	adds	r3, r4, #1
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	20ff      	movs	r0, #255	; 0xff
 80032b6:	f7ff ff7d 	bl	80031b4 <nRF24_LL_RW>
 80032ba:	4603      	mov	r3, r0
 80032bc:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80032be:	79bb      	ldrb	r3, [r7, #6]
 80032c0:	1e5a      	subs	r2, r3, #1
 80032c2:	71ba      	strb	r2, [r7, #6]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f2      	bne.n	80032ae <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 80032c8:	f7ff ff68 	bl	800319c <nRF24_CSN_H>
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd90      	pop	{r4, r7, pc}

080032d4 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	6039      	str	r1, [r7, #0]
 80032de:	71fb      	strb	r3, [r7, #7]
 80032e0:	4613      	mov	r3, r2
 80032e2:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80032e4:	f7ff ff4e 	bl	8003184 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff ff62 	bl	80031b4 <nRF24_LL_RW>
	while (count--) {
 80032f0:	e006      	b.n	8003300 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	603a      	str	r2, [r7, #0]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff5a 	bl	80031b4 <nRF24_LL_RW>
	while (count--) {
 8003300:	79bb      	ldrb	r3, [r7, #6]
 8003302:	1e5a      	subs	r2, r3, #1
 8003304:	71ba      	strb	r2, [r7, #6]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f3      	bne.n	80032f2 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 800330a:	f7ff ff47 	bl	800319c <nRF24_CSN_H>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8003316:	b580      	push	{r7, lr}
 8003318:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 800331a:	2108      	movs	r1, #8
 800331c:	2000      	movs	r0, #0
 800331e:	f7ff ff7f 	bl	8003220 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8003322:	213f      	movs	r1, #63	; 0x3f
 8003324:	2001      	movs	r0, #1
 8003326:	f7ff ff7b 	bl	8003220 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 800332a:	2103      	movs	r1, #3
 800332c:	2002      	movs	r0, #2
 800332e:	f7ff ff77 	bl	8003220 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8003332:	2103      	movs	r1, #3
 8003334:	2003      	movs	r0, #3
 8003336:	f7ff ff73 	bl	8003220 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 800333a:	2103      	movs	r1, #3
 800333c:	2004      	movs	r0, #4
 800333e:	f7ff ff6f 	bl	8003220 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8003342:	2102      	movs	r1, #2
 8003344:	2005      	movs	r0, #5
 8003346:	f7ff ff6b 	bl	8003220 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 800334a:	210e      	movs	r1, #14
 800334c:	2006      	movs	r0, #6
 800334e:	f7ff ff67 	bl	8003220 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8003352:	2100      	movs	r1, #0
 8003354:	2007      	movs	r0, #7
 8003356:	f7ff ff63 	bl	8003220 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 800335a:	2100      	movs	r1, #0
 800335c:	2011      	movs	r0, #17
 800335e:	f7ff ff5f 	bl	8003220 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8003362:	2100      	movs	r1, #0
 8003364:	2012      	movs	r0, #18
 8003366:	f7ff ff5b 	bl	8003220 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 800336a:	2100      	movs	r1, #0
 800336c:	2013      	movs	r0, #19
 800336e:	f7ff ff57 	bl	8003220 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8003372:	2100      	movs	r1, #0
 8003374:	2014      	movs	r0, #20
 8003376:	f7ff ff53 	bl	8003220 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 800337a:	2100      	movs	r1, #0
 800337c:	2015      	movs	r0, #21
 800337e:	f7ff ff4f 	bl	8003220 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8003382:	2100      	movs	r1, #0
 8003384:	2016      	movs	r0, #22
 8003386:	f7ff ff4b 	bl	8003220 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 800338a:	2100      	movs	r1, #0
 800338c:	201c      	movs	r0, #28
 800338e:	f7ff ff47 	bl	8003220 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8003392:	2100      	movs	r1, #0
 8003394:	201d      	movs	r0, #29
 8003396:	f7ff ff43 	bl	8003220 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 800339a:	f000 f9a8 	bl	80036ee <nRF24_FlushRX>
	nRF24_FlushTX();
 800339e:	f000 f99e 	bl	80036de <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 80033a2:	f000 f9ac 	bl	80036fe <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 80033a6:	f7ff fef9 	bl	800319c <nRF24_CSN_H>
}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 80033b6:	4b14      	ldr	r3, [pc, #80]	; (8003408 <nRF24_Check+0x58>)
 80033b8:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80033ba:	2205      	movs	r2, #5
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	2030      	movs	r0, #48	; 0x30
 80033c0:	f7ff ff88 	bl	80032d4 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80033c4:	463b      	mov	r3, r7
 80033c6:	2205      	movs	r2, #5
 80033c8:	4619      	mov	r1, r3
 80033ca:	2010      	movs	r0, #16
 80033cc:	f7ff ff60 	bl	8003290 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
 80033d4:	e010      	b.n	80033f8 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	f107 0210 	add.w	r2, r7, #16
 80033dc:	4413      	add	r3, r2
 80033de:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1c59      	adds	r1, r3, #1
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d001      	beq.n	80033f2 <nRF24_Check+0x42>
 80033ee:	2300      	movs	r3, #0
 80033f0:	e006      	b.n	8003400 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	3301      	adds	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d9eb      	bls.n	80033d6 <nRF24_Check+0x26>
	}

	return 1;
 80033fe:	2301      	movs	r3, #1
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	080122a4 	.word	0x080122a4

0800340c <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003416:	2000      	movs	r0, #0
 8003418:	f7ff fee8 	bl	80031ec <nRF24_ReadReg>
 800341c:	4603      	mov	r3, r0
 800341e:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d104      	bne.n	8003430 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	73fb      	strb	r3, [r7, #15]
 800342e:	e003      	b.n	8003438 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	f023 0302 	bic.w	r3, r3, #2
 8003436:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	4619      	mov	r1, r3
 800343c:	2000      	movs	r0, #0
 800343e:	f7ff feef 	bl	8003220 <nRF24_WriteReg>
}
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	4603      	mov	r3, r0
 8003452:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003454:	2000      	movs	r0, #0
 8003456:	f7ff fec9 	bl	80031ec <nRF24_ReadReg>
 800345a:	4603      	mov	r3, r0
 800345c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	f023 0301 	bic.w	r3, r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	b25a      	sxtb	r2, r3
 8003470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003474:	4313      	orrs	r3, r2
 8003476:	b25b      	sxtb	r3, r3
 8003478:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	4619      	mov	r1, r3
 800347e:	2000      	movs	r0, #0
 8003480:	f7ff fece 	bl	8003220 <nRF24_WriteReg>
}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003496:	2000      	movs	r0, #0
 8003498:	f7ff fea8 	bl	80031ec <nRF24_ReadReg>
 800349c:	4603      	mov	r3, r0
 800349e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	f023 030c 	bic.w	r3, r3, #12
 80034a6:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	b25a      	sxtb	r2, r3
 80034b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	b25b      	sxtb	r3, r3
 80034ba:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	4619      	mov	r1, r3
 80034c0:	2000      	movs	r0, #0
 80034c2:	f7ff fead 	bl	8003220 <nRF24_WriteReg>
}
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	4603      	mov	r3, r0
 80034d6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	4619      	mov	r1, r3
 80034dc:	2005      	movs	r0, #5
 80034de:	f7ff fe9f 	bl	8003220 <nRF24_WriteReg>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	3b02      	subs	r3, #2
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	4619      	mov	r1, r3
 80034fc:	2003      	movs	r0, #3
 80034fe:	f7ff fe8f 	bl	8003220 <nRF24_WriteReg>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	6039      	str	r1, [r7, #0]
 8003516:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	2b06      	cmp	r3, #6
 800351c:	d00a      	beq.n	8003534 <nRF24_SetAddr+0x28>
 800351e:	2b06      	cmp	r3, #6
 8003520:	dc36      	bgt.n	8003590 <nRF24_SetAddr+0x84>
 8003522:	2b01      	cmp	r3, #1
 8003524:	dc02      	bgt.n	800352c <nRF24_SetAddr+0x20>
 8003526:	2b00      	cmp	r3, #0
 8003528:	da04      	bge.n	8003534 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 800352a:	e031      	b.n	8003590 <nRF24_SetAddr+0x84>
 800352c:	3b02      	subs	r3, #2
	switch (pipe) {
 800352e:	2b03      	cmp	r3, #3
 8003530:	d82e      	bhi.n	8003590 <nRF24_SetAddr+0x84>
 8003532:	e023      	b.n	800357c <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8003534:	2003      	movs	r0, #3
 8003536:	f7ff fe59 	bl	80031ec <nRF24_ReadReg>
 800353a:	4603      	mov	r3, r0
 800353c:	3301      	adds	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	4413      	add	r3, r2
 8003546:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8003548:	f7ff fe1c 	bl	8003184 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	4a13      	ldr	r2, [pc, #76]	; (800359c <nRF24_SetAddr+0x90>)
 8003550:	5cd3      	ldrb	r3, [r2, r3]
 8003552:	f043 0320 	orr.w	r3, r3, #32
 8003556:	b2db      	uxtb	r3, r3
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fe2b 	bl	80031b4 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	1e5a      	subs	r2, r3, #1
 8003562:	603a      	str	r2, [r7, #0]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fe24 	bl	80031b4 <nRF24_LL_RW>
			} while (addr_width--);
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	1e5a      	subs	r2, r3, #1
 8003570:	73fa      	strb	r2, [r7, #15]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f3      	bne.n	800355e <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 8003576:	f7ff fe11 	bl	800319c <nRF24_CSN_H>
			break;
 800357a:	e00a      	b.n	8003592 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	4a07      	ldr	r2, [pc, #28]	; (800359c <nRF24_SetAddr+0x90>)
 8003580:	5cd2      	ldrb	r2, [r2, r3]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	4619      	mov	r1, r3
 8003588:	4610      	mov	r0, r2
 800358a:	f7ff fe49 	bl	8003220 <nRF24_WriteReg>
			break;
 800358e:	e000      	b.n	8003592 <nRF24_SetAddr+0x86>
			break;
 8003590:	bf00      	nop
	}
}
 8003592:	bf00      	nop
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	08012310 	.word	0x08012310

080035a0 <nRF24_SetDataRate>:
}

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80035aa:	2006      	movs	r0, #6
 80035ac:	f7ff fe1e 	bl	80031ec <nRF24_ReadReg>
 80035b0:	4603      	mov	r3, r0
 80035b2:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80035ba:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	4619      	mov	r1, r3
 80035c8:	2006      	movs	r0, #6
 80035ca:	f7ff fe29 	bl	8003220 <nRF24_WriteReg>
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
 80035e2:	460b      	mov	r3, r1
 80035e4:	71bb      	strb	r3, [r7, #6]
 80035e6:	4613      	mov	r3, r2
 80035e8:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 80035ea:	2002      	movs	r0, #2
 80035ec:	f7ff fdfe 	bl	80031ec <nRF24_ReadReg>
 80035f0:	4603      	mov	r3, r0
 80035f2:	b25a      	sxtb	r2, r3
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	4313      	orrs	r3, r2
 8003600:	b25b      	sxtb	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003608:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	4619      	mov	r1, r3
 800360e:	2002      	movs	r0, #2
 8003610:	f7ff fe06 	bl	8003220 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	4a19      	ldr	r2, [pc, #100]	; (800367c <nRF24_SetRXPipe+0xa4>)
 8003618:	5cd2      	ldrb	r2, [r2, r3]
 800361a:	797b      	ldrb	r3, [r7, #5]
 800361c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003620:	b2db      	uxtb	r3, r3
 8003622:	4619      	mov	r1, r3
 8003624:	4610      	mov	r0, r2
 8003626:	f7ff fdfb 	bl	8003220 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 800362a:	2001      	movs	r0, #1
 800362c:	f7ff fdde 	bl	80031ec <nRF24_ReadReg>
 8003630:	4603      	mov	r3, r0
 8003632:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8003634:	79bb      	ldrb	r3, [r7, #6]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d10a      	bne.n	8003650 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	2201      	movs	r2, #1
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	b25a      	sxtb	r2, r3
 8003644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003648:	4313      	orrs	r3, r2
 800364a:	b25b      	sxtb	r3, r3
 800364c:	73fb      	strb	r3, [r7, #15]
 800364e:	e00b      	b.n	8003668 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	2201      	movs	r2, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	b25b      	sxtb	r3, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	b25a      	sxtb	r2, r3
 800365e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003662:	4013      	ands	r3, r2
 8003664:	b25b      	sxtb	r3, r3
 8003666:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	4619      	mov	r1, r3
 800366c:	2001      	movs	r0, #1
 800366e:	f7ff fdd7 	bl	8003220 <nRF24_WriteReg>
}
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	08012308 	.word	0x08012308

08003680 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	2b05      	cmp	r3, #5
 800368e:	d904      	bls.n	800369a <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8003690:	2100      	movs	r1, #0
 8003692:	2001      	movs	r0, #1
 8003694:	f7ff fdc4 	bl	8003220 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8003698:	e015      	b.n	80036c6 <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 800369a:	2001      	movs	r0, #1
 800369c:	f7ff fda6 	bl	80031ec <nRF24_ReadReg>
 80036a0:	4603      	mov	r3, r0
 80036a2:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	2201      	movs	r2, #1
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	b25b      	sxtb	r3, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	b25a      	sxtb	r2, r3
 80036b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b6:	4013      	ands	r3, r2
 80036b8:	b25b      	sxtb	r3, r3
 80036ba:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	4619      	mov	r1, r3
 80036c0:	2001      	movs	r0, #1
 80036c2:	f7ff fdad 	bl	8003220 <nRF24_WriteReg>
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 80036ce:	b580      	push	{r7, lr}
 80036d0:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 80036d2:	2007      	movs	r0, #7
 80036d4:	f7ff fd8a 	bl	80031ec <nRF24_ReadReg>
 80036d8:	4603      	mov	r3, r0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	bd80      	pop	{r7, pc}

080036de <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 80036de:	b580      	push	{r7, lr}
 80036e0:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 80036e2:	21ff      	movs	r1, #255	; 0xff
 80036e4:	20e1      	movs	r0, #225	; 0xe1
 80036e6:	f7ff fd9b 	bl	8003220 <nRF24_WriteReg>
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}

080036ee <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 80036ee:	b580      	push	{r7, lr}
 80036f0:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 80036f2:	21ff      	movs	r1, #255	; 0xff
 80036f4:	20e2      	movs	r0, #226	; 0xe2
 80036f6:	f7ff fd93 	bl	8003220 <nRF24_WriteReg>
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}

080036fe <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8003704:	2007      	movs	r0, #7
 8003706:	f7ff fd71 	bl	80031ec <nRF24_ReadReg>
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003714:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	4619      	mov	r1, r3
 800371a:	2007      	movs	r0, #7
 800371c:	f7ff fd80 	bl	8003220 <nRF24_WriteReg>
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <nRF24_GetRxDplPayloadWidth>:
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

static uint8_t nRF24_GetRxDplPayloadWidth() {
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 800372e:	f7ff fd29 	bl	8003184 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8003732:	2060      	movs	r0, #96	; 0x60
 8003734:	f7ff fd3e 	bl	80031b4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8003738:	20ff      	movs	r0, #255	; 0xff
 800373a:	f7ff fd3b 	bl	80031b4 <nRF24_LL_RW>
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8003742:	f7ff fd2b 	bl	800319c <nRF24_CSN_H>

	return value;
 8003746:	79fb      	ldrb	r3, [r7, #7]

}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	4613      	mov	r3, r2
 800375c:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800375e:	2007      	movs	r0, #7
 8003760:	f7ff fd44 	bl	80031ec <nRF24_ReadReg>
 8003764:	4603      	mov	r3, r0
 8003766:	105b      	asrs	r3, r3, #1
 8003768:	b2db      	uxtb	r3, r3
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	2b05      	cmp	r3, #5
 8003774:	d829      	bhi.n	80037ca <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00f      	beq.n	800379c <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 800377c:	f7ff ffd4 	bl	8003728 <nRF24_GetRxDplPayloadWidth>
 8003780:	4603      	mov	r3, r0
 8003782:	461a      	mov	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b20      	cmp	r3, #32
 800378e:	d90f      	bls.n	80037b0 <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8003796:	f7ff ffaa 	bl	80036ee <nRF24_FlushRX>
 800379a:	e009      	b.n	80037b0 <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 800379c:	7dfb      	ldrb	r3, [r7, #23]
 800379e:	4a0f      	ldr	r2, [pc, #60]	; (80037dc <nRF24_ReadPayloadGeneric+0x8c>)
 80037a0:	5cd3      	ldrb	r3, [r2, r3]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fd22 	bl	80031ec <nRF24_ReadReg>
 80037a8:	4603      	mov	r3, r0
 80037aa:	461a      	mov	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	68f9      	ldr	r1, [r7, #12]
 80037c0:	2061      	movs	r0, #97	; 0x61
 80037c2:	f7ff fd65 	bl	8003290 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	e003      	b.n	80037d2 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 80037d0:	23ff      	movs	r3, #255	; 0xff
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	08012308 	.word	0x08012308

080037e0 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
 80037ea:	2200      	movs	r2, #0
 80037ec:	6839      	ldr	r1, [r7, #0]
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ffae 	bl	8003750 <nRF24_ReadPayloadGeneric>
 80037f4:	4603      	mov	r3, r0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <i2c1_pisiRegister>:
 *  Created on: Jan 5, 2022
 *      Author: ddomi
 */
#include "robotPeriferija.h"

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af04      	add	r7, sp, #16
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
 800380a:	460b      	mov	r3, r1
 800380c:	71bb      	strb	r3, [r7, #6]
 800380e:	4613      	mov	r3, r2
 8003810:	717b      	strb	r3, [r7, #5]
  naprava <<= 1;
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	71fb      	strb	r3, [r7, #7]
  return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	b299      	uxth	r1, r3
 800381c:	79bb      	ldrb	r3, [r7, #6]
 800381e:	b29a      	uxth	r2, r3
 8003820:	230a      	movs	r3, #10
 8003822:	9302      	str	r3, [sp, #8]
 8003824:	2301      	movs	r3, #1
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	1d7b      	adds	r3, r7, #5
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2301      	movs	r3, #1
 800382e:	4804      	ldr	r0, [pc, #16]	; (8003840 <i2c1_pisiRegister+0x40>)
 8003830:	f002 fd44 	bl	80062bc <HAL_I2C_Mem_Write>
 8003834:	4603      	mov	r3, r0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20013484 	.word	0x20013484

08003844 <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af04      	add	r7, sp, #16
 800384a:	603a      	str	r2, [r7, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	4603      	mov	r3, r0
 8003850:	71fb      	strb	r3, [r7, #7]
 8003852:	460b      	mov	r3, r1
 8003854:	71bb      	strb	r3, [r7, #6]
 8003856:	4613      	mov	r3, r2
 8003858:	717b      	strb	r3, [r7, #5]
  if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 800385a:	797b      	ldrb	r3, [r7, #5]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d906      	bls.n	800386e <i2c1_beriRegistre+0x2a>
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	2b19      	cmp	r3, #25
 8003864:	d103      	bne.n	800386e <i2c1_beriRegistre+0x2a>
    reg |= 0x80;
 8003866:	79bb      	ldrb	r3, [r7, #6]
 8003868:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800386c:	71bb      	strb	r3, [r7, #6]
  naprava <<= 1;
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	b299      	uxth	r1, r3
 8003878:	79bb      	ldrb	r3, [r7, #6]
 800387a:	b298      	uxth	r0, r3
 800387c:	797b      	ldrb	r3, [r7, #5]
 800387e:	b29b      	uxth	r3, r3
 8003880:	797a      	ldrb	r2, [r7, #5]
 8003882:	9202      	str	r2, [sp, #8]
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	2301      	movs	r3, #1
 800388c:	4602      	mov	r2, r0
 800388e:	4803      	ldr	r0, [pc, #12]	; (800389c <i2c1_beriRegistre+0x58>)
 8003890:	f002 fe0e 	bl	80064b0 <HAL_I2C_Mem_Read>
}
 8003894:	bf00      	nop
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20013484 	.word	0x20013484

080038a0 <spi1_beriRegister>:

uint8_t spi1_beriRegister(uint8_t reg) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	4603      	mov	r3, r0
 80038a8:	71fb      	strb	r3, [r7, #7]
	uint16_t buf_out, buf_in;
	reg |= 0x80; // najpomembnejsi bit na 1
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038b0:	71fb      	strb	r3, [r7, #7]
	buf_out = reg; // little endian, se postavi na pravo mesto ....
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80038b8:	2200      	movs	r2, #0
 80038ba:	2108      	movs	r1, #8
 80038bc:	4812      	ldr	r0, [pc, #72]	; (8003908 <spi1_beriRegister+0x68>)
 80038be:	f002 fb87 	bl	8005fd0 <HAL_GPIO_WritePin>
	//HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
	HAL_SPI_TransmitReceive(&hspi1, &((uint8_t*)&buf_out)[0], &((uint8_t*)&buf_in)[0], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 80038c2:	f107 020c 	add.w	r2, r7, #12
 80038c6:	f107 010e 	add.w	r1, r7, #14
 80038ca:	2302      	movs	r3, #2
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	2301      	movs	r3, #1
 80038d0:	480e      	ldr	r0, [pc, #56]	; (800390c <spi1_beriRegister+0x6c>)
 80038d2:	f005 fc6d 	bl	80091b0 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, &((uint8_t*)&buf_out)[1], &((uint8_t*)&buf_in)[1], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 80038d6:	f107 010e 	add.w	r1, r7, #14
 80038da:	3101      	adds	r1, #1
 80038dc:	f107 020c 	add.w	r2, r7, #12
 80038e0:	3201      	adds	r2, #1
 80038e2:	2302      	movs	r3, #2
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	2301      	movs	r3, #1
 80038e8:	4808      	ldr	r0, [pc, #32]	; (800390c <spi1_beriRegister+0x6c>)
 80038ea:	f005 fc61 	bl	80091b0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80038ee:	2201      	movs	r2, #1
 80038f0:	2108      	movs	r1, #8
 80038f2:	4805      	ldr	r0, [pc, #20]	; (8003908 <spi1_beriRegister+0x68>)
 80038f4:	f002 fb6c 	bl	8005fd0 <HAL_GPIO_WritePin>
	return buf_in >> 8; // little endian...
 80038f8:	89bb      	ldrh	r3, [r7, #12]
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	200139bc 	.word	0x200139bc

08003910 <spi1_pisiRegister>:

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	460a      	mov	r2, r1
 800391a:	71fb      	strb	r3, [r7, #7]
 800391c:	4613      	mov	r3, r2
 800391e:	71bb      	strb	r3, [r7, #6]
  uint16_t buf_out;
  buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	b21a      	sxth	r2, r3
 8003924:	79bb      	ldrb	r3, [r7, #6]
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	b21b      	sxth	r3, r3
 800392a:	4313      	orrs	r3, r2
 800392c:	b21b      	sxth	r3, r3
 800392e:	b29b      	uxth	r3, r3
 8003930:	81fb      	strh	r3, [r7, #14]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8003932:	2200      	movs	r2, #0
 8003934:	2108      	movs	r1, #8
 8003936:	480d      	ldr	r0, [pc, #52]	; (800396c <spi1_pisiRegister+0x5c>)
 8003938:	f002 fb4a 	bl	8005fd0 <HAL_GPIO_WritePin>
  //HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
  HAL_SPI_Transmit(&hspi1, &((uint8_t*)&buf_out)[0], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 800393c:	f107 010e 	add.w	r1, r7, #14
 8003940:	2302      	movs	r3, #2
 8003942:	2201      	movs	r2, #1
 8003944:	480a      	ldr	r0, [pc, #40]	; (8003970 <spi1_pisiRegister+0x60>)
 8003946:	f005 f9e6 	bl	8008d16 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &((uint8_t*)&buf_out)[1], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 800394a:	f107 010e 	add.w	r1, r7, #14
 800394e:	3101      	adds	r1, #1
 8003950:	2302      	movs	r3, #2
 8003952:	2201      	movs	r2, #1
 8003954:	4806      	ldr	r0, [pc, #24]	; (8003970 <spi1_pisiRegister+0x60>)
 8003956:	f005 f9de 	bl	8008d16 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800395a:	2201      	movs	r2, #1
 800395c:	2108      	movs	r1, #8
 800395e:	4803      	ldr	r0, [pc, #12]	; (800396c <spi1_pisiRegister+0x5c>)
 8003960:	f002 fb36 	bl	8005fd0 <HAL_GPIO_WritePin>
}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000
 8003970:	200139bc 	.word	0x200139bc

08003974 <spi1_beriRegistre>:

void spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	71fb      	strb	r3, [r7, #7]
 8003980:	4613      	mov	r3, r2
 8003982:	71bb      	strb	r3, [r7, #6]
  reg |= 0xC0; // najpomembnejsa bita na 1
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800398a:	b2db      	uxtb	r3, r3
 800398c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800398e:	2200      	movs	r2, #0
 8003990:	2108      	movs	r1, #8
 8003992:	480c      	ldr	r0, [pc, #48]	; (80039c4 <spi1_beriRegistre+0x50>)
 8003994:	f002 fb1c 	bl	8005fd0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 8003998:	1df9      	adds	r1, r7, #7
 800399a:	230a      	movs	r3, #10
 800399c:	2201      	movs	r2, #1
 800399e:	480a      	ldr	r0, [pc, #40]	; (80039c8 <spi1_beriRegistre+0x54>)
 80039a0:	f005 f9b9 	bl	8008d16 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 80039a4:	79bb      	ldrb	r3, [r7, #6]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	79bb      	ldrb	r3, [r7, #6]
 80039aa:	6839      	ldr	r1, [r7, #0]
 80039ac:	4806      	ldr	r0, [pc, #24]	; (80039c8 <spi1_beriRegistre+0x54>)
 80039ae:	f005 faee 	bl	8008f8e <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80039b2:	2201      	movs	r2, #1
 80039b4:	2108      	movs	r1, #8
 80039b6:	4803      	ldr	r0, [pc, #12]	; (80039c4 <spi1_beriRegistre+0x50>)
 80039b8:	f002 fb0a 	bl	8005fd0 <HAL_GPIO_WritePin>
}
 80039bc:	bf00      	nop
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000
 80039c8:	200139bc 	.word	0x200139bc

080039cc <nastaviPospeskometer>:

void nastaviPospeskometer(){
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
	//register maping lsm303agr.pdf page(43)
	//0x23 0x40 BLE litle endian
	i2c1_pisiRegister(0x19, 0x21, 0x0);
 80039d0:	2200      	movs	r2, #0
 80039d2:	2121      	movs	r1, #33	; 0x21
 80039d4:	2019      	movs	r0, #25
 80039d6:	f7ff ff13 	bl	8003800 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x24, 0x0);
 80039da:	2200      	movs	r2, #0
 80039dc:	2124      	movs	r1, #36	; 0x24
 80039de:	2019      	movs	r0, #25
 80039e0:	f7ff ff0e 	bl	8003800 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x25, 0x0);
 80039e4:	2200      	movs	r2, #0
 80039e6:	2125      	movs	r1, #37	; 0x25
 80039e8:	2019      	movs	r0, #25
 80039ea:	f7ff ff09 	bl	8003800 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x26, 0x0);
 80039ee:	2200      	movs	r2, #0
 80039f0:	2126      	movs	r1, #38	; 0x26
 80039f2:	2019      	movs	r0, #25
 80039f4:	f7ff ff04 	bl	8003800 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x20, 0x67);  //ctrl_reg1 zbudi pospeskometer in omogoci osi //0x20 0x67 200Hz enable XYZ
 80039f8:	2267      	movs	r2, #103	; 0x67
 80039fa:	2120      	movs	r1, #32
 80039fc:	2019      	movs	r0, #25
 80039fe:	f7ff feff 	bl	8003800 <i2c1_pisiRegister>
	//block data update HR=1 oprating mode selection 12bit data output LPen = 0 (low power mode disabled) FS0 = 1(+-4g obcutljivost)
	i2c1_pisiRegister(0x19, 0x23, 0x8);  //ctrl_reg4 nastavi posodobitev samo ko se prebere vrednost ter locljivost +-2g
 8003a02:	2208      	movs	r2, #8
 8003a04:	2123      	movs	r1, #35	; 0x23
 8003a06:	2019      	movs	r0, #25
 8003a08:	f7ff fefa 	bl	8003800 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x22, 0x10);  //0x22 0x10 DRDY1 INT1 pin enable pe4
 8003a0c:	2210      	movs	r2, #16
 8003a0e:	2122      	movs	r1, #34	; 0x22
 8003a10:	2019      	movs	r0, #25
 8003a12:	f7ff fef5 	bl	8003800 <i2c1_pisiRegister>
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <nastaviMagnetometer>:
void nastaviMagnetometer(){
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	af00      	add	r7, sp, #0
	i2c1_pisiRegister(0x1e, 0x60, 0xC); //cfg_reg_a_m ODR= 100HZ
 8003a1e:	220c      	movs	r2, #12
 8003a20:	2160      	movs	r1, #96	; 0x60
 8003a22:	201e      	movs	r0, #30
 8003a24:	f7ff feec 	bl	8003800 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x1e, 0x61, 0x0); //cfg_reg_b_m
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2161      	movs	r1, #97	; 0x61
 8003a2c:	201e      	movs	r0, #30
 8003a2e:	f7ff fee7 	bl	8003800 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x1e, 0x62, 0x1); //cfg_reg_c_m INT_MAG=1 INT_MAG_PIN=0 BDU=0
 8003a32:	2201      	movs	r2, #1
 8003a34:	2162      	movs	r1, #98	; 0x62
 8003a36:	201e      	movs	r0, #30
 8003a38:	f7ff fee2 	bl	8003800 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x1e, 0x63, 0xE5); //int_ctrl_reg_m enable XYZ in IEN=1 interupt generation enable IEA=1
 8003a3c:	22e5      	movs	r2, #229	; 0xe5
 8003a3e:	2163      	movs	r1, #99	; 0x63
 8003a40:	201e      	movs	r0, #30
 8003a42:	f7ff fedd 	bl	8003800 <i2c1_pisiRegister>
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <nastaviGiroskop>:

void nastaviGiroskop() {
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
  // preverimo ali smo "poklicali" pravi senzor
  uint8_t cip = spi1_beriRegister(0x0F);
 8003a50:	200f      	movs	r0, #15
 8003a52:	f7ff ff25 	bl	80038a0 <spi1_beriRegister>
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
  if (cip!=0xD4 && cip!=0xD3) {
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	2bd4      	cmp	r3, #212	; 0xd4
 8003a5e:	d003      	beq.n	8003a68 <nastaviGiroskop+0x1e>
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	2bd3      	cmp	r3, #211	; 0xd3
 8003a64:	d000      	beq.n	8003a68 <nastaviGiroskop+0x1e>
	for (;;); //napaka ni senzorja
 8003a66:	e7fe      	b.n	8003a66 <nastaviGiroskop+0x1c>
  }
  spi1_pisiRegister(0x21,0);//REG2 register za high pass filter
 8003a68:	2100      	movs	r1, #0
 8003a6a:	2021      	movs	r0, #33	; 0x21
 8003a6c:	f7ff ff50 	bl	8003910 <spi1_pisiRegister>
  spi1_pisiRegister(0x22,0x8);//REG3 interupt INT1 disable DRDY/INT2 enable
 8003a70:	2108      	movs	r1, #8
 8003a72:	2022      	movs	r0, #34	; 0x22
 8003a74:	f7ff ff4c 	bl	8003910 <spi1_pisiRegister>
    //0001 0000 FS-01 500dps
  spi1_pisiRegister(0x23,0x10);//REG4 MSB@lower addres 500deg/s 0x10 BLE = 0 BIGendian
 8003a78:	2110      	movs	r1, #16
 8003a7a:	2023      	movs	r0, #35	; 0x23
 8003a7c:	f7ff ff48 	bl	8003910 <spi1_pisiRegister>

  spi1_pisiRegister(0x25,0);//REFRENCE
 8003a80:	2100      	movs	r1, #0
 8003a82:	2025      	movs	r0, #37	; 0x25
 8003a84:	f7ff ff44 	bl	8003910 <spi1_pisiRegister>
  spi1_pisiRegister(0x2e,0);//FIFO_CTRL
 8003a88:	2100      	movs	r1, #0
 8003a8a:	202e      	movs	r0, #46	; 0x2e
 8003a8c:	f7ff ff40 	bl	8003910 <spi1_pisiRegister>
  spi1_pisiRegister(0x32,0);//INT1_THS
 8003a90:	2100      	movs	r1, #0
 8003a92:	2032      	movs	r0, #50	; 0x32
 8003a94:	f7ff ff3c 	bl	8003910 <spi1_pisiRegister>
  spi1_pisiRegister(0x33,0);//INT1_THS
 8003a98:	2100      	movs	r1, #0
 8003a9a:	2033      	movs	r0, #51	; 0x33
 8003a9c:	f7ff ff38 	bl	8003910 <spi1_pisiRegister>
  spi1_pisiRegister(0x34,0);//INT1_THS
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	2034      	movs	r0, #52	; 0x34
 8003aa4:	f7ff ff34 	bl	8003910 <spi1_pisiRegister>
  spi1_pisiRegister(0x35,0);//INT1_THS
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	2035      	movs	r0, #53	; 0x35
 8003aac:	f7ff ff30 	bl	8003910 <spi1_pisiRegister>
  spi1_pisiRegister(0x36,0);//INT1_THS
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	2036      	movs	r0, #54	; 0x36
 8003ab4:	f7ff ff2c 	bl	8003910 <spi1_pisiRegister>
  spi1_pisiRegister(0x37,0);//INT1_THS
 8003ab8:	2100      	movs	r1, #0
 8003aba:	2037      	movs	r0, #55	; 0x37
 8003abc:	f7ff ff28 	bl	8003910 <spi1_pisiRegister>
  spi1_pisiRegister(0x38,0);//INT1_DUR
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	2038      	movs	r0, #56	; 0x38
 8003ac4:	f7ff ff24 	bl	8003910 <spi1_pisiRegister>
  spi1_pisiRegister(0x30,0);//INT1_CFG
 8003ac8:	2100      	movs	r1, #0
 8003aca:	2030      	movs	r0, #48	; 0x30
 8003acc:	f7ff ff20 	bl	8003910 <spi1_pisiRegister>


  spi1_pisiRegister(0x24,0);//REG5
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	2024      	movs	r0, #36	; 0x24
 8003ad4:	f7ff ff1c 	bl	8003910 <spi1_pisiRegister>
  //0101 1111 : (1111)=(PD,Zen,Yen,Xen)
  spi1_pisiRegister(0x20,0x5f);//CTRL_REG1 omogoci x-1,y-1,z-1,PD-1(normal mode) DR = 01 BW = 10 cutof=25 200hz
 8003ad8:	215f      	movs	r1, #95	; 0x5f
 8003ada:	2020      	movs	r0, #32
 8003adc:	f7ff ff18 	bl	8003910 <spi1_pisiRegister>

  spi1_pisiRegister(0x20, 0x0F);//CTRL REG1 zbudi ziroskop in omogoci osi
 8003ae0:	210f      	movs	r1, #15
 8003ae2:	2020      	movs	r0, #32
 8003ae4:	f7ff ff14 	bl	8003910 <spi1_pisiRegister>
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <izracunajPovprecjeInt16>:



int16_t izracunajPovprecjeInt16(struct tekocePovprecjeInt16* data,int16_t nov, uint8_t cleni){
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	807b      	strh	r3, [r7, #2]
 8003afc:	4613      	mov	r3, r2
 8003afe:	707b      	strb	r3, [r7, #1]
	data->sum =  data->sum + nov - data->vals[data->index]; //pristejemo trenutno vrednost in odstejemo zadnjo
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b08:	4413      	add	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	7812      	ldrb	r2, [r2, #0]
 8003b0e:	4611      	mov	r1, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	3104      	adds	r1, #4
 8003b14:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8003b18:	1a9a      	subs	r2, r3, r2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	605a      	str	r2, [r3, #4]
	data->vals[data->index] = nov; //na zadnjo zamenjamo z novo
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3204      	adds	r2, #4
 8003b28:	8879      	ldrh	r1, [r7, #2]
 8003b2a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	data->index++;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	3301      	adds	r3, #1
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	701a      	strb	r2, [r3, #0]
	if(cleni > STEVILO_CLENOV_TP){cleni = STEVILO_CLENOV_TP;}
 8003b3a:	787b      	ldrb	r3, [r7, #1]
 8003b3c:	2b3c      	cmp	r3, #60	; 0x3c
 8003b3e:	d901      	bls.n	8003b44 <izracunajPovprecjeInt16+0x54>
 8003b40:	233c      	movs	r3, #60	; 0x3c
 8003b42:	707b      	strb	r3, [r7, #1]
	if(data->index >= cleni){data->index = 0;}
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	787a      	ldrb	r2, [r7, #1]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d802      	bhi.n	8003b54 <izracunajPovprecjeInt16+0x64>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
	data->avrage =  data->sum/cleni;//izracunamo povprecje
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	787b      	ldrb	r3, [r7, #1]
 8003b5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003b5e:	b21a      	sxth	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	805a      	strh	r2, [r3, #2]
	return data->avrage;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <nastaviMotor>:

void nastaviMotor(enum motor m,int16_t pwm){
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	460a      	mov	r2, r1
 8003b82:	71fb      	strb	r3, [r7, #7]
 8003b84:	4613      	mov	r3, r2
 8003b86:	80bb      	strh	r3, [r7, #4]
	int8_t foward = 1;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
	if(pwm < 0){
 8003b8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	da05      	bge.n	8003ba0 <nastaviMotor+0x28>
		pwm = (~(pwm)+1); foward=0;
 8003b94:	88bb      	ldrh	r3, [r7, #4]
 8003b96:	425b      	negs	r3, r3
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	80bb      	strh	r3, [r7, #4]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	73fb      	strb	r3, [r7, #15]
	}
	if(pwm > 999){pwm = 999;}
 8003ba0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba8:	db02      	blt.n	8003bb0 <nastaviMotor+0x38>
 8003baa:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003bae:	80bb      	strh	r3, [r7, #4]
	if(pwm == 0){foward = -1;}
 8003bb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <nastaviMotor+0x44>
 8003bb8:	23ff      	movs	r3, #255	; 0xff
 8003bba:	73fb      	strb	r3, [r7, #15]
	switch(m){
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	f200 80db 	bhi.w	8003d7a <nastaviMotor+0x202>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <nastaviMotor+0x54>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003cab 	.word	0x08003cab
 8003bd0:	08003c43 	.word	0x08003c43
 8003bd4:	08003d13 	.word	0x08003d13
 8003bd8:	08003bdd 	.word	0x08003bdd
	case LF:
		//TIM3->CCR4 = izracunajPovprecjeInt16(&M1,pwm,MOTORJI_IZHOD_TP_CLENI);
		TIM3->CCR4 = pwm;
 8003bdc:	4a6a      	ldr	r2, [pc, #424]	; (8003d88 <nastaviMotor+0x210>)
 8003bde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003be2:	6413      	str	r3, [r2, #64]	; 0x40
		if(foward == 1){GPIOE->ODR |= (1<<10); GPIOE->ODR &= ~(1<<12);}
 8003be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d10c      	bne.n	8003c06 <nastaviMotor+0x8e>
 8003bec:	4b67      	ldr	r3, [pc, #412]	; (8003d8c <nastaviMotor+0x214>)
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	4a66      	ldr	r2, [pc, #408]	; (8003d8c <nastaviMotor+0x214>)
 8003bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bf6:	6153      	str	r3, [r2, #20]
 8003bf8:	4b64      	ldr	r3, [pc, #400]	; (8003d8c <nastaviMotor+0x214>)
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	4a63      	ldr	r2, [pc, #396]	; (8003d8c <nastaviMotor+0x214>)
 8003bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c02:	6153      	str	r3, [r2, #20]
		else if(foward < 0){GPIOE->ODR &= ~(1<<10); GPIOE->ODR &= ~(1<<12);}
		else{GPIOE->ODR &= ~(1<<10); GPIOE->ODR |= (1<<12);}
		break;
 8003c04:	e0b9      	b.n	8003d7a <nastaviMotor+0x202>
		else if(foward < 0){GPIOE->ODR &= ~(1<<10); GPIOE->ODR &= ~(1<<12);}
 8003c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	da0c      	bge.n	8003c28 <nastaviMotor+0xb0>
 8003c0e:	4b5f      	ldr	r3, [pc, #380]	; (8003d8c <nastaviMotor+0x214>)
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	4a5e      	ldr	r2, [pc, #376]	; (8003d8c <nastaviMotor+0x214>)
 8003c14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c18:	6153      	str	r3, [r2, #20]
 8003c1a:	4b5c      	ldr	r3, [pc, #368]	; (8003d8c <nastaviMotor+0x214>)
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	4a5b      	ldr	r2, [pc, #364]	; (8003d8c <nastaviMotor+0x214>)
 8003c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c24:	6153      	str	r3, [r2, #20]
		break;
 8003c26:	e0a8      	b.n	8003d7a <nastaviMotor+0x202>
		else{GPIOE->ODR &= ~(1<<10); GPIOE->ODR |= (1<<12);}
 8003c28:	4b58      	ldr	r3, [pc, #352]	; (8003d8c <nastaviMotor+0x214>)
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	4a57      	ldr	r2, [pc, #348]	; (8003d8c <nastaviMotor+0x214>)
 8003c2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c32:	6153      	str	r3, [r2, #20]
 8003c34:	4b55      	ldr	r3, [pc, #340]	; (8003d8c <nastaviMotor+0x214>)
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	4a54      	ldr	r2, [pc, #336]	; (8003d8c <nastaviMotor+0x214>)
 8003c3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c3e:	6153      	str	r3, [r2, #20]
		break;
 8003c40:	e09b      	b.n	8003d7a <nastaviMotor+0x202>
	case RB:
		//TIM2->CCR4 = izracunajPovprecjeInt16(&M2,pwm,MOTORJI_IZHOD_TP_CLENI);
		TIM2->CCR4 = pwm;
 8003c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c4a:	6413      	str	r3, [r2, #64]	; 0x40
		if(foward == 1){GPIOE->ODR |= (1<<14); GPIOE->ODR &= ~(1<<13);}
 8003c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d10c      	bne.n	8003c6e <nastaviMotor+0xf6>
 8003c54:	4b4d      	ldr	r3, [pc, #308]	; (8003d8c <nastaviMotor+0x214>)
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	4a4c      	ldr	r2, [pc, #304]	; (8003d8c <nastaviMotor+0x214>)
 8003c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c5e:	6153      	str	r3, [r2, #20]
 8003c60:	4b4a      	ldr	r3, [pc, #296]	; (8003d8c <nastaviMotor+0x214>)
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	4a49      	ldr	r2, [pc, #292]	; (8003d8c <nastaviMotor+0x214>)
 8003c66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c6a:	6153      	str	r3, [r2, #20]
		else if(foward < 0){GPIOE->ODR &= ~(1<<14); GPIOE->ODR &= ~(1<<13);}
		else{GPIOE->ODR &= ~(1<<14); GPIOE->ODR |= (1<<13);}
		break;
 8003c6c:	e085      	b.n	8003d7a <nastaviMotor+0x202>
		else if(foward < 0){GPIOE->ODR &= ~(1<<14); GPIOE->ODR &= ~(1<<13);}
 8003c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	da0c      	bge.n	8003c90 <nastaviMotor+0x118>
 8003c76:	4b45      	ldr	r3, [pc, #276]	; (8003d8c <nastaviMotor+0x214>)
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	4a44      	ldr	r2, [pc, #272]	; (8003d8c <nastaviMotor+0x214>)
 8003c7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c80:	6153      	str	r3, [r2, #20]
 8003c82:	4b42      	ldr	r3, [pc, #264]	; (8003d8c <nastaviMotor+0x214>)
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	4a41      	ldr	r2, [pc, #260]	; (8003d8c <nastaviMotor+0x214>)
 8003c88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c8c:	6153      	str	r3, [r2, #20]
		break;
 8003c8e:	e074      	b.n	8003d7a <nastaviMotor+0x202>
		else{GPIOE->ODR &= ~(1<<14); GPIOE->ODR |= (1<<13);}
 8003c90:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <nastaviMotor+0x214>)
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	4a3d      	ldr	r2, [pc, #244]	; (8003d8c <nastaviMotor+0x214>)
 8003c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c9a:	6153      	str	r3, [r2, #20]
 8003c9c:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <nastaviMotor+0x214>)
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	4a3a      	ldr	r2, [pc, #232]	; (8003d8c <nastaviMotor+0x214>)
 8003ca2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ca6:	6153      	str	r3, [r2, #20]
		break;
 8003ca8:	e067      	b.n	8003d7a <nastaviMotor+0x202>
	case RF:
		//TIM2->CCR3 = izracunajPovprecjeInt16(&M3,pwm,MOTORJI_IZHOD_TP_CLENI);
		TIM2->CCR3 = pwm;
 8003caa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cb2:	63d3      	str	r3, [r2, #60]	; 0x3c
		if(foward == 1){GPIOE->ODR |= (1<<8); GPIOE->ODR &= ~(1<<7);}
 8003cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d10c      	bne.n	8003cd6 <nastaviMotor+0x15e>
 8003cbc:	4b33      	ldr	r3, [pc, #204]	; (8003d8c <nastaviMotor+0x214>)
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	4a32      	ldr	r2, [pc, #200]	; (8003d8c <nastaviMotor+0x214>)
 8003cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc6:	6153      	str	r3, [r2, #20]
 8003cc8:	4b30      	ldr	r3, [pc, #192]	; (8003d8c <nastaviMotor+0x214>)
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	4a2f      	ldr	r2, [pc, #188]	; (8003d8c <nastaviMotor+0x214>)
 8003cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cd2:	6153      	str	r3, [r2, #20]
		else if(foward < 0){GPIOE->ODR &= ~(1<<8); GPIOE->ODR &= ~(1<<7);}
		else{GPIOE->ODR &= ~(1<<8); GPIOE->ODR |= (1<<7);}
		break;
 8003cd4:	e051      	b.n	8003d7a <nastaviMotor+0x202>
		else if(foward < 0){GPIOE->ODR &= ~(1<<8); GPIOE->ODR &= ~(1<<7);}
 8003cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	da0c      	bge.n	8003cf8 <nastaviMotor+0x180>
 8003cde:	4b2b      	ldr	r3, [pc, #172]	; (8003d8c <nastaviMotor+0x214>)
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	4a2a      	ldr	r2, [pc, #168]	; (8003d8c <nastaviMotor+0x214>)
 8003ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce8:	6153      	str	r3, [r2, #20]
 8003cea:	4b28      	ldr	r3, [pc, #160]	; (8003d8c <nastaviMotor+0x214>)
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	4a27      	ldr	r2, [pc, #156]	; (8003d8c <nastaviMotor+0x214>)
 8003cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf4:	6153      	str	r3, [r2, #20]
		break;
 8003cf6:	e040      	b.n	8003d7a <nastaviMotor+0x202>
		else{GPIOE->ODR &= ~(1<<8); GPIOE->ODR |= (1<<7);}
 8003cf8:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <nastaviMotor+0x214>)
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	4a23      	ldr	r2, [pc, #140]	; (8003d8c <nastaviMotor+0x214>)
 8003cfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d02:	6153      	str	r3, [r2, #20]
 8003d04:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <nastaviMotor+0x214>)
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	4a20      	ldr	r2, [pc, #128]	; (8003d8c <nastaviMotor+0x214>)
 8003d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d0e:	6153      	str	r3, [r2, #20]
		break;
 8003d10:	e033      	b.n	8003d7a <nastaviMotor+0x202>
	case LB:
		//TIM2->CCR2 = izracunajPovprecjeInt16(&M4,pwm,MOTORJI_IZHOD_TP_CLENI);
		TIM2->CCR2 = pwm;
 8003d12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d1a:	6393      	str	r3, [r2, #56]	; 0x38
		if(foward == 1){GPIOE->ODR |= (1<<9); GPIOE->ODR &= ~(1<<11);}
 8003d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d10c      	bne.n	8003d3e <nastaviMotor+0x1c6>
 8003d24:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <nastaviMotor+0x214>)
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	4a18      	ldr	r2, [pc, #96]	; (8003d8c <nastaviMotor+0x214>)
 8003d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d2e:	6153      	str	r3, [r2, #20]
 8003d30:	4b16      	ldr	r3, [pc, #88]	; (8003d8c <nastaviMotor+0x214>)
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	4a15      	ldr	r2, [pc, #84]	; (8003d8c <nastaviMotor+0x214>)
 8003d36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d3a:	6153      	str	r3, [r2, #20]
		else if(foward < 0){GPIOE->ODR &= ~(1<<9); GPIOE->ODR &= ~(1<<11);}
		else{GPIOE->ODR &= ~(1<<9); GPIOE->ODR |= (1<<11);}
		break;
 8003d3c:	e01c      	b.n	8003d78 <nastaviMotor+0x200>
		else if(foward < 0){GPIOE->ODR &= ~(1<<9); GPIOE->ODR &= ~(1<<11);}
 8003d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	da0c      	bge.n	8003d60 <nastaviMotor+0x1e8>
 8003d46:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <nastaviMotor+0x214>)
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	4a10      	ldr	r2, [pc, #64]	; (8003d8c <nastaviMotor+0x214>)
 8003d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d50:	6153      	str	r3, [r2, #20]
 8003d52:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <nastaviMotor+0x214>)
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	4a0d      	ldr	r2, [pc, #52]	; (8003d8c <nastaviMotor+0x214>)
 8003d58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d5c:	6153      	str	r3, [r2, #20]
		break;
 8003d5e:	e00b      	b.n	8003d78 <nastaviMotor+0x200>
		else{GPIOE->ODR &= ~(1<<9); GPIOE->ODR |= (1<<11);}
 8003d60:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <nastaviMotor+0x214>)
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <nastaviMotor+0x214>)
 8003d66:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d6a:	6153      	str	r3, [r2, #20]
 8003d6c:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <nastaviMotor+0x214>)
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	4a06      	ldr	r2, [pc, #24]	; (8003d8c <nastaviMotor+0x214>)
 8003d72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d76:	6153      	str	r3, [r2, #20]
		break;
 8003d78:	bf00      	nop
	}
}
 8003d7a:	bf00      	nop
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	40021000 	.word	0x40021000

08003d90 <normalize_v3f>:

extern volatile uint32_t timeSinceLastCommand;



float normalize_v3f(float* x, float* y, float* z){
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
	float norm = sqrt( (*x) * (*x) + (*y) * (*y) + (*z) * (*z) );
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	ed93 7a00 	vldr	s14, [r3]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	edd3 7a00 	vldr	s15, [r3]
 8003da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	edd3 6a00 	vldr	s13, [r3]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	edd3 7a00 	vldr	s15, [r3]
 8003db8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	edd3 6a00 	vldr	s13, [r3]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	edd3 7a00 	vldr	s15, [r3]
 8003dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dd4:	ee17 0a90 	vmov	r0, s15
 8003dd8:	f7fc fb66 	bl	80004a8 <__aeabi_f2d>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	ec43 2b10 	vmov	d0, r2, r3
 8003de4:	f00c fcd8 	bl	8010798 <sqrt>
 8003de8:	ec53 2b10 	vmov	r2, r3, d0
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	f7fc fe8a 	bl	8000b08 <__aeabi_d2f>
 8003df4:	4603      	mov	r3, r0
 8003df6:	617b      	str	r3, [r7, #20]
	*x /= norm;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	edd3 6a00 	vldr	s13, [r3]
 8003dfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	edc3 7a00 	vstr	s15, [r3]
	*y /= norm;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	edd3 6a00 	vldr	s13, [r3]
 8003e12:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	edc3 7a00 	vstr	s15, [r3]
	*z /= norm;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	edd3 6a00 	vldr	s13, [r3]
 8003e26:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	edc3 7a00 	vstr	s15, [r3]
}
 8003e34:	bf00      	nop
 8003e36:	eeb0 0a67 	vmov.f32	s0, s15
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <zgladiMotor>:

int16_t zgladiMotor(enum motor m, int16_t pwm){
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	460a      	mov	r2, r1
 8003e4a:	71fb      	strb	r3, [r7, #7]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	80bb      	strh	r3, [r7, #4]
	switch(m){
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d82e      	bhi.n	8003eb4 <zgladiMotor+0x74>
 8003e56:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <zgladiMotor+0x1c>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003e91 	.word	0x08003e91
 8003e60:	08003e7f 	.word	0x08003e7f
 8003e64:	08003ea3 	.word	0x08003ea3
 8003e68:	08003e6d 	.word	0x08003e6d
	case LF:
		return izracunajPovprecjeInt16(&M4,pwm,5);
 8003e6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e70:	2205      	movs	r2, #5
 8003e72:	4619      	mov	r1, r3
 8003e74:	4811      	ldr	r0, [pc, #68]	; (8003ebc <zgladiMotor+0x7c>)
 8003e76:	f7ff fe3b 	bl	8003af0 <izracunajPovprecjeInt16>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	e01a      	b.n	8003eb4 <zgladiMotor+0x74>
	case RB:
		return izracunajPovprecjeInt16(&M2,pwm,5);
 8003e7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e82:	2205      	movs	r2, #5
 8003e84:	4619      	mov	r1, r3
 8003e86:	480e      	ldr	r0, [pc, #56]	; (8003ec0 <zgladiMotor+0x80>)
 8003e88:	f7ff fe32 	bl	8003af0 <izracunajPovprecjeInt16>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	e011      	b.n	8003eb4 <zgladiMotor+0x74>
	case RF:
		return izracunajPovprecjeInt16(&M1,pwm,5);
 8003e90:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e94:	2205      	movs	r2, #5
 8003e96:	4619      	mov	r1, r3
 8003e98:	480a      	ldr	r0, [pc, #40]	; (8003ec4 <zgladiMotor+0x84>)
 8003e9a:	f7ff fe29 	bl	8003af0 <izracunajPovprecjeInt16>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	e008      	b.n	8003eb4 <zgladiMotor+0x74>
	case LB:
		return izracunajPovprecjeInt16(&M3,pwm,5);
 8003ea2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ea6:	2205      	movs	r2, #5
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4807      	ldr	r0, [pc, #28]	; (8003ec8 <zgladiMotor+0x88>)
 8003eac:	f7ff fe20 	bl	8003af0 <izracunajPovprecjeInt16>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	e7ff      	b.n	8003eb4 <zgladiMotor+0x74>
	}
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20013384 	.word	0x20013384
 8003ec0:	20013b34 	.word	0x20013b34
 8003ec4:	20013ab4 	.word	0x20013ab4
 8003ec8:	20013788 	.word	0x20013788
 8003ecc:	00000000 	.word	0x00000000

08003ed0 <speedControl>:

void speedControl(struct motorData* m, float deltaT){
 8003ed0:	b590      	push	{r4, r7, lr}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	ed87 0a00 	vstr	s0, [r7]
	//premakni motor z zeljeno hitrostjo
	//izracunaj hitrost z tekocim povprecjem
	float vel = (float)((m->poz - m->prevPoz)/deltaT)/1000;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003eee:	edd7 7a00 	vldr	s15, [r7]
 8003ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef6:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8004168 <speedControl+0x298>
 8003efa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003efe:	edc7 7a03 	vstr	s15, [r7, #12]
	m->prevPoz = m->poz;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	605a      	str	r2, [r3, #4]
	m->sum =  m->sum + vel - m->vals[m->index]; //pristejemo trenutno vrednost in odstejemo zadnjo
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003f10:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	3306      	adds	r3, #6
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	3304      	adds	r3, #4
 8003f28:	edd3 7a00 	vldr	s15, [r3]
 8003f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	m->vals[m->index] = vel; //na zadnjo zamenjamo z novo
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	3306      	adds	r3, #6
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	3304      	adds	r3, #4
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	601a      	str	r2, [r3, #0]
	m->index++;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003f50:	3301      	adds	r3, #1
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	if(m->index > 9){m->index = 0;}
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003f60:	2b09      	cmp	r3, #9
 8003f62:	d903      	bls.n	8003f6c <speedControl+0x9c>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	vel = m->sum/10; //izracunamo povprecje
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003f72:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003f76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f7a:	edc7 7a03 	vstr	s15, [r7, #12]

	if(m->targetVel < 0.05 && m->targetVel > -0.05){
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fc fa90 	bl	80004a8 <__aeabi_f2d>
 8003f88:	a373      	add	r3, pc, #460	; (adr r3, 8004158 <speedControl+0x288>)
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f7fc fd55 	bl	8000a3c <__aeabi_dcmplt>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d014      	beq.n	8003fc2 <speedControl+0xf2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fc fa83 	bl	80004a8 <__aeabi_f2d>
 8003fa2:	a36f      	add	r3, pc, #444	; (adr r3, 8004160 <speedControl+0x290>)
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f7fc fd66 	bl	8000a78 <__aeabi_dcmpgt>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <speedControl+0xf2>
		m->targetVel = 0;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	60da      	str	r2, [r3, #12]
		m->integralError = 0;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	619a      	str	r2, [r3, #24]
	}

	if(PID_CONTROL == 1){
		m->error = (m->targetVel) - vel;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	ed93 7a03 	vldr	s14, [r3, #12]
 8003fc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	edc3 7a04 	vstr	s15, [r3, #16]
		if(m->error > PID_P_LIMIT){m->error=PID_P_LIMIT;}
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe8:	dd03      	ble.n	8003ff2 <speedControl+0x122>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003ff0:	611a      	str	r2, [r3, #16]
		if(m->error < -PID_P_LIMIT){m->error=-PID_P_LIMIT;}
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ff8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004004:	d502      	bpl.n	800400c <speedControl+0x13c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a58      	ldr	r2, [pc, #352]	; (800416c <speedControl+0x29c>)
 800400a:	611a      	str	r2, [r3, #16]

		m->integralError = m->integralError + m->error;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	ed93 7a06 	vldr	s14, [r3, #24]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	edd3 7a04 	vldr	s15, [r3, #16]
 8004018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	edc3 7a06 	vstr	s15, [r3, #24]
		if(m->integralError > PID_I_LIMIT){m->integralError = PID_I_LIMIT;}
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	edd3 7a06 	vldr	s15, [r3, #24]
 8004028:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8004170 <speedControl+0x2a0>
 800402c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004034:	dd02      	ble.n	800403c <speedControl+0x16c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a4e      	ldr	r2, [pc, #312]	; (8004174 <speedControl+0x2a4>)
 800403a:	619a      	str	r2, [r3, #24]
		if(m->integralError < -PID_I_LIMIT){m->integralError = -PID_I_LIMIT;}
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004042:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8004178 <speedControl+0x2a8>
 8004046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800404a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404e:	d502      	bpl.n	8004056 <speedControl+0x186>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a4a      	ldr	r2, [pc, #296]	; (800417c <speedControl+0x2ac>)
 8004054:	619a      	str	r2, [r3, #24]

		float deltaE = 0.0f;
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
		if((m->error - m->prevError)>0.01f && (m->error - m->prevError)<-0.01f){deltaE=((m->error - m->prevError)/deltaT);}
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	edd3 7a05 	vldr	s15, [r3, #20]
 8004068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800406c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004180 <speedControl+0x2b0>
 8004070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004078:	dd1c      	ble.n	80040b4 <speedControl+0x1e4>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	ed93 7a04 	vldr	s14, [r3, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	edd3 7a05 	vldr	s15, [r3, #20]
 8004086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800408a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004184 <speedControl+0x2b4>
 800408e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004096:	d50d      	bpl.n	80040b4 <speedControl+0x1e4>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	ed93 7a04 	vldr	s14, [r3, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80040a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80040a8:	ed97 7a00 	vldr	s14, [r7]
 80040ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040b0:	edc7 7a05 	vstr	s15, [r7, #20]
		m->prevError = m->error;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	615a      	str	r2, [r3, #20]

		float power = PID_P*m->error + PID_I*m->integralError + PID_D*deltaE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	edd3 7a04 	vldr	s15, [r3, #16]
 80040c2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004188 <speedControl+0x2b8>
 80040c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80040d0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800418c <speedControl+0x2bc>
 80040d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80040d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80040e0:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8004190 <speedControl+0x2c0>
 80040e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80040e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040ec:	edc7 7a04 	vstr	s15, [r7, #16]
		if(power > PID_LIMIT){power = PID_LIMIT;}
 80040f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80040f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004100:	dd02      	ble.n	8004108 <speedControl+0x238>
 8004102:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004106:	613b      	str	r3, [r7, #16]
		if(power < -PID_LIMIT){power = -PID_LIMIT;}
 8004108:	edd7 7a04 	vldr	s15, [r7, #16]
 800410c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004118:	d501      	bpl.n	800411e <speedControl+0x24e>
 800411a:	4b14      	ldr	r3, [pc, #80]	; (800416c <speedControl+0x29c>)
 800411c:	613b      	str	r3, [r7, #16]
		nastaviMotor(m->num,zgladiMotor(m->num,scalePwm(power)));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7a1c      	ldrb	r4, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	7a1b      	ldrb	r3, [r3, #8]
 8004126:	edd7 7a04 	vldr	s15, [r7, #16]
 800412a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004168 <speedControl+0x298>
 800412e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004136:	ee17 2a90 	vmov	r2, s15
 800413a:	b212      	sxth	r2, r2
 800413c:	4611      	mov	r1, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fe7e 	bl	8003e40 <zgladiMotor>
 8004144:	4603      	mov	r3, r0
 8004146:	4619      	mov	r1, r3
 8004148:	4620      	mov	r0, r4
 800414a:	f7ff fd15 	bl	8003b78 <nastaviMotor>
	}
	else{
		int Pwm = zgladiMotor(m->num,scalePwm(m->targetVel));
		nastaviMotor(m->num,Pwm);
	}
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd90      	pop	{r4, r7, pc}
 8004156:	bf00      	nop
 8004158:	9999999a 	.word	0x9999999a
 800415c:	3fa99999 	.word	0x3fa99999
 8004160:	9999999a 	.word	0x9999999a
 8004164:	bfa99999 	.word	0xbfa99999
 8004168:	447a0000 	.word	0x447a0000
 800416c:	bf800000 	.word	0xbf800000
 8004170:	42480000 	.word	0x42480000
 8004174:	42480000 	.word	0x42480000
 8004178:	c2480000 	.word	0xc2480000
 800417c:	c2480000 	.word	0xc2480000
 8004180:	3c23d70a 	.word	0x3c23d70a
 8004184:	bc23d70a 	.word	0xbc23d70a
 8004188:	3f4ccccd 	.word	0x3f4ccccd
 800418c:	3ca3d70a 	.word	0x3ca3d70a
 8004190:	3dcccccd 	.word	0x3dcccccd

08004194 <StartCalculatingPoz>:

void StartCalculatingPoz(void *argument){
 8004194:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004198:	b08c      	sub	sp, #48	; 0x30
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
	while(1){
		if(MagReady){
 800419e:	4bb3      	ldr	r3, [pc, #716]	; (800446c <StartCalculatingPoz+0x2d8>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d02e      	beq.n	8004206 <StartCalculatingPoz+0x72>
			MagF.x = izracunajPovprecjeInt16(&MagX,Mag.x,10);
 80041a8:	4bb1      	ldr	r3, [pc, #708]	; (8004470 <StartCalculatingPoz+0x2dc>)
 80041aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ae:	220a      	movs	r2, #10
 80041b0:	4619      	mov	r1, r3
 80041b2:	48b0      	ldr	r0, [pc, #704]	; (8004474 <StartCalculatingPoz+0x2e0>)
 80041b4:	f7ff fc9c 	bl	8003af0 <izracunajPovprecjeInt16>
 80041b8:	4603      	mov	r3, r0
 80041ba:	461a      	mov	r2, r3
 80041bc:	4bae      	ldr	r3, [pc, #696]	; (8004478 <StartCalculatingPoz+0x2e4>)
 80041be:	801a      	strh	r2, [r3, #0]
			MagF.y = izracunajPovprecjeInt16(&MagY,Mag.y,10);
 80041c0:	4bab      	ldr	r3, [pc, #684]	; (8004470 <StartCalculatingPoz+0x2dc>)
 80041c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80041c6:	220a      	movs	r2, #10
 80041c8:	4619      	mov	r1, r3
 80041ca:	48ac      	ldr	r0, [pc, #688]	; (800447c <StartCalculatingPoz+0x2e8>)
 80041cc:	f7ff fc90 	bl	8003af0 <izracunajPovprecjeInt16>
 80041d0:	4603      	mov	r3, r0
 80041d2:	461a      	mov	r2, r3
 80041d4:	4ba8      	ldr	r3, [pc, #672]	; (8004478 <StartCalculatingPoz+0x2e4>)
 80041d6:	805a      	strh	r2, [r3, #2]
			MagF.z = izracunajPovprecjeInt16(&MagZ,Mag.z,10);
 80041d8:	4ba5      	ldr	r3, [pc, #660]	; (8004470 <StartCalculatingPoz+0x2dc>)
 80041da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80041de:	220a      	movs	r2, #10
 80041e0:	4619      	mov	r1, r3
 80041e2:	48a7      	ldr	r0, [pc, #668]	; (8004480 <StartCalculatingPoz+0x2ec>)
 80041e4:	f7ff fc84 	bl	8003af0 <izracunajPovprecjeInt16>
 80041e8:	4603      	mov	r3, r0
 80041ea:	461a      	mov	r2, r3
 80041ec:	4ba2      	ldr	r3, [pc, #648]	; (8004478 <StartCalculatingPoz+0x2e4>)
 80041ee:	809a      	strh	r2, [r3, #4]
			MagReady = 0;
 80041f0:	4b9e      	ldr	r3, [pc, #632]	; (800446c <StartCalculatingPoz+0x2d8>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]

			P.head = 0xAAAB;
 80041f6:	4ba3      	ldr	r3, [pc, #652]	; (8004484 <StartCalculatingPoz+0x2f0>)
 80041f8:	f64a 22ab 	movw	r2, #43691	; 0xaaab
 80041fc:	601a      	str	r2, [r3, #0]
			CDC_Transmit_FS((uint8_t*)&P,(sizeof(float)*12)+4);
 80041fe:	2134      	movs	r1, #52	; 0x34
 8004200:	48a0      	ldr	r0, [pc, #640]	; (8004484 <StartCalculatingPoz+0x2f0>)
 8004202:	f00b fd47 	bl	800fc94 <CDC_Transmit_FS>
		}
	    if(AccReady){
 8004206:	4ba0      	ldr	r3, [pc, #640]	; (8004488 <StartCalculatingPoz+0x2f4>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d040      	beq.n	8004292 <StartCalculatingPoz+0xfe>
		    Acc.x -= E.Accx;
 8004210:	4b9e      	ldr	r3, [pc, #632]	; (800448c <StartCalculatingPoz+0x2f8>)
 8004212:	8c1b      	ldrh	r3, [r3, #32]
 8004214:	b219      	sxth	r1, r3
 8004216:	4b9e      	ldr	r3, [pc, #632]	; (8004490 <StartCalculatingPoz+0x2fc>)
 8004218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800421c:	b29a      	uxth	r2, r3
 800421e:	b28b      	uxth	r3, r1
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	b29b      	uxth	r3, r3
 8004224:	b21a      	sxth	r2, r3
 8004226:	4b9a      	ldr	r3, [pc, #616]	; (8004490 <StartCalculatingPoz+0x2fc>)
 8004228:	801a      	strh	r2, [r3, #0]
		    Acc.y -= E.Accy;
 800422a:	4b98      	ldr	r3, [pc, #608]	; (800448c <StartCalculatingPoz+0x2f8>)
 800422c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800422e:	b219      	sxth	r1, r3
 8004230:	4b97      	ldr	r3, [pc, #604]	; (8004490 <StartCalculatingPoz+0x2fc>)
 8004232:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004236:	b29a      	uxth	r2, r3
 8004238:	b28b      	uxth	r3, r1
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	b29b      	uxth	r3, r3
 800423e:	b21a      	sxth	r2, r3
 8004240:	4b93      	ldr	r3, [pc, #588]	; (8004490 <StartCalculatingPoz+0x2fc>)
 8004242:	805a      	strh	r2, [r3, #2]
		    AccF.x = izracunajPovprecjeInt16(&AccX,Acc.x,50);
 8004244:	4b92      	ldr	r3, [pc, #584]	; (8004490 <StartCalculatingPoz+0x2fc>)
 8004246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800424a:	2232      	movs	r2, #50	; 0x32
 800424c:	4619      	mov	r1, r3
 800424e:	4891      	ldr	r0, [pc, #580]	; (8004494 <StartCalculatingPoz+0x300>)
 8004250:	f7ff fc4e 	bl	8003af0 <izracunajPovprecjeInt16>
 8004254:	4603      	mov	r3, r0
 8004256:	461a      	mov	r2, r3
 8004258:	4b8f      	ldr	r3, [pc, #572]	; (8004498 <StartCalculatingPoz+0x304>)
 800425a:	801a      	strh	r2, [r3, #0]
		    AccF.y = izracunajPovprecjeInt16(&AccY,Acc.y,50);
 800425c:	4b8c      	ldr	r3, [pc, #560]	; (8004490 <StartCalculatingPoz+0x2fc>)
 800425e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004262:	2232      	movs	r2, #50	; 0x32
 8004264:	4619      	mov	r1, r3
 8004266:	488d      	ldr	r0, [pc, #564]	; (800449c <StartCalculatingPoz+0x308>)
 8004268:	f7ff fc42 	bl	8003af0 <izracunajPovprecjeInt16>
 800426c:	4603      	mov	r3, r0
 800426e:	461a      	mov	r2, r3
 8004270:	4b89      	ldr	r3, [pc, #548]	; (8004498 <StartCalculatingPoz+0x304>)
 8004272:	805a      	strh	r2, [r3, #2]
		    AccF.z = izracunajPovprecjeInt16(&AccZ,Acc.z,50);
 8004274:	4b86      	ldr	r3, [pc, #536]	; (8004490 <StartCalculatingPoz+0x2fc>)
 8004276:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800427a:	2232      	movs	r2, #50	; 0x32
 800427c:	4619      	mov	r1, r3
 800427e:	4888      	ldr	r0, [pc, #544]	; (80044a0 <StartCalculatingPoz+0x30c>)
 8004280:	f7ff fc36 	bl	8003af0 <izracunajPovprecjeInt16>
 8004284:	4603      	mov	r3, r0
 8004286:	461a      	mov	r2, r3
 8004288:	4b83      	ldr	r3, [pc, #524]	; (8004498 <StartCalculatingPoz+0x304>)
 800428a:	809a      	strh	r2, [r3, #4]
		    AccReady = 0;
 800428c:	4b7e      	ldr	r3, [pc, #504]	; (8004488 <StartCalculatingPoz+0x2f4>)
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
	    }
	    if(GyroReady){
 8004292:	4b84      	ldr	r3, [pc, #528]	; (80044a4 <StartCalculatingPoz+0x310>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8374 	beq.w	8004986 <StartCalculatingPoz+0x7f2>
		    Gyro.x -= E.Gyrox;
 800429e:	4b7b      	ldr	r3, [pc, #492]	; (800448c <StartCalculatingPoz+0x2f8>)
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b219      	sxth	r1, r3
 80042a4:	4b80      	ldr	r3, [pc, #512]	; (80044a8 <StartCalculatingPoz+0x314>)
 80042a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	b28b      	uxth	r3, r1
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	b21a      	sxth	r2, r3
 80042b4:	4b7c      	ldr	r3, [pc, #496]	; (80044a8 <StartCalculatingPoz+0x314>)
 80042b6:	801a      	strh	r2, [r3, #0]
		    Gyro.y -= E.Gyroy;
 80042b8:	4b74      	ldr	r3, [pc, #464]	; (800448c <StartCalculatingPoz+0x2f8>)
 80042ba:	885b      	ldrh	r3, [r3, #2]
 80042bc:	b219      	sxth	r1, r3
 80042be:	4b7a      	ldr	r3, [pc, #488]	; (80044a8 <StartCalculatingPoz+0x314>)
 80042c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	b28b      	uxth	r3, r1
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	b21a      	sxth	r2, r3
 80042ce:	4b76      	ldr	r3, [pc, #472]	; (80044a8 <StartCalculatingPoz+0x314>)
 80042d0:	805a      	strh	r2, [r3, #2]
		    Gyro.z -= E.Gyroz;
 80042d2:	4b6e      	ldr	r3, [pc, #440]	; (800448c <StartCalculatingPoz+0x2f8>)
 80042d4:	889b      	ldrh	r3, [r3, #4]
 80042d6:	b219      	sxth	r1, r3
 80042d8:	4b73      	ldr	r3, [pc, #460]	; (80044a8 <StartCalculatingPoz+0x314>)
 80042da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80042de:	b29a      	uxth	r2, r3
 80042e0:	b28b      	uxth	r3, r1
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	b21a      	sxth	r2, r3
 80042e8:	4b6f      	ldr	r3, [pc, #444]	; (80044a8 <StartCalculatingPoz+0x314>)
 80042ea:	809a      	strh	r2, [r3, #4]
		    GyroF.x = izracunajPovprecjeInt16(&GyroX,Gyro.x,50);
 80042ec:	4b6e      	ldr	r3, [pc, #440]	; (80044a8 <StartCalculatingPoz+0x314>)
 80042ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042f2:	2232      	movs	r2, #50	; 0x32
 80042f4:	4619      	mov	r1, r3
 80042f6:	486d      	ldr	r0, [pc, #436]	; (80044ac <StartCalculatingPoz+0x318>)
 80042f8:	f7ff fbfa 	bl	8003af0 <izracunajPovprecjeInt16>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	4b6b      	ldr	r3, [pc, #428]	; (80044b0 <StartCalculatingPoz+0x31c>)
 8004302:	801a      	strh	r2, [r3, #0]
		    GyroF.y = izracunajPovprecjeInt16(&GyroY,Gyro.y,50);
 8004304:	4b68      	ldr	r3, [pc, #416]	; (80044a8 <StartCalculatingPoz+0x314>)
 8004306:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800430a:	2232      	movs	r2, #50	; 0x32
 800430c:	4619      	mov	r1, r3
 800430e:	4869      	ldr	r0, [pc, #420]	; (80044b4 <StartCalculatingPoz+0x320>)
 8004310:	f7ff fbee 	bl	8003af0 <izracunajPovprecjeInt16>
 8004314:	4603      	mov	r3, r0
 8004316:	461a      	mov	r2, r3
 8004318:	4b65      	ldr	r3, [pc, #404]	; (80044b0 <StartCalculatingPoz+0x31c>)
 800431a:	805a      	strh	r2, [r3, #2]
		    GyroF.z = izracunajPovprecjeInt16(&GyroZ,Gyro.z,50);
 800431c:	4b62      	ldr	r3, [pc, #392]	; (80044a8 <StartCalculatingPoz+0x314>)
 800431e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004322:	2232      	movs	r2, #50	; 0x32
 8004324:	4619      	mov	r1, r3
 8004326:	4864      	ldr	r0, [pc, #400]	; (80044b8 <StartCalculatingPoz+0x324>)
 8004328:	f7ff fbe2 	bl	8003af0 <izracunajPovprecjeInt16>
 800432c:	4603      	mov	r3, r0
 800432e:	461a      	mov	r2, r3
 8004330:	4b5f      	ldr	r3, [pc, #380]	; (80044b0 <StartCalculatingPoz+0x31c>)
 8004332:	809a      	strh	r2, [r3, #4]
		    GyroReady = 0;
 8004334:	4b5b      	ldr	r3, [pc, #364]	; (80044a4 <StartCalculatingPoz+0x310>)
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]

		    //poracunamo podatke
		    float gx,gy,gz,ax,ay,az,mx,my,mz;

		    if(AccF.x == 0 && AccF.y == 0 && AccF.z==0){ax=0.0f; ay=0.0f; az=1.0f;}
 800433a:	4b57      	ldr	r3, [pc, #348]	; (8004498 <StartCalculatingPoz+0x304>)
 800433c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d113      	bne.n	800436c <StartCalculatingPoz+0x1d8>
 8004344:	4b54      	ldr	r3, [pc, #336]	; (8004498 <StartCalculatingPoz+0x304>)
 8004346:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10e      	bne.n	800436c <StartCalculatingPoz+0x1d8>
 800434e:	4b52      	ldr	r3, [pc, #328]	; (8004498 <StartCalculatingPoz+0x304>)
 8004350:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d109      	bne.n	800436c <StartCalculatingPoz+0x1d8>
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	e02f      	b.n	80043cc <StartCalculatingPoz+0x238>
		    else{
			    ax = ((float)AccF.x) *0.0006103515f;
 800436c:	4b4a      	ldr	r3, [pc, #296]	; (8004498 <StartCalculatingPoz+0x304>)
 800436e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800437a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80044bc <StartCalculatingPoz+0x328>
 800437e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004382:	edc7 7a07 	vstr	s15, [r7, #28]
			    ay = ((float)AccF.y) *0.0006103515f;
 8004386:	4b44      	ldr	r3, [pc, #272]	; (8004498 <StartCalculatingPoz+0x304>)
 8004388:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800438c:	ee07 3a90 	vmov	s15, r3
 8004390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004394:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80044bc <StartCalculatingPoz+0x328>
 8004398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800439c:	edc7 7a06 	vstr	s15, [r7, #24]
			    az = ((float)AccF.z) *0.0006103515f;//+-2g  2/(2^16/2)
 80043a0:	4b3d      	ldr	r3, [pc, #244]	; (8004498 <StartCalculatingPoz+0x304>)
 80043a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ae:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80044bc <StartCalculatingPoz+0x328>
 80043b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043b6:	edc7 7a05 	vstr	s15, [r7, #20]
			    normalize_v3f(&ax,&ay,&az);
 80043ba:	f107 0214 	add.w	r2, r7, #20
 80043be:	f107 0118 	add.w	r1, r7, #24
 80043c2:	f107 031c 	add.w	r3, r7, #28
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff fce2 	bl	8003d90 <normalize_v3f>
		    }

		    gx = ((float)GyroF.x) * 0.0175f * DEG_TO_RAD*2; //deg/s obcutljivost 500dps
 80043cc:	4b38      	ldr	r3, [pc, #224]	; (80044b0 <StartCalculatingPoz+0x31c>)
 80043ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043da:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80044c0 <StartCalculatingPoz+0x32c>
 80043de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043e2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80044c4 <StartCalculatingPoz+0x330>
 80043e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80043ee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		    gy = ((float)GyroF.y) * -0.0175f * DEG_TO_RAD*2;
 80043f2:	4b2f      	ldr	r3, [pc, #188]	; (80044b0 <StartCalculatingPoz+0x31c>)
 80043f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80043f8:	ee07 3a90 	vmov	s15, r3
 80043fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004400:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80044c8 <StartCalculatingPoz+0x334>
 8004404:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004408:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80044c4 <StartCalculatingPoz+0x330>
 800440c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004410:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004414:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		    gz = ((float)GyroF.z) * 0.0175f * DEG_TO_RAD*2;
 8004418:	4b25      	ldr	r3, [pc, #148]	; (80044b0 <StartCalculatingPoz+0x31c>)
 800441a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004426:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80044c0 <StartCalculatingPoz+0x32c>
 800442a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800442e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80044c4 <StartCalculatingPoz+0x330>
 8004432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004436:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800443a:	edc7 7a08 	vstr	s15, [r7, #32]

		    if(MagF.x == 0 && MagF.y == 0 && MagF.z==0){mx = 0.2f; my = 0.2f; mz = 0.1f;}
 800443e:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <StartCalculatingPoz+0x2e4>)
 8004440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d145      	bne.n	80044d4 <StartCalculatingPoz+0x340>
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <StartCalculatingPoz+0x2e4>)
 800444a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d140      	bne.n	80044d4 <StartCalculatingPoz+0x340>
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <StartCalculatingPoz+0x2e4>)
 8004454:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d13b      	bne.n	80044d4 <StartCalculatingPoz+0x340>
 800445c:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <StartCalculatingPoz+0x338>)
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <StartCalculatingPoz+0x338>)
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	4b1a      	ldr	r3, [pc, #104]	; (80044d0 <StartCalculatingPoz+0x33c>)
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	e05b      	b.n	8004522 <StartCalculatingPoz+0x38e>
 800446a:	bf00      	nop
 800446c:	20000228 	.word	0x20000228
 8004470:	20013700 	.word	0x20013700
 8004474:	200135b4 	.word	0x200135b4
 8004478:	20013868 	.word	0x20013868
 800447c:	200131c0 	.word	0x200131c0
 8004480:	20013708 	.word	0x20013708
 8004484:	20013cec 	.word	0x20013cec
 8004488:	20000227 	.word	0x20000227
 800448c:	20013a24 	.word	0x20013a24
 8004490:	20013a14 	.word	0x20013a14
 8004494:	2001393c 	.word	0x2001393c
 8004498:	20013538 	.word	0x20013538
 800449c:	200132ac 	.word	0x200132ac
 80044a0:	20013634 	.word	0x20013634
 80044a4:	20000226 	.word	0x20000226
 80044a8:	20013aac 	.word	0x20013aac
 80044ac:	20013404 	.word	0x20013404
 80044b0:	20013a1c 	.word	0x20013a1c
 80044b4:	200138bc 	.word	0x200138bc
 80044b8:	20013c00 	.word	0x20013c00
 80044bc:	3a1fffff 	.word	0x3a1fffff
 80044c0:	3c8f5c29 	.word	0x3c8f5c29
 80044c4:	3c8efa35 	.word	0x3c8efa35
 80044c8:	bc8f5c29 	.word	0xbc8f5c29
 80044cc:	3e4ccccd 	.word	0x3e4ccccd
 80044d0:	3dcccccd 	.word	0x3dcccccd
		    else{
			    mx = ((float)MagF.x) * 0.0015f; //magnetic sesnetivity 1.5 mgauss/LSB
 80044d4:	4bd9      	ldr	r3, [pc, #868]	; (800483c <StartCalculatingPoz+0x6a8>)
 80044d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044e2:	ed9f 7ad7 	vldr	s14, [pc, #860]	; 8004840 <StartCalculatingPoz+0x6ac>
 80044e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ea:	edc7 7a04 	vstr	s15, [r7, #16]
			    my = ((float)MagF.y) * 0.0015f;
 80044ee:	4bd3      	ldr	r3, [pc, #844]	; (800483c <StartCalculatingPoz+0x6a8>)
 80044f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044fc:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 8004840 <StartCalculatingPoz+0x6ac>
 8004500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004504:	edc7 7a03 	vstr	s15, [r7, #12]
			    mz = ((float)MagF.z) * 0.0015f;
 8004508:	4bcc      	ldr	r3, [pc, #816]	; (800483c <StartCalculatingPoz+0x6a8>)
 800450a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004516:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8004840 <StartCalculatingPoz+0x6ac>
 800451a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800451e:	edc7 7a02 	vstr	s15, [r7, #8]
		    }
		    normalize_v3f(&mx,&my,&mz);
 8004522:	f107 0208 	add.w	r2, r7, #8
 8004526:	f107 010c 	add.w	r1, r7, #12
 800452a:	f107 0310 	add.w	r3, r7, #16
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fc2e 	bl	8003d90 <normalize_v3f>

		    MadgwickAHRSupdate(gx,gy,gz,ax,ay,az,0,0,0);
 8004534:	edd7 7a07 	vldr	s15, [r7, #28]
 8004538:	ed97 7a06 	vldr	s14, [r7, #24]
 800453c:	edd7 6a05 	vldr	s13, [r7, #20]
 8004540:	ed9f 4ac0 	vldr	s8, [pc, #768]	; 8004844 <StartCalculatingPoz+0x6b0>
 8004544:	eddf 3abf 	vldr	s7, [pc, #764]	; 8004844 <StartCalculatingPoz+0x6b0>
 8004548:	ed9f 3abe 	vldr	s6, [pc, #760]	; 8004844 <StartCalculatingPoz+0x6b0>
 800454c:	eef0 2a66 	vmov.f32	s5, s13
 8004550:	eeb0 2a47 	vmov.f32	s4, s14
 8004554:	eef0 1a67 	vmov.f32	s3, s15
 8004558:	ed97 1a08 	vldr	s2, [r7, #32]
 800455c:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8004560:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004564:	f7fc fc9c 	bl	8000ea0 <MadgwickAHRSupdate>
		    P.heading = atan2(2*(q0*q3+q1*q2),1-2*(q2*q2+q3*q3));
 8004568:	4bb7      	ldr	r3, [pc, #732]	; (8004848 <StartCalculatingPoz+0x6b4>)
 800456a:	ed93 7a00 	vldr	s14, [r3]
 800456e:	4bb7      	ldr	r3, [pc, #732]	; (800484c <StartCalculatingPoz+0x6b8>)
 8004570:	edd3 7a00 	vldr	s15, [r3]
 8004574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004578:	4bb5      	ldr	r3, [pc, #724]	; (8004850 <StartCalculatingPoz+0x6bc>)
 800457a:	edd3 6a00 	vldr	s13, [r3]
 800457e:	4bb5      	ldr	r3, [pc, #724]	; (8004854 <StartCalculatingPoz+0x6c0>)
 8004580:	edd3 7a00 	vldr	s15, [r3]
 8004584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800458c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004590:	ee17 0a90 	vmov	r0, s15
 8004594:	f7fb ff88 	bl	80004a8 <__aeabi_f2d>
 8004598:	4604      	mov	r4, r0
 800459a:	460d      	mov	r5, r1
 800459c:	4bad      	ldr	r3, [pc, #692]	; (8004854 <StartCalculatingPoz+0x6c0>)
 800459e:	ed93 7a00 	vldr	s14, [r3]
 80045a2:	4bac      	ldr	r3, [pc, #688]	; (8004854 <StartCalculatingPoz+0x6c0>)
 80045a4:	edd3 7a00 	vldr	s15, [r3]
 80045a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045ac:	4ba7      	ldr	r3, [pc, #668]	; (800484c <StartCalculatingPoz+0x6b8>)
 80045ae:	edd3 6a00 	vldr	s13, [r3]
 80045b2:	4ba6      	ldr	r3, [pc, #664]	; (800484c <StartCalculatingPoz+0x6b8>)
 80045b4:	edd3 7a00 	vldr	s15, [r3]
 80045b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80045c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045cc:	ee17 0a90 	vmov	r0, s15
 80045d0:	f7fb ff6a 	bl	80004a8 <__aeabi_f2d>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	ec43 2b11 	vmov	d1, r2, r3
 80045dc:	ec45 4b10 	vmov	d0, r4, r5
 80045e0:	f00c f8d8 	bl	8010794 <atan2>
 80045e4:	ec53 2b10 	vmov	r2, r3, d0
 80045e8:	4610      	mov	r0, r2
 80045ea:	4619      	mov	r1, r3
 80045ec:	f7fc fa8c 	bl	8000b08 <__aeabi_d2f>
 80045f0:	4603      	mov	r3, r0
 80045f2:	4a99      	ldr	r2, [pc, #612]	; (8004858 <StartCalculatingPoz+0x6c4>)
 80045f4:	60d3      	str	r3, [r2, #12]
		    P.roll = atan2(2*(q0*q1+q2*q3),1-2*(q1*q1+q2*q2));
 80045f6:	4b94      	ldr	r3, [pc, #592]	; (8004848 <StartCalculatingPoz+0x6b4>)
 80045f8:	ed93 7a00 	vldr	s14, [r3]
 80045fc:	4b94      	ldr	r3, [pc, #592]	; (8004850 <StartCalculatingPoz+0x6bc>)
 80045fe:	edd3 7a00 	vldr	s15, [r3]
 8004602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004606:	4b93      	ldr	r3, [pc, #588]	; (8004854 <StartCalculatingPoz+0x6c0>)
 8004608:	edd3 6a00 	vldr	s13, [r3]
 800460c:	4b8f      	ldr	r3, [pc, #572]	; (800484c <StartCalculatingPoz+0x6b8>)
 800460e:	edd3 7a00 	vldr	s15, [r3]
 8004612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800461a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800461e:	ee17 0a90 	vmov	r0, s15
 8004622:	f7fb ff41 	bl	80004a8 <__aeabi_f2d>
 8004626:	4604      	mov	r4, r0
 8004628:	460d      	mov	r5, r1
 800462a:	4b89      	ldr	r3, [pc, #548]	; (8004850 <StartCalculatingPoz+0x6bc>)
 800462c:	ed93 7a00 	vldr	s14, [r3]
 8004630:	4b87      	ldr	r3, [pc, #540]	; (8004850 <StartCalculatingPoz+0x6bc>)
 8004632:	edd3 7a00 	vldr	s15, [r3]
 8004636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800463a:	4b86      	ldr	r3, [pc, #536]	; (8004854 <StartCalculatingPoz+0x6c0>)
 800463c:	edd3 6a00 	vldr	s13, [r3]
 8004640:	4b84      	ldr	r3, [pc, #528]	; (8004854 <StartCalculatingPoz+0x6c0>)
 8004642:	edd3 7a00 	vldr	s15, [r3]
 8004646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800464a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800464e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800465a:	ee17 0a90 	vmov	r0, s15
 800465e:	f7fb ff23 	bl	80004a8 <__aeabi_f2d>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	ec43 2b11 	vmov	d1, r2, r3
 800466a:	ec45 4b10 	vmov	d0, r4, r5
 800466e:	f00c f891 	bl	8010794 <atan2>
 8004672:	ec53 2b10 	vmov	r2, r3, d0
 8004676:	4610      	mov	r0, r2
 8004678:	4619      	mov	r1, r3
 800467a:	f7fc fa45 	bl	8000b08 <__aeabi_d2f>
 800467e:	4603      	mov	r3, r0
 8004680:	4a75      	ldr	r2, [pc, #468]	; (8004858 <StartCalculatingPoz+0x6c4>)
 8004682:	6093      	str	r3, [r2, #8]
		    P.pitch = asin(2*(q0*q2 - q3*q1));
 8004684:	4b70      	ldr	r3, [pc, #448]	; (8004848 <StartCalculatingPoz+0x6b4>)
 8004686:	ed93 7a00 	vldr	s14, [r3]
 800468a:	4b72      	ldr	r3, [pc, #456]	; (8004854 <StartCalculatingPoz+0x6c0>)
 800468c:	edd3 7a00 	vldr	s15, [r3]
 8004690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004694:	4b6d      	ldr	r3, [pc, #436]	; (800484c <StartCalculatingPoz+0x6b8>)
 8004696:	edd3 6a00 	vldr	s13, [r3]
 800469a:	4b6d      	ldr	r3, [pc, #436]	; (8004850 <StartCalculatingPoz+0x6bc>)
 800469c:	edd3 7a00 	vldr	s15, [r3]
 80046a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80046ac:	ee17 0a90 	vmov	r0, s15
 80046b0:	f7fb fefa 	bl	80004a8 <__aeabi_f2d>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	ec43 2b10 	vmov	d0, r2, r3
 80046bc:	f00c f830 	bl	8010720 <asin>
 80046c0:	ec53 2b10 	vmov	r2, r3, d0
 80046c4:	4610      	mov	r0, r2
 80046c6:	4619      	mov	r1, r3
 80046c8:	f7fc fa1e 	bl	8000b08 <__aeabi_d2f>
 80046cc:	4603      	mov	r3, r0
 80046ce:	4a62      	ldr	r2, [pc, #392]	; (8004858 <StartCalculatingPoz+0x6c4>)
 80046d0:	6053      	str	r3, [r2, #4]
		    P.Q0 = q0; P.Q1 = q1; P.Q2 = q2; P.Q3 = q3;
 80046d2:	4b5d      	ldr	r3, [pc, #372]	; (8004848 <StartCalculatingPoz+0x6b4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a60      	ldr	r2, [pc, #384]	; (8004858 <StartCalculatingPoz+0x6c4>)
 80046d8:	6113      	str	r3, [r2, #16]
 80046da:	4b5d      	ldr	r3, [pc, #372]	; (8004850 <StartCalculatingPoz+0x6bc>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5e      	ldr	r2, [pc, #376]	; (8004858 <StartCalculatingPoz+0x6c4>)
 80046e0:	6153      	str	r3, [r2, #20]
 80046e2:	4b5c      	ldr	r3, [pc, #368]	; (8004854 <StartCalculatingPoz+0x6c0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a5c      	ldr	r2, [pc, #368]	; (8004858 <StartCalculatingPoz+0x6c4>)
 80046e8:	6193      	str	r3, [r2, #24]
 80046ea:	4b58      	ldr	r3, [pc, #352]	; (800484c <StartCalculatingPoz+0x6b8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a5a      	ldr	r2, [pc, #360]	; (8004858 <StartCalculatingPoz+0x6c4>)
 80046f0:	61d3      	str	r3, [r2, #28]

		    //rotiraj po X za roll
		    ay = ay*cos(-P.roll)-az*sin(P.roll);
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fb fed7 	bl	80004a8 <__aeabi_f2d>
 80046fa:	4604      	mov	r4, r0
 80046fc:	460d      	mov	r5, r1
 80046fe:	4b56      	ldr	r3, [pc, #344]	; (8004858 <StartCalculatingPoz+0x6c4>)
 8004700:	edd3 7a02 	vldr	s15, [r3, #8]
 8004704:	eef1 7a67 	vneg.f32	s15, s15
 8004708:	ee17 3a90 	vmov	r3, s15
 800470c:	4618      	mov	r0, r3
 800470e:	f7fb fecb 	bl	80004a8 <__aeabi_f2d>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	ec43 2b10 	vmov	d0, r2, r3
 800471a:	f00b ff5d 	bl	80105d8 <cos>
 800471e:	ec53 2b10 	vmov	r2, r3, d0
 8004722:	4620      	mov	r0, r4
 8004724:	4629      	mov	r1, r5
 8004726:	f7fb ff17 	bl	8000558 <__aeabi_dmul>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4690      	mov	r8, r2
 8004730:	4699      	mov	r9, r3
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	4618      	mov	r0, r3
 8004736:	f7fb feb7 	bl	80004a8 <__aeabi_f2d>
 800473a:	4604      	mov	r4, r0
 800473c:	460d      	mov	r5, r1
 800473e:	4b46      	ldr	r3, [pc, #280]	; (8004858 <StartCalculatingPoz+0x6c4>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	4618      	mov	r0, r3
 8004744:	f7fb feb0 	bl	80004a8 <__aeabi_f2d>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	ec43 2b10 	vmov	d0, r2, r3
 8004750:	f00b ff92 	bl	8010678 <sin>
 8004754:	ec53 2b10 	vmov	r2, r3, d0
 8004758:	4620      	mov	r0, r4
 800475a:	4629      	mov	r1, r5
 800475c:	f7fb fefc 	bl	8000558 <__aeabi_dmul>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4640      	mov	r0, r8
 8004766:	4649      	mov	r1, r9
 8004768:	f7fb fd3e 	bl	80001e8 <__aeabi_dsub>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4610      	mov	r0, r2
 8004772:	4619      	mov	r1, r3
 8004774:	f7fc f9c8 	bl	8000b08 <__aeabi_d2f>
 8004778:	4603      	mov	r3, r0
 800477a:	61bb      	str	r3, [r7, #24]
		    az = ay*sin(-P.roll)+az*cos(P.roll);
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	4618      	mov	r0, r3
 8004780:	f7fb fe92 	bl	80004a8 <__aeabi_f2d>
 8004784:	4604      	mov	r4, r0
 8004786:	460d      	mov	r5, r1
 8004788:	4b33      	ldr	r3, [pc, #204]	; (8004858 <StartCalculatingPoz+0x6c4>)
 800478a:	edd3 7a02 	vldr	s15, [r3, #8]
 800478e:	eef1 7a67 	vneg.f32	s15, s15
 8004792:	ee17 3a90 	vmov	r3, s15
 8004796:	4618      	mov	r0, r3
 8004798:	f7fb fe86 	bl	80004a8 <__aeabi_f2d>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	ec43 2b10 	vmov	d0, r2, r3
 80047a4:	f00b ff68 	bl	8010678 <sin>
 80047a8:	ec53 2b10 	vmov	r2, r3, d0
 80047ac:	4620      	mov	r0, r4
 80047ae:	4629      	mov	r1, r5
 80047b0:	f7fb fed2 	bl	8000558 <__aeabi_dmul>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4690      	mov	r8, r2
 80047ba:	4699      	mov	r9, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fb fe72 	bl	80004a8 <__aeabi_f2d>
 80047c4:	4604      	mov	r4, r0
 80047c6:	460d      	mov	r5, r1
 80047c8:	4b23      	ldr	r3, [pc, #140]	; (8004858 <StartCalculatingPoz+0x6c4>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fb fe6b 	bl	80004a8 <__aeabi_f2d>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	ec43 2b10 	vmov	d0, r2, r3
 80047da:	f00b fefd 	bl	80105d8 <cos>
 80047de:	ec53 2b10 	vmov	r2, r3, d0
 80047e2:	4620      	mov	r0, r4
 80047e4:	4629      	mov	r1, r5
 80047e6:	f7fb feb7 	bl	8000558 <__aeabi_dmul>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4640      	mov	r0, r8
 80047f0:	4649      	mov	r1, r9
 80047f2:	f7fb fcfb 	bl	80001ec <__adddf3>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4610      	mov	r0, r2
 80047fc:	4619      	mov	r1, r3
 80047fe:	f7fc f983 	bl	8000b08 <__aeabi_d2f>
 8004802:	4603      	mov	r3, r0
 8004804:	617b      	str	r3, [r7, #20]
		    //rotiraj vektor okoli Y za pitch
		    ax = ax*cos(-P.pitch)-az*sin(-P.pitch);
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4618      	mov	r0, r3
 800480a:	f7fb fe4d 	bl	80004a8 <__aeabi_f2d>
 800480e:	4604      	mov	r4, r0
 8004810:	460d      	mov	r5, r1
 8004812:	4b11      	ldr	r3, [pc, #68]	; (8004858 <StartCalculatingPoz+0x6c4>)
 8004814:	edd3 7a01 	vldr	s15, [r3, #4]
 8004818:	eef1 7a67 	vneg.f32	s15, s15
 800481c:	ee17 3a90 	vmov	r3, s15
 8004820:	4618      	mov	r0, r3
 8004822:	f7fb fe41 	bl	80004a8 <__aeabi_f2d>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	ec43 2b10 	vmov	d0, r2, r3
 800482e:	f00b fed3 	bl	80105d8 <cos>
 8004832:	ec53 2b10 	vmov	r2, r3, d0
 8004836:	4620      	mov	r0, r4
 8004838:	e010      	b.n	800485c <StartCalculatingPoz+0x6c8>
 800483a:	bf00      	nop
 800483c:	20013868 	.word	0x20013868
 8004840:	3ac49ba6 	.word	0x3ac49ba6
 8004844:	00000000 	.word	0x00000000
 8004848:	20000004 	.word	0x20000004
 800484c:	20000220 	.word	0x20000220
 8004850:	20000218 	.word	0x20000218
 8004854:	2000021c 	.word	0x2000021c
 8004858:	20013cec 	.word	0x20013cec
 800485c:	4629      	mov	r1, r5
 800485e:	f7fb fe7b 	bl	8000558 <__aeabi_dmul>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4690      	mov	r8, r2
 8004868:	4699      	mov	r9, r3
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	4618      	mov	r0, r3
 800486e:	f7fb fe1b 	bl	80004a8 <__aeabi_f2d>
 8004872:	4604      	mov	r4, r0
 8004874:	460d      	mov	r5, r1
 8004876:	4b46      	ldr	r3, [pc, #280]	; (8004990 <StartCalculatingPoz+0x7fc>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	4618      	mov	r0, r3
 800487c:	f7fb fe14 	bl	80004a8 <__aeabi_f2d>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	ec43 2b10 	vmov	d0, r2, r3
 8004888:	f00b fef6 	bl	8010678 <sin>
 800488c:	ec53 2b10 	vmov	r2, r3, d0
 8004890:	4620      	mov	r0, r4
 8004892:	4629      	mov	r1, r5
 8004894:	f7fb fe60 	bl	8000558 <__aeabi_dmul>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4640      	mov	r0, r8
 800489e:	4649      	mov	r1, r9
 80048a0:	f7fb fca4 	bl	80001ec <__adddf3>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4610      	mov	r0, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	f7fc f92c 	bl	8000b08 <__aeabi_d2f>
 80048b0:	4603      	mov	r3, r0
 80048b2:	61fb      	str	r3, [r7, #28]
		    az = -ax*sin(-P.pitch)+az*cos(-P.pitch);
 80048b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80048b8:	eef1 7a67 	vneg.f32	s15, s15
 80048bc:	ee17 3a90 	vmov	r3, s15
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fb fdf1 	bl	80004a8 <__aeabi_f2d>
 80048c6:	4604      	mov	r4, r0
 80048c8:	460d      	mov	r5, r1
 80048ca:	4b31      	ldr	r3, [pc, #196]	; (8004990 <StartCalculatingPoz+0x7fc>)
 80048cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80048d0:	eef1 7a67 	vneg.f32	s15, s15
 80048d4:	ee17 3a90 	vmov	r3, s15
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fb fde5 	bl	80004a8 <__aeabi_f2d>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	ec43 2b10 	vmov	d0, r2, r3
 80048e6:	f00b fec7 	bl	8010678 <sin>
 80048ea:	ec53 2b10 	vmov	r2, r3, d0
 80048ee:	4620      	mov	r0, r4
 80048f0:	4629      	mov	r1, r5
 80048f2:	f7fb fe31 	bl	8000558 <__aeabi_dmul>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4690      	mov	r8, r2
 80048fc:	4699      	mov	r9, r3
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	4618      	mov	r0, r3
 8004902:	f7fb fdd1 	bl	80004a8 <__aeabi_f2d>
 8004906:	4604      	mov	r4, r0
 8004908:	460d      	mov	r5, r1
 800490a:	4b21      	ldr	r3, [pc, #132]	; (8004990 <StartCalculatingPoz+0x7fc>)
 800490c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004910:	eef1 7a67 	vneg.f32	s15, s15
 8004914:	ee17 3a90 	vmov	r3, s15
 8004918:	4618      	mov	r0, r3
 800491a:	f7fb fdc5 	bl	80004a8 <__aeabi_f2d>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	ec43 2b10 	vmov	d0, r2, r3
 8004926:	f00b fe57 	bl	80105d8 <cos>
 800492a:	ec53 2b10 	vmov	r2, r3, d0
 800492e:	4620      	mov	r0, r4
 8004930:	4629      	mov	r1, r5
 8004932:	f7fb fe11 	bl	8000558 <__aeabi_dmul>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4640      	mov	r0, r8
 800493c:	4649      	mov	r1, r9
 800493e:	f7fb fc55 	bl	80001ec <__adddf3>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4610      	mov	r0, r2
 8004948:	4619      	mov	r1, r3
 800494a:	f7fc f8dd 	bl	8000b08 <__aeabi_d2f>
 800494e:	4603      	mov	r3, r0
 8004950:	617b      	str	r3, [r7, #20]

		    P.magX = ax;
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	4a0e      	ldr	r2, [pc, #56]	; (8004990 <StartCalculatingPoz+0x7fc>)
 8004956:	6293      	str	r3, [r2, #40]	; 0x28
		    P.magY = ay;
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	4a0d      	ldr	r2, [pc, #52]	; (8004990 <StartCalculatingPoz+0x7fc>)
 800495c:	62d3      	str	r3, [r2, #44]	; 0x2c
		    P.magZ = az;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	4a0b      	ldr	r2, [pc, #44]	; (8004990 <StartCalculatingPoz+0x7fc>)
 8004962:	6313      	str	r3, [r2, #48]	; 0x30

		    for(int n=4; n<30; n++){ //pripravi podatke za spi
 8004964:	2304      	movs	r3, #4
 8004966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004968:	e00a      	b.n	8004980 <StartCalculatingPoz+0x7ec>
			    SpiTxData[n-4] = ((uint8_t*)&P)[n];
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496c:	4a08      	ldr	r2, [pc, #32]	; (8004990 <StartCalculatingPoz+0x7fc>)
 800496e:	441a      	add	r2, r3
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004972:	3b04      	subs	r3, #4
 8004974:	7811      	ldrb	r1, [r2, #0]
 8004976:	4a07      	ldr	r2, [pc, #28]	; (8004994 <StartCalculatingPoz+0x800>)
 8004978:	54d1      	strb	r1, [r2, r3]
		    for(int n=4; n<30; n++){ //pripravi podatke za spi
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	3301      	adds	r3, #1
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004982:	2b1d      	cmp	r3, #29
 8004984:	ddf1      	ble.n	800496a <StartCalculatingPoz+0x7d6>
		    }
	    }
	    vTaskDelay(1);
 8004986:	2001      	movs	r0, #1
 8004988:	f007 ff7a 	bl	800c880 <vTaskDelay>
		if(MagReady){
 800498c:	e407      	b.n	800419e <StartCalculatingPoz+0xa>
 800498e:	bf00      	nop
 8004990:	20013cec 	.word	0x20013cec
 8004994:	20013c80 	.word	0x20013c80

08004998 <StartRecivingCommandsNRF24>:
	}
}
void StartRecivingCommandsNRF24(void *argument){
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	MX_USB_DEVICE_Init();
 80049a0:	f00b f8ba 	bl	800fb18 <MX_USB_DEVICE_Init>
	while(1){
		if(nRF24_dataReady && nRF24_status){
 80049a4:	4b66      	ldr	r3, [pc, #408]	; (8004b40 <StartRecivingCommandsNRF24+0x1a8>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 80c4 	beq.w	8004b38 <StartRecivingCommandsNRF24+0x1a0>
 80049b0:	4b64      	ldr	r3, [pc, #400]	; (8004b44 <StartRecivingCommandsNRF24+0x1ac>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 80be 	beq.w	8004b38 <StartRecivingCommandsNRF24+0x1a0>
			uint8_t status = nRF24_GetStatus();
 80049bc:	f7fe fe87 	bl	80036ce <nRF24_GetStatus>
 80049c0:	4603      	mov	r3, r0
 80049c2:	73fb      	strb	r3, [r7, #15]
			nRF24_ClearIRQFlags();
 80049c4:	f7fe fe9b 	bl	80036fe <nRF24_ClearIRQFlags>
			nRF24_dataReady = 0;
 80049c8:	4b5d      	ldr	r3, [pc, #372]	; (8004b40 <StartRecivingCommandsNRF24+0x1a8>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
			if (status != nRF24_STATUS_RXFIFO_EMPTY) {
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	f000 80b1 	beq.w	8004b38 <StartRecivingCommandsNRF24+0x1a0>
				//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);

				pipe = nRF24_ReadPayload((uint8_t*)(&robotPay), &payload_length);
 80049d6:	495c      	ldr	r1, [pc, #368]	; (8004b48 <StartRecivingCommandsNRF24+0x1b0>)
 80049d8:	485c      	ldr	r0, [pc, #368]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 80049da:	f7fe ff01 	bl	80037e0 <nRF24_ReadPayload>
 80049de:	4603      	mov	r3, r0
 80049e0:	461a      	mov	r2, r3
 80049e2:	4b5b      	ldr	r3, [pc, #364]	; (8004b50 <StartRecivingCommandsNRF24+0x1b8>)
 80049e4:	701a      	strb	r2, [r3, #0]
				nRF24_ClearIRQFlags();
 80049e6:	f7fe fe8a 	bl	80036fe <nRF24_ClearIRQFlags>

				uint8_t CRC_calc = (robotPay.x1 + robotPay.y1 + robotPay.x2 + robotPay.y2 + robotPay.speed);
 80049ea:	4b58      	ldr	r3, [pc, #352]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 80049ec:	f993 3000 	ldrsb.w	r3, [r3]
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	4b56      	ldr	r3, [pc, #344]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 80049f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	4413      	add	r3, r2
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	4b53      	ldr	r3, [pc, #332]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004a00:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	4413      	add	r3, r2
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	4b50      	ldr	r3, [pc, #320]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004a0c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	4413      	add	r3, r2
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	4b4d      	ldr	r3, [pc, #308]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004a18:	791b      	ldrb	r3, [r3, #4]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	73bb      	strb	r3, [r7, #14]
				if(robotPay.crc == CRC_calc){
 8004a1e:	4b4b      	ldr	r3, [pc, #300]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004a20:	795b      	ldrb	r3, [r3, #5]
 8004a22:	7bba      	ldrb	r2, [r7, #14]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	f040 8087 	bne.w	8004b38 <StartRecivingCommandsNRF24+0x1a0>
					//uporabi podatke
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a30:	4848      	ldr	r0, [pc, #288]	; (8004b54 <StartRecivingCommandsNRF24+0x1bc>)
 8004a32:	f001 facd 	bl	8005fd0 <HAL_GPIO_WritePin>

					timeSinceLastCommand = HAL_GetTick();
 8004a36:	f000 fd33 	bl	80054a0 <HAL_GetTick>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	4a46      	ldr	r2, [pc, #280]	; (8004b58 <StartRecivingCommandsNRF24+0x1c0>)
 8004a3e:	6013      	str	r3, [r2, #0]
					float speed = SPEEDMOD*(float)robotPay.speed/255;
 8004a40:	4b42      	ldr	r3, [pc, #264]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004a42:	791b      	ldrb	r3, [r3, #4]
 8004a44:	ee07 3a90 	vmov	s15, r3
 8004a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a54:	eddf 6a41 	vldr	s13, [pc, #260]	; 8004b5c <StartRecivingCommandsNRF24+0x1c4>
 8004a58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a5c:	edc7 7a02 	vstr	s15, [r7, #8]
					motorRF.targetVel = speed*(float)(robotPay.y1-robotPay.x1+robotPay.x2)/128;
 8004a60:	4b3a      	ldr	r3, [pc, #232]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004a62:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004a66:	461a      	mov	r2, r3
 8004a68:	4b38      	ldr	r3, [pc, #224]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004a6a:	f993 3000 	ldrsb.w	r3, [r3]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	4a36      	ldr	r2, [pc, #216]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004a72:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8004a76:	4413      	add	r3, r2
 8004a78:	ee07 3a90 	vmov	s15, r3
 8004a7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a80:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a88:	eddf 6a35 	vldr	s13, [pc, #212]	; 8004b60 <StartRecivingCommandsNRF24+0x1c8>
 8004a8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a90:	4b34      	ldr	r3, [pc, #208]	; (8004b64 <StartRecivingCommandsNRF24+0x1cc>)
 8004a92:	edc3 7a03 	vstr	s15, [r3, #12]
					motorLF.targetVel = speed*(float)(robotPay.y1+robotPay.x1-robotPay.x2)/128;
 8004a96:	4b2d      	ldr	r3, [pc, #180]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004a98:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4b2b      	ldr	r3, [pc, #172]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004aa0:	f993 3000 	ldrsb.w	r3, [r3]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	4a29      	ldr	r2, [pc, #164]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004aa8:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ab6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004abe:	eddf 6a28 	vldr	s13, [pc, #160]	; 8004b60 <StartRecivingCommandsNRF24+0x1c8>
 8004ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ac6:	4b28      	ldr	r3, [pc, #160]	; (8004b68 <StartRecivingCommandsNRF24+0x1d0>)
 8004ac8:	edc3 7a03 	vstr	s15, [r3, #12]
					motorLB.targetVel = speed*(float)(robotPay.y1+robotPay.x1+robotPay.x2)/128;
 8004acc:	4b1f      	ldr	r3, [pc, #124]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004ace:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4b1d      	ldr	r3, [pc, #116]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004ad6:	f993 3000 	ldrsb.w	r3, [r3]
 8004ada:	4413      	add	r3, r2
 8004adc:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004ade:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	ee07 3a90 	vmov	s15, r3
 8004ae8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004aec:	edd7 7a02 	vldr	s15, [r7, #8]
 8004af0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004af4:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8004b60 <StartRecivingCommandsNRF24+0x1c8>
 8004af8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004afc:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <StartRecivingCommandsNRF24+0x1d4>)
 8004afe:	edc3 7a03 	vstr	s15, [r3, #12]
					motorRB.targetVel = speed*(float)(robotPay.y1-robotPay.x1-robotPay.x2)/128;
 8004b02:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004b04:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004b0c:	f993 3000 	ldrsb.w	r3, [r3]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	4a0e      	ldr	r2, [pc, #56]	; (8004b4c <StartRecivingCommandsNRF24+0x1b4>)
 8004b14:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b22:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b2a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004b60 <StartRecivingCommandsNRF24+0x1c8>
 8004b2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b32:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <StartRecivingCommandsNRF24+0x1d8>)
 8004b34:	edc3 7a03 	vstr	s15, [r3, #12]
					motorLB.targetVel = speed*(float)(robotPay.x2)/128;
					*/
				}
			}
		}
		vTaskDelay(50);
 8004b38:	2032      	movs	r0, #50	; 0x32
 8004b3a:	f007 fea1 	bl	800c880 <vTaskDelay>
		if(nRF24_dataReady && nRF24_status){
 8004b3e:	e731      	b.n	80049a4 <StartRecivingCommandsNRF24+0xc>
 8004b40:	20000224 	.word	0x20000224
 8004b44:	20000225 	.word	0x20000225
 8004b48:	20000008 	.word	0x20000008
 8004b4c:	2001358c 	.word	0x2001358c
 8004b50:	20013588 	.word	0x20013588
 8004b54:	40020c00 	.word	0x40020c00
 8004b58:	2000022c 	.word	0x2000022c
 8004b5c:	437f0000 	.word	0x437f0000
 8004b60:	43000000 	.word	0x43000000
 8004b64:	20013ca0 	.word	0x20013ca0
 8004b68:	20013870 	.word	0x20013870
 8004b6c:	200136b4 	.word	0x200136b4
 8004b70:	20013bb4 	.word	0x20013bb4

08004b74 <StartMotorControl>:
	}
}
void StartMotorControl(void *argument){
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
	while(1){
	  if((HAL_GetTick() - timeSinceLastCommand)>200){
 8004b7c:	f000 fc90 	bl	80054a0 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	4b29      	ldr	r3, [pc, #164]	; (8004c28 <StartMotorControl+0xb4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2bc8      	cmp	r3, #200	; 0xc8
 8004b8a:	d935      	bls.n	8004bf8 <StartMotorControl+0x84>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b92:	4826      	ldr	r0, [pc, #152]	; (8004c2c <StartMotorControl+0xb8>)
 8004b94:	f001 fa1c 	bl	8005fd0 <HAL_GPIO_WritePin>
		  nastaviMotor(RF,0); motorRF.integralError = 0; motorRF.targetVel = 0;
 8004b98:	2100      	movs	r1, #0
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	f7fe ffec 	bl	8003b78 <nastaviMotor>
 8004ba0:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <StartMotorControl+0xbc>)
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	619a      	str	r2, [r3, #24]
 8004ba8:	4b21      	ldr	r3, [pc, #132]	; (8004c30 <StartMotorControl+0xbc>)
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	60da      	str	r2, [r3, #12]
		  nastaviMotor(LF,0); motorLF.integralError = 0; motorLF.targetVel = 0;
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	2003      	movs	r0, #3
 8004bb4:	f7fe ffe0 	bl	8003b78 <nastaviMotor>
 8004bb8:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <StartMotorControl+0xc0>)
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	619a      	str	r2, [r3, #24]
 8004bc0:	4b1c      	ldr	r3, [pc, #112]	; (8004c34 <StartMotorControl+0xc0>)
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	60da      	str	r2, [r3, #12]
		  nastaviMotor(LB,0); motorLB.integralError = 0; motorLB.targetVel = 0;
 8004bc8:	2100      	movs	r1, #0
 8004bca:	2002      	movs	r0, #2
 8004bcc:	f7fe ffd4 	bl	8003b78 <nastaviMotor>
 8004bd0:	4b19      	ldr	r3, [pc, #100]	; (8004c38 <StartMotorControl+0xc4>)
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	619a      	str	r2, [r3, #24]
 8004bd8:	4b17      	ldr	r3, [pc, #92]	; (8004c38 <StartMotorControl+0xc4>)
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	60da      	str	r2, [r3, #12]
		  nastaviMotor(RB,0); motorRB.integralError = 0; motorRB.targetVel = 0;
 8004be0:	2100      	movs	r1, #0
 8004be2:	2001      	movs	r0, #1
 8004be4:	f7fe ffc8 	bl	8003b78 <nastaviMotor>
 8004be8:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <StartMotorControl+0xc8>)
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	619a      	str	r2, [r3, #24]
 8004bf0:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <StartMotorControl+0xc8>)
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	60da      	str	r2, [r3, #12]
	  }
	  speedControl(&motorLB,0.01);
 8004bf8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8004c40 <StartMotorControl+0xcc>
 8004bfc:	480e      	ldr	r0, [pc, #56]	; (8004c38 <StartMotorControl+0xc4>)
 8004bfe:	f7ff f967 	bl	8003ed0 <speedControl>
	  speedControl(&motorLF,0.01);
 8004c02:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8004c40 <StartMotorControl+0xcc>
 8004c06:	480b      	ldr	r0, [pc, #44]	; (8004c34 <StartMotorControl+0xc0>)
 8004c08:	f7ff f962 	bl	8003ed0 <speedControl>
	  speedControl(&motorRB,0.01);
 8004c0c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004c40 <StartMotorControl+0xcc>
 8004c10:	480a      	ldr	r0, [pc, #40]	; (8004c3c <StartMotorControl+0xc8>)
 8004c12:	f7ff f95d 	bl	8003ed0 <speedControl>
	  speedControl(&motorRF,0.01);
 8004c16:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8004c40 <StartMotorControl+0xcc>
 8004c1a:	4805      	ldr	r0, [pc, #20]	; (8004c30 <StartMotorControl+0xbc>)
 8004c1c:	f7ff f958 	bl	8003ed0 <speedControl>
	  vTaskDelay(10);
 8004c20:	200a      	movs	r0, #10
 8004c22:	f007 fe2d 	bl	800c880 <vTaskDelay>
	  if((HAL_GetTick() - timeSinceLastCommand)>200){
 8004c26:	e7a9      	b.n	8004b7c <StartMotorControl+0x8>
 8004c28:	2000022c 	.word	0x2000022c
 8004c2c:	40020c00 	.word	0x40020c00
 8004c30:	20013ca0 	.word	0x20013ca0
 8004c34:	20013870 	.word	0x20013870
 8004c38:	200136b4 	.word	0x200136b4
 8004c3c:	20013bb4 	.word	0x20013bb4
 8004c40:	3c23d70a 	.word	0x3c23d70a

08004c44 <StartCalculatingPath>:
volatile int32_t motorRFprevPoz=0;
volatile int32_t motorLFprevPoz=0;
volatile int32_t motorRBprevPoz=0;
volatile int32_t motorLBprevPoz=0;

void StartCalculatingPath(void *argument){
 8004c44:	b5b0      	push	{r4, r5, r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
	while(1){
		float pot = (float)(motorRF.poz - motorRFprevPoz);
 8004c4c:	4b3b      	ldr	r3, [pc, #236]	; (8004d3c <StartCalculatingPath+0xf8>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <StartCalculatingPath+0xfc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c5e:	edc7 7a03 	vstr	s15, [r7, #12]
		pot *= PI*0.003f;
 8004c62:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c66:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004d44 <StartCalculatingPath+0x100>
 8004c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c6e:	edc7 7a03 	vstr	s15, [r7, #12]
		motorRFprevPoz = motorRF.poz;
 8004c72:	4b32      	ldr	r3, [pc, #200]	; (8004d3c <StartCalculatingPath+0xf8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a32      	ldr	r2, [pc, #200]	; (8004d40 <StartCalculatingPath+0xfc>)
 8004c78:	6013      	str	r3, [r2, #0]
		P.pozX += sin(P.heading) * pot;
 8004c7a:	4b33      	ldr	r3, [pc, #204]	; (8004d48 <StartCalculatingPath+0x104>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fb fc12 	bl	80004a8 <__aeabi_f2d>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	ec43 2b10 	vmov	d0, r2, r3
 8004c8c:	f00b fcf4 	bl	8010678 <sin>
 8004c90:	ec55 4b10 	vmov	r4, r5, d0
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7fb fc07 	bl	80004a8 <__aeabi_f2d>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	f7fb fc59 	bl	8000558 <__aeabi_dmul>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4614      	mov	r4, r2
 8004cac:	461d      	mov	r5, r3
 8004cae:	4b26      	ldr	r3, [pc, #152]	; (8004d48 <StartCalculatingPath+0x104>)
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fb fbf8 	bl	80004a8 <__aeabi_f2d>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	f7fb fa94 	bl	80001ec <__adddf3>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4619      	mov	r1, r3
 8004ccc:	f7fb ff1c 	bl	8000b08 <__aeabi_d2f>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4a1d      	ldr	r2, [pc, #116]	; (8004d48 <StartCalculatingPath+0x104>)
 8004cd4:	6213      	str	r3, [r2, #32]
		P.pozY += cos(P.heading) * pot;
 8004cd6:	4b1c      	ldr	r3, [pc, #112]	; (8004d48 <StartCalculatingPath+0x104>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fb fbe4 	bl	80004a8 <__aeabi_f2d>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	ec43 2b10 	vmov	d0, r2, r3
 8004ce8:	f00b fc76 	bl	80105d8 <cos>
 8004cec:	ec55 4b10 	vmov	r4, r5, d0
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7fb fbd9 	bl	80004a8 <__aeabi_f2d>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	f7fb fc2b 	bl	8000558 <__aeabi_dmul>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4614      	mov	r4, r2
 8004d08:	461d      	mov	r5, r3
 8004d0a:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <StartCalculatingPath+0x104>)
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fb fbca 	bl	80004a8 <__aeabi_f2d>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4620      	mov	r0, r4
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	f7fb fa66 	bl	80001ec <__adddf3>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4610      	mov	r0, r2
 8004d26:	4619      	mov	r1, r3
 8004d28:	f7fb feee 	bl	8000b08 <__aeabi_d2f>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4a06      	ldr	r2, [pc, #24]	; (8004d48 <StartCalculatingPath+0x104>)
 8004d30:	6253      	str	r3, [r2, #36]	; 0x24
		vTaskDelay(600);
 8004d32:	f44f 7016 	mov.w	r0, #600	; 0x258
 8004d36:	f007 fda3 	bl	800c880 <vTaskDelay>
	while(1){
 8004d3a:	e787      	b.n	8004c4c <StartCalculatingPath+0x8>
 8004d3c:	20013ca0 	.word	0x20013ca0
 8004d40:	20000230 	.word	0x20000230
 8004d44:	3c1a6a63 	.word	0x3c1a6a63
 8004d48:	20013cec 	.word	0x20013cec

08004d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d52:	2300      	movs	r3, #0
 8004d54:	607b      	str	r3, [r7, #4]
 8004d56:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <HAL_MspInit+0x4c>)
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	4a0f      	ldr	r2, [pc, #60]	; (8004d98 <HAL_MspInit+0x4c>)
 8004d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d60:	6453      	str	r3, [r2, #68]	; 0x44
 8004d62:	4b0d      	ldr	r3, [pc, #52]	; (8004d98 <HAL_MspInit+0x4c>)
 8004d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d6a:	607b      	str	r3, [r7, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d6e:	2300      	movs	r3, #0
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <HAL_MspInit+0x4c>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	4a08      	ldr	r2, [pc, #32]	; (8004d98 <HAL_MspInit+0x4c>)
 8004d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <HAL_MspInit+0x4c>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800

08004d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08a      	sub	sp, #40	; 0x28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004da4:	f107 0314 	add.w	r3, r7, #20
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	605a      	str	r2, [r3, #4]
 8004dae:	609a      	str	r2, [r3, #8]
 8004db0:	60da      	str	r2, [r3, #12]
 8004db2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a19      	ldr	r2, [pc, #100]	; (8004e20 <HAL_I2C_MspInit+0x84>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d12c      	bne.n	8004e18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	4b18      	ldr	r3, [pc, #96]	; (8004e24 <HAL_I2C_MspInit+0x88>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <HAL_I2C_MspInit+0x88>)
 8004dc8:	f043 0302 	orr.w	r3, r3, #2
 8004dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dce:	4b15      	ldr	r3, [pc, #84]	; (8004e24 <HAL_I2C_MspInit+0x88>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004dda:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004de0:	2312      	movs	r3, #18
 8004de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004de4:	2301      	movs	r3, #1
 8004de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de8:	2300      	movs	r3, #0
 8004dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004dec:	2304      	movs	r3, #4
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004df0:	f107 0314 	add.w	r3, r7, #20
 8004df4:	4619      	mov	r1, r3
 8004df6:	480c      	ldr	r0, [pc, #48]	; (8004e28 <HAL_I2C_MspInit+0x8c>)
 8004df8:	f000 ff4e 	bl	8005c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <HAL_I2C_MspInit+0x88>)
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	4a07      	ldr	r2, [pc, #28]	; (8004e24 <HAL_I2C_MspInit+0x88>)
 8004e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_I2C_MspInit+0x88>)
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004e18:	bf00      	nop
 8004e1a:	3728      	adds	r7, #40	; 0x28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40005400 	.word	0x40005400
 8004e24:	40023800 	.word	0x40023800
 8004e28:	40020400 	.word	0x40020400

08004e2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b090      	sub	sp, #64	; 0x40
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
 8004e40:	60da      	str	r2, [r3, #12]
 8004e42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a98      	ldr	r2, [pc, #608]	; (80050ac <HAL_SPI_MspInit+0x280>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d12c      	bne.n	8004ea8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004e4e:	2300      	movs	r3, #0
 8004e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e52:	4b97      	ldr	r3, [pc, #604]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	4a96      	ldr	r2, [pc, #600]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004e58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e5e:	4b94      	ldr	r3, [pc, #592]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6e:	4b90      	ldr	r3, [pc, #576]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	4a8f      	ldr	r2, [pc, #572]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	6313      	str	r3, [r2, #48]	; 0x30
 8004e7a:	4b8d      	ldr	r3, [pc, #564]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004e86:	23e0      	movs	r3, #224	; 0xe0
 8004e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e92:	2303      	movs	r3, #3
 8004e94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e96:	2305      	movs	r3, #5
 8004e98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4884      	ldr	r0, [pc, #528]	; (80050b4 <HAL_SPI_MspInit+0x288>)
 8004ea2:	f000 fef9 	bl	8005c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8004ea6:	e0fc      	b.n	80050a2 <HAL_SPI_MspInit+0x276>
  else if(hspi->Instance==SPI2)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a82      	ldr	r2, [pc, #520]	; (80050b8 <HAL_SPI_MspInit+0x28c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d14b      	bne.n	8004f4a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	623b      	str	r3, [r7, #32]
 8004eb6:	4b7e      	ldr	r3, [pc, #504]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	4a7d      	ldr	r2, [pc, #500]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ec2:	4b7b      	ldr	r3, [pc, #492]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eca:	623b      	str	r3, [r7, #32]
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	4b77      	ldr	r3, [pc, #476]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	4a76      	ldr	r2, [pc, #472]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004ed8:	f043 0304 	orr.w	r3, r3, #4
 8004edc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ede:	4b74      	ldr	r3, [pc, #464]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	61fb      	str	r3, [r7, #28]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eea:	2300      	movs	r3, #0
 8004eec:	61bb      	str	r3, [r7, #24]
 8004eee:	4b70      	ldr	r3, [pc, #448]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	4a6f      	ldr	r2, [pc, #444]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004ef4:	f043 0302 	orr.w	r3, r3, #2
 8004ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8004efa:	4b6d      	ldr	r3, [pc, #436]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f06:	2304      	movs	r3, #4
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f12:	2303      	movs	r3, #3
 8004f14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004f16:	2305      	movs	r3, #5
 8004f18:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4866      	ldr	r0, [pc, #408]	; (80050bc <HAL_SPI_MspInit+0x290>)
 8004f22:	f000 feb9 	bl	8005c98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004f26:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f34:	2303      	movs	r3, #3
 8004f36:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004f38:	2305      	movs	r3, #5
 8004f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f40:	4619      	mov	r1, r3
 8004f42:	485f      	ldr	r0, [pc, #380]	; (80050c0 <HAL_SPI_MspInit+0x294>)
 8004f44:	f000 fea8 	bl	8005c98 <HAL_GPIO_Init>
}
 8004f48:	e0ab      	b.n	80050a2 <HAL_SPI_MspInit+0x276>
  else if(hspi->Instance==SPI5)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a5d      	ldr	r2, [pc, #372]	; (80050c4 <HAL_SPI_MspInit+0x298>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	f040 80a6 	bne.w	80050a2 <HAL_SPI_MspInit+0x276>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	4b55      	ldr	r3, [pc, #340]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	4a54      	ldr	r2, [pc, #336]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004f60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f64:	6453      	str	r3, [r2, #68]	; 0x44
 8004f66:	4b52      	ldr	r3, [pc, #328]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f72:	2300      	movs	r3, #0
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	4b4e      	ldr	r3, [pc, #312]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	4a4d      	ldr	r2, [pc, #308]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004f7c:	f043 0310 	orr.w	r3, r3, #16
 8004f80:	6313      	str	r3, [r2, #48]	; 0x30
 8004f82:	4b4b      	ldr	r3, [pc, #300]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	4b47      	ldr	r3, [pc, #284]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	4a46      	ldr	r2, [pc, #280]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004f98:	f043 0302 	orr.w	r3, r3, #2
 8004f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f9e:	4b44      	ldr	r3, [pc, #272]	; (80050b0 <HAL_SPI_MspInit+0x284>)
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004faa:	2360      	movs	r3, #96	; 0x60
 8004fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004fba:	2306      	movs	r3, #6
 8004fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4840      	ldr	r0, [pc, #256]	; (80050c8 <HAL_SPI_MspInit+0x29c>)
 8004fc6:	f000 fe67 	bl	8005c98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fce:	2302      	movs	r3, #2
 8004fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004fda:	2306      	movs	r3, #6
 8004fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4836      	ldr	r0, [pc, #216]	; (80050c0 <HAL_SPI_MspInit+0x294>)
 8004fe6:	f000 fe57 	bl	8005c98 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA2_Stream3;
 8004fea:	4b38      	ldr	r3, [pc, #224]	; (80050cc <HAL_SPI_MspInit+0x2a0>)
 8004fec:	4a38      	ldr	r2, [pc, #224]	; (80050d0 <HAL_SPI_MspInit+0x2a4>)
 8004fee:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 8004ff0:	4b36      	ldr	r3, [pc, #216]	; (80050cc <HAL_SPI_MspInit+0x2a0>)
 8004ff2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004ff6:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ff8:	4b34      	ldr	r3, [pc, #208]	; (80050cc <HAL_SPI_MspInit+0x2a0>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ffe:	4b33      	ldr	r3, [pc, #204]	; (80050cc <HAL_SPI_MspInit+0x2a0>)
 8005000:	2200      	movs	r2, #0
 8005002:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005004:	4b31      	ldr	r3, [pc, #196]	; (80050cc <HAL_SPI_MspInit+0x2a0>)
 8005006:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800500a:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800500c:	4b2f      	ldr	r3, [pc, #188]	; (80050cc <HAL_SPI_MspInit+0x2a0>)
 800500e:	2200      	movs	r2, #0
 8005010:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005012:	4b2e      	ldr	r3, [pc, #184]	; (80050cc <HAL_SPI_MspInit+0x2a0>)
 8005014:	2200      	movs	r2, #0
 8005016:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 8005018:	4b2c      	ldr	r3, [pc, #176]	; (80050cc <HAL_SPI_MspInit+0x2a0>)
 800501a:	2200      	movs	r2, #0
 800501c:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800501e:	4b2b      	ldr	r3, [pc, #172]	; (80050cc <HAL_SPI_MspInit+0x2a0>)
 8005020:	2200      	movs	r2, #0
 8005022:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005024:	4b29      	ldr	r3, [pc, #164]	; (80050cc <HAL_SPI_MspInit+0x2a0>)
 8005026:	2200      	movs	r2, #0
 8005028:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 800502a:	4828      	ldr	r0, [pc, #160]	; (80050cc <HAL_SPI_MspInit+0x2a0>)
 800502c:	f000 fb4a 	bl	80056c4 <HAL_DMA_Init>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_SPI_MspInit+0x20e>
      Error_Handler();
 8005036:	f7fe f89f 	bl	8003178 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a23      	ldr	r2, [pc, #140]	; (80050cc <HAL_SPI_MspInit+0x2a0>)
 800503e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005040:	4a22      	ldr	r2, [pc, #136]	; (80050cc <HAL_SPI_MspInit+0x2a0>)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi5_tx.Instance = DMA2_Stream4;
 8005046:	4b23      	ldr	r3, [pc, #140]	; (80050d4 <HAL_SPI_MspInit+0x2a8>)
 8005048:	4a23      	ldr	r2, [pc, #140]	; (80050d8 <HAL_SPI_MspInit+0x2ac>)
 800504a:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 800504c:	4b21      	ldr	r3, [pc, #132]	; (80050d4 <HAL_SPI_MspInit+0x2a8>)
 800504e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005052:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005054:	4b1f      	ldr	r3, [pc, #124]	; (80050d4 <HAL_SPI_MspInit+0x2a8>)
 8005056:	2240      	movs	r2, #64	; 0x40
 8005058:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800505a:	4b1e      	ldr	r3, [pc, #120]	; (80050d4 <HAL_SPI_MspInit+0x2a8>)
 800505c:	2200      	movs	r2, #0
 800505e:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005060:	4b1c      	ldr	r3, [pc, #112]	; (80050d4 <HAL_SPI_MspInit+0x2a8>)
 8005062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005066:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005068:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <HAL_SPI_MspInit+0x2a8>)
 800506a:	2200      	movs	r2, #0
 800506c:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800506e:	4b19      	ldr	r3, [pc, #100]	; (80050d4 <HAL_SPI_MspInit+0x2a8>)
 8005070:	2200      	movs	r2, #0
 8005072:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8005074:	4b17      	ldr	r3, [pc, #92]	; (80050d4 <HAL_SPI_MspInit+0x2a8>)
 8005076:	2200      	movs	r2, #0
 8005078:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800507a:	4b16      	ldr	r3, [pc, #88]	; (80050d4 <HAL_SPI_MspInit+0x2a8>)
 800507c:	2200      	movs	r2, #0
 800507e:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005080:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <HAL_SPI_MspInit+0x2a8>)
 8005082:	2200      	movs	r2, #0
 8005084:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8005086:	4813      	ldr	r0, [pc, #76]	; (80050d4 <HAL_SPI_MspInit+0x2a8>)
 8005088:	f000 fb1c 	bl	80056c4 <HAL_DMA_Init>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_SPI_MspInit+0x26a>
      Error_Handler();
 8005092:	f7fe f871 	bl	8003178 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi5_tx);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a0e      	ldr	r2, [pc, #56]	; (80050d4 <HAL_SPI_MspInit+0x2a8>)
 800509a:	649a      	str	r2, [r3, #72]	; 0x48
 800509c:	4a0d      	ldr	r2, [pc, #52]	; (80050d4 <HAL_SPI_MspInit+0x2a8>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80050a2:	bf00      	nop
 80050a4:	3740      	adds	r7, #64	; 0x40
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40013000 	.word	0x40013000
 80050b0:	40023800 	.word	0x40023800
 80050b4:	40020000 	.word	0x40020000
 80050b8:	40003800 	.word	0x40003800
 80050bc:	40020800 	.word	0x40020800
 80050c0:	40020400 	.word	0x40020400
 80050c4:	40015000 	.word	0x40015000
 80050c8:	40021000 	.word	0x40021000
 80050cc:	200134d8 	.word	0x200134d8
 80050d0:	40026458 	.word	0x40026458
 80050d4:	20013808 	.word	0x20013808
 80050d8:	40026470 	.word	0x40026470

080050dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ec:	d116      	bne.n	800511c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	4b16      	ldr	r3, [pc, #88]	; (800514c <HAL_TIM_Base_MspInit+0x70>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	4a15      	ldr	r2, [pc, #84]	; (800514c <HAL_TIM_Base_MspInit+0x70>)
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	6413      	str	r3, [r2, #64]	; 0x40
 80050fe:	4b13      	ldr	r3, [pc, #76]	; (800514c <HAL_TIM_Base_MspInit+0x70>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800510a:	2200      	movs	r2, #0
 800510c:	2100      	movs	r1, #0
 800510e:	201c      	movs	r0, #28
 8005110:	f000 faae 	bl	8005670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005114:	201c      	movs	r0, #28
 8005116:	f000 fac7 	bl	80056a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800511a:	e012      	b.n	8005142 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a0b      	ldr	r2, [pc, #44]	; (8005150 <HAL_TIM_Base_MspInit+0x74>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d10d      	bne.n	8005142 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	4b08      	ldr	r3, [pc, #32]	; (800514c <HAL_TIM_Base_MspInit+0x70>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	4a07      	ldr	r2, [pc, #28]	; (800514c <HAL_TIM_Base_MspInit+0x70>)
 8005130:	f043 0302 	orr.w	r3, r3, #2
 8005134:	6413      	str	r3, [r2, #64]	; 0x40
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <HAL_TIM_Base_MspInit+0x70>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	68bb      	ldr	r3, [r7, #8]
}
 8005142:	bf00      	nop
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40023800 	.word	0x40023800
 8005150:	40000400 	.word	0x40000400

08005154 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08a      	sub	sp, #40	; 0x28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800515c:	f107 0314 	add.w	r3, r7, #20
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	609a      	str	r2, [r3, #8]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005174:	d11e      	bne.n	80051b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	4b22      	ldr	r3, [pc, #136]	; (8005204 <HAL_TIM_MspPostInit+0xb0>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	4a21      	ldr	r2, [pc, #132]	; (8005204 <HAL_TIM_MspPostInit+0xb0>)
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	6313      	str	r3, [r2, #48]	; 0x30
 8005186:	4b1f      	ldr	r3, [pc, #124]	; (8005204 <HAL_TIM_MspPostInit+0xb0>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = me_rb_Pin|me_lb_Pin|me_lf_Pin;
 8005192:	230e      	movs	r3, #14
 8005194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005196:	2302      	movs	r3, #2
 8005198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519e:	2300      	movs	r3, #0
 80051a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80051a2:	2301      	movs	r3, #1
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051a6:	f107 0314 	add.w	r3, r7, #20
 80051aa:	4619      	mov	r1, r3
 80051ac:	4816      	ldr	r0, [pc, #88]	; (8005208 <HAL_TIM_MspPostInit+0xb4>)
 80051ae:	f000 fd73 	bl	8005c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80051b2:	e023      	b.n	80051fc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a14      	ldr	r2, [pc, #80]	; (800520c <HAL_TIM_MspPostInit+0xb8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d11e      	bne.n	80051fc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	4b10      	ldr	r3, [pc, #64]	; (8005204 <HAL_TIM_MspPostInit+0xb0>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	4a0f      	ldr	r2, [pc, #60]	; (8005204 <HAL_TIM_MspPostInit+0xb0>)
 80051c8:	f043 0304 	orr.w	r3, r3, #4
 80051cc:	6313      	str	r3, [r2, #48]	; 0x30
 80051ce:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <HAL_TIM_MspPostInit+0xb0>)
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80051da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e0:	2302      	movs	r3, #2
 80051e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e8:	2300      	movs	r3, #0
 80051ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80051ec:	2302      	movs	r3, #2
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051f0:	f107 0314 	add.w	r3, r7, #20
 80051f4:	4619      	mov	r1, r3
 80051f6:	4806      	ldr	r0, [pc, #24]	; (8005210 <HAL_TIM_MspPostInit+0xbc>)
 80051f8:	f000 fd4e 	bl	8005c98 <HAL_GPIO_Init>
}
 80051fc:	bf00      	nop
 80051fe:	3728      	adds	r7, #40	; 0x28
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40023800 	.word	0x40023800
 8005208:	40020000 	.word	0x40020000
 800520c:	40000400 	.word	0x40000400
 8005210:	40020800 	.word	0x40020800

08005214 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08c      	sub	sp, #48	; 0x30
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005220:	2300      	movs	r3, #0
 8005222:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8005224:	2200      	movs	r2, #0
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	201a      	movs	r0, #26
 800522a:	f000 fa21 	bl	8005670 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800522e:	201a      	movs	r0, #26
 8005230:	f000 fa3a 	bl	80056a8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	4b1e      	ldr	r3, [pc, #120]	; (80052b4 <HAL_InitTick+0xa0>)
 800523a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523c:	4a1d      	ldr	r2, [pc, #116]	; (80052b4 <HAL_InitTick+0xa0>)
 800523e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005242:	6453      	str	r3, [r2, #68]	; 0x44
 8005244:	4b1b      	ldr	r3, [pc, #108]	; (80052b4 <HAL_InitTick+0xa0>)
 8005246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005250:	f107 0210 	add.w	r2, r7, #16
 8005254:	f107 0314 	add.w	r3, r7, #20
 8005258:	4611      	mov	r1, r2
 800525a:	4618      	mov	r0, r3
 800525c:	f003 fca0 	bl	8008ba0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005260:	f003 fc8a 	bl	8008b78 <HAL_RCC_GetPCLK2Freq>
 8005264:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	4a13      	ldr	r2, [pc, #76]	; (80052b8 <HAL_InitTick+0xa4>)
 800526a:	fba2 2303 	umull	r2, r3, r2, r3
 800526e:	0c9b      	lsrs	r3, r3, #18
 8005270:	3b01      	subs	r3, #1
 8005272:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8005274:	4b11      	ldr	r3, [pc, #68]	; (80052bc <HAL_InitTick+0xa8>)
 8005276:	4a12      	ldr	r2, [pc, #72]	; (80052c0 <HAL_InitTick+0xac>)
 8005278:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800527a:	4b10      	ldr	r3, [pc, #64]	; (80052bc <HAL_InitTick+0xa8>)
 800527c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005280:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8005282:	4a0e      	ldr	r2, [pc, #56]	; (80052bc <HAL_InitTick+0xa8>)
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <HAL_InitTick+0xa8>)
 800528a:	2200      	movs	r2, #0
 800528c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800528e:	4b0b      	ldr	r3, [pc, #44]	; (80052bc <HAL_InitTick+0xa8>)
 8005290:	2200      	movs	r2, #0
 8005292:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8005294:	4809      	ldr	r0, [pc, #36]	; (80052bc <HAL_InitTick+0xa8>)
 8005296:	f004 fa5d 	bl	8009754 <HAL_TIM_Base_Init>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d104      	bne.n	80052aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 80052a0:	4806      	ldr	r0, [pc, #24]	; (80052bc <HAL_InitTick+0xa8>)
 80052a2:	f004 fb01 	bl	80098a8 <HAL_TIM_Base_Start_IT>
 80052a6:	4603      	mov	r3, r0
 80052a8:	e000      	b.n	80052ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3730      	adds	r7, #48	; 0x30
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40023800 	.word	0x40023800
 80052b8:	431bde83 	.word	0x431bde83
 80052bc:	20013d20 	.word	0x20013d20
 80052c0:	40014800 	.word	0x40014800

080052c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052c8:	e7fe      	b.n	80052c8 <NMI_Handler+0x4>

080052ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052ca:	b480      	push	{r7}
 80052cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052ce:	e7fe      	b.n	80052ce <HardFault_Handler+0x4>

080052d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052d4:	e7fe      	b.n	80052d4 <MemManage_Handler+0x4>

080052d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052d6:	b480      	push	{r7}
 80052d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052da:	e7fe      	b.n	80052da <BusFault_Handler+0x4>

080052dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052e0:	e7fe      	b.n	80052e0 <UsageFault_Handler+0x4>

080052e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052e2:	b480      	push	{r7}
 80052e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052e6:	bf00      	nop
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80052f4:	2002      	movs	r0, #2
 80052f6:	f000 fe85 	bl	8006004 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80052fa:	bf00      	nop
 80052fc:	bd80      	pop	{r7, pc}

080052fe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005302:	2004      	movs	r0, #4
 8005304:	f000 fe7e 	bl	8006004 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005308:	bf00      	nop
 800530a:	bd80      	pop	{r7, pc}

0800530c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005310:	2008      	movs	r0, #8
 8005312:	f000 fe77 	bl	8006004 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005316:	bf00      	nop
 8005318:	bd80      	pop	{r7, pc}

0800531a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800531e:	2010      	movs	r0, #16
 8005320:	f000 fe70 	bl	8006004 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005324:	bf00      	nop
 8005326:	bd80      	pop	{r7, pc}

08005328 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800532c:	2080      	movs	r0, #128	; 0x80
 800532e:	f000 fe69 	bl	8006004 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005332:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005336:	f000 fe65 	bl	8006004 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800533a:	bf00      	nop
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8005344:	4802      	ldr	r0, [pc, #8]	; (8005350 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8005346:	f004 fc1b 	bl	8009b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800534a:	bf00      	nop
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20013d20 	.word	0x20013d20

08005354 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005358:	4802      	ldr	r0, [pc, #8]	; (8005364 <TIM2_IRQHandler+0x10>)
 800535a:	f004 fc11 	bl	8009b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800535e:	bf00      	nop
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20013a4c 	.word	0x20013a4c

08005368 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800536c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005370:	f000 fe48 	bl	8006004 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005374:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005378:	f000 fe44 	bl	8006004 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800537c:	bf00      	nop
 800537e:	bd80      	pop	{r7, pc}

08005380 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8005384:	4802      	ldr	r0, [pc, #8]	; (8005390 <DMA2_Stream3_IRQHandler+0x10>)
 8005386:	f000 fa4b 	bl	8005820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	200134d8 	.word	0x200134d8

08005394 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8005398:	4802      	ldr	r0, [pc, #8]	; (80053a4 <DMA2_Stream4_IRQHandler+0x10>)
 800539a:	f000 fa41 	bl	8005820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800539e:	bf00      	nop
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20013808 	.word	0x20013808

080053a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80053ac:	4802      	ldr	r0, [pc, #8]	; (80053b8 <OTG_FS_IRQHandler+0x10>)
 80053ae:	f001 ff50 	bl	8007252 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80053b2:	bf00      	nop
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	2001527c 	.word	0x2001527c

080053bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053c0:	4b06      	ldr	r3, [pc, #24]	; (80053dc <SystemInit+0x20>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c6:	4a05      	ldr	r2, [pc, #20]	; (80053dc <SystemInit+0x20>)
 80053c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053d0:	bf00      	nop
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	e000ed00 	.word	0xe000ed00

080053e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80053e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005418 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80053e4:	480d      	ldr	r0, [pc, #52]	; (800541c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80053e6:	490e      	ldr	r1, [pc, #56]	; (8005420 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80053e8:	4a0e      	ldr	r2, [pc, #56]	; (8005424 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80053ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053ec:	e002      	b.n	80053f4 <LoopCopyDataInit>

080053ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053f2:	3304      	adds	r3, #4

080053f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053f8:	d3f9      	bcc.n	80053ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053fa:	4a0b      	ldr	r2, [pc, #44]	; (8005428 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80053fc:	4c0b      	ldr	r4, [pc, #44]	; (800542c <LoopFillZerobss+0x26>)
  movs r3, #0
 80053fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005400:	e001      	b.n	8005406 <LoopFillZerobss>

08005402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005404:	3204      	adds	r2, #4

08005406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005408:	d3fb      	bcc.n	8005402 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800540a:	f7ff ffd7 	bl	80053bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800540e:	f00b f8a7 	bl	8010560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005412:	f7fd f98b 	bl	800272c <main>
  bx  lr    
 8005416:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005418:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800541c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005420:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8005424:	08012598 	.word	0x08012598
  ldr r2, =_sbss
 8005428:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800542c:	20015684 	.word	0x20015684

08005430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005430:	e7fe      	b.n	8005430 <ADC_IRQHandler>
	...

08005434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005438:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <HAL_Init+0x40>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a0d      	ldr	r2, [pc, #52]	; (8005474 <HAL_Init+0x40>)
 800543e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005442:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005444:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <HAL_Init+0x40>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a0a      	ldr	r2, [pc, #40]	; (8005474 <HAL_Init+0x40>)
 800544a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800544e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005450:	4b08      	ldr	r3, [pc, #32]	; (8005474 <HAL_Init+0x40>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a07      	ldr	r2, [pc, #28]	; (8005474 <HAL_Init+0x40>)
 8005456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800545c:	2003      	movs	r0, #3
 800545e:	f000 f8fc 	bl	800565a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005462:	200f      	movs	r0, #15
 8005464:	f7ff fed6 	bl	8005214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005468:	f7ff fc70 	bl	8004d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40023c00 	.word	0x40023c00

08005478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800547c:	4b06      	ldr	r3, [pc, #24]	; (8005498 <HAL_IncTick+0x20>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	4b06      	ldr	r3, [pc, #24]	; (800549c <HAL_IncTick+0x24>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4413      	add	r3, r2
 8005488:	4a04      	ldr	r2, [pc, #16]	; (800549c <HAL_IncTick+0x24>)
 800548a:	6013      	str	r3, [r2, #0]
}
 800548c:	bf00      	nop
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000014 	.word	0x20000014
 800549c:	20013d68 	.word	0x20013d68

080054a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  return uwTick;
 80054a4:	4b03      	ldr	r3, [pc, #12]	; (80054b4 <HAL_GetTick+0x14>)
 80054a6:	681b      	ldr	r3, [r3, #0]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	20013d68 	.word	0x20013d68

080054b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054c0:	f7ff ffee 	bl	80054a0 <HAL_GetTick>
 80054c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d0:	d005      	beq.n	80054de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054d2:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <HAL_Delay+0x44>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054de:	bf00      	nop
 80054e0:	f7ff ffde 	bl	80054a0 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d8f7      	bhi.n	80054e0 <HAL_Delay+0x28>
  {
  }
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000014 	.word	0x20000014

08005500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005510:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <__NVIC_SetPriorityGrouping+0x44>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800551c:	4013      	ands	r3, r2
 800551e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800552c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005532:	4a04      	ldr	r2, [pc, #16]	; (8005544 <__NVIC_SetPriorityGrouping+0x44>)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	60d3      	str	r3, [r2, #12]
}
 8005538:	bf00      	nop
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	e000ed00 	.word	0xe000ed00

08005548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800554c:	4b04      	ldr	r3, [pc, #16]	; (8005560 <__NVIC_GetPriorityGrouping+0x18>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	0a1b      	lsrs	r3, r3, #8
 8005552:	f003 0307 	and.w	r3, r3, #7
}
 8005556:	4618      	mov	r0, r3
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	e000ed00 	.word	0xe000ed00

08005564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800556e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005572:	2b00      	cmp	r3, #0
 8005574:	db0b      	blt.n	800558e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	f003 021f 	and.w	r2, r3, #31
 800557c:	4907      	ldr	r1, [pc, #28]	; (800559c <__NVIC_EnableIRQ+0x38>)
 800557e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	2001      	movs	r0, #1
 8005586:	fa00 f202 	lsl.w	r2, r0, r2
 800558a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	e000e100 	.word	0xe000e100

080055a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	4603      	mov	r3, r0
 80055a8:	6039      	str	r1, [r7, #0]
 80055aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	db0a      	blt.n	80055ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	490c      	ldr	r1, [pc, #48]	; (80055ec <__NVIC_SetPriority+0x4c>)
 80055ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055be:	0112      	lsls	r2, r2, #4
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	440b      	add	r3, r1
 80055c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055c8:	e00a      	b.n	80055e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	4908      	ldr	r1, [pc, #32]	; (80055f0 <__NVIC_SetPriority+0x50>)
 80055d0:	79fb      	ldrb	r3, [r7, #7]
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	3b04      	subs	r3, #4
 80055d8:	0112      	lsls	r2, r2, #4
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	440b      	add	r3, r1
 80055de:	761a      	strb	r2, [r3, #24]
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	e000e100 	.word	0xe000e100
 80055f0:	e000ed00 	.word	0xe000ed00

080055f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b089      	sub	sp, #36	; 0x24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f1c3 0307 	rsb	r3, r3, #7
 800560e:	2b04      	cmp	r3, #4
 8005610:	bf28      	it	cs
 8005612:	2304      	movcs	r3, #4
 8005614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	3304      	adds	r3, #4
 800561a:	2b06      	cmp	r3, #6
 800561c:	d902      	bls.n	8005624 <NVIC_EncodePriority+0x30>
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	3b03      	subs	r3, #3
 8005622:	e000      	b.n	8005626 <NVIC_EncodePriority+0x32>
 8005624:	2300      	movs	r3, #0
 8005626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005628:	f04f 32ff 	mov.w	r2, #4294967295
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	43da      	mvns	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	401a      	ands	r2, r3
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800563c:	f04f 31ff 	mov.w	r1, #4294967295
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	fa01 f303 	lsl.w	r3, r1, r3
 8005646:	43d9      	mvns	r1, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800564c:	4313      	orrs	r3, r2
         );
}
 800564e:	4618      	mov	r0, r3
 8005650:	3724      	adds	r7, #36	; 0x24
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b082      	sub	sp, #8
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff ff4c 	bl	8005500 <__NVIC_SetPriorityGrouping>
}
 8005668:	bf00      	nop
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005682:	f7ff ff61 	bl	8005548 <__NVIC_GetPriorityGrouping>
 8005686:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	68b9      	ldr	r1, [r7, #8]
 800568c:	6978      	ldr	r0, [r7, #20]
 800568e:	f7ff ffb1 	bl	80055f4 <NVIC_EncodePriority>
 8005692:	4602      	mov	r2, r0
 8005694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005698:	4611      	mov	r1, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff ff80 	bl	80055a0 <__NVIC_SetPriority>
}
 80056a0:	bf00      	nop
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff ff54 	bl	8005564 <__NVIC_EnableIRQ>
}
 80056bc:	bf00      	nop
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80056d0:	f7ff fee6 	bl	80054a0 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e099      	b.n	8005814 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0201 	bic.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005700:	e00f      	b.n	8005722 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005702:	f7ff fecd 	bl	80054a0 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b05      	cmp	r3, #5
 800570e:	d908      	bls.n	8005722 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2220      	movs	r2, #32
 8005714:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2203      	movs	r2, #3
 800571a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e078      	b.n	8005814 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e8      	bne.n	8005702 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4b38      	ldr	r3, [pc, #224]	; (800581c <HAL_DMA_Init+0x158>)
 800573c:	4013      	ands	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800574e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800575a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	2b04      	cmp	r3, #4
 800577a:	d107      	bne.n	800578c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	4313      	orrs	r3, r2
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f023 0307 	bic.w	r3, r3, #7
 80057a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d117      	bne.n	80057e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00e      	beq.n	80057e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f9e9 	bl	8005ba0 <DMA_CheckFifoParam>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d008      	beq.n	80057e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2240      	movs	r2, #64	; 0x40
 80057d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80057e2:	2301      	movs	r3, #1
 80057e4:	e016      	b.n	8005814 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f9a0 	bl	8005b34 <DMA_CalcBaseAndBitshift>
 80057f4:	4603      	mov	r3, r0
 80057f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fc:	223f      	movs	r2, #63	; 0x3f
 80057fe:	409a      	lsls	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	f010803f 	.word	0xf010803f

08005820 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800582c:	4b92      	ldr	r3, [pc, #584]	; (8005a78 <HAL_DMA_IRQHandler+0x258>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a92      	ldr	r2, [pc, #584]	; (8005a7c <HAL_DMA_IRQHandler+0x25c>)
 8005832:	fba2 2303 	umull	r2, r3, r2, r3
 8005836:	0a9b      	lsrs	r3, r3, #10
 8005838:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584a:	2208      	movs	r2, #8
 800584c:	409a      	lsls	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4013      	ands	r3, r2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01a      	beq.n	800588c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d013      	beq.n	800588c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0204 	bic.w	r2, r2, #4
 8005872:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005878:	2208      	movs	r2, #8
 800587a:	409a      	lsls	r2, r3
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005884:	f043 0201 	orr.w	r2, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005890:	2201      	movs	r2, #1
 8005892:	409a      	lsls	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4013      	ands	r3, r2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d012      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00b      	beq.n	80058c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ae:	2201      	movs	r2, #1
 80058b0:	409a      	lsls	r2, r3
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	f043 0202 	orr.w	r2, r3, #2
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c6:	2204      	movs	r2, #4
 80058c8:	409a      	lsls	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4013      	ands	r3, r2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d012      	beq.n	80058f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00b      	beq.n	80058f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e4:	2204      	movs	r2, #4
 80058e6:	409a      	lsls	r2, r3
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f0:	f043 0204 	orr.w	r2, r3, #4
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fc:	2210      	movs	r2, #16
 80058fe:	409a      	lsls	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4013      	ands	r3, r2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d043      	beq.n	8005990 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d03c      	beq.n	8005990 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591a:	2210      	movs	r2, #16
 800591c:	409a      	lsls	r2, r3
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d018      	beq.n	8005962 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d108      	bne.n	8005950 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d024      	beq.n	8005990 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	4798      	blx	r3
 800594e:	e01f      	b.n	8005990 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01b      	beq.n	8005990 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	4798      	blx	r3
 8005960:	e016      	b.n	8005990 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d107      	bne.n	8005980 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0208 	bic.w	r2, r2, #8
 800597e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005994:	2220      	movs	r2, #32
 8005996:	409a      	lsls	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 808e 	beq.w	8005abe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8086 	beq.w	8005abe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b6:	2220      	movs	r2, #32
 80059b8:	409a      	lsls	r2, r3
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b05      	cmp	r3, #5
 80059c8:	d136      	bne.n	8005a38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0216 	bic.w	r2, r2, #22
 80059d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695a      	ldr	r2, [r3, #20]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d103      	bne.n	80059fa <HAL_DMA_IRQHandler+0x1da>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0208 	bic.w	r2, r2, #8
 8005a08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0e:	223f      	movs	r2, #63	; 0x3f
 8005a10:	409a      	lsls	r2, r3
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d07d      	beq.n	8005b2a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	4798      	blx	r3
        }
        return;
 8005a36:	e078      	b.n	8005b2a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d01c      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d108      	bne.n	8005a66 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d030      	beq.n	8005abe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	4798      	blx	r3
 8005a64:	e02b      	b.n	8005abe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d027      	beq.n	8005abe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	4798      	blx	r3
 8005a76:	e022      	b.n	8005abe <HAL_DMA_IRQHandler+0x29e>
 8005a78:	2000000c 	.word	0x2000000c
 8005a7c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10f      	bne.n	8005aae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 0210 	bic.w	r2, r2, #16
 8005a9c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d032      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d022      	beq.n	8005b18 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2205      	movs	r2, #5
 8005ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0201 	bic.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	3301      	adds	r3, #1
 8005aee:	60bb      	str	r3, [r7, #8]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d307      	bcc.n	8005b06 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f2      	bne.n	8005aea <HAL_DMA_IRQHandler+0x2ca>
 8005b04:	e000      	b.n	8005b08 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005b06:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d005      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	4798      	blx	r3
 8005b28:	e000      	b.n	8005b2c <HAL_DMA_IRQHandler+0x30c>
        return;
 8005b2a:	bf00      	nop
    }
  }
}
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop

08005b34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	3b10      	subs	r3, #16
 8005b44:	4a14      	ldr	r2, [pc, #80]	; (8005b98 <DMA_CalcBaseAndBitshift+0x64>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	091b      	lsrs	r3, r3, #4
 8005b4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b4e:	4a13      	ldr	r2, [pc, #76]	; (8005b9c <DMA_CalcBaseAndBitshift+0x68>)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4413      	add	r3, r2
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d909      	bls.n	8005b76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	1d1a      	adds	r2, r3, #4
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	659a      	str	r2, [r3, #88]	; 0x58
 8005b74:	e007      	b.n	8005b86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b7e:	f023 0303 	bic.w	r3, r3, #3
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	aaaaaaab 	.word	0xaaaaaaab
 8005b9c:	08012330 	.word	0x08012330

08005ba0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d11f      	bne.n	8005bfa <DMA_CheckFifoParam+0x5a>
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d856      	bhi.n	8005c6e <DMA_CheckFifoParam+0xce>
 8005bc0:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <DMA_CheckFifoParam+0x28>)
 8005bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc6:	bf00      	nop
 8005bc8:	08005bd9 	.word	0x08005bd9
 8005bcc:	08005beb 	.word	0x08005beb
 8005bd0:	08005bd9 	.word	0x08005bd9
 8005bd4:	08005c6f 	.word	0x08005c6f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d046      	beq.n	8005c72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005be8:	e043      	b.n	8005c72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bf2:	d140      	bne.n	8005c76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bf8:	e03d      	b.n	8005c76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c02:	d121      	bne.n	8005c48 <DMA_CheckFifoParam+0xa8>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d837      	bhi.n	8005c7a <DMA_CheckFifoParam+0xda>
 8005c0a:	a201      	add	r2, pc, #4	; (adr r2, 8005c10 <DMA_CheckFifoParam+0x70>)
 8005c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c10:	08005c21 	.word	0x08005c21
 8005c14:	08005c27 	.word	0x08005c27
 8005c18:	08005c21 	.word	0x08005c21
 8005c1c:	08005c39 	.word	0x08005c39
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	73fb      	strb	r3, [r7, #15]
      break;
 8005c24:	e030      	b.n	8005c88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d025      	beq.n	8005c7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c36:	e022      	b.n	8005c7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c40:	d11f      	bne.n	8005c82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c46:	e01c      	b.n	8005c82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d903      	bls.n	8005c56 <DMA_CheckFifoParam+0xb6>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d003      	beq.n	8005c5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c54:	e018      	b.n	8005c88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	73fb      	strb	r3, [r7, #15]
      break;
 8005c5a:	e015      	b.n	8005c88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00e      	beq.n	8005c86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c6c:	e00b      	b.n	8005c86 <DMA_CheckFifoParam+0xe6>
      break;
 8005c6e:	bf00      	nop
 8005c70:	e00a      	b.n	8005c88 <DMA_CheckFifoParam+0xe8>
      break;
 8005c72:	bf00      	nop
 8005c74:	e008      	b.n	8005c88 <DMA_CheckFifoParam+0xe8>
      break;
 8005c76:	bf00      	nop
 8005c78:	e006      	b.n	8005c88 <DMA_CheckFifoParam+0xe8>
      break;
 8005c7a:	bf00      	nop
 8005c7c:	e004      	b.n	8005c88 <DMA_CheckFifoParam+0xe8>
      break;
 8005c7e:	bf00      	nop
 8005c80:	e002      	b.n	8005c88 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c82:	bf00      	nop
 8005c84:	e000      	b.n	8005c88 <DMA_CheckFifoParam+0xe8>
      break;
 8005c86:	bf00      	nop
    }
  } 
  
  return status; 
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop

08005c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b089      	sub	sp, #36	; 0x24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	e159      	b.n	8005f68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	f040 8148 	bne.w	8005f62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d005      	beq.n	8005cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d130      	bne.n	8005d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d20:	2201      	movs	r2, #1
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	091b      	lsrs	r3, r3, #4
 8005d36:	f003 0201 	and.w	r2, r3, #1
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f003 0303 	and.w	r3, r3, #3
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d017      	beq.n	8005d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	2203      	movs	r2, #3
 8005d64:	fa02 f303 	lsl.w	r3, r2, r3
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d123      	bne.n	8005ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	08da      	lsrs	r2, r3, #3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3208      	adds	r2, #8
 8005d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	220f      	movs	r2, #15
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	43db      	mvns	r3, r3
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	4013      	ands	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	691a      	ldr	r2, [r3, #16]
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	08da      	lsrs	r2, r3, #3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3208      	adds	r2, #8
 8005dd6:	69b9      	ldr	r1, [r7, #24]
 8005dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	2203      	movs	r2, #3
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	43db      	mvns	r3, r3
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	4013      	ands	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f003 0203 	and.w	r2, r3, #3
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	fa02 f303 	lsl.w	r3, r2, r3
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 80a2 	beq.w	8005f62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	4b57      	ldr	r3, [pc, #348]	; (8005f80 <HAL_GPIO_Init+0x2e8>)
 8005e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e26:	4a56      	ldr	r2, [pc, #344]	; (8005f80 <HAL_GPIO_Init+0x2e8>)
 8005e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005e2e:	4b54      	ldr	r3, [pc, #336]	; (8005f80 <HAL_GPIO_Init+0x2e8>)
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e3a:	4a52      	ldr	r2, [pc, #328]	; (8005f84 <HAL_GPIO_Init+0x2ec>)
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	089b      	lsrs	r3, r3, #2
 8005e40:	3302      	adds	r3, #2
 8005e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	220f      	movs	r2, #15
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	43db      	mvns	r3, r3
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a49      	ldr	r2, [pc, #292]	; (8005f88 <HAL_GPIO_Init+0x2f0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d019      	beq.n	8005e9a <HAL_GPIO_Init+0x202>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a48      	ldr	r2, [pc, #288]	; (8005f8c <HAL_GPIO_Init+0x2f4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <HAL_GPIO_Init+0x1fe>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a47      	ldr	r2, [pc, #284]	; (8005f90 <HAL_GPIO_Init+0x2f8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00d      	beq.n	8005e92 <HAL_GPIO_Init+0x1fa>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a46      	ldr	r2, [pc, #280]	; (8005f94 <HAL_GPIO_Init+0x2fc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d007      	beq.n	8005e8e <HAL_GPIO_Init+0x1f6>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a45      	ldr	r2, [pc, #276]	; (8005f98 <HAL_GPIO_Init+0x300>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d101      	bne.n	8005e8a <HAL_GPIO_Init+0x1f2>
 8005e86:	2304      	movs	r3, #4
 8005e88:	e008      	b.n	8005e9c <HAL_GPIO_Init+0x204>
 8005e8a:	2307      	movs	r3, #7
 8005e8c:	e006      	b.n	8005e9c <HAL_GPIO_Init+0x204>
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e004      	b.n	8005e9c <HAL_GPIO_Init+0x204>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e002      	b.n	8005e9c <HAL_GPIO_Init+0x204>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <HAL_GPIO_Init+0x204>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	f002 0203 	and.w	r2, r2, #3
 8005ea2:	0092      	lsls	r2, r2, #2
 8005ea4:	4093      	lsls	r3, r2
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005eac:	4935      	ldr	r1, [pc, #212]	; (8005f84 <HAL_GPIO_Init+0x2ec>)
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	089b      	lsrs	r3, r3, #2
 8005eb2:	3302      	adds	r3, #2
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005eba:	4b38      	ldr	r3, [pc, #224]	; (8005f9c <HAL_GPIO_Init+0x304>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	43db      	mvns	r3, r3
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ede:	4a2f      	ldr	r2, [pc, #188]	; (8005f9c <HAL_GPIO_Init+0x304>)
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ee4:	4b2d      	ldr	r3, [pc, #180]	; (8005f9c <HAL_GPIO_Init+0x304>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	43db      	mvns	r3, r3
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f08:	4a24      	ldr	r2, [pc, #144]	; (8005f9c <HAL_GPIO_Init+0x304>)
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f0e:	4b23      	ldr	r3, [pc, #140]	; (8005f9c <HAL_GPIO_Init+0x304>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	43db      	mvns	r3, r3
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f32:	4a1a      	ldr	r2, [pc, #104]	; (8005f9c <HAL_GPIO_Init+0x304>)
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f38:	4b18      	ldr	r3, [pc, #96]	; (8005f9c <HAL_GPIO_Init+0x304>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	43db      	mvns	r3, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4013      	ands	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f5c:	4a0f      	ldr	r2, [pc, #60]	; (8005f9c <HAL_GPIO_Init+0x304>)
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	3301      	adds	r3, #1
 8005f66:	61fb      	str	r3, [r7, #28]
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	2b0f      	cmp	r3, #15
 8005f6c:	f67f aea2 	bls.w	8005cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f70:	bf00      	nop
 8005f72:	bf00      	nop
 8005f74:	3724      	adds	r7, #36	; 0x24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40023800 	.word	0x40023800
 8005f84:	40013800 	.word	0x40013800
 8005f88:	40020000 	.word	0x40020000
 8005f8c:	40020400 	.word	0x40020400
 8005f90:	40020800 	.word	0x40020800
 8005f94:	40020c00 	.word	0x40020c00
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40013c00 	.word	0x40013c00

08005fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	887b      	ldrh	r3, [r7, #2]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	73fb      	strb	r3, [r7, #15]
 8005fbc:	e001      	b.n	8005fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	807b      	strh	r3, [r7, #2]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fe0:	787b      	ldrb	r3, [r7, #1]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fe6:	887a      	ldrh	r2, [r7, #2]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005fec:	e003      	b.n	8005ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005fee:	887b      	ldrh	r3, [r7, #2]
 8005ff0:	041a      	lsls	r2, r3, #16
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	619a      	str	r2, [r3, #24]
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	4603      	mov	r3, r0
 800600c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800600e:	4b08      	ldr	r3, [pc, #32]	; (8006030 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006010:	695a      	ldr	r2, [r3, #20]
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	4013      	ands	r3, r2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d006      	beq.n	8006028 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800601a:	4a05      	ldr	r2, [pc, #20]	; (8006030 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800601c:	88fb      	ldrh	r3, [r7, #6]
 800601e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006020:	88fb      	ldrh	r3, [r7, #6]
 8006022:	4618      	mov	r0, r3
 8006024:	f7fc f9be 	bl	80023a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006028:	bf00      	nop
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	40013c00 	.word	0x40013c00

08006034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e12b      	b.n	800629e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fe fe9e 	bl	8004d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2224      	movs	r2, #36	; 0x24
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0201 	bic.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006086:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006096:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006098:	f002 fd5a 	bl	8008b50 <HAL_RCC_GetPCLK1Freq>
 800609c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	4a81      	ldr	r2, [pc, #516]	; (80062a8 <HAL_I2C_Init+0x274>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d807      	bhi.n	80060b8 <HAL_I2C_Init+0x84>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4a80      	ldr	r2, [pc, #512]	; (80062ac <HAL_I2C_Init+0x278>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	bf94      	ite	ls
 80060b0:	2301      	movls	r3, #1
 80060b2:	2300      	movhi	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	e006      	b.n	80060c6 <HAL_I2C_Init+0x92>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4a7d      	ldr	r2, [pc, #500]	; (80062b0 <HAL_I2C_Init+0x27c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	bf94      	ite	ls
 80060c0:	2301      	movls	r3, #1
 80060c2:	2300      	movhi	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e0e7      	b.n	800629e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4a78      	ldr	r2, [pc, #480]	; (80062b4 <HAL_I2C_Init+0x280>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	0c9b      	lsrs	r3, r3, #18
 80060d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	4a6a      	ldr	r2, [pc, #424]	; (80062a8 <HAL_I2C_Init+0x274>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d802      	bhi.n	8006108 <HAL_I2C_Init+0xd4>
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	3301      	adds	r3, #1
 8006106:	e009      	b.n	800611c <HAL_I2C_Init+0xe8>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800610e:	fb02 f303 	mul.w	r3, r2, r3
 8006112:	4a69      	ldr	r2, [pc, #420]	; (80062b8 <HAL_I2C_Init+0x284>)
 8006114:	fba2 2303 	umull	r2, r3, r2, r3
 8006118:	099b      	lsrs	r3, r3, #6
 800611a:	3301      	adds	r3, #1
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6812      	ldr	r2, [r2, #0]
 8006120:	430b      	orrs	r3, r1
 8006122:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800612e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	495c      	ldr	r1, [pc, #368]	; (80062a8 <HAL_I2C_Init+0x274>)
 8006138:	428b      	cmp	r3, r1
 800613a:	d819      	bhi.n	8006170 <HAL_I2C_Init+0x13c>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	1e59      	subs	r1, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	fbb1 f3f3 	udiv	r3, r1, r3
 800614a:	1c59      	adds	r1, r3, #1
 800614c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006150:	400b      	ands	r3, r1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <HAL_I2C_Init+0x138>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	1e59      	subs	r1, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	fbb1 f3f3 	udiv	r3, r1, r3
 8006164:	3301      	adds	r3, #1
 8006166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800616a:	e051      	b.n	8006210 <HAL_I2C_Init+0x1dc>
 800616c:	2304      	movs	r3, #4
 800616e:	e04f      	b.n	8006210 <HAL_I2C_Init+0x1dc>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d111      	bne.n	800619c <HAL_I2C_Init+0x168>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	1e58      	subs	r0, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6859      	ldr	r1, [r3, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	440b      	add	r3, r1
 8006186:	fbb0 f3f3 	udiv	r3, r0, r3
 800618a:	3301      	adds	r3, #1
 800618c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006190:	2b00      	cmp	r3, #0
 8006192:	bf0c      	ite	eq
 8006194:	2301      	moveq	r3, #1
 8006196:	2300      	movne	r3, #0
 8006198:	b2db      	uxtb	r3, r3
 800619a:	e012      	b.n	80061c2 <HAL_I2C_Init+0x18e>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	1e58      	subs	r0, r3, #1
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6859      	ldr	r1, [r3, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	0099      	lsls	r1, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80061b2:	3301      	adds	r3, #1
 80061b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	bf0c      	ite	eq
 80061bc:	2301      	moveq	r3, #1
 80061be:	2300      	movne	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <HAL_I2C_Init+0x196>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e022      	b.n	8006210 <HAL_I2C_Init+0x1dc>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10e      	bne.n	80061f0 <HAL_I2C_Init+0x1bc>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	1e58      	subs	r0, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6859      	ldr	r1, [r3, #4]
 80061da:	460b      	mov	r3, r1
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	440b      	add	r3, r1
 80061e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80061e4:	3301      	adds	r3, #1
 80061e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ee:	e00f      	b.n	8006210 <HAL_I2C_Init+0x1dc>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	1e58      	subs	r0, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6859      	ldr	r1, [r3, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	440b      	add	r3, r1
 80061fe:	0099      	lsls	r1, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	fbb0 f3f3 	udiv	r3, r0, r3
 8006206:	3301      	adds	r3, #1
 8006208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800620c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	6809      	ldr	r1, [r1, #0]
 8006214:	4313      	orrs	r3, r2
 8006216:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69da      	ldr	r2, [r3, #28]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800623e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6911      	ldr	r1, [r2, #16]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	68d2      	ldr	r2, [r2, #12]
 800624a:	4311      	orrs	r1, r2
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6812      	ldr	r2, [r2, #0]
 8006250:	430b      	orrs	r3, r1
 8006252:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695a      	ldr	r2, [r3, #20]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	000186a0 	.word	0x000186a0
 80062ac:	001e847f 	.word	0x001e847f
 80062b0:	003d08ff 	.word	0x003d08ff
 80062b4:	431bde83 	.word	0x431bde83
 80062b8:	10624dd3 	.word	0x10624dd3

080062bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	4608      	mov	r0, r1
 80062c6:	4611      	mov	r1, r2
 80062c8:	461a      	mov	r2, r3
 80062ca:	4603      	mov	r3, r0
 80062cc:	817b      	strh	r3, [r7, #10]
 80062ce:	460b      	mov	r3, r1
 80062d0:	813b      	strh	r3, [r7, #8]
 80062d2:	4613      	mov	r3, r2
 80062d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062d6:	f7ff f8e3 	bl	80054a0 <HAL_GetTick>
 80062da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	f040 80d9 	bne.w	800649c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	2319      	movs	r3, #25
 80062f0:	2201      	movs	r2, #1
 80062f2:	496d      	ldr	r1, [pc, #436]	; (80064a8 <HAL_I2C_Mem_Write+0x1ec>)
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 fc7f 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006300:	2302      	movs	r3, #2
 8006302:	e0cc      	b.n	800649e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_I2C_Mem_Write+0x56>
 800630e:	2302      	movs	r3, #2
 8006310:	e0c5      	b.n	800649e <HAL_I2C_Mem_Write+0x1e2>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b01      	cmp	r3, #1
 8006326:	d007      	beq.n	8006338 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0201 	orr.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006346:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2221      	movs	r2, #33	; 0x21
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2240      	movs	r2, #64	; 0x40
 8006354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a3a      	ldr	r2, [r7, #32]
 8006362:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006368:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4a4d      	ldr	r2, [pc, #308]	; (80064ac <HAL_I2C_Mem_Write+0x1f0>)
 8006378:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800637a:	88f8      	ldrh	r0, [r7, #6]
 800637c:	893a      	ldrh	r2, [r7, #8]
 800637e:	8979      	ldrh	r1, [r7, #10]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	9301      	str	r3, [sp, #4]
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	4603      	mov	r3, r0
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fab6 	bl	80068fc <I2C_RequestMemoryWrite>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d052      	beq.n	800643c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e081      	b.n	800649e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 fd00 	bl	8006da4 <I2C_WaitOnTXEFlagUntilTimeout>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00d      	beq.n	80063c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d107      	bne.n	80063c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e06b      	b.n	800649e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	781a      	ldrb	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b04      	cmp	r3, #4
 8006402:	d11b      	bne.n	800643c <HAL_I2C_Mem_Write+0x180>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006408:	2b00      	cmp	r3, #0
 800640a:	d017      	beq.n	800643c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	781a      	ldrb	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006426:	3b01      	subs	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006432:	b29b      	uxth	r3, r3
 8006434:	3b01      	subs	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1aa      	bne.n	800639a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fcec 	bl	8006e26 <I2C_WaitOnBTFFlagUntilTimeout>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00d      	beq.n	8006470 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006458:	2b04      	cmp	r3, #4
 800645a:	d107      	bne.n	800646c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800646a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e016      	b.n	800649e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800647e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	e000      	b.n	800649e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800649c:	2302      	movs	r3, #2
  }
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	00100002 	.word	0x00100002
 80064ac:	ffff0000 	.word	0xffff0000

080064b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08c      	sub	sp, #48	; 0x30
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	4608      	mov	r0, r1
 80064ba:	4611      	mov	r1, r2
 80064bc:	461a      	mov	r2, r3
 80064be:	4603      	mov	r3, r0
 80064c0:	817b      	strh	r3, [r7, #10]
 80064c2:	460b      	mov	r3, r1
 80064c4:	813b      	strh	r3, [r7, #8]
 80064c6:	4613      	mov	r3, r2
 80064c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064ca:	f7fe ffe9 	bl	80054a0 <HAL_GetTick>
 80064ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b20      	cmp	r3, #32
 80064da:	f040 8208 	bne.w	80068ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	2319      	movs	r3, #25
 80064e4:	2201      	movs	r2, #1
 80064e6:	497b      	ldr	r1, [pc, #492]	; (80066d4 <HAL_I2C_Mem_Read+0x224>)
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fb85 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80064f4:	2302      	movs	r3, #2
 80064f6:	e1fb      	b.n	80068f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <HAL_I2C_Mem_Read+0x56>
 8006502:	2302      	movs	r3, #2
 8006504:	e1f4      	b.n	80068f0 <HAL_I2C_Mem_Read+0x440>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b01      	cmp	r3, #1
 800651a:	d007      	beq.n	800652c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0201 	orr.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800653a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2222      	movs	r2, #34	; 0x22
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2240      	movs	r2, #64	; 0x40
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006556:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800655c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4a5b      	ldr	r2, [pc, #364]	; (80066d8 <HAL_I2C_Mem_Read+0x228>)
 800656c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800656e:	88f8      	ldrh	r0, [r7, #6]
 8006570:	893a      	ldrh	r2, [r7, #8]
 8006572:	8979      	ldrh	r1, [r7, #10]
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	4603      	mov	r3, r0
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 fa52 	bl	8006a28 <I2C_RequestMemoryRead>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e1b0      	b.n	80068f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006592:	2b00      	cmp	r3, #0
 8006594:	d113      	bne.n	80065be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006596:	2300      	movs	r3, #0
 8006598:	623b      	str	r3, [r7, #32]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	623b      	str	r3, [r7, #32]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	623b      	str	r3, [r7, #32]
 80065aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	e184      	b.n	80068c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d11b      	bne.n	80065fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	61fb      	str	r3, [r7, #28]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	61fb      	str	r3, [r7, #28]
 80065ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	e164      	b.n	80068c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006602:	2b02      	cmp	r3, #2
 8006604:	d11b      	bne.n	800663e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006614:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006626:	2300      	movs	r3, #0
 8006628:	61bb      	str	r3, [r7, #24]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	61bb      	str	r3, [r7, #24]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	e144      	b.n	80068c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800663e:	2300      	movs	r3, #0
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006654:	e138      	b.n	80068c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665a:	2b03      	cmp	r3, #3
 800665c:	f200 80f1 	bhi.w	8006842 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006664:	2b01      	cmp	r3, #1
 8006666:	d123      	bne.n	80066b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 fc1b 	bl	8006ea8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e139      	b.n	80068f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	691a      	ldr	r2, [r3, #16]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006698:	3b01      	subs	r3, #1
 800669a:	b29a      	uxth	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3b01      	subs	r3, #1
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066ae:	e10b      	b.n	80068c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d14e      	bne.n	8006756 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	2200      	movs	r2, #0
 80066c0:	4906      	ldr	r1, [pc, #24]	; (80066dc <HAL_I2C_Mem_Read+0x22c>)
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fa98 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d008      	beq.n	80066e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e10e      	b.n	80068f0 <HAL_I2C_Mem_Read+0x440>
 80066d2:	bf00      	nop
 80066d4:	00100002 	.word	0x00100002
 80066d8:	ffff0000 	.word	0xffff0000
 80066dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691a      	ldr	r2, [r3, #16]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673e:	3b01      	subs	r3, #1
 8006740:	b29a      	uxth	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006754:	e0b8      	b.n	80068c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	2200      	movs	r2, #0
 800675e:	4966      	ldr	r1, [pc, #408]	; (80068f8 <HAL_I2C_Mem_Read+0x448>)
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 fa49 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e0bf      	b.n	80068f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800677e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3b01      	subs	r3, #1
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b8:	2200      	movs	r2, #0
 80067ba:	494f      	ldr	r1, [pc, #316]	; (80068f8 <HAL_I2C_Mem_Read+0x448>)
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 fa1b 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e091      	b.n	80068f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691a      	ldr	r2, [r3, #16]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006804:	b29b      	uxth	r3, r3
 8006806:	3b01      	subs	r3, #1
 8006808:	b29a      	uxth	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800682a:	3b01      	subs	r3, #1
 800682c:	b29a      	uxth	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006840:	e042      	b.n	80068c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006844:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 fb2e 	bl	8006ea8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e04c      	b.n	80068f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006872:	3b01      	subs	r3, #1
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687e:	b29b      	uxth	r3, r3
 8006880:	3b01      	subs	r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b04      	cmp	r3, #4
 8006894:	d118      	bne.n	80068c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f47f aec2 	bne.w	8006656 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2220      	movs	r2, #32
 80068d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	e000      	b.n	80068f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80068ee:	2302      	movs	r3, #2
  }
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3728      	adds	r7, #40	; 0x28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	00010004 	.word	0x00010004

080068fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af02      	add	r7, sp, #8
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	4608      	mov	r0, r1
 8006906:	4611      	mov	r1, r2
 8006908:	461a      	mov	r2, r3
 800690a:	4603      	mov	r3, r0
 800690c:	817b      	strh	r3, [r7, #10]
 800690e:	460b      	mov	r3, r1
 8006910:	813b      	strh	r3, [r7, #8]
 8006912:	4613      	mov	r3, r2
 8006914:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006924:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	2200      	movs	r2, #0
 800692e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 f960 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00d      	beq.n	800695a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800694c:	d103      	bne.n	8006956 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006954:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e05f      	b.n	8006a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800695a:	897b      	ldrh	r3, [r7, #10]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	461a      	mov	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006968:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	6a3a      	ldr	r2, [r7, #32]
 800696e:	492d      	ldr	r1, [pc, #180]	; (8006a24 <I2C_RequestMemoryWrite+0x128>)
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 f998 	bl	8006ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e04c      	b.n	8006a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006980:	2300      	movs	r3, #0
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006998:	6a39      	ldr	r1, [r7, #32]
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 fa02 	bl	8006da4 <I2C_WaitOnTXEFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00d      	beq.n	80069c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d107      	bne.n	80069be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e02b      	b.n	8006a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d105      	bne.n	80069d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069c8:	893b      	ldrh	r3, [r7, #8]
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	611a      	str	r2, [r3, #16]
 80069d2:	e021      	b.n	8006a18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80069d4:	893b      	ldrh	r3, [r7, #8]
 80069d6:	0a1b      	lsrs	r3, r3, #8
 80069d8:	b29b      	uxth	r3, r3
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e4:	6a39      	ldr	r1, [r7, #32]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 f9dc 	bl	8006da4 <I2C_WaitOnTXEFlagUntilTimeout>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00d      	beq.n	8006a0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d107      	bne.n	8006a0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e005      	b.n	8006a1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a0e:	893b      	ldrh	r3, [r7, #8]
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3718      	adds	r7, #24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	00010002 	.word	0x00010002

08006a28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af02      	add	r7, sp, #8
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	4608      	mov	r0, r1
 8006a32:	4611      	mov	r1, r2
 8006a34:	461a      	mov	r2, r3
 8006a36:	4603      	mov	r3, r0
 8006a38:	817b      	strh	r3, [r7, #10]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	813b      	strh	r3, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 f8c2 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00d      	beq.n	8006a96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a88:	d103      	bne.n	8006a92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e0aa      	b.n	8006bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a96:	897b      	ldrh	r3, [r7, #10]
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006aa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	6a3a      	ldr	r2, [r7, #32]
 8006aaa:	4952      	ldr	r1, [pc, #328]	; (8006bf4 <I2C_RequestMemoryRead+0x1cc>)
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 f8fa 	bl	8006ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e097      	b.n	8006bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006abc:	2300      	movs	r3, #0
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	617b      	str	r3, [r7, #20]
 8006ad0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad4:	6a39      	ldr	r1, [r7, #32]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 f964 	bl	8006da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00d      	beq.n	8006afe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d107      	bne.n	8006afa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006af8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e076      	b.n	8006bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d105      	bne.n	8006b10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b04:	893b      	ldrh	r3, [r7, #8]
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	611a      	str	r2, [r3, #16]
 8006b0e:	e021      	b.n	8006b54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b10:	893b      	ldrh	r3, [r7, #8]
 8006b12:	0a1b      	lsrs	r3, r3, #8
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b20:	6a39      	ldr	r1, [r7, #32]
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 f93e 	bl	8006da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00d      	beq.n	8006b4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d107      	bne.n	8006b46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e050      	b.n	8006bec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b4a:	893b      	ldrh	r3, [r7, #8]
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b56:	6a39      	ldr	r1, [r7, #32]
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f923 	bl	8006da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00d      	beq.n	8006b80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d107      	bne.n	8006b7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e035      	b.n	8006bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 f82b 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00d      	beq.n	8006bc4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb6:	d103      	bne.n	8006bc0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e013      	b.n	8006bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006bc4:	897b      	ldrh	r3, [r7, #10]
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	f043 0301 	orr.w	r3, r3, #1
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	6a3a      	ldr	r2, [r7, #32]
 8006bd8:	4906      	ldr	r1, [pc, #24]	; (8006bf4 <I2C_RequestMemoryRead+0x1cc>)
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 f863 	bl	8006ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e000      	b.n	8006bec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	00010002 	.word	0x00010002

08006bf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	4613      	mov	r3, r2
 8006c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c08:	e025      	b.n	8006c56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c10:	d021      	beq.n	8006c56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c12:	f7fe fc45 	bl	80054a0 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d302      	bcc.n	8006c28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d116      	bne.n	8006c56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	f043 0220 	orr.w	r2, r3, #32
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e023      	b.n	8006c9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	0c1b      	lsrs	r3, r3, #16
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d10d      	bne.n	8006c7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	43da      	mvns	r2, r3
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	bf0c      	ite	eq
 8006c72:	2301      	moveq	r3, #1
 8006c74:	2300      	movne	r3, #0
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	461a      	mov	r2, r3
 8006c7a:	e00c      	b.n	8006c96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	43da      	mvns	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4013      	ands	r3, r2
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	bf0c      	ite	eq
 8006c8e:	2301      	moveq	r3, #1
 8006c90:	2300      	movne	r3, #0
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d0b6      	beq.n	8006c0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
 8006cb2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cb4:	e051      	b.n	8006d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cc4:	d123      	bne.n	8006d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	f043 0204 	orr.w	r2, r3, #4
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e046      	b.n	8006d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d14:	d021      	beq.n	8006d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d16:	f7fe fbc3 	bl	80054a0 <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d302      	bcc.n	8006d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d116      	bne.n	8006d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	f043 0220 	orr.w	r2, r3, #32
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e020      	b.n	8006d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	0c1b      	lsrs	r3, r3, #16
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d10c      	bne.n	8006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	43da      	mvns	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	bf14      	ite	ne
 8006d76:	2301      	movne	r3, #1
 8006d78:	2300      	moveq	r3, #0
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	e00b      	b.n	8006d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	43da      	mvns	r2, r3
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	4013      	ands	r3, r2
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bf14      	ite	ne
 8006d90:	2301      	movne	r3, #1
 8006d92:	2300      	moveq	r3, #0
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d18d      	bne.n	8006cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006db0:	e02d      	b.n	8006e0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 f8ce 	bl	8006f54 <I2C_IsAcknowledgeFailed>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e02d      	b.n	8006e1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc8:	d021      	beq.n	8006e0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dca:	f7fe fb69 	bl	80054a0 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d302      	bcc.n	8006de0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d116      	bne.n	8006e0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	f043 0220 	orr.w	r2, r3, #32
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e007      	b.n	8006e1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e18:	2b80      	cmp	r3, #128	; 0x80
 8006e1a:	d1ca      	bne.n	8006db2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e32:	e02d      	b.n	8006e90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 f88d 	bl	8006f54 <I2C_IsAcknowledgeFailed>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e02d      	b.n	8006ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4a:	d021      	beq.n	8006e90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e4c:	f7fe fb28 	bl	80054a0 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d302      	bcc.n	8006e62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d116      	bne.n	8006e90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7c:	f043 0220 	orr.w	r2, r3, #32
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e007      	b.n	8006ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	f003 0304 	and.w	r3, r3, #4
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d1ca      	bne.n	8006e34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006eb4:	e042      	b.n	8006f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	f003 0310 	and.w	r3, r3, #16
 8006ec0:	2b10      	cmp	r3, #16
 8006ec2:	d119      	bne.n	8006ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f06f 0210 	mvn.w	r2, #16
 8006ecc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e029      	b.n	8006f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ef8:	f7fe fad2 	bl	80054a0 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d302      	bcc.n	8006f0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d116      	bne.n	8006f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2220      	movs	r2, #32
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f28:	f043 0220 	orr.w	r2, r3, #32
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e007      	b.n	8006f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f46:	2b40      	cmp	r3, #64	; 0x40
 8006f48:	d1b5      	bne.n	8006eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f6a:	d11b      	bne.n	8006fa4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	f043 0204 	orr.w	r2, r3, #4
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e000      	b.n	8006fa6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fb4:	b08f      	sub	sp, #60	; 0x3c
 8006fb6:	af0a      	add	r7, sp, #40	; 0x28
 8006fb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e10f      	b.n	80071e4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d106      	bne.n	8006fe4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f008 ffa0 	bl	800ff24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2203      	movs	r2, #3
 8006fe8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d102      	bne.n	8006ffe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f003 fcd9 	bl	800a9ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	603b      	str	r3, [r7, #0]
 800700e:	687e      	ldr	r6, [r7, #4]
 8007010:	466d      	mov	r5, sp
 8007012:	f106 0410 	add.w	r4, r6, #16
 8007016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800701a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800701c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800701e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007022:	e885 0003 	stmia.w	r5, {r0, r1}
 8007026:	1d33      	adds	r3, r6, #4
 8007028:	cb0e      	ldmia	r3, {r1, r2, r3}
 800702a:	6838      	ldr	r0, [r7, #0]
 800702c:	f003 fbb0 	bl	800a790 <USB_CoreInit>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d005      	beq.n	8007042 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2202      	movs	r2, #2
 800703a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e0d0      	b.n	80071e4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2100      	movs	r1, #0
 8007048:	4618      	mov	r0, r3
 800704a:	f003 fcc7 	bl	800a9dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800704e:	2300      	movs	r3, #0
 8007050:	73fb      	strb	r3, [r7, #15]
 8007052:	e04a      	b.n	80070ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007054:	7bfa      	ldrb	r2, [r7, #15]
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	333d      	adds	r3, #61	; 0x3d
 8007064:	2201      	movs	r2, #1
 8007066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007068:	7bfa      	ldrb	r2, [r7, #15]
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	333c      	adds	r3, #60	; 0x3c
 8007078:	7bfa      	ldrb	r2, [r7, #15]
 800707a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800707c:	7bfa      	ldrb	r2, [r7, #15]
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	b298      	uxth	r0, r3
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	4613      	mov	r3, r2
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	1a9b      	subs	r3, r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	440b      	add	r3, r1
 800708e:	3342      	adds	r3, #66	; 0x42
 8007090:	4602      	mov	r2, r0
 8007092:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007094:	7bfa      	ldrb	r2, [r7, #15]
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	4613      	mov	r3, r2
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	1a9b      	subs	r3, r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	333f      	adds	r3, #63	; 0x3f
 80070a4:	2200      	movs	r2, #0
 80070a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80070a8:	7bfa      	ldrb	r2, [r7, #15]
 80070aa:	6879      	ldr	r1, [r7, #4]
 80070ac:	4613      	mov	r3, r2
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	1a9b      	subs	r3, r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	440b      	add	r3, r1
 80070b6:	3344      	adds	r3, #68	; 0x44
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80070bc:	7bfa      	ldrb	r2, [r7, #15]
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	4613      	mov	r3, r2
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	1a9b      	subs	r3, r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	3348      	adds	r3, #72	; 0x48
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80070d0:	7bfa      	ldrb	r2, [r7, #15]
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	4613      	mov	r3, r2
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	1a9b      	subs	r3, r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	440b      	add	r3, r1
 80070de:	3350      	adds	r3, #80	; 0x50
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	3301      	adds	r3, #1
 80070e8:	73fb      	strb	r3, [r7, #15]
 80070ea:	7bfa      	ldrb	r2, [r7, #15]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d3af      	bcc.n	8007054 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]
 80070f8:	e044      	b.n	8007184 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80070fa:	7bfa      	ldrb	r2, [r7, #15]
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	4613      	mov	r3, r2
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	440b      	add	r3, r1
 8007108:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800710c:	2200      	movs	r2, #0
 800710e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007110:	7bfa      	ldrb	r2, [r7, #15]
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	4613      	mov	r3, r2
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	1a9b      	subs	r3, r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	440b      	add	r3, r1
 800711e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007122:	7bfa      	ldrb	r2, [r7, #15]
 8007124:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007126:	7bfa      	ldrb	r2, [r7, #15]
 8007128:	6879      	ldr	r1, [r7, #4]
 800712a:	4613      	mov	r3, r2
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	1a9b      	subs	r3, r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	440b      	add	r3, r1
 8007134:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007138:	2200      	movs	r2, #0
 800713a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800713c:	7bfa      	ldrb	r2, [r7, #15]
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	4613      	mov	r3, r2
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	1a9b      	subs	r3, r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007152:	7bfa      	ldrb	r2, [r7, #15]
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	4613      	mov	r3, r2
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	1a9b      	subs	r3, r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	440b      	add	r3, r1
 8007160:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007168:	7bfa      	ldrb	r2, [r7, #15]
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	4613      	mov	r3, r2
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	1a9b      	subs	r3, r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	440b      	add	r3, r1
 8007176:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	3301      	adds	r3, #1
 8007182:	73fb      	strb	r3, [r7, #15]
 8007184:	7bfa      	ldrb	r2, [r7, #15]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	429a      	cmp	r2, r3
 800718c:	d3b5      	bcc.n	80070fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	687e      	ldr	r6, [r7, #4]
 8007196:	466d      	mov	r5, sp
 8007198:	f106 0410 	add.w	r4, r6, #16
 800719c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800719e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80071a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80071ac:	1d33      	adds	r3, r6, #4
 80071ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071b0:	6838      	ldr	r0, [r7, #0]
 80071b2:	f003 fc5f 	bl	800aa74 <USB_DevInit>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d005      	beq.n	80071c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e00d      	b.n	80071e4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f004 fcdb 	bl	800bb98 <USB_DevDisconnect>

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007200:	2b01      	cmp	r3, #1
 8007202:	d101      	bne.n	8007208 <HAL_PCD_Start+0x1c>
 8007204:	2302      	movs	r3, #2
 8007206:	e020      	b.n	800724a <HAL_PCD_Start+0x5e>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007214:	2b01      	cmp	r3, #1
 8007216:	d109      	bne.n	800722c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800721c:	2b01      	cmp	r3, #1
 800721e:	d005      	beq.n	800722c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007224:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4618      	mov	r0, r3
 8007232:	f003 fbb1 	bl	800a998 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f004 fc8b 	bl	800bb56 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007252:	b590      	push	{r4, r7, lr}
 8007254:	b08d      	sub	sp, #52	; 0x34
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4618      	mov	r0, r3
 800726a:	f004 fd49 	bl	800bd00 <USB_GetMode>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	f040 839d 	bne.w	80079b0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4618      	mov	r0, r3
 800727c:	f004 fcad 	bl	800bbda <USB_ReadInterrupts>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 8393 	beq.w	80079ae <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	f004 fca4 	bl	800bbda <USB_ReadInterrupts>
 8007292:	4603      	mov	r3, r0
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b02      	cmp	r3, #2
 800729a:	d107      	bne.n	80072ac <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695a      	ldr	r2, [r3, #20]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f002 0202 	and.w	r2, r2, #2
 80072aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4618      	mov	r0, r3
 80072b2:	f004 fc92 	bl	800bbda <USB_ReadInterrupts>
 80072b6:	4603      	mov	r3, r0
 80072b8:	f003 0310 	and.w	r3, r3, #16
 80072bc:	2b10      	cmp	r3, #16
 80072be:	d161      	bne.n	8007384 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	699a      	ldr	r2, [r3, #24]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f022 0210 	bic.w	r2, r2, #16
 80072ce:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	f003 020f 	and.w	r2, r3, #15
 80072dc:	4613      	mov	r3, r2
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	1a9b      	subs	r3, r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	4413      	add	r3, r2
 80072ec:	3304      	adds	r3, #4
 80072ee:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	0c5b      	lsrs	r3, r3, #17
 80072f4:	f003 030f 	and.w	r3, r3, #15
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d124      	bne.n	8007346 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007302:	4013      	ands	r3, r2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d035      	beq.n	8007374 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	091b      	lsrs	r3, r3, #4
 8007310:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007316:	b29b      	uxth	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	6a38      	ldr	r0, [r7, #32]
 800731c:	f004 fac9 	bl	800b8b2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	091b      	lsrs	r3, r3, #4
 8007328:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800732c:	441a      	add	r2, r3
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	091b      	lsrs	r3, r3, #4
 800733a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800733e:	441a      	add	r2, r3
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	619a      	str	r2, [r3, #24]
 8007344:	e016      	b.n	8007374 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	0c5b      	lsrs	r3, r3, #17
 800734a:	f003 030f 	and.w	r3, r3, #15
 800734e:	2b06      	cmp	r3, #6
 8007350:	d110      	bne.n	8007374 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007358:	2208      	movs	r2, #8
 800735a:	4619      	mov	r1, r3
 800735c:	6a38      	ldr	r0, [r7, #32]
 800735e:	f004 faa8 	bl	800b8b2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	091b      	lsrs	r3, r3, #4
 800736a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800736e:	441a      	add	r2, r3
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699a      	ldr	r2, [r3, #24]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0210 	orr.w	r2, r2, #16
 8007382:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4618      	mov	r0, r3
 800738a:	f004 fc26 	bl	800bbda <USB_ReadInterrupts>
 800738e:	4603      	mov	r3, r0
 8007390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007394:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007398:	d16e      	bne.n	8007478 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f004 fc2c 	bl	800bc00 <USB_ReadDevAllOutEpInterrupt>
 80073a8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80073aa:	e062      	b.n	8007472 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d057      	beq.n	8007466 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073bc:	b2d2      	uxtb	r2, r2
 80073be:	4611      	mov	r1, r2
 80073c0:	4618      	mov	r0, r3
 80073c2:	f004 fc51 	bl	800bc68 <USB_ReadDevOutEPInterrupt>
 80073c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00c      	beq.n	80073ec <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073de:	461a      	mov	r2, r3
 80073e0:	2301      	movs	r3, #1
 80073e2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80073e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fdb0 	bl	8007f4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f003 0308 	and.w	r3, r3, #8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00c      	beq.n	8007410 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007402:	461a      	mov	r2, r3
 8007404:	2308      	movs	r3, #8
 8007406:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 feaa 	bl	8008164 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f003 0310 	and.w	r3, r3, #16
 8007416:	2b00      	cmp	r3, #0
 8007418:	d008      	beq.n	800742c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007426:	461a      	mov	r2, r3
 8007428:	2310      	movs	r3, #16
 800742a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b00      	cmp	r3, #0
 8007434:	d008      	beq.n	8007448 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007442:	461a      	mov	r2, r3
 8007444:	2320      	movs	r3, #32
 8007446:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d009      	beq.n	8007466 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745e:	461a      	mov	r2, r3
 8007460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007464:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	3301      	adds	r3, #1
 800746a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	085b      	lsrs	r3, r3, #1
 8007470:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007474:	2b00      	cmp	r3, #0
 8007476:	d199      	bne.n	80073ac <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4618      	mov	r0, r3
 800747e:	f004 fbac 	bl	800bbda <USB_ReadInterrupts>
 8007482:	4603      	mov	r3, r0
 8007484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007488:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800748c:	f040 80c0 	bne.w	8007610 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f004 fbcd 	bl	800bc34 <USB_ReadDevAllInEpInterrupt>
 800749a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80074a0:	e0b2      	b.n	8007608 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 80a7 	beq.w	80075fc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	4611      	mov	r1, r2
 80074b8:	4618      	mov	r0, r3
 80074ba:	f004 fbf3 	bl	800bca4 <USB_ReadDevInEPInterrupt>
 80074be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d057      	beq.n	800757a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	f003 030f 	and.w	r3, r3, #15
 80074d0:	2201      	movs	r2, #1
 80074d2:	fa02 f303 	lsl.w	r3, r2, r3
 80074d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	43db      	mvns	r3, r3
 80074e4:	69f9      	ldr	r1, [r7, #28]
 80074e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074ea:	4013      	ands	r3, r2
 80074ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fa:	461a      	mov	r2, r3
 80074fc:	2301      	movs	r3, #1
 80074fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d132      	bne.n	800756e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800750c:	4613      	mov	r3, r2
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	1a9b      	subs	r3, r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	440b      	add	r3, r1
 8007516:	3348      	adds	r3, #72	; 0x48
 8007518:	6819      	ldr	r1, [r3, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800751e:	4613      	mov	r3, r2
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	1a9b      	subs	r3, r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4403      	add	r3, r0
 8007528:	3344      	adds	r3, #68	; 0x44
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4419      	add	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007532:	4613      	mov	r3, r2
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	1a9b      	subs	r3, r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4403      	add	r3, r0
 800753c:	3348      	adds	r3, #72	; 0x48
 800753e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	d113      	bne.n	800756e <HAL_PCD_IRQHandler+0x31c>
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754a:	4613      	mov	r3, r2
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	1a9b      	subs	r3, r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	440b      	add	r3, r1
 8007554:	3350      	adds	r3, #80	; 0x50
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d108      	bne.n	800756e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007566:	461a      	mov	r2, r3
 8007568:	2101      	movs	r1, #1
 800756a:	f004 fbfb 	bl	800bd64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	b2db      	uxtb	r3, r3
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f008 fd64 	bl	8010042 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f003 0308 	and.w	r3, r3, #8
 8007580:	2b00      	cmp	r3, #0
 8007582:	d008      	beq.n	8007596 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007590:	461a      	mov	r2, r3
 8007592:	2308      	movs	r3, #8
 8007594:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f003 0310 	and.w	r3, r3, #16
 800759c:	2b00      	cmp	r3, #0
 800759e:	d008      	beq.n	80075b2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ac:	461a      	mov	r2, r3
 80075ae:	2310      	movs	r3, #16
 80075b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d008      	beq.n	80075ce <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c8:	461a      	mov	r2, r3
 80075ca:	2340      	movs	r3, #64	; 0x40
 80075cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d008      	beq.n	80075ea <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e4:	461a      	mov	r2, r3
 80075e6:	2302      	movs	r3, #2
 80075e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80075f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fc1b 	bl	8007e32 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	3301      	adds	r3, #1
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	085b      	lsrs	r3, r3, #1
 8007606:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	2b00      	cmp	r3, #0
 800760c:	f47f af49 	bne.w	80074a2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4618      	mov	r0, r3
 8007616:	f004 fae0 	bl	800bbda <USB_ReadInterrupts>
 800761a:	4603      	mov	r3, r0
 800761c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007624:	d122      	bne.n	800766c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	69fa      	ldr	r2, [r7, #28]
 8007630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007634:	f023 0301 	bic.w	r3, r3, #1
 8007638:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007640:	2b01      	cmp	r3, #1
 8007642:	d108      	bne.n	8007656 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800764c:	2100      	movs	r1, #0
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fe26 	bl	80082a0 <HAL_PCDEx_LPM_Callback>
 8007654:	e002      	b.n	800765c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f008 fd60 	bl	801011c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	695a      	ldr	r2, [r3, #20]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800766a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4618      	mov	r0, r3
 8007672:	f004 fab2 	bl	800bbda <USB_ReadInterrupts>
 8007676:	4603      	mov	r3, r0
 8007678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800767c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007680:	d112      	bne.n	80076a8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b01      	cmp	r3, #1
 8007690:	d102      	bne.n	8007698 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f008 fd1c 	bl	80100d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	695a      	ldr	r2, [r3, #20]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80076a6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f004 fa94 	bl	800bbda <USB_ReadInterrupts>
 80076b2:	4603      	mov	r3, r0
 80076b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076bc:	f040 80c7 	bne.w	800784e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	69fa      	ldr	r2, [r7, #28]
 80076ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076ce:	f023 0301 	bic.w	r3, r3, #1
 80076d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2110      	movs	r1, #16
 80076da:	4618      	mov	r0, r3
 80076dc:	f003 fb2e 	bl	800ad3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076e0:	2300      	movs	r3, #0
 80076e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076e4:	e056      	b.n	8007794 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f2:	461a      	mov	r2, r3
 80076f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800770a:	0151      	lsls	r1, r2, #5
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	440a      	add	r2, r1
 8007710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007714:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007718:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800772a:	0151      	lsls	r1, r2, #5
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	440a      	add	r2, r1
 8007730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007734:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007738:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800773a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007746:	461a      	mov	r2, r3
 8007748:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800774c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	4413      	add	r3, r2
 8007756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800775e:	0151      	lsls	r1, r2, #5
 8007760:	69fa      	ldr	r2, [r7, #28]
 8007762:	440a      	add	r2, r1
 8007764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007768:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800776c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	4413      	add	r3, r2
 8007776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800777e:	0151      	lsls	r1, r2, #5
 8007780:	69fa      	ldr	r2, [r7, #28]
 8007782:	440a      	add	r2, r1
 8007784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007788:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800778c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	3301      	adds	r3, #1
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800779a:	429a      	cmp	r2, r3
 800779c:	d3a3      	bcc.n	80076e6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077ac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80077b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d016      	beq.n	80077e8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077c4:	69fa      	ldr	r2, [r7, #28]
 80077c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077ca:	f043 030b 	orr.w	r3, r3, #11
 80077ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077e0:	f043 030b 	orr.w	r3, r3, #11
 80077e4:	6453      	str	r3, [r2, #68]	; 0x44
 80077e6:	e015      	b.n	8007814 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	69fa      	ldr	r2, [r7, #28]
 80077f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80077fa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80077fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	69fa      	ldr	r2, [r7, #28]
 800780a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800780e:	f043 030b 	orr.w	r3, r3, #11
 8007812:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	69fa      	ldr	r2, [r7, #28]
 800781e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007822:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007826:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6818      	ldr	r0, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007838:	461a      	mov	r2, r3
 800783a:	f004 fa93 	bl	800bd64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	695a      	ldr	r2, [r3, #20]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800784c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f004 f9c1 	bl	800bbda <USB_ReadInterrupts>
 8007858:	4603      	mov	r3, r0
 800785a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800785e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007862:	d124      	bne.n	80078ae <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4618      	mov	r0, r3
 800786a:	f004 fa57 	bl	800bd1c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4618      	mov	r0, r3
 8007874:	f003 fabf 	bl	800adf6 <USB_GetDevSpeed>
 8007878:	4603      	mov	r3, r0
 800787a:	461a      	mov	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681c      	ldr	r4, [r3, #0]
 8007884:	f001 f958 	bl	8008b38 <HAL_RCC_GetHCLKFreq>
 8007888:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800788e:	b2db      	uxtb	r3, r3
 8007890:	461a      	mov	r2, r3
 8007892:	4620      	mov	r0, r4
 8007894:	f002 ffde 	bl	800a854 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f008 fbfa 	bl	8010092 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	695a      	ldr	r2, [r3, #20]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80078ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f004 f991 	bl	800bbda <USB_ReadInterrupts>
 80078b8:	4603      	mov	r3, r0
 80078ba:	f003 0308 	and.w	r3, r3, #8
 80078be:	2b08      	cmp	r3, #8
 80078c0:	d10a      	bne.n	80078d8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f008 fbd7 	bl	8010076 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695a      	ldr	r2, [r3, #20]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f002 0208 	and.w	r2, r2, #8
 80078d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4618      	mov	r0, r3
 80078de:	f004 f97c 	bl	800bbda <USB_ReadInterrupts>
 80078e2:	4603      	mov	r3, r0
 80078e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078ec:	d10f      	bne.n	800790e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f008 fc2f 	bl	801015c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	695a      	ldr	r2, [r3, #20]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800790c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4618      	mov	r0, r3
 8007914:	f004 f961 	bl	800bbda <USB_ReadInterrupts>
 8007918:	4603      	mov	r3, r0
 800791a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800791e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007922:	d10f      	bne.n	8007944 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007924:	2300      	movs	r3, #0
 8007926:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	b2db      	uxtb	r3, r3
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f008 fc02 	bl	8010138 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	695a      	ldr	r2, [r3, #20]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4618      	mov	r0, r3
 800794a:	f004 f946 	bl	800bbda <USB_ReadInterrupts>
 800794e:	4603      	mov	r3, r0
 8007950:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007958:	d10a      	bne.n	8007970 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f008 fc10 	bl	8010180 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	695a      	ldr	r2, [r3, #20]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800796e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4618      	mov	r0, r3
 8007976:	f004 f930 	bl	800bbda <USB_ReadInterrupts>
 800797a:	4603      	mov	r3, r0
 800797c:	f003 0304 	and.w	r3, r3, #4
 8007980:	2b04      	cmp	r3, #4
 8007982:	d115      	bne.n	80079b0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	f003 0304 	and.w	r3, r3, #4
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f008 fc00 	bl	801019c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6859      	ldr	r1, [r3, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	605a      	str	r2, [r3, #4]
 80079ac:	e000      	b.n	80079b0 <HAL_PCD_IRQHandler+0x75e>
      return;
 80079ae:	bf00      	nop
    }
  }
}
 80079b0:	3734      	adds	r7, #52	; 0x34
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd90      	pop	{r4, r7, pc}

080079b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d101      	bne.n	80079d0 <HAL_PCD_SetAddress+0x1a>
 80079cc:	2302      	movs	r3, #2
 80079ce:	e013      	b.n	80079f8 <HAL_PCD_SetAddress+0x42>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	78fa      	ldrb	r2, [r7, #3]
 80079dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	78fa      	ldrb	r2, [r7, #3]
 80079e6:	4611      	mov	r1, r2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f004 f88e 	bl	800bb0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	4608      	mov	r0, r1
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4603      	mov	r3, r0
 8007a10:	70fb      	strb	r3, [r7, #3]
 8007a12:	460b      	mov	r3, r1
 8007a14:	803b      	strh	r3, [r7, #0]
 8007a16:	4613      	mov	r3, r2
 8007a18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007a1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	da0f      	bge.n	8007a46 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a26:	78fb      	ldrb	r3, [r7, #3]
 8007a28:	f003 020f 	and.w	r2, r3, #15
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	1a9b      	subs	r3, r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	3338      	adds	r3, #56	; 0x38
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	4413      	add	r3, r2
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2201      	movs	r2, #1
 8007a42:	705a      	strb	r2, [r3, #1]
 8007a44:	e00f      	b.n	8007a66 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a46:	78fb      	ldrb	r3, [r7, #3]
 8007a48:	f003 020f 	and.w	r2, r3, #15
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	1a9b      	subs	r3, r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007a66:	78fb      	ldrb	r3, [r7, #3]
 8007a68:	f003 030f 	and.w	r3, r3, #15
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007a72:	883a      	ldrh	r2, [r7, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	78ba      	ldrb	r2, [r7, #2]
 8007a7c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	785b      	ldrb	r3, [r3, #1]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d004      	beq.n	8007a90 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007a90:	78bb      	ldrb	r3, [r7, #2]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d102      	bne.n	8007a9c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d101      	bne.n	8007aaa <HAL_PCD_EP_Open+0xaa>
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e00e      	b.n	8007ac8 <HAL_PCD_EP_Open+0xc8>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68f9      	ldr	r1, [r7, #12]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f003 f9c1 	bl	800ae40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007ac6:	7afb      	ldrb	r3, [r7, #11]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	da0f      	bge.n	8007b04 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ae4:	78fb      	ldrb	r3, [r7, #3]
 8007ae6:	f003 020f 	and.w	r2, r3, #15
 8007aea:	4613      	mov	r3, r2
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	1a9b      	subs	r3, r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	3338      	adds	r3, #56	; 0x38
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	4413      	add	r3, r2
 8007af8:	3304      	adds	r3, #4
 8007afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2201      	movs	r2, #1
 8007b00:	705a      	strb	r2, [r3, #1]
 8007b02:	e00f      	b.n	8007b24 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b04:	78fb      	ldrb	r3, [r7, #3]
 8007b06:	f003 020f 	and.w	r2, r3, #15
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	1a9b      	subs	r3, r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	4413      	add	r3, r2
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	f003 030f 	and.w	r3, r3, #15
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_PCD_EP_Close+0x6e>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e00e      	b.n	8007b5c <HAL_PCD_EP_Close+0x8c>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68f9      	ldr	r1, [r7, #12]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f003 f9ff 	bl	800af50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	607a      	str	r2, [r7, #4]
 8007b6e:	603b      	str	r3, [r7, #0]
 8007b70:	460b      	mov	r3, r1
 8007b72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b74:	7afb      	ldrb	r3, [r7, #11]
 8007b76:	f003 020f 	and.w	r2, r3, #15
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	1a9b      	subs	r3, r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	4413      	add	r3, r2
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ba6:	7afb      	ldrb	r3, [r7, #11]
 8007ba8:	f003 030f 	and.w	r3, r3, #15
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d102      	bne.n	8007bc0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007bc0:	7afb      	ldrb	r3, [r7, #11]
 8007bc2:	f003 030f 	and.w	r3, r3, #15
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d109      	bne.n	8007bde <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	6979      	ldr	r1, [r7, #20]
 8007bd8:	f003 fcda 	bl	800b590 <USB_EP0StartXfer>
 8007bdc:	e008      	b.n	8007bf0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6818      	ldr	r0, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	461a      	mov	r2, r3
 8007bea:	6979      	ldr	r1, [r7, #20]
 8007bec:	f003 fa8c 	bl	800b108 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b083      	sub	sp, #12
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	460b      	mov	r3, r1
 8007c04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007c06:	78fb      	ldrb	r3, [r7, #3]
 8007c08:	f003 020f 	and.w	r2, r3, #15
 8007c0c:	6879      	ldr	r1, [r7, #4]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	1a9b      	subs	r3, r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	440b      	add	r3, r1
 8007c18:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007c1c:	681b      	ldr	r3, [r3, #0]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b086      	sub	sp, #24
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
 8007c36:	460b      	mov	r3, r1
 8007c38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c3a:	7afb      	ldrb	r3, [r7, #11]
 8007c3c:	f003 020f 	and.w	r2, r3, #15
 8007c40:	4613      	mov	r3, r2
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	1a9b      	subs	r3, r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	3338      	adds	r3, #56	; 0x38
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	3304      	adds	r3, #4
 8007c50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	2200      	movs	r2, #0
 8007c62:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	2201      	movs	r2, #1
 8007c68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c6a:	7afb      	ldrb	r3, [r7, #11]
 8007c6c:	f003 030f 	and.w	r3, r3, #15
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d102      	bne.n	8007c84 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c84:	7afb      	ldrb	r3, [r7, #11]
 8007c86:	f003 030f 	and.w	r3, r3, #15
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d109      	bne.n	8007ca2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6818      	ldr	r0, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	461a      	mov	r2, r3
 8007c9a:	6979      	ldr	r1, [r7, #20]
 8007c9c:	f003 fc78 	bl	800b590 <USB_EP0StartXfer>
 8007ca0:	e008      	b.n	8007cb4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6818      	ldr	r0, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	461a      	mov	r2, r3
 8007cae:	6979      	ldr	r1, [r7, #20]
 8007cb0:	f003 fa2a 	bl	800b108 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	f003 020f 	and.w	r2, r3, #15
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d901      	bls.n	8007cdc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e050      	b.n	8007d7e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	da0f      	bge.n	8007d04 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	f003 020f 	and.w	r2, r3, #15
 8007cea:	4613      	mov	r3, r2
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	1a9b      	subs	r3, r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	3338      	adds	r3, #56	; 0x38
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	705a      	strb	r2, [r3, #1]
 8007d02:	e00d      	b.n	8007d20 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	4613      	mov	r3, r2
 8007d08:	00db      	lsls	r3, r3, #3
 8007d0a:	1a9b      	subs	r3, r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	4413      	add	r3, r2
 8007d16:	3304      	adds	r3, #4
 8007d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d26:	78fb      	ldrb	r3, [r7, #3]
 8007d28:	f003 030f 	and.w	r3, r3, #15
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_PCD_EP_SetStall+0x82>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e01e      	b.n	8007d7e <HAL_PCD_EP_SetStall+0xc0>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68f9      	ldr	r1, [r7, #12]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f003 fe07 	bl	800b962 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d54:	78fb      	ldrb	r3, [r7, #3]
 8007d56:	f003 030f 	and.w	r3, r3, #15
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	b2d9      	uxtb	r1, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f003 fff8 	bl	800bd64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007d92:	78fb      	ldrb	r3, [r7, #3]
 8007d94:	f003 020f 	and.w	r2, r3, #15
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d901      	bls.n	8007da4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e042      	b.n	8007e2a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007da4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	da0f      	bge.n	8007dcc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dac:	78fb      	ldrb	r3, [r7, #3]
 8007dae:	f003 020f 	and.w	r2, r3, #15
 8007db2:	4613      	mov	r3, r2
 8007db4:	00db      	lsls	r3, r3, #3
 8007db6:	1a9b      	subs	r3, r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	3338      	adds	r3, #56	; 0x38
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	705a      	strb	r2, [r3, #1]
 8007dca:	e00f      	b.n	8007dec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dcc:	78fb      	ldrb	r3, [r7, #3]
 8007dce:	f003 020f 	and.w	r2, r3, #15
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	1a9b      	subs	r3, r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	4413      	add	r3, r2
 8007de2:	3304      	adds	r3, #4
 8007de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007df2:	78fb      	ldrb	r3, [r7, #3]
 8007df4:	f003 030f 	and.w	r3, r3, #15
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <HAL_PCD_EP_ClrStall+0x86>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e00e      	b.n	8007e2a <HAL_PCD_EP_ClrStall+0xa4>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68f9      	ldr	r1, [r7, #12]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f003 fe0f 	bl	800ba3e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b08a      	sub	sp, #40	; 0x28
 8007e36:	af02      	add	r7, sp, #8
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	00db      	lsls	r3, r3, #3
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	3338      	adds	r3, #56	; 0x38
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	4413      	add	r3, r2
 8007e56:	3304      	adds	r3, #4
 8007e58:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d901      	bls.n	8007e6a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e06c      	b.n	8007f44 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	695a      	ldr	r2, [r3, #20]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d902      	bls.n	8007e86 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	3303      	adds	r3, #3
 8007e8a:	089b      	lsrs	r3, r3, #2
 8007e8c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e8e:	e02b      	b.n	8007ee8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	695a      	ldr	r2, [r3, #20]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	69fa      	ldr	r2, [r7, #28]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d902      	bls.n	8007eac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	3303      	adds	r3, #3
 8007eb0:	089b      	lsrs	r3, r3, #2
 8007eb2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	68d9      	ldr	r1, [r3, #12]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	4603      	mov	r3, r0
 8007eca:	6978      	ldr	r0, [r7, #20]
 8007ecc:	f003 fcb3 	bl	800b836 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	441a      	add	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	699a      	ldr	r2, [r3, #24]
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	441a      	add	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d809      	bhi.n	8007f12 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	699a      	ldr	r2, [r3, #24]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d203      	bcs.n	8007f12 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1be      	bne.n	8007e90 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	695a      	ldr	r2, [r3, #20]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d811      	bhi.n	8007f42 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	f003 030f 	and.w	r3, r3, #15
 8007f24:	2201      	movs	r2, #1
 8007f26:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	43db      	mvns	r3, r3
 8007f38:	6939      	ldr	r1, [r7, #16]
 8007f3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f3e:	4013      	ands	r3, r2
 8007f40:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3720      	adds	r7, #32
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	333c      	adds	r3, #60	; 0x3c
 8007f64:	3304      	adds	r3, #4
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	f040 80a0 	bne.w	80080c4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f003 0308 	and.w	r3, r3, #8
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d015      	beq.n	8007fba <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	4a72      	ldr	r2, [pc, #456]	; (800815c <PCD_EP_OutXfrComplete_int+0x210>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	f240 80dd 	bls.w	8008152 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 80d7 	beq.w	8008152 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fb6:	6093      	str	r3, [r2, #8]
 8007fb8:	e0cb      	b.n	8008152 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	f003 0320 	and.w	r3, r3, #32
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d009      	beq.n	8007fd8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	015a      	lsls	r2, r3, #5
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	2320      	movs	r3, #32
 8007fd4:	6093      	str	r3, [r2, #8]
 8007fd6:	e0bc      	b.n	8008152 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f040 80b7 	bne.w	8008152 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4a5d      	ldr	r2, [pc, #372]	; (800815c <PCD_EP_OutXfrComplete_int+0x210>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d90f      	bls.n	800800c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00a      	beq.n	800800c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008002:	461a      	mov	r2, r3
 8008004:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008008:	6093      	str	r3, [r2, #8]
 800800a:	e0a2      	b.n	8008152 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800800c:	6879      	ldr	r1, [r7, #4]
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	4613      	mov	r3, r2
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	1a9b      	subs	r3, r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	440b      	add	r3, r1
 800801a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800801e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	0159      	lsls	r1, r3, #5
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	440b      	add	r3, r1
 8008028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008032:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	4613      	mov	r3, r2
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	1a9b      	subs	r3, r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4403      	add	r3, r0
 8008042:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008046:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	4613      	mov	r3, r2
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	1a9b      	subs	r3, r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	440b      	add	r3, r1
 8008056:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800805a:	6819      	ldr	r1, [r3, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	4613      	mov	r3, r2
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	1a9b      	subs	r3, r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4403      	add	r3, r0
 800806a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4419      	add	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	4613      	mov	r3, r2
 8008078:	00db      	lsls	r3, r3, #3
 800807a:	1a9b      	subs	r3, r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4403      	add	r3, r0
 8008080:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008084:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d114      	bne.n	80080b6 <PCD_EP_OutXfrComplete_int+0x16a>
 800808c:	6879      	ldr	r1, [r7, #4]
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	4613      	mov	r3, r2
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	1a9b      	subs	r3, r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d108      	bne.n	80080b6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6818      	ldr	r0, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80080ae:	461a      	mov	r2, r3
 80080b0:	2101      	movs	r1, #1
 80080b2:	f003 fe57 	bl	800bd64 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f007 ffa5 	bl	801000c <HAL_PCD_DataOutStageCallback>
 80080c2:	e046      	b.n	8008152 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4a26      	ldr	r2, [pc, #152]	; (8008160 <PCD_EP_OutXfrComplete_int+0x214>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d124      	bne.n	8008116 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00a      	beq.n	80080ec <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e2:	461a      	mov	r2, r3
 80080e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080e8:	6093      	str	r3, [r2, #8]
 80080ea:	e032      	b.n	8008152 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d008      	beq.n	8008108 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	015a      	lsls	r2, r3, #5
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	4413      	add	r3, r2
 80080fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008102:	461a      	mov	r2, r3
 8008104:	2320      	movs	r3, #32
 8008106:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f007 ff7c 	bl	801000c <HAL_PCD_DataOutStageCallback>
 8008114:	e01d      	b.n	8008152 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d114      	bne.n	8008146 <PCD_EP_OutXfrComplete_int+0x1fa>
 800811c:	6879      	ldr	r1, [r7, #4]
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	4613      	mov	r3, r2
 8008122:	00db      	lsls	r3, r3, #3
 8008124:	1a9b      	subs	r3, r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	440b      	add	r3, r1
 800812a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d108      	bne.n	8008146 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800813e:	461a      	mov	r2, r3
 8008140:	2100      	movs	r1, #0
 8008142:	f003 fe0f 	bl	800bd64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	b2db      	uxtb	r3, r3
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f007 ff5d 	bl	801000c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3718      	adds	r7, #24
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	4f54300a 	.word	0x4f54300a
 8008160:	4f54310a 	.word	0x4f54310a

08008164 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	333c      	adds	r3, #60	; 0x3c
 800817c:	3304      	adds	r3, #4
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4a15      	ldr	r2, [pc, #84]	; (80081ec <PCD_EP_OutSetupPacket_int+0x88>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d90e      	bls.n	80081b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d009      	beq.n	80081b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b0:	461a      	mov	r2, r3
 80081b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f007 ff15 	bl	800ffe8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4a0a      	ldr	r2, [pc, #40]	; (80081ec <PCD_EP_OutSetupPacket_int+0x88>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d90c      	bls.n	80081e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d108      	bne.n	80081e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80081d8:	461a      	mov	r2, r3
 80081da:	2101      	movs	r1, #1
 80081dc:	f003 fdc2 	bl	800bd64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	4f54300a 	.word	0x4f54300a

080081f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	70fb      	strb	r3, [r7, #3]
 80081fc:	4613      	mov	r3, r2
 80081fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008208:	78fb      	ldrb	r3, [r7, #3]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d107      	bne.n	800821e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800820e:	883b      	ldrh	r3, [r7, #0]
 8008210:	0419      	lsls	r1, r3, #16
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	430a      	orrs	r2, r1
 800821a:	629a      	str	r2, [r3, #40]	; 0x28
 800821c:	e028      	b.n	8008270 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008224:	0c1b      	lsrs	r3, r3, #16
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	4413      	add	r3, r2
 800822a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800822c:	2300      	movs	r3, #0
 800822e:	73fb      	strb	r3, [r7, #15]
 8008230:	e00d      	b.n	800824e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	3340      	adds	r3, #64	; 0x40
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	0c1b      	lsrs	r3, r3, #16
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	4413      	add	r3, r2
 8008246:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	3301      	adds	r3, #1
 800824c:	73fb      	strb	r3, [r7, #15]
 800824e:	7bfa      	ldrb	r2, [r7, #15]
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	3b01      	subs	r3, #1
 8008254:	429a      	cmp	r2, r3
 8008256:	d3ec      	bcc.n	8008232 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008258:	883b      	ldrh	r3, [r7, #0]
 800825a:	0418      	lsls	r0, r3, #16
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6819      	ldr	r1, [r3, #0]
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	3b01      	subs	r3, #1
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	4302      	orrs	r2, r0
 8008268:	3340      	adds	r3, #64	; 0x40
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	440b      	add	r3, r1
 800826e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	887a      	ldrh	r2, [r7, #2]
 8008290:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e264      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d075      	beq.n	80083c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80082d6:	4ba3      	ldr	r3, [pc, #652]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f003 030c 	and.w	r3, r3, #12
 80082de:	2b04      	cmp	r3, #4
 80082e0:	d00c      	beq.n	80082fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082e2:	4ba0      	ldr	r3, [pc, #640]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80082ea:	2b08      	cmp	r3, #8
 80082ec:	d112      	bne.n	8008314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082ee:	4b9d      	ldr	r3, [pc, #628]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082fa:	d10b      	bne.n	8008314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082fc:	4b99      	ldr	r3, [pc, #612]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d05b      	beq.n	80083c0 <HAL_RCC_OscConfig+0x108>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d157      	bne.n	80083c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e23f      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800831c:	d106      	bne.n	800832c <HAL_RCC_OscConfig+0x74>
 800831e:	4b91      	ldr	r3, [pc, #580]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a90      	ldr	r2, [pc, #576]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 8008324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	e01d      	b.n	8008368 <HAL_RCC_OscConfig+0xb0>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008334:	d10c      	bne.n	8008350 <HAL_RCC_OscConfig+0x98>
 8008336:	4b8b      	ldr	r3, [pc, #556]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a8a      	ldr	r2, [pc, #552]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 800833c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	4b88      	ldr	r3, [pc, #544]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a87      	ldr	r2, [pc, #540]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 8008348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	e00b      	b.n	8008368 <HAL_RCC_OscConfig+0xb0>
 8008350:	4b84      	ldr	r3, [pc, #528]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a83      	ldr	r2, [pc, #524]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 8008356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	4b81      	ldr	r3, [pc, #516]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a80      	ldr	r2, [pc, #512]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 8008362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d013      	beq.n	8008398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008370:	f7fd f896 	bl	80054a0 <HAL_GetTick>
 8008374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008376:	e008      	b.n	800838a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008378:	f7fd f892 	bl	80054a0 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b64      	cmp	r3, #100	; 0x64
 8008384:	d901      	bls.n	800838a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e204      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800838a:	4b76      	ldr	r3, [pc, #472]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0f0      	beq.n	8008378 <HAL_RCC_OscConfig+0xc0>
 8008396:	e014      	b.n	80083c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008398:	f7fd f882 	bl	80054a0 <HAL_GetTick>
 800839c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800839e:	e008      	b.n	80083b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083a0:	f7fd f87e 	bl	80054a0 <HAL_GetTick>
 80083a4:	4602      	mov	r2, r0
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	2b64      	cmp	r3, #100	; 0x64
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e1f0      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083b2:	4b6c      	ldr	r3, [pc, #432]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1f0      	bne.n	80083a0 <HAL_RCC_OscConfig+0xe8>
 80083be:	e000      	b.n	80083c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d063      	beq.n	8008496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80083ce:	4b65      	ldr	r3, [pc, #404]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f003 030c 	and.w	r3, r3, #12
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00b      	beq.n	80083f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083da:	4b62      	ldr	r3, [pc, #392]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80083e2:	2b08      	cmp	r3, #8
 80083e4:	d11c      	bne.n	8008420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083e6:	4b5f      	ldr	r3, [pc, #380]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d116      	bne.n	8008420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083f2:	4b5c      	ldr	r3, [pc, #368]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0302 	and.w	r3, r3, #2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d005      	beq.n	800840a <HAL_RCC_OscConfig+0x152>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d001      	beq.n	800840a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e1c4      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800840a:	4b56      	ldr	r3, [pc, #344]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	4952      	ldr	r1, [pc, #328]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 800841a:	4313      	orrs	r3, r2
 800841c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800841e:	e03a      	b.n	8008496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d020      	beq.n	800846a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008428:	4b4f      	ldr	r3, [pc, #316]	; (8008568 <HAL_RCC_OscConfig+0x2b0>)
 800842a:	2201      	movs	r2, #1
 800842c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800842e:	f7fd f837 	bl	80054a0 <HAL_GetTick>
 8008432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008434:	e008      	b.n	8008448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008436:	f7fd f833 	bl	80054a0 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e1a5      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008448:	4b46      	ldr	r3, [pc, #280]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0f0      	beq.n	8008436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008454:	4b43      	ldr	r3, [pc, #268]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	00db      	lsls	r3, r3, #3
 8008462:	4940      	ldr	r1, [pc, #256]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 8008464:	4313      	orrs	r3, r2
 8008466:	600b      	str	r3, [r1, #0]
 8008468:	e015      	b.n	8008496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800846a:	4b3f      	ldr	r3, [pc, #252]	; (8008568 <HAL_RCC_OscConfig+0x2b0>)
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008470:	f7fd f816 	bl	80054a0 <HAL_GetTick>
 8008474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008476:	e008      	b.n	800848a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008478:	f7fd f812 	bl	80054a0 <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	2b02      	cmp	r3, #2
 8008484:	d901      	bls.n	800848a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e184      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800848a:	4b36      	ldr	r3, [pc, #216]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1f0      	bne.n	8008478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0308 	and.w	r3, r3, #8
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d030      	beq.n	8008504 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d016      	beq.n	80084d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084aa:	4b30      	ldr	r3, [pc, #192]	; (800856c <HAL_RCC_OscConfig+0x2b4>)
 80084ac:	2201      	movs	r2, #1
 80084ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084b0:	f7fc fff6 	bl	80054a0 <HAL_GetTick>
 80084b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084b6:	e008      	b.n	80084ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084b8:	f7fc fff2 	bl	80054a0 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d901      	bls.n	80084ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e164      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084ca:	4b26      	ldr	r3, [pc, #152]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 80084cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ce:	f003 0302 	and.w	r3, r3, #2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0f0      	beq.n	80084b8 <HAL_RCC_OscConfig+0x200>
 80084d6:	e015      	b.n	8008504 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084d8:	4b24      	ldr	r3, [pc, #144]	; (800856c <HAL_RCC_OscConfig+0x2b4>)
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084de:	f7fc ffdf 	bl	80054a0 <HAL_GetTick>
 80084e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084e4:	e008      	b.n	80084f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084e6:	f7fc ffdb 	bl	80054a0 <HAL_GetTick>
 80084ea:	4602      	mov	r2, r0
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d901      	bls.n	80084f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e14d      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084f8:	4b1a      	ldr	r3, [pc, #104]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 80084fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1f0      	bne.n	80084e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 80a0 	beq.w	8008652 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008512:	2300      	movs	r3, #0
 8008514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008516:	4b13      	ldr	r3, [pc, #76]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10f      	bne.n	8008542 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008522:	2300      	movs	r3, #0
 8008524:	60bb      	str	r3, [r7, #8]
 8008526:	4b0f      	ldr	r3, [pc, #60]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 8008528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852a:	4a0e      	ldr	r2, [pc, #56]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 800852c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008530:	6413      	str	r3, [r2, #64]	; 0x40
 8008532:	4b0c      	ldr	r3, [pc, #48]	; (8008564 <HAL_RCC_OscConfig+0x2ac>)
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800853a:	60bb      	str	r3, [r7, #8]
 800853c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800853e:	2301      	movs	r3, #1
 8008540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008542:	4b0b      	ldr	r3, [pc, #44]	; (8008570 <HAL_RCC_OscConfig+0x2b8>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854a:	2b00      	cmp	r3, #0
 800854c:	d121      	bne.n	8008592 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800854e:	4b08      	ldr	r3, [pc, #32]	; (8008570 <HAL_RCC_OscConfig+0x2b8>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a07      	ldr	r2, [pc, #28]	; (8008570 <HAL_RCC_OscConfig+0x2b8>)
 8008554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800855a:	f7fc ffa1 	bl	80054a0 <HAL_GetTick>
 800855e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008560:	e011      	b.n	8008586 <HAL_RCC_OscConfig+0x2ce>
 8008562:	bf00      	nop
 8008564:	40023800 	.word	0x40023800
 8008568:	42470000 	.word	0x42470000
 800856c:	42470e80 	.word	0x42470e80
 8008570:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008574:	f7fc ff94 	bl	80054a0 <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	2b02      	cmp	r3, #2
 8008580:	d901      	bls.n	8008586 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e106      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008586:	4b85      	ldr	r3, [pc, #532]	; (800879c <HAL_RCC_OscConfig+0x4e4>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800858e:	2b00      	cmp	r3, #0
 8008590:	d0f0      	beq.n	8008574 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d106      	bne.n	80085a8 <HAL_RCC_OscConfig+0x2f0>
 800859a:	4b81      	ldr	r3, [pc, #516]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 800859c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859e:	4a80      	ldr	r2, [pc, #512]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 80085a0:	f043 0301 	orr.w	r3, r3, #1
 80085a4:	6713      	str	r3, [r2, #112]	; 0x70
 80085a6:	e01c      	b.n	80085e2 <HAL_RCC_OscConfig+0x32a>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	2b05      	cmp	r3, #5
 80085ae:	d10c      	bne.n	80085ca <HAL_RCC_OscConfig+0x312>
 80085b0:	4b7b      	ldr	r3, [pc, #492]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 80085b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b4:	4a7a      	ldr	r2, [pc, #488]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 80085b6:	f043 0304 	orr.w	r3, r3, #4
 80085ba:	6713      	str	r3, [r2, #112]	; 0x70
 80085bc:	4b78      	ldr	r3, [pc, #480]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 80085be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c0:	4a77      	ldr	r2, [pc, #476]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 80085c2:	f043 0301 	orr.w	r3, r3, #1
 80085c6:	6713      	str	r3, [r2, #112]	; 0x70
 80085c8:	e00b      	b.n	80085e2 <HAL_RCC_OscConfig+0x32a>
 80085ca:	4b75      	ldr	r3, [pc, #468]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 80085cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ce:	4a74      	ldr	r2, [pc, #464]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 80085d0:	f023 0301 	bic.w	r3, r3, #1
 80085d4:	6713      	str	r3, [r2, #112]	; 0x70
 80085d6:	4b72      	ldr	r3, [pc, #456]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 80085d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085da:	4a71      	ldr	r2, [pc, #452]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 80085dc:	f023 0304 	bic.w	r3, r3, #4
 80085e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d015      	beq.n	8008616 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ea:	f7fc ff59 	bl	80054a0 <HAL_GetTick>
 80085ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085f0:	e00a      	b.n	8008608 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085f2:	f7fc ff55 	bl	80054a0 <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008600:	4293      	cmp	r3, r2
 8008602:	d901      	bls.n	8008608 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e0c5      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008608:	4b65      	ldr	r3, [pc, #404]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 800860a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860c:	f003 0302 	and.w	r3, r3, #2
 8008610:	2b00      	cmp	r3, #0
 8008612:	d0ee      	beq.n	80085f2 <HAL_RCC_OscConfig+0x33a>
 8008614:	e014      	b.n	8008640 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008616:	f7fc ff43 	bl	80054a0 <HAL_GetTick>
 800861a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800861c:	e00a      	b.n	8008634 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800861e:	f7fc ff3f 	bl	80054a0 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	f241 3288 	movw	r2, #5000	; 0x1388
 800862c:	4293      	cmp	r3, r2
 800862e:	d901      	bls.n	8008634 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008630:	2303      	movs	r3, #3
 8008632:	e0af      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008634:	4b5a      	ldr	r3, [pc, #360]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 8008636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1ee      	bne.n	800861e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008640:	7dfb      	ldrb	r3, [r7, #23]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d105      	bne.n	8008652 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008646:	4b56      	ldr	r3, [pc, #344]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 8008648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864a:	4a55      	ldr	r2, [pc, #340]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 800864c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008650:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 809b 	beq.w	8008792 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800865c:	4b50      	ldr	r3, [pc, #320]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f003 030c 	and.w	r3, r3, #12
 8008664:	2b08      	cmp	r3, #8
 8008666:	d05c      	beq.n	8008722 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	2b02      	cmp	r3, #2
 800866e:	d141      	bne.n	80086f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008670:	4b4c      	ldr	r3, [pc, #304]	; (80087a4 <HAL_RCC_OscConfig+0x4ec>)
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008676:	f7fc ff13 	bl	80054a0 <HAL_GetTick>
 800867a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800867c:	e008      	b.n	8008690 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800867e:	f7fc ff0f 	bl	80054a0 <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	2b02      	cmp	r3, #2
 800868a:	d901      	bls.n	8008690 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e081      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008690:	4b43      	ldr	r3, [pc, #268]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1f0      	bne.n	800867e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	69da      	ldr	r2, [r3, #28]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	431a      	orrs	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	019b      	lsls	r3, r3, #6
 80086ac:	431a      	orrs	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b2:	085b      	lsrs	r3, r3, #1
 80086b4:	3b01      	subs	r3, #1
 80086b6:	041b      	lsls	r3, r3, #16
 80086b8:	431a      	orrs	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086be:	061b      	lsls	r3, r3, #24
 80086c0:	4937      	ldr	r1, [pc, #220]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086c6:	4b37      	ldr	r3, [pc, #220]	; (80087a4 <HAL_RCC_OscConfig+0x4ec>)
 80086c8:	2201      	movs	r2, #1
 80086ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086cc:	f7fc fee8 	bl	80054a0 <HAL_GetTick>
 80086d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086d2:	e008      	b.n	80086e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086d4:	f7fc fee4 	bl	80054a0 <HAL_GetTick>
 80086d8:	4602      	mov	r2, r0
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d901      	bls.n	80086e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e056      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086e6:	4b2e      	ldr	r3, [pc, #184]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0f0      	beq.n	80086d4 <HAL_RCC_OscConfig+0x41c>
 80086f2:	e04e      	b.n	8008792 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086f4:	4b2b      	ldr	r3, [pc, #172]	; (80087a4 <HAL_RCC_OscConfig+0x4ec>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086fa:	f7fc fed1 	bl	80054a0 <HAL_GetTick>
 80086fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008700:	e008      	b.n	8008714 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008702:	f7fc fecd 	bl	80054a0 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b02      	cmp	r3, #2
 800870e:	d901      	bls.n	8008714 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e03f      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008714:	4b22      	ldr	r3, [pc, #136]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1f0      	bne.n	8008702 <HAL_RCC_OscConfig+0x44a>
 8008720:	e037      	b.n	8008792 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d101      	bne.n	800872e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e032      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800872e:	4b1c      	ldr	r3, [pc, #112]	; (80087a0 <HAL_RCC_OscConfig+0x4e8>)
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d028      	beq.n	800878e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008746:	429a      	cmp	r2, r3
 8008748:	d121      	bne.n	800878e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008754:	429a      	cmp	r2, r3
 8008756:	d11a      	bne.n	800878e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800875e:	4013      	ands	r3, r2
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008764:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008766:	4293      	cmp	r3, r2
 8008768:	d111      	bne.n	800878e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008774:	085b      	lsrs	r3, r3, #1
 8008776:	3b01      	subs	r3, #1
 8008778:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800877a:	429a      	cmp	r2, r3
 800877c:	d107      	bne.n	800878e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008788:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800878a:	429a      	cmp	r2, r3
 800878c:	d001      	beq.n	8008792 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e000      	b.n	8008794 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3718      	adds	r7, #24
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	40007000 	.word	0x40007000
 80087a0:	40023800 	.word	0x40023800
 80087a4:	42470060 	.word	0x42470060

080087a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e0cc      	b.n	8008956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087bc:	4b68      	ldr	r3, [pc, #416]	; (8008960 <HAL_RCC_ClockConfig+0x1b8>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0307 	and.w	r3, r3, #7
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d90c      	bls.n	80087e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ca:	4b65      	ldr	r3, [pc, #404]	; (8008960 <HAL_RCC_ClockConfig+0x1b8>)
 80087cc:	683a      	ldr	r2, [r7, #0]
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087d2:	4b63      	ldr	r3, [pc, #396]	; (8008960 <HAL_RCC_ClockConfig+0x1b8>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d001      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e0b8      	b.n	8008956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d020      	beq.n	8008832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0304 	and.w	r3, r3, #4
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087fc:	4b59      	ldr	r3, [pc, #356]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	4a58      	ldr	r2, [pc, #352]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008802:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0308 	and.w	r3, r3, #8
 8008810:	2b00      	cmp	r3, #0
 8008812:	d005      	beq.n	8008820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008814:	4b53      	ldr	r3, [pc, #332]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	4a52      	ldr	r2, [pc, #328]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 800881a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800881e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008820:	4b50      	ldr	r3, [pc, #320]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	494d      	ldr	r1, [pc, #308]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 800882e:	4313      	orrs	r3, r2
 8008830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	d044      	beq.n	80088c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d107      	bne.n	8008856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008846:	4b47      	ldr	r3, [pc, #284]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d119      	bne.n	8008886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e07f      	b.n	8008956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	2b02      	cmp	r3, #2
 800885c:	d003      	beq.n	8008866 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008862:	2b03      	cmp	r3, #3
 8008864:	d107      	bne.n	8008876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008866:	4b3f      	ldr	r3, [pc, #252]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d109      	bne.n	8008886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e06f      	b.n	8008956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008876:	4b3b      	ldr	r3, [pc, #236]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0302 	and.w	r3, r3, #2
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e067      	b.n	8008956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008886:	4b37      	ldr	r3, [pc, #220]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f023 0203 	bic.w	r2, r3, #3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	4934      	ldr	r1, [pc, #208]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008894:	4313      	orrs	r3, r2
 8008896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008898:	f7fc fe02 	bl	80054a0 <HAL_GetTick>
 800889c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800889e:	e00a      	b.n	80088b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088a0:	f7fc fdfe 	bl	80054a0 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d901      	bls.n	80088b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e04f      	b.n	8008956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088b6:	4b2b      	ldr	r3, [pc, #172]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f003 020c 	and.w	r2, r3, #12
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d1eb      	bne.n	80088a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80088c8:	4b25      	ldr	r3, [pc, #148]	; (8008960 <HAL_RCC_ClockConfig+0x1b8>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0307 	and.w	r3, r3, #7
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d20c      	bcs.n	80088f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088d6:	4b22      	ldr	r3, [pc, #136]	; (8008960 <HAL_RCC_ClockConfig+0x1b8>)
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088de:	4b20      	ldr	r3, [pc, #128]	; (8008960 <HAL_RCC_ClockConfig+0x1b8>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d001      	beq.n	80088f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e032      	b.n	8008956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0304 	and.w	r3, r3, #4
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d008      	beq.n	800890e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088fc:	4b19      	ldr	r3, [pc, #100]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	4916      	ldr	r1, [pc, #88]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 800890a:	4313      	orrs	r3, r2
 800890c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0308 	and.w	r3, r3, #8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d009      	beq.n	800892e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800891a:	4b12      	ldr	r3, [pc, #72]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	490e      	ldr	r1, [pc, #56]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 800892a:	4313      	orrs	r3, r2
 800892c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800892e:	f000 f821 	bl	8008974 <HAL_RCC_GetSysClockFreq>
 8008932:	4602      	mov	r2, r0
 8008934:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <HAL_RCC_ClockConfig+0x1bc>)
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	091b      	lsrs	r3, r3, #4
 800893a:	f003 030f 	and.w	r3, r3, #15
 800893e:	490a      	ldr	r1, [pc, #40]	; (8008968 <HAL_RCC_ClockConfig+0x1c0>)
 8008940:	5ccb      	ldrb	r3, [r1, r3]
 8008942:	fa22 f303 	lsr.w	r3, r2, r3
 8008946:	4a09      	ldr	r2, [pc, #36]	; (800896c <HAL_RCC_ClockConfig+0x1c4>)
 8008948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800894a:	4b09      	ldr	r3, [pc, #36]	; (8008970 <HAL_RCC_ClockConfig+0x1c8>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4618      	mov	r0, r3
 8008950:	f7fc fc60 	bl	8005214 <HAL_InitTick>

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	40023c00 	.word	0x40023c00
 8008964:	40023800 	.word	0x40023800
 8008968:	08012318 	.word	0x08012318
 800896c:	2000000c 	.word	0x2000000c
 8008970:	20000010 	.word	0x20000010

08008974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008974:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	607b      	str	r3, [r7, #4]
 8008980:	2300      	movs	r3, #0
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	2300      	movs	r3, #0
 8008986:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008988:	2300      	movs	r3, #0
 800898a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800898c:	4b67      	ldr	r3, [pc, #412]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f003 030c 	and.w	r3, r3, #12
 8008994:	2b08      	cmp	r3, #8
 8008996:	d00d      	beq.n	80089b4 <HAL_RCC_GetSysClockFreq+0x40>
 8008998:	2b08      	cmp	r3, #8
 800899a:	f200 80bd 	bhi.w	8008b18 <HAL_RCC_GetSysClockFreq+0x1a4>
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d002      	beq.n	80089a8 <HAL_RCC_GetSysClockFreq+0x34>
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d003      	beq.n	80089ae <HAL_RCC_GetSysClockFreq+0x3a>
 80089a6:	e0b7      	b.n	8008b18 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80089a8:	4b61      	ldr	r3, [pc, #388]	; (8008b30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80089aa:	60bb      	str	r3, [r7, #8]
       break;
 80089ac:	e0b7      	b.n	8008b1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80089ae:	4b61      	ldr	r3, [pc, #388]	; (8008b34 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80089b0:	60bb      	str	r3, [r7, #8]
      break;
 80089b2:	e0b4      	b.n	8008b1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80089b4:	4b5d      	ldr	r3, [pc, #372]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80089be:	4b5b      	ldr	r3, [pc, #364]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d04d      	beq.n	8008a66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089ca:	4b58      	ldr	r3, [pc, #352]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	099b      	lsrs	r3, r3, #6
 80089d0:	461a      	mov	r2, r3
 80089d2:	f04f 0300 	mov.w	r3, #0
 80089d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80089da:	f04f 0100 	mov.w	r1, #0
 80089de:	ea02 0800 	and.w	r8, r2, r0
 80089e2:	ea03 0901 	and.w	r9, r3, r1
 80089e6:	4640      	mov	r0, r8
 80089e8:	4649      	mov	r1, r9
 80089ea:	f04f 0200 	mov.w	r2, #0
 80089ee:	f04f 0300 	mov.w	r3, #0
 80089f2:	014b      	lsls	r3, r1, #5
 80089f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80089f8:	0142      	lsls	r2, r0, #5
 80089fa:	4610      	mov	r0, r2
 80089fc:	4619      	mov	r1, r3
 80089fe:	ebb0 0008 	subs.w	r0, r0, r8
 8008a02:	eb61 0109 	sbc.w	r1, r1, r9
 8008a06:	f04f 0200 	mov.w	r2, #0
 8008a0a:	f04f 0300 	mov.w	r3, #0
 8008a0e:	018b      	lsls	r3, r1, #6
 8008a10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008a14:	0182      	lsls	r2, r0, #6
 8008a16:	1a12      	subs	r2, r2, r0
 8008a18:	eb63 0301 	sbc.w	r3, r3, r1
 8008a1c:	f04f 0000 	mov.w	r0, #0
 8008a20:	f04f 0100 	mov.w	r1, #0
 8008a24:	00d9      	lsls	r1, r3, #3
 8008a26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a2a:	00d0      	lsls	r0, r2, #3
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	eb12 0208 	adds.w	r2, r2, r8
 8008a34:	eb43 0309 	adc.w	r3, r3, r9
 8008a38:	f04f 0000 	mov.w	r0, #0
 8008a3c:	f04f 0100 	mov.w	r1, #0
 8008a40:	0259      	lsls	r1, r3, #9
 8008a42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008a46:	0250      	lsls	r0, r2, #9
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	4619      	mov	r1, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	461a      	mov	r2, r3
 8008a54:	f04f 0300 	mov.w	r3, #0
 8008a58:	f7f8 f8a6 	bl	8000ba8 <__aeabi_uldivmod>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4613      	mov	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	e04a      	b.n	8008afc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a66:	4b31      	ldr	r3, [pc, #196]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	099b      	lsrs	r3, r3, #6
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	f04f 0300 	mov.w	r3, #0
 8008a72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008a76:	f04f 0100 	mov.w	r1, #0
 8008a7a:	ea02 0400 	and.w	r4, r2, r0
 8008a7e:	ea03 0501 	and.w	r5, r3, r1
 8008a82:	4620      	mov	r0, r4
 8008a84:	4629      	mov	r1, r5
 8008a86:	f04f 0200 	mov.w	r2, #0
 8008a8a:	f04f 0300 	mov.w	r3, #0
 8008a8e:	014b      	lsls	r3, r1, #5
 8008a90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008a94:	0142      	lsls	r2, r0, #5
 8008a96:	4610      	mov	r0, r2
 8008a98:	4619      	mov	r1, r3
 8008a9a:	1b00      	subs	r0, r0, r4
 8008a9c:	eb61 0105 	sbc.w	r1, r1, r5
 8008aa0:	f04f 0200 	mov.w	r2, #0
 8008aa4:	f04f 0300 	mov.w	r3, #0
 8008aa8:	018b      	lsls	r3, r1, #6
 8008aaa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008aae:	0182      	lsls	r2, r0, #6
 8008ab0:	1a12      	subs	r2, r2, r0
 8008ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8008ab6:	f04f 0000 	mov.w	r0, #0
 8008aba:	f04f 0100 	mov.w	r1, #0
 8008abe:	00d9      	lsls	r1, r3, #3
 8008ac0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ac4:	00d0      	lsls	r0, r2, #3
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	1912      	adds	r2, r2, r4
 8008acc:	eb45 0303 	adc.w	r3, r5, r3
 8008ad0:	f04f 0000 	mov.w	r0, #0
 8008ad4:	f04f 0100 	mov.w	r1, #0
 8008ad8:	0299      	lsls	r1, r3, #10
 8008ada:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008ade:	0290      	lsls	r0, r2, #10
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f04f 0300 	mov.w	r3, #0
 8008af0:	f7f8 f85a 	bl	8000ba8 <__aeabi_uldivmod>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4613      	mov	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008afc:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	0c1b      	lsrs	r3, r3, #16
 8008b02:	f003 0303 	and.w	r3, r3, #3
 8008b06:	3301      	adds	r3, #1
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b14:	60bb      	str	r3, [r7, #8]
      break;
 8008b16:	e002      	b.n	8008b1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b18:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008b1a:	60bb      	str	r3, [r7, #8]
      break;
 8008b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b1e:	68bb      	ldr	r3, [r7, #8]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008b2a:	bf00      	nop
 8008b2c:	40023800 	.word	0x40023800
 8008b30:	00f42400 	.word	0x00f42400
 8008b34:	007a1200 	.word	0x007a1200

08008b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b3c:	4b03      	ldr	r3, [pc, #12]	; (8008b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	2000000c 	.word	0x2000000c

08008b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008b54:	f7ff fff0 	bl	8008b38 <HAL_RCC_GetHCLKFreq>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	0a9b      	lsrs	r3, r3, #10
 8008b60:	f003 0307 	and.w	r3, r3, #7
 8008b64:	4903      	ldr	r1, [pc, #12]	; (8008b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b66:	5ccb      	ldrb	r3, [r1, r3]
 8008b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	40023800 	.word	0x40023800
 8008b74:	08012328 	.word	0x08012328

08008b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008b7c:	f7ff ffdc 	bl	8008b38 <HAL_RCC_GetHCLKFreq>
 8008b80:	4602      	mov	r2, r0
 8008b82:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	0b5b      	lsrs	r3, r3, #13
 8008b88:	f003 0307 	and.w	r3, r3, #7
 8008b8c:	4903      	ldr	r1, [pc, #12]	; (8008b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b8e:	5ccb      	ldrb	r3, [r1, r3]
 8008b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	40023800 	.word	0x40023800
 8008b9c:	08012328 	.word	0x08012328

08008ba0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	220f      	movs	r2, #15
 8008bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008bb0:	4b12      	ldr	r3, [pc, #72]	; (8008bfc <HAL_RCC_GetClockConfig+0x5c>)
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f003 0203 	and.w	r2, r3, #3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008bbc:	4b0f      	ldr	r3, [pc, #60]	; (8008bfc <HAL_RCC_GetClockConfig+0x5c>)
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008bc8:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <HAL_RCC_GetClockConfig+0x5c>)
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008bd4:	4b09      	ldr	r3, [pc, #36]	; (8008bfc <HAL_RCC_GetClockConfig+0x5c>)
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	08db      	lsrs	r3, r3, #3
 8008bda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008be2:	4b07      	ldr	r3, [pc, #28]	; (8008c00 <HAL_RCC_GetClockConfig+0x60>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0207 	and.w	r2, r3, #7
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	601a      	str	r2, [r3, #0]
}
 8008bee:	bf00      	nop
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	40023800 	.word	0x40023800
 8008c00:	40023c00 	.word	0x40023c00

08008c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e07b      	b.n	8008d0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d108      	bne.n	8008c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c26:	d009      	beq.n	8008c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	61da      	str	r2, [r3, #28]
 8008c2e:	e005      	b.n	8008c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d106      	bne.n	8008c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7fc f8e8 	bl	8004e2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008c84:	431a      	orrs	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cac:	431a      	orrs	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a1b      	ldr	r3, [r3, #32]
 8008cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cc0:	ea42 0103 	orr.w	r1, r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	0c1b      	lsrs	r3, r3, #16
 8008cda:	f003 0104 	and.w	r1, r3, #4
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	f003 0210 	and.w	r2, r3, #16
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	69da      	ldr	r2, [r3, #28]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b088      	sub	sp, #32
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	60f8      	str	r0, [r7, #12]
 8008d1e:	60b9      	str	r1, [r7, #8]
 8008d20:	603b      	str	r3, [r7, #0]
 8008d22:	4613      	mov	r3, r2
 8008d24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d101      	bne.n	8008d38 <HAL_SPI_Transmit+0x22>
 8008d34:	2302      	movs	r3, #2
 8008d36:	e126      	b.n	8008f86 <HAL_SPI_Transmit+0x270>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d40:	f7fc fbae 	bl	80054a0 <HAL_GetTick>
 8008d44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008d46:	88fb      	ldrh	r3, [r7, #6]
 8008d48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d002      	beq.n	8008d5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008d56:	2302      	movs	r3, #2
 8008d58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d5a:	e10b      	b.n	8008f74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d002      	beq.n	8008d68 <HAL_SPI_Transmit+0x52>
 8008d62:	88fb      	ldrh	r3, [r7, #6]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d102      	bne.n	8008d6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d6c:	e102      	b.n	8008f74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2203      	movs	r2, #3
 8008d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	88fa      	ldrh	r2, [r7, #6]
 8008d86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	88fa      	ldrh	r2, [r7, #6]
 8008d8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db4:	d10f      	bne.n	8008dd6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008dd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de0:	2b40      	cmp	r3, #64	; 0x40
 8008de2:	d007      	beq.n	8008df4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008df2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dfc:	d14b      	bne.n	8008e96 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d002      	beq.n	8008e0c <HAL_SPI_Transmit+0xf6>
 8008e06:	8afb      	ldrh	r3, [r7, #22]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d13e      	bne.n	8008e8a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e10:	881a      	ldrh	r2, [r3, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	1c9a      	adds	r2, r3, #2
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008e30:	e02b      	b.n	8008e8a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f003 0302 	and.w	r3, r3, #2
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d112      	bne.n	8008e66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e44:	881a      	ldrh	r2, [r3, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e50:	1c9a      	adds	r2, r3, #2
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e64:	e011      	b.n	8008e8a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e66:	f7fc fb1b 	bl	80054a0 <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d803      	bhi.n	8008e7e <HAL_SPI_Transmit+0x168>
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7c:	d102      	bne.n	8008e84 <HAL_SPI_Transmit+0x16e>
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d102      	bne.n	8008e8a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e88:	e074      	b.n	8008f74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1ce      	bne.n	8008e32 <HAL_SPI_Transmit+0x11c>
 8008e94:	e04c      	b.n	8008f30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <HAL_SPI_Transmit+0x18e>
 8008e9e:	8afb      	ldrh	r3, [r7, #22]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d140      	bne.n	8008f26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	330c      	adds	r3, #12
 8008eae:	7812      	ldrb	r2, [r2, #0]
 8008eb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb6:	1c5a      	adds	r2, r3, #1
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008eca:	e02c      	b.n	8008f26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	f003 0302 	and.w	r3, r3, #2
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d113      	bne.n	8008f02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	330c      	adds	r3, #12
 8008ee4:	7812      	ldrb	r2, [r2, #0]
 8008ee6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eec:	1c5a      	adds	r2, r3, #1
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	86da      	strh	r2, [r3, #54]	; 0x36
 8008f00:	e011      	b.n	8008f26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f02:	f7fc facd 	bl	80054a0 <HAL_GetTick>
 8008f06:	4602      	mov	r2, r0
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d803      	bhi.n	8008f1a <HAL_SPI_Transmit+0x204>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f18:	d102      	bne.n	8008f20 <HAL_SPI_Transmit+0x20a>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d102      	bne.n	8008f26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008f24:	e026      	b.n	8008f74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1cd      	bne.n	8008ecc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f30:	69ba      	ldr	r2, [r7, #24]
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 fbcb 	bl	80096d0 <SPI_EndRxTxTransaction>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2220      	movs	r2, #32
 8008f44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10a      	bne.n	8008f64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f4e:	2300      	movs	r3, #0
 8008f50:	613b      	str	r3, [r7, #16]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	613b      	str	r3, [r7, #16]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	613b      	str	r3, [r7, #16]
 8008f62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	77fb      	strb	r3, [r7, #31]
 8008f70:	e000      	b.n	8008f74 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008f72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3720      	adds	r7, #32
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b088      	sub	sp, #32
 8008f92:	af02      	add	r7, sp, #8
 8008f94:	60f8      	str	r0, [r7, #12]
 8008f96:	60b9      	str	r1, [r7, #8]
 8008f98:	603b      	str	r3, [r7, #0]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008faa:	d112      	bne.n	8008fd2 <HAL_SPI_Receive+0x44>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10e      	bne.n	8008fd2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2204      	movs	r2, #4
 8008fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008fbc:	88fa      	ldrh	r2, [r7, #6]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	68b9      	ldr	r1, [r7, #8]
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 f8f1 	bl	80091b0 <HAL_SPI_TransmitReceive>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	e0ea      	b.n	80091a8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d101      	bne.n	8008fe0 <HAL_SPI_Receive+0x52>
 8008fdc:	2302      	movs	r3, #2
 8008fde:	e0e3      	b.n	80091a8 <HAL_SPI_Receive+0x21a>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fe8:	f7fc fa5a 	bl	80054a0 <HAL_GetTick>
 8008fec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d002      	beq.n	8009000 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008ffa:	2302      	movs	r3, #2
 8008ffc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ffe:	e0ca      	b.n	8009196 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <HAL_SPI_Receive+0x7e>
 8009006:	88fb      	ldrh	r3, [r7, #6]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d102      	bne.n	8009012 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009010:	e0c1      	b.n	8009196 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2204      	movs	r2, #4
 8009016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	88fa      	ldrh	r2, [r7, #6]
 800902a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	88fa      	ldrh	r2, [r7, #6]
 8009030:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009058:	d10f      	bne.n	800907a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009068:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009078:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009084:	2b40      	cmp	r3, #64	; 0x40
 8009086:	d007      	beq.n	8009098 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009096:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d162      	bne.n	8009166 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80090a0:	e02e      	b.n	8009100 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d115      	bne.n	80090dc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f103 020c 	add.w	r2, r3, #12
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090bc:	7812      	ldrb	r2, [r2, #0]
 80090be:	b2d2      	uxtb	r2, r2
 80090c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	3b01      	subs	r3, #1
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80090da:	e011      	b.n	8009100 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090dc:	f7fc f9e0 	bl	80054a0 <HAL_GetTick>
 80090e0:	4602      	mov	r2, r0
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d803      	bhi.n	80090f4 <HAL_SPI_Receive+0x166>
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f2:	d102      	bne.n	80090fa <HAL_SPI_Receive+0x16c>
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d102      	bne.n	8009100 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80090fe:	e04a      	b.n	8009196 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009104:	b29b      	uxth	r3, r3
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1cb      	bne.n	80090a2 <HAL_SPI_Receive+0x114>
 800910a:	e031      	b.n	8009170 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b01      	cmp	r3, #1
 8009118:	d113      	bne.n	8009142 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68da      	ldr	r2, [r3, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009124:	b292      	uxth	r2, r2
 8009126:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912c:	1c9a      	adds	r2, r3, #2
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009136:	b29b      	uxth	r3, r3
 8009138:	3b01      	subs	r3, #1
 800913a:	b29a      	uxth	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009140:	e011      	b.n	8009166 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009142:	f7fc f9ad 	bl	80054a0 <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	429a      	cmp	r2, r3
 8009150:	d803      	bhi.n	800915a <HAL_SPI_Receive+0x1cc>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009158:	d102      	bne.n	8009160 <HAL_SPI_Receive+0x1d2>
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d102      	bne.n	8009166 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009160:	2303      	movs	r3, #3
 8009162:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009164:	e017      	b.n	8009196 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800916a:	b29b      	uxth	r3, r3
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1cd      	bne.n	800910c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 fa45 	bl	8009604 <SPI_EndRxTransaction>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2220      	movs	r2, #32
 8009184:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800918a:	2b00      	cmp	r3, #0
 800918c:	d002      	beq.n	8009194 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	75fb      	strb	r3, [r7, #23]
 8009192:	e000      	b.n	8009196 <HAL_SPI_Receive+0x208>
  }

error :
 8009194:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b08c      	sub	sp, #48	; 0x30
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
 80091bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80091be:	2301      	movs	r3, #1
 80091c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d101      	bne.n	80091d6 <HAL_SPI_TransmitReceive+0x26>
 80091d2:	2302      	movs	r3, #2
 80091d4:	e18a      	b.n	80094ec <HAL_SPI_TransmitReceive+0x33c>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091de:	f7fc f95f 	bl	80054a0 <HAL_GetTick>
 80091e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80091f4:	887b      	ldrh	r3, [r7, #2]
 80091f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80091f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d00f      	beq.n	8009220 <HAL_SPI_TransmitReceive+0x70>
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009206:	d107      	bne.n	8009218 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d103      	bne.n	8009218 <HAL_SPI_TransmitReceive+0x68>
 8009210:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009214:	2b04      	cmp	r3, #4
 8009216:	d003      	beq.n	8009220 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009218:	2302      	movs	r3, #2
 800921a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800921e:	e15b      	b.n	80094d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d005      	beq.n	8009232 <HAL_SPI_TransmitReceive+0x82>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d002      	beq.n	8009232 <HAL_SPI_TransmitReceive+0x82>
 800922c:	887b      	ldrh	r3, [r7, #2]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d103      	bne.n	800923a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009238:	e14e      	b.n	80094d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b04      	cmp	r3, #4
 8009244:	d003      	beq.n	800924e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2205      	movs	r2, #5
 800924a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	887a      	ldrh	r2, [r7, #2]
 800925e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	887a      	ldrh	r2, [r7, #2]
 8009264:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	887a      	ldrh	r2, [r7, #2]
 8009270:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	887a      	ldrh	r2, [r7, #2]
 8009276:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928e:	2b40      	cmp	r3, #64	; 0x40
 8009290:	d007      	beq.n	80092a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092aa:	d178      	bne.n	800939e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <HAL_SPI_TransmitReceive+0x10a>
 80092b4:	8b7b      	ldrh	r3, [r7, #26]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d166      	bne.n	8009388 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092be:	881a      	ldrh	r2, [r3, #0]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ca:	1c9a      	adds	r2, r3, #2
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	3b01      	subs	r3, #1
 80092d8:	b29a      	uxth	r2, r3
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092de:	e053      	b.n	8009388 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f003 0302 	and.w	r3, r3, #2
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d11b      	bne.n	8009326 <HAL_SPI_TransmitReceive+0x176>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d016      	beq.n	8009326 <HAL_SPI_TransmitReceive+0x176>
 80092f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d113      	bne.n	8009326 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009302:	881a      	ldrh	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930e:	1c9a      	adds	r2, r3, #2
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009318:	b29b      	uxth	r3, r3
 800931a:	3b01      	subs	r3, #1
 800931c:	b29a      	uxth	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009322:	2300      	movs	r3, #0
 8009324:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	2b01      	cmp	r3, #1
 8009332:	d119      	bne.n	8009368 <HAL_SPI_TransmitReceive+0x1b8>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009338:	b29b      	uxth	r3, r3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d014      	beq.n	8009368 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68da      	ldr	r2, [r3, #12]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009348:	b292      	uxth	r2, r2
 800934a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009350:	1c9a      	adds	r2, r3, #2
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800935a:	b29b      	uxth	r3, r3
 800935c:	3b01      	subs	r3, #1
 800935e:	b29a      	uxth	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009364:	2301      	movs	r3, #1
 8009366:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009368:	f7fc f89a 	bl	80054a0 <HAL_GetTick>
 800936c:	4602      	mov	r2, r0
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009374:	429a      	cmp	r2, r3
 8009376:	d807      	bhi.n	8009388 <HAL_SPI_TransmitReceive+0x1d8>
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800937e:	d003      	beq.n	8009388 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009386:	e0a7      	b.n	80094d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800938c:	b29b      	uxth	r3, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1a6      	bne.n	80092e0 <HAL_SPI_TransmitReceive+0x130>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009396:	b29b      	uxth	r3, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1a1      	bne.n	80092e0 <HAL_SPI_TransmitReceive+0x130>
 800939c:	e07c      	b.n	8009498 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d002      	beq.n	80093ac <HAL_SPI_TransmitReceive+0x1fc>
 80093a6:	8b7b      	ldrh	r3, [r7, #26]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d16b      	bne.n	8009484 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	330c      	adds	r3, #12
 80093b6:	7812      	ldrb	r2, [r2, #0]
 80093b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	3b01      	subs	r3, #1
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093d2:	e057      	b.n	8009484 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	f003 0302 	and.w	r3, r3, #2
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d11c      	bne.n	800941c <HAL_SPI_TransmitReceive+0x26c>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d017      	beq.n	800941c <HAL_SPI_TransmitReceive+0x26c>
 80093ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d114      	bne.n	800941c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	330c      	adds	r3, #12
 80093fc:	7812      	ldrb	r2, [r2, #0]
 80093fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009404:	1c5a      	adds	r2, r3, #1
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800940e:	b29b      	uxth	r3, r3
 8009410:	3b01      	subs	r3, #1
 8009412:	b29a      	uxth	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009418:	2300      	movs	r3, #0
 800941a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f003 0301 	and.w	r3, r3, #1
 8009426:	2b01      	cmp	r3, #1
 8009428:	d119      	bne.n	800945e <HAL_SPI_TransmitReceive+0x2ae>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800942e:	b29b      	uxth	r3, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	d014      	beq.n	800945e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68da      	ldr	r2, [r3, #12]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943e:	b2d2      	uxtb	r2, r2
 8009440:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009450:	b29b      	uxth	r3, r3
 8009452:	3b01      	subs	r3, #1
 8009454:	b29a      	uxth	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800945a:	2301      	movs	r3, #1
 800945c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800945e:	f7fc f81f 	bl	80054a0 <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800946a:	429a      	cmp	r2, r3
 800946c:	d803      	bhi.n	8009476 <HAL_SPI_TransmitReceive+0x2c6>
 800946e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009474:	d102      	bne.n	800947c <HAL_SPI_TransmitReceive+0x2cc>
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	2b00      	cmp	r3, #0
 800947a:	d103      	bne.n	8009484 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800947c:	2303      	movs	r3, #3
 800947e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009482:	e029      	b.n	80094d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009488:	b29b      	uxth	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1a2      	bne.n	80093d4 <HAL_SPI_TransmitReceive+0x224>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009492:	b29b      	uxth	r3, r3
 8009494:	2b00      	cmp	r3, #0
 8009496:	d19d      	bne.n	80093d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800949a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 f917 	bl	80096d0 <SPI_EndRxTxTransaction>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d006      	beq.n	80094b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2220      	movs	r2, #32
 80094b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80094b4:	e010      	b.n	80094d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10b      	bne.n	80094d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094be:	2300      	movs	r3, #0
 80094c0:	617b      	str	r3, [r7, #20]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	617b      	str	r3, [r7, #20]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	617b      	str	r3, [r7, #20]
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	e000      	b.n	80094d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80094d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80094e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3730      	adds	r7, #48	; 0x30
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b088      	sub	sp, #32
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	603b      	str	r3, [r7, #0]
 8009500:	4613      	mov	r3, r2
 8009502:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009504:	f7fb ffcc 	bl	80054a0 <HAL_GetTick>
 8009508:	4602      	mov	r2, r0
 800950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950c:	1a9b      	subs	r3, r3, r2
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	4413      	add	r3, r2
 8009512:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009514:	f7fb ffc4 	bl	80054a0 <HAL_GetTick>
 8009518:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800951a:	4b39      	ldr	r3, [pc, #228]	; (8009600 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	015b      	lsls	r3, r3, #5
 8009520:	0d1b      	lsrs	r3, r3, #20
 8009522:	69fa      	ldr	r2, [r7, #28]
 8009524:	fb02 f303 	mul.w	r3, r2, r3
 8009528:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800952a:	e054      	b.n	80095d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009532:	d050      	beq.n	80095d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009534:	f7fb ffb4 	bl	80054a0 <HAL_GetTick>
 8009538:	4602      	mov	r2, r0
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	69fa      	ldr	r2, [r7, #28]
 8009540:	429a      	cmp	r2, r3
 8009542:	d902      	bls.n	800954a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d13d      	bne.n	80095c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009558:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009562:	d111      	bne.n	8009588 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800956c:	d004      	beq.n	8009578 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009576:	d107      	bne.n	8009588 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009586:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800958c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009590:	d10f      	bne.n	80095b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e017      	b.n	80095f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d101      	bne.n	80095d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	3b01      	subs	r3, #1
 80095d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689a      	ldr	r2, [r3, #8]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	4013      	ands	r3, r2
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	bf0c      	ite	eq
 80095e6:	2301      	moveq	r3, #1
 80095e8:	2300      	movne	r3, #0
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	461a      	mov	r2, r3
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d19b      	bne.n	800952c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3720      	adds	r7, #32
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	2000000c 	.word	0x2000000c

08009604 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af02      	add	r7, sp, #8
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009618:	d111      	bne.n	800963e <SPI_EndRxTransaction+0x3a>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009622:	d004      	beq.n	800962e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800962c:	d107      	bne.n	800963e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800963c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009646:	d12a      	bne.n	800969e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009650:	d012      	beq.n	8009678 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2200      	movs	r2, #0
 800965a:	2180      	movs	r1, #128	; 0x80
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f7ff ff49 	bl	80094f4 <SPI_WaitFlagStateUntilTimeout>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d02d      	beq.n	80096c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800966c:	f043 0220 	orr.w	r2, r3, #32
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e026      	b.n	80096c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	2200      	movs	r2, #0
 8009680:	2101      	movs	r1, #1
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f7ff ff36 	bl	80094f4 <SPI_WaitFlagStateUntilTimeout>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d01a      	beq.n	80096c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009692:	f043 0220 	orr.w	r2, r3, #32
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800969a:	2303      	movs	r3, #3
 800969c:	e013      	b.n	80096c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	2200      	movs	r2, #0
 80096a6:	2101      	movs	r1, #1
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f7ff ff23 	bl	80094f4 <SPI_WaitFlagStateUntilTimeout>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d007      	beq.n	80096c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b8:	f043 0220 	orr.w	r2, r3, #32
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80096c0:	2303      	movs	r3, #3
 80096c2:	e000      	b.n	80096c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
	...

080096d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af02      	add	r7, sp, #8
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80096dc:	4b1b      	ldr	r3, [pc, #108]	; (800974c <SPI_EndRxTxTransaction+0x7c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a1b      	ldr	r2, [pc, #108]	; (8009750 <SPI_EndRxTxTransaction+0x80>)
 80096e2:	fba2 2303 	umull	r2, r3, r2, r3
 80096e6:	0d5b      	lsrs	r3, r3, #21
 80096e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096ec:	fb02 f303 	mul.w	r3, r2, r3
 80096f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096fa:	d112      	bne.n	8009722 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	2200      	movs	r2, #0
 8009704:	2180      	movs	r1, #128	; 0x80
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f7ff fef4 	bl	80094f4 <SPI_WaitFlagStateUntilTimeout>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d016      	beq.n	8009740 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009716:	f043 0220 	orr.w	r2, r3, #32
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800971e:	2303      	movs	r3, #3
 8009720:	e00f      	b.n	8009742 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00a      	beq.n	800973e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	3b01      	subs	r3, #1
 800972c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009738:	2b80      	cmp	r3, #128	; 0x80
 800973a:	d0f2      	beq.n	8009722 <SPI_EndRxTxTransaction+0x52>
 800973c:	e000      	b.n	8009740 <SPI_EndRxTxTransaction+0x70>
        break;
 800973e:	bf00      	nop
  }

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3718      	adds	r7, #24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	2000000c 	.word	0x2000000c
 8009750:	165e9f81 	.word	0x165e9f81

08009754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e041      	b.n	80097ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b00      	cmp	r3, #0
 8009770:	d106      	bne.n	8009780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7fb fcae 	bl	80050dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2202      	movs	r2, #2
 8009784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3304      	adds	r3, #4
 8009790:	4619      	mov	r1, r3
 8009792:	4610      	mov	r0, r2
 8009794:	f000 fcae 	bl	800a0f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
	...

080097f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b01      	cmp	r3, #1
 8009806:	d001      	beq.n	800980c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e03c      	b.n	8009886 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2202      	movs	r2, #2
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a1e      	ldr	r2, [pc, #120]	; (8009894 <HAL_TIM_Base_Start+0xa0>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d018      	beq.n	8009850 <HAL_TIM_Base_Start+0x5c>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009826:	d013      	beq.n	8009850 <HAL_TIM_Base_Start+0x5c>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a1a      	ldr	r2, [pc, #104]	; (8009898 <HAL_TIM_Base_Start+0xa4>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d00e      	beq.n	8009850 <HAL_TIM_Base_Start+0x5c>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a19      	ldr	r2, [pc, #100]	; (800989c <HAL_TIM_Base_Start+0xa8>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d009      	beq.n	8009850 <HAL_TIM_Base_Start+0x5c>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a17      	ldr	r2, [pc, #92]	; (80098a0 <HAL_TIM_Base_Start+0xac>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d004      	beq.n	8009850 <HAL_TIM_Base_Start+0x5c>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a16      	ldr	r2, [pc, #88]	; (80098a4 <HAL_TIM_Base_Start+0xb0>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d111      	bne.n	8009874 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f003 0307 	and.w	r3, r3, #7
 800985a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2b06      	cmp	r3, #6
 8009860:	d010      	beq.n	8009884 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f042 0201 	orr.w	r2, r2, #1
 8009870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009872:	e007      	b.n	8009884 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f042 0201 	orr.w	r2, r2, #1
 8009882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	40010000 	.word	0x40010000
 8009898:	40000400 	.word	0x40000400
 800989c:	40000800 	.word	0x40000800
 80098a0:	40000c00 	.word	0x40000c00
 80098a4:	40014000 	.word	0x40014000

080098a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d001      	beq.n	80098c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e044      	b.n	800994a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2202      	movs	r2, #2
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f042 0201 	orr.w	r2, r2, #1
 80098d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a1e      	ldr	r2, [pc, #120]	; (8009958 <HAL_TIM_Base_Start_IT+0xb0>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d018      	beq.n	8009914 <HAL_TIM_Base_Start_IT+0x6c>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ea:	d013      	beq.n	8009914 <HAL_TIM_Base_Start_IT+0x6c>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a1a      	ldr	r2, [pc, #104]	; (800995c <HAL_TIM_Base_Start_IT+0xb4>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d00e      	beq.n	8009914 <HAL_TIM_Base_Start_IT+0x6c>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a19      	ldr	r2, [pc, #100]	; (8009960 <HAL_TIM_Base_Start_IT+0xb8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d009      	beq.n	8009914 <HAL_TIM_Base_Start_IT+0x6c>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a17      	ldr	r2, [pc, #92]	; (8009964 <HAL_TIM_Base_Start_IT+0xbc>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d004      	beq.n	8009914 <HAL_TIM_Base_Start_IT+0x6c>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a16      	ldr	r2, [pc, #88]	; (8009968 <HAL_TIM_Base_Start_IT+0xc0>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d111      	bne.n	8009938 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	f003 0307 	and.w	r3, r3, #7
 800991e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b06      	cmp	r3, #6
 8009924:	d010      	beq.n	8009948 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f042 0201 	orr.w	r2, r2, #1
 8009934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009936:	e007      	b.n	8009948 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f042 0201 	orr.w	r2, r2, #1
 8009946:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3714      	adds	r7, #20
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	40010000 	.word	0x40010000
 800995c:	40000400 	.word	0x40000400
 8009960:	40000800 	.word	0x40000800
 8009964:	40000c00 	.word	0x40000c00
 8009968:	40014000 	.word	0x40014000

0800996c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d101      	bne.n	800997e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e041      	b.n	8009a02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b00      	cmp	r3, #0
 8009988:	d106      	bne.n	8009998 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f839 	bl	8009a0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	3304      	adds	r3, #4
 80099a8:	4619      	mov	r1, r3
 80099aa:	4610      	mov	r0, r2
 80099ac:	f000 fba2 	bl	800a0f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b083      	sub	sp, #12
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009a12:	bf00      	nop
 8009a14:	370c      	adds	r7, #12
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
	...

08009a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d109      	bne.n	8009a44 <HAL_TIM_PWM_Start+0x24>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	bf14      	ite	ne
 8009a3c:	2301      	movne	r3, #1
 8009a3e:	2300      	moveq	r3, #0
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	e022      	b.n	8009a8a <HAL_TIM_PWM_Start+0x6a>
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	2b04      	cmp	r3, #4
 8009a48:	d109      	bne.n	8009a5e <HAL_TIM_PWM_Start+0x3e>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	bf14      	ite	ne
 8009a56:	2301      	movne	r3, #1
 8009a58:	2300      	moveq	r3, #0
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	e015      	b.n	8009a8a <HAL_TIM_PWM_Start+0x6a>
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b08      	cmp	r3, #8
 8009a62:	d109      	bne.n	8009a78 <HAL_TIM_PWM_Start+0x58>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	bf14      	ite	ne
 8009a70:	2301      	movne	r3, #1
 8009a72:	2300      	moveq	r3, #0
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	e008      	b.n	8009a8a <HAL_TIM_PWM_Start+0x6a>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	bf14      	ite	ne
 8009a84:	2301      	movne	r3, #1
 8009a86:	2300      	moveq	r3, #0
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e068      	b.n	8009b64 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d104      	bne.n	8009aa2 <HAL_TIM_PWM_Start+0x82>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009aa0:	e013      	b.n	8009aca <HAL_TIM_PWM_Start+0xaa>
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	d104      	bne.n	8009ab2 <HAL_TIM_PWM_Start+0x92>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2202      	movs	r2, #2
 8009aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ab0:	e00b      	b.n	8009aca <HAL_TIM_PWM_Start+0xaa>
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	2b08      	cmp	r3, #8
 8009ab6:	d104      	bne.n	8009ac2 <HAL_TIM_PWM_Start+0xa2>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2202      	movs	r2, #2
 8009abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ac0:	e003      	b.n	8009aca <HAL_TIM_PWM_Start+0xaa>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2202      	movs	r2, #2
 8009ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 fdb4 	bl	800a640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a23      	ldr	r2, [pc, #140]	; (8009b6c <HAL_TIM_PWM_Start+0x14c>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d107      	bne.n	8009af2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a1d      	ldr	r2, [pc, #116]	; (8009b6c <HAL_TIM_PWM_Start+0x14c>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d018      	beq.n	8009b2e <HAL_TIM_PWM_Start+0x10e>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b04:	d013      	beq.n	8009b2e <HAL_TIM_PWM_Start+0x10e>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a19      	ldr	r2, [pc, #100]	; (8009b70 <HAL_TIM_PWM_Start+0x150>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d00e      	beq.n	8009b2e <HAL_TIM_PWM_Start+0x10e>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a17      	ldr	r2, [pc, #92]	; (8009b74 <HAL_TIM_PWM_Start+0x154>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d009      	beq.n	8009b2e <HAL_TIM_PWM_Start+0x10e>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a16      	ldr	r2, [pc, #88]	; (8009b78 <HAL_TIM_PWM_Start+0x158>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d004      	beq.n	8009b2e <HAL_TIM_PWM_Start+0x10e>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a14      	ldr	r2, [pc, #80]	; (8009b7c <HAL_TIM_PWM_Start+0x15c>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d111      	bne.n	8009b52 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f003 0307 	and.w	r3, r3, #7
 8009b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b06      	cmp	r3, #6
 8009b3e:	d010      	beq.n	8009b62 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f042 0201 	orr.w	r2, r2, #1
 8009b4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b50:	e007      	b.n	8009b62 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f042 0201 	orr.w	r2, r2, #1
 8009b60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	40010000 	.word	0x40010000
 8009b70:	40000400 	.word	0x40000400
 8009b74:	40000800 	.word	0x40000800
 8009b78:	40000c00 	.word	0x40000c00
 8009b7c:	40014000 	.word	0x40014000

08009b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	f003 0302 	and.w	r3, r3, #2
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d122      	bne.n	8009bdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	f003 0302 	and.w	r3, r3, #2
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d11b      	bne.n	8009bdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f06f 0202 	mvn.w	r2, #2
 8009bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	f003 0303 	and.w	r3, r3, #3
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fa77 	bl	800a0b6 <HAL_TIM_IC_CaptureCallback>
 8009bc8:	e005      	b.n	8009bd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fa69 	bl	800a0a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fa7a 	bl	800a0ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	f003 0304 	and.w	r3, r3, #4
 8009be6:	2b04      	cmp	r3, #4
 8009be8:	d122      	bne.n	8009c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	f003 0304 	and.w	r3, r3, #4
 8009bf4:	2b04      	cmp	r3, #4
 8009bf6:	d11b      	bne.n	8009c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f06f 0204 	mvn.w	r2, #4
 8009c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2202      	movs	r2, #2
 8009c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fa4d 	bl	800a0b6 <HAL_TIM_IC_CaptureCallback>
 8009c1c:	e005      	b.n	8009c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 fa3f 	bl	800a0a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fa50 	bl	800a0ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	f003 0308 	and.w	r3, r3, #8
 8009c3a:	2b08      	cmp	r3, #8
 8009c3c:	d122      	bne.n	8009c84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	f003 0308 	and.w	r3, r3, #8
 8009c48:	2b08      	cmp	r3, #8
 8009c4a:	d11b      	bne.n	8009c84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f06f 0208 	mvn.w	r2, #8
 8009c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2204      	movs	r2, #4
 8009c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	f003 0303 	and.w	r3, r3, #3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d003      	beq.n	8009c72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fa23 	bl	800a0b6 <HAL_TIM_IC_CaptureCallback>
 8009c70:	e005      	b.n	8009c7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fa15 	bl	800a0a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fa26 	bl	800a0ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	f003 0310 	and.w	r3, r3, #16
 8009c8e:	2b10      	cmp	r3, #16
 8009c90:	d122      	bne.n	8009cd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	f003 0310 	and.w	r3, r3, #16
 8009c9c:	2b10      	cmp	r3, #16
 8009c9e:	d11b      	bne.n	8009cd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f06f 0210 	mvn.w	r2, #16
 8009ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2208      	movs	r2, #8
 8009cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	69db      	ldr	r3, [r3, #28]
 8009cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f9f9 	bl	800a0b6 <HAL_TIM_IC_CaptureCallback>
 8009cc4:	e005      	b.n	8009cd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f9eb 	bl	800a0a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f9fc 	bl	800a0ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d10e      	bne.n	8009d04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	f003 0301 	and.w	r3, r3, #1
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d107      	bne.n	8009d04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f06f 0201 	mvn.w	r2, #1
 8009cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7f9 fa28 	bl	8003154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d0e:	2b80      	cmp	r3, #128	; 0x80
 8009d10:	d10e      	bne.n	8009d30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d1c:	2b80      	cmp	r3, #128	; 0x80
 8009d1e:	d107      	bne.n	8009d30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fd26 	bl	800a77c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d3a:	2b40      	cmp	r3, #64	; 0x40
 8009d3c:	d10e      	bne.n	8009d5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d48:	2b40      	cmp	r3, #64	; 0x40
 8009d4a:	d107      	bne.n	8009d5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f9c1 	bl	800a0de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	f003 0320 	and.w	r3, r3, #32
 8009d66:	2b20      	cmp	r3, #32
 8009d68:	d10e      	bne.n	8009d88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	f003 0320 	and.w	r3, r3, #32
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	d107      	bne.n	8009d88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f06f 0220 	mvn.w	r2, #32
 8009d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fcf0 	bl	800a768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d88:	bf00      	nop
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d101      	bne.n	8009dae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009daa:	2302      	movs	r3, #2
 8009dac:	e0ae      	b.n	8009f0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b0c      	cmp	r3, #12
 8009dba:	f200 809f 	bhi.w	8009efc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009dbe:	a201      	add	r2, pc, #4	; (adr r2, 8009dc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc4:	08009df9 	.word	0x08009df9
 8009dc8:	08009efd 	.word	0x08009efd
 8009dcc:	08009efd 	.word	0x08009efd
 8009dd0:	08009efd 	.word	0x08009efd
 8009dd4:	08009e39 	.word	0x08009e39
 8009dd8:	08009efd 	.word	0x08009efd
 8009ddc:	08009efd 	.word	0x08009efd
 8009de0:	08009efd 	.word	0x08009efd
 8009de4:	08009e7b 	.word	0x08009e7b
 8009de8:	08009efd 	.word	0x08009efd
 8009dec:	08009efd 	.word	0x08009efd
 8009df0:	08009efd 	.word	0x08009efd
 8009df4:	08009ebb 	.word	0x08009ebb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68b9      	ldr	r1, [r7, #8]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 f9f8 	bl	800a1f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	699a      	ldr	r2, [r3, #24]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f042 0208 	orr.w	r2, r2, #8
 8009e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	699a      	ldr	r2, [r3, #24]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f022 0204 	bic.w	r2, r2, #4
 8009e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6999      	ldr	r1, [r3, #24]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	691a      	ldr	r2, [r3, #16]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	430a      	orrs	r2, r1
 8009e34:	619a      	str	r2, [r3, #24]
      break;
 8009e36:	e064      	b.n	8009f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68b9      	ldr	r1, [r7, #8]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 fa3e 	bl	800a2c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	699a      	ldr	r2, [r3, #24]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	699a      	ldr	r2, [r3, #24]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6999      	ldr	r1, [r3, #24]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	021a      	lsls	r2, r3, #8
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	430a      	orrs	r2, r1
 8009e76:	619a      	str	r2, [r3, #24]
      break;
 8009e78:	e043      	b.n	8009f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68b9      	ldr	r1, [r7, #8]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 fa89 	bl	800a398 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	69da      	ldr	r2, [r3, #28]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f042 0208 	orr.w	r2, r2, #8
 8009e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	69da      	ldr	r2, [r3, #28]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f022 0204 	bic.w	r2, r2, #4
 8009ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	69d9      	ldr	r1, [r3, #28]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	691a      	ldr	r2, [r3, #16]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	61da      	str	r2, [r3, #28]
      break;
 8009eb8:	e023      	b.n	8009f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 fad3 	bl	800a46c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	69da      	ldr	r2, [r3, #28]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	69da      	ldr	r2, [r3, #28]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	69d9      	ldr	r1, [r3, #28]
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	021a      	lsls	r2, r3, #8
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	61da      	str	r2, [r3, #28]
      break;
 8009efa:	e002      	b.n	8009f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	75fb      	strb	r3, [r7, #23]
      break;
 8009f00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d101      	bne.n	8009f30 <HAL_TIM_ConfigClockSource+0x1c>
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	e0b4      	b.n	800a09a <HAL_TIM_ConfigClockSource+0x186>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f68:	d03e      	beq.n	8009fe8 <HAL_TIM_ConfigClockSource+0xd4>
 8009f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f6e:	f200 8087 	bhi.w	800a080 <HAL_TIM_ConfigClockSource+0x16c>
 8009f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f76:	f000 8086 	beq.w	800a086 <HAL_TIM_ConfigClockSource+0x172>
 8009f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f7e:	d87f      	bhi.n	800a080 <HAL_TIM_ConfigClockSource+0x16c>
 8009f80:	2b70      	cmp	r3, #112	; 0x70
 8009f82:	d01a      	beq.n	8009fba <HAL_TIM_ConfigClockSource+0xa6>
 8009f84:	2b70      	cmp	r3, #112	; 0x70
 8009f86:	d87b      	bhi.n	800a080 <HAL_TIM_ConfigClockSource+0x16c>
 8009f88:	2b60      	cmp	r3, #96	; 0x60
 8009f8a:	d050      	beq.n	800a02e <HAL_TIM_ConfigClockSource+0x11a>
 8009f8c:	2b60      	cmp	r3, #96	; 0x60
 8009f8e:	d877      	bhi.n	800a080 <HAL_TIM_ConfigClockSource+0x16c>
 8009f90:	2b50      	cmp	r3, #80	; 0x50
 8009f92:	d03c      	beq.n	800a00e <HAL_TIM_ConfigClockSource+0xfa>
 8009f94:	2b50      	cmp	r3, #80	; 0x50
 8009f96:	d873      	bhi.n	800a080 <HAL_TIM_ConfigClockSource+0x16c>
 8009f98:	2b40      	cmp	r3, #64	; 0x40
 8009f9a:	d058      	beq.n	800a04e <HAL_TIM_ConfigClockSource+0x13a>
 8009f9c:	2b40      	cmp	r3, #64	; 0x40
 8009f9e:	d86f      	bhi.n	800a080 <HAL_TIM_ConfigClockSource+0x16c>
 8009fa0:	2b30      	cmp	r3, #48	; 0x30
 8009fa2:	d064      	beq.n	800a06e <HAL_TIM_ConfigClockSource+0x15a>
 8009fa4:	2b30      	cmp	r3, #48	; 0x30
 8009fa6:	d86b      	bhi.n	800a080 <HAL_TIM_ConfigClockSource+0x16c>
 8009fa8:	2b20      	cmp	r3, #32
 8009faa:	d060      	beq.n	800a06e <HAL_TIM_ConfigClockSource+0x15a>
 8009fac:	2b20      	cmp	r3, #32
 8009fae:	d867      	bhi.n	800a080 <HAL_TIM_ConfigClockSource+0x16c>
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d05c      	beq.n	800a06e <HAL_TIM_ConfigClockSource+0x15a>
 8009fb4:	2b10      	cmp	r3, #16
 8009fb6:	d05a      	beq.n	800a06e <HAL_TIM_ConfigClockSource+0x15a>
 8009fb8:	e062      	b.n	800a080 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6818      	ldr	r0, [r3, #0]
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	6899      	ldr	r1, [r3, #8]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	f000 fb19 	bl	800a600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	609a      	str	r2, [r3, #8]
      break;
 8009fe6:	e04f      	b.n	800a088 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6818      	ldr	r0, [r3, #0]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	6899      	ldr	r1, [r3, #8]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	685a      	ldr	r2, [r3, #4]
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f000 fb02 	bl	800a600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	689a      	ldr	r2, [r3, #8]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a00a:	609a      	str	r2, [r3, #8]
      break;
 800a00c:	e03c      	b.n	800a088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	6859      	ldr	r1, [r3, #4]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	461a      	mov	r2, r3
 800a01c:	f000 fa76 	bl	800a50c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2150      	movs	r1, #80	; 0x50
 800a026:	4618      	mov	r0, r3
 800a028:	f000 facf 	bl	800a5ca <TIM_ITRx_SetConfig>
      break;
 800a02c:	e02c      	b.n	800a088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6818      	ldr	r0, [r3, #0]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	6859      	ldr	r1, [r3, #4]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	461a      	mov	r2, r3
 800a03c:	f000 fa95 	bl	800a56a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2160      	movs	r1, #96	; 0x60
 800a046:	4618      	mov	r0, r3
 800a048:	f000 fabf 	bl	800a5ca <TIM_ITRx_SetConfig>
      break;
 800a04c:	e01c      	b.n	800a088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6818      	ldr	r0, [r3, #0]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	6859      	ldr	r1, [r3, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	461a      	mov	r2, r3
 800a05c:	f000 fa56 	bl	800a50c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2140      	movs	r1, #64	; 0x40
 800a066:	4618      	mov	r0, r3
 800a068:	f000 faaf 	bl	800a5ca <TIM_ITRx_SetConfig>
      break;
 800a06c:	e00c      	b.n	800a088 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4619      	mov	r1, r3
 800a078:	4610      	mov	r0, r2
 800a07a:	f000 faa6 	bl	800a5ca <TIM_ITRx_SetConfig>
      break;
 800a07e:	e003      	b.n	800a088 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	73fb      	strb	r3, [r7, #15]
      break;
 800a084:	e000      	b.n	800a088 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a098:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0a2:	b480      	push	{r7}
 800a0a4:	b083      	sub	sp, #12
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0aa:	bf00      	nop
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	b083      	sub	sp, #12
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0be:	bf00      	nop
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b083      	sub	sp, #12
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0d2:	bf00      	nop
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b083      	sub	sp, #12
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0e6:	bf00      	nop
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
	...

0800a0f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a34      	ldr	r2, [pc, #208]	; (800a1d8 <TIM_Base_SetConfig+0xe4>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d00f      	beq.n	800a12c <TIM_Base_SetConfig+0x38>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a112:	d00b      	beq.n	800a12c <TIM_Base_SetConfig+0x38>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a31      	ldr	r2, [pc, #196]	; (800a1dc <TIM_Base_SetConfig+0xe8>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d007      	beq.n	800a12c <TIM_Base_SetConfig+0x38>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a30      	ldr	r2, [pc, #192]	; (800a1e0 <TIM_Base_SetConfig+0xec>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d003      	beq.n	800a12c <TIM_Base_SetConfig+0x38>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a2f      	ldr	r2, [pc, #188]	; (800a1e4 <TIM_Base_SetConfig+0xf0>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d108      	bne.n	800a13e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a25      	ldr	r2, [pc, #148]	; (800a1d8 <TIM_Base_SetConfig+0xe4>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d01b      	beq.n	800a17e <TIM_Base_SetConfig+0x8a>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a14c:	d017      	beq.n	800a17e <TIM_Base_SetConfig+0x8a>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a22      	ldr	r2, [pc, #136]	; (800a1dc <TIM_Base_SetConfig+0xe8>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d013      	beq.n	800a17e <TIM_Base_SetConfig+0x8a>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a21      	ldr	r2, [pc, #132]	; (800a1e0 <TIM_Base_SetConfig+0xec>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d00f      	beq.n	800a17e <TIM_Base_SetConfig+0x8a>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a20      	ldr	r2, [pc, #128]	; (800a1e4 <TIM_Base_SetConfig+0xf0>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d00b      	beq.n	800a17e <TIM_Base_SetConfig+0x8a>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a1f      	ldr	r2, [pc, #124]	; (800a1e8 <TIM_Base_SetConfig+0xf4>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d007      	beq.n	800a17e <TIM_Base_SetConfig+0x8a>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a1e      	ldr	r2, [pc, #120]	; (800a1ec <TIM_Base_SetConfig+0xf8>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d003      	beq.n	800a17e <TIM_Base_SetConfig+0x8a>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a1d      	ldr	r2, [pc, #116]	; (800a1f0 <TIM_Base_SetConfig+0xfc>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d108      	bne.n	800a190 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	695b      	ldr	r3, [r3, #20]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a08      	ldr	r2, [pc, #32]	; (800a1d8 <TIM_Base_SetConfig+0xe4>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d103      	bne.n	800a1c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	691a      	ldr	r2, [r3, #16]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	615a      	str	r2, [r3, #20]
}
 800a1ca:	bf00      	nop
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	40010000 	.word	0x40010000
 800a1dc:	40000400 	.word	0x40000400
 800a1e0:	40000800 	.word	0x40000800
 800a1e4:	40000c00 	.word	0x40000c00
 800a1e8:	40014000 	.word	0x40014000
 800a1ec:	40014400 	.word	0x40014400
 800a1f0:	40014800 	.word	0x40014800

0800a1f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	f023 0201 	bic.w	r2, r3, #1
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f023 0303 	bic.w	r3, r3, #3
 800a22a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	4313      	orrs	r3, r2
 800a234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f023 0302 	bic.w	r3, r3, #2
 800a23c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	4313      	orrs	r3, r2
 800a246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	4a1c      	ldr	r2, [pc, #112]	; (800a2bc <TIM_OC1_SetConfig+0xc8>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d10c      	bne.n	800a26a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	f023 0308 	bic.w	r3, r3, #8
 800a256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	697a      	ldr	r2, [r7, #20]
 800a25e:	4313      	orrs	r3, r2
 800a260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f023 0304 	bic.w	r3, r3, #4
 800a268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a13      	ldr	r2, [pc, #76]	; (800a2bc <TIM_OC1_SetConfig+0xc8>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d111      	bne.n	800a296 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	4313      	orrs	r3, r2
 800a28a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	4313      	orrs	r3, r2
 800a294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	685a      	ldr	r2, [r3, #4]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	621a      	str	r2, [r3, #32]
}
 800a2b0:	bf00      	nop
 800a2b2:	371c      	adds	r7, #28
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	40010000 	.word	0x40010000

0800a2c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	f023 0210 	bic.w	r2, r3, #16
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	021b      	lsls	r3, r3, #8
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	4313      	orrs	r3, r2
 800a302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f023 0320 	bic.w	r3, r3, #32
 800a30a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	011b      	lsls	r3, r3, #4
 800a312:	697a      	ldr	r2, [r7, #20]
 800a314:	4313      	orrs	r3, r2
 800a316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a1e      	ldr	r2, [pc, #120]	; (800a394 <TIM_OC2_SetConfig+0xd4>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d10d      	bne.n	800a33c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	011b      	lsls	r3, r3, #4
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	4313      	orrs	r3, r2
 800a332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a33a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a15      	ldr	r2, [pc, #84]	; (800a394 <TIM_OC2_SetConfig+0xd4>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d113      	bne.n	800a36c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a34a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	695b      	ldr	r3, [r3, #20]
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	693a      	ldr	r2, [r7, #16]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	699b      	ldr	r3, [r3, #24]
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	4313      	orrs	r3, r2
 800a36a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	693a      	ldr	r2, [r7, #16]
 800a370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	621a      	str	r2, [r3, #32]
}
 800a386:	bf00      	nop
 800a388:	371c      	adds	r7, #28
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	40010000 	.word	0x40010000

0800a398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
 800a3b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f023 0303 	bic.w	r3, r3, #3
 800a3ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	021b      	lsls	r3, r3, #8
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a1d      	ldr	r2, [pc, #116]	; (800a468 <TIM_OC3_SetConfig+0xd0>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d10d      	bne.n	800a412 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	021b      	lsls	r3, r3, #8
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	4313      	orrs	r3, r2
 800a408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a14      	ldr	r2, [pc, #80]	; (800a468 <TIM_OC3_SetConfig+0xd0>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d113      	bne.n	800a442 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	695b      	ldr	r3, [r3, #20]
 800a42e:	011b      	lsls	r3, r3, #4
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	4313      	orrs	r3, r2
 800a434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	011b      	lsls	r3, r3, #4
 800a43c:	693a      	ldr	r2, [r7, #16]
 800a43e:	4313      	orrs	r3, r2
 800a440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	685a      	ldr	r2, [r3, #4]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	621a      	str	r2, [r3, #32]
}
 800a45c:	bf00      	nop
 800a45e:	371c      	adds	r7, #28
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr
 800a468:	40010000 	.word	0x40010000

0800a46c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b087      	sub	sp, #28
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a1b      	ldr	r3, [r3, #32]
 800a47a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a49a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	021b      	lsls	r3, r3, #8
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	031b      	lsls	r3, r3, #12
 800a4be:	693a      	ldr	r2, [r7, #16]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a10      	ldr	r2, [pc, #64]	; (800a508 <TIM_OC4_SetConfig+0x9c>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d109      	bne.n	800a4e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	695b      	ldr	r3, [r3, #20]
 800a4d8:	019b      	lsls	r3, r3, #6
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	685a      	ldr	r2, [r3, #4]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	693a      	ldr	r2, [r7, #16]
 800a4f8:	621a      	str	r2, [r3, #32]
}
 800a4fa:	bf00      	nop
 800a4fc:	371c      	adds	r7, #28
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	40010000 	.word	0x40010000

0800a50c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b087      	sub	sp, #28
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6a1b      	ldr	r3, [r3, #32]
 800a51c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6a1b      	ldr	r3, [r3, #32]
 800a522:	f023 0201 	bic.w	r2, r3, #1
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	011b      	lsls	r3, r3, #4
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	4313      	orrs	r3, r2
 800a540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f023 030a 	bic.w	r3, r3, #10
 800a548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	4313      	orrs	r3, r2
 800a550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	621a      	str	r2, [r3, #32]
}
 800a55e:	bf00      	nop
 800a560:	371c      	adds	r7, #28
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b087      	sub	sp, #28
 800a56e:	af00      	add	r7, sp, #0
 800a570:	60f8      	str	r0, [r7, #12]
 800a572:	60b9      	str	r1, [r7, #8]
 800a574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6a1b      	ldr	r3, [r3, #32]
 800a57a:	f023 0210 	bic.w	r2, r3, #16
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	031b      	lsls	r3, r3, #12
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	011b      	lsls	r3, r3, #4
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	697a      	ldr	r2, [r7, #20]
 800a5b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	621a      	str	r2, [r3, #32]
}
 800a5be:	bf00      	nop
 800a5c0:	371c      	adds	r7, #28
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b085      	sub	sp, #20
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	f043 0307 	orr.w	r3, r3, #7
 800a5ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	609a      	str	r2, [r3, #8]
}
 800a5f4:	bf00      	nop
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a600:	b480      	push	{r7}
 800a602:	b087      	sub	sp, #28
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
 800a60c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a61a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	021a      	lsls	r2, r3, #8
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	431a      	orrs	r2, r3
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	4313      	orrs	r3, r2
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	609a      	str	r2, [r3, #8]
}
 800a634:	bf00      	nop
 800a636:	371c      	adds	r7, #28
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a640:	b480      	push	{r7}
 800a642:	b087      	sub	sp, #28
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f003 031f 	and.w	r3, r3, #31
 800a652:	2201      	movs	r2, #1
 800a654:	fa02 f303 	lsl.w	r3, r2, r3
 800a658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6a1a      	ldr	r2, [r3, #32]
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	43db      	mvns	r3, r3
 800a662:	401a      	ands	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6a1a      	ldr	r2, [r3, #32]
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	f003 031f 	and.w	r3, r3, #31
 800a672:	6879      	ldr	r1, [r7, #4]
 800a674:	fa01 f303 	lsl.w	r3, r1, r3
 800a678:	431a      	orrs	r2, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	621a      	str	r2, [r3, #32]
}
 800a67e:	bf00      	nop
 800a680:	371c      	adds	r7, #28
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
	...

0800a68c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b085      	sub	sp, #20
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d101      	bne.n	800a6a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	e050      	b.n	800a746 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a1c      	ldr	r2, [pc, #112]	; (800a754 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d018      	beq.n	800a71a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6f0:	d013      	beq.n	800a71a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a18      	ldr	r2, [pc, #96]	; (800a758 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d00e      	beq.n	800a71a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a16      	ldr	r2, [pc, #88]	; (800a75c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d009      	beq.n	800a71a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a15      	ldr	r2, [pc, #84]	; (800a760 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d004      	beq.n	800a71a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a13      	ldr	r2, [pc, #76]	; (800a764 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d10c      	bne.n	800a734 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a720:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	68ba      	ldr	r2, [r7, #8]
 800a728:	4313      	orrs	r3, r2
 800a72a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3714      	adds	r7, #20
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	40010000 	.word	0x40010000
 800a758:	40000400 	.word	0x40000400
 800a75c:	40000800 	.word	0x40000800
 800a760:	40000c00 	.word	0x40000c00
 800a764:	40014000 	.word	0x40014000

0800a768 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a770:	bf00      	nop
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a790:	b084      	sub	sp, #16
 800a792:	b580      	push	{r7, lr}
 800a794:	b084      	sub	sp, #16
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	f107 001c 	add.w	r0, r7, #28
 800a79e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d122      	bne.n	800a7ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a7bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a7d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d105      	bne.n	800a7e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f001 fb1c 	bl	800be20 <USB_CoreReset>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	73fb      	strb	r3, [r7, #15]
 800a7ec:	e01a      	b.n	800a824 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f001 fb10 	bl	800be20 <USB_CoreReset>
 800a800:	4603      	mov	r3, r0
 800a802:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a806:	2b00      	cmp	r3, #0
 800a808:	d106      	bne.n	800a818 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	639a      	str	r2, [r3, #56]	; 0x38
 800a816:	e005      	b.n	800a824 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a826:	2b01      	cmp	r3, #1
 800a828:	d10b      	bne.n	800a842 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	f043 0206 	orr.w	r2, r3, #6
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	f043 0220 	orr.w	r2, r3, #32
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a842:	7bfb      	ldrb	r3, [r7, #15]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a84e:	b004      	add	sp, #16
 800a850:	4770      	bx	lr
	...

0800a854 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a854:	b480      	push	{r7}
 800a856:	b087      	sub	sp, #28
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	4613      	mov	r3, r2
 800a860:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a862:	79fb      	ldrb	r3, [r7, #7]
 800a864:	2b02      	cmp	r3, #2
 800a866:	d165      	bne.n	800a934 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	4a41      	ldr	r2, [pc, #260]	; (800a970 <USB_SetTurnaroundTime+0x11c>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d906      	bls.n	800a87e <USB_SetTurnaroundTime+0x2a>
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	4a40      	ldr	r2, [pc, #256]	; (800a974 <USB_SetTurnaroundTime+0x120>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d202      	bcs.n	800a87e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a878:	230f      	movs	r3, #15
 800a87a:	617b      	str	r3, [r7, #20]
 800a87c:	e062      	b.n	800a944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	4a3c      	ldr	r2, [pc, #240]	; (800a974 <USB_SetTurnaroundTime+0x120>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d306      	bcc.n	800a894 <USB_SetTurnaroundTime+0x40>
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	4a3b      	ldr	r2, [pc, #236]	; (800a978 <USB_SetTurnaroundTime+0x124>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d202      	bcs.n	800a894 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a88e:	230e      	movs	r3, #14
 800a890:	617b      	str	r3, [r7, #20]
 800a892:	e057      	b.n	800a944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	4a38      	ldr	r2, [pc, #224]	; (800a978 <USB_SetTurnaroundTime+0x124>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d306      	bcc.n	800a8aa <USB_SetTurnaroundTime+0x56>
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	4a37      	ldr	r2, [pc, #220]	; (800a97c <USB_SetTurnaroundTime+0x128>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d202      	bcs.n	800a8aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a8a4:	230d      	movs	r3, #13
 800a8a6:	617b      	str	r3, [r7, #20]
 800a8a8:	e04c      	b.n	800a944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	4a33      	ldr	r2, [pc, #204]	; (800a97c <USB_SetTurnaroundTime+0x128>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d306      	bcc.n	800a8c0 <USB_SetTurnaroundTime+0x6c>
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	4a32      	ldr	r2, [pc, #200]	; (800a980 <USB_SetTurnaroundTime+0x12c>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d802      	bhi.n	800a8c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a8ba:	230c      	movs	r3, #12
 800a8bc:	617b      	str	r3, [r7, #20]
 800a8be:	e041      	b.n	800a944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	4a2f      	ldr	r2, [pc, #188]	; (800a980 <USB_SetTurnaroundTime+0x12c>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d906      	bls.n	800a8d6 <USB_SetTurnaroundTime+0x82>
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	4a2e      	ldr	r2, [pc, #184]	; (800a984 <USB_SetTurnaroundTime+0x130>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d802      	bhi.n	800a8d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a8d0:	230b      	movs	r3, #11
 800a8d2:	617b      	str	r3, [r7, #20]
 800a8d4:	e036      	b.n	800a944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	4a2a      	ldr	r2, [pc, #168]	; (800a984 <USB_SetTurnaroundTime+0x130>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d906      	bls.n	800a8ec <USB_SetTurnaroundTime+0x98>
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	4a29      	ldr	r2, [pc, #164]	; (800a988 <USB_SetTurnaroundTime+0x134>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d802      	bhi.n	800a8ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a8e6:	230a      	movs	r3, #10
 800a8e8:	617b      	str	r3, [r7, #20]
 800a8ea:	e02b      	b.n	800a944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	4a26      	ldr	r2, [pc, #152]	; (800a988 <USB_SetTurnaroundTime+0x134>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d906      	bls.n	800a902 <USB_SetTurnaroundTime+0xae>
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	4a25      	ldr	r2, [pc, #148]	; (800a98c <USB_SetTurnaroundTime+0x138>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d202      	bcs.n	800a902 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a8fc:	2309      	movs	r3, #9
 800a8fe:	617b      	str	r3, [r7, #20]
 800a900:	e020      	b.n	800a944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	4a21      	ldr	r2, [pc, #132]	; (800a98c <USB_SetTurnaroundTime+0x138>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d306      	bcc.n	800a918 <USB_SetTurnaroundTime+0xc4>
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	4a20      	ldr	r2, [pc, #128]	; (800a990 <USB_SetTurnaroundTime+0x13c>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d802      	bhi.n	800a918 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a912:	2308      	movs	r3, #8
 800a914:	617b      	str	r3, [r7, #20]
 800a916:	e015      	b.n	800a944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	4a1d      	ldr	r2, [pc, #116]	; (800a990 <USB_SetTurnaroundTime+0x13c>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d906      	bls.n	800a92e <USB_SetTurnaroundTime+0xda>
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	4a1c      	ldr	r2, [pc, #112]	; (800a994 <USB_SetTurnaroundTime+0x140>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d202      	bcs.n	800a92e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a928:	2307      	movs	r3, #7
 800a92a:	617b      	str	r3, [r7, #20]
 800a92c:	e00a      	b.n	800a944 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a92e:	2306      	movs	r3, #6
 800a930:	617b      	str	r3, [r7, #20]
 800a932:	e007      	b.n	800a944 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a934:	79fb      	ldrb	r3, [r7, #7]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d102      	bne.n	800a940 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a93a:	2309      	movs	r3, #9
 800a93c:	617b      	str	r3, [r7, #20]
 800a93e:	e001      	b.n	800a944 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a940:	2309      	movs	r3, #9
 800a942:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	68da      	ldr	r2, [r3, #12]
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	029b      	lsls	r3, r3, #10
 800a958:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a95c:	431a      	orrs	r2, r3
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	371c      	adds	r7, #28
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	00d8acbf 	.word	0x00d8acbf
 800a974:	00e4e1c0 	.word	0x00e4e1c0
 800a978:	00f42400 	.word	0x00f42400
 800a97c:	01067380 	.word	0x01067380
 800a980:	011a499f 	.word	0x011a499f
 800a984:	01312cff 	.word	0x01312cff
 800a988:	014ca43f 	.word	0x014ca43f
 800a98c:	016e3600 	.word	0x016e3600
 800a990:	01a6ab1f 	.word	0x01a6ab1f
 800a994:	01e84800 	.word	0x01e84800

0800a998 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	f043 0201 	orr.w	r2, r3, #1
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9ba:	b480      	push	{r7}
 800a9bc:	b083      	sub	sp, #12
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	f023 0201 	bic.w	r2, r3, #1
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a9f8:	78fb      	ldrb	r3, [r7, #3]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d115      	bne.n	800aa2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aa0a:	2001      	movs	r0, #1
 800aa0c:	f7fa fd54 	bl	80054b8 <HAL_Delay>
      ms++;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	3301      	adds	r3, #1
 800aa14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f001 f972 	bl	800bd00 <USB_GetMode>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d01e      	beq.n	800aa60 <USB_SetCurrentMode+0x84>
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2b31      	cmp	r3, #49	; 0x31
 800aa26:	d9f0      	bls.n	800aa0a <USB_SetCurrentMode+0x2e>
 800aa28:	e01a      	b.n	800aa60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa2a:	78fb      	ldrb	r3, [r7, #3]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d115      	bne.n	800aa5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aa3c:	2001      	movs	r0, #1
 800aa3e:	f7fa fd3b 	bl	80054b8 <HAL_Delay>
      ms++;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	3301      	adds	r3, #1
 800aa46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f001 f959 	bl	800bd00 <USB_GetMode>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d005      	beq.n	800aa60 <USB_SetCurrentMode+0x84>
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2b31      	cmp	r3, #49	; 0x31
 800aa58:	d9f0      	bls.n	800aa3c <USB_SetCurrentMode+0x60>
 800aa5a:	e001      	b.n	800aa60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e005      	b.n	800aa6c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2b32      	cmp	r3, #50	; 0x32
 800aa64:	d101      	bne.n	800aa6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e000      	b.n	800aa6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa74:	b084      	sub	sp, #16
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b086      	sub	sp, #24
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aa82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aa8e:	2300      	movs	r3, #0
 800aa90:	613b      	str	r3, [r7, #16]
 800aa92:	e009      	b.n	800aaa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	3340      	adds	r3, #64	; 0x40
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4413      	add	r3, r2
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	613b      	str	r3, [r7, #16]
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	2b0e      	cmp	r3, #14
 800aaac:	d9f2      	bls.n	800aa94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aaae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d11c      	bne.n	800aaee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aac2:	f043 0302 	orr.w	r3, r3, #2
 800aac6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aacc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	639a      	str	r2, [r3, #56]	; 0x38
 800aaec:	e00b      	b.n	800ab06 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	2300      	movs	r3, #0
 800ab10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab18:	4619      	mov	r1, r3
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab20:	461a      	mov	r2, r3
 800ab22:	680b      	ldr	r3, [r1, #0]
 800ab24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d10c      	bne.n	800ab46 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d104      	bne.n	800ab3c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ab32:	2100      	movs	r1, #0
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 f945 	bl	800adc4 <USB_SetDevSpeed>
 800ab3a:	e008      	b.n	800ab4e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ab3c:	2101      	movs	r1, #1
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f940 	bl	800adc4 <USB_SetDevSpeed>
 800ab44:	e003      	b.n	800ab4e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ab46:	2103      	movs	r1, #3
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 f93b 	bl	800adc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab4e:	2110      	movs	r1, #16
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f8f3 	bl	800ad3c <USB_FlushTxFifo>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d001      	beq.n	800ab60 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f90f 	bl	800ad84 <USB_FlushRxFifo>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d001      	beq.n	800ab70 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab76:	461a      	mov	r2, r3
 800ab78:	2300      	movs	r3, #0
 800ab7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab82:	461a      	mov	r2, r3
 800ab84:	2300      	movs	r3, #0
 800ab86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab8e:	461a      	mov	r2, r3
 800ab90:	2300      	movs	r3, #0
 800ab92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab94:	2300      	movs	r3, #0
 800ab96:	613b      	str	r3, [r7, #16]
 800ab98:	e043      	b.n	800ac22 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	015a      	lsls	r2, r3, #5
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	4413      	add	r3, r2
 800aba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abb0:	d118      	bne.n	800abe4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10a      	bne.n	800abce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	015a      	lsls	r2, r3, #5
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	4413      	add	r3, r2
 800abc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc4:	461a      	mov	r2, r3
 800abc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800abca:	6013      	str	r3, [r2, #0]
 800abcc:	e013      	b.n	800abf6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	015a      	lsls	r2, r3, #5
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	4413      	add	r3, r2
 800abd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abda:	461a      	mov	r2, r3
 800abdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800abe0:	6013      	str	r3, [r2, #0]
 800abe2:	e008      	b.n	800abf6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf0:	461a      	mov	r2, r3
 800abf2:	2300      	movs	r3, #0
 800abf4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	015a      	lsls	r2, r3, #5
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	4413      	add	r3, r2
 800abfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac02:	461a      	mov	r2, r3
 800ac04:	2300      	movs	r3, #0
 800ac06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	015a      	lsls	r2, r3, #5
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	4413      	add	r3, r2
 800ac10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac14:	461a      	mov	r2, r3
 800ac16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	613b      	str	r3, [r7, #16]
 800ac22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d3b7      	bcc.n	800ab9a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	613b      	str	r3, [r7, #16]
 800ac2e:	e043      	b.n	800acb8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	015a      	lsls	r2, r3, #5
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	4413      	add	r3, r2
 800ac38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac46:	d118      	bne.n	800ac7a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10a      	bne.n	800ac64 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	015a      	lsls	r2, r3, #5
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	4413      	add	r3, r2
 800ac56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac60:	6013      	str	r3, [r2, #0]
 800ac62:	e013      	b.n	800ac8c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	015a      	lsls	r2, r3, #5
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac70:	461a      	mov	r2, r3
 800ac72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ac76:	6013      	str	r3, [r2, #0]
 800ac78:	e008      	b.n	800ac8c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	015a      	lsls	r2, r3, #5
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	4413      	add	r3, r2
 800ac82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac86:	461a      	mov	r2, r3
 800ac88:	2300      	movs	r3, #0
 800ac8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	015a      	lsls	r2, r3, #5
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	4413      	add	r3, r2
 800ac94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac98:	461a      	mov	r2, r3
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	015a      	lsls	r2, r3, #5
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acaa:	461a      	mov	r2, r3
 800acac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800acb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	3301      	adds	r3, #1
 800acb6:	613b      	str	r3, [r7, #16]
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	693a      	ldr	r2, [r7, #16]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d3b7      	bcc.n	800ac30 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acd2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ace0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ace2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d105      	bne.n	800acf4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	699b      	ldr	r3, [r3, #24]
 800acec:	f043 0210 	orr.w	r2, r3, #16
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	699a      	ldr	r2, [r3, #24]
 800acf8:	4b0f      	ldr	r3, [pc, #60]	; (800ad38 <USB_DevInit+0x2c4>)
 800acfa:	4313      	orrs	r3, r2
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ad00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d005      	beq.n	800ad12 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	f043 0208 	orr.w	r2, r3, #8
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ad12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d107      	bne.n	800ad28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad20:	f043 0304 	orr.w	r3, r3, #4
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ad28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3718      	adds	r7, #24
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad34:	b004      	add	sp, #16
 800ad36:	4770      	bx	lr
 800ad38:	803c3800 	.word	0x803c3800

0800ad3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ad46:	2300      	movs	r3, #0
 800ad48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	019b      	lsls	r3, r3, #6
 800ad4e:	f043 0220 	orr.w	r2, r3, #32
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	60fb      	str	r3, [r7, #12]
 800ad5c:	4a08      	ldr	r2, [pc, #32]	; (800ad80 <USB_FlushTxFifo+0x44>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d901      	bls.n	800ad66 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800ad62:	2303      	movs	r3, #3
 800ad64:	e006      	b.n	800ad74 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	f003 0320 	and.w	r3, r3, #32
 800ad6e:	2b20      	cmp	r3, #32
 800ad70:	d0f1      	beq.n	800ad56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	00030d40 	.word	0x00030d40

0800ad84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2210      	movs	r2, #16
 800ad94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	4a08      	ldr	r2, [pc, #32]	; (800adc0 <USB_FlushRxFifo+0x3c>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d901      	bls.n	800ada6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800ada2:	2303      	movs	r3, #3
 800ada4:	e006      	b.n	800adb4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	f003 0310 	and.w	r3, r3, #16
 800adae:	2b10      	cmp	r3, #16
 800adb0:	d0f1      	beq.n	800ad96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr
 800adc0:	00030d40 	.word	0x00030d40

0800adc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	460b      	mov	r3, r1
 800adce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	78fb      	ldrb	r3, [r7, #3]
 800adde:	68f9      	ldr	r1, [r7, #12]
 800ade0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ade4:	4313      	orrs	r3, r2
 800ade6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3714      	adds	r7, #20
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b087      	sub	sp, #28
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	f003 0306 	and.w	r3, r3, #6
 800ae0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d102      	bne.n	800ae1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ae16:	2300      	movs	r3, #0
 800ae18:	75fb      	strb	r3, [r7, #23]
 800ae1a:	e00a      	b.n	800ae32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	d002      	beq.n	800ae28 <USB_GetDevSpeed+0x32>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b06      	cmp	r3, #6
 800ae26:	d102      	bne.n	800ae2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ae28:	2302      	movs	r3, #2
 800ae2a:	75fb      	strb	r3, [r7, #23]
 800ae2c:	e001      	b.n	800ae32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ae2e:	230f      	movs	r3, #15
 800ae30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	371c      	adds	r7, #28
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	785b      	ldrb	r3, [r3, #1]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d13a      	bne.n	800aed2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae62:	69da      	ldr	r2, [r3, #28]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	f003 030f 	and.w	r3, r3, #15
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	68f9      	ldr	r1, [r7, #12]
 800ae76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	015a      	lsls	r2, r3, #5
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	4413      	add	r3, r2
 800ae86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d155      	bne.n	800af40 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	015a      	lsls	r2, r3, #5
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	78db      	ldrb	r3, [r3, #3]
 800aeae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aeb0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	059b      	lsls	r3, r3, #22
 800aeb6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	0151      	lsls	r1, r2, #5
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	440a      	add	r2, r1
 800aec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	e036      	b.n	800af40 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aed8:	69da      	ldr	r2, [r3, #28]
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	f003 030f 	and.w	r3, r3, #15
 800aee2:	2101      	movs	r1, #1
 800aee4:	fa01 f303 	lsl.w	r3, r1, r3
 800aee8:	041b      	lsls	r3, r3, #16
 800aeea:	68f9      	ldr	r1, [r7, #12]
 800aeec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aef0:	4313      	orrs	r3, r2
 800aef2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	015a      	lsls	r2, r3, #5
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	4413      	add	r3, r2
 800aefc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af06:	2b00      	cmp	r3, #0
 800af08:	d11a      	bne.n	800af40 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	015a      	lsls	r2, r3, #5
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	4413      	add	r3, r2
 800af12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	78db      	ldrb	r3, [r3, #3]
 800af24:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af26:	430b      	orrs	r3, r1
 800af28:	4313      	orrs	r3, r2
 800af2a:	68ba      	ldr	r2, [r7, #8]
 800af2c:	0151      	lsls	r1, r2, #5
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	440a      	add	r2, r1
 800af32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af3e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3714      	adds	r7, #20
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
	...

0800af50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	785b      	ldrb	r3, [r3, #1]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d161      	bne.n	800b030 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	015a      	lsls	r2, r3, #5
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	4413      	add	r3, r2
 800af74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af82:	d11f      	bne.n	800afc4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	015a      	lsls	r2, r3, #5
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	4413      	add	r3, r2
 800af8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	0151      	lsls	r1, r2, #5
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	440a      	add	r2, r1
 800af9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800afa2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	015a      	lsls	r2, r3, #5
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	4413      	add	r3, r2
 800afac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	0151      	lsls	r1, r2, #5
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	440a      	add	r2, r1
 800afba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afc2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	f003 030f 	and.w	r3, r3, #15
 800afd4:	2101      	movs	r1, #1
 800afd6:	fa01 f303 	lsl.w	r3, r1, r3
 800afda:	b29b      	uxth	r3, r3
 800afdc:	43db      	mvns	r3, r3
 800afde:	68f9      	ldr	r1, [r7, #12]
 800afe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afe4:	4013      	ands	r3, r2
 800afe6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afee:	69da      	ldr	r2, [r3, #28]
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	f003 030f 	and.w	r3, r3, #15
 800aff8:	2101      	movs	r1, #1
 800affa:	fa01 f303 	lsl.w	r3, r1, r3
 800affe:	b29b      	uxth	r3, r3
 800b000:	43db      	mvns	r3, r3
 800b002:	68f9      	ldr	r1, [r7, #12]
 800b004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b008:	4013      	ands	r3, r2
 800b00a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	015a      	lsls	r2, r3, #5
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	4413      	add	r3, r2
 800b014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	0159      	lsls	r1, r3, #5
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	440b      	add	r3, r1
 800b022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b026:	4619      	mov	r1, r3
 800b028:	4b35      	ldr	r3, [pc, #212]	; (800b100 <USB_DeactivateEndpoint+0x1b0>)
 800b02a:	4013      	ands	r3, r2
 800b02c:	600b      	str	r3, [r1, #0]
 800b02e:	e060      	b.n	800b0f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	015a      	lsls	r2, r3, #5
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	4413      	add	r3, r2
 800b038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b046:	d11f      	bne.n	800b088 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	015a      	lsls	r2, r3, #5
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	4413      	add	r3, r2
 800b050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	68ba      	ldr	r2, [r7, #8]
 800b058:	0151      	lsls	r1, r2, #5
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	440a      	add	r2, r1
 800b05e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b062:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b066:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	015a      	lsls	r2, r3, #5
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4413      	add	r3, r2
 800b070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	0151      	lsls	r1, r2, #5
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	440a      	add	r2, r1
 800b07e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b082:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b086:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b08e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	f003 030f 	and.w	r3, r3, #15
 800b098:	2101      	movs	r1, #1
 800b09a:	fa01 f303 	lsl.w	r3, r1, r3
 800b09e:	041b      	lsls	r3, r3, #16
 800b0a0:	43db      	mvns	r3, r3
 800b0a2:	68f9      	ldr	r1, [r7, #12]
 800b0a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0a8:	4013      	ands	r3, r2
 800b0aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0b2:	69da      	ldr	r2, [r3, #28]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	f003 030f 	and.w	r3, r3, #15
 800b0bc:	2101      	movs	r1, #1
 800b0be:	fa01 f303 	lsl.w	r3, r1, r3
 800b0c2:	041b      	lsls	r3, r3, #16
 800b0c4:	43db      	mvns	r3, r3
 800b0c6:	68f9      	ldr	r1, [r7, #12]
 800b0c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0cc:	4013      	ands	r3, r2
 800b0ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	015a      	lsls	r2, r3, #5
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	0159      	lsls	r1, r3, #5
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	440b      	add	r3, r1
 800b0e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	4b05      	ldr	r3, [pc, #20]	; (800b104 <USB_DeactivateEndpoint+0x1b4>)
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	ec337800 	.word	0xec337800
 800b104:	eff37800 	.word	0xeff37800

0800b108 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08a      	sub	sp, #40	; 0x28
 800b10c:	af02      	add	r7, sp, #8
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	4613      	mov	r3, r2
 800b114:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	785b      	ldrb	r3, [r3, #1]
 800b124:	2b01      	cmp	r3, #1
 800b126:	f040 815c 	bne.w	800b3e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	695b      	ldr	r3, [r3, #20]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d132      	bne.n	800b198 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	015a      	lsls	r2, r3, #5
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	4413      	add	r3, r2
 800b13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b13e:	691b      	ldr	r3, [r3, #16]
 800b140:	69ba      	ldr	r2, [r7, #24]
 800b142:	0151      	lsls	r1, r2, #5
 800b144:	69fa      	ldr	r2, [r7, #28]
 800b146:	440a      	add	r2, r1
 800b148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b14c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b150:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b154:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	015a      	lsls	r2, r3, #5
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	4413      	add	r3, r2
 800b15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b162:	691b      	ldr	r3, [r3, #16]
 800b164:	69ba      	ldr	r2, [r7, #24]
 800b166:	0151      	lsls	r1, r2, #5
 800b168:	69fa      	ldr	r2, [r7, #28]
 800b16a:	440a      	add	r2, r1
 800b16c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b174:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	015a      	lsls	r2, r3, #5
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	69ba      	ldr	r2, [r7, #24]
 800b186:	0151      	lsls	r1, r2, #5
 800b188:	69fa      	ldr	r2, [r7, #28]
 800b18a:	440a      	add	r2, r1
 800b18c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b190:	0cdb      	lsrs	r3, r3, #19
 800b192:	04db      	lsls	r3, r3, #19
 800b194:	6113      	str	r3, [r2, #16]
 800b196:	e074      	b.n	800b282 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	015a      	lsls	r2, r3, #5
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	4413      	add	r3, r2
 800b1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	69ba      	ldr	r2, [r7, #24]
 800b1a8:	0151      	lsls	r1, r2, #5
 800b1aa:	69fa      	ldr	r2, [r7, #28]
 800b1ac:	440a      	add	r2, r1
 800b1ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1b2:	0cdb      	lsrs	r3, r3, #19
 800b1b4:	04db      	lsls	r3, r3, #19
 800b1b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	015a      	lsls	r2, r3, #5
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	69ba      	ldr	r2, [r7, #24]
 800b1c8:	0151      	lsls	r1, r2, #5
 800b1ca:	69fa      	ldr	r2, [r7, #28]
 800b1cc:	440a      	add	r2, r1
 800b1ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b1d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b1da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	015a      	lsls	r2, r3, #5
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	6959      	ldr	r1, [r3, #20]
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	440b      	add	r3, r1
 800b1f4:	1e59      	subs	r1, r3, #1
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800b1fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b200:	4b9d      	ldr	r3, [pc, #628]	; (800b478 <USB_EPStartXfer+0x370>)
 800b202:	400b      	ands	r3, r1
 800b204:	69b9      	ldr	r1, [r7, #24]
 800b206:	0148      	lsls	r0, r1, #5
 800b208:	69f9      	ldr	r1, [r7, #28]
 800b20a:	4401      	add	r1, r0
 800b20c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b210:	4313      	orrs	r3, r2
 800b212:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b214:	69bb      	ldr	r3, [r7, #24]
 800b216:	015a      	lsls	r2, r3, #5
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	4413      	add	r3, r2
 800b21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b220:	691a      	ldr	r2, [r3, #16]
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	695b      	ldr	r3, [r3, #20]
 800b226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b22a:	69b9      	ldr	r1, [r7, #24]
 800b22c:	0148      	lsls	r0, r1, #5
 800b22e:	69f9      	ldr	r1, [r7, #28]
 800b230:	4401      	add	r1, r0
 800b232:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b236:	4313      	orrs	r3, r2
 800b238:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	78db      	ldrb	r3, [r3, #3]
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d11f      	bne.n	800b282 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	015a      	lsls	r2, r3, #5
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	4413      	add	r3, r2
 800b24a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	69ba      	ldr	r2, [r7, #24]
 800b252:	0151      	lsls	r1, r2, #5
 800b254:	69fa      	ldr	r2, [r7, #28]
 800b256:	440a      	add	r2, r1
 800b258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b25c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b260:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	015a      	lsls	r2, r3, #5
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	4413      	add	r3, r2
 800b26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	69ba      	ldr	r2, [r7, #24]
 800b272:	0151      	lsls	r1, r2, #5
 800b274:	69fa      	ldr	r2, [r7, #28]
 800b276:	440a      	add	r2, r1
 800b278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b27c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b280:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b282:	79fb      	ldrb	r3, [r7, #7]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d14b      	bne.n	800b320 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d009      	beq.n	800b2a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	015a      	lsls	r2, r3, #5
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	4413      	add	r3, r2
 800b298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b29c:	461a      	mov	r2, r3
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	78db      	ldrb	r3, [r3, #3]
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d128      	bne.n	800b2fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d110      	bne.n	800b2de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	015a      	lsls	r2, r3, #5
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	69ba      	ldr	r2, [r7, #24]
 800b2cc:	0151      	lsls	r1, r2, #5
 800b2ce:	69fa      	ldr	r2, [r7, #28]
 800b2d0:	440a      	add	r2, r1
 800b2d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2da:	6013      	str	r3, [r2, #0]
 800b2dc:	e00f      	b.n	800b2fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	015a      	lsls	r2, r3, #5
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	69ba      	ldr	r2, [r7, #24]
 800b2ee:	0151      	lsls	r1, r2, #5
 800b2f0:	69fa      	ldr	r2, [r7, #28]
 800b2f2:	440a      	add	r2, r1
 800b2f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	015a      	lsls	r2, r3, #5
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	4413      	add	r3, r2
 800b306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	69ba      	ldr	r2, [r7, #24]
 800b30e:	0151      	lsls	r1, r2, #5
 800b310:	69fa      	ldr	r2, [r7, #28]
 800b312:	440a      	add	r2, r1
 800b314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b318:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b31c:	6013      	str	r3, [r2, #0]
 800b31e:	e12f      	b.n	800b580 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	015a      	lsls	r2, r3, #5
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	4413      	add	r3, r2
 800b328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	69ba      	ldr	r2, [r7, #24]
 800b330:	0151      	lsls	r1, r2, #5
 800b332:	69fa      	ldr	r2, [r7, #28]
 800b334:	440a      	add	r2, r1
 800b336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b33a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b33e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	78db      	ldrb	r3, [r3, #3]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d015      	beq.n	800b374 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	695b      	ldr	r3, [r3, #20]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f000 8117 	beq.w	800b580 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	f003 030f 	and.w	r3, r3, #15
 800b362:	2101      	movs	r1, #1
 800b364:	fa01 f303 	lsl.w	r3, r1, r3
 800b368:	69f9      	ldr	r1, [r7, #28]
 800b36a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b36e:	4313      	orrs	r3, r2
 800b370:	634b      	str	r3, [r1, #52]	; 0x34
 800b372:	e105      	b.n	800b580 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b380:	2b00      	cmp	r3, #0
 800b382:	d110      	bne.n	800b3a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	015a      	lsls	r2, r3, #5
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	4413      	add	r3, r2
 800b38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	69ba      	ldr	r2, [r7, #24]
 800b394:	0151      	lsls	r1, r2, #5
 800b396:	69fa      	ldr	r2, [r7, #28]
 800b398:	440a      	add	r2, r1
 800b39a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b39e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3a2:	6013      	str	r3, [r2, #0]
 800b3a4:	e00f      	b.n	800b3c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	015a      	lsls	r2, r3, #5
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	69ba      	ldr	r2, [r7, #24]
 800b3b6:	0151      	lsls	r1, r2, #5
 800b3b8:	69fa      	ldr	r2, [r7, #28]
 800b3ba:	440a      	add	r2, r1
 800b3bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	68d9      	ldr	r1, [r3, #12]
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	781a      	ldrb	r2, [r3, #0]
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	b298      	uxth	r0, r3
 800b3d4:	79fb      	ldrb	r3, [r7, #7]
 800b3d6:	9300      	str	r3, [sp, #0]
 800b3d8:	4603      	mov	r3, r0
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f000 fa2b 	bl	800b836 <USB_WritePacket>
 800b3e0:	e0ce      	b.n	800b580 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	015a      	lsls	r2, r3, #5
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	69ba      	ldr	r2, [r7, #24]
 800b3f2:	0151      	lsls	r1, r2, #5
 800b3f4:	69fa      	ldr	r2, [r7, #28]
 800b3f6:	440a      	add	r2, r1
 800b3f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3fc:	0cdb      	lsrs	r3, r3, #19
 800b3fe:	04db      	lsls	r3, r3, #19
 800b400:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	015a      	lsls	r2, r3, #5
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	4413      	add	r3, r2
 800b40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	69ba      	ldr	r2, [r7, #24]
 800b412:	0151      	lsls	r1, r2, #5
 800b414:	69fa      	ldr	r2, [r7, #28]
 800b416:	440a      	add	r2, r1
 800b418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b41c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b420:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b424:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	695b      	ldr	r3, [r3, #20]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d126      	bne.n	800b47c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	015a      	lsls	r2, r3, #5
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	4413      	add	r3, r2
 800b436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b43a:	691a      	ldr	r2, [r3, #16]
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b444:	69b9      	ldr	r1, [r7, #24]
 800b446:	0148      	lsls	r0, r1, #5
 800b448:	69f9      	ldr	r1, [r7, #28]
 800b44a:	4401      	add	r1, r0
 800b44c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b450:	4313      	orrs	r3, r2
 800b452:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	015a      	lsls	r2, r3, #5
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	4413      	add	r3, r2
 800b45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b460:	691b      	ldr	r3, [r3, #16]
 800b462:	69ba      	ldr	r2, [r7, #24]
 800b464:	0151      	lsls	r1, r2, #5
 800b466:	69fa      	ldr	r2, [r7, #28]
 800b468:	440a      	add	r2, r1
 800b46a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b46e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b472:	6113      	str	r3, [r2, #16]
 800b474:	e036      	b.n	800b4e4 <USB_EPStartXfer+0x3dc>
 800b476:	bf00      	nop
 800b478:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	695a      	ldr	r2, [r3, #20]
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	4413      	add	r3, r2
 800b486:	1e5a      	subs	r2, r3, #1
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b490:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	015a      	lsls	r2, r3, #5
 800b496:	69fb      	ldr	r3, [r7, #28]
 800b498:	4413      	add	r3, r2
 800b49a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b49e:	691a      	ldr	r2, [r3, #16]
 800b4a0:	8afb      	ldrh	r3, [r7, #22]
 800b4a2:	04d9      	lsls	r1, r3, #19
 800b4a4:	4b39      	ldr	r3, [pc, #228]	; (800b58c <USB_EPStartXfer+0x484>)
 800b4a6:	400b      	ands	r3, r1
 800b4a8:	69b9      	ldr	r1, [r7, #24]
 800b4aa:	0148      	lsls	r0, r1, #5
 800b4ac:	69f9      	ldr	r1, [r7, #28]
 800b4ae:	4401      	add	r1, r0
 800b4b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	015a      	lsls	r2, r3, #5
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	4413      	add	r3, r2
 800b4c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c4:	691a      	ldr	r2, [r3, #16]
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	8af9      	ldrh	r1, [r7, #22]
 800b4cc:	fb01 f303 	mul.w	r3, r1, r3
 800b4d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4d4:	69b9      	ldr	r1, [r7, #24]
 800b4d6:	0148      	lsls	r0, r1, #5
 800b4d8:	69f9      	ldr	r1, [r7, #28]
 800b4da:	4401      	add	r1, r0
 800b4dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b4e4:	79fb      	ldrb	r3, [r7, #7]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d10d      	bne.n	800b506 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d009      	beq.n	800b506 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	68d9      	ldr	r1, [r3, #12]
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	015a      	lsls	r2, r3, #5
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b502:	460a      	mov	r2, r1
 800b504:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	78db      	ldrb	r3, [r3, #3]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d128      	bne.n	800b560 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d110      	bne.n	800b540 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	015a      	lsls	r2, r3, #5
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	4413      	add	r3, r2
 800b526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	69ba      	ldr	r2, [r7, #24]
 800b52e:	0151      	lsls	r1, r2, #5
 800b530:	69fa      	ldr	r2, [r7, #28]
 800b532:	440a      	add	r2, r1
 800b534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b538:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b53c:	6013      	str	r3, [r2, #0]
 800b53e:	e00f      	b.n	800b560 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	015a      	lsls	r2, r3, #5
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	4413      	add	r3, r2
 800b548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	69ba      	ldr	r2, [r7, #24]
 800b550:	0151      	lsls	r1, r2, #5
 800b552:	69fa      	ldr	r2, [r7, #28]
 800b554:	440a      	add	r2, r1
 800b556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b55a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b55e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	015a      	lsls	r2, r3, #5
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	4413      	add	r3, r2
 800b568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	69ba      	ldr	r2, [r7, #24]
 800b570:	0151      	lsls	r1, r2, #5
 800b572:	69fa      	ldr	r2, [r7, #28]
 800b574:	440a      	add	r2, r1
 800b576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b57a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b57e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3720      	adds	r7, #32
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	1ff80000 	.word	0x1ff80000

0800b590 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b590:	b480      	push	{r7}
 800b592:	b087      	sub	sp, #28
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	4613      	mov	r3, r2
 800b59c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	785b      	ldrb	r3, [r3, #1]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	f040 80cd 	bne.w	800b74c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	695b      	ldr	r3, [r3, #20]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d132      	bne.n	800b620 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	015a      	lsls	r2, r3, #5
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	693a      	ldr	r2, [r7, #16]
 800b5ca:	0151      	lsls	r1, r2, #5
 800b5cc:	697a      	ldr	r2, [r7, #20]
 800b5ce:	440a      	add	r2, r1
 800b5d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b5d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b5dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	015a      	lsls	r2, r3, #5
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	0151      	lsls	r1, r2, #5
 800b5f0:	697a      	ldr	r2, [r7, #20]
 800b5f2:	440a      	add	r2, r1
 800b5f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b5fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	015a      	lsls	r2, r3, #5
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	4413      	add	r3, r2
 800b606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	0151      	lsls	r1, r2, #5
 800b610:	697a      	ldr	r2, [r7, #20]
 800b612:	440a      	add	r2, r1
 800b614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b618:	0cdb      	lsrs	r3, r3, #19
 800b61a:	04db      	lsls	r3, r3, #19
 800b61c:	6113      	str	r3, [r2, #16]
 800b61e:	e04e      	b.n	800b6be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	015a      	lsls	r2, r3, #5
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	4413      	add	r3, r2
 800b628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	693a      	ldr	r2, [r7, #16]
 800b630:	0151      	lsls	r1, r2, #5
 800b632:	697a      	ldr	r2, [r7, #20]
 800b634:	440a      	add	r2, r1
 800b636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b63a:	0cdb      	lsrs	r3, r3, #19
 800b63c:	04db      	lsls	r3, r3, #19
 800b63e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	015a      	lsls	r2, r3, #5
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	4413      	add	r3, r2
 800b648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	0151      	lsls	r1, r2, #5
 800b652:	697a      	ldr	r2, [r7, #20]
 800b654:	440a      	add	r2, r1
 800b656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b65a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b65e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b662:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	695a      	ldr	r2, [r3, #20]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d903      	bls.n	800b678 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	689a      	ldr	r2, [r3, #8]
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	015a      	lsls	r2, r3, #5
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	4413      	add	r3, r2
 800b680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	0151      	lsls	r1, r2, #5
 800b68a:	697a      	ldr	r2, [r7, #20]
 800b68c:	440a      	add	r2, r1
 800b68e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b692:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b696:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	015a      	lsls	r2, r3, #5
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	4413      	add	r3, r2
 800b6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a4:	691a      	ldr	r2, [r3, #16]
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	695b      	ldr	r3, [r3, #20]
 800b6aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6ae:	6939      	ldr	r1, [r7, #16]
 800b6b0:	0148      	lsls	r0, r1, #5
 800b6b2:	6979      	ldr	r1, [r7, #20]
 800b6b4:	4401      	add	r1, r0
 800b6b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b6be:	79fb      	ldrb	r3, [r7, #7]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d11e      	bne.n	800b702 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d009      	beq.n	800b6e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	015a      	lsls	r2, r3, #5
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d8:	461a      	mov	r2, r3
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	0151      	lsls	r1, r2, #5
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	440a      	add	r2, r1
 800b6f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b6fe:	6013      	str	r3, [r2, #0]
 800b700:	e092      	b.n	800b828 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	015a      	lsls	r2, r3, #5
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	4413      	add	r3, r2
 800b70a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	0151      	lsls	r1, r2, #5
 800b714:	697a      	ldr	r2, [r7, #20]
 800b716:	440a      	add	r2, r1
 800b718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b71c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b720:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	695b      	ldr	r3, [r3, #20]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d07e      	beq.n	800b828 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	f003 030f 	and.w	r3, r3, #15
 800b73a:	2101      	movs	r1, #1
 800b73c:	fa01 f303 	lsl.w	r3, r1, r3
 800b740:	6979      	ldr	r1, [r7, #20]
 800b742:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b746:	4313      	orrs	r3, r2
 800b748:	634b      	str	r3, [r1, #52]	; 0x34
 800b74a:	e06d      	b.n	800b828 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	015a      	lsls	r2, r3, #5
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	4413      	add	r3, r2
 800b754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	693a      	ldr	r2, [r7, #16]
 800b75c:	0151      	lsls	r1, r2, #5
 800b75e:	697a      	ldr	r2, [r7, #20]
 800b760:	440a      	add	r2, r1
 800b762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b766:	0cdb      	lsrs	r3, r3, #19
 800b768:	04db      	lsls	r3, r3, #19
 800b76a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	015a      	lsls	r2, r3, #5
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	4413      	add	r3, r2
 800b774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	693a      	ldr	r2, [r7, #16]
 800b77c:	0151      	lsls	r1, r2, #5
 800b77e:	697a      	ldr	r2, [r7, #20]
 800b780:	440a      	add	r2, r1
 800b782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b786:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b78a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b78e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	695b      	ldr	r3, [r3, #20]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d003      	beq.n	800b7a0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	689a      	ldr	r2, [r3, #8]
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	015a      	lsls	r2, r3, #5
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	4413      	add	r3, r2
 800b7a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ac:	691b      	ldr	r3, [r3, #16]
 800b7ae:	693a      	ldr	r2, [r7, #16]
 800b7b0:	0151      	lsls	r1, r2, #5
 800b7b2:	697a      	ldr	r2, [r7, #20]
 800b7b4:	440a      	add	r2, r1
 800b7b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	015a      	lsls	r2, r3, #5
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7cc:	691a      	ldr	r2, [r3, #16]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7d6:	6939      	ldr	r1, [r7, #16]
 800b7d8:	0148      	lsls	r0, r1, #5
 800b7da:	6979      	ldr	r1, [r7, #20]
 800b7dc:	4401      	add	r1, r0
 800b7de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b7e6:	79fb      	ldrb	r3, [r7, #7]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d10d      	bne.n	800b808 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d009      	beq.n	800b808 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	68d9      	ldr	r1, [r3, #12]
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	015a      	lsls	r2, r3, #5
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	4413      	add	r3, r2
 800b800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b804:	460a      	mov	r2, r1
 800b806:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	015a      	lsls	r2, r3, #5
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	4413      	add	r3, r2
 800b810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	693a      	ldr	r2, [r7, #16]
 800b818:	0151      	lsls	r1, r2, #5
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	440a      	add	r2, r1
 800b81e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b822:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b826:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	371c      	adds	r7, #28
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b836:	b480      	push	{r7}
 800b838:	b089      	sub	sp, #36	; 0x24
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	60f8      	str	r0, [r7, #12]
 800b83e:	60b9      	str	r1, [r7, #8]
 800b840:	4611      	mov	r1, r2
 800b842:	461a      	mov	r2, r3
 800b844:	460b      	mov	r3, r1
 800b846:	71fb      	strb	r3, [r7, #7]
 800b848:	4613      	mov	r3, r2
 800b84a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b854:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d123      	bne.n	800b8a4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b85c:	88bb      	ldrh	r3, [r7, #4]
 800b85e:	3303      	adds	r3, #3
 800b860:	089b      	lsrs	r3, r3, #2
 800b862:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b864:	2300      	movs	r3, #0
 800b866:	61bb      	str	r3, [r7, #24]
 800b868:	e018      	b.n	800b89c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b86a:	79fb      	ldrb	r3, [r7, #7]
 800b86c:	031a      	lsls	r2, r3, #12
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	4413      	add	r3, r2
 800b872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b876:	461a      	mov	r2, r3
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	3301      	adds	r3, #1
 800b882:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	3301      	adds	r3, #1
 800b888:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	3301      	adds	r3, #1
 800b88e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	3301      	adds	r3, #1
 800b894:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	3301      	adds	r3, #1
 800b89a:	61bb      	str	r3, [r7, #24]
 800b89c:	69ba      	ldr	r2, [r7, #24]
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d3e2      	bcc.n	800b86a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3724      	adds	r7, #36	; 0x24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr

0800b8b2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b8b2:	b480      	push	{r7}
 800b8b4:	b08b      	sub	sp, #44	; 0x2c
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	60f8      	str	r0, [r7, #12]
 800b8ba:	60b9      	str	r1, [r7, #8]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b8c8:	88fb      	ldrh	r3, [r7, #6]
 800b8ca:	089b      	lsrs	r3, r3, #2
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b8d0:	88fb      	ldrh	r3, [r7, #6]
 800b8d2:	f003 0303 	and.w	r3, r3, #3
 800b8d6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b8d8:	2300      	movs	r3, #0
 800b8da:	623b      	str	r3, [r7, #32]
 800b8dc:	e014      	b.n	800b908 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e8:	601a      	str	r2, [r3, #0]
    pDest++;
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fe:	3301      	adds	r3, #1
 800b900:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b902:	6a3b      	ldr	r3, [r7, #32]
 800b904:	3301      	adds	r3, #1
 800b906:	623b      	str	r3, [r7, #32]
 800b908:	6a3a      	ldr	r2, [r7, #32]
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d3e6      	bcc.n	800b8de <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b910:	8bfb      	ldrh	r3, [r7, #30]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d01e      	beq.n	800b954 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b916:	2300      	movs	r3, #0
 800b918:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b920:	461a      	mov	r2, r3
 800b922:	f107 0310 	add.w	r3, r7, #16
 800b926:	6812      	ldr	r2, [r2, #0]
 800b928:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	6a3b      	ldr	r3, [r7, #32]
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	00db      	lsls	r3, r3, #3
 800b932:	fa22 f303 	lsr.w	r3, r2, r3
 800b936:	b2da      	uxtb	r2, r3
 800b938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93a:	701a      	strb	r2, [r3, #0]
      i++;
 800b93c:	6a3b      	ldr	r3, [r7, #32]
 800b93e:	3301      	adds	r3, #1
 800b940:	623b      	str	r3, [r7, #32]
      pDest++;
 800b942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b944:	3301      	adds	r3, #1
 800b946:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b948:	8bfb      	ldrh	r3, [r7, #30]
 800b94a:	3b01      	subs	r3, #1
 800b94c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b94e:	8bfb      	ldrh	r3, [r7, #30]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d1ea      	bne.n	800b92a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b956:	4618      	mov	r0, r3
 800b958:	372c      	adds	r7, #44	; 0x2c
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b962:	b480      	push	{r7}
 800b964:	b085      	sub	sp, #20
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
 800b96a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	785b      	ldrb	r3, [r3, #1]
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d12c      	bne.n	800b9d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	015a      	lsls	r2, r3, #5
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	4413      	add	r3, r2
 800b986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	db12      	blt.n	800b9b6 <USB_EPSetStall+0x54>
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00f      	beq.n	800b9b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	015a      	lsls	r2, r3, #5
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	4413      	add	r3, r2
 800b99e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	0151      	lsls	r1, r2, #5
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	440a      	add	r2, r1
 800b9ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b9b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	015a      	lsls	r2, r3, #5
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	4413      	add	r3, r2
 800b9be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	68ba      	ldr	r2, [r7, #8]
 800b9c6:	0151      	lsls	r1, r2, #5
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	440a      	add	r2, r1
 800b9cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b9d4:	6013      	str	r3, [r2, #0]
 800b9d6:	e02b      	b.n	800ba30 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	015a      	lsls	r2, r3, #5
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	4413      	add	r3, r2
 800b9e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	db12      	blt.n	800ba10 <USB_EPSetStall+0xae>
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00f      	beq.n	800ba10 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	015a      	lsls	r2, r3, #5
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	0151      	lsls	r1, r2, #5
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	440a      	add	r2, r1
 800ba06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba0e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	015a      	lsls	r2, r3, #5
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	4413      	add	r3, r2
 800ba18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	0151      	lsls	r1, r2, #5
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	440a      	add	r2, r1
 800ba26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3714      	adds	r7, #20
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr

0800ba3e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b085      	sub	sp, #20
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	785b      	ldrb	r3, [r3, #1]
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d128      	bne.n	800baac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	015a      	lsls	r2, r3, #5
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	4413      	add	r3, r2
 800ba62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	0151      	lsls	r1, r2, #5
 800ba6c:	68fa      	ldr	r2, [r7, #12]
 800ba6e:	440a      	add	r2, r1
 800ba70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	78db      	ldrb	r3, [r3, #3]
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	d003      	beq.n	800ba8a <USB_EPClearStall+0x4c>
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	78db      	ldrb	r3, [r3, #3]
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	d138      	bne.n	800bafc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	015a      	lsls	r2, r3, #5
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	4413      	add	r3, r2
 800ba92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	0151      	lsls	r1, r2, #5
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	440a      	add	r2, r1
 800baa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800baa8:	6013      	str	r3, [r2, #0]
 800baaa:	e027      	b.n	800bafc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	015a      	lsls	r2, r3, #5
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	4413      	add	r3, r2
 800bab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	0151      	lsls	r1, r2, #5
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	440a      	add	r2, r1
 800bac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bac6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800baca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	78db      	ldrb	r3, [r3, #3]
 800bad0:	2b03      	cmp	r3, #3
 800bad2:	d003      	beq.n	800badc <USB_EPClearStall+0x9e>
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	78db      	ldrb	r3, [r3, #3]
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d10f      	bne.n	800bafc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	015a      	lsls	r2, r3, #5
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	4413      	add	r3, r2
 800bae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	0151      	lsls	r1, r2, #5
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	440a      	add	r2, r1
 800baf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bafa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3714      	adds	r7, #20
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr

0800bb0a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	b085      	sub	sp, #20
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	460b      	mov	r3, r1
 800bb14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bb2c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	78fb      	ldrb	r3, [r7, #3]
 800bb38:	011b      	lsls	r3, r3, #4
 800bb3a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bb3e:	68f9      	ldr	r1, [r7, #12]
 800bb40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb44:	4313      	orrs	r3, r2
 800bb46:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bb48:	2300      	movs	r3, #0
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3714      	adds	r7, #20
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr

0800bb56 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bb56:	b480      	push	{r7}
 800bb58:	b085      	sub	sp, #20
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb70:	f023 0303 	bic.w	r3, r3, #3
 800bb74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb84:	f023 0302 	bic.w	r3, r3, #2
 800bb88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3714      	adds	r7, #20
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bbb2:	f023 0303 	bic.w	r3, r3, #3
 800bbb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbc6:	f043 0302 	orr.w	r3, r3, #2
 800bbca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3714      	adds	r7, #20
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bbda:	b480      	push	{r7}
 800bbdc:	b085      	sub	sp, #20
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	699b      	ldr	r3, [r3, #24]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	4013      	ands	r3, r2
 800bbf0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc1c:	69db      	ldr	r3, [r3, #28]
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	4013      	ands	r3, r2
 800bc22:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	0c1b      	lsrs	r3, r3, #16
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc46:	699b      	ldr	r3, [r3, #24]
 800bc48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc50:	69db      	ldr	r3, [r3, #28]
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	4013      	ands	r3, r2
 800bc56:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	b29b      	uxth	r3, r3
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3714      	adds	r7, #20
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	460b      	mov	r3, r1
 800bc72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bc78:	78fb      	ldrb	r3, [r7, #3]
 800bc7a:	015a      	lsls	r2, r3, #5
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	4413      	add	r3, r2
 800bc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc8e:	695b      	ldr	r3, [r3, #20]
 800bc90:	68ba      	ldr	r2, [r7, #8]
 800bc92:	4013      	ands	r3, r2
 800bc94:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bc96:	68bb      	ldr	r3, [r7, #8]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b087      	sub	sp, #28
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	460b      	mov	r3, r1
 800bcae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bcc8:	78fb      	ldrb	r3, [r7, #3]
 800bcca:	f003 030f 	and.w	r3, r3, #15
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	fa22 f303 	lsr.w	r3, r2, r3
 800bcd4:	01db      	lsls	r3, r3, #7
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	693a      	ldr	r2, [r7, #16]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bcde:	78fb      	ldrb	r3, [r7, #3]
 800bce0:	015a      	lsls	r2, r3, #5
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	4413      	add	r3, r2
 800bce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	693a      	ldr	r2, [r7, #16]
 800bcee:	4013      	ands	r3, r2
 800bcf0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bcf2:	68bb      	ldr	r3, [r7, #8]
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	371c      	adds	r7, #28
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	695b      	ldr	r3, [r3, #20]
 800bd0c:	f003 0301 	and.w	r3, r3, #1
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd36:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bd3a:	f023 0307 	bic.w	r3, r3, #7
 800bd3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	68fa      	ldr	r2, [r7, #12]
 800bd4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3714      	adds	r7, #20
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
	...

0800bd64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b087      	sub	sp, #28
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	607a      	str	r2, [r7, #4]
 800bd70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	333c      	adds	r3, #60	; 0x3c
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	4a26      	ldr	r2, [pc, #152]	; (800be1c <USB_EP0_OutStart+0xb8>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d90a      	bls.n	800bd9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd98:	d101      	bne.n	800bd9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	e037      	b.n	800be0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda4:	461a      	mov	r2, r3
 800bda6:	2300      	movs	r3, #0
 800bda8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	697a      	ldr	r2, [r7, #20]
 800bdb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bdbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc4:	691b      	ldr	r3, [r3, #16]
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdcc:	f043 0318 	orr.w	r3, r3, #24
 800bdd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdd8:	691b      	ldr	r3, [r3, #16]
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bde0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bde4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bde6:	7afb      	ldrb	r3, [r7, #11]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d10f      	bne.n	800be0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	697a      	ldr	r2, [r7, #20]
 800be02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800be0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	371c      	adds	r7, #28
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	4f54300a 	.word	0x4f54300a

0800be20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be20:	b480      	push	{r7}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be28:	2300      	movs	r3, #0
 800be2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	3301      	adds	r3, #1
 800be30:	60fb      	str	r3, [r7, #12]
 800be32:	4a13      	ldr	r2, [pc, #76]	; (800be80 <USB_CoreReset+0x60>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d901      	bls.n	800be3c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800be38:	2303      	movs	r3, #3
 800be3a:	e01a      	b.n	800be72 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	2b00      	cmp	r3, #0
 800be42:	daf3      	bge.n	800be2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be44:	2300      	movs	r3, #0
 800be46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	691b      	ldr	r3, [r3, #16]
 800be4c:	f043 0201 	orr.w	r2, r3, #1
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	3301      	adds	r3, #1
 800be58:	60fb      	str	r3, [r7, #12]
 800be5a:	4a09      	ldr	r2, [pc, #36]	; (800be80 <USB_CoreReset+0x60>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d901      	bls.n	800be64 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800be60:	2303      	movs	r3, #3
 800be62:	e006      	b.n	800be72 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	f003 0301 	and.w	r3, r3, #1
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d0f1      	beq.n	800be54 <USB_CoreReset+0x34>

  return HAL_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3714      	adds	r7, #20
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	00030d40 	.word	0x00030d40

0800be84 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f103 0208 	add.w	r2, r3, #8
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f04f 32ff 	mov.w	r2, #4294967295
 800be9c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f103 0208 	add.w	r2, r3, #8
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f103 0208 	add.w	r2, r3, #8
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800beb8:	bf00      	nop
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bed2:	bf00      	nop
 800bed4:	370c      	adds	r7, #12
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr

0800bede <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800bede:	b480      	push	{r7}
 800bee0:	b085      	sub	sp, #20
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
 800bee6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef4:	d103      	bne.n	800befe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	60fb      	str	r3, [r7, #12]
 800befc:	e00c      	b.n	800bf18 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	3308      	adds	r3, #8
 800bf02:	60fb      	str	r3, [r7, #12]
 800bf04:	e002      	b.n	800bf0c <vListInsert+0x2e>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	60fb      	str	r3, [r7, #12]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	68ba      	ldr	r2, [r7, #8]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d2f6      	bcs.n	800bf06 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	685a      	ldr	r2, [r3, #4]
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	683a      	ldr	r2, [r7, #0]
 800bf26:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	683a      	ldr	r2, [r7, #0]
 800bf32:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	1c5a      	adds	r2, r3, #1
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	601a      	str	r2, [r3, #0]
}
 800bf44:	bf00      	nop
 800bf46:	3714      	adds	r7, #20
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	691b      	ldr	r3, [r3, #16]
 800bf5c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	6892      	ldr	r2, [r2, #8]
 800bf66:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	6852      	ldr	r2, [r2, #4]
 800bf70:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d103      	bne.n	800bf84 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	689a      	ldr	r2, [r3, #8]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	1e5a      	subs	r2, r3, #1
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3714      	adds	r7, #20
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10a      	bne.n	800bfd2 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800bfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc0:	f383 8811 	msr	BASEPRI, r3
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800bfce:	bf00      	nop
 800bfd0:	e7fe      	b.n	800bfd0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d05d      	beq.n	800c094 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d059      	beq.n	800c094 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe8:	2100      	movs	r1, #0
 800bfea:	fba3 2302 	umull	r2, r3, r3, r2
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d000      	beq.n	800bff4 <xQueueGenericReset+0x50>
 800bff2:	2101      	movs	r1, #1
 800bff4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d14c      	bne.n	800c094 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800bffa:	f001 fe1d 	bl	800dc38 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c006:	6939      	ldr	r1, [r7, #16]
 800c008:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c00a:	fb01 f303 	mul.w	r3, r1, r3
 800c00e:	441a      	add	r2, r3
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	2200      	movs	r2, #0
 800c018:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c02a:	3b01      	subs	r3, #1
 800c02c:	6939      	ldr	r1, [r7, #16]
 800c02e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c030:	fb01 f303 	mul.w	r3, r1, r3
 800c034:	441a      	add	r2, r3
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	22ff      	movs	r2, #255	; 0xff
 800c03e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	22ff      	movs	r2, #255	; 0xff
 800c046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d114      	bne.n	800c07a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	691b      	ldr	r3, [r3, #16]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d01a      	beq.n	800c08e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	3310      	adds	r3, #16
 800c05c:	4618      	mov	r0, r3
 800c05e:	f000 ff8b 	bl	800cf78 <xTaskRemoveFromEventList>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d012      	beq.n	800c08e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c068:	4b15      	ldr	r3, [pc, #84]	; (800c0c0 <xQueueGenericReset+0x11c>)
 800c06a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c06e:	601a      	str	r2, [r3, #0]
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	f3bf 8f6f 	isb	sy
 800c078:	e009      	b.n	800c08e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	3310      	adds	r3, #16
 800c07e:	4618      	mov	r0, r3
 800c080:	f7ff ff00 	bl	800be84 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	3324      	adds	r3, #36	; 0x24
 800c088:	4618      	mov	r0, r3
 800c08a:	f7ff fefb 	bl	800be84 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800c08e:	f001 fe03 	bl	800dc98 <vPortExitCritical>
 800c092:	e001      	b.n	800c098 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800c094:	2300      	movs	r3, #0
 800c096:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d10a      	bne.n	800c0b4 <xQueueGenericReset+0x110>
        __asm volatile
 800c09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	60bb      	str	r3, [r7, #8]
    }
 800c0b0:	bf00      	nop
 800c0b2:	e7fe      	b.n	800c0b2 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800c0b4:	697b      	ldr	r3, [r7, #20]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3718      	adds	r7, #24
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	e000ed04 	.word	0xe000ed04

0800c0c4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b08a      	sub	sp, #40	; 0x28
 800c0c8:	af02      	add	r7, sp, #8
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d02e      	beq.n	800c13a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c0dc:	2100      	movs	r1, #0
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	fba3 2302 	umull	r2, r3, r3, r2
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d000      	beq.n	800c0ec <xQueueGenericCreate+0x28>
 800c0ea:	2101      	movs	r1, #1
 800c0ec:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d123      	bne.n	800c13a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	68ba      	ldr	r2, [r7, #8]
 800c0f6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c0fa:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800c0fe:	d81c      	bhi.n	800c13a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	fb02 f303 	mul.w	r3, r2, r3
 800c108:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	3350      	adds	r3, #80	; 0x50
 800c10e:	4618      	mov	r0, r3
 800c110:	f001 fe74 	bl	800ddfc <pvPortMalloc>
 800c114:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d01c      	beq.n	800c156 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	3350      	adds	r3, #80	; 0x50
 800c124:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c126:	79fa      	ldrb	r2, [r7, #7]
 800c128:	69fb      	ldr	r3, [r7, #28]
 800c12a:	9300      	str	r3, [sp, #0]
 800c12c:	4613      	mov	r3, r2
 800c12e:	697a      	ldr	r2, [r7, #20]
 800c130:	68b9      	ldr	r1, [r7, #8]
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f000 f814 	bl	800c160 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800c138:	e00d      	b.n	800c156 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10a      	bne.n	800c156 <xQueueGenericCreate+0x92>
        __asm volatile
 800c140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	613b      	str	r3, [r7, #16]
    }
 800c152:	bf00      	nop
 800c154:	e7fe      	b.n	800c154 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c156:	69fb      	ldr	r3, [r7, #28]
    }
 800c158:	4618      	mov	r0, r3
 800c15a:	3720      	adds	r7, #32
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
 800c16c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d103      	bne.n	800c17c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	69ba      	ldr	r2, [r7, #24]
 800c178:	601a      	str	r2, [r3, #0]
 800c17a:	e002      	b.n	800c182 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	68fa      	ldr	r2, [r7, #12]
 800c186:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c18e:	2101      	movs	r1, #1
 800c190:	69b8      	ldr	r0, [r7, #24]
 800c192:	f7ff ff07 	bl	800bfa4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	78fa      	ldrb	r2, [r7, #3]
 800c19a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800c19e:	bf00      	nop
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
	...

0800c1a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b08c      	sub	sp, #48	; 0x30
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800c1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d10a      	bne.n	800c1d8 <xQueueReceive+0x30>
        __asm volatile
 800c1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c6:	f383 8811 	msr	BASEPRI, r3
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	623b      	str	r3, [r7, #32]
    }
 800c1d4:	bf00      	nop
 800c1d6:	e7fe      	b.n	800c1d6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d103      	bne.n	800c1e6 <xQueueReceive+0x3e>
 800c1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d101      	bne.n	800c1ea <xQueueReceive+0x42>
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e000      	b.n	800c1ec <xQueueReceive+0x44>
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d10a      	bne.n	800c206 <xQueueReceive+0x5e>
        __asm volatile
 800c1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f4:	f383 8811 	msr	BASEPRI, r3
 800c1f8:	f3bf 8f6f 	isb	sy
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	61fb      	str	r3, [r7, #28]
    }
 800c202:	bf00      	nop
 800c204:	e7fe      	b.n	800c204 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c206:	f001 f8c7 	bl	800d398 <xTaskGetSchedulerState>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d102      	bne.n	800c216 <xQueueReceive+0x6e>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d101      	bne.n	800c21a <xQueueReceive+0x72>
 800c216:	2301      	movs	r3, #1
 800c218:	e000      	b.n	800c21c <xQueueReceive+0x74>
 800c21a:	2300      	movs	r3, #0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10a      	bne.n	800c236 <xQueueReceive+0x8e>
        __asm volatile
 800c220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	61bb      	str	r3, [r7, #24]
    }
 800c232:	bf00      	nop
 800c234:	e7fe      	b.n	800c234 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c236:	f001 fcff 	bl	800dc38 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c23e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c242:	2b00      	cmp	r3, #0
 800c244:	d01f      	beq.n	800c286 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c246:	68b9      	ldr	r1, [r7, #8]
 800c248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c24a:	f000 f88d 	bl	800c368 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c250:	1e5a      	subs	r2, r3, #1
 800c252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c254:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00f      	beq.n	800c27e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c260:	3310      	adds	r3, #16
 800c262:	4618      	mov	r0, r3
 800c264:	f000 fe88 	bl	800cf78 <xTaskRemoveFromEventList>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d007      	beq.n	800c27e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c26e:	4b3d      	ldr	r3, [pc, #244]	; (800c364 <xQueueReceive+0x1bc>)
 800c270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c274:	601a      	str	r2, [r3, #0]
 800c276:	f3bf 8f4f 	dsb	sy
 800c27a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800c27e:	f001 fd0b 	bl	800dc98 <vPortExitCritical>
                return pdPASS;
 800c282:	2301      	movs	r3, #1
 800c284:	e069      	b.n	800c35a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d103      	bne.n	800c294 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c28c:	f001 fd04 	bl	800dc98 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800c290:	2300      	movs	r3, #0
 800c292:	e062      	b.n	800c35a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c296:	2b00      	cmp	r3, #0
 800c298:	d106      	bne.n	800c2a8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c29a:	f107 0310 	add.w	r3, r7, #16
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 ff40 	bl	800d124 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c2a8:	f001 fcf6 	bl	800dc98 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c2ac:	f000 fb6e 	bl	800c98c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c2b0:	f001 fcc2 	bl	800dc38 <vPortEnterCritical>
 800c2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2ba:	b25b      	sxtb	r3, r3
 800c2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c0:	d103      	bne.n	800c2ca <xQueueReceive+0x122>
 800c2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2d0:	b25b      	sxtb	r3, r3
 800c2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d6:	d103      	bne.n	800c2e0 <xQueueReceive+0x138>
 800c2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2e0:	f001 fcda 	bl	800dc98 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2e4:	1d3a      	adds	r2, r7, #4
 800c2e6:	f107 0310 	add.w	r3, r7, #16
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 ff2f 	bl	800d150 <xTaskCheckForTimeOut>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d123      	bne.n	800c340 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2fa:	f000 f8ad 	bl	800c458 <prvIsQueueEmpty>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	d017      	beq.n	800c334 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c306:	3324      	adds	r3, #36	; 0x24
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	4611      	mov	r1, r2
 800c30c:	4618      	mov	r0, r3
 800c30e:	f000 fdc9 	bl	800cea4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800c312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c314:	f000 f84e 	bl	800c3b4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800c318:	f000 fb46 	bl	800c9a8 <xTaskResumeAll>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d189      	bne.n	800c236 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800c322:	4b10      	ldr	r3, [pc, #64]	; (800c364 <xQueueReceive+0x1bc>)
 800c324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c328:	601a      	str	r2, [r3, #0]
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	e780      	b.n	800c236 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800c334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c336:	f000 f83d 	bl	800c3b4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c33a:	f000 fb35 	bl	800c9a8 <xTaskResumeAll>
 800c33e:	e77a      	b.n	800c236 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800c340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c342:	f000 f837 	bl	800c3b4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c346:	f000 fb2f 	bl	800c9a8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c34a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c34c:	f000 f884 	bl	800c458 <prvIsQueueEmpty>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	f43f af6f 	beq.w	800c236 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800c358:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3730      	adds	r7, #48	; 0x30
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	e000ed04 	.word	0xe000ed04

0800c368 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c376:	2b00      	cmp	r3, #0
 800c378:	d018      	beq.n	800c3ac <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	68da      	ldr	r2, [r3, #12]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c382:	441a      	add	r2, r3
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	68da      	ldr	r2, [r3, #12]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	429a      	cmp	r2, r3
 800c392:	d303      	bcc.n	800c39c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	68d9      	ldr	r1, [r3, #12]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	6838      	ldr	r0, [r7, #0]
 800c3a8:	f004 f8fe 	bl	80105a8 <memcpy>
    }
}
 800c3ac:	bf00      	nop
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800c3bc:	f001 fc3c 	bl	800dc38 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3c6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3c8:	e011      	b.n	800c3ee <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d012      	beq.n	800c3f8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	3324      	adds	r3, #36	; 0x24
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f000 fdce 	bl	800cf78 <xTaskRemoveFromEventList>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d001      	beq.n	800c3e6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800c3e2:	f000 ff1b 	bl	800d21c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800c3e6:	7bfb      	ldrb	r3, [r7, #15]
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	dce9      	bgt.n	800c3ca <prvUnlockQueue+0x16>
 800c3f6:	e000      	b.n	800c3fa <prvUnlockQueue+0x46>
                        break;
 800c3f8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	22ff      	movs	r2, #255	; 0xff
 800c3fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800c402:	f001 fc49 	bl	800dc98 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800c406:	f001 fc17 	bl	800dc38 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c410:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800c412:	e011      	b.n	800c438 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	691b      	ldr	r3, [r3, #16]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d012      	beq.n	800c442 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	3310      	adds	r3, #16
 800c420:	4618      	mov	r0, r3
 800c422:	f000 fda9 	bl	800cf78 <xTaskRemoveFromEventList>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d001      	beq.n	800c430 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800c42c:	f000 fef6 	bl	800d21c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800c430:	7bbb      	ldrb	r3, [r7, #14]
 800c432:	3b01      	subs	r3, #1
 800c434:	b2db      	uxtb	r3, r3
 800c436:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800c438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	dce9      	bgt.n	800c414 <prvUnlockQueue+0x60>
 800c440:	e000      	b.n	800c444 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800c442:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	22ff      	movs	r2, #255	; 0xff
 800c448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800c44c:	f001 fc24 	bl	800dc98 <vPortExitCritical>
}
 800c450:	bf00      	nop
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800c460:	f001 fbea 	bl	800dc38 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d102      	bne.n	800c472 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800c46c:	2301      	movs	r3, #1
 800c46e:	60fb      	str	r3, [r7, #12]
 800c470:	e001      	b.n	800c476 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800c472:	2300      	movs	r3, #0
 800c474:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800c476:	f001 fc0f 	bl	800dc98 <vPortExitCritical>

    return xReturn;
 800c47a:	68fb      	ldr	r3, [r7, #12]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3710      	adds	r7, #16
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800c484:	b480      	push	{r7}
 800c486:	b087      	sub	sp, #28
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10a      	bne.n	800c4aa <vQueueAddToRegistry+0x26>
        __asm volatile
 800c494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	60fb      	str	r3, [r7, #12]
    }
 800c4a6:	bf00      	nop
 800c4a8:	e7fe      	b.n	800c4a8 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d024      	beq.n	800c4fe <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	617b      	str	r3, [r7, #20]
 800c4b8:	e01e      	b.n	800c4f8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800c4ba:	4a18      	ldr	r2, [pc, #96]	; (800c51c <vQueueAddToRegistry+0x98>)
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	00db      	lsls	r3, r3, #3
 800c4c0:	4413      	add	r3, r2
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d105      	bne.n	800c4d6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	00db      	lsls	r3, r3, #3
 800c4ce:	4a13      	ldr	r2, [pc, #76]	; (800c51c <vQueueAddToRegistry+0x98>)
 800c4d0:	4413      	add	r3, r2
 800c4d2:	613b      	str	r3, [r7, #16]
                    break;
 800c4d4:	e013      	b.n	800c4fe <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10a      	bne.n	800c4f2 <vQueueAddToRegistry+0x6e>
 800c4dc:	4a0f      	ldr	r2, [pc, #60]	; (800c51c <vQueueAddToRegistry+0x98>)
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d104      	bne.n	800c4f2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	00db      	lsls	r3, r3, #3
 800c4ec:	4a0b      	ldr	r2, [pc, #44]	; (800c51c <vQueueAddToRegistry+0x98>)
 800c4ee:	4413      	add	r3, r2
 800c4f0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	617b      	str	r3, [r7, #20]
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	2b07      	cmp	r3, #7
 800c4fc:	d9dd      	bls.n	800c4ba <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d005      	beq.n	800c510 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800c510:	bf00      	nop
 800c512:	371c      	adds	r7, #28
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr
 800c51c:	20013d6c 	.word	0x20013d6c

0800c520 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800c530:	f001 fb82 	bl	800dc38 <vPortEnterCritical>
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c53a:	b25b      	sxtb	r3, r3
 800c53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c540:	d103      	bne.n	800c54a <vQueueWaitForMessageRestricted+0x2a>
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	2200      	movs	r2, #0
 800c546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c550:	b25b      	sxtb	r3, r3
 800c552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c556:	d103      	bne.n	800c560 <vQueueWaitForMessageRestricted+0x40>
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c560:	f001 fb9a 	bl	800dc98 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d106      	bne.n	800c57a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	3324      	adds	r3, #36	; 0x24
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	68b9      	ldr	r1, [r7, #8]
 800c574:	4618      	mov	r0, r3
 800c576:	f000 fcb9 	bl	800ceec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800c57a:	6978      	ldr	r0, [r7, #20]
 800c57c:	f7ff ff1a 	bl	800c3b4 <prvUnlockQueue>
    }
 800c580:	bf00      	nop
 800c582:	3718      	adds	r7, #24
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800c588:	b580      	push	{r7, lr}
 800c58a:	b08c      	sub	sp, #48	; 0x30
 800c58c:	af04      	add	r7, sp, #16
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	603b      	str	r3, [r7, #0]
 800c594:	4613      	mov	r3, r2
 800c596:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c598:	88fb      	ldrh	r3, [r7, #6]
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	4618      	mov	r0, r3
 800c59e:	f001 fc2d 	bl	800ddfc <pvPortMalloc>
 800c5a2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00e      	beq.n	800c5c8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c5aa:	2058      	movs	r0, #88	; 0x58
 800c5ac:	f001 fc26 	bl	800ddfc <pvPortMalloc>
 800c5b0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d003      	beq.n	800c5c0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	697a      	ldr	r2, [r7, #20]
 800c5bc:	631a      	str	r2, [r3, #48]	; 0x30
 800c5be:	e005      	b.n	800c5cc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800c5c0:	6978      	ldr	r0, [r7, #20]
 800c5c2:	f001 fcfb 	bl	800dfbc <vPortFree>
 800c5c6:	e001      	b.n	800c5cc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d013      	beq.n	800c5fa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c5d2:	88fa      	ldrh	r2, [r7, #6]
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	9303      	str	r3, [sp, #12]
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	9302      	str	r3, [sp, #8]
 800c5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5de:	9301      	str	r3, [sp, #4]
 800c5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e2:	9300      	str	r3, [sp, #0]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	68b9      	ldr	r1, [r7, #8]
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f000 f80e 	bl	800c60a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800c5ee:	69f8      	ldr	r0, [r7, #28]
 800c5f0:	f000 f8b0 	bl	800c754 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	61bb      	str	r3, [r7, #24]
 800c5f8:	e002      	b.n	800c600 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c5fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c5fe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800c600:	69bb      	ldr	r3, [r7, #24]
    }
 800c602:	4618      	mov	r0, r3
 800c604:	3720      	adds	r7, #32
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b088      	sub	sp, #32
 800c60e:	af00      	add	r7, sp, #0
 800c610:	60f8      	str	r0, [r7, #12]
 800c612:	60b9      	str	r1, [r7, #8]
 800c614:	607a      	str	r2, [r7, #4]
 800c616:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	461a      	mov	r2, r3
 800c622:	21a5      	movs	r1, #165	; 0xa5
 800c624:	f003 ffce 	bl	80105c4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c632:	3b01      	subs	r3, #1
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4413      	add	r3, r2
 800c638:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	f023 0307 	bic.w	r3, r3, #7
 800c640:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	f003 0307 	and.w	r3, r3, #7
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00a      	beq.n	800c662 <prvInitialiseNewTask+0x58>
        __asm volatile
 800c64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c650:	f383 8811 	msr	BASEPRI, r3
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	f3bf 8f4f 	dsb	sy
 800c65c:	617b      	str	r3, [r7, #20]
    }
 800c65e:	bf00      	nop
 800c660:	e7fe      	b.n	800c660 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d01f      	beq.n	800c6a8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c668:	2300      	movs	r3, #0
 800c66a:	61fb      	str	r3, [r7, #28]
 800c66c:	e012      	b.n	800c694 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c66e:	68ba      	ldr	r2, [r7, #8]
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	4413      	add	r3, r2
 800c674:	7819      	ldrb	r1, [r3, #0]
 800c676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	4413      	add	r3, r2
 800c67c:	3334      	adds	r3, #52	; 0x34
 800c67e:	460a      	mov	r2, r1
 800c680:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800c682:	68ba      	ldr	r2, [r7, #8]
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	4413      	add	r3, r2
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d006      	beq.n	800c69c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	3301      	adds	r3, #1
 800c692:	61fb      	str	r3, [r7, #28]
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	2b09      	cmp	r3, #9
 800c698:	d9e9      	bls.n	800c66e <prvInitialiseNewTask+0x64>
 800c69a:	e000      	b.n	800c69e <prvInitialiseNewTask+0x94>
            {
                break;
 800c69c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c6a6:	e003      	b.n	800c6b0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800c6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b2:	2b04      	cmp	r3, #4
 800c6b4:	d90a      	bls.n	800c6cc <prvInitialiseNewTask+0xc2>
        __asm volatile
 800c6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	613b      	str	r3, [r7, #16]
    }
 800c6c8:	bf00      	nop
 800c6ca:	e7fe      	b.n	800c6ca <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ce:	2b04      	cmp	r3, #4
 800c6d0:	d901      	bls.n	800c6d6 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c6d2:	2304      	movs	r3, #4
 800c6d4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800c6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6da:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800c6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6e0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ea:	3304      	adds	r3, #4
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7ff fbe9 	bl	800bec4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f4:	3318      	adds	r3, #24
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7ff fbe4 	bl	800bec4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c700:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c704:	f1c3 0205 	rsb	r2, r3, #5
 800c708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c710:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800c712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c714:	3350      	adds	r3, #80	; 0x50
 800c716:	2204      	movs	r2, #4
 800c718:	2100      	movs	r1, #0
 800c71a:	4618      	mov	r0, r3
 800c71c:	f003 ff52 	bl	80105c4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800c720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c722:	3354      	adds	r3, #84	; 0x54
 800c724:	2201      	movs	r2, #1
 800c726:	2100      	movs	r1, #0
 800c728:	4618      	mov	r0, r3
 800c72a:	f003 ff4b 	bl	80105c4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	68f9      	ldr	r1, [r7, #12]
 800c732:	69b8      	ldr	r0, [r7, #24]
 800c734:	f001 f952 	bl	800d9dc <pxPortInitialiseStack>
 800c738:	4602      	mov	r2, r0
 800c73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800c73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c740:	2b00      	cmp	r3, #0
 800c742:	d002      	beq.n	800c74a <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c748:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800c74a:	bf00      	nop
 800c74c:	3720      	adds	r7, #32
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
	...

0800c754 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800c75c:	f001 fa6c 	bl	800dc38 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800c760:	4b40      	ldr	r3, [pc, #256]	; (800c864 <prvAddNewTaskToReadyList+0x110>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	3301      	adds	r3, #1
 800c766:	4a3f      	ldr	r2, [pc, #252]	; (800c864 <prvAddNewTaskToReadyList+0x110>)
 800c768:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800c76a:	4b3f      	ldr	r3, [pc, #252]	; (800c868 <prvAddNewTaskToReadyList+0x114>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d109      	bne.n	800c786 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800c772:	4a3d      	ldr	r2, [pc, #244]	; (800c868 <prvAddNewTaskToReadyList+0x114>)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c778:	4b3a      	ldr	r3, [pc, #232]	; (800c864 <prvAddNewTaskToReadyList+0x110>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d110      	bne.n	800c7a2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800c780:	f000 fd70 	bl	800d264 <prvInitialiseTaskLists>
 800c784:	e00d      	b.n	800c7a2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800c786:	4b39      	ldr	r3, [pc, #228]	; (800c86c <prvAddNewTaskToReadyList+0x118>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d109      	bne.n	800c7a2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c78e:	4b36      	ldr	r3, [pc, #216]	; (800c868 <prvAddNewTaskToReadyList+0x114>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c798:	429a      	cmp	r2, r3
 800c79a:	d802      	bhi.n	800c7a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800c79c:	4a32      	ldr	r2, [pc, #200]	; (800c868 <prvAddNewTaskToReadyList+0x114>)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800c7a2:	4b33      	ldr	r3, [pc, #204]	; (800c870 <prvAddNewTaskToReadyList+0x11c>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	4a31      	ldr	r2, [pc, #196]	; (800c870 <prvAddNewTaskToReadyList+0x11c>)
 800c7aa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c7ac:	4b30      	ldr	r3, [pc, #192]	; (800c870 <prvAddNewTaskToReadyList+0x11c>)
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	409a      	lsls	r2, r3
 800c7bc:	4b2d      	ldr	r3, [pc, #180]	; (800c874 <prvAddNewTaskToReadyList+0x120>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	4a2c      	ldr	r2, [pc, #176]	; (800c874 <prvAddNewTaskToReadyList+0x120>)
 800c7c4:	6013      	str	r3, [r2, #0]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ca:	492b      	ldr	r1, [pc, #172]	; (800c878 <prvAddNewTaskToReadyList+0x124>)
 800c7cc:	4613      	mov	r3, r2
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4413      	add	r3, r2
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	440b      	add	r3, r1
 800c7d6:	3304      	adds	r3, #4
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	60fb      	str	r3, [r7, #12]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	609a      	str	r2, [r3, #8]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	689a      	ldr	r2, [r3, #8]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	60da      	str	r2, [r3, #12]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	3204      	adds	r2, #4
 800c7f2:	605a      	str	r2, [r3, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	1d1a      	adds	r2, r3, #4
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	609a      	str	r2, [r3, #8]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c800:	4613      	mov	r3, r2
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	4413      	add	r3, r2
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	4a1b      	ldr	r2, [pc, #108]	; (800c878 <prvAddNewTaskToReadyList+0x124>)
 800c80a:	441a      	add	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	615a      	str	r2, [r3, #20]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c814:	4918      	ldr	r1, [pc, #96]	; (800c878 <prvAddNewTaskToReadyList+0x124>)
 800c816:	4613      	mov	r3, r2
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	4413      	add	r3, r2
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	440b      	add	r3, r1
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	1c59      	adds	r1, r3, #1
 800c824:	4814      	ldr	r0, [pc, #80]	; (800c878 <prvAddNewTaskToReadyList+0x124>)
 800c826:	4613      	mov	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	4413      	add	r3, r2
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	4403      	add	r3, r0
 800c830:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800c832:	f001 fa31 	bl	800dc98 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800c836:	4b0d      	ldr	r3, [pc, #52]	; (800c86c <prvAddNewTaskToReadyList+0x118>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00e      	beq.n	800c85c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c83e:	4b0a      	ldr	r3, [pc, #40]	; (800c868 <prvAddNewTaskToReadyList+0x114>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c848:	429a      	cmp	r2, r3
 800c84a:	d207      	bcs.n	800c85c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800c84c:	4b0b      	ldr	r3, [pc, #44]	; (800c87c <prvAddNewTaskToReadyList+0x128>)
 800c84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c852:	601a      	str	r2, [r3, #0]
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800c85c:	bf00      	nop
 800c85e:	3710      	adds	r7, #16
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}
 800c864:	2000030c 	.word	0x2000030c
 800c868:	20000234 	.word	0x20000234
 800c86c:	20000318 	.word	0x20000318
 800c870:	20000328 	.word	0x20000328
 800c874:	20000314 	.word	0x20000314
 800c878:	20000238 	.word	0x20000238
 800c87c:	e000ed04 	.word	0xe000ed04

0800c880 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800c888:	2300      	movs	r3, #0
 800c88a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d017      	beq.n	800c8c2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800c892:	4b13      	ldr	r3, [pc, #76]	; (800c8e0 <vTaskDelay+0x60>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00a      	beq.n	800c8b0 <vTaskDelay+0x30>
        __asm volatile
 800c89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	60bb      	str	r3, [r7, #8]
    }
 800c8ac:	bf00      	nop
 800c8ae:	e7fe      	b.n	800c8ae <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800c8b0:	f000 f86c 	bl	800c98c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 fd8c 	bl	800d3d4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800c8bc:	f000 f874 	bl	800c9a8 <xTaskResumeAll>
 800c8c0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d107      	bne.n	800c8d8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800c8c8:	4b06      	ldr	r3, [pc, #24]	; (800c8e4 <vTaskDelay+0x64>)
 800c8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ce:	601a      	str	r2, [r3, #0]
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800c8d8:	bf00      	nop
 800c8da:	3710      	adds	r7, #16
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	20000334 	.word	0x20000334
 800c8e4:	e000ed04 	.word	0xe000ed04

0800c8e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b086      	sub	sp, #24
 800c8ec:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800c8ee:	4b20      	ldr	r3, [pc, #128]	; (800c970 <vTaskStartScheduler+0x88>)
 800c8f0:	9301      	str	r3, [sp, #4]
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	9300      	str	r3, [sp, #0]
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	2282      	movs	r2, #130	; 0x82
 800c8fa:	491e      	ldr	r1, [pc, #120]	; (800c974 <vTaskStartScheduler+0x8c>)
 800c8fc:	481e      	ldr	r0, [pc, #120]	; (800c978 <vTaskStartScheduler+0x90>)
 800c8fe:	f7ff fe43 	bl	800c588 <xTaskCreate>
 800c902:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d102      	bne.n	800c910 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800c90a:	f000 fde3 	bl	800d4d4 <xTimerCreateTimerTask>
 800c90e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2b01      	cmp	r3, #1
 800c914:	d116      	bne.n	800c944 <vTaskStartScheduler+0x5c>
        __asm volatile
 800c916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	60bb      	str	r3, [r7, #8]
    }
 800c928:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800c92a:	4b14      	ldr	r3, [pc, #80]	; (800c97c <vTaskStartScheduler+0x94>)
 800c92c:	f04f 32ff 	mov.w	r2, #4294967295
 800c930:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800c932:	4b13      	ldr	r3, [pc, #76]	; (800c980 <vTaskStartScheduler+0x98>)
 800c934:	2201      	movs	r2, #1
 800c936:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c938:	4b12      	ldr	r3, [pc, #72]	; (800c984 <vTaskStartScheduler+0x9c>)
 800c93a:	2200      	movs	r2, #0
 800c93c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800c93e:	f001 f8d9 	bl	800daf4 <xPortStartScheduler>
 800c942:	e00e      	b.n	800c962 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c94a:	d10a      	bne.n	800c962 <vTaskStartScheduler+0x7a>
        __asm volatile
 800c94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c950:	f383 8811 	msr	BASEPRI, r3
 800c954:	f3bf 8f6f 	isb	sy
 800c958:	f3bf 8f4f 	dsb	sy
 800c95c:	607b      	str	r3, [r7, #4]
    }
 800c95e:	bf00      	nop
 800c960:	e7fe      	b.n	800c960 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800c962:	4b09      	ldr	r3, [pc, #36]	; (800c988 <vTaskStartScheduler+0xa0>)
 800c964:	681b      	ldr	r3, [r3, #0]
}
 800c966:	bf00      	nop
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	20000330 	.word	0x20000330
 800c974:	080122ac 	.word	0x080122ac
 800c978:	0800d235 	.word	0x0800d235
 800c97c:	2000032c 	.word	0x2000032c
 800c980:	20000318 	.word	0x20000318
 800c984:	20000310 	.word	0x20000310
 800c988:	20000018 	.word	0x20000018

0800c98c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c98c:	b480      	push	{r7}
 800c98e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800c990:	4b04      	ldr	r3, [pc, #16]	; (800c9a4 <vTaskSuspendAll+0x18>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	3301      	adds	r3, #1
 800c996:	4a03      	ldr	r2, [pc, #12]	; (800c9a4 <vTaskSuspendAll+0x18>)
 800c998:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800c99a:	bf00      	nop
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr
 800c9a4:	20000334 	.word	0x20000334

0800c9a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b088      	sub	sp, #32
 800c9ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800c9b6:	4b71      	ldr	r3, [pc, #452]	; (800cb7c <xTaskResumeAll+0x1d4>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10a      	bne.n	800c9d4 <xTaskResumeAll+0x2c>
        __asm volatile
 800c9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c2:	f383 8811 	msr	BASEPRI, r3
 800c9c6:	f3bf 8f6f 	isb	sy
 800c9ca:	f3bf 8f4f 	dsb	sy
 800c9ce:	607b      	str	r3, [r7, #4]
    }
 800c9d0:	bf00      	nop
 800c9d2:	e7fe      	b.n	800c9d2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800c9d4:	f001 f930 	bl	800dc38 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800c9d8:	4b68      	ldr	r3, [pc, #416]	; (800cb7c <xTaskResumeAll+0x1d4>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	4a67      	ldr	r2, [pc, #412]	; (800cb7c <xTaskResumeAll+0x1d4>)
 800c9e0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9e2:	4b66      	ldr	r3, [pc, #408]	; (800cb7c <xTaskResumeAll+0x1d4>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	f040 80c0 	bne.w	800cb6c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c9ec:	4b64      	ldr	r3, [pc, #400]	; (800cb80 <xTaskResumeAll+0x1d8>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f000 80bb 	beq.w	800cb6c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9f6:	e08a      	b.n	800cb0e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9f8:	4b62      	ldr	r3, [pc, #392]	; (800cb84 <xTaskResumeAll+0x1dc>)
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	68db      	ldr	r3, [r3, #12]
 800c9fe:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca04:	613b      	str	r3, [r7, #16]
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	69db      	ldr	r3, [r3, #28]
 800ca0a:	69fa      	ldr	r2, [r7, #28]
 800ca0c:	6a12      	ldr	r2, [r2, #32]
 800ca0e:	609a      	str	r2, [r3, #8]
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	6a1b      	ldr	r3, [r3, #32]
 800ca14:	69fa      	ldr	r2, [r7, #28]
 800ca16:	69d2      	ldr	r2, [r2, #28]
 800ca18:	605a      	str	r2, [r3, #4]
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	685a      	ldr	r2, [r3, #4]
 800ca1e:	69fb      	ldr	r3, [r7, #28]
 800ca20:	3318      	adds	r3, #24
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d103      	bne.n	800ca2e <xTaskResumeAll+0x86>
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	6a1a      	ldr	r2, [r3, #32]
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	605a      	str	r2, [r3, #4]
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	2200      	movs	r2, #0
 800ca32:	629a      	str	r2, [r3, #40]	; 0x28
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	1e5a      	subs	r2, r3, #1
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	695b      	ldr	r3, [r3, #20]
 800ca42:	60fb      	str	r3, [r7, #12]
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	69fa      	ldr	r2, [r7, #28]
 800ca4a:	68d2      	ldr	r2, [r2, #12]
 800ca4c:	609a      	str	r2, [r3, #8]
 800ca4e:	69fb      	ldr	r3, [r7, #28]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	69fa      	ldr	r2, [r7, #28]
 800ca54:	6892      	ldr	r2, [r2, #8]
 800ca56:	605a      	str	r2, [r3, #4]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	685a      	ldr	r2, [r3, #4]
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	3304      	adds	r3, #4
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d103      	bne.n	800ca6c <xTaskResumeAll+0xc4>
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	68da      	ldr	r2, [r3, #12]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	605a      	str	r2, [r3, #4]
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	615a      	str	r2, [r3, #20]
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	1e5a      	subs	r2, r3, #1
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca80:	2201      	movs	r2, #1
 800ca82:	409a      	lsls	r2, r3
 800ca84:	4b40      	ldr	r3, [pc, #256]	; (800cb88 <xTaskResumeAll+0x1e0>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	4a3f      	ldr	r2, [pc, #252]	; (800cb88 <xTaskResumeAll+0x1e0>)
 800ca8c:	6013      	str	r3, [r2, #0]
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca92:	493e      	ldr	r1, [pc, #248]	; (800cb8c <xTaskResumeAll+0x1e4>)
 800ca94:	4613      	mov	r3, r2
 800ca96:	009b      	lsls	r3, r3, #2
 800ca98:	4413      	add	r3, r2
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	440b      	add	r3, r1
 800ca9e:	3304      	adds	r3, #4
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	60bb      	str	r3, [r7, #8]
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	68ba      	ldr	r2, [r7, #8]
 800caa8:	609a      	str	r2, [r3, #8]
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	689a      	ldr	r2, [r3, #8]
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	60da      	str	r2, [r3, #12]
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	69fa      	ldr	r2, [r7, #28]
 800cab8:	3204      	adds	r2, #4
 800caba:	605a      	str	r2, [r3, #4]
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	1d1a      	adds	r2, r3, #4
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	609a      	str	r2, [r3, #8]
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac8:	4613      	mov	r3, r2
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	4413      	add	r3, r2
 800cace:	009b      	lsls	r3, r3, #2
 800cad0:	4a2e      	ldr	r2, [pc, #184]	; (800cb8c <xTaskResumeAll+0x1e4>)
 800cad2:	441a      	add	r2, r3
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	615a      	str	r2, [r3, #20]
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cadc:	492b      	ldr	r1, [pc, #172]	; (800cb8c <xTaskResumeAll+0x1e4>)
 800cade:	4613      	mov	r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4413      	add	r3, r2
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	440b      	add	r3, r1
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	1c59      	adds	r1, r3, #1
 800caec:	4827      	ldr	r0, [pc, #156]	; (800cb8c <xTaskResumeAll+0x1e4>)
 800caee:	4613      	mov	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	4413      	add	r3, r2
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	4403      	add	r3, r0
 800caf8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cafe:	4b24      	ldr	r3, [pc, #144]	; (800cb90 <xTaskResumeAll+0x1e8>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d302      	bcc.n	800cb0e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 800cb08:	4b22      	ldr	r3, [pc, #136]	; (800cb94 <xTaskResumeAll+0x1ec>)
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb0e:	4b1d      	ldr	r3, [pc, #116]	; (800cb84 <xTaskResumeAll+0x1dc>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	f47f af70 	bne.w	800c9f8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d001      	beq.n	800cb22 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800cb1e:	f000 fc1f 	bl	800d360 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cb22:	4b1d      	ldr	r3, [pc, #116]	; (800cb98 <xTaskResumeAll+0x1f0>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d010      	beq.n	800cb50 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800cb2e:	f000 f847 	bl	800cbc0 <xTaskIncrementTick>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d002      	beq.n	800cb3e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 800cb38:	4b16      	ldr	r3, [pc, #88]	; (800cb94 <xTaskResumeAll+0x1ec>)
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	3b01      	subs	r3, #1
 800cb42:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d1f1      	bne.n	800cb2e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800cb4a:	4b13      	ldr	r3, [pc, #76]	; (800cb98 <xTaskResumeAll+0x1f0>)
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800cb50:	4b10      	ldr	r3, [pc, #64]	; (800cb94 <xTaskResumeAll+0x1ec>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d009      	beq.n	800cb6c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800cb5c:	4b0f      	ldr	r3, [pc, #60]	; (800cb9c <xTaskResumeAll+0x1f4>)
 800cb5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb62:	601a      	str	r2, [r3, #0]
 800cb64:	f3bf 8f4f 	dsb	sy
 800cb68:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800cb6c:	f001 f894 	bl	800dc98 <vPortExitCritical>

    return xAlreadyYielded;
 800cb70:	69bb      	ldr	r3, [r7, #24]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3720      	adds	r7, #32
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	20000334 	.word	0x20000334
 800cb80:	2000030c 	.word	0x2000030c
 800cb84:	200002cc 	.word	0x200002cc
 800cb88:	20000314 	.word	0x20000314
 800cb8c:	20000238 	.word	0x20000238
 800cb90:	20000234 	.word	0x20000234
 800cb94:	20000320 	.word	0x20000320
 800cb98:	2000031c 	.word	0x2000031c
 800cb9c:	e000ed04 	.word	0xe000ed04

0800cba0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800cba6:	4b05      	ldr	r3, [pc, #20]	; (800cbbc <xTaskGetTickCount+0x1c>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800cbac:	687b      	ldr	r3, [r7, #4]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	370c      	adds	r7, #12
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	20000310 	.word	0x20000310

0800cbc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b08a      	sub	sp, #40	; 0x28
 800cbc4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbca:	4b7d      	ldr	r3, [pc, #500]	; (800cdc0 <xTaskIncrementTick+0x200>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f040 80ec 	bne.w	800cdac <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cbd4:	4b7b      	ldr	r3, [pc, #492]	; (800cdc4 <xTaskIncrementTick+0x204>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800cbdc:	4a79      	ldr	r2, [pc, #484]	; (800cdc4 <xTaskIncrementTick+0x204>)
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cbe2:	6a3b      	ldr	r3, [r7, #32]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d120      	bne.n	800cc2a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800cbe8:	4b77      	ldr	r3, [pc, #476]	; (800cdc8 <xTaskIncrementTick+0x208>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d00a      	beq.n	800cc08 <xTaskIncrementTick+0x48>
        __asm volatile
 800cbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf6:	f383 8811 	msr	BASEPRI, r3
 800cbfa:	f3bf 8f6f 	isb	sy
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	607b      	str	r3, [r7, #4]
    }
 800cc04:	bf00      	nop
 800cc06:	e7fe      	b.n	800cc06 <xTaskIncrementTick+0x46>
 800cc08:	4b6f      	ldr	r3, [pc, #444]	; (800cdc8 <xTaskIncrementTick+0x208>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	61fb      	str	r3, [r7, #28]
 800cc0e:	4b6f      	ldr	r3, [pc, #444]	; (800cdcc <xTaskIncrementTick+0x20c>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	4a6d      	ldr	r2, [pc, #436]	; (800cdc8 <xTaskIncrementTick+0x208>)
 800cc14:	6013      	str	r3, [r2, #0]
 800cc16:	4a6d      	ldr	r2, [pc, #436]	; (800cdcc <xTaskIncrementTick+0x20c>)
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	6013      	str	r3, [r2, #0]
 800cc1c:	4b6c      	ldr	r3, [pc, #432]	; (800cdd0 <xTaskIncrementTick+0x210>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	3301      	adds	r3, #1
 800cc22:	4a6b      	ldr	r2, [pc, #428]	; (800cdd0 <xTaskIncrementTick+0x210>)
 800cc24:	6013      	str	r3, [r2, #0]
 800cc26:	f000 fb9b 	bl	800d360 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800cc2a:	4b6a      	ldr	r3, [pc, #424]	; (800cdd4 <xTaskIncrementTick+0x214>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	6a3a      	ldr	r2, [r7, #32]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	f0c0 80a6 	bcc.w	800cd82 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc36:	4b64      	ldr	r3, [pc, #400]	; (800cdc8 <xTaskIncrementTick+0x208>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d104      	bne.n	800cc4a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc40:	4b64      	ldr	r3, [pc, #400]	; (800cdd4 <xTaskIncrementTick+0x214>)
 800cc42:	f04f 32ff 	mov.w	r2, #4294967295
 800cc46:	601a      	str	r2, [r3, #0]
                    break;
 800cc48:	e09b      	b.n	800cd82 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc4a:	4b5f      	ldr	r3, [pc, #380]	; (800cdc8 <xTaskIncrementTick+0x208>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800cc5a:	6a3a      	ldr	r2, [r7, #32]
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d203      	bcs.n	800cc6a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800cc62:	4a5c      	ldr	r2, [pc, #368]	; (800cdd4 <xTaskIncrementTick+0x214>)
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800cc68:	e08b      	b.n	800cd82 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	695b      	ldr	r3, [r3, #20]
 800cc6e:	613b      	str	r3, [r7, #16]
 800cc70:	69bb      	ldr	r3, [r7, #24]
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	69ba      	ldr	r2, [r7, #24]
 800cc76:	68d2      	ldr	r2, [r2, #12]
 800cc78:	609a      	str	r2, [r3, #8]
 800cc7a:	69bb      	ldr	r3, [r7, #24]
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	69ba      	ldr	r2, [r7, #24]
 800cc80:	6892      	ldr	r2, [r2, #8]
 800cc82:	605a      	str	r2, [r3, #4]
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	685a      	ldr	r2, [r3, #4]
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	3304      	adds	r3, #4
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d103      	bne.n	800cc98 <xTaskIncrementTick+0xd8>
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	68da      	ldr	r2, [r3, #12]
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	605a      	str	r2, [r3, #4]
 800cc98:	69bb      	ldr	r3, [r7, #24]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	615a      	str	r2, [r3, #20]
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	1e5a      	subs	r2, r3, #1
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d01e      	beq.n	800ccee <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb4:	60fb      	str	r3, [r7, #12]
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	69db      	ldr	r3, [r3, #28]
 800ccba:	69ba      	ldr	r2, [r7, #24]
 800ccbc:	6a12      	ldr	r2, [r2, #32]
 800ccbe:	609a      	str	r2, [r3, #8]
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	6a1b      	ldr	r3, [r3, #32]
 800ccc4:	69ba      	ldr	r2, [r7, #24]
 800ccc6:	69d2      	ldr	r2, [r2, #28]
 800ccc8:	605a      	str	r2, [r3, #4]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	685a      	ldr	r2, [r3, #4]
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	3318      	adds	r3, #24
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d103      	bne.n	800ccde <xTaskIncrementTick+0x11e>
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	6a1a      	ldr	r2, [r3, #32]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	605a      	str	r2, [r3, #4]
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	2200      	movs	r2, #0
 800cce2:	629a      	str	r2, [r3, #40]	; 0x28
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	1e5a      	subs	r2, r3, #1
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	409a      	lsls	r2, r3
 800ccf6:	4b38      	ldr	r3, [pc, #224]	; (800cdd8 <xTaskIncrementTick+0x218>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	4a36      	ldr	r2, [pc, #216]	; (800cdd8 <xTaskIncrementTick+0x218>)
 800ccfe:	6013      	str	r3, [r2, #0]
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd04:	4935      	ldr	r1, [pc, #212]	; (800cddc <xTaskIncrementTick+0x21c>)
 800cd06:	4613      	mov	r3, r2
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	4413      	add	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	440b      	add	r3, r1
 800cd10:	3304      	adds	r3, #4
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	60bb      	str	r3, [r7, #8]
 800cd16:	69bb      	ldr	r3, [r7, #24]
 800cd18:	68ba      	ldr	r2, [r7, #8]
 800cd1a:	609a      	str	r2, [r3, #8]
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	689a      	ldr	r2, [r3, #8]
 800cd20:	69bb      	ldr	r3, [r7, #24]
 800cd22:	60da      	str	r2, [r3, #12]
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	69ba      	ldr	r2, [r7, #24]
 800cd2a:	3204      	adds	r2, #4
 800cd2c:	605a      	str	r2, [r3, #4]
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	1d1a      	adds	r2, r3, #4
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	609a      	str	r2, [r3, #8]
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4a26      	ldr	r2, [pc, #152]	; (800cddc <xTaskIncrementTick+0x21c>)
 800cd44:	441a      	add	r2, r3
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	615a      	str	r2, [r3, #20]
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd4e:	4923      	ldr	r1, [pc, #140]	; (800cddc <xTaskIncrementTick+0x21c>)
 800cd50:	4613      	mov	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	4413      	add	r3, r2
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	440b      	add	r3, r1
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	1c59      	adds	r1, r3, #1
 800cd5e:	481f      	ldr	r0, [pc, #124]	; (800cddc <xTaskIncrementTick+0x21c>)
 800cd60:	4613      	mov	r3, r2
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	4413      	add	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4403      	add	r3, r0
 800cd6a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd70:	4b1b      	ldr	r3, [pc, #108]	; (800cde0 <xTaskIncrementTick+0x220>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd76:	429a      	cmp	r2, r3
 800cd78:	f4ff af5d 	bcc.w	800cc36 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd80:	e759      	b.n	800cc36 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd82:	4b17      	ldr	r3, [pc, #92]	; (800cde0 <xTaskIncrementTick+0x220>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd88:	4914      	ldr	r1, [pc, #80]	; (800cddc <xTaskIncrementTick+0x21c>)
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4413      	add	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	440b      	add	r3, r1
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d901      	bls.n	800cd9e <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800cd9e:	4b11      	ldr	r3, [pc, #68]	; (800cde4 <xTaskIncrementTick+0x224>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d007      	beq.n	800cdb6 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 800cda6:	2301      	movs	r3, #1
 800cda8:	627b      	str	r3, [r7, #36]	; 0x24
 800cdaa:	e004      	b.n	800cdb6 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800cdac:	4b0e      	ldr	r3, [pc, #56]	; (800cde8 <xTaskIncrementTick+0x228>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	4a0d      	ldr	r2, [pc, #52]	; (800cde8 <xTaskIncrementTick+0x228>)
 800cdb4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800cdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3728      	adds	r7, #40	; 0x28
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	20000334 	.word	0x20000334
 800cdc4:	20000310 	.word	0x20000310
 800cdc8:	200002c4 	.word	0x200002c4
 800cdcc:	200002c8 	.word	0x200002c8
 800cdd0:	20000324 	.word	0x20000324
 800cdd4:	2000032c 	.word	0x2000032c
 800cdd8:	20000314 	.word	0x20000314
 800cddc:	20000238 	.word	0x20000238
 800cde0:	20000234 	.word	0x20000234
 800cde4:	20000320 	.word	0x20000320
 800cde8:	2000031c 	.word	0x2000031c

0800cdec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cdec:	b480      	push	{r7}
 800cdee:	b087      	sub	sp, #28
 800cdf0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cdf2:	4b27      	ldr	r3, [pc, #156]	; (800ce90 <vTaskSwitchContext+0xa4>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d003      	beq.n	800ce02 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800cdfa:	4b26      	ldr	r3, [pc, #152]	; (800ce94 <vTaskSwitchContext+0xa8>)
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800ce00:	e03f      	b.n	800ce82 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800ce02:	4b24      	ldr	r3, [pc, #144]	; (800ce94 <vTaskSwitchContext+0xa8>)
 800ce04:	2200      	movs	r2, #0
 800ce06:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce08:	4b23      	ldr	r3, [pc, #140]	; (800ce98 <vTaskSwitchContext+0xac>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	fab3 f383 	clz	r3, r3
 800ce14:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800ce16:	7afb      	ldrb	r3, [r7, #11]
 800ce18:	f1c3 031f 	rsb	r3, r3, #31
 800ce1c:	617b      	str	r3, [r7, #20]
 800ce1e:	491f      	ldr	r1, [pc, #124]	; (800ce9c <vTaskSwitchContext+0xb0>)
 800ce20:	697a      	ldr	r2, [r7, #20]
 800ce22:	4613      	mov	r3, r2
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	4413      	add	r3, r2
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	440b      	add	r3, r1
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d10a      	bne.n	800ce48 <vTaskSwitchContext+0x5c>
        __asm volatile
 800ce32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce36:	f383 8811 	msr	BASEPRI, r3
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	607b      	str	r3, [r7, #4]
    }
 800ce44:	bf00      	nop
 800ce46:	e7fe      	b.n	800ce46 <vTaskSwitchContext+0x5a>
 800ce48:	697a      	ldr	r2, [r7, #20]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	4413      	add	r3, r2
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	4a12      	ldr	r2, [pc, #72]	; (800ce9c <vTaskSwitchContext+0xb0>)
 800ce54:	4413      	add	r3, r2
 800ce56:	613b      	str	r3, [r7, #16]
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	685a      	ldr	r2, [r3, #4]
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	605a      	str	r2, [r3, #4]
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	685a      	ldr	r2, [r3, #4]
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	3308      	adds	r3, #8
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d104      	bne.n	800ce78 <vTaskSwitchContext+0x8c>
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	685a      	ldr	r2, [r3, #4]
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	605a      	str	r2, [r3, #4]
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	68db      	ldr	r3, [r3, #12]
 800ce7e:	4a08      	ldr	r2, [pc, #32]	; (800cea0 <vTaskSwitchContext+0xb4>)
 800ce80:	6013      	str	r3, [r2, #0]
}
 800ce82:	bf00      	nop
 800ce84:	371c      	adds	r7, #28
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop
 800ce90:	20000334 	.word	0x20000334
 800ce94:	20000320 	.word	0x20000320
 800ce98:	20000314 	.word	0x20000314
 800ce9c:	20000238 	.word	0x20000238
 800cea0:	20000234 	.word	0x20000234

0800cea4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d10a      	bne.n	800ceca <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800ceb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb8:	f383 8811 	msr	BASEPRI, r3
 800cebc:	f3bf 8f6f 	isb	sy
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	60fb      	str	r3, [r7, #12]
    }
 800cec6:	bf00      	nop
 800cec8:	e7fe      	b.n	800cec8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ceca:	4b07      	ldr	r3, [pc, #28]	; (800cee8 <vTaskPlaceOnEventList+0x44>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	3318      	adds	r3, #24
 800ced0:	4619      	mov	r1, r3
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f7ff f803 	bl	800bede <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ced8:	2101      	movs	r1, #1
 800ceda:	6838      	ldr	r0, [r7, #0]
 800cedc:	f000 fa7a 	bl	800d3d4 <prvAddCurrentTaskToDelayedList>
}
 800cee0:	bf00      	nop
 800cee2:	3710      	adds	r7, #16
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	20000234 	.word	0x20000234

0800ceec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b086      	sub	sp, #24
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d10a      	bne.n	800cf14 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800cefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	613b      	str	r3, [r7, #16]
    }
 800cf10:	bf00      	nop
 800cf12:	e7fe      	b.n	800cf12 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	617b      	str	r3, [r7, #20]
 800cf1a:	4b16      	ldr	r3, [pc, #88]	; (800cf74 <vTaskPlaceOnEventListRestricted+0x88>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	697a      	ldr	r2, [r7, #20]
 800cf20:	61da      	str	r2, [r3, #28]
 800cf22:	4b14      	ldr	r3, [pc, #80]	; (800cf74 <vTaskPlaceOnEventListRestricted+0x88>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	697a      	ldr	r2, [r7, #20]
 800cf28:	6892      	ldr	r2, [r2, #8]
 800cf2a:	621a      	str	r2, [r3, #32]
 800cf2c:	4b11      	ldr	r3, [pc, #68]	; (800cf74 <vTaskPlaceOnEventListRestricted+0x88>)
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	3218      	adds	r2, #24
 800cf36:	605a      	str	r2, [r3, #4]
 800cf38:	4b0e      	ldr	r3, [pc, #56]	; (800cf74 <vTaskPlaceOnEventListRestricted+0x88>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f103 0218 	add.w	r2, r3, #24
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	609a      	str	r2, [r3, #8]
 800cf44:	4b0b      	ldr	r3, [pc, #44]	; (800cf74 <vTaskPlaceOnEventListRestricted+0x88>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	629a      	str	r2, [r3, #40]	; 0x28
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	1c5a      	adds	r2, r3, #1
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d002      	beq.n	800cf62 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800cf5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf60:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cf62:	6879      	ldr	r1, [r7, #4]
 800cf64:	68b8      	ldr	r0, [r7, #8]
 800cf66:	f000 fa35 	bl	800d3d4 <prvAddCurrentTaskToDelayedList>
    }
 800cf6a:	bf00      	nop
 800cf6c:	3718      	adds	r7, #24
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	20000234 	.word	0x20000234

0800cf78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b08b      	sub	sp, #44	; 0x2c
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800cf88:	6a3b      	ldr	r3, [r7, #32]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10a      	bne.n	800cfa4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	60fb      	str	r3, [r7, #12]
    }
 800cfa0:	bf00      	nop
 800cfa2:	e7fe      	b.n	800cfa2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800cfa4:	6a3b      	ldr	r3, [r7, #32]
 800cfa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfa8:	61fb      	str	r3, [r7, #28]
 800cfaa:	6a3b      	ldr	r3, [r7, #32]
 800cfac:	69db      	ldr	r3, [r3, #28]
 800cfae:	6a3a      	ldr	r2, [r7, #32]
 800cfb0:	6a12      	ldr	r2, [r2, #32]
 800cfb2:	609a      	str	r2, [r3, #8]
 800cfb4:	6a3b      	ldr	r3, [r7, #32]
 800cfb6:	6a1b      	ldr	r3, [r3, #32]
 800cfb8:	6a3a      	ldr	r2, [r7, #32]
 800cfba:	69d2      	ldr	r2, [r2, #28]
 800cfbc:	605a      	str	r2, [r3, #4]
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	685a      	ldr	r2, [r3, #4]
 800cfc2:	6a3b      	ldr	r3, [r7, #32]
 800cfc4:	3318      	adds	r3, #24
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d103      	bne.n	800cfd2 <xTaskRemoveFromEventList+0x5a>
 800cfca:	6a3b      	ldr	r3, [r7, #32]
 800cfcc:	6a1a      	ldr	r2, [r3, #32]
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	605a      	str	r2, [r3, #4]
 800cfd2:	6a3b      	ldr	r3, [r7, #32]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	629a      	str	r2, [r3, #40]	; 0x28
 800cfd8:	69fb      	ldr	r3, [r7, #28]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	1e5a      	subs	r2, r3, #1
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfe2:	4b4a      	ldr	r3, [pc, #296]	; (800d10c <xTaskRemoveFromEventList+0x194>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d15e      	bne.n	800d0a8 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800cfea:	6a3b      	ldr	r3, [r7, #32]
 800cfec:	695b      	ldr	r3, [r3, #20]
 800cfee:	617b      	str	r3, [r7, #20]
 800cff0:	6a3b      	ldr	r3, [r7, #32]
 800cff2:	689b      	ldr	r3, [r3, #8]
 800cff4:	6a3a      	ldr	r2, [r7, #32]
 800cff6:	68d2      	ldr	r2, [r2, #12]
 800cff8:	609a      	str	r2, [r3, #8]
 800cffa:	6a3b      	ldr	r3, [r7, #32]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	6a3a      	ldr	r2, [r7, #32]
 800d000:	6892      	ldr	r2, [r2, #8]
 800d002:	605a      	str	r2, [r3, #4]
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	685a      	ldr	r2, [r3, #4]
 800d008:	6a3b      	ldr	r3, [r7, #32]
 800d00a:	3304      	adds	r3, #4
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d103      	bne.n	800d018 <xTaskRemoveFromEventList+0xa0>
 800d010:	6a3b      	ldr	r3, [r7, #32]
 800d012:	68da      	ldr	r2, [r3, #12]
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	605a      	str	r2, [r3, #4]
 800d018:	6a3b      	ldr	r3, [r7, #32]
 800d01a:	2200      	movs	r2, #0
 800d01c:	615a      	str	r2, [r3, #20]
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	1e5a      	subs	r2, r3, #1
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800d028:	6a3b      	ldr	r3, [r7, #32]
 800d02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d02c:	2201      	movs	r2, #1
 800d02e:	409a      	lsls	r2, r3
 800d030:	4b37      	ldr	r3, [pc, #220]	; (800d110 <xTaskRemoveFromEventList+0x198>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4313      	orrs	r3, r2
 800d036:	4a36      	ldr	r2, [pc, #216]	; (800d110 <xTaskRemoveFromEventList+0x198>)
 800d038:	6013      	str	r3, [r2, #0]
 800d03a:	6a3b      	ldr	r3, [r7, #32]
 800d03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d03e:	4935      	ldr	r1, [pc, #212]	; (800d114 <xTaskRemoveFromEventList+0x19c>)
 800d040:	4613      	mov	r3, r2
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	4413      	add	r3, r2
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	440b      	add	r3, r1
 800d04a:	3304      	adds	r3, #4
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	613b      	str	r3, [r7, #16]
 800d050:	6a3b      	ldr	r3, [r7, #32]
 800d052:	693a      	ldr	r2, [r7, #16]
 800d054:	609a      	str	r2, [r3, #8]
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	689a      	ldr	r2, [r3, #8]
 800d05a:	6a3b      	ldr	r3, [r7, #32]
 800d05c:	60da      	str	r2, [r3, #12]
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	6a3a      	ldr	r2, [r7, #32]
 800d064:	3204      	adds	r2, #4
 800d066:	605a      	str	r2, [r3, #4]
 800d068:	6a3b      	ldr	r3, [r7, #32]
 800d06a:	1d1a      	adds	r2, r3, #4
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	609a      	str	r2, [r3, #8]
 800d070:	6a3b      	ldr	r3, [r7, #32]
 800d072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d074:	4613      	mov	r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	4413      	add	r3, r2
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	4a25      	ldr	r2, [pc, #148]	; (800d114 <xTaskRemoveFromEventList+0x19c>)
 800d07e:	441a      	add	r2, r3
 800d080:	6a3b      	ldr	r3, [r7, #32]
 800d082:	615a      	str	r2, [r3, #20]
 800d084:	6a3b      	ldr	r3, [r7, #32]
 800d086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d088:	4922      	ldr	r1, [pc, #136]	; (800d114 <xTaskRemoveFromEventList+0x19c>)
 800d08a:	4613      	mov	r3, r2
 800d08c:	009b      	lsls	r3, r3, #2
 800d08e:	4413      	add	r3, r2
 800d090:	009b      	lsls	r3, r3, #2
 800d092:	440b      	add	r3, r1
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	1c59      	adds	r1, r3, #1
 800d098:	481e      	ldr	r0, [pc, #120]	; (800d114 <xTaskRemoveFromEventList+0x19c>)
 800d09a:	4613      	mov	r3, r2
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	4413      	add	r3, r2
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	4403      	add	r3, r0
 800d0a4:	6019      	str	r1, [r3, #0]
 800d0a6:	e01b      	b.n	800d0e0 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d0a8:	4b1b      	ldr	r3, [pc, #108]	; (800d118 <xTaskRemoveFromEventList+0x1a0>)
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	61bb      	str	r3, [r7, #24]
 800d0ae:	6a3b      	ldr	r3, [r7, #32]
 800d0b0:	69ba      	ldr	r2, [r7, #24]
 800d0b2:	61da      	str	r2, [r3, #28]
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	689a      	ldr	r2, [r3, #8]
 800d0b8:	6a3b      	ldr	r3, [r7, #32]
 800d0ba:	621a      	str	r2, [r3, #32]
 800d0bc:	69bb      	ldr	r3, [r7, #24]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	6a3a      	ldr	r2, [r7, #32]
 800d0c2:	3218      	adds	r2, #24
 800d0c4:	605a      	str	r2, [r3, #4]
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	f103 0218 	add.w	r2, r3, #24
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	609a      	str	r2, [r3, #8]
 800d0d0:	6a3b      	ldr	r3, [r7, #32]
 800d0d2:	4a11      	ldr	r2, [pc, #68]	; (800d118 <xTaskRemoveFromEventList+0x1a0>)
 800d0d4:	629a      	str	r2, [r3, #40]	; 0x28
 800d0d6:	4b10      	ldr	r3, [pc, #64]	; (800d118 <xTaskRemoveFromEventList+0x1a0>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	4a0e      	ldr	r2, [pc, #56]	; (800d118 <xTaskRemoveFromEventList+0x1a0>)
 800d0de:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d0e0:	6a3b      	ldr	r3, [r7, #32]
 800d0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0e4:	4b0d      	ldr	r3, [pc, #52]	; (800d11c <xTaskRemoveFromEventList+0x1a4>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d905      	bls.n	800d0fa <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800d0f2:	4b0b      	ldr	r3, [pc, #44]	; (800d120 <xTaskRemoveFromEventList+0x1a8>)
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	601a      	str	r2, [r3, #0]
 800d0f8:	e001      	b.n	800d0fe <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d100:	4618      	mov	r0, r3
 800d102:	372c      	adds	r7, #44	; 0x2c
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr
 800d10c:	20000334 	.word	0x20000334
 800d110:	20000314 	.word	0x20000314
 800d114:	20000238 	.word	0x20000238
 800d118:	200002cc 	.word	0x200002cc
 800d11c:	20000234 	.word	0x20000234
 800d120:	20000320 	.word	0x20000320

0800d124 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d12c:	4b06      	ldr	r3, [pc, #24]	; (800d148 <vTaskInternalSetTimeOutState+0x24>)
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800d134:	4b05      	ldr	r3, [pc, #20]	; (800d14c <vTaskInternalSetTimeOutState+0x28>)
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	605a      	str	r2, [r3, #4]
}
 800d13c:	bf00      	nop
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr
 800d148:	20000324 	.word	0x20000324
 800d14c:	20000310 	.word	0x20000310

0800d150 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b088      	sub	sp, #32
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10a      	bne.n	800d176 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	613b      	str	r3, [r7, #16]
    }
 800d172:	bf00      	nop
 800d174:	e7fe      	b.n	800d174 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d10a      	bne.n	800d192 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800d17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d180:	f383 8811 	msr	BASEPRI, r3
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	60fb      	str	r3, [r7, #12]
    }
 800d18e:	bf00      	nop
 800d190:	e7fe      	b.n	800d190 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800d192:	f000 fd51 	bl	800dc38 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800d196:	4b1f      	ldr	r3, [pc, #124]	; (800d214 <xTaskCheckForTimeOut+0xc4>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	69ba      	ldr	r2, [r7, #24]
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ae:	d102      	bne.n	800d1b6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	61fb      	str	r3, [r7, #28]
 800d1b4:	e026      	b.n	800d204 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	4b17      	ldr	r3, [pc, #92]	; (800d218 <xTaskCheckForTimeOut+0xc8>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d00a      	beq.n	800d1d8 <xTaskCheckForTimeOut+0x88>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	69ba      	ldr	r2, [r7, #24]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d305      	bcc.n	800d1d8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	601a      	str	r2, [r3, #0]
 800d1d6:	e015      	b.n	800d204 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	697a      	ldr	r2, [r7, #20]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d20b      	bcs.n	800d1fa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	1ad2      	subs	r2, r2, r3
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7ff ff98 	bl	800d124 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	61fb      	str	r3, [r7, #28]
 800d1f8:	e004      	b.n	800d204 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800d200:	2301      	movs	r3, #1
 800d202:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800d204:	f000 fd48 	bl	800dc98 <vPortExitCritical>

    return xReturn;
 800d208:	69fb      	ldr	r3, [r7, #28]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3720      	adds	r7, #32
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	20000310 	.word	0x20000310
 800d218:	20000324 	.word	0x20000324

0800d21c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d21c:	b480      	push	{r7}
 800d21e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800d220:	4b03      	ldr	r3, [pc, #12]	; (800d230 <vTaskMissedYield+0x14>)
 800d222:	2201      	movs	r2, #1
 800d224:	601a      	str	r2, [r3, #0]
}
 800d226:	bf00      	nop
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr
 800d230:	20000320 	.word	0x20000320

0800d234 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800d23c:	f000 f852 	bl	800d2e4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d240:	4b06      	ldr	r3, [pc, #24]	; (800d25c <prvIdleTask+0x28>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2b01      	cmp	r3, #1
 800d246:	d9f9      	bls.n	800d23c <prvIdleTask+0x8>
                {
                    taskYIELD();
 800d248:	4b05      	ldr	r3, [pc, #20]	; (800d260 <prvIdleTask+0x2c>)
 800d24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d24e:	601a      	str	r2, [r3, #0]
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800d258:	e7f0      	b.n	800d23c <prvIdleTask+0x8>
 800d25a:	bf00      	nop
 800d25c:	20000238 	.word	0x20000238
 800d260:	e000ed04 	.word	0xe000ed04

0800d264 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d26a:	2300      	movs	r3, #0
 800d26c:	607b      	str	r3, [r7, #4]
 800d26e:	e00c      	b.n	800d28a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	4613      	mov	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	4a12      	ldr	r2, [pc, #72]	; (800d2c4 <prvInitialiseTaskLists+0x60>)
 800d27c:	4413      	add	r3, r2
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe fe00 	bl	800be84 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	3301      	adds	r3, #1
 800d288:	607b      	str	r3, [r7, #4]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2b04      	cmp	r3, #4
 800d28e:	d9ef      	bls.n	800d270 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800d290:	480d      	ldr	r0, [pc, #52]	; (800d2c8 <prvInitialiseTaskLists+0x64>)
 800d292:	f7fe fdf7 	bl	800be84 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800d296:	480d      	ldr	r0, [pc, #52]	; (800d2cc <prvInitialiseTaskLists+0x68>)
 800d298:	f7fe fdf4 	bl	800be84 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800d29c:	480c      	ldr	r0, [pc, #48]	; (800d2d0 <prvInitialiseTaskLists+0x6c>)
 800d29e:	f7fe fdf1 	bl	800be84 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800d2a2:	480c      	ldr	r0, [pc, #48]	; (800d2d4 <prvInitialiseTaskLists+0x70>)
 800d2a4:	f7fe fdee 	bl	800be84 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800d2a8:	480b      	ldr	r0, [pc, #44]	; (800d2d8 <prvInitialiseTaskLists+0x74>)
 800d2aa:	f7fe fdeb 	bl	800be84 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800d2ae:	4b0b      	ldr	r3, [pc, #44]	; (800d2dc <prvInitialiseTaskLists+0x78>)
 800d2b0:	4a05      	ldr	r2, [pc, #20]	; (800d2c8 <prvInitialiseTaskLists+0x64>)
 800d2b2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d2b4:	4b0a      	ldr	r3, [pc, #40]	; (800d2e0 <prvInitialiseTaskLists+0x7c>)
 800d2b6:	4a05      	ldr	r2, [pc, #20]	; (800d2cc <prvInitialiseTaskLists+0x68>)
 800d2b8:	601a      	str	r2, [r3, #0]
}
 800d2ba:	bf00      	nop
 800d2bc:	3708      	adds	r7, #8
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	20000238 	.word	0x20000238
 800d2c8:	2000029c 	.word	0x2000029c
 800d2cc:	200002b0 	.word	0x200002b0
 800d2d0:	200002cc 	.word	0x200002cc
 800d2d4:	200002e0 	.word	0x200002e0
 800d2d8:	200002f8 	.word	0x200002f8
 800d2dc:	200002c4 	.word	0x200002c4
 800d2e0:	200002c8 	.word	0x200002c8

0800d2e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d2ea:	e019      	b.n	800d320 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800d2ec:	f000 fca4 	bl	800dc38 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2f0:	4b10      	ldr	r3, [pc, #64]	; (800d334 <prvCheckTasksWaitingTermination+0x50>)
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	3304      	adds	r3, #4
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7fe fe27 	bl	800bf50 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800d302:	4b0d      	ldr	r3, [pc, #52]	; (800d338 <prvCheckTasksWaitingTermination+0x54>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	3b01      	subs	r3, #1
 800d308:	4a0b      	ldr	r2, [pc, #44]	; (800d338 <prvCheckTasksWaitingTermination+0x54>)
 800d30a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800d30c:	4b0b      	ldr	r3, [pc, #44]	; (800d33c <prvCheckTasksWaitingTermination+0x58>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	3b01      	subs	r3, #1
 800d312:	4a0a      	ldr	r2, [pc, #40]	; (800d33c <prvCheckTasksWaitingTermination+0x58>)
 800d314:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800d316:	f000 fcbf 	bl	800dc98 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 f810 	bl	800d340 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d320:	4b06      	ldr	r3, [pc, #24]	; (800d33c <prvCheckTasksWaitingTermination+0x58>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d1e1      	bne.n	800d2ec <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800d328:	bf00      	nop
 800d32a:	bf00      	nop
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	200002e0 	.word	0x200002e0
 800d338:	2000030c 	.word	0x2000030c
 800d33c:	200002f4 	.word	0x200002f4

0800d340 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d34c:	4618      	mov	r0, r3
 800d34e:	f000 fe35 	bl	800dfbc <vPortFree>
                vPortFree( pxTCB );
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 fe32 	bl	800dfbc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800d358:	bf00      	nop
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d360:	b480      	push	{r7}
 800d362:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d364:	4b0a      	ldr	r3, [pc, #40]	; (800d390 <prvResetNextTaskUnblockTime+0x30>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d104      	bne.n	800d378 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800d36e:	4b09      	ldr	r3, [pc, #36]	; (800d394 <prvResetNextTaskUnblockTime+0x34>)
 800d370:	f04f 32ff 	mov.w	r2, #4294967295
 800d374:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800d376:	e005      	b.n	800d384 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d378:	4b05      	ldr	r3, [pc, #20]	; (800d390 <prvResetNextTaskUnblockTime+0x30>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a04      	ldr	r2, [pc, #16]	; (800d394 <prvResetNextTaskUnblockTime+0x34>)
 800d382:	6013      	str	r3, [r2, #0]
}
 800d384:	bf00      	nop
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop
 800d390:	200002c4 	.word	0x200002c4
 800d394:	2000032c 	.word	0x2000032c

0800d398 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800d398:	b480      	push	{r7}
 800d39a:	b083      	sub	sp, #12
 800d39c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800d39e:	4b0b      	ldr	r3, [pc, #44]	; (800d3cc <xTaskGetSchedulerState+0x34>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d102      	bne.n	800d3ac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	607b      	str	r3, [r7, #4]
 800d3aa:	e008      	b.n	800d3be <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3ac:	4b08      	ldr	r3, [pc, #32]	; (800d3d0 <xTaskGetSchedulerState+0x38>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d102      	bne.n	800d3ba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800d3b4:	2302      	movs	r3, #2
 800d3b6:	607b      	str	r3, [r7, #4]
 800d3b8:	e001      	b.n	800d3be <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800d3be:	687b      	ldr	r3, [r7, #4]
    }
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	370c      	adds	r7, #12
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr
 800d3cc:	20000318 	.word	0x20000318
 800d3d0:	20000334 	.word	0x20000334

0800d3d4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b086      	sub	sp, #24
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800d3de:	4b36      	ldr	r3, [pc, #216]	; (800d4b8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3e4:	4b35      	ldr	r3, [pc, #212]	; (800d4bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	3304      	adds	r3, #4
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fe fdb0 	bl	800bf50 <uxListRemove>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d10b      	bne.n	800d40e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d3f6:	4b31      	ldr	r3, [pc, #196]	; (800d4bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d402:	43da      	mvns	r2, r3
 800d404:	4b2e      	ldr	r3, [pc, #184]	; (800d4c0 <prvAddCurrentTaskToDelayedList+0xec>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4013      	ands	r3, r2
 800d40a:	4a2d      	ldr	r2, [pc, #180]	; (800d4c0 <prvAddCurrentTaskToDelayedList+0xec>)
 800d40c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d414:	d124      	bne.n	800d460 <prvAddCurrentTaskToDelayedList+0x8c>
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d021      	beq.n	800d460 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d41c:	4b29      	ldr	r3, [pc, #164]	; (800d4c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	613b      	str	r3, [r7, #16]
 800d422:	4b26      	ldr	r3, [pc, #152]	; (800d4bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	693a      	ldr	r2, [r7, #16]
 800d428:	609a      	str	r2, [r3, #8]
 800d42a:	4b24      	ldr	r3, [pc, #144]	; (800d4bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	693a      	ldr	r2, [r7, #16]
 800d430:	6892      	ldr	r2, [r2, #8]
 800d432:	60da      	str	r2, [r3, #12]
 800d434:	4b21      	ldr	r3, [pc, #132]	; (800d4bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	3204      	adds	r2, #4
 800d43e:	605a      	str	r2, [r3, #4]
 800d440:	4b1e      	ldr	r3, [pc, #120]	; (800d4bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	1d1a      	adds	r2, r3, #4
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	609a      	str	r2, [r3, #8]
 800d44a:	4b1c      	ldr	r3, [pc, #112]	; (800d4bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4a1d      	ldr	r2, [pc, #116]	; (800d4c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800d450:	615a      	str	r2, [r3, #20]
 800d452:	4b1c      	ldr	r3, [pc, #112]	; (800d4c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	3301      	adds	r3, #1
 800d458:	4a1a      	ldr	r2, [pc, #104]	; (800d4c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800d45a:	6013      	str	r3, [r2, #0]
 800d45c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800d45e:	e026      	b.n	800d4ae <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800d460:	697a      	ldr	r2, [r7, #20]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4413      	add	r3, r2
 800d466:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d468:	4b14      	ldr	r3, [pc, #80]	; (800d4bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	68fa      	ldr	r2, [r7, #12]
 800d46e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800d470:	68fa      	ldr	r2, [r7, #12]
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	429a      	cmp	r2, r3
 800d476:	d209      	bcs.n	800d48c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d478:	4b13      	ldr	r3, [pc, #76]	; (800d4c8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	4b0f      	ldr	r3, [pc, #60]	; (800d4bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	3304      	adds	r3, #4
 800d482:	4619      	mov	r1, r3
 800d484:	4610      	mov	r0, r2
 800d486:	f7fe fd2a 	bl	800bede <vListInsert>
}
 800d48a:	e010      	b.n	800d4ae <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d48c:	4b0f      	ldr	r3, [pc, #60]	; (800d4cc <prvAddCurrentTaskToDelayedList+0xf8>)
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	4b0a      	ldr	r3, [pc, #40]	; (800d4bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	3304      	adds	r3, #4
 800d496:	4619      	mov	r1, r3
 800d498:	4610      	mov	r0, r2
 800d49a:	f7fe fd20 	bl	800bede <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800d49e:	4b0c      	ldr	r3, [pc, #48]	; (800d4d0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	68fa      	ldr	r2, [r7, #12]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d202      	bcs.n	800d4ae <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 800d4a8:	4a09      	ldr	r2, [pc, #36]	; (800d4d0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6013      	str	r3, [r2, #0]
}
 800d4ae:	bf00      	nop
 800d4b0:	3718      	adds	r7, #24
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	20000310 	.word	0x20000310
 800d4bc:	20000234 	.word	0x20000234
 800d4c0:	20000314 	.word	0x20000314
 800d4c4:	200002f8 	.word	0x200002f8
 800d4c8:	200002c8 	.word	0x200002c8
 800d4cc:	200002c4 	.word	0x200002c4
 800d4d0:	2000032c 	.word	0x2000032c

0800d4d4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800d4de:	f000 fa47 	bl	800d970 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800d4e2:	4b11      	ldr	r3, [pc, #68]	; (800d528 <xTimerCreateTimerTask+0x54>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00b      	beq.n	800d502 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800d4ea:	4b10      	ldr	r3, [pc, #64]	; (800d52c <xTimerCreateTimerTask+0x58>)
 800d4ec:	9301      	str	r3, [sp, #4]
 800d4ee:	2302      	movs	r3, #2
 800d4f0:	9300      	str	r3, [sp, #0]
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d4f8:	490d      	ldr	r1, [pc, #52]	; (800d530 <xTimerCreateTimerTask+0x5c>)
 800d4fa:	480e      	ldr	r0, [pc, #56]	; (800d534 <xTimerCreateTimerTask+0x60>)
 800d4fc:	f7ff f844 	bl	800c588 <xTaskCreate>
 800d500:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d10a      	bne.n	800d51e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800d508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50c:	f383 8811 	msr	BASEPRI, r3
 800d510:	f3bf 8f6f 	isb	sy
 800d514:	f3bf 8f4f 	dsb	sy
 800d518:	603b      	str	r3, [r7, #0]
    }
 800d51a:	bf00      	nop
 800d51c:	e7fe      	b.n	800d51c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800d51e:	687b      	ldr	r3, [r7, #4]
    }
 800d520:	4618      	mov	r0, r3
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	20000368 	.word	0x20000368
 800d52c:	2000036c 	.word	0x2000036c
 800d530:	080122b4 	.word	0x080122b4
 800d534:	0800d5dd 	.word	0x0800d5dd

0800d538 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800d544:	e008      	b.n	800d558 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	699b      	ldr	r3, [r3, #24]
 800d54a:	68ba      	ldr	r2, [r7, #8]
 800d54c:	4413      	add	r3, r2
 800d54e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6a1b      	ldr	r3, [r3, #32]
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	699a      	ldr	r2, [r3, #24]
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	18d1      	adds	r1, r2, r3
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	687a      	ldr	r2, [r7, #4]
 800d564:	68f8      	ldr	r0, [r7, #12]
 800d566:	f000 f8dd 	bl	800d724 <prvInsertTimerInActiveList>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d1ea      	bne.n	800d546 <prvReloadTimer+0xe>
        }
    }
 800d570:	bf00      	nop
 800d572:	bf00      	nop
 800d574:	3710      	adds	r7, #16
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
	...

0800d57c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d586:	4b14      	ldr	r3, [pc, #80]	; (800d5d8 <prvProcessExpiredTimer+0x5c>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	68db      	ldr	r3, [r3, #12]
 800d58e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	3304      	adds	r3, #4
 800d594:	4618      	mov	r0, r3
 800d596:	f7fe fcdb 	bl	800bf50 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5a0:	f003 0304 	and.w	r3, r3, #4
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d005      	beq.n	800d5b4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800d5a8:	683a      	ldr	r2, [r7, #0]
 800d5aa:	6879      	ldr	r1, [r7, #4]
 800d5ac:	68f8      	ldr	r0, [r7, #12]
 800d5ae:	f7ff ffc3 	bl	800d538 <prvReloadTimer>
 800d5b2:	e008      	b.n	800d5c6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5ba:	f023 0301 	bic.w	r3, r3, #1
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6a1b      	ldr	r3, [r3, #32]
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	4798      	blx	r3
    }
 800d5ce:	bf00      	nop
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	20000360 	.word	0x20000360

0800d5dc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d5e4:	f107 0308 	add.w	r3, r7, #8
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f000 f857 	bl	800d69c <prvGetNextExpireTime>
 800d5ee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	68f8      	ldr	r0, [r7, #12]
 800d5f6:	f000 f803 	bl	800d600 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800d5fa:	f000 f8d5 	bl	800d7a8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d5fe:	e7f1      	b.n	800d5e4 <prvTimerTask+0x8>

0800d600 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800d60a:	f7ff f9bf 	bl	800c98c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d60e:	f107 0308 	add.w	r3, r7, #8
 800d612:	4618      	mov	r0, r3
 800d614:	f000 f866 	bl	800d6e4 <prvSampleTimeNow>
 800d618:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d130      	bne.n	800d682 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10a      	bne.n	800d63c <prvProcessTimerOrBlockTask+0x3c>
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d806      	bhi.n	800d63c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800d62e:	f7ff f9bb 	bl	800c9a8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d632:	68f9      	ldr	r1, [r7, #12]
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f7ff ffa1 	bl	800d57c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800d63a:	e024      	b.n	800d686 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d008      	beq.n	800d654 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d642:	4b13      	ldr	r3, [pc, #76]	; (800d690 <prvProcessTimerOrBlockTask+0x90>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d101      	bne.n	800d650 <prvProcessTimerOrBlockTask+0x50>
 800d64c:	2301      	movs	r3, #1
 800d64e:	e000      	b.n	800d652 <prvProcessTimerOrBlockTask+0x52>
 800d650:	2300      	movs	r3, #0
 800d652:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d654:	4b0f      	ldr	r3, [pc, #60]	; (800d694 <prvProcessTimerOrBlockTask+0x94>)
 800d656:	6818      	ldr	r0, [r3, #0]
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	1ad3      	subs	r3, r2, r3
 800d65e:	683a      	ldr	r2, [r7, #0]
 800d660:	4619      	mov	r1, r3
 800d662:	f7fe ff5d 	bl	800c520 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800d666:	f7ff f99f 	bl	800c9a8 <xTaskResumeAll>
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d10a      	bne.n	800d686 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800d670:	4b09      	ldr	r3, [pc, #36]	; (800d698 <prvProcessTimerOrBlockTask+0x98>)
 800d672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d676:	601a      	str	r2, [r3, #0]
 800d678:	f3bf 8f4f 	dsb	sy
 800d67c:	f3bf 8f6f 	isb	sy
    }
 800d680:	e001      	b.n	800d686 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800d682:	f7ff f991 	bl	800c9a8 <xTaskResumeAll>
    }
 800d686:	bf00      	nop
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	20000364 	.word	0x20000364
 800d694:	20000368 	.word	0x20000368
 800d698:	e000ed04 	.word	0xe000ed04

0800d69c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800d69c:	b480      	push	{r7}
 800d69e:	b085      	sub	sp, #20
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d6a4:	4b0e      	ldr	r3, [pc, #56]	; (800d6e0 <prvGetNextExpireTime+0x44>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d101      	bne.n	800d6b2 <prvGetNextExpireTime+0x16>
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	e000      	b.n	800d6b4 <prvGetNextExpireTime+0x18>
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d105      	bne.n	800d6cc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d6c0:	4b07      	ldr	r3, [pc, #28]	; (800d6e0 <prvGetNextExpireTime+0x44>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	60fb      	str	r3, [r7, #12]
 800d6ca:	e001      	b.n	800d6d0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
    }
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3714      	adds	r7, #20
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	20000360 	.word	0x20000360

0800d6e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b084      	sub	sp, #16
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800d6ec:	f7ff fa58 	bl	800cba0 <xTaskGetTickCount>
 800d6f0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800d6f2:	4b0b      	ldr	r3, [pc, #44]	; (800d720 <prvSampleTimeNow+0x3c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	68fa      	ldr	r2, [r7, #12]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d205      	bcs.n	800d708 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800d6fc:	f000 f912 	bl	800d924 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2201      	movs	r2, #1
 800d704:	601a      	str	r2, [r3, #0]
 800d706:	e002      	b.n	800d70e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800d70e:	4a04      	ldr	r2, [pc, #16]	; (800d720 <prvSampleTimeNow+0x3c>)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800d714:	68fb      	ldr	r3, [r7, #12]
    }
 800d716:	4618      	mov	r0, r3
 800d718:	3710      	adds	r7, #16
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	20000370 	.word	0x20000370

0800d724 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800d724:	b580      	push	{r7, lr}
 800d726:	b086      	sub	sp, #24
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	607a      	str	r2, [r7, #4]
 800d730:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800d732:	2300      	movs	r3, #0
 800d734:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	68ba      	ldr	r2, [r7, #8]
 800d73a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800d742:	68ba      	ldr	r2, [r7, #8]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	429a      	cmp	r2, r3
 800d748:	d812      	bhi.n	800d770 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	1ad2      	subs	r2, r2, r3
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	699b      	ldr	r3, [r3, #24]
 800d754:	429a      	cmp	r2, r3
 800d756:	d302      	bcc.n	800d75e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800d758:	2301      	movs	r3, #1
 800d75a:	617b      	str	r3, [r7, #20]
 800d75c:	e01b      	b.n	800d796 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d75e:	4b10      	ldr	r3, [pc, #64]	; (800d7a0 <prvInsertTimerInActiveList+0x7c>)
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	3304      	adds	r3, #4
 800d766:	4619      	mov	r1, r3
 800d768:	4610      	mov	r0, r2
 800d76a:	f7fe fbb8 	bl	800bede <vListInsert>
 800d76e:	e012      	b.n	800d796 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	429a      	cmp	r2, r3
 800d776:	d206      	bcs.n	800d786 <prvInsertTimerInActiveList+0x62>
 800d778:	68ba      	ldr	r2, [r7, #8]
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d302      	bcc.n	800d786 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800d780:	2301      	movs	r3, #1
 800d782:	617b      	str	r3, [r7, #20]
 800d784:	e007      	b.n	800d796 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d786:	4b07      	ldr	r3, [pc, #28]	; (800d7a4 <prvInsertTimerInActiveList+0x80>)
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	3304      	adds	r3, #4
 800d78e:	4619      	mov	r1, r3
 800d790:	4610      	mov	r0, r2
 800d792:	f7fe fba4 	bl	800bede <vListInsert>
            }
        }

        return xProcessTimerNow;
 800d796:	697b      	ldr	r3, [r7, #20]
    }
 800d798:	4618      	mov	r0, r3
 800d79a:	3718      	adds	r7, #24
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	20000364 	.word	0x20000364
 800d7a4:	20000360 	.word	0x20000360

0800d7a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b088      	sub	sp, #32
 800d7ac:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7ae:	e0a6      	b.n	800d8fe <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	f2c0 80a2 	blt.w	800d8fc <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	695b      	ldr	r3, [r3, #20]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d004      	beq.n	800d7ce <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	3304      	adds	r3, #4
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7fe fbc1 	bl	800bf50 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d7ce:	1d3b      	adds	r3, r7, #4
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7ff ff87 	bl	800d6e4 <prvSampleTimeNow>
 800d7d6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	2b08      	cmp	r3, #8
 800d7de:	f200 808e 	bhi.w	800d8fe <prvProcessReceivedCommands+0x156>
 800d7e2:	a201      	add	r2, pc, #4	; (adr r2, 800d7e8 <prvProcessReceivedCommands+0x40>)
 800d7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e8:	0800d80d 	.word	0x0800d80d
 800d7ec:	0800d80d 	.word	0x0800d80d
 800d7f0:	0800d875 	.word	0x0800d875
 800d7f4:	0800d889 	.word	0x0800d889
 800d7f8:	0800d8d3 	.word	0x0800d8d3
 800d7fc:	0800d80d 	.word	0x0800d80d
 800d800:	0800d80d 	.word	0x0800d80d
 800d804:	0800d875 	.word	0x0800d875
 800d808:	0800d889 	.word	0x0800d889
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d812:	f043 0301 	orr.w	r3, r3, #1
 800d816:	b2da      	uxtb	r2, r3
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	699b      	ldr	r3, [r3, #24]
 800d824:	18d1      	adds	r1, r2, r3
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	69ba      	ldr	r2, [r7, #24]
 800d82a:	69f8      	ldr	r0, [r7, #28]
 800d82c:	f7ff ff7a 	bl	800d724 <prvInsertTimerInActiveList>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d063      	beq.n	800d8fe <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d83c:	f003 0304 	and.w	r3, r3, #4
 800d840:	2b00      	cmp	r3, #0
 800d842:	d009      	beq.n	800d858 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	699b      	ldr	r3, [r3, #24]
 800d84a:	4413      	add	r3, r2
 800d84c:	69ba      	ldr	r2, [r7, #24]
 800d84e:	4619      	mov	r1, r3
 800d850:	69f8      	ldr	r0, [r7, #28]
 800d852:	f7ff fe71 	bl	800d538 <prvReloadTimer>
 800d856:	e008      	b.n	800d86a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d85e:	f023 0301 	bic.w	r3, r3, #1
 800d862:	b2da      	uxtb	r2, r3
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	6a1b      	ldr	r3, [r3, #32]
 800d86e:	69f8      	ldr	r0, [r7, #28]
 800d870:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800d872:	e044      	b.n	800d8fe <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d87a:	f023 0301 	bic.w	r3, r3, #1
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800d886:	e03a      	b.n	800d8fe <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d88e:	f043 0301 	orr.w	r3, r3, #1
 800d892:	b2da      	uxtb	r2, r3
 800d894:	69fb      	ldr	r3, [r7, #28]
 800d896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d89a:	68fa      	ldr	r2, [r7, #12]
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	699b      	ldr	r3, [r3, #24]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d10a      	bne.n	800d8be <prvProcessReceivedCommands+0x116>
        __asm volatile
 800d8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ac:	f383 8811 	msr	BASEPRI, r3
 800d8b0:	f3bf 8f6f 	isb	sy
 800d8b4:	f3bf 8f4f 	dsb	sy
 800d8b8:	617b      	str	r3, [r7, #20]
    }
 800d8ba:	bf00      	nop
 800d8bc:	e7fe      	b.n	800d8bc <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	699a      	ldr	r2, [r3, #24]
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	18d1      	adds	r1, r2, r3
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	69ba      	ldr	r2, [r7, #24]
 800d8ca:	69f8      	ldr	r0, [r7, #28]
 800d8cc:	f7ff ff2a 	bl	800d724 <prvInsertTimerInActiveList>
                        break;
 800d8d0:	e015      	b.n	800d8fe <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d8d2:	69fb      	ldr	r3, [r7, #28]
 800d8d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8d8:	f003 0302 	and.w	r3, r3, #2
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d103      	bne.n	800d8e8 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 800d8e0:	69f8      	ldr	r0, [r7, #28]
 800d8e2:	f000 fb6b 	bl	800dfbc <vPortFree>
 800d8e6:	e00a      	b.n	800d8fe <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8ee:	f023 0301 	bic.w	r3, r3, #1
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800d8fa:	e000      	b.n	800d8fe <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800d8fc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d8fe:	4b08      	ldr	r3, [pc, #32]	; (800d920 <prvProcessReceivedCommands+0x178>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f107 0108 	add.w	r1, r7, #8
 800d906:	2200      	movs	r2, #0
 800d908:	4618      	mov	r0, r3
 800d90a:	f7fe fc4d 	bl	800c1a8 <xQueueReceive>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	f47f af4d 	bne.w	800d7b0 <prvProcessReceivedCommands+0x8>
        }
    }
 800d916:	bf00      	nop
 800d918:	bf00      	nop
 800d91a:	3720      	adds	r7, #32
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	20000368 	.word	0x20000368

0800d924 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d92a:	e009      	b.n	800d940 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d92c:	4b0e      	ldr	r3, [pc, #56]	; (800d968 <prvSwitchTimerLists+0x44>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	68db      	ldr	r3, [r3, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800d936:	f04f 31ff 	mov.w	r1, #4294967295
 800d93a:	6838      	ldr	r0, [r7, #0]
 800d93c:	f7ff fe1e 	bl	800d57c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d940:	4b09      	ldr	r3, [pc, #36]	; (800d968 <prvSwitchTimerLists+0x44>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d1f0      	bne.n	800d92c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800d94a:	4b07      	ldr	r3, [pc, #28]	; (800d968 <prvSwitchTimerLists+0x44>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800d950:	4b06      	ldr	r3, [pc, #24]	; (800d96c <prvSwitchTimerLists+0x48>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a04      	ldr	r2, [pc, #16]	; (800d968 <prvSwitchTimerLists+0x44>)
 800d956:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800d958:	4a04      	ldr	r2, [pc, #16]	; (800d96c <prvSwitchTimerLists+0x48>)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6013      	str	r3, [r2, #0]
    }
 800d95e:	bf00      	nop
 800d960:	3708      	adds	r7, #8
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	20000360 	.word	0x20000360
 800d96c:	20000364 	.word	0x20000364

0800d970 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800d970:	b580      	push	{r7, lr}
 800d972:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800d974:	f000 f960 	bl	800dc38 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800d978:	4b12      	ldr	r3, [pc, #72]	; (800d9c4 <prvCheckForValidListAndQueue+0x54>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d11d      	bne.n	800d9bc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800d980:	4811      	ldr	r0, [pc, #68]	; (800d9c8 <prvCheckForValidListAndQueue+0x58>)
 800d982:	f7fe fa7f 	bl	800be84 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800d986:	4811      	ldr	r0, [pc, #68]	; (800d9cc <prvCheckForValidListAndQueue+0x5c>)
 800d988:	f7fe fa7c 	bl	800be84 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800d98c:	4b10      	ldr	r3, [pc, #64]	; (800d9d0 <prvCheckForValidListAndQueue+0x60>)
 800d98e:	4a0e      	ldr	r2, [pc, #56]	; (800d9c8 <prvCheckForValidListAndQueue+0x58>)
 800d990:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800d992:	4b10      	ldr	r3, [pc, #64]	; (800d9d4 <prvCheckForValidListAndQueue+0x64>)
 800d994:	4a0d      	ldr	r2, [pc, #52]	; (800d9cc <prvCheckForValidListAndQueue+0x5c>)
 800d996:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800d998:	2200      	movs	r2, #0
 800d99a:	210c      	movs	r1, #12
 800d99c:	200a      	movs	r0, #10
 800d99e:	f7fe fb91 	bl	800c0c4 <xQueueGenericCreate>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	4a07      	ldr	r2, [pc, #28]	; (800d9c4 <prvCheckForValidListAndQueue+0x54>)
 800d9a6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800d9a8:	4b06      	ldr	r3, [pc, #24]	; (800d9c4 <prvCheckForValidListAndQueue+0x54>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d005      	beq.n	800d9bc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d9b0:	4b04      	ldr	r3, [pc, #16]	; (800d9c4 <prvCheckForValidListAndQueue+0x54>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4908      	ldr	r1, [pc, #32]	; (800d9d8 <prvCheckForValidListAndQueue+0x68>)
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fe fd64 	bl	800c484 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800d9bc:	f000 f96c 	bl	800dc98 <vPortExitCritical>
    }
 800d9c0:	bf00      	nop
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	20000368 	.word	0x20000368
 800d9c8:	20000338 	.word	0x20000338
 800d9cc:	2000034c 	.word	0x2000034c
 800d9d0:	20000360 	.word	0x20000360
 800d9d4:	20000364 	.word	0x20000364
 800d9d8:	080122bc 	.word	0x080122bc

0800d9dc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	60b9      	str	r1, [r7, #8]
 800d9e6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	3b04      	subs	r3, #4
 800d9ec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d9f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	3b04      	subs	r3, #4
 800d9fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	f023 0201 	bic.w	r2, r3, #1
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	3b04      	subs	r3, #4
 800da0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800da0c:	4a0c      	ldr	r2, [pc, #48]	; (800da40 <pxPortInitialiseStack+0x64>)
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	3b14      	subs	r3, #20
 800da16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	3b04      	subs	r3, #4
 800da22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f06f 0202 	mvn.w	r2, #2
 800da2a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	3b20      	subs	r3, #32
 800da30:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800da32:	68fb      	ldr	r3, [r7, #12]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3714      	adds	r7, #20
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr
 800da40:	0800da45 	.word	0x0800da45

0800da44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800da44:	b480      	push	{r7}
 800da46:	b085      	sub	sp, #20
 800da48:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800da4a:	2300      	movs	r3, #0
 800da4c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800da4e:	4b12      	ldr	r3, [pc, #72]	; (800da98 <prvTaskExitError+0x54>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da56:	d00a      	beq.n	800da6e <prvTaskExitError+0x2a>
        __asm volatile
 800da58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da5c:	f383 8811 	msr	BASEPRI, r3
 800da60:	f3bf 8f6f 	isb	sy
 800da64:	f3bf 8f4f 	dsb	sy
 800da68:	60fb      	str	r3, [r7, #12]
    }
 800da6a:	bf00      	nop
 800da6c:	e7fe      	b.n	800da6c <prvTaskExitError+0x28>
        __asm volatile
 800da6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da72:	f383 8811 	msr	BASEPRI, r3
 800da76:	f3bf 8f6f 	isb	sy
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	60bb      	str	r3, [r7, #8]
    }
 800da80:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800da82:	bf00      	nop
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d0fc      	beq.n	800da84 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800da8a:	bf00      	nop
 800da8c:	bf00      	nop
 800da8e:	3714      	adds	r7, #20
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr
 800da98:	2000001c 	.word	0x2000001c
 800da9c:	00000000 	.word	0x00000000

0800daa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800daa0:	4b07      	ldr	r3, [pc, #28]	; (800dac0 <pxCurrentTCBConst2>)
 800daa2:	6819      	ldr	r1, [r3, #0]
 800daa4:	6808      	ldr	r0, [r1, #0]
 800daa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daaa:	f380 8809 	msr	PSP, r0
 800daae:	f3bf 8f6f 	isb	sy
 800dab2:	f04f 0000 	mov.w	r0, #0
 800dab6:	f380 8811 	msr	BASEPRI, r0
 800daba:	4770      	bx	lr
 800dabc:	f3af 8000 	nop.w

0800dac0 <pxCurrentTCBConst2>:
 800dac0:	20000234 	.word	0x20000234
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800dac4:	bf00      	nop
 800dac6:	bf00      	nop

0800dac8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800dac8:	4808      	ldr	r0, [pc, #32]	; (800daec <prvPortStartFirstTask+0x24>)
 800daca:	6800      	ldr	r0, [r0, #0]
 800dacc:	6800      	ldr	r0, [r0, #0]
 800dace:	f380 8808 	msr	MSP, r0
 800dad2:	f04f 0000 	mov.w	r0, #0
 800dad6:	f380 8814 	msr	CONTROL, r0
 800dada:	b662      	cpsie	i
 800dadc:	b661      	cpsie	f
 800dade:	f3bf 8f4f 	dsb	sy
 800dae2:	f3bf 8f6f 	isb	sy
 800dae6:	df00      	svc	0
 800dae8:	bf00      	nop
 800daea:	0000      	.short	0x0000
 800daec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800daf0:	bf00      	nop
 800daf2:	bf00      	nop

0800daf4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b086      	sub	sp, #24
 800daf8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dafa:	4b46      	ldr	r3, [pc, #280]	; (800dc14 <xPortStartScheduler+0x120>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4a46      	ldr	r2, [pc, #280]	; (800dc18 <xPortStartScheduler+0x124>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d10a      	bne.n	800db1a <xPortStartScheduler+0x26>
        __asm volatile
 800db04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	613b      	str	r3, [r7, #16]
    }
 800db16:	bf00      	nop
 800db18:	e7fe      	b.n	800db18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800db1a:	4b3e      	ldr	r3, [pc, #248]	; (800dc14 <xPortStartScheduler+0x120>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	4a3f      	ldr	r2, [pc, #252]	; (800dc1c <xPortStartScheduler+0x128>)
 800db20:	4293      	cmp	r3, r2
 800db22:	d10a      	bne.n	800db3a <xPortStartScheduler+0x46>
        __asm volatile
 800db24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db28:	f383 8811 	msr	BASEPRI, r3
 800db2c:	f3bf 8f6f 	isb	sy
 800db30:	f3bf 8f4f 	dsb	sy
 800db34:	60fb      	str	r3, [r7, #12]
    }
 800db36:	bf00      	nop
 800db38:	e7fe      	b.n	800db38 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800db3a:	4b39      	ldr	r3, [pc, #228]	; (800dc20 <xPortStartScheduler+0x12c>)
 800db3c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	b2db      	uxtb	r3, r3
 800db44:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	22ff      	movs	r2, #255	; 0xff
 800db4a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	b2db      	uxtb	r3, r3
 800db52:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800db54:	78fb      	ldrb	r3, [r7, #3]
 800db56:	b2db      	uxtb	r3, r3
 800db58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	4b31      	ldr	r3, [pc, #196]	; (800dc24 <xPortStartScheduler+0x130>)
 800db60:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800db62:	4b31      	ldr	r3, [pc, #196]	; (800dc28 <xPortStartScheduler+0x134>)
 800db64:	2207      	movs	r2, #7
 800db66:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db68:	e009      	b.n	800db7e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800db6a:	4b2f      	ldr	r3, [pc, #188]	; (800dc28 <xPortStartScheduler+0x134>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	3b01      	subs	r3, #1
 800db70:	4a2d      	ldr	r2, [pc, #180]	; (800dc28 <xPortStartScheduler+0x134>)
 800db72:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800db74:	78fb      	ldrb	r3, [r7, #3]
 800db76:	b2db      	uxtb	r3, r3
 800db78:	005b      	lsls	r3, r3, #1
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db7e:	78fb      	ldrb	r3, [r7, #3]
 800db80:	b2db      	uxtb	r3, r3
 800db82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db86:	2b80      	cmp	r3, #128	; 0x80
 800db88:	d0ef      	beq.n	800db6a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800db8a:	4b27      	ldr	r3, [pc, #156]	; (800dc28 <xPortStartScheduler+0x134>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f1c3 0307 	rsb	r3, r3, #7
 800db92:	2b04      	cmp	r3, #4
 800db94:	d00a      	beq.n	800dbac <xPortStartScheduler+0xb8>
        __asm volatile
 800db96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9a:	f383 8811 	msr	BASEPRI, r3
 800db9e:	f3bf 8f6f 	isb	sy
 800dba2:	f3bf 8f4f 	dsb	sy
 800dba6:	60bb      	str	r3, [r7, #8]
    }
 800dba8:	bf00      	nop
 800dbaa:	e7fe      	b.n	800dbaa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dbac:	4b1e      	ldr	r3, [pc, #120]	; (800dc28 <xPortStartScheduler+0x134>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	021b      	lsls	r3, r3, #8
 800dbb2:	4a1d      	ldr	r2, [pc, #116]	; (800dc28 <xPortStartScheduler+0x134>)
 800dbb4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dbb6:	4b1c      	ldr	r3, [pc, #112]	; (800dc28 <xPortStartScheduler+0x134>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dbbe:	4a1a      	ldr	r2, [pc, #104]	; (800dc28 <xPortStartScheduler+0x134>)
 800dbc0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	b2da      	uxtb	r2, r3
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800dbca:	4b18      	ldr	r3, [pc, #96]	; (800dc2c <xPortStartScheduler+0x138>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a17      	ldr	r2, [pc, #92]	; (800dc2c <xPortStartScheduler+0x138>)
 800dbd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dbd4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800dbd6:	4b15      	ldr	r3, [pc, #84]	; (800dc2c <xPortStartScheduler+0x138>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4a14      	ldr	r2, [pc, #80]	; (800dc2c <xPortStartScheduler+0x138>)
 800dbdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dbe0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800dbe2:	f000 f8db 	bl	800dd9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800dbe6:	4b12      	ldr	r3, [pc, #72]	; (800dc30 <xPortStartScheduler+0x13c>)
 800dbe8:	2200      	movs	r2, #0
 800dbea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800dbec:	f000 f8fa 	bl	800dde4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dbf0:	4b10      	ldr	r3, [pc, #64]	; (800dc34 <xPortStartScheduler+0x140>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a0f      	ldr	r2, [pc, #60]	; (800dc34 <xPortStartScheduler+0x140>)
 800dbf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dbfa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800dbfc:	f7ff ff64 	bl	800dac8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800dc00:	f7ff f8f4 	bl	800cdec <vTaskSwitchContext>
    prvTaskExitError();
 800dc04:	f7ff ff1e 	bl	800da44 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3718      	adds	r7, #24
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	e000ed00 	.word	0xe000ed00
 800dc18:	410fc271 	.word	0x410fc271
 800dc1c:	410fc270 	.word	0x410fc270
 800dc20:	e000e400 	.word	0xe000e400
 800dc24:	20000374 	.word	0x20000374
 800dc28:	20000378 	.word	0x20000378
 800dc2c:	e000ed20 	.word	0xe000ed20
 800dc30:	2000001c 	.word	0x2000001c
 800dc34:	e000ef34 	.word	0xe000ef34

0800dc38 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b083      	sub	sp, #12
 800dc3c:	af00      	add	r7, sp, #0
        __asm volatile
 800dc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc42:	f383 8811 	msr	BASEPRI, r3
 800dc46:	f3bf 8f6f 	isb	sy
 800dc4a:	f3bf 8f4f 	dsb	sy
 800dc4e:	607b      	str	r3, [r7, #4]
    }
 800dc50:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800dc52:	4b0f      	ldr	r3, [pc, #60]	; (800dc90 <vPortEnterCritical+0x58>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	3301      	adds	r3, #1
 800dc58:	4a0d      	ldr	r2, [pc, #52]	; (800dc90 <vPortEnterCritical+0x58>)
 800dc5a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800dc5c:	4b0c      	ldr	r3, [pc, #48]	; (800dc90 <vPortEnterCritical+0x58>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d10f      	bne.n	800dc84 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dc64:	4b0b      	ldr	r3, [pc, #44]	; (800dc94 <vPortEnterCritical+0x5c>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d00a      	beq.n	800dc84 <vPortEnterCritical+0x4c>
        __asm volatile
 800dc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc72:	f383 8811 	msr	BASEPRI, r3
 800dc76:	f3bf 8f6f 	isb	sy
 800dc7a:	f3bf 8f4f 	dsb	sy
 800dc7e:	603b      	str	r3, [r7, #0]
    }
 800dc80:	bf00      	nop
 800dc82:	e7fe      	b.n	800dc82 <vPortEnterCritical+0x4a>
    }
}
 800dc84:	bf00      	nop
 800dc86:	370c      	adds	r7, #12
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr
 800dc90:	2000001c 	.word	0x2000001c
 800dc94:	e000ed04 	.word	0xe000ed04

0800dc98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b083      	sub	sp, #12
 800dc9c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800dc9e:	4b12      	ldr	r3, [pc, #72]	; (800dce8 <vPortExitCritical+0x50>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d10a      	bne.n	800dcbc <vPortExitCritical+0x24>
        __asm volatile
 800dca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcaa:	f383 8811 	msr	BASEPRI, r3
 800dcae:	f3bf 8f6f 	isb	sy
 800dcb2:	f3bf 8f4f 	dsb	sy
 800dcb6:	607b      	str	r3, [r7, #4]
    }
 800dcb8:	bf00      	nop
 800dcba:	e7fe      	b.n	800dcba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800dcbc:	4b0a      	ldr	r3, [pc, #40]	; (800dce8 <vPortExitCritical+0x50>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	3b01      	subs	r3, #1
 800dcc2:	4a09      	ldr	r2, [pc, #36]	; (800dce8 <vPortExitCritical+0x50>)
 800dcc4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800dcc6:	4b08      	ldr	r3, [pc, #32]	; (800dce8 <vPortExitCritical+0x50>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d105      	bne.n	800dcda <vPortExitCritical+0x42>
 800dcce:	2300      	movs	r3, #0
 800dcd0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800dcd8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800dcda:	bf00      	nop
 800dcdc:	370c      	adds	r7, #12
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	2000001c 	.word	0x2000001c
 800dcec:	00000000 	.word	0x00000000

0800dcf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800dcf0:	f3ef 8009 	mrs	r0, PSP
 800dcf4:	f3bf 8f6f 	isb	sy
 800dcf8:	4b15      	ldr	r3, [pc, #84]	; (800dd50 <pxCurrentTCBConst>)
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	f01e 0f10 	tst.w	lr, #16
 800dd00:	bf08      	it	eq
 800dd02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dd06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd0a:	6010      	str	r0, [r2, #0]
 800dd0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dd10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dd14:	f380 8811 	msr	BASEPRI, r0
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	f7ff f864 	bl	800cdec <vTaskSwitchContext>
 800dd24:	f04f 0000 	mov.w	r0, #0
 800dd28:	f380 8811 	msr	BASEPRI, r0
 800dd2c:	bc09      	pop	{r0, r3}
 800dd2e:	6819      	ldr	r1, [r3, #0]
 800dd30:	6808      	ldr	r0, [r1, #0]
 800dd32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd36:	f01e 0f10 	tst.w	lr, #16
 800dd3a:	bf08      	it	eq
 800dd3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dd40:	f380 8809 	msr	PSP, r0
 800dd44:	f3bf 8f6f 	isb	sy
 800dd48:	4770      	bx	lr
 800dd4a:	bf00      	nop
 800dd4c:	f3af 8000 	nop.w

0800dd50 <pxCurrentTCBConst>:
 800dd50:	20000234 	.word	0x20000234
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800dd54:	bf00      	nop
 800dd56:	bf00      	nop

0800dd58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b082      	sub	sp, #8
 800dd5c:	af00      	add	r7, sp, #0
        __asm volatile
 800dd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	607b      	str	r3, [r7, #4]
    }
 800dd70:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800dd72:	f7fe ff25 	bl	800cbc0 <xTaskIncrementTick>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d003      	beq.n	800dd84 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dd7c:	4b06      	ldr	r3, [pc, #24]	; (800dd98 <SysTick_Handler+0x40>)
 800dd7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd82:	601a      	str	r2, [r3, #0]
 800dd84:	2300      	movs	r3, #0
 800dd86:	603b      	str	r3, [r7, #0]
        __asm volatile
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	f383 8811 	msr	BASEPRI, r3
    }
 800dd8e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800dd90:	bf00      	nop
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	e000ed04 	.word	0xe000ed04

0800dd9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dda0:	4b0b      	ldr	r3, [pc, #44]	; (800ddd0 <vPortSetupTimerInterrupt+0x34>)
 800dda2:	2200      	movs	r2, #0
 800dda4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dda6:	4b0b      	ldr	r3, [pc, #44]	; (800ddd4 <vPortSetupTimerInterrupt+0x38>)
 800dda8:	2200      	movs	r2, #0
 800ddaa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ddac:	4b0a      	ldr	r3, [pc, #40]	; (800ddd8 <vPortSetupTimerInterrupt+0x3c>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a0a      	ldr	r2, [pc, #40]	; (800dddc <vPortSetupTimerInterrupt+0x40>)
 800ddb2:	fba2 2303 	umull	r2, r3, r2, r3
 800ddb6:	099b      	lsrs	r3, r3, #6
 800ddb8:	4a09      	ldr	r2, [pc, #36]	; (800dde0 <vPortSetupTimerInterrupt+0x44>)
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ddbe:	4b04      	ldr	r3, [pc, #16]	; (800ddd0 <vPortSetupTimerInterrupt+0x34>)
 800ddc0:	2207      	movs	r2, #7
 800ddc2:	601a      	str	r2, [r3, #0]
}
 800ddc4:	bf00      	nop
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr
 800ddce:	bf00      	nop
 800ddd0:	e000e010 	.word	0xe000e010
 800ddd4:	e000e018 	.word	0xe000e018
 800ddd8:	2000000c 	.word	0x2000000c
 800dddc:	10624dd3 	.word	0x10624dd3
 800dde0:	e000e014 	.word	0xe000e014

0800dde4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800dde4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ddf4 <vPortEnableVFP+0x10>
 800dde8:	6801      	ldr	r1, [r0, #0]
 800ddea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ddee:	6001      	str	r1, [r0, #0]
 800ddf0:	4770      	bx	lr
 800ddf2:	0000      	.short	0x0000
 800ddf4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800ddf8:	bf00      	nop
 800ddfa:	bf00      	nop

0800ddfc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b08a      	sub	sp, #40	; 0x28
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800de04:	2300      	movs	r3, #0
 800de06:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800de08:	f7fe fdc0 	bl	800c98c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800de0c:	4b65      	ldr	r3, [pc, #404]	; (800dfa4 <pvPortMalloc+0x1a8>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d101      	bne.n	800de18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800de14:	f000 f934 	bl	800e080 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800de18:	4b63      	ldr	r3, [pc, #396]	; (800dfa8 <pvPortMalloc+0x1ac>)
 800de1a:	681a      	ldr	r2, [r3, #0]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4013      	ands	r3, r2
 800de20:	2b00      	cmp	r3, #0
 800de22:	f040 80a7 	bne.w	800df74 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d02d      	beq.n	800de88 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800de2c:	2208      	movs	r2, #8
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	429a      	cmp	r2, r3
 800de36:	d227      	bcs.n	800de88 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800de38:	2208      	movs	r2, #8
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4413      	add	r3, r2
 800de3e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f003 0307 	and.w	r3, r3, #7
 800de46:	2b00      	cmp	r3, #0
 800de48:	d021      	beq.n	800de8e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f023 0307 	bic.w	r3, r3, #7
 800de50:	3308      	adds	r3, #8
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	429a      	cmp	r2, r3
 800de56:	d214      	bcs.n	800de82 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f023 0307 	bic.w	r3, r3, #7
 800de5e:	3308      	adds	r3, #8
 800de60:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f003 0307 	and.w	r3, r3, #7
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d010      	beq.n	800de8e <pvPortMalloc+0x92>
        __asm volatile
 800de6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de70:	f383 8811 	msr	BASEPRI, r3
 800de74:	f3bf 8f6f 	isb	sy
 800de78:	f3bf 8f4f 	dsb	sy
 800de7c:	617b      	str	r3, [r7, #20]
    }
 800de7e:	bf00      	nop
 800de80:	e7fe      	b.n	800de80 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800de82:	2300      	movs	r3, #0
 800de84:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800de86:	e002      	b.n	800de8e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800de88:	2300      	movs	r3, #0
 800de8a:	607b      	str	r3, [r7, #4]
 800de8c:	e000      	b.n	800de90 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800de8e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d06e      	beq.n	800df74 <pvPortMalloc+0x178>
 800de96:	4b45      	ldr	r3, [pc, #276]	; (800dfac <pvPortMalloc+0x1b0>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d869      	bhi.n	800df74 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800dea0:	4b43      	ldr	r3, [pc, #268]	; (800dfb0 <pvPortMalloc+0x1b4>)
 800dea2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800dea4:	4b42      	ldr	r3, [pc, #264]	; (800dfb0 <pvPortMalloc+0x1b4>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800deaa:	e004      	b.n	800deb6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800deac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800deb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800deb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	429a      	cmp	r2, r3
 800debe:	d903      	bls.n	800dec8 <pvPortMalloc+0xcc>
 800dec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d1f1      	bne.n	800deac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800dec8:	4b36      	ldr	r3, [pc, #216]	; (800dfa4 <pvPortMalloc+0x1a8>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dece:	429a      	cmp	r2, r3
 800ded0:	d050      	beq.n	800df74 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ded2:	6a3b      	ldr	r3, [r7, #32]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	2208      	movs	r2, #8
 800ded8:	4413      	add	r3, r2
 800deda:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	6a3b      	ldr	r3, [r7, #32]
 800dee2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee6:	685a      	ldr	r2, [r3, #4]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	1ad2      	subs	r2, r2, r3
 800deec:	2308      	movs	r3, #8
 800deee:	005b      	lsls	r3, r3, #1
 800def0:	429a      	cmp	r2, r3
 800def2:	d91f      	bls.n	800df34 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800def4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	4413      	add	r3, r2
 800defa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	f003 0307 	and.w	r3, r3, #7
 800df02:	2b00      	cmp	r3, #0
 800df04:	d00a      	beq.n	800df1c <pvPortMalloc+0x120>
        __asm volatile
 800df06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0a:	f383 8811 	msr	BASEPRI, r3
 800df0e:	f3bf 8f6f 	isb	sy
 800df12:	f3bf 8f4f 	dsb	sy
 800df16:	613b      	str	r3, [r7, #16]
    }
 800df18:	bf00      	nop
 800df1a:	e7fe      	b.n	800df1a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800df1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1e:	685a      	ldr	r2, [r3, #4]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	1ad2      	subs	r2, r2, r3
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800df28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800df2e:	69b8      	ldr	r0, [r7, #24]
 800df30:	f000 f908 	bl	800e144 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800df34:	4b1d      	ldr	r3, [pc, #116]	; (800dfac <pvPortMalloc+0x1b0>)
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	4a1b      	ldr	r2, [pc, #108]	; (800dfac <pvPortMalloc+0x1b0>)
 800df40:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800df42:	4b1a      	ldr	r3, [pc, #104]	; (800dfac <pvPortMalloc+0x1b0>)
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	4b1b      	ldr	r3, [pc, #108]	; (800dfb4 <pvPortMalloc+0x1b8>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d203      	bcs.n	800df56 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800df4e:	4b17      	ldr	r3, [pc, #92]	; (800dfac <pvPortMalloc+0x1b0>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4a18      	ldr	r2, [pc, #96]	; (800dfb4 <pvPortMalloc+0x1b8>)
 800df54:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800df56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df58:	685a      	ldr	r2, [r3, #4]
 800df5a:	4b13      	ldr	r3, [pc, #76]	; (800dfa8 <pvPortMalloc+0x1ac>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	431a      	orrs	r2, r3
 800df60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df62:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800df64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df66:	2200      	movs	r2, #0
 800df68:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800df6a:	4b13      	ldr	r3, [pc, #76]	; (800dfb8 <pvPortMalloc+0x1bc>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	3301      	adds	r3, #1
 800df70:	4a11      	ldr	r2, [pc, #68]	; (800dfb8 <pvPortMalloc+0x1bc>)
 800df72:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800df74:	f7fe fd18 	bl	800c9a8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	f003 0307 	and.w	r3, r3, #7
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d00a      	beq.n	800df98 <pvPortMalloc+0x19c>
        __asm volatile
 800df82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df86:	f383 8811 	msr	BASEPRI, r3
 800df8a:	f3bf 8f6f 	isb	sy
 800df8e:	f3bf 8f4f 	dsb	sy
 800df92:	60fb      	str	r3, [r7, #12]
    }
 800df94:	bf00      	nop
 800df96:	e7fe      	b.n	800df96 <pvPortMalloc+0x19a>
    return pvReturn;
 800df98:	69fb      	ldr	r3, [r7, #28]
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3728      	adds	r7, #40	; 0x28
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	20012f84 	.word	0x20012f84
 800dfa8:	20012f98 	.word	0x20012f98
 800dfac:	20012f88 	.word	0x20012f88
 800dfb0:	20012f7c 	.word	0x20012f7c
 800dfb4:	20012f8c 	.word	0x20012f8c
 800dfb8:	20012f90 	.word	0x20012f90

0800dfbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b086      	sub	sp, #24
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d04d      	beq.n	800e06a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800dfce:	2308      	movs	r3, #8
 800dfd0:	425b      	negs	r3, r3
 800dfd2:	697a      	ldr	r2, [r7, #20]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	685a      	ldr	r2, [r3, #4]
 800dfe0:	4b24      	ldr	r3, [pc, #144]	; (800e074 <vPortFree+0xb8>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4013      	ands	r3, r2
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d10a      	bne.n	800e000 <vPortFree+0x44>
        __asm volatile
 800dfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfee:	f383 8811 	msr	BASEPRI, r3
 800dff2:	f3bf 8f6f 	isb	sy
 800dff6:	f3bf 8f4f 	dsb	sy
 800dffa:	60fb      	str	r3, [r7, #12]
    }
 800dffc:	bf00      	nop
 800dffe:	e7fe      	b.n	800dffe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d00a      	beq.n	800e01e <vPortFree+0x62>
        __asm volatile
 800e008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00c:	f383 8811 	msr	BASEPRI, r3
 800e010:	f3bf 8f6f 	isb	sy
 800e014:	f3bf 8f4f 	dsb	sy
 800e018:	60bb      	str	r3, [r7, #8]
    }
 800e01a:	bf00      	nop
 800e01c:	e7fe      	b.n	800e01c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	685a      	ldr	r2, [r3, #4]
 800e022:	4b14      	ldr	r3, [pc, #80]	; (800e074 <vPortFree+0xb8>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4013      	ands	r3, r2
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d01e      	beq.n	800e06a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d11a      	bne.n	800e06a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	685a      	ldr	r2, [r3, #4]
 800e038:	4b0e      	ldr	r3, [pc, #56]	; (800e074 <vPortFree+0xb8>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	43db      	mvns	r3, r3
 800e03e:	401a      	ands	r2, r3
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800e044:	f7fe fca2 	bl	800c98c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	685a      	ldr	r2, [r3, #4]
 800e04c:	4b0a      	ldr	r3, [pc, #40]	; (800e078 <vPortFree+0xbc>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4413      	add	r3, r2
 800e052:	4a09      	ldr	r2, [pc, #36]	; (800e078 <vPortFree+0xbc>)
 800e054:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e056:	6938      	ldr	r0, [r7, #16]
 800e058:	f000 f874 	bl	800e144 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800e05c:	4b07      	ldr	r3, [pc, #28]	; (800e07c <vPortFree+0xc0>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	3301      	adds	r3, #1
 800e062:	4a06      	ldr	r2, [pc, #24]	; (800e07c <vPortFree+0xc0>)
 800e064:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800e066:	f7fe fc9f 	bl	800c9a8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800e06a:	bf00      	nop
 800e06c:	3718      	adds	r7, #24
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	20012f98 	.word	0x20012f98
 800e078:	20012f88 	.word	0x20012f88
 800e07c:	20012f94 	.word	0x20012f94

0800e080 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800e080:	b480      	push	{r7}
 800e082:	b085      	sub	sp, #20
 800e084:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e086:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800e08a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800e08c:	4b27      	ldr	r3, [pc, #156]	; (800e12c <prvHeapInit+0xac>)
 800e08e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f003 0307 	and.w	r3, r3, #7
 800e096:	2b00      	cmp	r3, #0
 800e098:	d00c      	beq.n	800e0b4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	3307      	adds	r3, #7
 800e09e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f023 0307 	bic.w	r3, r3, #7
 800e0a6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e0a8:	68ba      	ldr	r2, [r7, #8]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	1ad3      	subs	r3, r2, r3
 800e0ae:	4a1f      	ldr	r2, [pc, #124]	; (800e12c <prvHeapInit+0xac>)
 800e0b0:	4413      	add	r3, r2
 800e0b2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e0b8:	4a1d      	ldr	r2, [pc, #116]	; (800e130 <prvHeapInit+0xb0>)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800e0be:	4b1c      	ldr	r3, [pc, #112]	; (800e130 <prvHeapInit+0xb0>)
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	68ba      	ldr	r2, [r7, #8]
 800e0c8:	4413      	add	r3, r2
 800e0ca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800e0cc:	2208      	movs	r2, #8
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	1a9b      	subs	r3, r3, r2
 800e0d2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f023 0307 	bic.w	r3, r3, #7
 800e0da:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	4a15      	ldr	r2, [pc, #84]	; (800e134 <prvHeapInit+0xb4>)
 800e0e0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800e0e2:	4b14      	ldr	r3, [pc, #80]	; (800e134 <prvHeapInit+0xb4>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800e0ea:	4b12      	ldr	r3, [pc, #72]	; (800e134 <prvHeapInit+0xb4>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	68fa      	ldr	r2, [r7, #12]
 800e0fa:	1ad2      	subs	r2, r2, r3
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e100:	4b0c      	ldr	r3, [pc, #48]	; (800e134 <prvHeapInit+0xb4>)
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	4a0a      	ldr	r2, [pc, #40]	; (800e138 <prvHeapInit+0xb8>)
 800e10e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	4a09      	ldr	r2, [pc, #36]	; (800e13c <prvHeapInit+0xbc>)
 800e116:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e118:	4b09      	ldr	r3, [pc, #36]	; (800e140 <prvHeapInit+0xc0>)
 800e11a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e11e:	601a      	str	r2, [r3, #0]
}
 800e120:	bf00      	nop
 800e122:	3714      	adds	r7, #20
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr
 800e12c:	2000037c 	.word	0x2000037c
 800e130:	20012f7c 	.word	0x20012f7c
 800e134:	20012f84 	.word	0x20012f84
 800e138:	20012f8c 	.word	0x20012f8c
 800e13c:	20012f88 	.word	0x20012f88
 800e140:	20012f98 	.word	0x20012f98

0800e144 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800e144:	b480      	push	{r7}
 800e146:	b085      	sub	sp, #20
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e14c:	4b28      	ldr	r3, [pc, #160]	; (800e1f0 <prvInsertBlockIntoFreeList+0xac>)
 800e14e:	60fb      	str	r3, [r7, #12]
 800e150:	e002      	b.n	800e158 <prvInsertBlockIntoFreeList+0x14>
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	60fb      	str	r3, [r7, #12]
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d8f7      	bhi.n	800e152 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	4413      	add	r3, r2
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	429a      	cmp	r2, r3
 800e172:	d108      	bne.n	800e186 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	685a      	ldr	r2, [r3, #4]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	441a      	add	r2, r3
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	68ba      	ldr	r2, [r7, #8]
 800e190:	441a      	add	r2, r3
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	429a      	cmp	r2, r3
 800e198:	d118      	bne.n	800e1cc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	4b15      	ldr	r3, [pc, #84]	; (800e1f4 <prvInsertBlockIntoFreeList+0xb0>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d00d      	beq.n	800e1c2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	685a      	ldr	r2, [r3, #4]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	441a      	add	r2, r3
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	601a      	str	r2, [r3, #0]
 800e1c0:	e008      	b.n	800e1d4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e1c2:	4b0c      	ldr	r3, [pc, #48]	; (800e1f4 <prvInsertBlockIntoFreeList+0xb0>)
 800e1c4:	681a      	ldr	r2, [r3, #0]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	601a      	str	r2, [r3, #0]
 800e1ca:	e003      	b.n	800e1d4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800e1d4:	68fa      	ldr	r2, [r7, #12]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d002      	beq.n	800e1e2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800e1e2:	bf00      	nop
 800e1e4:	3714      	adds	r7, #20
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ec:	4770      	bx	lr
 800e1ee:	bf00      	nop
 800e1f0:	20012f7c 	.word	0x20012f7c
 800e1f4:	20012f84 	.word	0x20012f84

0800e1f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b084      	sub	sp, #16
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	460b      	mov	r3, r1
 800e202:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e204:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e208:	f002 f960 	bl	80104cc <USBD_static_malloc>
 800e20c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d105      	bne.n	800e220 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e21c:	2302      	movs	r3, #2
 800e21e:	e066      	b.n	800e2ee <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	7c1b      	ldrb	r3, [r3, #16]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d119      	bne.n	800e264 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e230:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e234:	2202      	movs	r2, #2
 800e236:	2181      	movs	r1, #129	; 0x81
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f002 f824 	bl	8010286 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2201      	movs	r2, #1
 800e242:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e244:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e248:	2202      	movs	r2, #2
 800e24a:	2101      	movs	r1, #1
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f002 f81a 	bl	8010286 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2201      	movs	r2, #1
 800e256:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2210      	movs	r2, #16
 800e25e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e262:	e016      	b.n	800e292 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e264:	2340      	movs	r3, #64	; 0x40
 800e266:	2202      	movs	r2, #2
 800e268:	2181      	movs	r1, #129	; 0x81
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f002 f80b 	bl	8010286 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2201      	movs	r2, #1
 800e274:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e276:	2340      	movs	r3, #64	; 0x40
 800e278:	2202      	movs	r2, #2
 800e27a:	2101      	movs	r1, #1
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f002 f802 	bl	8010286 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2201      	movs	r2, #1
 800e286:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2210      	movs	r2, #16
 800e28e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e292:	2308      	movs	r3, #8
 800e294:	2203      	movs	r2, #3
 800e296:	2182      	movs	r1, #130	; 0x82
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f001 fff4 	bl	8010286 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	7c1b      	ldrb	r3, [r3, #16]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d109      	bne.n	800e2dc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e2ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2d2:	2101      	movs	r1, #1
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f002 f8c5 	bl	8010464 <USBD_LL_PrepareReceive>
 800e2da:	e007      	b.n	800e2ec <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e2e2:	2340      	movs	r3, #64	; 0x40
 800e2e4:	2101      	movs	r1, #1
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f002 f8bc 	bl	8010464 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e2ec:	2300      	movs	r3, #0
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b082      	sub	sp, #8
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	460b      	mov	r3, r1
 800e300:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e302:	2181      	movs	r1, #129	; 0x81
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f001 ffe4 	bl	80102d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2200      	movs	r2, #0
 800e30e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e310:	2101      	movs	r1, #1
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f001 ffdd 	bl	80102d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e320:	2182      	movs	r1, #130	; 0x82
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f001 ffd5 	bl	80102d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2200      	movs	r2, #0
 800e32c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2200      	movs	r2, #0
 800e334:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00e      	beq.n	800e360 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e352:	4618      	mov	r0, r3
 800e354:	f002 f8c8 	bl	80104e8 <USBD_static_free>
    pdev->pClassData = NULL;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e360:	2300      	movs	r3, #0
}
 800e362:	4618      	mov	r0, r3
 800e364:	3708      	adds	r7, #8
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
	...

0800e36c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b086      	sub	sp, #24
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e37c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e37e:	2300      	movs	r3, #0
 800e380:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e382:	2300      	movs	r3, #0
 800e384:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e386:	2300      	movs	r3, #0
 800e388:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d101      	bne.n	800e394 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e390:	2303      	movs	r3, #3
 800e392:	e0af      	b.n	800e4f4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d03f      	beq.n	800e420 <USBD_CDC_Setup+0xb4>
 800e3a0:	2b20      	cmp	r3, #32
 800e3a2:	f040 809f 	bne.w	800e4e4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	88db      	ldrh	r3, [r3, #6]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d02e      	beq.n	800e40c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	b25b      	sxtb	r3, r3
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	da16      	bge.n	800e3e6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3be:	689b      	ldr	r3, [r3, #8]
 800e3c0:	683a      	ldr	r2, [r7, #0]
 800e3c2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e3c4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e3c6:	683a      	ldr	r2, [r7, #0]
 800e3c8:	88d2      	ldrh	r2, [r2, #6]
 800e3ca:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	88db      	ldrh	r3, [r3, #6]
 800e3d0:	2b07      	cmp	r3, #7
 800e3d2:	bf28      	it	cs
 800e3d4:	2307      	movcs	r3, #7
 800e3d6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	89fa      	ldrh	r2, [r7, #14]
 800e3dc:	4619      	mov	r1, r3
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f001 fb19 	bl	800fa16 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e3e4:	e085      	b.n	800e4f2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	785a      	ldrb	r2, [r3, #1]
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	88db      	ldrh	r3, [r3, #6]
 800e3f4:	b2da      	uxtb	r2, r3
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e3fc:	6939      	ldr	r1, [r7, #16]
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	88db      	ldrh	r3, [r3, #6]
 800e402:	461a      	mov	r2, r3
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f001 fb32 	bl	800fa6e <USBD_CtlPrepareRx>
      break;
 800e40a:	e072      	b.n	800e4f2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e412:	689b      	ldr	r3, [r3, #8]
 800e414:	683a      	ldr	r2, [r7, #0]
 800e416:	7850      	ldrb	r0, [r2, #1]
 800e418:	2200      	movs	r2, #0
 800e41a:	6839      	ldr	r1, [r7, #0]
 800e41c:	4798      	blx	r3
      break;
 800e41e:	e068      	b.n	800e4f2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	785b      	ldrb	r3, [r3, #1]
 800e424:	2b0b      	cmp	r3, #11
 800e426:	d852      	bhi.n	800e4ce <USBD_CDC_Setup+0x162>
 800e428:	a201      	add	r2, pc, #4	; (adr r2, 800e430 <USBD_CDC_Setup+0xc4>)
 800e42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e42e:	bf00      	nop
 800e430:	0800e461 	.word	0x0800e461
 800e434:	0800e4dd 	.word	0x0800e4dd
 800e438:	0800e4cf 	.word	0x0800e4cf
 800e43c:	0800e4cf 	.word	0x0800e4cf
 800e440:	0800e4cf 	.word	0x0800e4cf
 800e444:	0800e4cf 	.word	0x0800e4cf
 800e448:	0800e4cf 	.word	0x0800e4cf
 800e44c:	0800e4cf 	.word	0x0800e4cf
 800e450:	0800e4cf 	.word	0x0800e4cf
 800e454:	0800e4cf 	.word	0x0800e4cf
 800e458:	0800e48b 	.word	0x0800e48b
 800e45c:	0800e4b5 	.word	0x0800e4b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e466:	b2db      	uxtb	r3, r3
 800e468:	2b03      	cmp	r3, #3
 800e46a:	d107      	bne.n	800e47c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e46c:	f107 030a 	add.w	r3, r7, #10
 800e470:	2202      	movs	r2, #2
 800e472:	4619      	mov	r1, r3
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f001 face 	bl	800fa16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e47a:	e032      	b.n	800e4e2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e47c:	6839      	ldr	r1, [r7, #0]
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f001 fa58 	bl	800f934 <USBD_CtlError>
            ret = USBD_FAIL;
 800e484:	2303      	movs	r3, #3
 800e486:	75fb      	strb	r3, [r7, #23]
          break;
 800e488:	e02b      	b.n	800e4e2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e490:	b2db      	uxtb	r3, r3
 800e492:	2b03      	cmp	r3, #3
 800e494:	d107      	bne.n	800e4a6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e496:	f107 030d 	add.w	r3, r7, #13
 800e49a:	2201      	movs	r2, #1
 800e49c:	4619      	mov	r1, r3
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f001 fab9 	bl	800fa16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e4a4:	e01d      	b.n	800e4e2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e4a6:	6839      	ldr	r1, [r7, #0]
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f001 fa43 	bl	800f934 <USBD_CtlError>
            ret = USBD_FAIL;
 800e4ae:	2303      	movs	r3, #3
 800e4b0:	75fb      	strb	r3, [r7, #23]
          break;
 800e4b2:	e016      	b.n	800e4e2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	2b03      	cmp	r3, #3
 800e4be:	d00f      	beq.n	800e4e0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e4c0:	6839      	ldr	r1, [r7, #0]
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f001 fa36 	bl	800f934 <USBD_CtlError>
            ret = USBD_FAIL;
 800e4c8:	2303      	movs	r3, #3
 800e4ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e4cc:	e008      	b.n	800e4e0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e4ce:	6839      	ldr	r1, [r7, #0]
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f001 fa2f 	bl	800f934 <USBD_CtlError>
          ret = USBD_FAIL;
 800e4d6:	2303      	movs	r3, #3
 800e4d8:	75fb      	strb	r3, [r7, #23]
          break;
 800e4da:	e002      	b.n	800e4e2 <USBD_CDC_Setup+0x176>
          break;
 800e4dc:	bf00      	nop
 800e4de:	e008      	b.n	800e4f2 <USBD_CDC_Setup+0x186>
          break;
 800e4e0:	bf00      	nop
      }
      break;
 800e4e2:	e006      	b.n	800e4f2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e4e4:	6839      	ldr	r1, [r7, #0]
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f001 fa24 	bl	800f934 <USBD_CtlError>
      ret = USBD_FAIL;
 800e4ec:	2303      	movs	r3, #3
 800e4ee:	75fb      	strb	r3, [r7, #23]
      break;
 800e4f0:	bf00      	nop
  }

  return (uint8_t)ret;
 800e4f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3718      	adds	r7, #24
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	460b      	mov	r3, r1
 800e506:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e50e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e516:	2b00      	cmp	r3, #0
 800e518:	d101      	bne.n	800e51e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e51a:	2303      	movs	r3, #3
 800e51c:	e04f      	b.n	800e5be <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e524:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e526:	78fa      	ldrb	r2, [r7, #3]
 800e528:	6879      	ldr	r1, [r7, #4]
 800e52a:	4613      	mov	r3, r2
 800e52c:	009b      	lsls	r3, r3, #2
 800e52e:	4413      	add	r3, r2
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	440b      	add	r3, r1
 800e534:	3318      	adds	r3, #24
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d029      	beq.n	800e590 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e53c:	78fa      	ldrb	r2, [r7, #3]
 800e53e:	6879      	ldr	r1, [r7, #4]
 800e540:	4613      	mov	r3, r2
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	4413      	add	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	440b      	add	r3, r1
 800e54a:	3318      	adds	r3, #24
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	78f9      	ldrb	r1, [r7, #3]
 800e550:	68f8      	ldr	r0, [r7, #12]
 800e552:	460b      	mov	r3, r1
 800e554:	00db      	lsls	r3, r3, #3
 800e556:	1a5b      	subs	r3, r3, r1
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4403      	add	r3, r0
 800e55c:	3344      	adds	r3, #68	; 0x44
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	fbb2 f1f3 	udiv	r1, r2, r3
 800e564:	fb03 f301 	mul.w	r3, r3, r1
 800e568:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d110      	bne.n	800e590 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e56e:	78fa      	ldrb	r2, [r7, #3]
 800e570:	6879      	ldr	r1, [r7, #4]
 800e572:	4613      	mov	r3, r2
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	4413      	add	r3, r2
 800e578:	009b      	lsls	r3, r3, #2
 800e57a:	440b      	add	r3, r1
 800e57c:	3318      	adds	r3, #24
 800e57e:	2200      	movs	r2, #0
 800e580:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e582:	78f9      	ldrb	r1, [r7, #3]
 800e584:	2300      	movs	r3, #0
 800e586:	2200      	movs	r2, #0
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f001 ff4a 	bl	8010422 <USBD_LL_Transmit>
 800e58e:	e015      	b.n	800e5bc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	2200      	movs	r2, #0
 800e594:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e59e:	691b      	ldr	r3, [r3, #16]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d00b      	beq.n	800e5bc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5aa:	691b      	ldr	r3, [r3, #16]
 800e5ac:	68ba      	ldr	r2, [r7, #8]
 800e5ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e5b2:	68ba      	ldr	r2, [r7, #8]
 800e5b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e5b8:	78fa      	ldrb	r2, [r7, #3]
 800e5ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e5bc:	2300      	movs	r3, #0
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3710      	adds	r7, #16
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b084      	sub	sp, #16
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
 800e5ce:	460b      	mov	r3, r1
 800e5d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d101      	bne.n	800e5e8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e5e4:	2303      	movs	r3, #3
 800e5e6:	e015      	b.n	800e614 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e5e8:	78fb      	ldrb	r3, [r7, #3]
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f001 ff5a 	bl	80104a6 <USBD_LL_GetRxDataSize>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e608:	68fa      	ldr	r2, [r7, #12]
 800e60a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e60e:	4611      	mov	r1, r2
 800e610:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e612:	2300      	movs	r3, #0
}
 800e614:	4618      	mov	r0, r3
 800e616:	3710      	adds	r7, #16
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e62a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d101      	bne.n	800e636 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e632:	2303      	movs	r3, #3
 800e634:	e01b      	b.n	800e66e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d015      	beq.n	800e66c <USBD_CDC_EP0_RxReady+0x50>
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e646:	2bff      	cmp	r3, #255	; 0xff
 800e648:	d010      	beq.n	800e66c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e650:	689b      	ldr	r3, [r3, #8]
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e658:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e65a:	68fa      	ldr	r2, [r7, #12]
 800e65c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e660:	b292      	uxth	r2, r2
 800e662:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	22ff      	movs	r2, #255	; 0xff
 800e668:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e66c:	2300      	movs	r3, #0
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3710      	adds	r7, #16
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
	...

0800e678 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2243      	movs	r2, #67	; 0x43
 800e684:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e686:	4b03      	ldr	r3, [pc, #12]	; (800e694 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e688:	4618      	mov	r0, r3
 800e68a:	370c      	adds	r7, #12
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr
 800e694:	200000a8 	.word	0x200000a8

0800e698 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e698:	b480      	push	{r7}
 800e69a:	b083      	sub	sp, #12
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2243      	movs	r2, #67	; 0x43
 800e6a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e6a6:	4b03      	ldr	r3, [pc, #12]	; (800e6b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	370c      	adds	r7, #12
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr
 800e6b4:	20000064 	.word	0x20000064

0800e6b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b083      	sub	sp, #12
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2243      	movs	r2, #67	; 0x43
 800e6c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e6c6:	4b03      	ldr	r3, [pc, #12]	; (800e6d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	370c      	adds	r7, #12
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr
 800e6d4:	200000ec 	.word	0x200000ec

0800e6d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b083      	sub	sp, #12
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	220a      	movs	r2, #10
 800e6e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e6e6:	4b03      	ldr	r3, [pc, #12]	; (800e6f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	370c      	adds	r7, #12
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr
 800e6f4:	20000020 	.word	0x20000020

0800e6f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d101      	bne.n	800e70c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e708:	2303      	movs	r3, #3
 800e70a:	e004      	b.n	800e716 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	683a      	ldr	r2, [r7, #0]
 800e710:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e714:	2300      	movs	r3, #0
}
 800e716:	4618      	mov	r0, r3
 800e718:	370c      	adds	r7, #12
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr

0800e722 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e722:	b480      	push	{r7}
 800e724:	b087      	sub	sp, #28
 800e726:	af00      	add	r7, sp, #0
 800e728:	60f8      	str	r0, [r7, #12]
 800e72a:	60b9      	str	r1, [r7, #8]
 800e72c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e734:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d101      	bne.n	800e740 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e73c:	2303      	movs	r3, #3
 800e73e:	e008      	b.n	800e752 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	68ba      	ldr	r2, [r7, #8]
 800e744:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e750:	2300      	movs	r3, #0
}
 800e752:	4618      	mov	r0, r3
 800e754:	371c      	adds	r7, #28
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr

0800e75e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e75e:	b480      	push	{r7}
 800e760:	b085      	sub	sp, #20
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
 800e766:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e76e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d101      	bne.n	800e77a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e776:	2303      	movs	r3, #3
 800e778:	e004      	b.n	800e784 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	683a      	ldr	r2, [r7, #0]
 800e77e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e782:	2300      	movs	r3, #0
}
 800e784:	4618      	mov	r0, r3
 800e786:	3714      	adds	r7, #20
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr

0800e790 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e79e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d101      	bne.n	800e7b2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e7ae:	2303      	movs	r3, #3
 800e7b0:	e01a      	b.n	800e7e8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d114      	bne.n	800e7e6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	2201      	movs	r2, #1
 800e7c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e7da:	2181      	movs	r1, #129	; 0x81
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f001 fe20 	bl	8010422 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3710      	adds	r7, #16
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e806:	2b00      	cmp	r3, #0
 800e808:	d101      	bne.n	800e80e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e80a:	2303      	movs	r3, #3
 800e80c:	e016      	b.n	800e83c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	7c1b      	ldrb	r3, [r3, #16]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d109      	bne.n	800e82a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e81c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e820:	2101      	movs	r1, #1
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f001 fe1e 	bl	8010464 <USBD_LL_PrepareReceive>
 800e828:	e007      	b.n	800e83a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e830:	2340      	movs	r3, #64	; 0x40
 800e832:	2101      	movs	r1, #1
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f001 fe15 	bl	8010464 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e83a:	2300      	movs	r3, #0
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3710      	adds	r7, #16
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b086      	sub	sp, #24
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	4613      	mov	r3, r2
 800e850:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d101      	bne.n	800e85c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e858:	2303      	movs	r3, #3
 800e85a:	e01f      	b.n	800e89c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2200      	movs	r2, #0
 800e860:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2200      	movs	r2, #0
 800e868:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2200      	movs	r2, #0
 800e870:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d003      	beq.n	800e882 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	68ba      	ldr	r2, [r7, #8]
 800e87e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2201      	movs	r2, #1
 800e886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	79fa      	ldrb	r2, [r7, #7]
 800e88e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f001 fc91 	bl	80101b8 <USBD_LL_Init>
 800e896:	4603      	mov	r3, r0
 800e898:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e89a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3718      	adds	r7, #24
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d101      	bne.n	800e8bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e8b8:	2303      	movs	r3, #3
 800e8ba:	e016      	b.n	800e8ea <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	683a      	ldr	r2, [r7, #0]
 800e8c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00b      	beq.n	800e8e8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8d8:	f107 020e 	add.w	r2, r7, #14
 800e8dc:	4610      	mov	r0, r2
 800e8de:	4798      	blx	r3
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e8e8:	2300      	movs	r3, #0
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3710      	adds	r7, #16
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e8f2:	b580      	push	{r7, lr}
 800e8f4:	b082      	sub	sp, #8
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f001 fca8 	bl	8010250 <USBD_LL_Start>
 800e900:	4603      	mov	r3, r0
}
 800e902:	4618      	mov	r0, r3
 800e904:	3708      	adds	r7, #8
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e90a:	b480      	push	{r7}
 800e90c:	b083      	sub	sp, #12
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e912:	2300      	movs	r3, #0
}
 800e914:	4618      	mov	r0, r3
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	460b      	mov	r3, r1
 800e92a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e92c:	2303      	movs	r3, #3
 800e92e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e936:	2b00      	cmp	r3, #0
 800e938:	d009      	beq.n	800e94e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	78fa      	ldrb	r2, [r7, #3]
 800e944:	4611      	mov	r1, r2
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	4798      	blx	r3
 800e94a:	4603      	mov	r3, r0
 800e94c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e950:	4618      	mov	r0, r3
 800e952:	3710      	adds	r7, #16
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	460b      	mov	r3, r1
 800e962:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d007      	beq.n	800e97e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	78fa      	ldrb	r2, [r7, #3]
 800e978:	4611      	mov	r1, r2
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	4798      	blx	r3
  }

  return USBD_OK;
 800e97e:	2300      	movs	r3, #0
}
 800e980:	4618      	mov	r0, r3
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b084      	sub	sp, #16
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e998:	6839      	ldr	r1, [r7, #0]
 800e99a:	4618      	mov	r0, r3
 800e99c:	f000 ff90 	bl	800f8c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e9bc:	f003 031f 	and.w	r3, r3, #31
 800e9c0:	2b02      	cmp	r3, #2
 800e9c2:	d01a      	beq.n	800e9fa <USBD_LL_SetupStage+0x72>
 800e9c4:	2b02      	cmp	r3, #2
 800e9c6:	d822      	bhi.n	800ea0e <USBD_LL_SetupStage+0x86>
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d002      	beq.n	800e9d2 <USBD_LL_SetupStage+0x4a>
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d00a      	beq.n	800e9e6 <USBD_LL_SetupStage+0x5e>
 800e9d0:	e01d      	b.n	800ea0e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e9d8:	4619      	mov	r1, r3
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 fa62 	bl	800eea4 <USBD_StdDevReq>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	73fb      	strb	r3, [r7, #15]
      break;
 800e9e4:	e020      	b.n	800ea28 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 fac6 	bl	800ef80 <USBD_StdItfReq>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	73fb      	strb	r3, [r7, #15]
      break;
 800e9f8:	e016      	b.n	800ea28 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea00:	4619      	mov	r1, r3
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f000 fb05 	bl	800f012 <USBD_StdEPReq>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ea0c:	e00c      	b.n	800ea28 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ea14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f001 fc77 	bl	8010310 <USBD_LL_StallEP>
 800ea22:	4603      	mov	r3, r0
 800ea24:	73fb      	strb	r3, [r7, #15]
      break;
 800ea26:	bf00      	nop
  }

  return ret;
 800ea28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3710      	adds	r7, #16
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b086      	sub	sp, #24
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	60f8      	str	r0, [r7, #12]
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	607a      	str	r2, [r7, #4]
 800ea3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ea40:	7afb      	ldrb	r3, [r7, #11]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d138      	bne.n	800eab8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ea4c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ea54:	2b03      	cmp	r3, #3
 800ea56:	d14a      	bne.n	800eaee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	689a      	ldr	r2, [r3, #8]
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d913      	bls.n	800ea8c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	689a      	ldr	r2, [r3, #8]
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	1ad2      	subs	r2, r2, r3
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	68da      	ldr	r2, [r3, #12]
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	bf28      	it	cs
 800ea7e:	4613      	movcs	r3, r2
 800ea80:	461a      	mov	r2, r3
 800ea82:	6879      	ldr	r1, [r7, #4]
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f001 f80f 	bl	800faa8 <USBD_CtlContinueRx>
 800ea8a:	e030      	b.n	800eaee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea92:	b2db      	uxtb	r3, r3
 800ea94:	2b03      	cmp	r3, #3
 800ea96:	d10b      	bne.n	800eab0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea9e:	691b      	ldr	r3, [r3, #16]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d005      	beq.n	800eab0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaaa:	691b      	ldr	r3, [r3, #16]
 800eaac:	68f8      	ldr	r0, [r7, #12]
 800eaae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	f001 f80a 	bl	800faca <USBD_CtlSendStatus>
 800eab6:	e01a      	b.n	800eaee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	2b03      	cmp	r3, #3
 800eac2:	d114      	bne.n	800eaee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaca:	699b      	ldr	r3, [r3, #24]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00e      	beq.n	800eaee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ead6:	699b      	ldr	r3, [r3, #24]
 800ead8:	7afa      	ldrb	r2, [r7, #11]
 800eada:	4611      	mov	r1, r2
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	4798      	blx	r3
 800eae0:	4603      	mov	r3, r0
 800eae2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800eae4:	7dfb      	ldrb	r3, [r7, #23]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d001      	beq.n	800eaee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800eaea:	7dfb      	ldrb	r3, [r7, #23]
 800eaec:	e000      	b.n	800eaf0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800eaee:	2300      	movs	r3, #0
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3718      	adds	r7, #24
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	460b      	mov	r3, r1
 800eb02:	607a      	str	r2, [r7, #4]
 800eb04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eb06:	7afb      	ldrb	r3, [r7, #11]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d16b      	bne.n	800ebe4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	3314      	adds	r3, #20
 800eb10:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eb18:	2b02      	cmp	r3, #2
 800eb1a:	d156      	bne.n	800ebca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	689a      	ldr	r2, [r3, #8]
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	68db      	ldr	r3, [r3, #12]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d914      	bls.n	800eb52 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	689a      	ldr	r2, [r3, #8]
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	1ad2      	subs	r2, r2, r3
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	6879      	ldr	r1, [r7, #4]
 800eb3e:	68f8      	ldr	r0, [r7, #12]
 800eb40:	f000 ff84 	bl	800fa4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb44:	2300      	movs	r3, #0
 800eb46:	2200      	movs	r2, #0
 800eb48:	2100      	movs	r1, #0
 800eb4a:	68f8      	ldr	r0, [r7, #12]
 800eb4c:	f001 fc8a 	bl	8010464 <USBD_LL_PrepareReceive>
 800eb50:	e03b      	b.n	800ebca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	68da      	ldr	r2, [r3, #12]
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	689b      	ldr	r3, [r3, #8]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d11c      	bne.n	800eb98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	685a      	ldr	r2, [r3, #4]
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d316      	bcc.n	800eb98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	685a      	ldr	r2, [r3, #4]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d20f      	bcs.n	800eb98 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eb78:	2200      	movs	r2, #0
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	f000 ff65 	bl	800fa4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2200      	movs	r2, #0
 800eb86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	2100      	movs	r1, #0
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f001 fc67 	bl	8010464 <USBD_LL_PrepareReceive>
 800eb96:	e018      	b.n	800ebca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	2b03      	cmp	r3, #3
 800eba2:	d10b      	bne.n	800ebbc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d005      	beq.n	800ebbc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	68f8      	ldr	r0, [r7, #12]
 800ebba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ebbc:	2180      	movs	r1, #128	; 0x80
 800ebbe:	68f8      	ldr	r0, [r7, #12]
 800ebc0:	f001 fba6 	bl	8010310 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ebc4:	68f8      	ldr	r0, [r7, #12]
 800ebc6:	f000 ff93 	bl	800faf0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d122      	bne.n	800ec1a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	f7ff fe98 	bl	800e90a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ebe2:	e01a      	b.n	800ec1a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebea:	b2db      	uxtb	r3, r3
 800ebec:	2b03      	cmp	r3, #3
 800ebee:	d114      	bne.n	800ec1a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebf6:	695b      	ldr	r3, [r3, #20]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d00e      	beq.n	800ec1a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec02:	695b      	ldr	r3, [r3, #20]
 800ec04:	7afa      	ldrb	r2, [r7, #11]
 800ec06:	4611      	mov	r1, r2
 800ec08:	68f8      	ldr	r0, [r7, #12]
 800ec0a:	4798      	blx	r3
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ec10:	7dfb      	ldrb	r3, [r7, #23]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d001      	beq.n	800ec1a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ec16:	7dfb      	ldrb	r3, [r7, #23]
 800ec18:	e000      	b.n	800ec1c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ec1a:	2300      	movs	r3, #0
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3718      	adds	r7, #24
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2200      	movs	r2, #0
 800ec38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2200      	movs	r2, #0
 800ec46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d101      	bne.n	800ec58 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ec54:	2303      	movs	r3, #3
 800ec56:	e02f      	b.n	800ecb8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d00f      	beq.n	800ec82 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d009      	beq.n	800ec82 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	6852      	ldr	r2, [r2, #4]
 800ec7a:	b2d2      	uxtb	r2, r2
 800ec7c:	4611      	mov	r1, r2
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec82:	2340      	movs	r3, #64	; 0x40
 800ec84:	2200      	movs	r2, #0
 800ec86:	2100      	movs	r1, #0
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f001 fafc 	bl	8010286 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2201      	movs	r2, #1
 800ec92:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2240      	movs	r2, #64	; 0x40
 800ec9a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec9e:	2340      	movs	r3, #64	; 0x40
 800eca0:	2200      	movs	r2, #0
 800eca2:	2180      	movs	r1, #128	; 0x80
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f001 faee 	bl	8010286 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2201      	movs	r2, #1
 800ecae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2240      	movs	r2, #64	; 0x40
 800ecb4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ecb6:	2300      	movs	r3, #0
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3708      	adds	r7, #8
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}

0800ecc0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	460b      	mov	r3, r1
 800ecca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	78fa      	ldrb	r2, [r7, #3]
 800ecd0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ecd2:	2300      	movs	r3, #0
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	370c      	adds	r7, #12
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr

0800ece0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b083      	sub	sp, #12
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecee:	b2da      	uxtb	r2, r3
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2204      	movs	r2, #4
 800ecfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ecfe:	2300      	movs	r3, #0
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	370c      	adds	r7, #12
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr

0800ed0c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	2b04      	cmp	r3, #4
 800ed1e:	d106      	bne.n	800ed2e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ed26:	b2da      	uxtb	r2, r3
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ed2e:	2300      	movs	r3, #0
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	370c      	adds	r7, #12
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d101      	bne.n	800ed52 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ed4e:	2303      	movs	r3, #3
 800ed50:	e012      	b.n	800ed78 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	2b03      	cmp	r3, #3
 800ed5c:	d10b      	bne.n	800ed76 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed64:	69db      	ldr	r3, [r3, #28]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d005      	beq.n	800ed76 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed70:	69db      	ldr	r3, [r3, #28]
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ed76:	2300      	movs	r3, #0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3708      	adds	r7, #8
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	460b      	mov	r3, r1
 800ed8a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d101      	bne.n	800ed9a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ed96:	2303      	movs	r3, #3
 800ed98:	e014      	b.n	800edc4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	2b03      	cmp	r3, #3
 800eda4:	d10d      	bne.n	800edc2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edac:	6a1b      	ldr	r3, [r3, #32]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d007      	beq.n	800edc2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edb8:	6a1b      	ldr	r3, [r3, #32]
 800edba:	78fa      	ldrb	r2, [r7, #3]
 800edbc:	4611      	mov	r1, r2
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800edc2:	2300      	movs	r3, #0
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	460b      	mov	r3, r1
 800edd6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d101      	bne.n	800ede6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ede2:	2303      	movs	r3, #3
 800ede4:	e014      	b.n	800ee10 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edec:	b2db      	uxtb	r3, r3
 800edee:	2b03      	cmp	r3, #3
 800edf0:	d10d      	bne.n	800ee0e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d007      	beq.n	800ee0e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee06:	78fa      	ldrb	r2, [r7, #3]
 800ee08:	4611      	mov	r1, r2
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ee0e:	2300      	movs	r3, #0
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b083      	sub	sp, #12
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ee20:	2300      	movs	r3, #0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	370c      	adds	r7, #12
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr

0800ee2e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b082      	sub	sp, #8
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2201      	movs	r2, #1
 800ee3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d009      	beq.n	800ee5c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	6852      	ldr	r2, [r2, #4]
 800ee54:	b2d2      	uxtb	r2, r2
 800ee56:	4611      	mov	r1, r2
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	4798      	blx	r3
  }

  return USBD_OK;
 800ee5c:	2300      	movs	r3, #0
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3708      	adds	r7, #8
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}

0800ee66 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ee66:	b480      	push	{r7}
 800ee68:	b087      	sub	sp, #28
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ee84:	8a3b      	ldrh	r3, [r7, #16]
 800ee86:	021b      	lsls	r3, r3, #8
 800ee88:	b21a      	sxth	r2, r3
 800ee8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee8e:	4313      	orrs	r3, r2
 800ee90:	b21b      	sxth	r3, r3
 800ee92:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ee94:	89fb      	ldrh	r3, [r7, #14]
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	371c      	adds	r7, #28
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr
	...

0800eea4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eeba:	2b40      	cmp	r3, #64	; 0x40
 800eebc:	d005      	beq.n	800eeca <USBD_StdDevReq+0x26>
 800eebe:	2b40      	cmp	r3, #64	; 0x40
 800eec0:	d853      	bhi.n	800ef6a <USBD_StdDevReq+0xc6>
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d00b      	beq.n	800eede <USBD_StdDevReq+0x3a>
 800eec6:	2b20      	cmp	r3, #32
 800eec8:	d14f      	bne.n	800ef6a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eed0:	689b      	ldr	r3, [r3, #8]
 800eed2:	6839      	ldr	r1, [r7, #0]
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	4798      	blx	r3
 800eed8:	4603      	mov	r3, r0
 800eeda:	73fb      	strb	r3, [r7, #15]
      break;
 800eedc:	e04a      	b.n	800ef74 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	785b      	ldrb	r3, [r3, #1]
 800eee2:	2b09      	cmp	r3, #9
 800eee4:	d83b      	bhi.n	800ef5e <USBD_StdDevReq+0xba>
 800eee6:	a201      	add	r2, pc, #4	; (adr r2, 800eeec <USBD_StdDevReq+0x48>)
 800eee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeec:	0800ef41 	.word	0x0800ef41
 800eef0:	0800ef55 	.word	0x0800ef55
 800eef4:	0800ef5f 	.word	0x0800ef5f
 800eef8:	0800ef4b 	.word	0x0800ef4b
 800eefc:	0800ef5f 	.word	0x0800ef5f
 800ef00:	0800ef1f 	.word	0x0800ef1f
 800ef04:	0800ef15 	.word	0x0800ef15
 800ef08:	0800ef5f 	.word	0x0800ef5f
 800ef0c:	0800ef37 	.word	0x0800ef37
 800ef10:	0800ef29 	.word	0x0800ef29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ef14:	6839      	ldr	r1, [r7, #0]
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f000 f9de 	bl	800f2d8 <USBD_GetDescriptor>
          break;
 800ef1c:	e024      	b.n	800ef68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ef1e:	6839      	ldr	r1, [r7, #0]
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f000 fb43 	bl	800f5ac <USBD_SetAddress>
          break;
 800ef26:	e01f      	b.n	800ef68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ef28:	6839      	ldr	r1, [r7, #0]
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f000 fb82 	bl	800f634 <USBD_SetConfig>
 800ef30:	4603      	mov	r3, r0
 800ef32:	73fb      	strb	r3, [r7, #15]
          break;
 800ef34:	e018      	b.n	800ef68 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ef36:	6839      	ldr	r1, [r7, #0]
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f000 fc21 	bl	800f780 <USBD_GetConfig>
          break;
 800ef3e:	e013      	b.n	800ef68 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ef40:	6839      	ldr	r1, [r7, #0]
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 fc52 	bl	800f7ec <USBD_GetStatus>
          break;
 800ef48:	e00e      	b.n	800ef68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ef4a:	6839      	ldr	r1, [r7, #0]
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f000 fc81 	bl	800f854 <USBD_SetFeature>
          break;
 800ef52:	e009      	b.n	800ef68 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ef54:	6839      	ldr	r1, [r7, #0]
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 fc90 	bl	800f87c <USBD_ClrFeature>
          break;
 800ef5c:	e004      	b.n	800ef68 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ef5e:	6839      	ldr	r1, [r7, #0]
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f000 fce7 	bl	800f934 <USBD_CtlError>
          break;
 800ef66:	bf00      	nop
      }
      break;
 800ef68:	e004      	b.n	800ef74 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ef6a:	6839      	ldr	r1, [r7, #0]
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f000 fce1 	bl	800f934 <USBD_CtlError>
      break;
 800ef72:	bf00      	nop
  }

  return ret;
 800ef74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3710      	adds	r7, #16
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop

0800ef80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef96:	2b40      	cmp	r3, #64	; 0x40
 800ef98:	d005      	beq.n	800efa6 <USBD_StdItfReq+0x26>
 800ef9a:	2b40      	cmp	r3, #64	; 0x40
 800ef9c:	d82f      	bhi.n	800effe <USBD_StdItfReq+0x7e>
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d001      	beq.n	800efa6 <USBD_StdItfReq+0x26>
 800efa2:	2b20      	cmp	r3, #32
 800efa4:	d12b      	bne.n	800effe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efac:	b2db      	uxtb	r3, r3
 800efae:	3b01      	subs	r3, #1
 800efb0:	2b02      	cmp	r3, #2
 800efb2:	d81d      	bhi.n	800eff0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	889b      	ldrh	r3, [r3, #4]
 800efb8:	b2db      	uxtb	r3, r3
 800efba:	2b01      	cmp	r3, #1
 800efbc:	d813      	bhi.n	800efe6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efc4:	689b      	ldr	r3, [r3, #8]
 800efc6:	6839      	ldr	r1, [r7, #0]
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	4798      	blx	r3
 800efcc:	4603      	mov	r3, r0
 800efce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	88db      	ldrh	r3, [r3, #6]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d110      	bne.n	800effa <USBD_StdItfReq+0x7a>
 800efd8:	7bfb      	ldrb	r3, [r7, #15]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d10d      	bne.n	800effa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f000 fd73 	bl	800faca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800efe4:	e009      	b.n	800effa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800efe6:	6839      	ldr	r1, [r7, #0]
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f000 fca3 	bl	800f934 <USBD_CtlError>
          break;
 800efee:	e004      	b.n	800effa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800eff0:	6839      	ldr	r1, [r7, #0]
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 fc9e 	bl	800f934 <USBD_CtlError>
          break;
 800eff8:	e000      	b.n	800effc <USBD_StdItfReq+0x7c>
          break;
 800effa:	bf00      	nop
      }
      break;
 800effc:	e004      	b.n	800f008 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800effe:	6839      	ldr	r1, [r7, #0]
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f000 fc97 	bl	800f934 <USBD_CtlError>
      break;
 800f006:	bf00      	nop
  }

  return ret;
 800f008:	7bfb      	ldrb	r3, [r7, #15]
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3710      	adds	r7, #16
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f012:	b580      	push	{r7, lr}
 800f014:	b084      	sub	sp, #16
 800f016:	af00      	add	r7, sp, #0
 800f018:	6078      	str	r0, [r7, #4]
 800f01a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f01c:	2300      	movs	r3, #0
 800f01e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	889b      	ldrh	r3, [r3, #4]
 800f024:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f02e:	2b40      	cmp	r3, #64	; 0x40
 800f030:	d007      	beq.n	800f042 <USBD_StdEPReq+0x30>
 800f032:	2b40      	cmp	r3, #64	; 0x40
 800f034:	f200 8145 	bhi.w	800f2c2 <USBD_StdEPReq+0x2b0>
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d00c      	beq.n	800f056 <USBD_StdEPReq+0x44>
 800f03c:	2b20      	cmp	r3, #32
 800f03e:	f040 8140 	bne.w	800f2c2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f048:	689b      	ldr	r3, [r3, #8]
 800f04a:	6839      	ldr	r1, [r7, #0]
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	4798      	blx	r3
 800f050:	4603      	mov	r3, r0
 800f052:	73fb      	strb	r3, [r7, #15]
      break;
 800f054:	e13a      	b.n	800f2cc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	785b      	ldrb	r3, [r3, #1]
 800f05a:	2b03      	cmp	r3, #3
 800f05c:	d007      	beq.n	800f06e <USBD_StdEPReq+0x5c>
 800f05e:	2b03      	cmp	r3, #3
 800f060:	f300 8129 	bgt.w	800f2b6 <USBD_StdEPReq+0x2a4>
 800f064:	2b00      	cmp	r3, #0
 800f066:	d07f      	beq.n	800f168 <USBD_StdEPReq+0x156>
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d03c      	beq.n	800f0e6 <USBD_StdEPReq+0xd4>
 800f06c:	e123      	b.n	800f2b6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f074:	b2db      	uxtb	r3, r3
 800f076:	2b02      	cmp	r3, #2
 800f078:	d002      	beq.n	800f080 <USBD_StdEPReq+0x6e>
 800f07a:	2b03      	cmp	r3, #3
 800f07c:	d016      	beq.n	800f0ac <USBD_StdEPReq+0x9a>
 800f07e:	e02c      	b.n	800f0da <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f080:	7bbb      	ldrb	r3, [r7, #14]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d00d      	beq.n	800f0a2 <USBD_StdEPReq+0x90>
 800f086:	7bbb      	ldrb	r3, [r7, #14]
 800f088:	2b80      	cmp	r3, #128	; 0x80
 800f08a:	d00a      	beq.n	800f0a2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f08c:	7bbb      	ldrb	r3, [r7, #14]
 800f08e:	4619      	mov	r1, r3
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f001 f93d 	bl	8010310 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f096:	2180      	movs	r1, #128	; 0x80
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f001 f939 	bl	8010310 <USBD_LL_StallEP>
 800f09e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f0a0:	e020      	b.n	800f0e4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f0a2:	6839      	ldr	r1, [r7, #0]
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f000 fc45 	bl	800f934 <USBD_CtlError>
              break;
 800f0aa:	e01b      	b.n	800f0e4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	885b      	ldrh	r3, [r3, #2]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d10e      	bne.n	800f0d2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f0b4:	7bbb      	ldrb	r3, [r7, #14]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d00b      	beq.n	800f0d2 <USBD_StdEPReq+0xc0>
 800f0ba:	7bbb      	ldrb	r3, [r7, #14]
 800f0bc:	2b80      	cmp	r3, #128	; 0x80
 800f0be:	d008      	beq.n	800f0d2 <USBD_StdEPReq+0xc0>
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	88db      	ldrh	r3, [r3, #6]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d104      	bne.n	800f0d2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f0c8:	7bbb      	ldrb	r3, [r7, #14]
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f001 f91f 	bl	8010310 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 fcf9 	bl	800faca <USBD_CtlSendStatus>

              break;
 800f0d8:	e004      	b.n	800f0e4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f0da:	6839      	ldr	r1, [r7, #0]
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f000 fc29 	bl	800f934 <USBD_CtlError>
              break;
 800f0e2:	bf00      	nop
          }
          break;
 800f0e4:	e0ec      	b.n	800f2c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	2b02      	cmp	r3, #2
 800f0f0:	d002      	beq.n	800f0f8 <USBD_StdEPReq+0xe6>
 800f0f2:	2b03      	cmp	r3, #3
 800f0f4:	d016      	beq.n	800f124 <USBD_StdEPReq+0x112>
 800f0f6:	e030      	b.n	800f15a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f0f8:	7bbb      	ldrb	r3, [r7, #14]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d00d      	beq.n	800f11a <USBD_StdEPReq+0x108>
 800f0fe:	7bbb      	ldrb	r3, [r7, #14]
 800f100:	2b80      	cmp	r3, #128	; 0x80
 800f102:	d00a      	beq.n	800f11a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f104:	7bbb      	ldrb	r3, [r7, #14]
 800f106:	4619      	mov	r1, r3
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f001 f901 	bl	8010310 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f10e:	2180      	movs	r1, #128	; 0x80
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f001 f8fd 	bl	8010310 <USBD_LL_StallEP>
 800f116:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f118:	e025      	b.n	800f166 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f11a:	6839      	ldr	r1, [r7, #0]
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f000 fc09 	bl	800f934 <USBD_CtlError>
              break;
 800f122:	e020      	b.n	800f166 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	885b      	ldrh	r3, [r3, #2]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d11b      	bne.n	800f164 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f12c:	7bbb      	ldrb	r3, [r7, #14]
 800f12e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f132:	2b00      	cmp	r3, #0
 800f134:	d004      	beq.n	800f140 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f136:	7bbb      	ldrb	r3, [r7, #14]
 800f138:	4619      	mov	r1, r3
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f001 f907 	bl	801034e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 fcc2 	bl	800faca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f14c:	689b      	ldr	r3, [r3, #8]
 800f14e:	6839      	ldr	r1, [r7, #0]
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	4798      	blx	r3
 800f154:	4603      	mov	r3, r0
 800f156:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f158:	e004      	b.n	800f164 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f15a:	6839      	ldr	r1, [r7, #0]
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f000 fbe9 	bl	800f934 <USBD_CtlError>
              break;
 800f162:	e000      	b.n	800f166 <USBD_StdEPReq+0x154>
              break;
 800f164:	bf00      	nop
          }
          break;
 800f166:	e0ab      	b.n	800f2c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	2b02      	cmp	r3, #2
 800f172:	d002      	beq.n	800f17a <USBD_StdEPReq+0x168>
 800f174:	2b03      	cmp	r3, #3
 800f176:	d032      	beq.n	800f1de <USBD_StdEPReq+0x1cc>
 800f178:	e097      	b.n	800f2aa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f17a:	7bbb      	ldrb	r3, [r7, #14]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d007      	beq.n	800f190 <USBD_StdEPReq+0x17e>
 800f180:	7bbb      	ldrb	r3, [r7, #14]
 800f182:	2b80      	cmp	r3, #128	; 0x80
 800f184:	d004      	beq.n	800f190 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f186:	6839      	ldr	r1, [r7, #0]
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f000 fbd3 	bl	800f934 <USBD_CtlError>
                break;
 800f18e:	e091      	b.n	800f2b4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f194:	2b00      	cmp	r3, #0
 800f196:	da0b      	bge.n	800f1b0 <USBD_StdEPReq+0x19e>
 800f198:	7bbb      	ldrb	r3, [r7, #14]
 800f19a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f19e:	4613      	mov	r3, r2
 800f1a0:	009b      	lsls	r3, r3, #2
 800f1a2:	4413      	add	r3, r2
 800f1a4:	009b      	lsls	r3, r3, #2
 800f1a6:	3310      	adds	r3, #16
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	4413      	add	r3, r2
 800f1ac:	3304      	adds	r3, #4
 800f1ae:	e00b      	b.n	800f1c8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f1b0:	7bbb      	ldrb	r3, [r7, #14]
 800f1b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	009b      	lsls	r3, r3, #2
 800f1ba:	4413      	add	r3, r2
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	4413      	add	r3, r2
 800f1c6:	3304      	adds	r3, #4
 800f1c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	2202      	movs	r2, #2
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f000 fc1d 	bl	800fa16 <USBD_CtlSendData>
              break;
 800f1dc:	e06a      	b.n	800f2b4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f1de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	da11      	bge.n	800f20a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f1e6:	7bbb      	ldrb	r3, [r7, #14]
 800f1e8:	f003 020f 	and.w	r2, r3, #15
 800f1ec:	6879      	ldr	r1, [r7, #4]
 800f1ee:	4613      	mov	r3, r2
 800f1f0:	009b      	lsls	r3, r3, #2
 800f1f2:	4413      	add	r3, r2
 800f1f4:	009b      	lsls	r3, r3, #2
 800f1f6:	440b      	add	r3, r1
 800f1f8:	3324      	adds	r3, #36	; 0x24
 800f1fa:	881b      	ldrh	r3, [r3, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d117      	bne.n	800f230 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f200:	6839      	ldr	r1, [r7, #0]
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f000 fb96 	bl	800f934 <USBD_CtlError>
                  break;
 800f208:	e054      	b.n	800f2b4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f20a:	7bbb      	ldrb	r3, [r7, #14]
 800f20c:	f003 020f 	and.w	r2, r3, #15
 800f210:	6879      	ldr	r1, [r7, #4]
 800f212:	4613      	mov	r3, r2
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	4413      	add	r3, r2
 800f218:	009b      	lsls	r3, r3, #2
 800f21a:	440b      	add	r3, r1
 800f21c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f220:	881b      	ldrh	r3, [r3, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d104      	bne.n	800f230 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f226:	6839      	ldr	r1, [r7, #0]
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f000 fb83 	bl	800f934 <USBD_CtlError>
                  break;
 800f22e:	e041      	b.n	800f2b4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f234:	2b00      	cmp	r3, #0
 800f236:	da0b      	bge.n	800f250 <USBD_StdEPReq+0x23e>
 800f238:	7bbb      	ldrb	r3, [r7, #14]
 800f23a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f23e:	4613      	mov	r3, r2
 800f240:	009b      	lsls	r3, r3, #2
 800f242:	4413      	add	r3, r2
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	3310      	adds	r3, #16
 800f248:	687a      	ldr	r2, [r7, #4]
 800f24a:	4413      	add	r3, r2
 800f24c:	3304      	adds	r3, #4
 800f24e:	e00b      	b.n	800f268 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f250:	7bbb      	ldrb	r3, [r7, #14]
 800f252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f256:	4613      	mov	r3, r2
 800f258:	009b      	lsls	r3, r3, #2
 800f25a:	4413      	add	r3, r2
 800f25c:	009b      	lsls	r3, r3, #2
 800f25e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f262:	687a      	ldr	r2, [r7, #4]
 800f264:	4413      	add	r3, r2
 800f266:	3304      	adds	r3, #4
 800f268:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f26a:	7bbb      	ldrb	r3, [r7, #14]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d002      	beq.n	800f276 <USBD_StdEPReq+0x264>
 800f270:	7bbb      	ldrb	r3, [r7, #14]
 800f272:	2b80      	cmp	r3, #128	; 0x80
 800f274:	d103      	bne.n	800f27e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	2200      	movs	r2, #0
 800f27a:	601a      	str	r2, [r3, #0]
 800f27c:	e00e      	b.n	800f29c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f27e:	7bbb      	ldrb	r3, [r7, #14]
 800f280:	4619      	mov	r1, r3
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f001 f882 	bl	801038c <USBD_LL_IsStallEP>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d003      	beq.n	800f296 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	2201      	movs	r2, #1
 800f292:	601a      	str	r2, [r3, #0]
 800f294:	e002      	b.n	800f29c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	2200      	movs	r2, #0
 800f29a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	2202      	movs	r2, #2
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 fbb7 	bl	800fa16 <USBD_CtlSendData>
              break;
 800f2a8:	e004      	b.n	800f2b4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f2aa:	6839      	ldr	r1, [r7, #0]
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f000 fb41 	bl	800f934 <USBD_CtlError>
              break;
 800f2b2:	bf00      	nop
          }
          break;
 800f2b4:	e004      	b.n	800f2c0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f2b6:	6839      	ldr	r1, [r7, #0]
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 fb3b 	bl	800f934 <USBD_CtlError>
          break;
 800f2be:	bf00      	nop
      }
      break;
 800f2c0:	e004      	b.n	800f2cc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f2c2:	6839      	ldr	r1, [r7, #0]
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f000 fb35 	bl	800f934 <USBD_CtlError>
      break;
 800f2ca:	bf00      	nop
  }

  return ret;
 800f2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3710      	adds	r7, #16
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
	...

0800f2d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b084      	sub	sp, #16
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	885b      	ldrh	r3, [r3, #2]
 800f2f2:	0a1b      	lsrs	r3, r3, #8
 800f2f4:	b29b      	uxth	r3, r3
 800f2f6:	3b01      	subs	r3, #1
 800f2f8:	2b06      	cmp	r3, #6
 800f2fa:	f200 8128 	bhi.w	800f54e <USBD_GetDescriptor+0x276>
 800f2fe:	a201      	add	r2, pc, #4	; (adr r2, 800f304 <USBD_GetDescriptor+0x2c>)
 800f300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f304:	0800f321 	.word	0x0800f321
 800f308:	0800f339 	.word	0x0800f339
 800f30c:	0800f379 	.word	0x0800f379
 800f310:	0800f54f 	.word	0x0800f54f
 800f314:	0800f54f 	.word	0x0800f54f
 800f318:	0800f4ef 	.word	0x0800f4ef
 800f31c:	0800f51b 	.word	0x0800f51b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	687a      	ldr	r2, [r7, #4]
 800f32a:	7c12      	ldrb	r2, [r2, #16]
 800f32c:	f107 0108 	add.w	r1, r7, #8
 800f330:	4610      	mov	r0, r2
 800f332:	4798      	blx	r3
 800f334:	60f8      	str	r0, [r7, #12]
      break;
 800f336:	e112      	b.n	800f55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	7c1b      	ldrb	r3, [r3, #16]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d10d      	bne.n	800f35c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f348:	f107 0208 	add.w	r2, r7, #8
 800f34c:	4610      	mov	r0, r2
 800f34e:	4798      	blx	r3
 800f350:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	3301      	adds	r3, #1
 800f356:	2202      	movs	r2, #2
 800f358:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f35a:	e100      	b.n	800f55e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f364:	f107 0208 	add.w	r2, r7, #8
 800f368:	4610      	mov	r0, r2
 800f36a:	4798      	blx	r3
 800f36c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	3301      	adds	r3, #1
 800f372:	2202      	movs	r2, #2
 800f374:	701a      	strb	r2, [r3, #0]
      break;
 800f376:	e0f2      	b.n	800f55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	885b      	ldrh	r3, [r3, #2]
 800f37c:	b2db      	uxtb	r3, r3
 800f37e:	2b05      	cmp	r3, #5
 800f380:	f200 80ac 	bhi.w	800f4dc <USBD_GetDescriptor+0x204>
 800f384:	a201      	add	r2, pc, #4	; (adr r2, 800f38c <USBD_GetDescriptor+0xb4>)
 800f386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f38a:	bf00      	nop
 800f38c:	0800f3a5 	.word	0x0800f3a5
 800f390:	0800f3d9 	.word	0x0800f3d9
 800f394:	0800f40d 	.word	0x0800f40d
 800f398:	0800f441 	.word	0x0800f441
 800f39c:	0800f475 	.word	0x0800f475
 800f3a0:	0800f4a9 	.word	0x0800f4a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d00b      	beq.n	800f3c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	687a      	ldr	r2, [r7, #4]
 800f3ba:	7c12      	ldrb	r2, [r2, #16]
 800f3bc:	f107 0108 	add.w	r1, r7, #8
 800f3c0:	4610      	mov	r0, r2
 800f3c2:	4798      	blx	r3
 800f3c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f3c6:	e091      	b.n	800f4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f3c8:	6839      	ldr	r1, [r7, #0]
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 fab2 	bl	800f934 <USBD_CtlError>
            err++;
 800f3d0:	7afb      	ldrb	r3, [r7, #11]
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	72fb      	strb	r3, [r7, #11]
          break;
 800f3d6:	e089      	b.n	800f4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3de:	689b      	ldr	r3, [r3, #8]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d00b      	beq.n	800f3fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	7c12      	ldrb	r2, [r2, #16]
 800f3f0:	f107 0108 	add.w	r1, r7, #8
 800f3f4:	4610      	mov	r0, r2
 800f3f6:	4798      	blx	r3
 800f3f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f3fa:	e077      	b.n	800f4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f3fc:	6839      	ldr	r1, [r7, #0]
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 fa98 	bl	800f934 <USBD_CtlError>
            err++;
 800f404:	7afb      	ldrb	r3, [r7, #11]
 800f406:	3301      	adds	r3, #1
 800f408:	72fb      	strb	r3, [r7, #11]
          break;
 800f40a:	e06f      	b.n	800f4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d00b      	beq.n	800f430 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	7c12      	ldrb	r2, [r2, #16]
 800f424:	f107 0108 	add.w	r1, r7, #8
 800f428:	4610      	mov	r0, r2
 800f42a:	4798      	blx	r3
 800f42c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f42e:	e05d      	b.n	800f4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f430:	6839      	ldr	r1, [r7, #0]
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f000 fa7e 	bl	800f934 <USBD_CtlError>
            err++;
 800f438:	7afb      	ldrb	r3, [r7, #11]
 800f43a:	3301      	adds	r3, #1
 800f43c:	72fb      	strb	r3, [r7, #11]
          break;
 800f43e:	e055      	b.n	800f4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f446:	691b      	ldr	r3, [r3, #16]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d00b      	beq.n	800f464 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f452:	691b      	ldr	r3, [r3, #16]
 800f454:	687a      	ldr	r2, [r7, #4]
 800f456:	7c12      	ldrb	r2, [r2, #16]
 800f458:	f107 0108 	add.w	r1, r7, #8
 800f45c:	4610      	mov	r0, r2
 800f45e:	4798      	blx	r3
 800f460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f462:	e043      	b.n	800f4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f464:	6839      	ldr	r1, [r7, #0]
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 fa64 	bl	800f934 <USBD_CtlError>
            err++;
 800f46c:	7afb      	ldrb	r3, [r7, #11]
 800f46e:	3301      	adds	r3, #1
 800f470:	72fb      	strb	r3, [r7, #11]
          break;
 800f472:	e03b      	b.n	800f4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f47a:	695b      	ldr	r3, [r3, #20]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d00b      	beq.n	800f498 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f486:	695b      	ldr	r3, [r3, #20]
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	7c12      	ldrb	r2, [r2, #16]
 800f48c:	f107 0108 	add.w	r1, r7, #8
 800f490:	4610      	mov	r0, r2
 800f492:	4798      	blx	r3
 800f494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f496:	e029      	b.n	800f4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f498:	6839      	ldr	r1, [r7, #0]
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f000 fa4a 	bl	800f934 <USBD_CtlError>
            err++;
 800f4a0:	7afb      	ldrb	r3, [r7, #11]
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	72fb      	strb	r3, [r7, #11]
          break;
 800f4a6:	e021      	b.n	800f4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4ae:	699b      	ldr	r3, [r3, #24]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00b      	beq.n	800f4cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4ba:	699b      	ldr	r3, [r3, #24]
 800f4bc:	687a      	ldr	r2, [r7, #4]
 800f4be:	7c12      	ldrb	r2, [r2, #16]
 800f4c0:	f107 0108 	add.w	r1, r7, #8
 800f4c4:	4610      	mov	r0, r2
 800f4c6:	4798      	blx	r3
 800f4c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4ca:	e00f      	b.n	800f4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f4cc:	6839      	ldr	r1, [r7, #0]
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f000 fa30 	bl	800f934 <USBD_CtlError>
            err++;
 800f4d4:	7afb      	ldrb	r3, [r7, #11]
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	72fb      	strb	r3, [r7, #11]
          break;
 800f4da:	e007      	b.n	800f4ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f4dc:	6839      	ldr	r1, [r7, #0]
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f000 fa28 	bl	800f934 <USBD_CtlError>
          err++;
 800f4e4:	7afb      	ldrb	r3, [r7, #11]
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f4ea:	bf00      	nop
      }
      break;
 800f4ec:	e037      	b.n	800f55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	7c1b      	ldrb	r3, [r3, #16]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d109      	bne.n	800f50a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4fe:	f107 0208 	add.w	r2, r7, #8
 800f502:	4610      	mov	r0, r2
 800f504:	4798      	blx	r3
 800f506:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f508:	e029      	b.n	800f55e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f50a:	6839      	ldr	r1, [r7, #0]
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 fa11 	bl	800f934 <USBD_CtlError>
        err++;
 800f512:	7afb      	ldrb	r3, [r7, #11]
 800f514:	3301      	adds	r3, #1
 800f516:	72fb      	strb	r3, [r7, #11]
      break;
 800f518:	e021      	b.n	800f55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	7c1b      	ldrb	r3, [r3, #16]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d10d      	bne.n	800f53e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f52a:	f107 0208 	add.w	r2, r7, #8
 800f52e:	4610      	mov	r0, r2
 800f530:	4798      	blx	r3
 800f532:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	3301      	adds	r3, #1
 800f538:	2207      	movs	r2, #7
 800f53a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f53c:	e00f      	b.n	800f55e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f53e:	6839      	ldr	r1, [r7, #0]
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f000 f9f7 	bl	800f934 <USBD_CtlError>
        err++;
 800f546:	7afb      	ldrb	r3, [r7, #11]
 800f548:	3301      	adds	r3, #1
 800f54a:	72fb      	strb	r3, [r7, #11]
      break;
 800f54c:	e007      	b.n	800f55e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f54e:	6839      	ldr	r1, [r7, #0]
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f000 f9ef 	bl	800f934 <USBD_CtlError>
      err++;
 800f556:	7afb      	ldrb	r3, [r7, #11]
 800f558:	3301      	adds	r3, #1
 800f55a:	72fb      	strb	r3, [r7, #11]
      break;
 800f55c:	bf00      	nop
  }

  if (err != 0U)
 800f55e:	7afb      	ldrb	r3, [r7, #11]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d11e      	bne.n	800f5a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	88db      	ldrh	r3, [r3, #6]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d016      	beq.n	800f59a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f56c:	893b      	ldrh	r3, [r7, #8]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d00e      	beq.n	800f590 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	88da      	ldrh	r2, [r3, #6]
 800f576:	893b      	ldrh	r3, [r7, #8]
 800f578:	4293      	cmp	r3, r2
 800f57a:	bf28      	it	cs
 800f57c:	4613      	movcs	r3, r2
 800f57e:	b29b      	uxth	r3, r3
 800f580:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f582:	893b      	ldrh	r3, [r7, #8]
 800f584:	461a      	mov	r2, r3
 800f586:	68f9      	ldr	r1, [r7, #12]
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f000 fa44 	bl	800fa16 <USBD_CtlSendData>
 800f58e:	e009      	b.n	800f5a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f590:	6839      	ldr	r1, [r7, #0]
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 f9ce 	bl	800f934 <USBD_CtlError>
 800f598:	e004      	b.n	800f5a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 fa95 	bl	800faca <USBD_CtlSendStatus>
 800f5a0:	e000      	b.n	800f5a4 <USBD_GetDescriptor+0x2cc>
    return;
 800f5a2:	bf00      	nop
  }
}
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop

0800f5ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	889b      	ldrh	r3, [r3, #4]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d131      	bne.n	800f622 <USBD_SetAddress+0x76>
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	88db      	ldrh	r3, [r3, #6]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d12d      	bne.n	800f622 <USBD_SetAddress+0x76>
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	885b      	ldrh	r3, [r3, #2]
 800f5ca:	2b7f      	cmp	r3, #127	; 0x7f
 800f5cc:	d829      	bhi.n	800f622 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	885b      	ldrh	r3, [r3, #2]
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	2b03      	cmp	r3, #3
 800f5e4:	d104      	bne.n	800f5f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f5e6:	6839      	ldr	r1, [r7, #0]
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 f9a3 	bl	800f934 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5ee:	e01d      	b.n	800f62c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	7bfa      	ldrb	r2, [r7, #15]
 800f5f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f5f8:	7bfb      	ldrb	r3, [r7, #15]
 800f5fa:	4619      	mov	r1, r3
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f000 fef1 	bl	80103e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f000 fa61 	bl	800faca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f608:	7bfb      	ldrb	r3, [r7, #15]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d004      	beq.n	800f618 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2202      	movs	r2, #2
 800f612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f616:	e009      	b.n	800f62c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2201      	movs	r2, #1
 800f61c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f620:	e004      	b.n	800f62c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f622:	6839      	ldr	r1, [r7, #0]
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f000 f985 	bl	800f934 <USBD_CtlError>
  }
}
 800f62a:	bf00      	nop
 800f62c:	bf00      	nop
 800f62e:	3710      	adds	r7, #16
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b084      	sub	sp, #16
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f63e:	2300      	movs	r3, #0
 800f640:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	885b      	ldrh	r3, [r3, #2]
 800f646:	b2da      	uxtb	r2, r3
 800f648:	4b4c      	ldr	r3, [pc, #304]	; (800f77c <USBD_SetConfig+0x148>)
 800f64a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f64c:	4b4b      	ldr	r3, [pc, #300]	; (800f77c <USBD_SetConfig+0x148>)
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	2b01      	cmp	r3, #1
 800f652:	d905      	bls.n	800f660 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f654:	6839      	ldr	r1, [r7, #0]
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f000 f96c 	bl	800f934 <USBD_CtlError>
    return USBD_FAIL;
 800f65c:	2303      	movs	r3, #3
 800f65e:	e088      	b.n	800f772 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f666:	b2db      	uxtb	r3, r3
 800f668:	2b02      	cmp	r3, #2
 800f66a:	d002      	beq.n	800f672 <USBD_SetConfig+0x3e>
 800f66c:	2b03      	cmp	r3, #3
 800f66e:	d025      	beq.n	800f6bc <USBD_SetConfig+0x88>
 800f670:	e071      	b.n	800f756 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f672:	4b42      	ldr	r3, [pc, #264]	; (800f77c <USBD_SetConfig+0x148>)
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d01c      	beq.n	800f6b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f67a:	4b40      	ldr	r3, [pc, #256]	; (800f77c <USBD_SetConfig+0x148>)
 800f67c:	781b      	ldrb	r3, [r3, #0]
 800f67e:	461a      	mov	r2, r3
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f684:	4b3d      	ldr	r3, [pc, #244]	; (800f77c <USBD_SetConfig+0x148>)
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	4619      	mov	r1, r3
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f7ff f948 	bl	800e920 <USBD_SetClassConfig>
 800f690:	4603      	mov	r3, r0
 800f692:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f694:	7bfb      	ldrb	r3, [r7, #15]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d004      	beq.n	800f6a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f69a:	6839      	ldr	r1, [r7, #0]
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f000 f949 	bl	800f934 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f6a2:	e065      	b.n	800f770 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f000 fa10 	bl	800faca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2203      	movs	r2, #3
 800f6ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f6b2:	e05d      	b.n	800f770 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f000 fa08 	bl	800faca <USBD_CtlSendStatus>
      break;
 800f6ba:	e059      	b.n	800f770 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f6bc:	4b2f      	ldr	r3, [pc, #188]	; (800f77c <USBD_SetConfig+0x148>)
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d112      	bne.n	800f6ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2202      	movs	r2, #2
 800f6c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f6cc:	4b2b      	ldr	r3, [pc, #172]	; (800f77c <USBD_SetConfig+0x148>)
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	461a      	mov	r2, r3
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f6d6:	4b29      	ldr	r3, [pc, #164]	; (800f77c <USBD_SetConfig+0x148>)
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	4619      	mov	r1, r3
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f7ff f93b 	bl	800e958 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f000 f9f1 	bl	800faca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f6e8:	e042      	b.n	800f770 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f6ea:	4b24      	ldr	r3, [pc, #144]	; (800f77c <USBD_SetConfig+0x148>)
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d02a      	beq.n	800f74e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	685b      	ldr	r3, [r3, #4]
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	4619      	mov	r1, r3
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f7ff f929 	bl	800e958 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f706:	4b1d      	ldr	r3, [pc, #116]	; (800f77c <USBD_SetConfig+0x148>)
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	461a      	mov	r2, r3
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f710:	4b1a      	ldr	r3, [pc, #104]	; (800f77c <USBD_SetConfig+0x148>)
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	4619      	mov	r1, r3
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f7ff f902 	bl	800e920 <USBD_SetClassConfig>
 800f71c:	4603      	mov	r3, r0
 800f71e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f720:	7bfb      	ldrb	r3, [r7, #15]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d00f      	beq.n	800f746 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f726:	6839      	ldr	r1, [r7, #0]
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f000 f903 	bl	800f934 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	b2db      	uxtb	r3, r3
 800f734:	4619      	mov	r1, r3
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f7ff f90e 	bl	800e958 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2202      	movs	r2, #2
 800f740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f744:	e014      	b.n	800f770 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f000 f9bf 	bl	800faca <USBD_CtlSendStatus>
      break;
 800f74c:	e010      	b.n	800f770 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 f9bb 	bl	800faca <USBD_CtlSendStatus>
      break;
 800f754:	e00c      	b.n	800f770 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f756:	6839      	ldr	r1, [r7, #0]
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f000 f8eb 	bl	800f934 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f75e:	4b07      	ldr	r3, [pc, #28]	; (800f77c <USBD_SetConfig+0x148>)
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	4619      	mov	r1, r3
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f7ff f8f7 	bl	800e958 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f76a:	2303      	movs	r3, #3
 800f76c:	73fb      	strb	r3, [r7, #15]
      break;
 800f76e:	bf00      	nop
  }

  return ret;
 800f770:	7bfb      	ldrb	r3, [r7, #15]
}
 800f772:	4618      	mov	r0, r3
 800f774:	3710      	adds	r7, #16
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	20012f9c 	.word	0x20012f9c

0800f780 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	88db      	ldrh	r3, [r3, #6]
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d004      	beq.n	800f79c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f792:	6839      	ldr	r1, [r7, #0]
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f000 f8cd 	bl	800f934 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f79a:	e023      	b.n	800f7e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	2b02      	cmp	r3, #2
 800f7a6:	dc02      	bgt.n	800f7ae <USBD_GetConfig+0x2e>
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	dc03      	bgt.n	800f7b4 <USBD_GetConfig+0x34>
 800f7ac:	e015      	b.n	800f7da <USBD_GetConfig+0x5a>
 800f7ae:	2b03      	cmp	r3, #3
 800f7b0:	d00b      	beq.n	800f7ca <USBD_GetConfig+0x4a>
 800f7b2:	e012      	b.n	800f7da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	3308      	adds	r3, #8
 800f7be:	2201      	movs	r2, #1
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f000 f927 	bl	800fa16 <USBD_CtlSendData>
        break;
 800f7c8:	e00c      	b.n	800f7e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	3304      	adds	r3, #4
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 f91f 	bl	800fa16 <USBD_CtlSendData>
        break;
 800f7d8:	e004      	b.n	800f7e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f7da:	6839      	ldr	r1, [r7, #0]
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 f8a9 	bl	800f934 <USBD_CtlError>
        break;
 800f7e2:	bf00      	nop
}
 800f7e4:	bf00      	nop
 800f7e6:	3708      	adds	r7, #8
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b082      	sub	sp, #8
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7fc:	b2db      	uxtb	r3, r3
 800f7fe:	3b01      	subs	r3, #1
 800f800:	2b02      	cmp	r3, #2
 800f802:	d81e      	bhi.n	800f842 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	88db      	ldrh	r3, [r3, #6]
 800f808:	2b02      	cmp	r3, #2
 800f80a:	d004      	beq.n	800f816 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f80c:	6839      	ldr	r1, [r7, #0]
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f000 f890 	bl	800f934 <USBD_CtlError>
        break;
 800f814:	e01a      	b.n	800f84c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2201      	movs	r2, #1
 800f81a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f822:	2b00      	cmp	r3, #0
 800f824:	d005      	beq.n	800f832 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	f043 0202 	orr.w	r2, r3, #2
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	330c      	adds	r3, #12
 800f836:	2202      	movs	r2, #2
 800f838:	4619      	mov	r1, r3
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f000 f8eb 	bl	800fa16 <USBD_CtlSendData>
      break;
 800f840:	e004      	b.n	800f84c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f842:	6839      	ldr	r1, [r7, #0]
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 f875 	bl	800f934 <USBD_CtlError>
      break;
 800f84a:	bf00      	nop
  }
}
 800f84c:	bf00      	nop
 800f84e:	3708      	adds	r7, #8
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}

0800f854 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	885b      	ldrh	r3, [r3, #2]
 800f862:	2b01      	cmp	r3, #1
 800f864:	d106      	bne.n	800f874 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2201      	movs	r2, #1
 800f86a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f000 f92b 	bl	800faca <USBD_CtlSendStatus>
  }
}
 800f874:	bf00      	nop
 800f876:	3708      	adds	r7, #8
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	3b01      	subs	r3, #1
 800f890:	2b02      	cmp	r3, #2
 800f892:	d80b      	bhi.n	800f8ac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	885b      	ldrh	r3, [r3, #2]
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d10c      	bne.n	800f8b6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f000 f910 	bl	800faca <USBD_CtlSendStatus>
      }
      break;
 800f8aa:	e004      	b.n	800f8b6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f8ac:	6839      	ldr	r1, [r7, #0]
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 f840 	bl	800f934 <USBD_CtlError>
      break;
 800f8b4:	e000      	b.n	800f8b8 <USBD_ClrFeature+0x3c>
      break;
 800f8b6:	bf00      	nop
  }
}
 800f8b8:	bf00      	nop
 800f8ba:	3708      	adds	r7, #8
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b084      	sub	sp, #16
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	781a      	ldrb	r2, [r3, #0]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	3301      	adds	r3, #1
 800f8da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	781a      	ldrb	r2, [r3, #0]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f8ea:	68f8      	ldr	r0, [r7, #12]
 800f8ec:	f7ff fabb 	bl	800ee66 <SWAPBYTE>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	3301      	adds	r3, #1
 800f902:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f904:	68f8      	ldr	r0, [r7, #12]
 800f906:	f7ff faae 	bl	800ee66 <SWAPBYTE>
 800f90a:	4603      	mov	r3, r0
 800f90c:	461a      	mov	r2, r3
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	3301      	adds	r3, #1
 800f916:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	3301      	adds	r3, #1
 800f91c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f91e:	68f8      	ldr	r0, [r7, #12]
 800f920:	f7ff faa1 	bl	800ee66 <SWAPBYTE>
 800f924:	4603      	mov	r3, r0
 800f926:	461a      	mov	r2, r3
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	80da      	strh	r2, [r3, #6]
}
 800f92c:	bf00      	nop
 800f92e:	3710      	adds	r7, #16
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b082      	sub	sp, #8
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f93e:	2180      	movs	r1, #128	; 0x80
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f000 fce5 	bl	8010310 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f946:	2100      	movs	r1, #0
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f000 fce1 	bl	8010310 <USBD_LL_StallEP>
}
 800f94e:	bf00      	nop
 800f950:	3708      	adds	r7, #8
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}

0800f956 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f956:	b580      	push	{r7, lr}
 800f958:	b086      	sub	sp, #24
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	60f8      	str	r0, [r7, #12]
 800f95e:	60b9      	str	r1, [r7, #8]
 800f960:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f962:	2300      	movs	r3, #0
 800f964:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d036      	beq.n	800f9da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f970:	6938      	ldr	r0, [r7, #16]
 800f972:	f000 f836 	bl	800f9e2 <USBD_GetLen>
 800f976:	4603      	mov	r3, r0
 800f978:	3301      	adds	r3, #1
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	005b      	lsls	r3, r3, #1
 800f97e:	b29a      	uxth	r2, r3
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f984:	7dfb      	ldrb	r3, [r7, #23]
 800f986:	68ba      	ldr	r2, [r7, #8]
 800f988:	4413      	add	r3, r2
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	7812      	ldrb	r2, [r2, #0]
 800f98e:	701a      	strb	r2, [r3, #0]
  idx++;
 800f990:	7dfb      	ldrb	r3, [r7, #23]
 800f992:	3301      	adds	r3, #1
 800f994:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f996:	7dfb      	ldrb	r3, [r7, #23]
 800f998:	68ba      	ldr	r2, [r7, #8]
 800f99a:	4413      	add	r3, r2
 800f99c:	2203      	movs	r2, #3
 800f99e:	701a      	strb	r2, [r3, #0]
  idx++;
 800f9a0:	7dfb      	ldrb	r3, [r7, #23]
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f9a6:	e013      	b.n	800f9d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f9a8:	7dfb      	ldrb	r3, [r7, #23]
 800f9aa:	68ba      	ldr	r2, [r7, #8]
 800f9ac:	4413      	add	r3, r2
 800f9ae:	693a      	ldr	r2, [r7, #16]
 800f9b0:	7812      	ldrb	r2, [r2, #0]
 800f9b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f9b4:	693b      	ldr	r3, [r7, #16]
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	613b      	str	r3, [r7, #16]
    idx++;
 800f9ba:	7dfb      	ldrb	r3, [r7, #23]
 800f9bc:	3301      	adds	r3, #1
 800f9be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f9c0:	7dfb      	ldrb	r3, [r7, #23]
 800f9c2:	68ba      	ldr	r2, [r7, #8]
 800f9c4:	4413      	add	r3, r2
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	701a      	strb	r2, [r3, #0]
    idx++;
 800f9ca:	7dfb      	ldrb	r3, [r7, #23]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d1e7      	bne.n	800f9a8 <USBD_GetString+0x52>
 800f9d8:	e000      	b.n	800f9dc <USBD_GetString+0x86>
    return;
 800f9da:	bf00      	nop
  }
}
 800f9dc:	3718      	adds	r7, #24
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}

0800f9e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f9e2:	b480      	push	{r7}
 800f9e4:	b085      	sub	sp, #20
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f9f2:	e005      	b.n	800fa00 <USBD_GetLen+0x1e>
  {
    len++;
 800f9f4:	7bfb      	ldrb	r3, [r7, #15]
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d1f5      	bne.n	800f9f4 <USBD_GetLen+0x12>
  }

  return len;
 800fa08:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3714      	adds	r7, #20
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa14:	4770      	bx	lr

0800fa16 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b084      	sub	sp, #16
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	60f8      	str	r0, [r7, #12]
 800fa1e:	60b9      	str	r1, [r7, #8]
 800fa20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	2202      	movs	r2, #2
 800fa26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	687a      	ldr	r2, [r7, #4]
 800fa34:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	68ba      	ldr	r2, [r7, #8]
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	68f8      	ldr	r0, [r7, #12]
 800fa3e:	f000 fcf0 	bl	8010422 <USBD_LL_Transmit>

  return USBD_OK;
 800fa42:	2300      	movs	r3, #0
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3710      	adds	r7, #16
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b084      	sub	sp, #16
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	60f8      	str	r0, [r7, #12]
 800fa54:	60b9      	str	r1, [r7, #8]
 800fa56:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	68ba      	ldr	r2, [r7, #8]
 800fa5c:	2100      	movs	r1, #0
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f000 fcdf 	bl	8010422 <USBD_LL_Transmit>

  return USBD_OK;
 800fa64:	2300      	movs	r3, #0
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}

0800fa6e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fa6e:	b580      	push	{r7, lr}
 800fa70:	b084      	sub	sp, #16
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	60f8      	str	r0, [r7, #12]
 800fa76:	60b9      	str	r1, [r7, #8]
 800fa78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	2203      	movs	r2, #3
 800fa7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	687a      	ldr	r2, [r7, #4]
 800fa86:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	68ba      	ldr	r2, [r7, #8]
 800fa96:	2100      	movs	r1, #0
 800fa98:	68f8      	ldr	r0, [r7, #12]
 800fa9a:	f000 fce3 	bl	8010464 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fa9e:	2300      	movs	r3, #0
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3710      	adds	r7, #16
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}

0800faa8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b084      	sub	sp, #16
 800faac:	af00      	add	r7, sp, #0
 800faae:	60f8      	str	r0, [r7, #12]
 800fab0:	60b9      	str	r1, [r7, #8]
 800fab2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	68ba      	ldr	r2, [r7, #8]
 800fab8:	2100      	movs	r1, #0
 800faba:	68f8      	ldr	r0, [r7, #12]
 800fabc:	f000 fcd2 	bl	8010464 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fac0:	2300      	movs	r3, #0
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3710      	adds	r7, #16
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800faca:	b580      	push	{r7, lr}
 800facc:	b082      	sub	sp, #8
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2204      	movs	r2, #4
 800fad6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fada:	2300      	movs	r3, #0
 800fadc:	2200      	movs	r2, #0
 800fade:	2100      	movs	r1, #0
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f000 fc9e 	bl	8010422 <USBD_LL_Transmit>

  return USBD_OK;
 800fae6:	2300      	movs	r3, #0
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3708      	adds	r7, #8
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2205      	movs	r2, #5
 800fafc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fb00:	2300      	movs	r3, #0
 800fb02:	2200      	movs	r2, #0
 800fb04:	2100      	movs	r1, #0
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f000 fcac 	bl	8010464 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb0c:	2300      	movs	r3, #0
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3708      	adds	r7, #8
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}
	...

0800fb18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	4912      	ldr	r1, [pc, #72]	; (800fb68 <MX_USB_DEVICE_Init+0x50>)
 800fb20:	4812      	ldr	r0, [pc, #72]	; (800fb6c <MX_USB_DEVICE_Init+0x54>)
 800fb22:	f7fe fe8f 	bl	800e844 <USBD_Init>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d001      	beq.n	800fb30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fb2c:	f7f3 fb24 	bl	8003178 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fb30:	490f      	ldr	r1, [pc, #60]	; (800fb70 <MX_USB_DEVICE_Init+0x58>)
 800fb32:	480e      	ldr	r0, [pc, #56]	; (800fb6c <MX_USB_DEVICE_Init+0x54>)
 800fb34:	f7fe feb6 	bl	800e8a4 <USBD_RegisterClass>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d001      	beq.n	800fb42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fb3e:	f7f3 fb1b 	bl	8003178 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fb42:	490c      	ldr	r1, [pc, #48]	; (800fb74 <MX_USB_DEVICE_Init+0x5c>)
 800fb44:	4809      	ldr	r0, [pc, #36]	; (800fb6c <MX_USB_DEVICE_Init+0x54>)
 800fb46:	f7fe fdd7 	bl	800e6f8 <USBD_CDC_RegisterInterface>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d001      	beq.n	800fb54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fb50:	f7f3 fb12 	bl	8003178 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fb54:	4805      	ldr	r0, [pc, #20]	; (800fb6c <MX_USB_DEVICE_Init+0x54>)
 800fb56:	f7fe fecc 	bl	800e8f2 <USBD_Start>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d001      	beq.n	800fb64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fb60:	f7f3 fb0a 	bl	8003178 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fb64:	bf00      	nop
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	20000144 	.word	0x20000144
 800fb6c:	20013dac 	.word	0x20013dac
 800fb70:	2000002c 	.word	0x2000002c
 800fb74:	20000130 	.word	0x20000130

0800fb78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	4905      	ldr	r1, [pc, #20]	; (800fb94 <CDC_Init_FS+0x1c>)
 800fb80:	4805      	ldr	r0, [pc, #20]	; (800fb98 <CDC_Init_FS+0x20>)
 800fb82:	f7fe fdce 	bl	800e722 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fb86:	4905      	ldr	r1, [pc, #20]	; (800fb9c <CDC_Init_FS+0x24>)
 800fb88:	4803      	ldr	r0, [pc, #12]	; (800fb98 <CDC_Init_FS+0x20>)
 800fb8a:	f7fe fde8 	bl	800e75e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fb8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	2001487c 	.word	0x2001487c
 800fb98:	20013dac 	.word	0x20013dac
 800fb9c:	2001407c 	.word	0x2001407c

0800fba0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fba0:	b480      	push	{r7}
 800fba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fba4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbae:	4770      	bx	lr

0800fbb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b083      	sub	sp, #12
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	6039      	str	r1, [r7, #0]
 800fbba:	71fb      	strb	r3, [r7, #7]
 800fbbc:	4613      	mov	r3, r2
 800fbbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fbc0:	79fb      	ldrb	r3, [r7, #7]
 800fbc2:	2b23      	cmp	r3, #35	; 0x23
 800fbc4:	d84a      	bhi.n	800fc5c <CDC_Control_FS+0xac>
 800fbc6:	a201      	add	r2, pc, #4	; (adr r2, 800fbcc <CDC_Control_FS+0x1c>)
 800fbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbcc:	0800fc5d 	.word	0x0800fc5d
 800fbd0:	0800fc5d 	.word	0x0800fc5d
 800fbd4:	0800fc5d 	.word	0x0800fc5d
 800fbd8:	0800fc5d 	.word	0x0800fc5d
 800fbdc:	0800fc5d 	.word	0x0800fc5d
 800fbe0:	0800fc5d 	.word	0x0800fc5d
 800fbe4:	0800fc5d 	.word	0x0800fc5d
 800fbe8:	0800fc5d 	.word	0x0800fc5d
 800fbec:	0800fc5d 	.word	0x0800fc5d
 800fbf0:	0800fc5d 	.word	0x0800fc5d
 800fbf4:	0800fc5d 	.word	0x0800fc5d
 800fbf8:	0800fc5d 	.word	0x0800fc5d
 800fbfc:	0800fc5d 	.word	0x0800fc5d
 800fc00:	0800fc5d 	.word	0x0800fc5d
 800fc04:	0800fc5d 	.word	0x0800fc5d
 800fc08:	0800fc5d 	.word	0x0800fc5d
 800fc0c:	0800fc5d 	.word	0x0800fc5d
 800fc10:	0800fc5d 	.word	0x0800fc5d
 800fc14:	0800fc5d 	.word	0x0800fc5d
 800fc18:	0800fc5d 	.word	0x0800fc5d
 800fc1c:	0800fc5d 	.word	0x0800fc5d
 800fc20:	0800fc5d 	.word	0x0800fc5d
 800fc24:	0800fc5d 	.word	0x0800fc5d
 800fc28:	0800fc5d 	.word	0x0800fc5d
 800fc2c:	0800fc5d 	.word	0x0800fc5d
 800fc30:	0800fc5d 	.word	0x0800fc5d
 800fc34:	0800fc5d 	.word	0x0800fc5d
 800fc38:	0800fc5d 	.word	0x0800fc5d
 800fc3c:	0800fc5d 	.word	0x0800fc5d
 800fc40:	0800fc5d 	.word	0x0800fc5d
 800fc44:	0800fc5d 	.word	0x0800fc5d
 800fc48:	0800fc5d 	.word	0x0800fc5d
 800fc4c:	0800fc5d 	.word	0x0800fc5d
 800fc50:	0800fc5d 	.word	0x0800fc5d
 800fc54:	0800fc5d 	.word	0x0800fc5d
 800fc58:	0800fc5d 	.word	0x0800fc5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fc5c:	bf00      	nop
  }

  return (USBD_OK);
 800fc5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	370c      	adds	r7, #12
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr

0800fc6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fc76:	6879      	ldr	r1, [r7, #4]
 800fc78:	4805      	ldr	r0, [pc, #20]	; (800fc90 <CDC_Receive_FS+0x24>)
 800fc7a:	f7fe fd70 	bl	800e75e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fc7e:	4804      	ldr	r0, [pc, #16]	; (800fc90 <CDC_Receive_FS+0x24>)
 800fc80:	f7fe fdb6 	bl	800e7f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fc84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	20013dac 	.word	0x20013dac

0800fc94 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b084      	sub	sp, #16
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fca0:	2300      	movs	r3, #0
 800fca2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fca4:	4b0d      	ldr	r3, [pc, #52]	; (800fcdc <CDC_Transmit_FS+0x48>)
 800fca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fcaa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d001      	beq.n	800fcba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	e00b      	b.n	800fcd2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fcba:	887b      	ldrh	r3, [r7, #2]
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	6879      	ldr	r1, [r7, #4]
 800fcc0:	4806      	ldr	r0, [pc, #24]	; (800fcdc <CDC_Transmit_FS+0x48>)
 800fcc2:	f7fe fd2e 	bl	800e722 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fcc6:	4805      	ldr	r0, [pc, #20]	; (800fcdc <CDC_Transmit_FS+0x48>)
 800fcc8:	f7fe fd62 	bl	800e790 <USBD_CDC_TransmitPacket>
 800fccc:	4603      	mov	r3, r0
 800fcce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fcd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3710      	adds	r7, #16
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
 800fcda:	bf00      	nop
 800fcdc:	20013dac 	.word	0x20013dac

0800fce0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b087      	sub	sp, #28
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	4613      	mov	r3, r2
 800fcec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fcf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	371c      	adds	r7, #28
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr
	...

0800fd04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd04:	b480      	push	{r7}
 800fd06:	b083      	sub	sp, #12
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	6039      	str	r1, [r7, #0]
 800fd0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	2212      	movs	r2, #18
 800fd14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fd16:	4b03      	ldr	r3, [pc, #12]	; (800fd24 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	370c      	adds	r7, #12
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr
 800fd24:	20000160 	.word	0x20000160

0800fd28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	4603      	mov	r3, r0
 800fd30:	6039      	str	r1, [r7, #0]
 800fd32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	2204      	movs	r2, #4
 800fd38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fd3a:	4b03      	ldr	r3, [pc, #12]	; (800fd48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	370c      	adds	r7, #12
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr
 800fd48:	20000174 	.word	0x20000174

0800fd4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b082      	sub	sp, #8
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	4603      	mov	r3, r0
 800fd54:	6039      	str	r1, [r7, #0]
 800fd56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fd58:	79fb      	ldrb	r3, [r7, #7]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d105      	bne.n	800fd6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fd5e:	683a      	ldr	r2, [r7, #0]
 800fd60:	4907      	ldr	r1, [pc, #28]	; (800fd80 <USBD_FS_ProductStrDescriptor+0x34>)
 800fd62:	4808      	ldr	r0, [pc, #32]	; (800fd84 <USBD_FS_ProductStrDescriptor+0x38>)
 800fd64:	f7ff fdf7 	bl	800f956 <USBD_GetString>
 800fd68:	e004      	b.n	800fd74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fd6a:	683a      	ldr	r2, [r7, #0]
 800fd6c:	4904      	ldr	r1, [pc, #16]	; (800fd80 <USBD_FS_ProductStrDescriptor+0x34>)
 800fd6e:	4805      	ldr	r0, [pc, #20]	; (800fd84 <USBD_FS_ProductStrDescriptor+0x38>)
 800fd70:	f7ff fdf1 	bl	800f956 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fd74:	4b02      	ldr	r3, [pc, #8]	; (800fd80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3708      	adds	r7, #8
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	2001507c 	.word	0x2001507c
 800fd84:	080122c4 	.word	0x080122c4

0800fd88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b082      	sub	sp, #8
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	4603      	mov	r3, r0
 800fd90:	6039      	str	r1, [r7, #0]
 800fd92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fd94:	683a      	ldr	r2, [r7, #0]
 800fd96:	4904      	ldr	r1, [pc, #16]	; (800fda8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fd98:	4804      	ldr	r0, [pc, #16]	; (800fdac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fd9a:	f7ff fddc 	bl	800f956 <USBD_GetString>
  return USBD_StrDesc;
 800fd9e:	4b02      	ldr	r3, [pc, #8]	; (800fda8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	2001507c 	.word	0x2001507c
 800fdac:	080122d4 	.word	0x080122d4

0800fdb0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	6039      	str	r1, [r7, #0]
 800fdba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	221a      	movs	r2, #26
 800fdc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fdc2:	f000 f843 	bl	800fe4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fdc6:	4b02      	ldr	r3, [pc, #8]	; (800fdd0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	20000178 	.word	0x20000178

0800fdd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	4603      	mov	r3, r0
 800fddc:	6039      	str	r1, [r7, #0]
 800fdde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fde0:	79fb      	ldrb	r3, [r7, #7]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d105      	bne.n	800fdf2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fde6:	683a      	ldr	r2, [r7, #0]
 800fde8:	4907      	ldr	r1, [pc, #28]	; (800fe08 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fdea:	4808      	ldr	r0, [pc, #32]	; (800fe0c <USBD_FS_ConfigStrDescriptor+0x38>)
 800fdec:	f7ff fdb3 	bl	800f956 <USBD_GetString>
 800fdf0:	e004      	b.n	800fdfc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fdf2:	683a      	ldr	r2, [r7, #0]
 800fdf4:	4904      	ldr	r1, [pc, #16]	; (800fe08 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fdf6:	4805      	ldr	r0, [pc, #20]	; (800fe0c <USBD_FS_ConfigStrDescriptor+0x38>)
 800fdf8:	f7ff fdad 	bl	800f956 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fdfc:	4b02      	ldr	r3, [pc, #8]	; (800fe08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3708      	adds	r7, #8
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	2001507c 	.word	0x2001507c
 800fe0c:	080122e8 	.word	0x080122e8

0800fe10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	4603      	mov	r3, r0
 800fe18:	6039      	str	r1, [r7, #0]
 800fe1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fe1c:	79fb      	ldrb	r3, [r7, #7]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d105      	bne.n	800fe2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fe22:	683a      	ldr	r2, [r7, #0]
 800fe24:	4907      	ldr	r1, [pc, #28]	; (800fe44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fe26:	4808      	ldr	r0, [pc, #32]	; (800fe48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fe28:	f7ff fd95 	bl	800f956 <USBD_GetString>
 800fe2c:	e004      	b.n	800fe38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fe2e:	683a      	ldr	r2, [r7, #0]
 800fe30:	4904      	ldr	r1, [pc, #16]	; (800fe44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fe32:	4805      	ldr	r0, [pc, #20]	; (800fe48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fe34:	f7ff fd8f 	bl	800f956 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe38:	4b02      	ldr	r3, [pc, #8]	; (800fe44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3708      	adds	r7, #8
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop
 800fe44:	2001507c 	.word	0x2001507c
 800fe48:	080122f4 	.word	0x080122f4

0800fe4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fe52:	4b0f      	ldr	r3, [pc, #60]	; (800fe90 <Get_SerialNum+0x44>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fe58:	4b0e      	ldr	r3, [pc, #56]	; (800fe94 <Get_SerialNum+0x48>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fe5e:	4b0e      	ldr	r3, [pc, #56]	; (800fe98 <Get_SerialNum+0x4c>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fe64:	68fa      	ldr	r2, [r7, #12]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	4413      	add	r3, r2
 800fe6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d009      	beq.n	800fe86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fe72:	2208      	movs	r2, #8
 800fe74:	4909      	ldr	r1, [pc, #36]	; (800fe9c <Get_SerialNum+0x50>)
 800fe76:	68f8      	ldr	r0, [r7, #12]
 800fe78:	f000 f814 	bl	800fea4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fe7c:	2204      	movs	r2, #4
 800fe7e:	4908      	ldr	r1, [pc, #32]	; (800fea0 <Get_SerialNum+0x54>)
 800fe80:	68b8      	ldr	r0, [r7, #8]
 800fe82:	f000 f80f 	bl	800fea4 <IntToUnicode>
  }
}
 800fe86:	bf00      	nop
 800fe88:	3710      	adds	r7, #16
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	1fff7a10 	.word	0x1fff7a10
 800fe94:	1fff7a14 	.word	0x1fff7a14
 800fe98:	1fff7a18 	.word	0x1fff7a18
 800fe9c:	2000017a 	.word	0x2000017a
 800fea0:	2000018a 	.word	0x2000018a

0800fea4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b087      	sub	sp, #28
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	4613      	mov	r3, r2
 800feb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800feb2:	2300      	movs	r3, #0
 800feb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800feb6:	2300      	movs	r3, #0
 800feb8:	75fb      	strb	r3, [r7, #23]
 800feba:	e027      	b.n	800ff0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	0f1b      	lsrs	r3, r3, #28
 800fec0:	2b09      	cmp	r3, #9
 800fec2:	d80b      	bhi.n	800fedc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	0f1b      	lsrs	r3, r3, #28
 800fec8:	b2da      	uxtb	r2, r3
 800feca:	7dfb      	ldrb	r3, [r7, #23]
 800fecc:	005b      	lsls	r3, r3, #1
 800fece:	4619      	mov	r1, r3
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	440b      	add	r3, r1
 800fed4:	3230      	adds	r2, #48	; 0x30
 800fed6:	b2d2      	uxtb	r2, r2
 800fed8:	701a      	strb	r2, [r3, #0]
 800feda:	e00a      	b.n	800fef2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	0f1b      	lsrs	r3, r3, #28
 800fee0:	b2da      	uxtb	r2, r3
 800fee2:	7dfb      	ldrb	r3, [r7, #23]
 800fee4:	005b      	lsls	r3, r3, #1
 800fee6:	4619      	mov	r1, r3
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	440b      	add	r3, r1
 800feec:	3237      	adds	r2, #55	; 0x37
 800feee:	b2d2      	uxtb	r2, r2
 800fef0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	011b      	lsls	r3, r3, #4
 800fef6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fef8:	7dfb      	ldrb	r3, [r7, #23]
 800fefa:	005b      	lsls	r3, r3, #1
 800fefc:	3301      	adds	r3, #1
 800fefe:	68ba      	ldr	r2, [r7, #8]
 800ff00:	4413      	add	r3, r2
 800ff02:	2200      	movs	r2, #0
 800ff04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ff06:	7dfb      	ldrb	r3, [r7, #23]
 800ff08:	3301      	adds	r3, #1
 800ff0a:	75fb      	strb	r3, [r7, #23]
 800ff0c:	7dfa      	ldrb	r2, [r7, #23]
 800ff0e:	79fb      	ldrb	r3, [r7, #7]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d3d3      	bcc.n	800febc <IntToUnicode+0x18>
  }
}
 800ff14:	bf00      	nop
 800ff16:	bf00      	nop
 800ff18:	371c      	adds	r7, #28
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
	...

0800ff24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b08a      	sub	sp, #40	; 0x28
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ff2c:	f107 0314 	add.w	r3, r7, #20
 800ff30:	2200      	movs	r2, #0
 800ff32:	601a      	str	r2, [r3, #0]
 800ff34:	605a      	str	r2, [r3, #4]
 800ff36:	609a      	str	r2, [r3, #8]
 800ff38:	60da      	str	r2, [r3, #12]
 800ff3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ff44:	d147      	bne.n	800ffd6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ff46:	2300      	movs	r3, #0
 800ff48:	613b      	str	r3, [r7, #16]
 800ff4a:	4b25      	ldr	r3, [pc, #148]	; (800ffe0 <HAL_PCD_MspInit+0xbc>)
 800ff4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff4e:	4a24      	ldr	r2, [pc, #144]	; (800ffe0 <HAL_PCD_MspInit+0xbc>)
 800ff50:	f043 0301 	orr.w	r3, r3, #1
 800ff54:	6313      	str	r3, [r2, #48]	; 0x30
 800ff56:	4b22      	ldr	r3, [pc, #136]	; (800ffe0 <HAL_PCD_MspInit+0xbc>)
 800ff58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff5a:	f003 0301 	and.w	r3, r3, #1
 800ff5e:	613b      	str	r3, [r7, #16]
 800ff60:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ff62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ff70:	f107 0314 	add.w	r3, r7, #20
 800ff74:	4619      	mov	r1, r3
 800ff76:	481b      	ldr	r0, [pc, #108]	; (800ffe4 <HAL_PCD_MspInit+0xc0>)
 800ff78:	f7f5 fe8e 	bl	8005c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ff7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ff80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ff82:	2302      	movs	r3, #2
 800ff84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff86:	2300      	movs	r3, #0
 800ff88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ff8a:	2303      	movs	r3, #3
 800ff8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ff8e:	230a      	movs	r3, #10
 800ff90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ff92:	f107 0314 	add.w	r3, r7, #20
 800ff96:	4619      	mov	r1, r3
 800ff98:	4812      	ldr	r0, [pc, #72]	; (800ffe4 <HAL_PCD_MspInit+0xc0>)
 800ff9a:	f7f5 fe7d 	bl	8005c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ff9e:	4b10      	ldr	r3, [pc, #64]	; (800ffe0 <HAL_PCD_MspInit+0xbc>)
 800ffa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffa2:	4a0f      	ldr	r2, [pc, #60]	; (800ffe0 <HAL_PCD_MspInit+0xbc>)
 800ffa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffa8:	6353      	str	r3, [r2, #52]	; 0x34
 800ffaa:	2300      	movs	r3, #0
 800ffac:	60fb      	str	r3, [r7, #12]
 800ffae:	4b0c      	ldr	r3, [pc, #48]	; (800ffe0 <HAL_PCD_MspInit+0xbc>)
 800ffb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffb2:	4a0b      	ldr	r2, [pc, #44]	; (800ffe0 <HAL_PCD_MspInit+0xbc>)
 800ffb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ffb8:	6453      	str	r3, [r2, #68]	; 0x44
 800ffba:	4b09      	ldr	r3, [pc, #36]	; (800ffe0 <HAL_PCD_MspInit+0xbc>)
 800ffbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ffc2:	60fb      	str	r3, [r7, #12]
 800ffc4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	2100      	movs	r1, #0
 800ffca:	2043      	movs	r0, #67	; 0x43
 800ffcc:	f7f5 fb50 	bl	8005670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ffd0:	2043      	movs	r0, #67	; 0x43
 800ffd2:	f7f5 fb69 	bl	80056a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ffd6:	bf00      	nop
 800ffd8:	3728      	adds	r7, #40	; 0x28
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}
 800ffde:	bf00      	nop
 800ffe0:	40023800 	.word	0x40023800
 800ffe4:	40020000 	.word	0x40020000

0800ffe8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fffc:	4619      	mov	r1, r3
 800fffe:	4610      	mov	r0, r2
 8010000:	f7fe fcc2 	bl	800e988 <USBD_LL_SetupStage>
}
 8010004:	bf00      	nop
 8010006:	3708      	adds	r7, #8
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	460b      	mov	r3, r1
 8010016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801001e:	78fa      	ldrb	r2, [r7, #3]
 8010020:	6879      	ldr	r1, [r7, #4]
 8010022:	4613      	mov	r3, r2
 8010024:	00db      	lsls	r3, r3, #3
 8010026:	1a9b      	subs	r3, r3, r2
 8010028:	009b      	lsls	r3, r3, #2
 801002a:	440b      	add	r3, r1
 801002c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010030:	681a      	ldr	r2, [r3, #0]
 8010032:	78fb      	ldrb	r3, [r7, #3]
 8010034:	4619      	mov	r1, r3
 8010036:	f7fe fcfc 	bl	800ea32 <USBD_LL_DataOutStage>
}
 801003a:	bf00      	nop
 801003c:	3708      	adds	r7, #8
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}

08010042 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010042:	b580      	push	{r7, lr}
 8010044:	b082      	sub	sp, #8
 8010046:	af00      	add	r7, sp, #0
 8010048:	6078      	str	r0, [r7, #4]
 801004a:	460b      	mov	r3, r1
 801004c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010054:	78fa      	ldrb	r2, [r7, #3]
 8010056:	6879      	ldr	r1, [r7, #4]
 8010058:	4613      	mov	r3, r2
 801005a:	00db      	lsls	r3, r3, #3
 801005c:	1a9b      	subs	r3, r3, r2
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	440b      	add	r3, r1
 8010062:	3348      	adds	r3, #72	; 0x48
 8010064:	681a      	ldr	r2, [r3, #0]
 8010066:	78fb      	ldrb	r3, [r7, #3]
 8010068:	4619      	mov	r1, r3
 801006a:	f7fe fd45 	bl	800eaf8 <USBD_LL_DataInStage>
}
 801006e:	bf00      	nop
 8010070:	3708      	adds	r7, #8
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}

08010076 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010076:	b580      	push	{r7, lr}
 8010078:	b082      	sub	sp, #8
 801007a:	af00      	add	r7, sp, #0
 801007c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010084:	4618      	mov	r0, r3
 8010086:	f7fe fe59 	bl	800ed3c <USBD_LL_SOF>
}
 801008a:	bf00      	nop
 801008c:	3708      	adds	r7, #8
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}

08010092 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010092:	b580      	push	{r7, lr}
 8010094:	b084      	sub	sp, #16
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801009a:	2301      	movs	r3, #1
 801009c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	68db      	ldr	r3, [r3, #12]
 80100a2:	2b02      	cmp	r3, #2
 80100a4:	d001      	beq.n	80100aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80100a6:	f7f3 f867 	bl	8003178 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80100b0:	7bfa      	ldrb	r2, [r7, #15]
 80100b2:	4611      	mov	r1, r2
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7fe fe03 	bl	800ecc0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7fe fdaf 	bl	800ec24 <USBD_LL_Reset>
}
 80100c6:	bf00      	nop
 80100c8:	3710      	adds	r7, #16
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
	...

080100d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b082      	sub	sp, #8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fe fdfe 	bl	800ece0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	6812      	ldr	r2, [r2, #0]
 80100f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80100f6:	f043 0301 	orr.w	r3, r3, #1
 80100fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6a1b      	ldr	r3, [r3, #32]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d005      	beq.n	8010110 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010104:	4b04      	ldr	r3, [pc, #16]	; (8010118 <HAL_PCD_SuspendCallback+0x48>)
 8010106:	691b      	ldr	r3, [r3, #16]
 8010108:	4a03      	ldr	r2, [pc, #12]	; (8010118 <HAL_PCD_SuspendCallback+0x48>)
 801010a:	f043 0306 	orr.w	r3, r3, #6
 801010e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010110:	bf00      	nop
 8010112:	3708      	adds	r7, #8
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	e000ed00 	.word	0xe000ed00

0801011c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801012a:	4618      	mov	r0, r3
 801012c:	f7fe fdee 	bl	800ed0c <USBD_LL_Resume>
}
 8010130:	bf00      	nop
 8010132:	3708      	adds	r7, #8
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	460b      	mov	r3, r1
 8010142:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801014a:	78fa      	ldrb	r2, [r7, #3]
 801014c:	4611      	mov	r1, r2
 801014e:	4618      	mov	r0, r3
 8010150:	f7fe fe3c 	bl	800edcc <USBD_LL_IsoOUTIncomplete>
}
 8010154:	bf00      	nop
 8010156:	3708      	adds	r7, #8
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}

0801015c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b082      	sub	sp, #8
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	460b      	mov	r3, r1
 8010166:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801016e:	78fa      	ldrb	r2, [r7, #3]
 8010170:	4611      	mov	r1, r2
 8010172:	4618      	mov	r0, r3
 8010174:	f7fe fe04 	bl	800ed80 <USBD_LL_IsoINIncomplete>
}
 8010178:	bf00      	nop
 801017a:	3708      	adds	r7, #8
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}

08010180 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b082      	sub	sp, #8
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801018e:	4618      	mov	r0, r3
 8010190:	f7fe fe42 	bl	800ee18 <USBD_LL_DevConnected>
}
 8010194:	bf00      	nop
 8010196:	3708      	adds	r7, #8
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}

0801019c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fe fe3f 	bl	800ee2e <USBD_LL_DevDisconnected>
}
 80101b0:	bf00      	nop
 80101b2:	3708      	adds	r7, #8
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d13c      	bne.n	8010242 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80101c8:	4a20      	ldr	r2, [pc, #128]	; (801024c <USBD_LL_Init+0x94>)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	4a1e      	ldr	r2, [pc, #120]	; (801024c <USBD_LL_Init+0x94>)
 80101d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80101d8:	4b1c      	ldr	r3, [pc, #112]	; (801024c <USBD_LL_Init+0x94>)
 80101da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80101de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80101e0:	4b1a      	ldr	r3, [pc, #104]	; (801024c <USBD_LL_Init+0x94>)
 80101e2:	2204      	movs	r2, #4
 80101e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80101e6:	4b19      	ldr	r3, [pc, #100]	; (801024c <USBD_LL_Init+0x94>)
 80101e8:	2202      	movs	r2, #2
 80101ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80101ec:	4b17      	ldr	r3, [pc, #92]	; (801024c <USBD_LL_Init+0x94>)
 80101ee:	2200      	movs	r2, #0
 80101f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80101f2:	4b16      	ldr	r3, [pc, #88]	; (801024c <USBD_LL_Init+0x94>)
 80101f4:	2202      	movs	r2, #2
 80101f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80101f8:	4b14      	ldr	r3, [pc, #80]	; (801024c <USBD_LL_Init+0x94>)
 80101fa:	2200      	movs	r2, #0
 80101fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80101fe:	4b13      	ldr	r3, [pc, #76]	; (801024c <USBD_LL_Init+0x94>)
 8010200:	2200      	movs	r2, #0
 8010202:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010204:	4b11      	ldr	r3, [pc, #68]	; (801024c <USBD_LL_Init+0x94>)
 8010206:	2200      	movs	r2, #0
 8010208:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801020a:	4b10      	ldr	r3, [pc, #64]	; (801024c <USBD_LL_Init+0x94>)
 801020c:	2201      	movs	r2, #1
 801020e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010210:	4b0e      	ldr	r3, [pc, #56]	; (801024c <USBD_LL_Init+0x94>)
 8010212:	2200      	movs	r2, #0
 8010214:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010216:	480d      	ldr	r0, [pc, #52]	; (801024c <USBD_LL_Init+0x94>)
 8010218:	f7f6 fecb 	bl	8006fb2 <HAL_PCD_Init>
 801021c:	4603      	mov	r3, r0
 801021e:	2b00      	cmp	r3, #0
 8010220:	d001      	beq.n	8010226 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010222:	f7f2 ffa9 	bl	8003178 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010226:	2180      	movs	r1, #128	; 0x80
 8010228:	4808      	ldr	r0, [pc, #32]	; (801024c <USBD_LL_Init+0x94>)
 801022a:	f7f8 f828 	bl	800827e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801022e:	2240      	movs	r2, #64	; 0x40
 8010230:	2100      	movs	r1, #0
 8010232:	4806      	ldr	r0, [pc, #24]	; (801024c <USBD_LL_Init+0x94>)
 8010234:	f7f7 ffdc 	bl	80081f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010238:	2280      	movs	r2, #128	; 0x80
 801023a:	2101      	movs	r1, #1
 801023c:	4803      	ldr	r0, [pc, #12]	; (801024c <USBD_LL_Init+0x94>)
 801023e:	f7f7 ffd7 	bl	80081f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010242:	2300      	movs	r3, #0
}
 8010244:	4618      	mov	r0, r3
 8010246:	3708      	adds	r7, #8
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}
 801024c:	2001527c 	.word	0x2001527c

08010250 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b084      	sub	sp, #16
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010258:	2300      	movs	r3, #0
 801025a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801025c:	2300      	movs	r3, #0
 801025e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010266:	4618      	mov	r0, r3
 8010268:	f7f6 ffc0 	bl	80071ec <HAL_PCD_Start>
 801026c:	4603      	mov	r3, r0
 801026e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010270:	7bfb      	ldrb	r3, [r7, #15]
 8010272:	4618      	mov	r0, r3
 8010274:	f000 f942 	bl	80104fc <USBD_Get_USB_Status>
 8010278:	4603      	mov	r3, r0
 801027a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801027c:	7bbb      	ldrb	r3, [r7, #14]
}
 801027e:	4618      	mov	r0, r3
 8010280:	3710      	adds	r7, #16
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}

08010286 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010286:	b580      	push	{r7, lr}
 8010288:	b084      	sub	sp, #16
 801028a:	af00      	add	r7, sp, #0
 801028c:	6078      	str	r0, [r7, #4]
 801028e:	4608      	mov	r0, r1
 8010290:	4611      	mov	r1, r2
 8010292:	461a      	mov	r2, r3
 8010294:	4603      	mov	r3, r0
 8010296:	70fb      	strb	r3, [r7, #3]
 8010298:	460b      	mov	r3, r1
 801029a:	70bb      	strb	r3, [r7, #2]
 801029c:	4613      	mov	r3, r2
 801029e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102a0:	2300      	movs	r3, #0
 80102a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102a4:	2300      	movs	r3, #0
 80102a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80102ae:	78bb      	ldrb	r3, [r7, #2]
 80102b0:	883a      	ldrh	r2, [r7, #0]
 80102b2:	78f9      	ldrb	r1, [r7, #3]
 80102b4:	f7f7 fba4 	bl	8007a00 <HAL_PCD_EP_Open>
 80102b8:	4603      	mov	r3, r0
 80102ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102bc:	7bfb      	ldrb	r3, [r7, #15]
 80102be:	4618      	mov	r0, r3
 80102c0:	f000 f91c 	bl	80104fc <USBD_Get_USB_Status>
 80102c4:	4603      	mov	r3, r0
 80102c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	3710      	adds	r7, #16
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}

080102d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80102d2:	b580      	push	{r7, lr}
 80102d4:	b084      	sub	sp, #16
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6078      	str	r0, [r7, #4]
 80102da:	460b      	mov	r3, r1
 80102dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102de:	2300      	movs	r3, #0
 80102e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102e2:	2300      	movs	r3, #0
 80102e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80102ec:	78fa      	ldrb	r2, [r7, #3]
 80102ee:	4611      	mov	r1, r2
 80102f0:	4618      	mov	r0, r3
 80102f2:	f7f7 fbed 	bl	8007ad0 <HAL_PCD_EP_Close>
 80102f6:	4603      	mov	r3, r0
 80102f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102fa:	7bfb      	ldrb	r3, [r7, #15]
 80102fc:	4618      	mov	r0, r3
 80102fe:	f000 f8fd 	bl	80104fc <USBD_Get_USB_Status>
 8010302:	4603      	mov	r3, r0
 8010304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010306:	7bbb      	ldrb	r3, [r7, #14]
}
 8010308:	4618      	mov	r0, r3
 801030a:	3710      	adds	r7, #16
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}

08010310 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
 8010318:	460b      	mov	r3, r1
 801031a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801031c:	2300      	movs	r3, #0
 801031e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010320:	2300      	movs	r3, #0
 8010322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801032a:	78fa      	ldrb	r2, [r7, #3]
 801032c:	4611      	mov	r1, r2
 801032e:	4618      	mov	r0, r3
 8010330:	f7f7 fcc5 	bl	8007cbe <HAL_PCD_EP_SetStall>
 8010334:	4603      	mov	r3, r0
 8010336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010338:	7bfb      	ldrb	r3, [r7, #15]
 801033a:	4618      	mov	r0, r3
 801033c:	f000 f8de 	bl	80104fc <USBD_Get_USB_Status>
 8010340:	4603      	mov	r3, r0
 8010342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010344:	7bbb      	ldrb	r3, [r7, #14]
}
 8010346:	4618      	mov	r0, r3
 8010348:	3710      	adds	r7, #16
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}

0801034e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801034e:	b580      	push	{r7, lr}
 8010350:	b084      	sub	sp, #16
 8010352:	af00      	add	r7, sp, #0
 8010354:	6078      	str	r0, [r7, #4]
 8010356:	460b      	mov	r3, r1
 8010358:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801035a:	2300      	movs	r3, #0
 801035c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801035e:	2300      	movs	r3, #0
 8010360:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010368:	78fa      	ldrb	r2, [r7, #3]
 801036a:	4611      	mov	r1, r2
 801036c:	4618      	mov	r0, r3
 801036e:	f7f7 fd0a 	bl	8007d86 <HAL_PCD_EP_ClrStall>
 8010372:	4603      	mov	r3, r0
 8010374:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010376:	7bfb      	ldrb	r3, [r7, #15]
 8010378:	4618      	mov	r0, r3
 801037a:	f000 f8bf 	bl	80104fc <USBD_Get_USB_Status>
 801037e:	4603      	mov	r3, r0
 8010380:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010382:	7bbb      	ldrb	r3, [r7, #14]
}
 8010384:	4618      	mov	r0, r3
 8010386:	3710      	adds	r7, #16
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}

0801038c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801038c:	b480      	push	{r7}
 801038e:	b085      	sub	sp, #20
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	460b      	mov	r3, r1
 8010396:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801039e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80103a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	da0b      	bge.n	80103c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80103a8:	78fb      	ldrb	r3, [r7, #3]
 80103aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103ae:	68f9      	ldr	r1, [r7, #12]
 80103b0:	4613      	mov	r3, r2
 80103b2:	00db      	lsls	r3, r3, #3
 80103b4:	1a9b      	subs	r3, r3, r2
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	440b      	add	r3, r1
 80103ba:	333e      	adds	r3, #62	; 0x3e
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	e00b      	b.n	80103d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80103c0:	78fb      	ldrb	r3, [r7, #3]
 80103c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103c6:	68f9      	ldr	r1, [r7, #12]
 80103c8:	4613      	mov	r3, r2
 80103ca:	00db      	lsls	r3, r3, #3
 80103cc:	1a9b      	subs	r3, r3, r2
 80103ce:	009b      	lsls	r3, r3, #2
 80103d0:	440b      	add	r3, r1
 80103d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80103d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80103d8:	4618      	mov	r0, r3
 80103da:	3714      	adds	r7, #20
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr

080103e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b084      	sub	sp, #16
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	460b      	mov	r3, r1
 80103ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103f0:	2300      	movs	r3, #0
 80103f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103f4:	2300      	movs	r3, #0
 80103f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80103fe:	78fa      	ldrb	r2, [r7, #3]
 8010400:	4611      	mov	r1, r2
 8010402:	4618      	mov	r0, r3
 8010404:	f7f7 fad7 	bl	80079b6 <HAL_PCD_SetAddress>
 8010408:	4603      	mov	r3, r0
 801040a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801040c:	7bfb      	ldrb	r3, [r7, #15]
 801040e:	4618      	mov	r0, r3
 8010410:	f000 f874 	bl	80104fc <USBD_Get_USB_Status>
 8010414:	4603      	mov	r3, r0
 8010416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010418:	7bbb      	ldrb	r3, [r7, #14]
}
 801041a:	4618      	mov	r0, r3
 801041c:	3710      	adds	r7, #16
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}

08010422 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010422:	b580      	push	{r7, lr}
 8010424:	b086      	sub	sp, #24
 8010426:	af00      	add	r7, sp, #0
 8010428:	60f8      	str	r0, [r7, #12]
 801042a:	607a      	str	r2, [r7, #4]
 801042c:	603b      	str	r3, [r7, #0]
 801042e:	460b      	mov	r3, r1
 8010430:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010432:	2300      	movs	r3, #0
 8010434:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010436:	2300      	movs	r3, #0
 8010438:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010440:	7af9      	ldrb	r1, [r7, #11]
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	687a      	ldr	r2, [r7, #4]
 8010446:	f7f7 fbf0 	bl	8007c2a <HAL_PCD_EP_Transmit>
 801044a:	4603      	mov	r3, r0
 801044c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801044e:	7dfb      	ldrb	r3, [r7, #23]
 8010450:	4618      	mov	r0, r3
 8010452:	f000 f853 	bl	80104fc <USBD_Get_USB_Status>
 8010456:	4603      	mov	r3, r0
 8010458:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801045a:	7dbb      	ldrb	r3, [r7, #22]
}
 801045c:	4618      	mov	r0, r3
 801045e:	3718      	adds	r7, #24
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b086      	sub	sp, #24
 8010468:	af00      	add	r7, sp, #0
 801046a:	60f8      	str	r0, [r7, #12]
 801046c:	607a      	str	r2, [r7, #4]
 801046e:	603b      	str	r3, [r7, #0]
 8010470:	460b      	mov	r3, r1
 8010472:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010474:	2300      	movs	r3, #0
 8010476:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010478:	2300      	movs	r3, #0
 801047a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010482:	7af9      	ldrb	r1, [r7, #11]
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	687a      	ldr	r2, [r7, #4]
 8010488:	f7f7 fb6c 	bl	8007b64 <HAL_PCD_EP_Receive>
 801048c:	4603      	mov	r3, r0
 801048e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010490:	7dfb      	ldrb	r3, [r7, #23]
 8010492:	4618      	mov	r0, r3
 8010494:	f000 f832 	bl	80104fc <USBD_Get_USB_Status>
 8010498:	4603      	mov	r3, r0
 801049a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801049c:	7dbb      	ldrb	r3, [r7, #22]
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3718      	adds	r7, #24
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}

080104a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104a6:	b580      	push	{r7, lr}
 80104a8:	b082      	sub	sp, #8
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	6078      	str	r0, [r7, #4]
 80104ae:	460b      	mov	r3, r1
 80104b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80104b8:	78fa      	ldrb	r2, [r7, #3]
 80104ba:	4611      	mov	r1, r2
 80104bc:	4618      	mov	r0, r3
 80104be:	f7f7 fb9c 	bl	8007bfa <HAL_PCD_EP_GetRxCount>
 80104c2:	4603      	mov	r3, r0
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3708      	adds	r7, #8
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}

080104cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80104cc:	b480      	push	{r7}
 80104ce:	b083      	sub	sp, #12
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80104d4:	4b03      	ldr	r3, [pc, #12]	; (80104e4 <USBD_static_malloc+0x18>)
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	370c      	adds	r7, #12
 80104da:	46bd      	mov	sp, r7
 80104dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e0:	4770      	bx	lr
 80104e2:	bf00      	nop
 80104e4:	20012fa0 	.word	0x20012fa0

080104e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80104e8:	b480      	push	{r7}
 80104ea:	b083      	sub	sp, #12
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]

}
 80104f0:	bf00      	nop
 80104f2:	370c      	adds	r7, #12
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr

080104fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80104fc:	b480      	push	{r7}
 80104fe:	b085      	sub	sp, #20
 8010500:	af00      	add	r7, sp, #0
 8010502:	4603      	mov	r3, r0
 8010504:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010506:	2300      	movs	r3, #0
 8010508:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801050a:	79fb      	ldrb	r3, [r7, #7]
 801050c:	2b03      	cmp	r3, #3
 801050e:	d817      	bhi.n	8010540 <USBD_Get_USB_Status+0x44>
 8010510:	a201      	add	r2, pc, #4	; (adr r2, 8010518 <USBD_Get_USB_Status+0x1c>)
 8010512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010516:	bf00      	nop
 8010518:	08010529 	.word	0x08010529
 801051c:	0801052f 	.word	0x0801052f
 8010520:	08010535 	.word	0x08010535
 8010524:	0801053b 	.word	0x0801053b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010528:	2300      	movs	r3, #0
 801052a:	73fb      	strb	r3, [r7, #15]
    break;
 801052c:	e00b      	b.n	8010546 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801052e:	2303      	movs	r3, #3
 8010530:	73fb      	strb	r3, [r7, #15]
    break;
 8010532:	e008      	b.n	8010546 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010534:	2301      	movs	r3, #1
 8010536:	73fb      	strb	r3, [r7, #15]
    break;
 8010538:	e005      	b.n	8010546 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801053a:	2303      	movs	r3, #3
 801053c:	73fb      	strb	r3, [r7, #15]
    break;
 801053e:	e002      	b.n	8010546 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010540:	2303      	movs	r3, #3
 8010542:	73fb      	strb	r3, [r7, #15]
    break;
 8010544:	bf00      	nop
  }
  return usb_status;
 8010546:	7bfb      	ldrb	r3, [r7, #15]
}
 8010548:	4618      	mov	r0, r3
 801054a:	3714      	adds	r7, #20
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr

08010554 <__errno>:
 8010554:	4b01      	ldr	r3, [pc, #4]	; (801055c <__errno+0x8>)
 8010556:	6818      	ldr	r0, [r3, #0]
 8010558:	4770      	bx	lr
 801055a:	bf00      	nop
 801055c:	20000194 	.word	0x20000194

08010560 <__libc_init_array>:
 8010560:	b570      	push	{r4, r5, r6, lr}
 8010562:	4d0d      	ldr	r5, [pc, #52]	; (8010598 <__libc_init_array+0x38>)
 8010564:	4c0d      	ldr	r4, [pc, #52]	; (801059c <__libc_init_array+0x3c>)
 8010566:	1b64      	subs	r4, r4, r5
 8010568:	10a4      	asrs	r4, r4, #2
 801056a:	2600      	movs	r6, #0
 801056c:	42a6      	cmp	r6, r4
 801056e:	d109      	bne.n	8010584 <__libc_init_array+0x24>
 8010570:	4d0b      	ldr	r5, [pc, #44]	; (80105a0 <__libc_init_array+0x40>)
 8010572:	4c0c      	ldr	r4, [pc, #48]	; (80105a4 <__libc_init_array+0x44>)
 8010574:	f001 fe66 	bl	8012244 <_init>
 8010578:	1b64      	subs	r4, r4, r5
 801057a:	10a4      	asrs	r4, r4, #2
 801057c:	2600      	movs	r6, #0
 801057e:	42a6      	cmp	r6, r4
 8010580:	d105      	bne.n	801058e <__libc_init_array+0x2e>
 8010582:	bd70      	pop	{r4, r5, r6, pc}
 8010584:	f855 3b04 	ldr.w	r3, [r5], #4
 8010588:	4798      	blx	r3
 801058a:	3601      	adds	r6, #1
 801058c:	e7ee      	b.n	801056c <__libc_init_array+0xc>
 801058e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010592:	4798      	blx	r3
 8010594:	3601      	adds	r6, #1
 8010596:	e7f2      	b.n	801057e <__libc_init_array+0x1e>
 8010598:	08012590 	.word	0x08012590
 801059c:	08012590 	.word	0x08012590
 80105a0:	08012590 	.word	0x08012590
 80105a4:	08012594 	.word	0x08012594

080105a8 <memcpy>:
 80105a8:	440a      	add	r2, r1
 80105aa:	4291      	cmp	r1, r2
 80105ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80105b0:	d100      	bne.n	80105b4 <memcpy+0xc>
 80105b2:	4770      	bx	lr
 80105b4:	b510      	push	{r4, lr}
 80105b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105be:	4291      	cmp	r1, r2
 80105c0:	d1f9      	bne.n	80105b6 <memcpy+0xe>
 80105c2:	bd10      	pop	{r4, pc}

080105c4 <memset>:
 80105c4:	4402      	add	r2, r0
 80105c6:	4603      	mov	r3, r0
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d100      	bne.n	80105ce <memset+0xa>
 80105cc:	4770      	bx	lr
 80105ce:	f803 1b01 	strb.w	r1, [r3], #1
 80105d2:	e7f9      	b.n	80105c8 <memset+0x4>
 80105d4:	0000      	movs	r0, r0
	...

080105d8 <cos>:
 80105d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105da:	ec53 2b10 	vmov	r2, r3, d0
 80105de:	4824      	ldr	r0, [pc, #144]	; (8010670 <cos+0x98>)
 80105e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80105e4:	4281      	cmp	r1, r0
 80105e6:	dc06      	bgt.n	80105f6 <cos+0x1e>
 80105e8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8010668 <cos+0x90>
 80105ec:	f000 fea8 	bl	8011340 <__kernel_cos>
 80105f0:	ec51 0b10 	vmov	r0, r1, d0
 80105f4:	e007      	b.n	8010606 <cos+0x2e>
 80105f6:	481f      	ldr	r0, [pc, #124]	; (8010674 <cos+0x9c>)
 80105f8:	4281      	cmp	r1, r0
 80105fa:	dd09      	ble.n	8010610 <cos+0x38>
 80105fc:	ee10 0a10 	vmov	r0, s0
 8010600:	4619      	mov	r1, r3
 8010602:	f7ef fdf1 	bl	80001e8 <__aeabi_dsub>
 8010606:	ec41 0b10 	vmov	d0, r0, r1
 801060a:	b005      	add	sp, #20
 801060c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010610:	4668      	mov	r0, sp
 8010612:	f000 fbd5 	bl	8010dc0 <__ieee754_rem_pio2>
 8010616:	f000 0003 	and.w	r0, r0, #3
 801061a:	2801      	cmp	r0, #1
 801061c:	d007      	beq.n	801062e <cos+0x56>
 801061e:	2802      	cmp	r0, #2
 8010620:	d012      	beq.n	8010648 <cos+0x70>
 8010622:	b9c0      	cbnz	r0, 8010656 <cos+0x7e>
 8010624:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010628:	ed9d 0b00 	vldr	d0, [sp]
 801062c:	e7de      	b.n	80105ec <cos+0x14>
 801062e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010632:	ed9d 0b00 	vldr	d0, [sp]
 8010636:	f001 fa8b 	bl	8011b50 <__kernel_sin>
 801063a:	ec53 2b10 	vmov	r2, r3, d0
 801063e:	ee10 0a10 	vmov	r0, s0
 8010642:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010646:	e7de      	b.n	8010606 <cos+0x2e>
 8010648:	ed9d 1b02 	vldr	d1, [sp, #8]
 801064c:	ed9d 0b00 	vldr	d0, [sp]
 8010650:	f000 fe76 	bl	8011340 <__kernel_cos>
 8010654:	e7f1      	b.n	801063a <cos+0x62>
 8010656:	ed9d 1b02 	vldr	d1, [sp, #8]
 801065a:	ed9d 0b00 	vldr	d0, [sp]
 801065e:	2001      	movs	r0, #1
 8010660:	f001 fa76 	bl	8011b50 <__kernel_sin>
 8010664:	e7c4      	b.n	80105f0 <cos+0x18>
 8010666:	bf00      	nop
	...
 8010670:	3fe921fb 	.word	0x3fe921fb
 8010674:	7fefffff 	.word	0x7fefffff

08010678 <sin>:
 8010678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801067a:	ec53 2b10 	vmov	r2, r3, d0
 801067e:	4826      	ldr	r0, [pc, #152]	; (8010718 <sin+0xa0>)
 8010680:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010684:	4281      	cmp	r1, r0
 8010686:	dc07      	bgt.n	8010698 <sin+0x20>
 8010688:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010710 <sin+0x98>
 801068c:	2000      	movs	r0, #0
 801068e:	f001 fa5f 	bl	8011b50 <__kernel_sin>
 8010692:	ec51 0b10 	vmov	r0, r1, d0
 8010696:	e007      	b.n	80106a8 <sin+0x30>
 8010698:	4820      	ldr	r0, [pc, #128]	; (801071c <sin+0xa4>)
 801069a:	4281      	cmp	r1, r0
 801069c:	dd09      	ble.n	80106b2 <sin+0x3a>
 801069e:	ee10 0a10 	vmov	r0, s0
 80106a2:	4619      	mov	r1, r3
 80106a4:	f7ef fda0 	bl	80001e8 <__aeabi_dsub>
 80106a8:	ec41 0b10 	vmov	d0, r0, r1
 80106ac:	b005      	add	sp, #20
 80106ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80106b2:	4668      	mov	r0, sp
 80106b4:	f000 fb84 	bl	8010dc0 <__ieee754_rem_pio2>
 80106b8:	f000 0003 	and.w	r0, r0, #3
 80106bc:	2801      	cmp	r0, #1
 80106be:	d008      	beq.n	80106d2 <sin+0x5a>
 80106c0:	2802      	cmp	r0, #2
 80106c2:	d00d      	beq.n	80106e0 <sin+0x68>
 80106c4:	b9d0      	cbnz	r0, 80106fc <sin+0x84>
 80106c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106ca:	ed9d 0b00 	vldr	d0, [sp]
 80106ce:	2001      	movs	r0, #1
 80106d0:	e7dd      	b.n	801068e <sin+0x16>
 80106d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106d6:	ed9d 0b00 	vldr	d0, [sp]
 80106da:	f000 fe31 	bl	8011340 <__kernel_cos>
 80106de:	e7d8      	b.n	8010692 <sin+0x1a>
 80106e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106e4:	ed9d 0b00 	vldr	d0, [sp]
 80106e8:	2001      	movs	r0, #1
 80106ea:	f001 fa31 	bl	8011b50 <__kernel_sin>
 80106ee:	ec53 2b10 	vmov	r2, r3, d0
 80106f2:	ee10 0a10 	vmov	r0, s0
 80106f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80106fa:	e7d5      	b.n	80106a8 <sin+0x30>
 80106fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010700:	ed9d 0b00 	vldr	d0, [sp]
 8010704:	f000 fe1c 	bl	8011340 <__kernel_cos>
 8010708:	e7f1      	b.n	80106ee <sin+0x76>
 801070a:	bf00      	nop
 801070c:	f3af 8000 	nop.w
	...
 8010718:	3fe921fb 	.word	0x3fe921fb
 801071c:	7fefffff 	.word	0x7fefffff

08010720 <asin>:
 8010720:	b538      	push	{r3, r4, r5, lr}
 8010722:	ed2d 8b02 	vpush	{d8}
 8010726:	ec55 4b10 	vmov	r4, r5, d0
 801072a:	f000 f869 	bl	8010800 <__ieee754_asin>
 801072e:	4b16      	ldr	r3, [pc, #88]	; (8010788 <asin+0x68>)
 8010730:	eeb0 8a40 	vmov.f32	s16, s0
 8010734:	eef0 8a60 	vmov.f32	s17, s1
 8010738:	f993 3000 	ldrsb.w	r3, [r3]
 801073c:	3301      	adds	r3, #1
 801073e:	d01c      	beq.n	801077a <asin+0x5a>
 8010740:	4622      	mov	r2, r4
 8010742:	462b      	mov	r3, r5
 8010744:	4620      	mov	r0, r4
 8010746:	4629      	mov	r1, r5
 8010748:	f7f0 f9a0 	bl	8000a8c <__aeabi_dcmpun>
 801074c:	b9a8      	cbnz	r0, 801077a <asin+0x5a>
 801074e:	ec45 4b10 	vmov	d0, r4, r5
 8010752:	f001 fc5d 	bl	8012010 <fabs>
 8010756:	4b0d      	ldr	r3, [pc, #52]	; (801078c <asin+0x6c>)
 8010758:	ec51 0b10 	vmov	r0, r1, d0
 801075c:	2200      	movs	r2, #0
 801075e:	f7f0 f98b 	bl	8000a78 <__aeabi_dcmpgt>
 8010762:	b150      	cbz	r0, 801077a <asin+0x5a>
 8010764:	f7ff fef6 	bl	8010554 <__errno>
 8010768:	ecbd 8b02 	vpop	{d8}
 801076c:	2321      	movs	r3, #33	; 0x21
 801076e:	6003      	str	r3, [r0, #0]
 8010770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010774:	4806      	ldr	r0, [pc, #24]	; (8010790 <asin+0x70>)
 8010776:	f001 bcd7 	b.w	8012128 <nan>
 801077a:	eeb0 0a48 	vmov.f32	s0, s16
 801077e:	eef0 0a68 	vmov.f32	s1, s17
 8010782:	ecbd 8b02 	vpop	{d8}
 8010786:	bd38      	pop	{r3, r4, r5, pc}
 8010788:	200001f8 	.word	0x200001f8
 801078c:	3ff00000 	.word	0x3ff00000
 8010790:	08012338 	.word	0x08012338

08010794 <atan2>:
 8010794:	f000 ba48 	b.w	8010c28 <__ieee754_atan2>

08010798 <sqrt>:
 8010798:	b538      	push	{r3, r4, r5, lr}
 801079a:	ed2d 8b02 	vpush	{d8}
 801079e:	ec55 4b10 	vmov	r4, r5, d0
 80107a2:	f000 fd17 	bl	80111d4 <__ieee754_sqrt>
 80107a6:	4b15      	ldr	r3, [pc, #84]	; (80107fc <sqrt+0x64>)
 80107a8:	eeb0 8a40 	vmov.f32	s16, s0
 80107ac:	eef0 8a60 	vmov.f32	s17, s1
 80107b0:	f993 3000 	ldrsb.w	r3, [r3]
 80107b4:	3301      	adds	r3, #1
 80107b6:	d019      	beq.n	80107ec <sqrt+0x54>
 80107b8:	4622      	mov	r2, r4
 80107ba:	462b      	mov	r3, r5
 80107bc:	4620      	mov	r0, r4
 80107be:	4629      	mov	r1, r5
 80107c0:	f7f0 f964 	bl	8000a8c <__aeabi_dcmpun>
 80107c4:	b990      	cbnz	r0, 80107ec <sqrt+0x54>
 80107c6:	2200      	movs	r2, #0
 80107c8:	2300      	movs	r3, #0
 80107ca:	4620      	mov	r0, r4
 80107cc:	4629      	mov	r1, r5
 80107ce:	f7f0 f935 	bl	8000a3c <__aeabi_dcmplt>
 80107d2:	b158      	cbz	r0, 80107ec <sqrt+0x54>
 80107d4:	f7ff febe 	bl	8010554 <__errno>
 80107d8:	2321      	movs	r3, #33	; 0x21
 80107da:	6003      	str	r3, [r0, #0]
 80107dc:	2200      	movs	r2, #0
 80107de:	2300      	movs	r3, #0
 80107e0:	4610      	mov	r0, r2
 80107e2:	4619      	mov	r1, r3
 80107e4:	f7ef ffe2 	bl	80007ac <__aeabi_ddiv>
 80107e8:	ec41 0b18 	vmov	d8, r0, r1
 80107ec:	eeb0 0a48 	vmov.f32	s0, s16
 80107f0:	eef0 0a68 	vmov.f32	s1, s17
 80107f4:	ecbd 8b02 	vpop	{d8}
 80107f8:	bd38      	pop	{r3, r4, r5, pc}
 80107fa:	bf00      	nop
 80107fc:	200001f8 	.word	0x200001f8

08010800 <__ieee754_asin>:
 8010800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010804:	ed2d 8b04 	vpush	{d8-d9}
 8010808:	ec55 4b10 	vmov	r4, r5, d0
 801080c:	4bcc      	ldr	r3, [pc, #816]	; (8010b40 <__ieee754_asin+0x340>)
 801080e:	b083      	sub	sp, #12
 8010810:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010814:	4598      	cmp	r8, r3
 8010816:	9501      	str	r5, [sp, #4]
 8010818:	dd35      	ble.n	8010886 <__ieee754_asin+0x86>
 801081a:	ee10 3a10 	vmov	r3, s0
 801081e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8010822:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8010826:	ea58 0303 	orrs.w	r3, r8, r3
 801082a:	d117      	bne.n	801085c <__ieee754_asin+0x5c>
 801082c:	a3aa      	add	r3, pc, #680	; (adr r3, 8010ad8 <__ieee754_asin+0x2d8>)
 801082e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010832:	ee10 0a10 	vmov	r0, s0
 8010836:	4629      	mov	r1, r5
 8010838:	f7ef fe8e 	bl	8000558 <__aeabi_dmul>
 801083c:	a3a8      	add	r3, pc, #672	; (adr r3, 8010ae0 <__ieee754_asin+0x2e0>)
 801083e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010842:	4606      	mov	r6, r0
 8010844:	460f      	mov	r7, r1
 8010846:	4620      	mov	r0, r4
 8010848:	4629      	mov	r1, r5
 801084a:	f7ef fe85 	bl	8000558 <__aeabi_dmul>
 801084e:	4602      	mov	r2, r0
 8010850:	460b      	mov	r3, r1
 8010852:	4630      	mov	r0, r6
 8010854:	4639      	mov	r1, r7
 8010856:	f7ef fcc9 	bl	80001ec <__adddf3>
 801085a:	e00b      	b.n	8010874 <__ieee754_asin+0x74>
 801085c:	ee10 2a10 	vmov	r2, s0
 8010860:	462b      	mov	r3, r5
 8010862:	ee10 0a10 	vmov	r0, s0
 8010866:	4629      	mov	r1, r5
 8010868:	f7ef fcbe 	bl	80001e8 <__aeabi_dsub>
 801086c:	4602      	mov	r2, r0
 801086e:	460b      	mov	r3, r1
 8010870:	f7ef ff9c 	bl	80007ac <__aeabi_ddiv>
 8010874:	4604      	mov	r4, r0
 8010876:	460d      	mov	r5, r1
 8010878:	ec45 4b10 	vmov	d0, r4, r5
 801087c:	b003      	add	sp, #12
 801087e:	ecbd 8b04 	vpop	{d8-d9}
 8010882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010886:	4baf      	ldr	r3, [pc, #700]	; (8010b44 <__ieee754_asin+0x344>)
 8010888:	4598      	cmp	r8, r3
 801088a:	dc11      	bgt.n	80108b0 <__ieee754_asin+0xb0>
 801088c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010890:	f280 80ae 	bge.w	80109f0 <__ieee754_asin+0x1f0>
 8010894:	a394      	add	r3, pc, #592	; (adr r3, 8010ae8 <__ieee754_asin+0x2e8>)
 8010896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089a:	ee10 0a10 	vmov	r0, s0
 801089e:	4629      	mov	r1, r5
 80108a0:	f7ef fca4 	bl	80001ec <__adddf3>
 80108a4:	4ba8      	ldr	r3, [pc, #672]	; (8010b48 <__ieee754_asin+0x348>)
 80108a6:	2200      	movs	r2, #0
 80108a8:	f7f0 f8e6 	bl	8000a78 <__aeabi_dcmpgt>
 80108ac:	2800      	cmp	r0, #0
 80108ae:	d1e3      	bne.n	8010878 <__ieee754_asin+0x78>
 80108b0:	ec45 4b10 	vmov	d0, r4, r5
 80108b4:	f001 fbac 	bl	8012010 <fabs>
 80108b8:	49a3      	ldr	r1, [pc, #652]	; (8010b48 <__ieee754_asin+0x348>)
 80108ba:	ec53 2b10 	vmov	r2, r3, d0
 80108be:	2000      	movs	r0, #0
 80108c0:	f7ef fc92 	bl	80001e8 <__aeabi_dsub>
 80108c4:	4ba1      	ldr	r3, [pc, #644]	; (8010b4c <__ieee754_asin+0x34c>)
 80108c6:	2200      	movs	r2, #0
 80108c8:	f7ef fe46 	bl	8000558 <__aeabi_dmul>
 80108cc:	a388      	add	r3, pc, #544	; (adr r3, 8010af0 <__ieee754_asin+0x2f0>)
 80108ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d2:	4604      	mov	r4, r0
 80108d4:	460d      	mov	r5, r1
 80108d6:	f7ef fe3f 	bl	8000558 <__aeabi_dmul>
 80108da:	a387      	add	r3, pc, #540	; (adr r3, 8010af8 <__ieee754_asin+0x2f8>)
 80108dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e0:	f7ef fc84 	bl	80001ec <__adddf3>
 80108e4:	4622      	mov	r2, r4
 80108e6:	462b      	mov	r3, r5
 80108e8:	f7ef fe36 	bl	8000558 <__aeabi_dmul>
 80108ec:	a384      	add	r3, pc, #528	; (adr r3, 8010b00 <__ieee754_asin+0x300>)
 80108ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f2:	f7ef fc79 	bl	80001e8 <__aeabi_dsub>
 80108f6:	4622      	mov	r2, r4
 80108f8:	462b      	mov	r3, r5
 80108fa:	f7ef fe2d 	bl	8000558 <__aeabi_dmul>
 80108fe:	a382      	add	r3, pc, #520	; (adr r3, 8010b08 <__ieee754_asin+0x308>)
 8010900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010904:	f7ef fc72 	bl	80001ec <__adddf3>
 8010908:	4622      	mov	r2, r4
 801090a:	462b      	mov	r3, r5
 801090c:	f7ef fe24 	bl	8000558 <__aeabi_dmul>
 8010910:	a37f      	add	r3, pc, #508	; (adr r3, 8010b10 <__ieee754_asin+0x310>)
 8010912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010916:	f7ef fc67 	bl	80001e8 <__aeabi_dsub>
 801091a:	4622      	mov	r2, r4
 801091c:	462b      	mov	r3, r5
 801091e:	f7ef fe1b 	bl	8000558 <__aeabi_dmul>
 8010922:	a37d      	add	r3, pc, #500	; (adr r3, 8010b18 <__ieee754_asin+0x318>)
 8010924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010928:	f7ef fc60 	bl	80001ec <__adddf3>
 801092c:	4622      	mov	r2, r4
 801092e:	462b      	mov	r3, r5
 8010930:	f7ef fe12 	bl	8000558 <__aeabi_dmul>
 8010934:	a37a      	add	r3, pc, #488	; (adr r3, 8010b20 <__ieee754_asin+0x320>)
 8010936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093a:	ec41 0b18 	vmov	d8, r0, r1
 801093e:	4620      	mov	r0, r4
 8010940:	4629      	mov	r1, r5
 8010942:	f7ef fe09 	bl	8000558 <__aeabi_dmul>
 8010946:	a378      	add	r3, pc, #480	; (adr r3, 8010b28 <__ieee754_asin+0x328>)
 8010948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094c:	f7ef fc4c 	bl	80001e8 <__aeabi_dsub>
 8010950:	4622      	mov	r2, r4
 8010952:	462b      	mov	r3, r5
 8010954:	f7ef fe00 	bl	8000558 <__aeabi_dmul>
 8010958:	a375      	add	r3, pc, #468	; (adr r3, 8010b30 <__ieee754_asin+0x330>)
 801095a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801095e:	f7ef fc45 	bl	80001ec <__adddf3>
 8010962:	4622      	mov	r2, r4
 8010964:	462b      	mov	r3, r5
 8010966:	f7ef fdf7 	bl	8000558 <__aeabi_dmul>
 801096a:	a373      	add	r3, pc, #460	; (adr r3, 8010b38 <__ieee754_asin+0x338>)
 801096c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010970:	f7ef fc3a 	bl	80001e8 <__aeabi_dsub>
 8010974:	4622      	mov	r2, r4
 8010976:	462b      	mov	r3, r5
 8010978:	f7ef fdee 	bl	8000558 <__aeabi_dmul>
 801097c:	4b72      	ldr	r3, [pc, #456]	; (8010b48 <__ieee754_asin+0x348>)
 801097e:	2200      	movs	r2, #0
 8010980:	f7ef fc34 	bl	80001ec <__adddf3>
 8010984:	ec45 4b10 	vmov	d0, r4, r5
 8010988:	4606      	mov	r6, r0
 801098a:	460f      	mov	r7, r1
 801098c:	f000 fc22 	bl	80111d4 <__ieee754_sqrt>
 8010990:	4b6f      	ldr	r3, [pc, #444]	; (8010b50 <__ieee754_asin+0x350>)
 8010992:	4598      	cmp	r8, r3
 8010994:	ec5b ab10 	vmov	sl, fp, d0
 8010998:	f340 80dc 	ble.w	8010b54 <__ieee754_asin+0x354>
 801099c:	4632      	mov	r2, r6
 801099e:	463b      	mov	r3, r7
 80109a0:	ec51 0b18 	vmov	r0, r1, d8
 80109a4:	f7ef ff02 	bl	80007ac <__aeabi_ddiv>
 80109a8:	4652      	mov	r2, sl
 80109aa:	465b      	mov	r3, fp
 80109ac:	f7ef fdd4 	bl	8000558 <__aeabi_dmul>
 80109b0:	4652      	mov	r2, sl
 80109b2:	465b      	mov	r3, fp
 80109b4:	f7ef fc1a 	bl	80001ec <__adddf3>
 80109b8:	4602      	mov	r2, r0
 80109ba:	460b      	mov	r3, r1
 80109bc:	f7ef fc16 	bl	80001ec <__adddf3>
 80109c0:	a347      	add	r3, pc, #284	; (adr r3, 8010ae0 <__ieee754_asin+0x2e0>)
 80109c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c6:	f7ef fc0f 	bl	80001e8 <__aeabi_dsub>
 80109ca:	4602      	mov	r2, r0
 80109cc:	460b      	mov	r3, r1
 80109ce:	a142      	add	r1, pc, #264	; (adr r1, 8010ad8 <__ieee754_asin+0x2d8>)
 80109d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109d4:	f7ef fc08 	bl	80001e8 <__aeabi_dsub>
 80109d8:	9b01      	ldr	r3, [sp, #4]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	bfdc      	itt	le
 80109de:	4602      	movle	r2, r0
 80109e0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80109e4:	4604      	mov	r4, r0
 80109e6:	460d      	mov	r5, r1
 80109e8:	bfdc      	itt	le
 80109ea:	4614      	movle	r4, r2
 80109ec:	461d      	movle	r5, r3
 80109ee:	e743      	b.n	8010878 <__ieee754_asin+0x78>
 80109f0:	ee10 2a10 	vmov	r2, s0
 80109f4:	ee10 0a10 	vmov	r0, s0
 80109f8:	462b      	mov	r3, r5
 80109fa:	4629      	mov	r1, r5
 80109fc:	f7ef fdac 	bl	8000558 <__aeabi_dmul>
 8010a00:	a33b      	add	r3, pc, #236	; (adr r3, 8010af0 <__ieee754_asin+0x2f0>)
 8010a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a06:	4606      	mov	r6, r0
 8010a08:	460f      	mov	r7, r1
 8010a0a:	f7ef fda5 	bl	8000558 <__aeabi_dmul>
 8010a0e:	a33a      	add	r3, pc, #232	; (adr r3, 8010af8 <__ieee754_asin+0x2f8>)
 8010a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a14:	f7ef fbea 	bl	80001ec <__adddf3>
 8010a18:	4632      	mov	r2, r6
 8010a1a:	463b      	mov	r3, r7
 8010a1c:	f7ef fd9c 	bl	8000558 <__aeabi_dmul>
 8010a20:	a337      	add	r3, pc, #220	; (adr r3, 8010b00 <__ieee754_asin+0x300>)
 8010a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a26:	f7ef fbdf 	bl	80001e8 <__aeabi_dsub>
 8010a2a:	4632      	mov	r2, r6
 8010a2c:	463b      	mov	r3, r7
 8010a2e:	f7ef fd93 	bl	8000558 <__aeabi_dmul>
 8010a32:	a335      	add	r3, pc, #212	; (adr r3, 8010b08 <__ieee754_asin+0x308>)
 8010a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a38:	f7ef fbd8 	bl	80001ec <__adddf3>
 8010a3c:	4632      	mov	r2, r6
 8010a3e:	463b      	mov	r3, r7
 8010a40:	f7ef fd8a 	bl	8000558 <__aeabi_dmul>
 8010a44:	a332      	add	r3, pc, #200	; (adr r3, 8010b10 <__ieee754_asin+0x310>)
 8010a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4a:	f7ef fbcd 	bl	80001e8 <__aeabi_dsub>
 8010a4e:	4632      	mov	r2, r6
 8010a50:	463b      	mov	r3, r7
 8010a52:	f7ef fd81 	bl	8000558 <__aeabi_dmul>
 8010a56:	a330      	add	r3, pc, #192	; (adr r3, 8010b18 <__ieee754_asin+0x318>)
 8010a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a5c:	f7ef fbc6 	bl	80001ec <__adddf3>
 8010a60:	4632      	mov	r2, r6
 8010a62:	463b      	mov	r3, r7
 8010a64:	f7ef fd78 	bl	8000558 <__aeabi_dmul>
 8010a68:	a32d      	add	r3, pc, #180	; (adr r3, 8010b20 <__ieee754_asin+0x320>)
 8010a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a6e:	4680      	mov	r8, r0
 8010a70:	4689      	mov	r9, r1
 8010a72:	4630      	mov	r0, r6
 8010a74:	4639      	mov	r1, r7
 8010a76:	f7ef fd6f 	bl	8000558 <__aeabi_dmul>
 8010a7a:	a32b      	add	r3, pc, #172	; (adr r3, 8010b28 <__ieee754_asin+0x328>)
 8010a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a80:	f7ef fbb2 	bl	80001e8 <__aeabi_dsub>
 8010a84:	4632      	mov	r2, r6
 8010a86:	463b      	mov	r3, r7
 8010a88:	f7ef fd66 	bl	8000558 <__aeabi_dmul>
 8010a8c:	a328      	add	r3, pc, #160	; (adr r3, 8010b30 <__ieee754_asin+0x330>)
 8010a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a92:	f7ef fbab 	bl	80001ec <__adddf3>
 8010a96:	4632      	mov	r2, r6
 8010a98:	463b      	mov	r3, r7
 8010a9a:	f7ef fd5d 	bl	8000558 <__aeabi_dmul>
 8010a9e:	a326      	add	r3, pc, #152	; (adr r3, 8010b38 <__ieee754_asin+0x338>)
 8010aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa4:	f7ef fba0 	bl	80001e8 <__aeabi_dsub>
 8010aa8:	4632      	mov	r2, r6
 8010aaa:	463b      	mov	r3, r7
 8010aac:	f7ef fd54 	bl	8000558 <__aeabi_dmul>
 8010ab0:	4b25      	ldr	r3, [pc, #148]	; (8010b48 <__ieee754_asin+0x348>)
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	f7ef fb9a 	bl	80001ec <__adddf3>
 8010ab8:	4602      	mov	r2, r0
 8010aba:	460b      	mov	r3, r1
 8010abc:	4640      	mov	r0, r8
 8010abe:	4649      	mov	r1, r9
 8010ac0:	f7ef fe74 	bl	80007ac <__aeabi_ddiv>
 8010ac4:	4622      	mov	r2, r4
 8010ac6:	462b      	mov	r3, r5
 8010ac8:	f7ef fd46 	bl	8000558 <__aeabi_dmul>
 8010acc:	4602      	mov	r2, r0
 8010ace:	460b      	mov	r3, r1
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	4629      	mov	r1, r5
 8010ad4:	e6bf      	b.n	8010856 <__ieee754_asin+0x56>
 8010ad6:	bf00      	nop
 8010ad8:	54442d18 	.word	0x54442d18
 8010adc:	3ff921fb 	.word	0x3ff921fb
 8010ae0:	33145c07 	.word	0x33145c07
 8010ae4:	3c91a626 	.word	0x3c91a626
 8010ae8:	8800759c 	.word	0x8800759c
 8010aec:	7e37e43c 	.word	0x7e37e43c
 8010af0:	0dfdf709 	.word	0x0dfdf709
 8010af4:	3f023de1 	.word	0x3f023de1
 8010af8:	7501b288 	.word	0x7501b288
 8010afc:	3f49efe0 	.word	0x3f49efe0
 8010b00:	b5688f3b 	.word	0xb5688f3b
 8010b04:	3fa48228 	.word	0x3fa48228
 8010b08:	0e884455 	.word	0x0e884455
 8010b0c:	3fc9c155 	.word	0x3fc9c155
 8010b10:	03eb6f7d 	.word	0x03eb6f7d
 8010b14:	3fd4d612 	.word	0x3fd4d612
 8010b18:	55555555 	.word	0x55555555
 8010b1c:	3fc55555 	.word	0x3fc55555
 8010b20:	b12e9282 	.word	0xb12e9282
 8010b24:	3fb3b8c5 	.word	0x3fb3b8c5
 8010b28:	1b8d0159 	.word	0x1b8d0159
 8010b2c:	3fe6066c 	.word	0x3fe6066c
 8010b30:	9c598ac8 	.word	0x9c598ac8
 8010b34:	40002ae5 	.word	0x40002ae5
 8010b38:	1c8a2d4b 	.word	0x1c8a2d4b
 8010b3c:	40033a27 	.word	0x40033a27
 8010b40:	3fefffff 	.word	0x3fefffff
 8010b44:	3fdfffff 	.word	0x3fdfffff
 8010b48:	3ff00000 	.word	0x3ff00000
 8010b4c:	3fe00000 	.word	0x3fe00000
 8010b50:	3fef3332 	.word	0x3fef3332
 8010b54:	ee10 2a10 	vmov	r2, s0
 8010b58:	ee10 0a10 	vmov	r0, s0
 8010b5c:	465b      	mov	r3, fp
 8010b5e:	4659      	mov	r1, fp
 8010b60:	f7ef fb44 	bl	80001ec <__adddf3>
 8010b64:	4632      	mov	r2, r6
 8010b66:	463b      	mov	r3, r7
 8010b68:	ec41 0b19 	vmov	d9, r0, r1
 8010b6c:	ec51 0b18 	vmov	r0, r1, d8
 8010b70:	f7ef fe1c 	bl	80007ac <__aeabi_ddiv>
 8010b74:	4602      	mov	r2, r0
 8010b76:	460b      	mov	r3, r1
 8010b78:	ec51 0b19 	vmov	r0, r1, d9
 8010b7c:	f7ef fcec 	bl	8000558 <__aeabi_dmul>
 8010b80:	f04f 0800 	mov.w	r8, #0
 8010b84:	4606      	mov	r6, r0
 8010b86:	460f      	mov	r7, r1
 8010b88:	4642      	mov	r2, r8
 8010b8a:	465b      	mov	r3, fp
 8010b8c:	4640      	mov	r0, r8
 8010b8e:	4659      	mov	r1, fp
 8010b90:	f7ef fce2 	bl	8000558 <__aeabi_dmul>
 8010b94:	4602      	mov	r2, r0
 8010b96:	460b      	mov	r3, r1
 8010b98:	4620      	mov	r0, r4
 8010b9a:	4629      	mov	r1, r5
 8010b9c:	f7ef fb24 	bl	80001e8 <__aeabi_dsub>
 8010ba0:	4642      	mov	r2, r8
 8010ba2:	4604      	mov	r4, r0
 8010ba4:	460d      	mov	r5, r1
 8010ba6:	465b      	mov	r3, fp
 8010ba8:	4650      	mov	r0, sl
 8010baa:	4659      	mov	r1, fp
 8010bac:	f7ef fb1e 	bl	80001ec <__adddf3>
 8010bb0:	4602      	mov	r2, r0
 8010bb2:	460b      	mov	r3, r1
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	4629      	mov	r1, r5
 8010bb8:	f7ef fdf8 	bl	80007ac <__aeabi_ddiv>
 8010bbc:	4602      	mov	r2, r0
 8010bbe:	460b      	mov	r3, r1
 8010bc0:	f7ef fb14 	bl	80001ec <__adddf3>
 8010bc4:	4602      	mov	r2, r0
 8010bc6:	460b      	mov	r3, r1
 8010bc8:	a113      	add	r1, pc, #76	; (adr r1, 8010c18 <__ieee754_asin+0x418>)
 8010bca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bce:	f7ef fb0b 	bl	80001e8 <__aeabi_dsub>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	4630      	mov	r0, r6
 8010bd8:	4639      	mov	r1, r7
 8010bda:	f7ef fb05 	bl	80001e8 <__aeabi_dsub>
 8010bde:	4642      	mov	r2, r8
 8010be0:	4604      	mov	r4, r0
 8010be2:	460d      	mov	r5, r1
 8010be4:	465b      	mov	r3, fp
 8010be6:	4640      	mov	r0, r8
 8010be8:	4659      	mov	r1, fp
 8010bea:	f7ef faff 	bl	80001ec <__adddf3>
 8010bee:	4602      	mov	r2, r0
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	a10b      	add	r1, pc, #44	; (adr r1, 8010c20 <__ieee754_asin+0x420>)
 8010bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bf8:	f7ef faf6 	bl	80001e8 <__aeabi_dsub>
 8010bfc:	4602      	mov	r2, r0
 8010bfe:	460b      	mov	r3, r1
 8010c00:	4620      	mov	r0, r4
 8010c02:	4629      	mov	r1, r5
 8010c04:	f7ef faf0 	bl	80001e8 <__aeabi_dsub>
 8010c08:	4602      	mov	r2, r0
 8010c0a:	460b      	mov	r3, r1
 8010c0c:	a104      	add	r1, pc, #16	; (adr r1, 8010c20 <__ieee754_asin+0x420>)
 8010c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c12:	e6df      	b.n	80109d4 <__ieee754_asin+0x1d4>
 8010c14:	f3af 8000 	nop.w
 8010c18:	33145c07 	.word	0x33145c07
 8010c1c:	3c91a626 	.word	0x3c91a626
 8010c20:	54442d18 	.word	0x54442d18
 8010c24:	3fe921fb 	.word	0x3fe921fb

08010c28 <__ieee754_atan2>:
 8010c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c2c:	ec57 6b11 	vmov	r6, r7, d1
 8010c30:	4273      	negs	r3, r6
 8010c32:	f8df e184 	ldr.w	lr, [pc, #388]	; 8010db8 <__ieee754_atan2+0x190>
 8010c36:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010c3a:	4333      	orrs	r3, r6
 8010c3c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010c40:	4573      	cmp	r3, lr
 8010c42:	ec51 0b10 	vmov	r0, r1, d0
 8010c46:	ee11 8a10 	vmov	r8, s2
 8010c4a:	d80a      	bhi.n	8010c62 <__ieee754_atan2+0x3a>
 8010c4c:	4244      	negs	r4, r0
 8010c4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010c52:	4304      	orrs	r4, r0
 8010c54:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010c58:	4574      	cmp	r4, lr
 8010c5a:	ee10 9a10 	vmov	r9, s0
 8010c5e:	468c      	mov	ip, r1
 8010c60:	d907      	bls.n	8010c72 <__ieee754_atan2+0x4a>
 8010c62:	4632      	mov	r2, r6
 8010c64:	463b      	mov	r3, r7
 8010c66:	f7ef fac1 	bl	80001ec <__adddf3>
 8010c6a:	ec41 0b10 	vmov	d0, r0, r1
 8010c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c72:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010c76:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010c7a:	4334      	orrs	r4, r6
 8010c7c:	d103      	bne.n	8010c86 <__ieee754_atan2+0x5e>
 8010c7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c82:	f001 b825 	b.w	8011cd0 <atan>
 8010c86:	17bc      	asrs	r4, r7, #30
 8010c88:	f004 0402 	and.w	r4, r4, #2
 8010c8c:	ea53 0909 	orrs.w	r9, r3, r9
 8010c90:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010c94:	d107      	bne.n	8010ca6 <__ieee754_atan2+0x7e>
 8010c96:	2c02      	cmp	r4, #2
 8010c98:	d060      	beq.n	8010d5c <__ieee754_atan2+0x134>
 8010c9a:	2c03      	cmp	r4, #3
 8010c9c:	d1e5      	bne.n	8010c6a <__ieee754_atan2+0x42>
 8010c9e:	a142      	add	r1, pc, #264	; (adr r1, 8010da8 <__ieee754_atan2+0x180>)
 8010ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ca4:	e7e1      	b.n	8010c6a <__ieee754_atan2+0x42>
 8010ca6:	ea52 0808 	orrs.w	r8, r2, r8
 8010caa:	d106      	bne.n	8010cba <__ieee754_atan2+0x92>
 8010cac:	f1bc 0f00 	cmp.w	ip, #0
 8010cb0:	da5f      	bge.n	8010d72 <__ieee754_atan2+0x14a>
 8010cb2:	a13f      	add	r1, pc, #252	; (adr r1, 8010db0 <__ieee754_atan2+0x188>)
 8010cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cb8:	e7d7      	b.n	8010c6a <__ieee754_atan2+0x42>
 8010cba:	4572      	cmp	r2, lr
 8010cbc:	d10f      	bne.n	8010cde <__ieee754_atan2+0xb6>
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	f104 34ff 	add.w	r4, r4, #4294967295
 8010cc4:	d107      	bne.n	8010cd6 <__ieee754_atan2+0xae>
 8010cc6:	2c02      	cmp	r4, #2
 8010cc8:	d84c      	bhi.n	8010d64 <__ieee754_atan2+0x13c>
 8010cca:	4b35      	ldr	r3, [pc, #212]	; (8010da0 <__ieee754_atan2+0x178>)
 8010ccc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010cd0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8010cd4:	e7c9      	b.n	8010c6a <__ieee754_atan2+0x42>
 8010cd6:	2c02      	cmp	r4, #2
 8010cd8:	d848      	bhi.n	8010d6c <__ieee754_atan2+0x144>
 8010cda:	4b32      	ldr	r3, [pc, #200]	; (8010da4 <__ieee754_atan2+0x17c>)
 8010cdc:	e7f6      	b.n	8010ccc <__ieee754_atan2+0xa4>
 8010cde:	4573      	cmp	r3, lr
 8010ce0:	d0e4      	beq.n	8010cac <__ieee754_atan2+0x84>
 8010ce2:	1a9b      	subs	r3, r3, r2
 8010ce4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010ce8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010cec:	da1e      	bge.n	8010d2c <__ieee754_atan2+0x104>
 8010cee:	2f00      	cmp	r7, #0
 8010cf0:	da01      	bge.n	8010cf6 <__ieee754_atan2+0xce>
 8010cf2:	323c      	adds	r2, #60	; 0x3c
 8010cf4:	db1e      	blt.n	8010d34 <__ieee754_atan2+0x10c>
 8010cf6:	4632      	mov	r2, r6
 8010cf8:	463b      	mov	r3, r7
 8010cfa:	f7ef fd57 	bl	80007ac <__aeabi_ddiv>
 8010cfe:	ec41 0b10 	vmov	d0, r0, r1
 8010d02:	f001 f985 	bl	8012010 <fabs>
 8010d06:	f000 ffe3 	bl	8011cd0 <atan>
 8010d0a:	ec51 0b10 	vmov	r0, r1, d0
 8010d0e:	2c01      	cmp	r4, #1
 8010d10:	d013      	beq.n	8010d3a <__ieee754_atan2+0x112>
 8010d12:	2c02      	cmp	r4, #2
 8010d14:	d015      	beq.n	8010d42 <__ieee754_atan2+0x11a>
 8010d16:	2c00      	cmp	r4, #0
 8010d18:	d0a7      	beq.n	8010c6a <__ieee754_atan2+0x42>
 8010d1a:	a319      	add	r3, pc, #100	; (adr r3, 8010d80 <__ieee754_atan2+0x158>)
 8010d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d20:	f7ef fa62 	bl	80001e8 <__aeabi_dsub>
 8010d24:	a318      	add	r3, pc, #96	; (adr r3, 8010d88 <__ieee754_atan2+0x160>)
 8010d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d2a:	e014      	b.n	8010d56 <__ieee754_atan2+0x12e>
 8010d2c:	a118      	add	r1, pc, #96	; (adr r1, 8010d90 <__ieee754_atan2+0x168>)
 8010d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d32:	e7ec      	b.n	8010d0e <__ieee754_atan2+0xe6>
 8010d34:	2000      	movs	r0, #0
 8010d36:	2100      	movs	r1, #0
 8010d38:	e7e9      	b.n	8010d0e <__ieee754_atan2+0xe6>
 8010d3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d3e:	4619      	mov	r1, r3
 8010d40:	e793      	b.n	8010c6a <__ieee754_atan2+0x42>
 8010d42:	a30f      	add	r3, pc, #60	; (adr r3, 8010d80 <__ieee754_atan2+0x158>)
 8010d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d48:	f7ef fa4e 	bl	80001e8 <__aeabi_dsub>
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	460b      	mov	r3, r1
 8010d50:	a10d      	add	r1, pc, #52	; (adr r1, 8010d88 <__ieee754_atan2+0x160>)
 8010d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d56:	f7ef fa47 	bl	80001e8 <__aeabi_dsub>
 8010d5a:	e786      	b.n	8010c6a <__ieee754_atan2+0x42>
 8010d5c:	a10a      	add	r1, pc, #40	; (adr r1, 8010d88 <__ieee754_atan2+0x160>)
 8010d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d62:	e782      	b.n	8010c6a <__ieee754_atan2+0x42>
 8010d64:	a10c      	add	r1, pc, #48	; (adr r1, 8010d98 <__ieee754_atan2+0x170>)
 8010d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d6a:	e77e      	b.n	8010c6a <__ieee754_atan2+0x42>
 8010d6c:	2000      	movs	r0, #0
 8010d6e:	2100      	movs	r1, #0
 8010d70:	e77b      	b.n	8010c6a <__ieee754_atan2+0x42>
 8010d72:	a107      	add	r1, pc, #28	; (adr r1, 8010d90 <__ieee754_atan2+0x168>)
 8010d74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d78:	e777      	b.n	8010c6a <__ieee754_atan2+0x42>
 8010d7a:	bf00      	nop
 8010d7c:	f3af 8000 	nop.w
 8010d80:	33145c07 	.word	0x33145c07
 8010d84:	3ca1a626 	.word	0x3ca1a626
 8010d88:	54442d18 	.word	0x54442d18
 8010d8c:	400921fb 	.word	0x400921fb
 8010d90:	54442d18 	.word	0x54442d18
 8010d94:	3ff921fb 	.word	0x3ff921fb
 8010d98:	54442d18 	.word	0x54442d18
 8010d9c:	3fe921fb 	.word	0x3fe921fb
 8010da0:	08012340 	.word	0x08012340
 8010da4:	08012358 	.word	0x08012358
 8010da8:	54442d18 	.word	0x54442d18
 8010dac:	c00921fb 	.word	0xc00921fb
 8010db0:	54442d18 	.word	0x54442d18
 8010db4:	bff921fb 	.word	0xbff921fb
 8010db8:	7ff00000 	.word	0x7ff00000
 8010dbc:	00000000 	.word	0x00000000

08010dc0 <__ieee754_rem_pio2>:
 8010dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc4:	ed2d 8b02 	vpush	{d8}
 8010dc8:	ec55 4b10 	vmov	r4, r5, d0
 8010dcc:	4bca      	ldr	r3, [pc, #808]	; (80110f8 <__ieee754_rem_pio2+0x338>)
 8010dce:	b08b      	sub	sp, #44	; 0x2c
 8010dd0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010dd4:	4598      	cmp	r8, r3
 8010dd6:	4682      	mov	sl, r0
 8010dd8:	9502      	str	r5, [sp, #8]
 8010dda:	dc08      	bgt.n	8010dee <__ieee754_rem_pio2+0x2e>
 8010ddc:	2200      	movs	r2, #0
 8010dde:	2300      	movs	r3, #0
 8010de0:	ed80 0b00 	vstr	d0, [r0]
 8010de4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010de8:	f04f 0b00 	mov.w	fp, #0
 8010dec:	e028      	b.n	8010e40 <__ieee754_rem_pio2+0x80>
 8010dee:	4bc3      	ldr	r3, [pc, #780]	; (80110fc <__ieee754_rem_pio2+0x33c>)
 8010df0:	4598      	cmp	r8, r3
 8010df2:	dc78      	bgt.n	8010ee6 <__ieee754_rem_pio2+0x126>
 8010df4:	9b02      	ldr	r3, [sp, #8]
 8010df6:	4ec2      	ldr	r6, [pc, #776]	; (8011100 <__ieee754_rem_pio2+0x340>)
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	ee10 0a10 	vmov	r0, s0
 8010dfe:	a3b0      	add	r3, pc, #704	; (adr r3, 80110c0 <__ieee754_rem_pio2+0x300>)
 8010e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e04:	4629      	mov	r1, r5
 8010e06:	dd39      	ble.n	8010e7c <__ieee754_rem_pio2+0xbc>
 8010e08:	f7ef f9ee 	bl	80001e8 <__aeabi_dsub>
 8010e0c:	45b0      	cmp	r8, r6
 8010e0e:	4604      	mov	r4, r0
 8010e10:	460d      	mov	r5, r1
 8010e12:	d01b      	beq.n	8010e4c <__ieee754_rem_pio2+0x8c>
 8010e14:	a3ac      	add	r3, pc, #688	; (adr r3, 80110c8 <__ieee754_rem_pio2+0x308>)
 8010e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1a:	f7ef f9e5 	bl	80001e8 <__aeabi_dsub>
 8010e1e:	4602      	mov	r2, r0
 8010e20:	460b      	mov	r3, r1
 8010e22:	e9ca 2300 	strd	r2, r3, [sl]
 8010e26:	4620      	mov	r0, r4
 8010e28:	4629      	mov	r1, r5
 8010e2a:	f7ef f9dd 	bl	80001e8 <__aeabi_dsub>
 8010e2e:	a3a6      	add	r3, pc, #664	; (adr r3, 80110c8 <__ieee754_rem_pio2+0x308>)
 8010e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e34:	f7ef f9d8 	bl	80001e8 <__aeabi_dsub>
 8010e38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010e3c:	f04f 0b01 	mov.w	fp, #1
 8010e40:	4658      	mov	r0, fp
 8010e42:	b00b      	add	sp, #44	; 0x2c
 8010e44:	ecbd 8b02 	vpop	{d8}
 8010e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e4c:	a3a0      	add	r3, pc, #640	; (adr r3, 80110d0 <__ieee754_rem_pio2+0x310>)
 8010e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e52:	f7ef f9c9 	bl	80001e8 <__aeabi_dsub>
 8010e56:	a3a0      	add	r3, pc, #640	; (adr r3, 80110d8 <__ieee754_rem_pio2+0x318>)
 8010e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5c:	4604      	mov	r4, r0
 8010e5e:	460d      	mov	r5, r1
 8010e60:	f7ef f9c2 	bl	80001e8 <__aeabi_dsub>
 8010e64:	4602      	mov	r2, r0
 8010e66:	460b      	mov	r3, r1
 8010e68:	e9ca 2300 	strd	r2, r3, [sl]
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	4629      	mov	r1, r5
 8010e70:	f7ef f9ba 	bl	80001e8 <__aeabi_dsub>
 8010e74:	a398      	add	r3, pc, #608	; (adr r3, 80110d8 <__ieee754_rem_pio2+0x318>)
 8010e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7a:	e7db      	b.n	8010e34 <__ieee754_rem_pio2+0x74>
 8010e7c:	f7ef f9b6 	bl	80001ec <__adddf3>
 8010e80:	45b0      	cmp	r8, r6
 8010e82:	4604      	mov	r4, r0
 8010e84:	460d      	mov	r5, r1
 8010e86:	d016      	beq.n	8010eb6 <__ieee754_rem_pio2+0xf6>
 8010e88:	a38f      	add	r3, pc, #572	; (adr r3, 80110c8 <__ieee754_rem_pio2+0x308>)
 8010e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8e:	f7ef f9ad 	bl	80001ec <__adddf3>
 8010e92:	4602      	mov	r2, r0
 8010e94:	460b      	mov	r3, r1
 8010e96:	e9ca 2300 	strd	r2, r3, [sl]
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	4629      	mov	r1, r5
 8010e9e:	f7ef f9a3 	bl	80001e8 <__aeabi_dsub>
 8010ea2:	a389      	add	r3, pc, #548	; (adr r3, 80110c8 <__ieee754_rem_pio2+0x308>)
 8010ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea8:	f7ef f9a0 	bl	80001ec <__adddf3>
 8010eac:	f04f 3bff 	mov.w	fp, #4294967295
 8010eb0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010eb4:	e7c4      	b.n	8010e40 <__ieee754_rem_pio2+0x80>
 8010eb6:	a386      	add	r3, pc, #536	; (adr r3, 80110d0 <__ieee754_rem_pio2+0x310>)
 8010eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebc:	f7ef f996 	bl	80001ec <__adddf3>
 8010ec0:	a385      	add	r3, pc, #532	; (adr r3, 80110d8 <__ieee754_rem_pio2+0x318>)
 8010ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec6:	4604      	mov	r4, r0
 8010ec8:	460d      	mov	r5, r1
 8010eca:	f7ef f98f 	bl	80001ec <__adddf3>
 8010ece:	4602      	mov	r2, r0
 8010ed0:	460b      	mov	r3, r1
 8010ed2:	e9ca 2300 	strd	r2, r3, [sl]
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	4629      	mov	r1, r5
 8010eda:	f7ef f985 	bl	80001e8 <__aeabi_dsub>
 8010ede:	a37e      	add	r3, pc, #504	; (adr r3, 80110d8 <__ieee754_rem_pio2+0x318>)
 8010ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee4:	e7e0      	b.n	8010ea8 <__ieee754_rem_pio2+0xe8>
 8010ee6:	4b87      	ldr	r3, [pc, #540]	; (8011104 <__ieee754_rem_pio2+0x344>)
 8010ee8:	4598      	cmp	r8, r3
 8010eea:	f300 80d9 	bgt.w	80110a0 <__ieee754_rem_pio2+0x2e0>
 8010eee:	f001 f88f 	bl	8012010 <fabs>
 8010ef2:	ec55 4b10 	vmov	r4, r5, d0
 8010ef6:	ee10 0a10 	vmov	r0, s0
 8010efa:	a379      	add	r3, pc, #484	; (adr r3, 80110e0 <__ieee754_rem_pio2+0x320>)
 8010efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f00:	4629      	mov	r1, r5
 8010f02:	f7ef fb29 	bl	8000558 <__aeabi_dmul>
 8010f06:	4b80      	ldr	r3, [pc, #512]	; (8011108 <__ieee754_rem_pio2+0x348>)
 8010f08:	2200      	movs	r2, #0
 8010f0a:	f7ef f96f 	bl	80001ec <__adddf3>
 8010f0e:	f7ef fdd3 	bl	8000ab8 <__aeabi_d2iz>
 8010f12:	4683      	mov	fp, r0
 8010f14:	f7ef fab6 	bl	8000484 <__aeabi_i2d>
 8010f18:	4602      	mov	r2, r0
 8010f1a:	460b      	mov	r3, r1
 8010f1c:	ec43 2b18 	vmov	d8, r2, r3
 8010f20:	a367      	add	r3, pc, #412	; (adr r3, 80110c0 <__ieee754_rem_pio2+0x300>)
 8010f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f26:	f7ef fb17 	bl	8000558 <__aeabi_dmul>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	4620      	mov	r0, r4
 8010f30:	4629      	mov	r1, r5
 8010f32:	f7ef f959 	bl	80001e8 <__aeabi_dsub>
 8010f36:	a364      	add	r3, pc, #400	; (adr r3, 80110c8 <__ieee754_rem_pio2+0x308>)
 8010f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f3c:	4606      	mov	r6, r0
 8010f3e:	460f      	mov	r7, r1
 8010f40:	ec51 0b18 	vmov	r0, r1, d8
 8010f44:	f7ef fb08 	bl	8000558 <__aeabi_dmul>
 8010f48:	f1bb 0f1f 	cmp.w	fp, #31
 8010f4c:	4604      	mov	r4, r0
 8010f4e:	460d      	mov	r5, r1
 8010f50:	dc0d      	bgt.n	8010f6e <__ieee754_rem_pio2+0x1ae>
 8010f52:	4b6e      	ldr	r3, [pc, #440]	; (801110c <__ieee754_rem_pio2+0x34c>)
 8010f54:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f5c:	4543      	cmp	r3, r8
 8010f5e:	d006      	beq.n	8010f6e <__ieee754_rem_pio2+0x1ae>
 8010f60:	4622      	mov	r2, r4
 8010f62:	462b      	mov	r3, r5
 8010f64:	4630      	mov	r0, r6
 8010f66:	4639      	mov	r1, r7
 8010f68:	f7ef f93e 	bl	80001e8 <__aeabi_dsub>
 8010f6c:	e00f      	b.n	8010f8e <__ieee754_rem_pio2+0x1ce>
 8010f6e:	462b      	mov	r3, r5
 8010f70:	4622      	mov	r2, r4
 8010f72:	4630      	mov	r0, r6
 8010f74:	4639      	mov	r1, r7
 8010f76:	f7ef f937 	bl	80001e8 <__aeabi_dsub>
 8010f7a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010f7e:	9303      	str	r3, [sp, #12]
 8010f80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010f84:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8010f88:	f1b8 0f10 	cmp.w	r8, #16
 8010f8c:	dc02      	bgt.n	8010f94 <__ieee754_rem_pio2+0x1d4>
 8010f8e:	e9ca 0100 	strd	r0, r1, [sl]
 8010f92:	e039      	b.n	8011008 <__ieee754_rem_pio2+0x248>
 8010f94:	a34e      	add	r3, pc, #312	; (adr r3, 80110d0 <__ieee754_rem_pio2+0x310>)
 8010f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f9a:	ec51 0b18 	vmov	r0, r1, d8
 8010f9e:	f7ef fadb 	bl	8000558 <__aeabi_dmul>
 8010fa2:	4604      	mov	r4, r0
 8010fa4:	460d      	mov	r5, r1
 8010fa6:	4602      	mov	r2, r0
 8010fa8:	460b      	mov	r3, r1
 8010faa:	4630      	mov	r0, r6
 8010fac:	4639      	mov	r1, r7
 8010fae:	f7ef f91b 	bl	80001e8 <__aeabi_dsub>
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	460b      	mov	r3, r1
 8010fb6:	4680      	mov	r8, r0
 8010fb8:	4689      	mov	r9, r1
 8010fba:	4630      	mov	r0, r6
 8010fbc:	4639      	mov	r1, r7
 8010fbe:	f7ef f913 	bl	80001e8 <__aeabi_dsub>
 8010fc2:	4622      	mov	r2, r4
 8010fc4:	462b      	mov	r3, r5
 8010fc6:	f7ef f90f 	bl	80001e8 <__aeabi_dsub>
 8010fca:	a343      	add	r3, pc, #268	; (adr r3, 80110d8 <__ieee754_rem_pio2+0x318>)
 8010fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd0:	4604      	mov	r4, r0
 8010fd2:	460d      	mov	r5, r1
 8010fd4:	ec51 0b18 	vmov	r0, r1, d8
 8010fd8:	f7ef fabe 	bl	8000558 <__aeabi_dmul>
 8010fdc:	4622      	mov	r2, r4
 8010fde:	462b      	mov	r3, r5
 8010fe0:	f7ef f902 	bl	80001e8 <__aeabi_dsub>
 8010fe4:	4602      	mov	r2, r0
 8010fe6:	460b      	mov	r3, r1
 8010fe8:	4604      	mov	r4, r0
 8010fea:	460d      	mov	r5, r1
 8010fec:	4640      	mov	r0, r8
 8010fee:	4649      	mov	r1, r9
 8010ff0:	f7ef f8fa 	bl	80001e8 <__aeabi_dsub>
 8010ff4:	9a03      	ldr	r2, [sp, #12]
 8010ff6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010ffa:	1ad3      	subs	r3, r2, r3
 8010ffc:	2b31      	cmp	r3, #49	; 0x31
 8010ffe:	dc24      	bgt.n	801104a <__ieee754_rem_pio2+0x28a>
 8011000:	e9ca 0100 	strd	r0, r1, [sl]
 8011004:	4646      	mov	r6, r8
 8011006:	464f      	mov	r7, r9
 8011008:	e9da 8900 	ldrd	r8, r9, [sl]
 801100c:	4630      	mov	r0, r6
 801100e:	4642      	mov	r2, r8
 8011010:	464b      	mov	r3, r9
 8011012:	4639      	mov	r1, r7
 8011014:	f7ef f8e8 	bl	80001e8 <__aeabi_dsub>
 8011018:	462b      	mov	r3, r5
 801101a:	4622      	mov	r2, r4
 801101c:	f7ef f8e4 	bl	80001e8 <__aeabi_dsub>
 8011020:	9b02      	ldr	r3, [sp, #8]
 8011022:	2b00      	cmp	r3, #0
 8011024:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011028:	f6bf af0a 	bge.w	8010e40 <__ieee754_rem_pio2+0x80>
 801102c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011030:	f8ca 3004 	str.w	r3, [sl, #4]
 8011034:	f8ca 8000 	str.w	r8, [sl]
 8011038:	f8ca 0008 	str.w	r0, [sl, #8]
 801103c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011040:	f8ca 300c 	str.w	r3, [sl, #12]
 8011044:	f1cb 0b00 	rsb	fp, fp, #0
 8011048:	e6fa      	b.n	8010e40 <__ieee754_rem_pio2+0x80>
 801104a:	a327      	add	r3, pc, #156	; (adr r3, 80110e8 <__ieee754_rem_pio2+0x328>)
 801104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011050:	ec51 0b18 	vmov	r0, r1, d8
 8011054:	f7ef fa80 	bl	8000558 <__aeabi_dmul>
 8011058:	4604      	mov	r4, r0
 801105a:	460d      	mov	r5, r1
 801105c:	4602      	mov	r2, r0
 801105e:	460b      	mov	r3, r1
 8011060:	4640      	mov	r0, r8
 8011062:	4649      	mov	r1, r9
 8011064:	f7ef f8c0 	bl	80001e8 <__aeabi_dsub>
 8011068:	4602      	mov	r2, r0
 801106a:	460b      	mov	r3, r1
 801106c:	4606      	mov	r6, r0
 801106e:	460f      	mov	r7, r1
 8011070:	4640      	mov	r0, r8
 8011072:	4649      	mov	r1, r9
 8011074:	f7ef f8b8 	bl	80001e8 <__aeabi_dsub>
 8011078:	4622      	mov	r2, r4
 801107a:	462b      	mov	r3, r5
 801107c:	f7ef f8b4 	bl	80001e8 <__aeabi_dsub>
 8011080:	a31b      	add	r3, pc, #108	; (adr r3, 80110f0 <__ieee754_rem_pio2+0x330>)
 8011082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011086:	4604      	mov	r4, r0
 8011088:	460d      	mov	r5, r1
 801108a:	ec51 0b18 	vmov	r0, r1, d8
 801108e:	f7ef fa63 	bl	8000558 <__aeabi_dmul>
 8011092:	4622      	mov	r2, r4
 8011094:	462b      	mov	r3, r5
 8011096:	f7ef f8a7 	bl	80001e8 <__aeabi_dsub>
 801109a:	4604      	mov	r4, r0
 801109c:	460d      	mov	r5, r1
 801109e:	e75f      	b.n	8010f60 <__ieee754_rem_pio2+0x1a0>
 80110a0:	4b1b      	ldr	r3, [pc, #108]	; (8011110 <__ieee754_rem_pio2+0x350>)
 80110a2:	4598      	cmp	r8, r3
 80110a4:	dd36      	ble.n	8011114 <__ieee754_rem_pio2+0x354>
 80110a6:	ee10 2a10 	vmov	r2, s0
 80110aa:	462b      	mov	r3, r5
 80110ac:	4620      	mov	r0, r4
 80110ae:	4629      	mov	r1, r5
 80110b0:	f7ef f89a 	bl	80001e8 <__aeabi_dsub>
 80110b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80110b8:	e9ca 0100 	strd	r0, r1, [sl]
 80110bc:	e694      	b.n	8010de8 <__ieee754_rem_pio2+0x28>
 80110be:	bf00      	nop
 80110c0:	54400000 	.word	0x54400000
 80110c4:	3ff921fb 	.word	0x3ff921fb
 80110c8:	1a626331 	.word	0x1a626331
 80110cc:	3dd0b461 	.word	0x3dd0b461
 80110d0:	1a600000 	.word	0x1a600000
 80110d4:	3dd0b461 	.word	0x3dd0b461
 80110d8:	2e037073 	.word	0x2e037073
 80110dc:	3ba3198a 	.word	0x3ba3198a
 80110e0:	6dc9c883 	.word	0x6dc9c883
 80110e4:	3fe45f30 	.word	0x3fe45f30
 80110e8:	2e000000 	.word	0x2e000000
 80110ec:	3ba3198a 	.word	0x3ba3198a
 80110f0:	252049c1 	.word	0x252049c1
 80110f4:	397b839a 	.word	0x397b839a
 80110f8:	3fe921fb 	.word	0x3fe921fb
 80110fc:	4002d97b 	.word	0x4002d97b
 8011100:	3ff921fb 	.word	0x3ff921fb
 8011104:	413921fb 	.word	0x413921fb
 8011108:	3fe00000 	.word	0x3fe00000
 801110c:	08012370 	.word	0x08012370
 8011110:	7fefffff 	.word	0x7fefffff
 8011114:	ea4f 5428 	mov.w	r4, r8, asr #20
 8011118:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801111c:	ee10 0a10 	vmov	r0, s0
 8011120:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8011124:	ee10 6a10 	vmov	r6, s0
 8011128:	460f      	mov	r7, r1
 801112a:	f7ef fcc5 	bl	8000ab8 <__aeabi_d2iz>
 801112e:	f7ef f9a9 	bl	8000484 <__aeabi_i2d>
 8011132:	4602      	mov	r2, r0
 8011134:	460b      	mov	r3, r1
 8011136:	4630      	mov	r0, r6
 8011138:	4639      	mov	r1, r7
 801113a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801113e:	f7ef f853 	bl	80001e8 <__aeabi_dsub>
 8011142:	4b22      	ldr	r3, [pc, #136]	; (80111cc <__ieee754_rem_pio2+0x40c>)
 8011144:	2200      	movs	r2, #0
 8011146:	f7ef fa07 	bl	8000558 <__aeabi_dmul>
 801114a:	460f      	mov	r7, r1
 801114c:	4606      	mov	r6, r0
 801114e:	f7ef fcb3 	bl	8000ab8 <__aeabi_d2iz>
 8011152:	f7ef f997 	bl	8000484 <__aeabi_i2d>
 8011156:	4602      	mov	r2, r0
 8011158:	460b      	mov	r3, r1
 801115a:	4630      	mov	r0, r6
 801115c:	4639      	mov	r1, r7
 801115e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011162:	f7ef f841 	bl	80001e8 <__aeabi_dsub>
 8011166:	4b19      	ldr	r3, [pc, #100]	; (80111cc <__ieee754_rem_pio2+0x40c>)
 8011168:	2200      	movs	r2, #0
 801116a:	f7ef f9f5 	bl	8000558 <__aeabi_dmul>
 801116e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011172:	ad04      	add	r5, sp, #16
 8011174:	f04f 0803 	mov.w	r8, #3
 8011178:	46a9      	mov	r9, r5
 801117a:	2600      	movs	r6, #0
 801117c:	2700      	movs	r7, #0
 801117e:	4632      	mov	r2, r6
 8011180:	463b      	mov	r3, r7
 8011182:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8011186:	46c3      	mov	fp, r8
 8011188:	3d08      	subs	r5, #8
 801118a:	f108 38ff 	add.w	r8, r8, #4294967295
 801118e:	f7ef fc4b 	bl	8000a28 <__aeabi_dcmpeq>
 8011192:	2800      	cmp	r0, #0
 8011194:	d1f3      	bne.n	801117e <__ieee754_rem_pio2+0x3be>
 8011196:	4b0e      	ldr	r3, [pc, #56]	; (80111d0 <__ieee754_rem_pio2+0x410>)
 8011198:	9301      	str	r3, [sp, #4]
 801119a:	2302      	movs	r3, #2
 801119c:	9300      	str	r3, [sp, #0]
 801119e:	4622      	mov	r2, r4
 80111a0:	465b      	mov	r3, fp
 80111a2:	4651      	mov	r1, sl
 80111a4:	4648      	mov	r0, r9
 80111a6:	f000 f993 	bl	80114d0 <__kernel_rem_pio2>
 80111aa:	9b02      	ldr	r3, [sp, #8]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	4683      	mov	fp, r0
 80111b0:	f6bf ae46 	bge.w	8010e40 <__ieee754_rem_pio2+0x80>
 80111b4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80111b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80111bc:	f8ca 3004 	str.w	r3, [sl, #4]
 80111c0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80111c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80111c8:	e73a      	b.n	8011040 <__ieee754_rem_pio2+0x280>
 80111ca:	bf00      	nop
 80111cc:	41700000 	.word	0x41700000
 80111d0:	080123f0 	.word	0x080123f0

080111d4 <__ieee754_sqrt>:
 80111d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111d8:	ec55 4b10 	vmov	r4, r5, d0
 80111dc:	4e56      	ldr	r6, [pc, #344]	; (8011338 <__ieee754_sqrt+0x164>)
 80111de:	43ae      	bics	r6, r5
 80111e0:	ee10 0a10 	vmov	r0, s0
 80111e4:	ee10 3a10 	vmov	r3, s0
 80111e8:	4629      	mov	r1, r5
 80111ea:	462a      	mov	r2, r5
 80111ec:	d110      	bne.n	8011210 <__ieee754_sqrt+0x3c>
 80111ee:	ee10 2a10 	vmov	r2, s0
 80111f2:	462b      	mov	r3, r5
 80111f4:	f7ef f9b0 	bl	8000558 <__aeabi_dmul>
 80111f8:	4602      	mov	r2, r0
 80111fa:	460b      	mov	r3, r1
 80111fc:	4620      	mov	r0, r4
 80111fe:	4629      	mov	r1, r5
 8011200:	f7ee fff4 	bl	80001ec <__adddf3>
 8011204:	4604      	mov	r4, r0
 8011206:	460d      	mov	r5, r1
 8011208:	ec45 4b10 	vmov	d0, r4, r5
 801120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011210:	2d00      	cmp	r5, #0
 8011212:	dc10      	bgt.n	8011236 <__ieee754_sqrt+0x62>
 8011214:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011218:	4330      	orrs	r0, r6
 801121a:	d0f5      	beq.n	8011208 <__ieee754_sqrt+0x34>
 801121c:	b15d      	cbz	r5, 8011236 <__ieee754_sqrt+0x62>
 801121e:	ee10 2a10 	vmov	r2, s0
 8011222:	462b      	mov	r3, r5
 8011224:	ee10 0a10 	vmov	r0, s0
 8011228:	f7ee ffde 	bl	80001e8 <__aeabi_dsub>
 801122c:	4602      	mov	r2, r0
 801122e:	460b      	mov	r3, r1
 8011230:	f7ef fabc 	bl	80007ac <__aeabi_ddiv>
 8011234:	e7e6      	b.n	8011204 <__ieee754_sqrt+0x30>
 8011236:	1509      	asrs	r1, r1, #20
 8011238:	d076      	beq.n	8011328 <__ieee754_sqrt+0x154>
 801123a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801123e:	07ce      	lsls	r6, r1, #31
 8011240:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8011244:	bf5e      	ittt	pl
 8011246:	0fda      	lsrpl	r2, r3, #31
 8011248:	005b      	lslpl	r3, r3, #1
 801124a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801124e:	0fda      	lsrs	r2, r3, #31
 8011250:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8011254:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8011258:	2000      	movs	r0, #0
 801125a:	106d      	asrs	r5, r5, #1
 801125c:	005b      	lsls	r3, r3, #1
 801125e:	f04f 0e16 	mov.w	lr, #22
 8011262:	4684      	mov	ip, r0
 8011264:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011268:	eb0c 0401 	add.w	r4, ip, r1
 801126c:	4294      	cmp	r4, r2
 801126e:	bfde      	ittt	le
 8011270:	1b12      	suble	r2, r2, r4
 8011272:	eb04 0c01 	addle.w	ip, r4, r1
 8011276:	1840      	addle	r0, r0, r1
 8011278:	0052      	lsls	r2, r2, #1
 801127a:	f1be 0e01 	subs.w	lr, lr, #1
 801127e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011282:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011286:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801128a:	d1ed      	bne.n	8011268 <__ieee754_sqrt+0x94>
 801128c:	4671      	mov	r1, lr
 801128e:	2720      	movs	r7, #32
 8011290:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011294:	4562      	cmp	r2, ip
 8011296:	eb04 060e 	add.w	r6, r4, lr
 801129a:	dc02      	bgt.n	80112a2 <__ieee754_sqrt+0xce>
 801129c:	d113      	bne.n	80112c6 <__ieee754_sqrt+0xf2>
 801129e:	429e      	cmp	r6, r3
 80112a0:	d811      	bhi.n	80112c6 <__ieee754_sqrt+0xf2>
 80112a2:	2e00      	cmp	r6, #0
 80112a4:	eb06 0e04 	add.w	lr, r6, r4
 80112a8:	da43      	bge.n	8011332 <__ieee754_sqrt+0x15e>
 80112aa:	f1be 0f00 	cmp.w	lr, #0
 80112ae:	db40      	blt.n	8011332 <__ieee754_sqrt+0x15e>
 80112b0:	f10c 0801 	add.w	r8, ip, #1
 80112b4:	eba2 020c 	sub.w	r2, r2, ip
 80112b8:	429e      	cmp	r6, r3
 80112ba:	bf88      	it	hi
 80112bc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80112c0:	1b9b      	subs	r3, r3, r6
 80112c2:	4421      	add	r1, r4
 80112c4:	46c4      	mov	ip, r8
 80112c6:	0052      	lsls	r2, r2, #1
 80112c8:	3f01      	subs	r7, #1
 80112ca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80112ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80112d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80112d6:	d1dd      	bne.n	8011294 <__ieee754_sqrt+0xc0>
 80112d8:	4313      	orrs	r3, r2
 80112da:	d006      	beq.n	80112ea <__ieee754_sqrt+0x116>
 80112dc:	1c4c      	adds	r4, r1, #1
 80112de:	bf13      	iteet	ne
 80112e0:	3101      	addne	r1, #1
 80112e2:	3001      	addeq	r0, #1
 80112e4:	4639      	moveq	r1, r7
 80112e6:	f021 0101 	bicne.w	r1, r1, #1
 80112ea:	1043      	asrs	r3, r0, #1
 80112ec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80112f0:	0849      	lsrs	r1, r1, #1
 80112f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80112f6:	07c2      	lsls	r2, r0, #31
 80112f8:	bf48      	it	mi
 80112fa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80112fe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8011302:	460c      	mov	r4, r1
 8011304:	463d      	mov	r5, r7
 8011306:	e77f      	b.n	8011208 <__ieee754_sqrt+0x34>
 8011308:	0ada      	lsrs	r2, r3, #11
 801130a:	3815      	subs	r0, #21
 801130c:	055b      	lsls	r3, r3, #21
 801130e:	2a00      	cmp	r2, #0
 8011310:	d0fa      	beq.n	8011308 <__ieee754_sqrt+0x134>
 8011312:	02d7      	lsls	r7, r2, #11
 8011314:	d50a      	bpl.n	801132c <__ieee754_sqrt+0x158>
 8011316:	f1c1 0420 	rsb	r4, r1, #32
 801131a:	fa23 f404 	lsr.w	r4, r3, r4
 801131e:	1e4d      	subs	r5, r1, #1
 8011320:	408b      	lsls	r3, r1
 8011322:	4322      	orrs	r2, r4
 8011324:	1b41      	subs	r1, r0, r5
 8011326:	e788      	b.n	801123a <__ieee754_sqrt+0x66>
 8011328:	4608      	mov	r0, r1
 801132a:	e7f0      	b.n	801130e <__ieee754_sqrt+0x13a>
 801132c:	0052      	lsls	r2, r2, #1
 801132e:	3101      	adds	r1, #1
 8011330:	e7ef      	b.n	8011312 <__ieee754_sqrt+0x13e>
 8011332:	46e0      	mov	r8, ip
 8011334:	e7be      	b.n	80112b4 <__ieee754_sqrt+0xe0>
 8011336:	bf00      	nop
 8011338:	7ff00000 	.word	0x7ff00000
 801133c:	00000000 	.word	0x00000000

08011340 <__kernel_cos>:
 8011340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011344:	ec57 6b10 	vmov	r6, r7, d0
 8011348:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801134c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011350:	ed8d 1b00 	vstr	d1, [sp]
 8011354:	da07      	bge.n	8011366 <__kernel_cos+0x26>
 8011356:	ee10 0a10 	vmov	r0, s0
 801135a:	4639      	mov	r1, r7
 801135c:	f7ef fbac 	bl	8000ab8 <__aeabi_d2iz>
 8011360:	2800      	cmp	r0, #0
 8011362:	f000 8088 	beq.w	8011476 <__kernel_cos+0x136>
 8011366:	4632      	mov	r2, r6
 8011368:	463b      	mov	r3, r7
 801136a:	4630      	mov	r0, r6
 801136c:	4639      	mov	r1, r7
 801136e:	f7ef f8f3 	bl	8000558 <__aeabi_dmul>
 8011372:	4b51      	ldr	r3, [pc, #324]	; (80114b8 <__kernel_cos+0x178>)
 8011374:	2200      	movs	r2, #0
 8011376:	4604      	mov	r4, r0
 8011378:	460d      	mov	r5, r1
 801137a:	f7ef f8ed 	bl	8000558 <__aeabi_dmul>
 801137e:	a340      	add	r3, pc, #256	; (adr r3, 8011480 <__kernel_cos+0x140>)
 8011380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011384:	4682      	mov	sl, r0
 8011386:	468b      	mov	fp, r1
 8011388:	4620      	mov	r0, r4
 801138a:	4629      	mov	r1, r5
 801138c:	f7ef f8e4 	bl	8000558 <__aeabi_dmul>
 8011390:	a33d      	add	r3, pc, #244	; (adr r3, 8011488 <__kernel_cos+0x148>)
 8011392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011396:	f7ee ff29 	bl	80001ec <__adddf3>
 801139a:	4622      	mov	r2, r4
 801139c:	462b      	mov	r3, r5
 801139e:	f7ef f8db 	bl	8000558 <__aeabi_dmul>
 80113a2:	a33b      	add	r3, pc, #236	; (adr r3, 8011490 <__kernel_cos+0x150>)
 80113a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a8:	f7ee ff1e 	bl	80001e8 <__aeabi_dsub>
 80113ac:	4622      	mov	r2, r4
 80113ae:	462b      	mov	r3, r5
 80113b0:	f7ef f8d2 	bl	8000558 <__aeabi_dmul>
 80113b4:	a338      	add	r3, pc, #224	; (adr r3, 8011498 <__kernel_cos+0x158>)
 80113b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ba:	f7ee ff17 	bl	80001ec <__adddf3>
 80113be:	4622      	mov	r2, r4
 80113c0:	462b      	mov	r3, r5
 80113c2:	f7ef f8c9 	bl	8000558 <__aeabi_dmul>
 80113c6:	a336      	add	r3, pc, #216	; (adr r3, 80114a0 <__kernel_cos+0x160>)
 80113c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113cc:	f7ee ff0c 	bl	80001e8 <__aeabi_dsub>
 80113d0:	4622      	mov	r2, r4
 80113d2:	462b      	mov	r3, r5
 80113d4:	f7ef f8c0 	bl	8000558 <__aeabi_dmul>
 80113d8:	a333      	add	r3, pc, #204	; (adr r3, 80114a8 <__kernel_cos+0x168>)
 80113da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113de:	f7ee ff05 	bl	80001ec <__adddf3>
 80113e2:	4622      	mov	r2, r4
 80113e4:	462b      	mov	r3, r5
 80113e6:	f7ef f8b7 	bl	8000558 <__aeabi_dmul>
 80113ea:	4622      	mov	r2, r4
 80113ec:	462b      	mov	r3, r5
 80113ee:	f7ef f8b3 	bl	8000558 <__aeabi_dmul>
 80113f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113f6:	4604      	mov	r4, r0
 80113f8:	460d      	mov	r5, r1
 80113fa:	4630      	mov	r0, r6
 80113fc:	4639      	mov	r1, r7
 80113fe:	f7ef f8ab 	bl	8000558 <__aeabi_dmul>
 8011402:	460b      	mov	r3, r1
 8011404:	4602      	mov	r2, r0
 8011406:	4629      	mov	r1, r5
 8011408:	4620      	mov	r0, r4
 801140a:	f7ee feed 	bl	80001e8 <__aeabi_dsub>
 801140e:	4b2b      	ldr	r3, [pc, #172]	; (80114bc <__kernel_cos+0x17c>)
 8011410:	4598      	cmp	r8, r3
 8011412:	4606      	mov	r6, r0
 8011414:	460f      	mov	r7, r1
 8011416:	dc10      	bgt.n	801143a <__kernel_cos+0xfa>
 8011418:	4602      	mov	r2, r0
 801141a:	460b      	mov	r3, r1
 801141c:	4650      	mov	r0, sl
 801141e:	4659      	mov	r1, fp
 8011420:	f7ee fee2 	bl	80001e8 <__aeabi_dsub>
 8011424:	460b      	mov	r3, r1
 8011426:	4926      	ldr	r1, [pc, #152]	; (80114c0 <__kernel_cos+0x180>)
 8011428:	4602      	mov	r2, r0
 801142a:	2000      	movs	r0, #0
 801142c:	f7ee fedc 	bl	80001e8 <__aeabi_dsub>
 8011430:	ec41 0b10 	vmov	d0, r0, r1
 8011434:	b003      	add	sp, #12
 8011436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801143a:	4b22      	ldr	r3, [pc, #136]	; (80114c4 <__kernel_cos+0x184>)
 801143c:	4920      	ldr	r1, [pc, #128]	; (80114c0 <__kernel_cos+0x180>)
 801143e:	4598      	cmp	r8, r3
 8011440:	bfcc      	ite	gt
 8011442:	4d21      	ldrgt	r5, [pc, #132]	; (80114c8 <__kernel_cos+0x188>)
 8011444:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011448:	2400      	movs	r4, #0
 801144a:	4622      	mov	r2, r4
 801144c:	462b      	mov	r3, r5
 801144e:	2000      	movs	r0, #0
 8011450:	f7ee feca 	bl	80001e8 <__aeabi_dsub>
 8011454:	4622      	mov	r2, r4
 8011456:	4680      	mov	r8, r0
 8011458:	4689      	mov	r9, r1
 801145a:	462b      	mov	r3, r5
 801145c:	4650      	mov	r0, sl
 801145e:	4659      	mov	r1, fp
 8011460:	f7ee fec2 	bl	80001e8 <__aeabi_dsub>
 8011464:	4632      	mov	r2, r6
 8011466:	463b      	mov	r3, r7
 8011468:	f7ee febe 	bl	80001e8 <__aeabi_dsub>
 801146c:	4602      	mov	r2, r0
 801146e:	460b      	mov	r3, r1
 8011470:	4640      	mov	r0, r8
 8011472:	4649      	mov	r1, r9
 8011474:	e7da      	b.n	801142c <__kernel_cos+0xec>
 8011476:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80114b0 <__kernel_cos+0x170>
 801147a:	e7db      	b.n	8011434 <__kernel_cos+0xf4>
 801147c:	f3af 8000 	nop.w
 8011480:	be8838d4 	.word	0xbe8838d4
 8011484:	bda8fae9 	.word	0xbda8fae9
 8011488:	bdb4b1c4 	.word	0xbdb4b1c4
 801148c:	3e21ee9e 	.word	0x3e21ee9e
 8011490:	809c52ad 	.word	0x809c52ad
 8011494:	3e927e4f 	.word	0x3e927e4f
 8011498:	19cb1590 	.word	0x19cb1590
 801149c:	3efa01a0 	.word	0x3efa01a0
 80114a0:	16c15177 	.word	0x16c15177
 80114a4:	3f56c16c 	.word	0x3f56c16c
 80114a8:	5555554c 	.word	0x5555554c
 80114ac:	3fa55555 	.word	0x3fa55555
 80114b0:	00000000 	.word	0x00000000
 80114b4:	3ff00000 	.word	0x3ff00000
 80114b8:	3fe00000 	.word	0x3fe00000
 80114bc:	3fd33332 	.word	0x3fd33332
 80114c0:	3ff00000 	.word	0x3ff00000
 80114c4:	3fe90000 	.word	0x3fe90000
 80114c8:	3fd20000 	.word	0x3fd20000
 80114cc:	00000000 	.word	0x00000000

080114d0 <__kernel_rem_pio2>:
 80114d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d4:	ed2d 8b02 	vpush	{d8}
 80114d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80114dc:	f112 0f14 	cmn.w	r2, #20
 80114e0:	9308      	str	r3, [sp, #32]
 80114e2:	9101      	str	r1, [sp, #4]
 80114e4:	4bc6      	ldr	r3, [pc, #792]	; (8011800 <__kernel_rem_pio2+0x330>)
 80114e6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80114e8:	9009      	str	r0, [sp, #36]	; 0x24
 80114ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80114ee:	9304      	str	r3, [sp, #16]
 80114f0:	9b08      	ldr	r3, [sp, #32]
 80114f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80114f6:	bfa8      	it	ge
 80114f8:	1ed4      	subge	r4, r2, #3
 80114fa:	9306      	str	r3, [sp, #24]
 80114fc:	bfb2      	itee	lt
 80114fe:	2400      	movlt	r4, #0
 8011500:	2318      	movge	r3, #24
 8011502:	fb94 f4f3 	sdivge	r4, r4, r3
 8011506:	f06f 0317 	mvn.w	r3, #23
 801150a:	fb04 3303 	mla	r3, r4, r3, r3
 801150e:	eb03 0a02 	add.w	sl, r3, r2
 8011512:	9b04      	ldr	r3, [sp, #16]
 8011514:	9a06      	ldr	r2, [sp, #24]
 8011516:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80117f0 <__kernel_rem_pio2+0x320>
 801151a:	eb03 0802 	add.w	r8, r3, r2
 801151e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011520:	1aa7      	subs	r7, r4, r2
 8011522:	ae20      	add	r6, sp, #128	; 0x80
 8011524:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011528:	2500      	movs	r5, #0
 801152a:	4545      	cmp	r5, r8
 801152c:	dd18      	ble.n	8011560 <__kernel_rem_pio2+0x90>
 801152e:	9b08      	ldr	r3, [sp, #32]
 8011530:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011534:	aa20      	add	r2, sp, #128	; 0x80
 8011536:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80117f0 <__kernel_rem_pio2+0x320>
 801153a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801153e:	f1c3 0301 	rsb	r3, r3, #1
 8011542:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8011546:	9307      	str	r3, [sp, #28]
 8011548:	9b07      	ldr	r3, [sp, #28]
 801154a:	9a04      	ldr	r2, [sp, #16]
 801154c:	4443      	add	r3, r8
 801154e:	429a      	cmp	r2, r3
 8011550:	db2f      	blt.n	80115b2 <__kernel_rem_pio2+0xe2>
 8011552:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011556:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801155a:	462f      	mov	r7, r5
 801155c:	2600      	movs	r6, #0
 801155e:	e01b      	b.n	8011598 <__kernel_rem_pio2+0xc8>
 8011560:	42ef      	cmn	r7, r5
 8011562:	d407      	bmi.n	8011574 <__kernel_rem_pio2+0xa4>
 8011564:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011568:	f7ee ff8c 	bl	8000484 <__aeabi_i2d>
 801156c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011570:	3501      	adds	r5, #1
 8011572:	e7da      	b.n	801152a <__kernel_rem_pio2+0x5a>
 8011574:	ec51 0b18 	vmov	r0, r1, d8
 8011578:	e7f8      	b.n	801156c <__kernel_rem_pio2+0x9c>
 801157a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801157e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011582:	f7ee ffe9 	bl	8000558 <__aeabi_dmul>
 8011586:	4602      	mov	r2, r0
 8011588:	460b      	mov	r3, r1
 801158a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801158e:	f7ee fe2d 	bl	80001ec <__adddf3>
 8011592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011596:	3601      	adds	r6, #1
 8011598:	9b06      	ldr	r3, [sp, #24]
 801159a:	429e      	cmp	r6, r3
 801159c:	f1a7 0708 	sub.w	r7, r7, #8
 80115a0:	ddeb      	ble.n	801157a <__kernel_rem_pio2+0xaa>
 80115a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80115a6:	3508      	adds	r5, #8
 80115a8:	ecab 7b02 	vstmia	fp!, {d7}
 80115ac:	f108 0801 	add.w	r8, r8, #1
 80115b0:	e7ca      	b.n	8011548 <__kernel_rem_pio2+0x78>
 80115b2:	9b04      	ldr	r3, [sp, #16]
 80115b4:	aa0c      	add	r2, sp, #48	; 0x30
 80115b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80115ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80115bc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80115be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80115c2:	9c04      	ldr	r4, [sp, #16]
 80115c4:	930a      	str	r3, [sp, #40]	; 0x28
 80115c6:	ab98      	add	r3, sp, #608	; 0x260
 80115c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80115cc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80115d0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80115d4:	f8cd b008 	str.w	fp, [sp, #8]
 80115d8:	4625      	mov	r5, r4
 80115da:	2d00      	cmp	r5, #0
 80115dc:	dc78      	bgt.n	80116d0 <__kernel_rem_pio2+0x200>
 80115de:	ec47 6b10 	vmov	d0, r6, r7
 80115e2:	4650      	mov	r0, sl
 80115e4:	f000 fda8 	bl	8012138 <scalbn>
 80115e8:	ec57 6b10 	vmov	r6, r7, d0
 80115ec:	2200      	movs	r2, #0
 80115ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80115f2:	ee10 0a10 	vmov	r0, s0
 80115f6:	4639      	mov	r1, r7
 80115f8:	f7ee ffae 	bl	8000558 <__aeabi_dmul>
 80115fc:	ec41 0b10 	vmov	d0, r0, r1
 8011600:	f000 fd12 	bl	8012028 <floor>
 8011604:	4b7f      	ldr	r3, [pc, #508]	; (8011804 <__kernel_rem_pio2+0x334>)
 8011606:	ec51 0b10 	vmov	r0, r1, d0
 801160a:	2200      	movs	r2, #0
 801160c:	f7ee ffa4 	bl	8000558 <__aeabi_dmul>
 8011610:	4602      	mov	r2, r0
 8011612:	460b      	mov	r3, r1
 8011614:	4630      	mov	r0, r6
 8011616:	4639      	mov	r1, r7
 8011618:	f7ee fde6 	bl	80001e8 <__aeabi_dsub>
 801161c:	460f      	mov	r7, r1
 801161e:	4606      	mov	r6, r0
 8011620:	f7ef fa4a 	bl	8000ab8 <__aeabi_d2iz>
 8011624:	9007      	str	r0, [sp, #28]
 8011626:	f7ee ff2d 	bl	8000484 <__aeabi_i2d>
 801162a:	4602      	mov	r2, r0
 801162c:	460b      	mov	r3, r1
 801162e:	4630      	mov	r0, r6
 8011630:	4639      	mov	r1, r7
 8011632:	f7ee fdd9 	bl	80001e8 <__aeabi_dsub>
 8011636:	f1ba 0f00 	cmp.w	sl, #0
 801163a:	4606      	mov	r6, r0
 801163c:	460f      	mov	r7, r1
 801163e:	dd70      	ble.n	8011722 <__kernel_rem_pio2+0x252>
 8011640:	1e62      	subs	r2, r4, #1
 8011642:	ab0c      	add	r3, sp, #48	; 0x30
 8011644:	9d07      	ldr	r5, [sp, #28]
 8011646:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801164a:	f1ca 0118 	rsb	r1, sl, #24
 801164e:	fa40 f301 	asr.w	r3, r0, r1
 8011652:	441d      	add	r5, r3
 8011654:	408b      	lsls	r3, r1
 8011656:	1ac0      	subs	r0, r0, r3
 8011658:	ab0c      	add	r3, sp, #48	; 0x30
 801165a:	9507      	str	r5, [sp, #28]
 801165c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011660:	f1ca 0317 	rsb	r3, sl, #23
 8011664:	fa40 f303 	asr.w	r3, r0, r3
 8011668:	9302      	str	r3, [sp, #8]
 801166a:	9b02      	ldr	r3, [sp, #8]
 801166c:	2b00      	cmp	r3, #0
 801166e:	dd66      	ble.n	801173e <__kernel_rem_pio2+0x26e>
 8011670:	9b07      	ldr	r3, [sp, #28]
 8011672:	2200      	movs	r2, #0
 8011674:	3301      	adds	r3, #1
 8011676:	9307      	str	r3, [sp, #28]
 8011678:	4615      	mov	r5, r2
 801167a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801167e:	4294      	cmp	r4, r2
 8011680:	f300 8099 	bgt.w	80117b6 <__kernel_rem_pio2+0x2e6>
 8011684:	f1ba 0f00 	cmp.w	sl, #0
 8011688:	dd07      	ble.n	801169a <__kernel_rem_pio2+0x1ca>
 801168a:	f1ba 0f01 	cmp.w	sl, #1
 801168e:	f000 80a5 	beq.w	80117dc <__kernel_rem_pio2+0x30c>
 8011692:	f1ba 0f02 	cmp.w	sl, #2
 8011696:	f000 80c1 	beq.w	801181c <__kernel_rem_pio2+0x34c>
 801169a:	9b02      	ldr	r3, [sp, #8]
 801169c:	2b02      	cmp	r3, #2
 801169e:	d14e      	bne.n	801173e <__kernel_rem_pio2+0x26e>
 80116a0:	4632      	mov	r2, r6
 80116a2:	463b      	mov	r3, r7
 80116a4:	4958      	ldr	r1, [pc, #352]	; (8011808 <__kernel_rem_pio2+0x338>)
 80116a6:	2000      	movs	r0, #0
 80116a8:	f7ee fd9e 	bl	80001e8 <__aeabi_dsub>
 80116ac:	4606      	mov	r6, r0
 80116ae:	460f      	mov	r7, r1
 80116b0:	2d00      	cmp	r5, #0
 80116b2:	d044      	beq.n	801173e <__kernel_rem_pio2+0x26e>
 80116b4:	4650      	mov	r0, sl
 80116b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80117f8 <__kernel_rem_pio2+0x328>
 80116ba:	f000 fd3d 	bl	8012138 <scalbn>
 80116be:	4630      	mov	r0, r6
 80116c0:	4639      	mov	r1, r7
 80116c2:	ec53 2b10 	vmov	r2, r3, d0
 80116c6:	f7ee fd8f 	bl	80001e8 <__aeabi_dsub>
 80116ca:	4606      	mov	r6, r0
 80116cc:	460f      	mov	r7, r1
 80116ce:	e036      	b.n	801173e <__kernel_rem_pio2+0x26e>
 80116d0:	4b4e      	ldr	r3, [pc, #312]	; (801180c <__kernel_rem_pio2+0x33c>)
 80116d2:	2200      	movs	r2, #0
 80116d4:	4630      	mov	r0, r6
 80116d6:	4639      	mov	r1, r7
 80116d8:	f7ee ff3e 	bl	8000558 <__aeabi_dmul>
 80116dc:	f7ef f9ec 	bl	8000ab8 <__aeabi_d2iz>
 80116e0:	f7ee fed0 	bl	8000484 <__aeabi_i2d>
 80116e4:	4b4a      	ldr	r3, [pc, #296]	; (8011810 <__kernel_rem_pio2+0x340>)
 80116e6:	2200      	movs	r2, #0
 80116e8:	4680      	mov	r8, r0
 80116ea:	4689      	mov	r9, r1
 80116ec:	f7ee ff34 	bl	8000558 <__aeabi_dmul>
 80116f0:	4602      	mov	r2, r0
 80116f2:	460b      	mov	r3, r1
 80116f4:	4630      	mov	r0, r6
 80116f6:	4639      	mov	r1, r7
 80116f8:	f7ee fd76 	bl	80001e8 <__aeabi_dsub>
 80116fc:	f7ef f9dc 	bl	8000ab8 <__aeabi_d2iz>
 8011700:	9b02      	ldr	r3, [sp, #8]
 8011702:	f843 0b04 	str.w	r0, [r3], #4
 8011706:	3d01      	subs	r5, #1
 8011708:	9302      	str	r3, [sp, #8]
 801170a:	ab70      	add	r3, sp, #448	; 0x1c0
 801170c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011714:	4640      	mov	r0, r8
 8011716:	4649      	mov	r1, r9
 8011718:	f7ee fd68 	bl	80001ec <__adddf3>
 801171c:	4606      	mov	r6, r0
 801171e:	460f      	mov	r7, r1
 8011720:	e75b      	b.n	80115da <__kernel_rem_pio2+0x10a>
 8011722:	d105      	bne.n	8011730 <__kernel_rem_pio2+0x260>
 8011724:	1e63      	subs	r3, r4, #1
 8011726:	aa0c      	add	r2, sp, #48	; 0x30
 8011728:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801172c:	15c3      	asrs	r3, r0, #23
 801172e:	e79b      	b.n	8011668 <__kernel_rem_pio2+0x198>
 8011730:	4b38      	ldr	r3, [pc, #224]	; (8011814 <__kernel_rem_pio2+0x344>)
 8011732:	2200      	movs	r2, #0
 8011734:	f7ef f996 	bl	8000a64 <__aeabi_dcmpge>
 8011738:	2800      	cmp	r0, #0
 801173a:	d139      	bne.n	80117b0 <__kernel_rem_pio2+0x2e0>
 801173c:	9002      	str	r0, [sp, #8]
 801173e:	2200      	movs	r2, #0
 8011740:	2300      	movs	r3, #0
 8011742:	4630      	mov	r0, r6
 8011744:	4639      	mov	r1, r7
 8011746:	f7ef f96f 	bl	8000a28 <__aeabi_dcmpeq>
 801174a:	2800      	cmp	r0, #0
 801174c:	f000 80b4 	beq.w	80118b8 <__kernel_rem_pio2+0x3e8>
 8011750:	f104 3bff 	add.w	fp, r4, #4294967295
 8011754:	465b      	mov	r3, fp
 8011756:	2200      	movs	r2, #0
 8011758:	9904      	ldr	r1, [sp, #16]
 801175a:	428b      	cmp	r3, r1
 801175c:	da65      	bge.n	801182a <__kernel_rem_pio2+0x35a>
 801175e:	2a00      	cmp	r2, #0
 8011760:	d07b      	beq.n	801185a <__kernel_rem_pio2+0x38a>
 8011762:	ab0c      	add	r3, sp, #48	; 0x30
 8011764:	f1aa 0a18 	sub.w	sl, sl, #24
 8011768:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801176c:	2b00      	cmp	r3, #0
 801176e:	f000 80a0 	beq.w	80118b2 <__kernel_rem_pio2+0x3e2>
 8011772:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80117f8 <__kernel_rem_pio2+0x328>
 8011776:	4650      	mov	r0, sl
 8011778:	f000 fcde 	bl	8012138 <scalbn>
 801177c:	4f23      	ldr	r7, [pc, #140]	; (801180c <__kernel_rem_pio2+0x33c>)
 801177e:	ec55 4b10 	vmov	r4, r5, d0
 8011782:	46d8      	mov	r8, fp
 8011784:	2600      	movs	r6, #0
 8011786:	f1b8 0f00 	cmp.w	r8, #0
 801178a:	f280 80cf 	bge.w	801192c <__kernel_rem_pio2+0x45c>
 801178e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80117f0 <__kernel_rem_pio2+0x320>
 8011792:	465f      	mov	r7, fp
 8011794:	f04f 0800 	mov.w	r8, #0
 8011798:	2f00      	cmp	r7, #0
 801179a:	f2c0 80fd 	blt.w	8011998 <__kernel_rem_pio2+0x4c8>
 801179e:	ab70      	add	r3, sp, #448	; 0x1c0
 80117a0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8011818 <__kernel_rem_pio2+0x348>
 80117a4:	ec55 4b18 	vmov	r4, r5, d8
 80117a8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80117ac:	2600      	movs	r6, #0
 80117ae:	e0e5      	b.n	801197c <__kernel_rem_pio2+0x4ac>
 80117b0:	2302      	movs	r3, #2
 80117b2:	9302      	str	r3, [sp, #8]
 80117b4:	e75c      	b.n	8011670 <__kernel_rem_pio2+0x1a0>
 80117b6:	f8db 3000 	ldr.w	r3, [fp]
 80117ba:	b955      	cbnz	r5, 80117d2 <__kernel_rem_pio2+0x302>
 80117bc:	b123      	cbz	r3, 80117c8 <__kernel_rem_pio2+0x2f8>
 80117be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80117c2:	f8cb 3000 	str.w	r3, [fp]
 80117c6:	2301      	movs	r3, #1
 80117c8:	3201      	adds	r2, #1
 80117ca:	f10b 0b04 	add.w	fp, fp, #4
 80117ce:	461d      	mov	r5, r3
 80117d0:	e755      	b.n	801167e <__kernel_rem_pio2+0x1ae>
 80117d2:	1acb      	subs	r3, r1, r3
 80117d4:	f8cb 3000 	str.w	r3, [fp]
 80117d8:	462b      	mov	r3, r5
 80117da:	e7f5      	b.n	80117c8 <__kernel_rem_pio2+0x2f8>
 80117dc:	1e62      	subs	r2, r4, #1
 80117de:	ab0c      	add	r3, sp, #48	; 0x30
 80117e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80117e8:	a90c      	add	r1, sp, #48	; 0x30
 80117ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80117ee:	e754      	b.n	801169a <__kernel_rem_pio2+0x1ca>
	...
 80117fc:	3ff00000 	.word	0x3ff00000
 8011800:	08012538 	.word	0x08012538
 8011804:	40200000 	.word	0x40200000
 8011808:	3ff00000 	.word	0x3ff00000
 801180c:	3e700000 	.word	0x3e700000
 8011810:	41700000 	.word	0x41700000
 8011814:	3fe00000 	.word	0x3fe00000
 8011818:	080124f8 	.word	0x080124f8
 801181c:	1e62      	subs	r2, r4, #1
 801181e:	ab0c      	add	r3, sp, #48	; 0x30
 8011820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011824:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011828:	e7de      	b.n	80117e8 <__kernel_rem_pio2+0x318>
 801182a:	a90c      	add	r1, sp, #48	; 0x30
 801182c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011830:	3b01      	subs	r3, #1
 8011832:	430a      	orrs	r2, r1
 8011834:	e790      	b.n	8011758 <__kernel_rem_pio2+0x288>
 8011836:	3301      	adds	r3, #1
 8011838:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801183c:	2900      	cmp	r1, #0
 801183e:	d0fa      	beq.n	8011836 <__kernel_rem_pio2+0x366>
 8011840:	9a08      	ldr	r2, [sp, #32]
 8011842:	18e3      	adds	r3, r4, r3
 8011844:	18a6      	adds	r6, r4, r2
 8011846:	aa20      	add	r2, sp, #128	; 0x80
 8011848:	1c65      	adds	r5, r4, #1
 801184a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801184e:	9302      	str	r3, [sp, #8]
 8011850:	9b02      	ldr	r3, [sp, #8]
 8011852:	42ab      	cmp	r3, r5
 8011854:	da04      	bge.n	8011860 <__kernel_rem_pio2+0x390>
 8011856:	461c      	mov	r4, r3
 8011858:	e6b5      	b.n	80115c6 <__kernel_rem_pio2+0xf6>
 801185a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801185c:	2301      	movs	r3, #1
 801185e:	e7eb      	b.n	8011838 <__kernel_rem_pio2+0x368>
 8011860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011866:	f7ee fe0d 	bl	8000484 <__aeabi_i2d>
 801186a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801186e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011870:	46b3      	mov	fp, r6
 8011872:	461c      	mov	r4, r3
 8011874:	2700      	movs	r7, #0
 8011876:	f04f 0800 	mov.w	r8, #0
 801187a:	f04f 0900 	mov.w	r9, #0
 801187e:	9b06      	ldr	r3, [sp, #24]
 8011880:	429f      	cmp	r7, r3
 8011882:	dd06      	ble.n	8011892 <__kernel_rem_pio2+0x3c2>
 8011884:	ab70      	add	r3, sp, #448	; 0x1c0
 8011886:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801188a:	e9c3 8900 	strd	r8, r9, [r3]
 801188e:	3501      	adds	r5, #1
 8011890:	e7de      	b.n	8011850 <__kernel_rem_pio2+0x380>
 8011892:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011896:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801189a:	f7ee fe5d 	bl	8000558 <__aeabi_dmul>
 801189e:	4602      	mov	r2, r0
 80118a0:	460b      	mov	r3, r1
 80118a2:	4640      	mov	r0, r8
 80118a4:	4649      	mov	r1, r9
 80118a6:	f7ee fca1 	bl	80001ec <__adddf3>
 80118aa:	3701      	adds	r7, #1
 80118ac:	4680      	mov	r8, r0
 80118ae:	4689      	mov	r9, r1
 80118b0:	e7e5      	b.n	801187e <__kernel_rem_pio2+0x3ae>
 80118b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80118b6:	e754      	b.n	8011762 <__kernel_rem_pio2+0x292>
 80118b8:	ec47 6b10 	vmov	d0, r6, r7
 80118bc:	f1ca 0000 	rsb	r0, sl, #0
 80118c0:	f000 fc3a 	bl	8012138 <scalbn>
 80118c4:	ec57 6b10 	vmov	r6, r7, d0
 80118c8:	4b9f      	ldr	r3, [pc, #636]	; (8011b48 <__kernel_rem_pio2+0x678>)
 80118ca:	ee10 0a10 	vmov	r0, s0
 80118ce:	2200      	movs	r2, #0
 80118d0:	4639      	mov	r1, r7
 80118d2:	f7ef f8c7 	bl	8000a64 <__aeabi_dcmpge>
 80118d6:	b300      	cbz	r0, 801191a <__kernel_rem_pio2+0x44a>
 80118d8:	4b9c      	ldr	r3, [pc, #624]	; (8011b4c <__kernel_rem_pio2+0x67c>)
 80118da:	2200      	movs	r2, #0
 80118dc:	4630      	mov	r0, r6
 80118de:	4639      	mov	r1, r7
 80118e0:	f7ee fe3a 	bl	8000558 <__aeabi_dmul>
 80118e4:	f7ef f8e8 	bl	8000ab8 <__aeabi_d2iz>
 80118e8:	4605      	mov	r5, r0
 80118ea:	f7ee fdcb 	bl	8000484 <__aeabi_i2d>
 80118ee:	4b96      	ldr	r3, [pc, #600]	; (8011b48 <__kernel_rem_pio2+0x678>)
 80118f0:	2200      	movs	r2, #0
 80118f2:	f7ee fe31 	bl	8000558 <__aeabi_dmul>
 80118f6:	460b      	mov	r3, r1
 80118f8:	4602      	mov	r2, r0
 80118fa:	4639      	mov	r1, r7
 80118fc:	4630      	mov	r0, r6
 80118fe:	f7ee fc73 	bl	80001e8 <__aeabi_dsub>
 8011902:	f7ef f8d9 	bl	8000ab8 <__aeabi_d2iz>
 8011906:	f104 0b01 	add.w	fp, r4, #1
 801190a:	ab0c      	add	r3, sp, #48	; 0x30
 801190c:	f10a 0a18 	add.w	sl, sl, #24
 8011910:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011914:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8011918:	e72b      	b.n	8011772 <__kernel_rem_pio2+0x2a2>
 801191a:	4630      	mov	r0, r6
 801191c:	4639      	mov	r1, r7
 801191e:	f7ef f8cb 	bl	8000ab8 <__aeabi_d2iz>
 8011922:	ab0c      	add	r3, sp, #48	; 0x30
 8011924:	46a3      	mov	fp, r4
 8011926:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801192a:	e722      	b.n	8011772 <__kernel_rem_pio2+0x2a2>
 801192c:	ab70      	add	r3, sp, #448	; 0x1c0
 801192e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8011932:	ab0c      	add	r3, sp, #48	; 0x30
 8011934:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011938:	f7ee fda4 	bl	8000484 <__aeabi_i2d>
 801193c:	4622      	mov	r2, r4
 801193e:	462b      	mov	r3, r5
 8011940:	f7ee fe0a 	bl	8000558 <__aeabi_dmul>
 8011944:	4632      	mov	r2, r6
 8011946:	e9c9 0100 	strd	r0, r1, [r9]
 801194a:	463b      	mov	r3, r7
 801194c:	4620      	mov	r0, r4
 801194e:	4629      	mov	r1, r5
 8011950:	f7ee fe02 	bl	8000558 <__aeabi_dmul>
 8011954:	f108 38ff 	add.w	r8, r8, #4294967295
 8011958:	4604      	mov	r4, r0
 801195a:	460d      	mov	r5, r1
 801195c:	e713      	b.n	8011786 <__kernel_rem_pio2+0x2b6>
 801195e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011962:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8011966:	f7ee fdf7 	bl	8000558 <__aeabi_dmul>
 801196a:	4602      	mov	r2, r0
 801196c:	460b      	mov	r3, r1
 801196e:	4620      	mov	r0, r4
 8011970:	4629      	mov	r1, r5
 8011972:	f7ee fc3b 	bl	80001ec <__adddf3>
 8011976:	3601      	adds	r6, #1
 8011978:	4604      	mov	r4, r0
 801197a:	460d      	mov	r5, r1
 801197c:	9b04      	ldr	r3, [sp, #16]
 801197e:	429e      	cmp	r6, r3
 8011980:	dc01      	bgt.n	8011986 <__kernel_rem_pio2+0x4b6>
 8011982:	45b0      	cmp	r8, r6
 8011984:	daeb      	bge.n	801195e <__kernel_rem_pio2+0x48e>
 8011986:	ab48      	add	r3, sp, #288	; 0x120
 8011988:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801198c:	e9c3 4500 	strd	r4, r5, [r3]
 8011990:	3f01      	subs	r7, #1
 8011992:	f108 0801 	add.w	r8, r8, #1
 8011996:	e6ff      	b.n	8011798 <__kernel_rem_pio2+0x2c8>
 8011998:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801199a:	2b02      	cmp	r3, #2
 801199c:	dc0b      	bgt.n	80119b6 <__kernel_rem_pio2+0x4e6>
 801199e:	2b00      	cmp	r3, #0
 80119a0:	dc6e      	bgt.n	8011a80 <__kernel_rem_pio2+0x5b0>
 80119a2:	d045      	beq.n	8011a30 <__kernel_rem_pio2+0x560>
 80119a4:	9b07      	ldr	r3, [sp, #28]
 80119a6:	f003 0007 	and.w	r0, r3, #7
 80119aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80119ae:	ecbd 8b02 	vpop	{d8}
 80119b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80119b8:	2b03      	cmp	r3, #3
 80119ba:	d1f3      	bne.n	80119a4 <__kernel_rem_pio2+0x4d4>
 80119bc:	ab48      	add	r3, sp, #288	; 0x120
 80119be:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80119c2:	46d0      	mov	r8, sl
 80119c4:	46d9      	mov	r9, fp
 80119c6:	f1b9 0f00 	cmp.w	r9, #0
 80119ca:	f1a8 0808 	sub.w	r8, r8, #8
 80119ce:	dc64      	bgt.n	8011a9a <__kernel_rem_pio2+0x5ca>
 80119d0:	465c      	mov	r4, fp
 80119d2:	2c01      	cmp	r4, #1
 80119d4:	f1aa 0a08 	sub.w	sl, sl, #8
 80119d8:	dc7e      	bgt.n	8011ad8 <__kernel_rem_pio2+0x608>
 80119da:	2000      	movs	r0, #0
 80119dc:	2100      	movs	r1, #0
 80119de:	f1bb 0f01 	cmp.w	fp, #1
 80119e2:	f300 8097 	bgt.w	8011b14 <__kernel_rem_pio2+0x644>
 80119e6:	9b02      	ldr	r3, [sp, #8]
 80119e8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80119ec:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	f040 8099 	bne.w	8011b28 <__kernel_rem_pio2+0x658>
 80119f6:	9b01      	ldr	r3, [sp, #4]
 80119f8:	e9c3 5600 	strd	r5, r6, [r3]
 80119fc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011a00:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011a04:	e7ce      	b.n	80119a4 <__kernel_rem_pio2+0x4d4>
 8011a06:	ab48      	add	r3, sp, #288	; 0x120
 8011a08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a10:	f7ee fbec 	bl	80001ec <__adddf3>
 8011a14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011a18:	f1bb 0f00 	cmp.w	fp, #0
 8011a1c:	daf3      	bge.n	8011a06 <__kernel_rem_pio2+0x536>
 8011a1e:	9b02      	ldr	r3, [sp, #8]
 8011a20:	b113      	cbz	r3, 8011a28 <__kernel_rem_pio2+0x558>
 8011a22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a26:	4619      	mov	r1, r3
 8011a28:	9b01      	ldr	r3, [sp, #4]
 8011a2a:	e9c3 0100 	strd	r0, r1, [r3]
 8011a2e:	e7b9      	b.n	80119a4 <__kernel_rem_pio2+0x4d4>
 8011a30:	2000      	movs	r0, #0
 8011a32:	2100      	movs	r1, #0
 8011a34:	e7f0      	b.n	8011a18 <__kernel_rem_pio2+0x548>
 8011a36:	ab48      	add	r3, sp, #288	; 0x120
 8011a38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a40:	f7ee fbd4 	bl	80001ec <__adddf3>
 8011a44:	3c01      	subs	r4, #1
 8011a46:	2c00      	cmp	r4, #0
 8011a48:	daf5      	bge.n	8011a36 <__kernel_rem_pio2+0x566>
 8011a4a:	9b02      	ldr	r3, [sp, #8]
 8011a4c:	b1e3      	cbz	r3, 8011a88 <__kernel_rem_pio2+0x5b8>
 8011a4e:	4602      	mov	r2, r0
 8011a50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a54:	9c01      	ldr	r4, [sp, #4]
 8011a56:	e9c4 2300 	strd	r2, r3, [r4]
 8011a5a:	4602      	mov	r2, r0
 8011a5c:	460b      	mov	r3, r1
 8011a5e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011a62:	f7ee fbc1 	bl	80001e8 <__aeabi_dsub>
 8011a66:	ad4a      	add	r5, sp, #296	; 0x128
 8011a68:	2401      	movs	r4, #1
 8011a6a:	45a3      	cmp	fp, r4
 8011a6c:	da0f      	bge.n	8011a8e <__kernel_rem_pio2+0x5be>
 8011a6e:	9b02      	ldr	r3, [sp, #8]
 8011a70:	b113      	cbz	r3, 8011a78 <__kernel_rem_pio2+0x5a8>
 8011a72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a76:	4619      	mov	r1, r3
 8011a78:	9b01      	ldr	r3, [sp, #4]
 8011a7a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011a7e:	e791      	b.n	80119a4 <__kernel_rem_pio2+0x4d4>
 8011a80:	465c      	mov	r4, fp
 8011a82:	2000      	movs	r0, #0
 8011a84:	2100      	movs	r1, #0
 8011a86:	e7de      	b.n	8011a46 <__kernel_rem_pio2+0x576>
 8011a88:	4602      	mov	r2, r0
 8011a8a:	460b      	mov	r3, r1
 8011a8c:	e7e2      	b.n	8011a54 <__kernel_rem_pio2+0x584>
 8011a8e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8011a92:	f7ee fbab 	bl	80001ec <__adddf3>
 8011a96:	3401      	adds	r4, #1
 8011a98:	e7e7      	b.n	8011a6a <__kernel_rem_pio2+0x59a>
 8011a9a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8011a9e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8011aa2:	4620      	mov	r0, r4
 8011aa4:	4632      	mov	r2, r6
 8011aa6:	463b      	mov	r3, r7
 8011aa8:	4629      	mov	r1, r5
 8011aaa:	f7ee fb9f 	bl	80001ec <__adddf3>
 8011aae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	460b      	mov	r3, r1
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	4629      	mov	r1, r5
 8011aba:	f7ee fb95 	bl	80001e8 <__aeabi_dsub>
 8011abe:	4632      	mov	r2, r6
 8011ac0:	463b      	mov	r3, r7
 8011ac2:	f7ee fb93 	bl	80001ec <__adddf3>
 8011ac6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011aca:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8011ace:	ed88 7b00 	vstr	d7, [r8]
 8011ad2:	f109 39ff 	add.w	r9, r9, #4294967295
 8011ad6:	e776      	b.n	80119c6 <__kernel_rem_pio2+0x4f6>
 8011ad8:	e9da 8900 	ldrd	r8, r9, [sl]
 8011adc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011ae0:	4640      	mov	r0, r8
 8011ae2:	4632      	mov	r2, r6
 8011ae4:	463b      	mov	r3, r7
 8011ae6:	4649      	mov	r1, r9
 8011ae8:	f7ee fb80 	bl	80001ec <__adddf3>
 8011aec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011af0:	4602      	mov	r2, r0
 8011af2:	460b      	mov	r3, r1
 8011af4:	4640      	mov	r0, r8
 8011af6:	4649      	mov	r1, r9
 8011af8:	f7ee fb76 	bl	80001e8 <__aeabi_dsub>
 8011afc:	4632      	mov	r2, r6
 8011afe:	463b      	mov	r3, r7
 8011b00:	f7ee fb74 	bl	80001ec <__adddf3>
 8011b04:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011b08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011b0c:	ed8a 7b00 	vstr	d7, [sl]
 8011b10:	3c01      	subs	r4, #1
 8011b12:	e75e      	b.n	80119d2 <__kernel_rem_pio2+0x502>
 8011b14:	ab48      	add	r3, sp, #288	; 0x120
 8011b16:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b1e:	f7ee fb65 	bl	80001ec <__adddf3>
 8011b22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011b26:	e75a      	b.n	80119de <__kernel_rem_pio2+0x50e>
 8011b28:	9b01      	ldr	r3, [sp, #4]
 8011b2a:	9a01      	ldr	r2, [sp, #4]
 8011b2c:	601d      	str	r5, [r3, #0]
 8011b2e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011b32:	605c      	str	r4, [r3, #4]
 8011b34:	609f      	str	r7, [r3, #8]
 8011b36:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011b3a:	60d3      	str	r3, [r2, #12]
 8011b3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011b40:	6110      	str	r0, [r2, #16]
 8011b42:	6153      	str	r3, [r2, #20]
 8011b44:	e72e      	b.n	80119a4 <__kernel_rem_pio2+0x4d4>
 8011b46:	bf00      	nop
 8011b48:	41700000 	.word	0x41700000
 8011b4c:	3e700000 	.word	0x3e700000

08011b50 <__kernel_sin>:
 8011b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b54:	ed2d 8b04 	vpush	{d8-d9}
 8011b58:	eeb0 8a41 	vmov.f32	s16, s2
 8011b5c:	eef0 8a61 	vmov.f32	s17, s3
 8011b60:	ec55 4b10 	vmov	r4, r5, d0
 8011b64:	b083      	sub	sp, #12
 8011b66:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011b6a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011b6e:	9001      	str	r0, [sp, #4]
 8011b70:	da06      	bge.n	8011b80 <__kernel_sin+0x30>
 8011b72:	ee10 0a10 	vmov	r0, s0
 8011b76:	4629      	mov	r1, r5
 8011b78:	f7ee ff9e 	bl	8000ab8 <__aeabi_d2iz>
 8011b7c:	2800      	cmp	r0, #0
 8011b7e:	d051      	beq.n	8011c24 <__kernel_sin+0xd4>
 8011b80:	4622      	mov	r2, r4
 8011b82:	462b      	mov	r3, r5
 8011b84:	4620      	mov	r0, r4
 8011b86:	4629      	mov	r1, r5
 8011b88:	f7ee fce6 	bl	8000558 <__aeabi_dmul>
 8011b8c:	4682      	mov	sl, r0
 8011b8e:	468b      	mov	fp, r1
 8011b90:	4602      	mov	r2, r0
 8011b92:	460b      	mov	r3, r1
 8011b94:	4620      	mov	r0, r4
 8011b96:	4629      	mov	r1, r5
 8011b98:	f7ee fcde 	bl	8000558 <__aeabi_dmul>
 8011b9c:	a341      	add	r3, pc, #260	; (adr r3, 8011ca4 <__kernel_sin+0x154>)
 8011b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba2:	4680      	mov	r8, r0
 8011ba4:	4689      	mov	r9, r1
 8011ba6:	4650      	mov	r0, sl
 8011ba8:	4659      	mov	r1, fp
 8011baa:	f7ee fcd5 	bl	8000558 <__aeabi_dmul>
 8011bae:	a33f      	add	r3, pc, #252	; (adr r3, 8011cac <__kernel_sin+0x15c>)
 8011bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb4:	f7ee fb18 	bl	80001e8 <__aeabi_dsub>
 8011bb8:	4652      	mov	r2, sl
 8011bba:	465b      	mov	r3, fp
 8011bbc:	f7ee fccc 	bl	8000558 <__aeabi_dmul>
 8011bc0:	a33c      	add	r3, pc, #240	; (adr r3, 8011cb4 <__kernel_sin+0x164>)
 8011bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc6:	f7ee fb11 	bl	80001ec <__adddf3>
 8011bca:	4652      	mov	r2, sl
 8011bcc:	465b      	mov	r3, fp
 8011bce:	f7ee fcc3 	bl	8000558 <__aeabi_dmul>
 8011bd2:	a33a      	add	r3, pc, #232	; (adr r3, 8011cbc <__kernel_sin+0x16c>)
 8011bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd8:	f7ee fb06 	bl	80001e8 <__aeabi_dsub>
 8011bdc:	4652      	mov	r2, sl
 8011bde:	465b      	mov	r3, fp
 8011be0:	f7ee fcba 	bl	8000558 <__aeabi_dmul>
 8011be4:	a337      	add	r3, pc, #220	; (adr r3, 8011cc4 <__kernel_sin+0x174>)
 8011be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bea:	f7ee faff 	bl	80001ec <__adddf3>
 8011bee:	9b01      	ldr	r3, [sp, #4]
 8011bf0:	4606      	mov	r6, r0
 8011bf2:	460f      	mov	r7, r1
 8011bf4:	b9eb      	cbnz	r3, 8011c32 <__kernel_sin+0xe2>
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	4650      	mov	r0, sl
 8011bfc:	4659      	mov	r1, fp
 8011bfe:	f7ee fcab 	bl	8000558 <__aeabi_dmul>
 8011c02:	a325      	add	r3, pc, #148	; (adr r3, 8011c98 <__kernel_sin+0x148>)
 8011c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c08:	f7ee faee 	bl	80001e8 <__aeabi_dsub>
 8011c0c:	4642      	mov	r2, r8
 8011c0e:	464b      	mov	r3, r9
 8011c10:	f7ee fca2 	bl	8000558 <__aeabi_dmul>
 8011c14:	4602      	mov	r2, r0
 8011c16:	460b      	mov	r3, r1
 8011c18:	4620      	mov	r0, r4
 8011c1a:	4629      	mov	r1, r5
 8011c1c:	f7ee fae6 	bl	80001ec <__adddf3>
 8011c20:	4604      	mov	r4, r0
 8011c22:	460d      	mov	r5, r1
 8011c24:	ec45 4b10 	vmov	d0, r4, r5
 8011c28:	b003      	add	sp, #12
 8011c2a:	ecbd 8b04 	vpop	{d8-d9}
 8011c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c32:	4b1b      	ldr	r3, [pc, #108]	; (8011ca0 <__kernel_sin+0x150>)
 8011c34:	ec51 0b18 	vmov	r0, r1, d8
 8011c38:	2200      	movs	r2, #0
 8011c3a:	f7ee fc8d 	bl	8000558 <__aeabi_dmul>
 8011c3e:	4632      	mov	r2, r6
 8011c40:	ec41 0b19 	vmov	d9, r0, r1
 8011c44:	463b      	mov	r3, r7
 8011c46:	4640      	mov	r0, r8
 8011c48:	4649      	mov	r1, r9
 8011c4a:	f7ee fc85 	bl	8000558 <__aeabi_dmul>
 8011c4e:	4602      	mov	r2, r0
 8011c50:	460b      	mov	r3, r1
 8011c52:	ec51 0b19 	vmov	r0, r1, d9
 8011c56:	f7ee fac7 	bl	80001e8 <__aeabi_dsub>
 8011c5a:	4652      	mov	r2, sl
 8011c5c:	465b      	mov	r3, fp
 8011c5e:	f7ee fc7b 	bl	8000558 <__aeabi_dmul>
 8011c62:	ec53 2b18 	vmov	r2, r3, d8
 8011c66:	f7ee fabf 	bl	80001e8 <__aeabi_dsub>
 8011c6a:	a30b      	add	r3, pc, #44	; (adr r3, 8011c98 <__kernel_sin+0x148>)
 8011c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c70:	4606      	mov	r6, r0
 8011c72:	460f      	mov	r7, r1
 8011c74:	4640      	mov	r0, r8
 8011c76:	4649      	mov	r1, r9
 8011c78:	f7ee fc6e 	bl	8000558 <__aeabi_dmul>
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	460b      	mov	r3, r1
 8011c80:	4630      	mov	r0, r6
 8011c82:	4639      	mov	r1, r7
 8011c84:	f7ee fab2 	bl	80001ec <__adddf3>
 8011c88:	4602      	mov	r2, r0
 8011c8a:	460b      	mov	r3, r1
 8011c8c:	4620      	mov	r0, r4
 8011c8e:	4629      	mov	r1, r5
 8011c90:	f7ee faaa 	bl	80001e8 <__aeabi_dsub>
 8011c94:	e7c4      	b.n	8011c20 <__kernel_sin+0xd0>
 8011c96:	bf00      	nop
 8011c98:	55555549 	.word	0x55555549
 8011c9c:	3fc55555 	.word	0x3fc55555
 8011ca0:	3fe00000 	.word	0x3fe00000
 8011ca4:	5acfd57c 	.word	0x5acfd57c
 8011ca8:	3de5d93a 	.word	0x3de5d93a
 8011cac:	8a2b9ceb 	.word	0x8a2b9ceb
 8011cb0:	3e5ae5e6 	.word	0x3e5ae5e6
 8011cb4:	57b1fe7d 	.word	0x57b1fe7d
 8011cb8:	3ec71de3 	.word	0x3ec71de3
 8011cbc:	19c161d5 	.word	0x19c161d5
 8011cc0:	3f2a01a0 	.word	0x3f2a01a0
 8011cc4:	1110f8a6 	.word	0x1110f8a6
 8011cc8:	3f811111 	.word	0x3f811111
 8011ccc:	00000000 	.word	0x00000000

08011cd0 <atan>:
 8011cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd4:	ec55 4b10 	vmov	r4, r5, d0
 8011cd8:	4bc3      	ldr	r3, [pc, #780]	; (8011fe8 <atan+0x318>)
 8011cda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011cde:	429e      	cmp	r6, r3
 8011ce0:	46ab      	mov	fp, r5
 8011ce2:	dd18      	ble.n	8011d16 <atan+0x46>
 8011ce4:	4bc1      	ldr	r3, [pc, #772]	; (8011fec <atan+0x31c>)
 8011ce6:	429e      	cmp	r6, r3
 8011ce8:	dc01      	bgt.n	8011cee <atan+0x1e>
 8011cea:	d109      	bne.n	8011d00 <atan+0x30>
 8011cec:	b144      	cbz	r4, 8011d00 <atan+0x30>
 8011cee:	4622      	mov	r2, r4
 8011cf0:	462b      	mov	r3, r5
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	4629      	mov	r1, r5
 8011cf6:	f7ee fa79 	bl	80001ec <__adddf3>
 8011cfa:	4604      	mov	r4, r0
 8011cfc:	460d      	mov	r5, r1
 8011cfe:	e006      	b.n	8011d0e <atan+0x3e>
 8011d00:	f1bb 0f00 	cmp.w	fp, #0
 8011d04:	f300 8131 	bgt.w	8011f6a <atan+0x29a>
 8011d08:	a59b      	add	r5, pc, #620	; (adr r5, 8011f78 <atan+0x2a8>)
 8011d0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011d0e:	ec45 4b10 	vmov	d0, r4, r5
 8011d12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d16:	4bb6      	ldr	r3, [pc, #728]	; (8011ff0 <atan+0x320>)
 8011d18:	429e      	cmp	r6, r3
 8011d1a:	dc14      	bgt.n	8011d46 <atan+0x76>
 8011d1c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011d20:	429e      	cmp	r6, r3
 8011d22:	dc0d      	bgt.n	8011d40 <atan+0x70>
 8011d24:	a396      	add	r3, pc, #600	; (adr r3, 8011f80 <atan+0x2b0>)
 8011d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d2a:	ee10 0a10 	vmov	r0, s0
 8011d2e:	4629      	mov	r1, r5
 8011d30:	f7ee fa5c 	bl	80001ec <__adddf3>
 8011d34:	4baf      	ldr	r3, [pc, #700]	; (8011ff4 <atan+0x324>)
 8011d36:	2200      	movs	r2, #0
 8011d38:	f7ee fe9e 	bl	8000a78 <__aeabi_dcmpgt>
 8011d3c:	2800      	cmp	r0, #0
 8011d3e:	d1e6      	bne.n	8011d0e <atan+0x3e>
 8011d40:	f04f 3aff 	mov.w	sl, #4294967295
 8011d44:	e02b      	b.n	8011d9e <atan+0xce>
 8011d46:	f000 f963 	bl	8012010 <fabs>
 8011d4a:	4bab      	ldr	r3, [pc, #684]	; (8011ff8 <atan+0x328>)
 8011d4c:	429e      	cmp	r6, r3
 8011d4e:	ec55 4b10 	vmov	r4, r5, d0
 8011d52:	f300 80bf 	bgt.w	8011ed4 <atan+0x204>
 8011d56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011d5a:	429e      	cmp	r6, r3
 8011d5c:	f300 80a0 	bgt.w	8011ea0 <atan+0x1d0>
 8011d60:	ee10 2a10 	vmov	r2, s0
 8011d64:	ee10 0a10 	vmov	r0, s0
 8011d68:	462b      	mov	r3, r5
 8011d6a:	4629      	mov	r1, r5
 8011d6c:	f7ee fa3e 	bl	80001ec <__adddf3>
 8011d70:	4ba0      	ldr	r3, [pc, #640]	; (8011ff4 <atan+0x324>)
 8011d72:	2200      	movs	r2, #0
 8011d74:	f7ee fa38 	bl	80001e8 <__aeabi_dsub>
 8011d78:	2200      	movs	r2, #0
 8011d7a:	4606      	mov	r6, r0
 8011d7c:	460f      	mov	r7, r1
 8011d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d82:	4620      	mov	r0, r4
 8011d84:	4629      	mov	r1, r5
 8011d86:	f7ee fa31 	bl	80001ec <__adddf3>
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	460b      	mov	r3, r1
 8011d8e:	4630      	mov	r0, r6
 8011d90:	4639      	mov	r1, r7
 8011d92:	f7ee fd0b 	bl	80007ac <__aeabi_ddiv>
 8011d96:	f04f 0a00 	mov.w	sl, #0
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	460d      	mov	r5, r1
 8011d9e:	4622      	mov	r2, r4
 8011da0:	462b      	mov	r3, r5
 8011da2:	4620      	mov	r0, r4
 8011da4:	4629      	mov	r1, r5
 8011da6:	f7ee fbd7 	bl	8000558 <__aeabi_dmul>
 8011daa:	4602      	mov	r2, r0
 8011dac:	460b      	mov	r3, r1
 8011dae:	4680      	mov	r8, r0
 8011db0:	4689      	mov	r9, r1
 8011db2:	f7ee fbd1 	bl	8000558 <__aeabi_dmul>
 8011db6:	a374      	add	r3, pc, #464	; (adr r3, 8011f88 <atan+0x2b8>)
 8011db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dbc:	4606      	mov	r6, r0
 8011dbe:	460f      	mov	r7, r1
 8011dc0:	f7ee fbca 	bl	8000558 <__aeabi_dmul>
 8011dc4:	a372      	add	r3, pc, #456	; (adr r3, 8011f90 <atan+0x2c0>)
 8011dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dca:	f7ee fa0f 	bl	80001ec <__adddf3>
 8011dce:	4632      	mov	r2, r6
 8011dd0:	463b      	mov	r3, r7
 8011dd2:	f7ee fbc1 	bl	8000558 <__aeabi_dmul>
 8011dd6:	a370      	add	r3, pc, #448	; (adr r3, 8011f98 <atan+0x2c8>)
 8011dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ddc:	f7ee fa06 	bl	80001ec <__adddf3>
 8011de0:	4632      	mov	r2, r6
 8011de2:	463b      	mov	r3, r7
 8011de4:	f7ee fbb8 	bl	8000558 <__aeabi_dmul>
 8011de8:	a36d      	add	r3, pc, #436	; (adr r3, 8011fa0 <atan+0x2d0>)
 8011dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dee:	f7ee f9fd 	bl	80001ec <__adddf3>
 8011df2:	4632      	mov	r2, r6
 8011df4:	463b      	mov	r3, r7
 8011df6:	f7ee fbaf 	bl	8000558 <__aeabi_dmul>
 8011dfa:	a36b      	add	r3, pc, #428	; (adr r3, 8011fa8 <atan+0x2d8>)
 8011dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e00:	f7ee f9f4 	bl	80001ec <__adddf3>
 8011e04:	4632      	mov	r2, r6
 8011e06:	463b      	mov	r3, r7
 8011e08:	f7ee fba6 	bl	8000558 <__aeabi_dmul>
 8011e0c:	a368      	add	r3, pc, #416	; (adr r3, 8011fb0 <atan+0x2e0>)
 8011e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e12:	f7ee f9eb 	bl	80001ec <__adddf3>
 8011e16:	4642      	mov	r2, r8
 8011e18:	464b      	mov	r3, r9
 8011e1a:	f7ee fb9d 	bl	8000558 <__aeabi_dmul>
 8011e1e:	a366      	add	r3, pc, #408	; (adr r3, 8011fb8 <atan+0x2e8>)
 8011e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e24:	4680      	mov	r8, r0
 8011e26:	4689      	mov	r9, r1
 8011e28:	4630      	mov	r0, r6
 8011e2a:	4639      	mov	r1, r7
 8011e2c:	f7ee fb94 	bl	8000558 <__aeabi_dmul>
 8011e30:	a363      	add	r3, pc, #396	; (adr r3, 8011fc0 <atan+0x2f0>)
 8011e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e36:	f7ee f9d7 	bl	80001e8 <__aeabi_dsub>
 8011e3a:	4632      	mov	r2, r6
 8011e3c:	463b      	mov	r3, r7
 8011e3e:	f7ee fb8b 	bl	8000558 <__aeabi_dmul>
 8011e42:	a361      	add	r3, pc, #388	; (adr r3, 8011fc8 <atan+0x2f8>)
 8011e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e48:	f7ee f9ce 	bl	80001e8 <__aeabi_dsub>
 8011e4c:	4632      	mov	r2, r6
 8011e4e:	463b      	mov	r3, r7
 8011e50:	f7ee fb82 	bl	8000558 <__aeabi_dmul>
 8011e54:	a35e      	add	r3, pc, #376	; (adr r3, 8011fd0 <atan+0x300>)
 8011e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e5a:	f7ee f9c5 	bl	80001e8 <__aeabi_dsub>
 8011e5e:	4632      	mov	r2, r6
 8011e60:	463b      	mov	r3, r7
 8011e62:	f7ee fb79 	bl	8000558 <__aeabi_dmul>
 8011e66:	a35c      	add	r3, pc, #368	; (adr r3, 8011fd8 <atan+0x308>)
 8011e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6c:	f7ee f9bc 	bl	80001e8 <__aeabi_dsub>
 8011e70:	4632      	mov	r2, r6
 8011e72:	463b      	mov	r3, r7
 8011e74:	f7ee fb70 	bl	8000558 <__aeabi_dmul>
 8011e78:	4602      	mov	r2, r0
 8011e7a:	460b      	mov	r3, r1
 8011e7c:	4640      	mov	r0, r8
 8011e7e:	4649      	mov	r1, r9
 8011e80:	f7ee f9b4 	bl	80001ec <__adddf3>
 8011e84:	4622      	mov	r2, r4
 8011e86:	462b      	mov	r3, r5
 8011e88:	f7ee fb66 	bl	8000558 <__aeabi_dmul>
 8011e8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011e90:	4602      	mov	r2, r0
 8011e92:	460b      	mov	r3, r1
 8011e94:	d14b      	bne.n	8011f2e <atan+0x25e>
 8011e96:	4620      	mov	r0, r4
 8011e98:	4629      	mov	r1, r5
 8011e9a:	f7ee f9a5 	bl	80001e8 <__aeabi_dsub>
 8011e9e:	e72c      	b.n	8011cfa <atan+0x2a>
 8011ea0:	ee10 0a10 	vmov	r0, s0
 8011ea4:	4b53      	ldr	r3, [pc, #332]	; (8011ff4 <atan+0x324>)
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	4629      	mov	r1, r5
 8011eaa:	f7ee f99d 	bl	80001e8 <__aeabi_dsub>
 8011eae:	4b51      	ldr	r3, [pc, #324]	; (8011ff4 <atan+0x324>)
 8011eb0:	4606      	mov	r6, r0
 8011eb2:	460f      	mov	r7, r1
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	4629      	mov	r1, r5
 8011eba:	f7ee f997 	bl	80001ec <__adddf3>
 8011ebe:	4602      	mov	r2, r0
 8011ec0:	460b      	mov	r3, r1
 8011ec2:	4630      	mov	r0, r6
 8011ec4:	4639      	mov	r1, r7
 8011ec6:	f7ee fc71 	bl	80007ac <__aeabi_ddiv>
 8011eca:	f04f 0a01 	mov.w	sl, #1
 8011ece:	4604      	mov	r4, r0
 8011ed0:	460d      	mov	r5, r1
 8011ed2:	e764      	b.n	8011d9e <atan+0xce>
 8011ed4:	4b49      	ldr	r3, [pc, #292]	; (8011ffc <atan+0x32c>)
 8011ed6:	429e      	cmp	r6, r3
 8011ed8:	da1d      	bge.n	8011f16 <atan+0x246>
 8011eda:	ee10 0a10 	vmov	r0, s0
 8011ede:	4b48      	ldr	r3, [pc, #288]	; (8012000 <atan+0x330>)
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	4629      	mov	r1, r5
 8011ee4:	f7ee f980 	bl	80001e8 <__aeabi_dsub>
 8011ee8:	4b45      	ldr	r3, [pc, #276]	; (8012000 <atan+0x330>)
 8011eea:	4606      	mov	r6, r0
 8011eec:	460f      	mov	r7, r1
 8011eee:	2200      	movs	r2, #0
 8011ef0:	4620      	mov	r0, r4
 8011ef2:	4629      	mov	r1, r5
 8011ef4:	f7ee fb30 	bl	8000558 <__aeabi_dmul>
 8011ef8:	4b3e      	ldr	r3, [pc, #248]	; (8011ff4 <atan+0x324>)
 8011efa:	2200      	movs	r2, #0
 8011efc:	f7ee f976 	bl	80001ec <__adddf3>
 8011f00:	4602      	mov	r2, r0
 8011f02:	460b      	mov	r3, r1
 8011f04:	4630      	mov	r0, r6
 8011f06:	4639      	mov	r1, r7
 8011f08:	f7ee fc50 	bl	80007ac <__aeabi_ddiv>
 8011f0c:	f04f 0a02 	mov.w	sl, #2
 8011f10:	4604      	mov	r4, r0
 8011f12:	460d      	mov	r5, r1
 8011f14:	e743      	b.n	8011d9e <atan+0xce>
 8011f16:	462b      	mov	r3, r5
 8011f18:	ee10 2a10 	vmov	r2, s0
 8011f1c:	4939      	ldr	r1, [pc, #228]	; (8012004 <atan+0x334>)
 8011f1e:	2000      	movs	r0, #0
 8011f20:	f7ee fc44 	bl	80007ac <__aeabi_ddiv>
 8011f24:	f04f 0a03 	mov.w	sl, #3
 8011f28:	4604      	mov	r4, r0
 8011f2a:	460d      	mov	r5, r1
 8011f2c:	e737      	b.n	8011d9e <atan+0xce>
 8011f2e:	4b36      	ldr	r3, [pc, #216]	; (8012008 <atan+0x338>)
 8011f30:	4e36      	ldr	r6, [pc, #216]	; (801200c <atan+0x33c>)
 8011f32:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8011f36:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8011f3a:	e9da 2300 	ldrd	r2, r3, [sl]
 8011f3e:	f7ee f953 	bl	80001e8 <__aeabi_dsub>
 8011f42:	4622      	mov	r2, r4
 8011f44:	462b      	mov	r3, r5
 8011f46:	f7ee f94f 	bl	80001e8 <__aeabi_dsub>
 8011f4a:	4602      	mov	r2, r0
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011f52:	f7ee f949 	bl	80001e8 <__aeabi_dsub>
 8011f56:	f1bb 0f00 	cmp.w	fp, #0
 8011f5a:	4604      	mov	r4, r0
 8011f5c:	460d      	mov	r5, r1
 8011f5e:	f6bf aed6 	bge.w	8011d0e <atan+0x3e>
 8011f62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f66:	461d      	mov	r5, r3
 8011f68:	e6d1      	b.n	8011d0e <atan+0x3e>
 8011f6a:	a51d      	add	r5, pc, #116	; (adr r5, 8011fe0 <atan+0x310>)
 8011f6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011f70:	e6cd      	b.n	8011d0e <atan+0x3e>
 8011f72:	bf00      	nop
 8011f74:	f3af 8000 	nop.w
 8011f78:	54442d18 	.word	0x54442d18
 8011f7c:	bff921fb 	.word	0xbff921fb
 8011f80:	8800759c 	.word	0x8800759c
 8011f84:	7e37e43c 	.word	0x7e37e43c
 8011f88:	e322da11 	.word	0xe322da11
 8011f8c:	3f90ad3a 	.word	0x3f90ad3a
 8011f90:	24760deb 	.word	0x24760deb
 8011f94:	3fa97b4b 	.word	0x3fa97b4b
 8011f98:	a0d03d51 	.word	0xa0d03d51
 8011f9c:	3fb10d66 	.word	0x3fb10d66
 8011fa0:	c54c206e 	.word	0xc54c206e
 8011fa4:	3fb745cd 	.word	0x3fb745cd
 8011fa8:	920083ff 	.word	0x920083ff
 8011fac:	3fc24924 	.word	0x3fc24924
 8011fb0:	5555550d 	.word	0x5555550d
 8011fb4:	3fd55555 	.word	0x3fd55555
 8011fb8:	2c6a6c2f 	.word	0x2c6a6c2f
 8011fbc:	bfa2b444 	.word	0xbfa2b444
 8011fc0:	52defd9a 	.word	0x52defd9a
 8011fc4:	3fadde2d 	.word	0x3fadde2d
 8011fc8:	af749a6d 	.word	0xaf749a6d
 8011fcc:	3fb3b0f2 	.word	0x3fb3b0f2
 8011fd0:	fe231671 	.word	0xfe231671
 8011fd4:	3fbc71c6 	.word	0x3fbc71c6
 8011fd8:	9998ebc4 	.word	0x9998ebc4
 8011fdc:	3fc99999 	.word	0x3fc99999
 8011fe0:	54442d18 	.word	0x54442d18
 8011fe4:	3ff921fb 	.word	0x3ff921fb
 8011fe8:	440fffff 	.word	0x440fffff
 8011fec:	7ff00000 	.word	0x7ff00000
 8011ff0:	3fdbffff 	.word	0x3fdbffff
 8011ff4:	3ff00000 	.word	0x3ff00000
 8011ff8:	3ff2ffff 	.word	0x3ff2ffff
 8011ffc:	40038000 	.word	0x40038000
 8012000:	3ff80000 	.word	0x3ff80000
 8012004:	bff00000 	.word	0xbff00000
 8012008:	08012568 	.word	0x08012568
 801200c:	08012548 	.word	0x08012548

08012010 <fabs>:
 8012010:	ec51 0b10 	vmov	r0, r1, d0
 8012014:	ee10 2a10 	vmov	r2, s0
 8012018:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801201c:	ec43 2b10 	vmov	d0, r2, r3
 8012020:	4770      	bx	lr
 8012022:	0000      	movs	r0, r0
 8012024:	0000      	movs	r0, r0
	...

08012028 <floor>:
 8012028:	ec51 0b10 	vmov	r0, r1, d0
 801202c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012030:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012034:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012038:	2e13      	cmp	r6, #19
 801203a:	ee10 5a10 	vmov	r5, s0
 801203e:	ee10 8a10 	vmov	r8, s0
 8012042:	460c      	mov	r4, r1
 8012044:	dc32      	bgt.n	80120ac <floor+0x84>
 8012046:	2e00      	cmp	r6, #0
 8012048:	da14      	bge.n	8012074 <floor+0x4c>
 801204a:	a333      	add	r3, pc, #204	; (adr r3, 8012118 <floor+0xf0>)
 801204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012050:	f7ee f8cc 	bl	80001ec <__adddf3>
 8012054:	2200      	movs	r2, #0
 8012056:	2300      	movs	r3, #0
 8012058:	f7ee fd0e 	bl	8000a78 <__aeabi_dcmpgt>
 801205c:	b138      	cbz	r0, 801206e <floor+0x46>
 801205e:	2c00      	cmp	r4, #0
 8012060:	da57      	bge.n	8012112 <floor+0xea>
 8012062:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012066:	431d      	orrs	r5, r3
 8012068:	d001      	beq.n	801206e <floor+0x46>
 801206a:	4c2d      	ldr	r4, [pc, #180]	; (8012120 <floor+0xf8>)
 801206c:	2500      	movs	r5, #0
 801206e:	4621      	mov	r1, r4
 8012070:	4628      	mov	r0, r5
 8012072:	e025      	b.n	80120c0 <floor+0x98>
 8012074:	4f2b      	ldr	r7, [pc, #172]	; (8012124 <floor+0xfc>)
 8012076:	4137      	asrs	r7, r6
 8012078:	ea01 0307 	and.w	r3, r1, r7
 801207c:	4303      	orrs	r3, r0
 801207e:	d01f      	beq.n	80120c0 <floor+0x98>
 8012080:	a325      	add	r3, pc, #148	; (adr r3, 8012118 <floor+0xf0>)
 8012082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012086:	f7ee f8b1 	bl	80001ec <__adddf3>
 801208a:	2200      	movs	r2, #0
 801208c:	2300      	movs	r3, #0
 801208e:	f7ee fcf3 	bl	8000a78 <__aeabi_dcmpgt>
 8012092:	2800      	cmp	r0, #0
 8012094:	d0eb      	beq.n	801206e <floor+0x46>
 8012096:	2c00      	cmp	r4, #0
 8012098:	bfbe      	ittt	lt
 801209a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801209e:	fa43 f606 	asrlt.w	r6, r3, r6
 80120a2:	19a4      	addlt	r4, r4, r6
 80120a4:	ea24 0407 	bic.w	r4, r4, r7
 80120a8:	2500      	movs	r5, #0
 80120aa:	e7e0      	b.n	801206e <floor+0x46>
 80120ac:	2e33      	cmp	r6, #51	; 0x33
 80120ae:	dd0b      	ble.n	80120c8 <floor+0xa0>
 80120b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80120b4:	d104      	bne.n	80120c0 <floor+0x98>
 80120b6:	ee10 2a10 	vmov	r2, s0
 80120ba:	460b      	mov	r3, r1
 80120bc:	f7ee f896 	bl	80001ec <__adddf3>
 80120c0:	ec41 0b10 	vmov	d0, r0, r1
 80120c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80120cc:	f04f 33ff 	mov.w	r3, #4294967295
 80120d0:	fa23 f707 	lsr.w	r7, r3, r7
 80120d4:	4207      	tst	r7, r0
 80120d6:	d0f3      	beq.n	80120c0 <floor+0x98>
 80120d8:	a30f      	add	r3, pc, #60	; (adr r3, 8012118 <floor+0xf0>)
 80120da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120de:	f7ee f885 	bl	80001ec <__adddf3>
 80120e2:	2200      	movs	r2, #0
 80120e4:	2300      	movs	r3, #0
 80120e6:	f7ee fcc7 	bl	8000a78 <__aeabi_dcmpgt>
 80120ea:	2800      	cmp	r0, #0
 80120ec:	d0bf      	beq.n	801206e <floor+0x46>
 80120ee:	2c00      	cmp	r4, #0
 80120f0:	da02      	bge.n	80120f8 <floor+0xd0>
 80120f2:	2e14      	cmp	r6, #20
 80120f4:	d103      	bne.n	80120fe <floor+0xd6>
 80120f6:	3401      	adds	r4, #1
 80120f8:	ea25 0507 	bic.w	r5, r5, r7
 80120fc:	e7b7      	b.n	801206e <floor+0x46>
 80120fe:	2301      	movs	r3, #1
 8012100:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012104:	fa03 f606 	lsl.w	r6, r3, r6
 8012108:	4435      	add	r5, r6
 801210a:	4545      	cmp	r5, r8
 801210c:	bf38      	it	cc
 801210e:	18e4      	addcc	r4, r4, r3
 8012110:	e7f2      	b.n	80120f8 <floor+0xd0>
 8012112:	2500      	movs	r5, #0
 8012114:	462c      	mov	r4, r5
 8012116:	e7aa      	b.n	801206e <floor+0x46>
 8012118:	8800759c 	.word	0x8800759c
 801211c:	7e37e43c 	.word	0x7e37e43c
 8012120:	bff00000 	.word	0xbff00000
 8012124:	000fffff 	.word	0x000fffff

08012128 <nan>:
 8012128:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012130 <nan+0x8>
 801212c:	4770      	bx	lr
 801212e:	bf00      	nop
 8012130:	00000000 	.word	0x00000000
 8012134:	7ff80000 	.word	0x7ff80000

08012138 <scalbn>:
 8012138:	b570      	push	{r4, r5, r6, lr}
 801213a:	ec55 4b10 	vmov	r4, r5, d0
 801213e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012142:	4606      	mov	r6, r0
 8012144:	462b      	mov	r3, r5
 8012146:	b99a      	cbnz	r2, 8012170 <scalbn+0x38>
 8012148:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801214c:	4323      	orrs	r3, r4
 801214e:	d036      	beq.n	80121be <scalbn+0x86>
 8012150:	4b39      	ldr	r3, [pc, #228]	; (8012238 <scalbn+0x100>)
 8012152:	4629      	mov	r1, r5
 8012154:	ee10 0a10 	vmov	r0, s0
 8012158:	2200      	movs	r2, #0
 801215a:	f7ee f9fd 	bl	8000558 <__aeabi_dmul>
 801215e:	4b37      	ldr	r3, [pc, #220]	; (801223c <scalbn+0x104>)
 8012160:	429e      	cmp	r6, r3
 8012162:	4604      	mov	r4, r0
 8012164:	460d      	mov	r5, r1
 8012166:	da10      	bge.n	801218a <scalbn+0x52>
 8012168:	a32b      	add	r3, pc, #172	; (adr r3, 8012218 <scalbn+0xe0>)
 801216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216e:	e03a      	b.n	80121e6 <scalbn+0xae>
 8012170:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012174:	428a      	cmp	r2, r1
 8012176:	d10c      	bne.n	8012192 <scalbn+0x5a>
 8012178:	ee10 2a10 	vmov	r2, s0
 801217c:	4620      	mov	r0, r4
 801217e:	4629      	mov	r1, r5
 8012180:	f7ee f834 	bl	80001ec <__adddf3>
 8012184:	4604      	mov	r4, r0
 8012186:	460d      	mov	r5, r1
 8012188:	e019      	b.n	80121be <scalbn+0x86>
 801218a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801218e:	460b      	mov	r3, r1
 8012190:	3a36      	subs	r2, #54	; 0x36
 8012192:	4432      	add	r2, r6
 8012194:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012198:	428a      	cmp	r2, r1
 801219a:	dd08      	ble.n	80121ae <scalbn+0x76>
 801219c:	2d00      	cmp	r5, #0
 801219e:	a120      	add	r1, pc, #128	; (adr r1, 8012220 <scalbn+0xe8>)
 80121a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121a4:	da1c      	bge.n	80121e0 <scalbn+0xa8>
 80121a6:	a120      	add	r1, pc, #128	; (adr r1, 8012228 <scalbn+0xf0>)
 80121a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121ac:	e018      	b.n	80121e0 <scalbn+0xa8>
 80121ae:	2a00      	cmp	r2, #0
 80121b0:	dd08      	ble.n	80121c4 <scalbn+0x8c>
 80121b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80121b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80121ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80121be:	ec45 4b10 	vmov	d0, r4, r5
 80121c2:	bd70      	pop	{r4, r5, r6, pc}
 80121c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80121c8:	da19      	bge.n	80121fe <scalbn+0xc6>
 80121ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80121ce:	429e      	cmp	r6, r3
 80121d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80121d4:	dd0a      	ble.n	80121ec <scalbn+0xb4>
 80121d6:	a112      	add	r1, pc, #72	; (adr r1, 8012220 <scalbn+0xe8>)
 80121d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d1e2      	bne.n	80121a6 <scalbn+0x6e>
 80121e0:	a30f      	add	r3, pc, #60	; (adr r3, 8012220 <scalbn+0xe8>)
 80121e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e6:	f7ee f9b7 	bl	8000558 <__aeabi_dmul>
 80121ea:	e7cb      	b.n	8012184 <scalbn+0x4c>
 80121ec:	a10a      	add	r1, pc, #40	; (adr r1, 8012218 <scalbn+0xe0>)
 80121ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d0b8      	beq.n	8012168 <scalbn+0x30>
 80121f6:	a10e      	add	r1, pc, #56	; (adr r1, 8012230 <scalbn+0xf8>)
 80121f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121fc:	e7b4      	b.n	8012168 <scalbn+0x30>
 80121fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012202:	3236      	adds	r2, #54	; 0x36
 8012204:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012208:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801220c:	4620      	mov	r0, r4
 801220e:	4b0c      	ldr	r3, [pc, #48]	; (8012240 <scalbn+0x108>)
 8012210:	2200      	movs	r2, #0
 8012212:	e7e8      	b.n	80121e6 <scalbn+0xae>
 8012214:	f3af 8000 	nop.w
 8012218:	c2f8f359 	.word	0xc2f8f359
 801221c:	01a56e1f 	.word	0x01a56e1f
 8012220:	8800759c 	.word	0x8800759c
 8012224:	7e37e43c 	.word	0x7e37e43c
 8012228:	8800759c 	.word	0x8800759c
 801222c:	fe37e43c 	.word	0xfe37e43c
 8012230:	c2f8f359 	.word	0xc2f8f359
 8012234:	81a56e1f 	.word	0x81a56e1f
 8012238:	43500000 	.word	0x43500000
 801223c:	ffff3cb0 	.word	0xffff3cb0
 8012240:	3c900000 	.word	0x3c900000

08012244 <_init>:
 8012244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012246:	bf00      	nop
 8012248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801224a:	bc08      	pop	{r3}
 801224c:	469e      	mov	lr, r3
 801224e:	4770      	bx	lr

08012250 <_fini>:
 8012250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012252:	bf00      	nop
 8012254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012256:	bc08      	pop	{r3}
 8012258:	469e      	mov	lr, r3
 801225a:	4770      	bx	lr
