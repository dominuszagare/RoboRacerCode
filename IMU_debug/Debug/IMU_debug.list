
IMU_debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4f4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800d690  0800d690  0001d690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d938  0800d938  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d938  0800d938  0001d938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d940  0800d940  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d940  0800d940  0001d940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d944  0800d944  0001d944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002258  200001f0  0800db38  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002448  0800db38  00022448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f9d  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003915  00000000  00000000  0003a1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0003dad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  0003ebd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a04  00000000  00000000  0003fb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001927d  00000000  00000000  0005957c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cb28  00000000  00000000  000727f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff321  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c1c  00000000  00000000  000ff374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001f0 	.word	0x200001f0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800d674 	.word	0x0800d674

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001f4 	.word	0x200001f4
 80001d4:	0800d674 	.word	0x0800d674

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b96e 	b.w	8000e94 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468c      	mov	ip, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f040 8083 	bne.w	8000ce6 <__udivmoddi4+0x116>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d947      	bls.n	8000c76 <__udivmoddi4+0xa6>
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	b142      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bec:	f1c2 0020 	rsb	r0, r2, #32
 8000bf0:	fa24 f000 	lsr.w	r0, r4, r0
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	4097      	lsls	r7, r2
 8000bf8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbbc f6f8 	udiv	r6, ip, r8
 8000c08:	fa1f fe87 	uxth.w	lr, r7
 8000c0c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c14:	fb06 f10e 	mul.w	r1, r6, lr
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c22:	f080 8119 	bcs.w	8000e58 <__udivmoddi4+0x288>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8116 	bls.w	8000e58 <__udivmoddi4+0x288>
 8000c2c:	3e02      	subs	r6, #2
 8000c2e:	443b      	add	r3, r7
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c38:	fb08 3310 	mls	r3, r8, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c44:	45a6      	cmp	lr, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 8105 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	f240 8102 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	443c      	add	r4, r7
 8000c5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c60:	eba4 040e 	sub.w	r4, r4, lr
 8000c64:	2600      	movs	r6, #0
 8000c66:	b11d      	cbz	r5, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xaa>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	2a00      	cmp	r2, #0
 8000c80:	d150      	bne.n	8000d24 <__udivmoddi4+0x154>
 8000c82:	1bcb      	subs	r3, r1, r7
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	fa1f f887 	uxth.w	r8, r7
 8000c8c:	2601      	movs	r6, #1
 8000c8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9c:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000ca4:	1879      	adds	r1, r7, r1
 8000ca6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0xe2>
 8000cac:	428b      	cmp	r3, r1
 8000cae:	f200 80e9 	bhi.w	8000e84 <__udivmoddi4+0x2b4>
 8000cb2:	4684      	mov	ip, r0
 8000cb4:	1ac9      	subs	r1, r1, r3
 8000cb6:	b2a3      	uxth	r3, r4
 8000cb8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cbc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cc4:	fb08 f800 	mul.w	r8, r8, r0
 8000cc8:	45a0      	cmp	r8, r4
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0x10c>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x10a>
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	f200 80d9 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cda:	4618      	mov	r0, r3
 8000cdc:	eba4 0408 	sub.w	r4, r4, r8
 8000ce0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce4:	e7bf      	b.n	8000c66 <__udivmoddi4+0x96>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0x12e>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	f000 80b1 	beq.w	8000e52 <__udivmoddi4+0x282>
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fab3 f683 	clz	r6, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d14a      	bne.n	8000d9c <__udivmoddi4+0x1cc>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0x140>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 80b8 	bhi.w	8000e80 <__udivmoddi4+0x2b0>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb61 0103 	sbc.w	r1, r1, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	468c      	mov	ip, r1
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0a8      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000d1e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000d24:	f1c2 0320 	rsb	r3, r2, #32
 8000d28:	fa20 f603 	lsr.w	r6, r0, r3
 8000d2c:	4097      	lsls	r7, r2
 8000d2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d32:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d36:	40d9      	lsrs	r1, r3
 8000d38:	4330      	orrs	r0, r6
 8000d3a:	0c03      	lsrs	r3, r0, #16
 8000d3c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4c:	fb06 f108 	mul.w	r1, r6, r8
 8000d50:	4299      	cmp	r1, r3
 8000d52:	fa04 f402 	lsl.w	r4, r4, r2
 8000d56:	d909      	bls.n	8000d6c <__udivmoddi4+0x19c>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d5e:	f080 808d 	bcs.w	8000e7c <__udivmoddi4+0x2ac>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 808a 	bls.w	8000e7c <__udivmoddi4+0x2ac>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	443b      	add	r3, r7
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b281      	uxth	r1, r0
 8000d70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb00 f308 	mul.w	r3, r0, r8
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x1c4>
 8000d84:	1879      	adds	r1, r7, r1
 8000d86:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d8a:	d273      	bcs.n	8000e74 <__udivmoddi4+0x2a4>
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d971      	bls.n	8000e74 <__udivmoddi4+0x2a4>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4439      	add	r1, r7
 8000d94:	1acb      	subs	r3, r1, r3
 8000d96:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d9a:	e778      	b.n	8000c8e <__udivmoddi4+0xbe>
 8000d9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000da0:	fa03 f406 	lsl.w	r4, r3, r6
 8000da4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da8:	431c      	orrs	r4, r3
 8000daa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dae:	fa01 f306 	lsl.w	r3, r1, r6
 8000db2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000db6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dba:	431f      	orrs	r7, r3
 8000dbc:	0c3b      	lsrs	r3, r7, #16
 8000dbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dc2:	fa1f f884 	uxth.w	r8, r4
 8000dc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dce:	fb09 fa08 	mul.w	sl, r9, r8
 8000dd2:	458a      	cmp	sl, r1
 8000dd4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd8:	fa00 f306 	lsl.w	r3, r0, r6
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x220>
 8000dde:	1861      	adds	r1, r4, r1
 8000de0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000de4:	d248      	bcs.n	8000e78 <__udivmoddi4+0x2a8>
 8000de6:	458a      	cmp	sl, r1
 8000de8:	d946      	bls.n	8000e78 <__udivmoddi4+0x2a8>
 8000dea:	f1a9 0902 	sub.w	r9, r9, #2
 8000dee:	4421      	add	r1, r4
 8000df0:	eba1 010a 	sub.w	r1, r1, sl
 8000df4:	b2bf      	uxth	r7, r7
 8000df6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dfa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dfe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e02:	fb00 f808 	mul.w	r8, r0, r8
 8000e06:	45b8      	cmp	r8, r7
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x24a>
 8000e0a:	19e7      	adds	r7, r4, r7
 8000e0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e10:	d22e      	bcs.n	8000e70 <__udivmoddi4+0x2a0>
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d92c      	bls.n	8000e70 <__udivmoddi4+0x2a0>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4427      	add	r7, r4
 8000e1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e1e:	eba7 0708 	sub.w	r7, r7, r8
 8000e22:	fba0 8902 	umull	r8, r9, r0, r2
 8000e26:	454f      	cmp	r7, r9
 8000e28:	46c6      	mov	lr, r8
 8000e2a:	4649      	mov	r1, r9
 8000e2c:	d31a      	bcc.n	8000e64 <__udivmoddi4+0x294>
 8000e2e:	d017      	beq.n	8000e60 <__udivmoddi4+0x290>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x27a>
 8000e32:	ebb3 020e 	subs.w	r2, r3, lr
 8000e36:	eb67 0701 	sbc.w	r7, r7, r1
 8000e3a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e3e:	40f2      	lsrs	r2, r6
 8000e40:	ea4c 0202 	orr.w	r2, ip, r2
 8000e44:	40f7      	lsrs	r7, r6
 8000e46:	e9c5 2700 	strd	r2, r7, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e70b      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e9      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6fd      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e60:	4543      	cmp	r3, r8
 8000e62:	d2e5      	bcs.n	8000e30 <__udivmoddi4+0x260>
 8000e64:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e68:	eb69 0104 	sbc.w	r1, r9, r4
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7df      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e7d2      	b.n	8000e1a <__udivmoddi4+0x24a>
 8000e74:	4660      	mov	r0, ip
 8000e76:	e78d      	b.n	8000d94 <__udivmoddi4+0x1c4>
 8000e78:	4681      	mov	r9, r0
 8000e7a:	e7b9      	b.n	8000df0 <__udivmoddi4+0x220>
 8000e7c:	4666      	mov	r6, ip
 8000e7e:	e775      	b.n	8000d6c <__udivmoddi4+0x19c>
 8000e80:	4630      	mov	r0, r6
 8000e82:	e74a      	b.n	8000d1a <__udivmoddi4+0x14a>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	4439      	add	r1, r7
 8000e8a:	e713      	b.n	8000cb4 <__udivmoddi4+0xe4>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	e724      	b.n	8000cdc <__udivmoddi4+0x10c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0ae      	sub	sp, #184	; 0xb8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8000ea2:	edc7 0a08 	vstr	s1, [r7, #32]
 8000ea6:	ed87 1a07 	vstr	s2, [r7, #28]
 8000eaa:	edc7 1a06 	vstr	s3, [r7, #24]
 8000eae:	ed87 2a05 	vstr	s4, [r7, #20]
 8000eb2:	edc7 2a04 	vstr	s5, [r7, #16]
 8000eb6:	ed87 3a03 	vstr	s6, [r7, #12]
 8000eba:	edc7 3a02 	vstr	s7, [r7, #8]
 8000ebe:	ed87 4a01 	vstr	s8, [r7, #4]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8000ec2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ec6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ece:	d11d      	bne.n	8000f0c <MadgwickAHRSupdate+0x74>
 8000ed0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ed4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000edc:	d116      	bne.n	8000f0c <MadgwickAHRSupdate+0x74>
 8000ede:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ee2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eea:	d10f      	bne.n	8000f0c <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8000eec:	edd7 2a04 	vldr	s5, [r7, #16]
 8000ef0:	ed97 2a05 	vldr	s4, [r7, #20]
 8000ef4:	edd7 1a06 	vldr	s3, [r7, #24]
 8000ef8:	ed97 1a07 	vldr	s2, [r7, #28]
 8000efc:	edd7 0a08 	vldr	s1, [r7, #32]
 8000f00:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000f04:	f000 fede 	bl	8001cc4 <MadgwickAHRSupdateIMU>
		return;
 8000f08:	f000 becc 	b.w	8001ca4 <MadgwickAHRSupdate+0xe0c>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000f0c:	4be6      	ldr	r3, [pc, #920]	; (80012a8 <MadgwickAHRSupdate+0x410>)
 8000f0e:	edd3 7a00 	vldr	s15, [r3]
 8000f12:	eeb1 7a67 	vneg.f32	s14, s15
 8000f16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f1e:	4be3      	ldr	r3, [pc, #908]	; (80012ac <MadgwickAHRSupdate+0x414>)
 8000f20:	edd3 6a00 	vldr	s13, [r3]
 8000f24:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f30:	4bdf      	ldr	r3, [pc, #892]	; (80012b0 <MadgwickAHRSupdate+0x418>)
 8000f32:	edd3 6a00 	vldr	s13, [r3]
 8000f36:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f42:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000f4e:	4bd9      	ldr	r3, [pc, #868]	; (80012b4 <MadgwickAHRSupdate+0x41c>)
 8000f50:	ed93 7a00 	vldr	s14, [r3]
 8000f54:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f5c:	4bd3      	ldr	r3, [pc, #844]	; (80012ac <MadgwickAHRSupdate+0x414>)
 8000f5e:	edd3 6a00 	vldr	s13, [r3]
 8000f62:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f6e:	4bd0      	ldr	r3, [pc, #832]	; (80012b0 <MadgwickAHRSupdate+0x418>)
 8000f70:	edd3 6a00 	vldr	s13, [r3]
 8000f74:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f88:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8000f8c:	4bc9      	ldr	r3, [pc, #804]	; (80012b4 <MadgwickAHRSupdate+0x41c>)
 8000f8e:	ed93 7a00 	vldr	s14, [r3]
 8000f92:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f9a:	4bc3      	ldr	r3, [pc, #780]	; (80012a8 <MadgwickAHRSupdate+0x410>)
 8000f9c:	edd3 6a00 	vldr	s13, [r3]
 8000fa0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fac:	4bc0      	ldr	r3, [pc, #768]	; (80012b0 <MadgwickAHRSupdate+0x418>)
 8000fae:	edd3 6a00 	vldr	s13, [r3]
 8000fb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fbe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8000fca:	4bba      	ldr	r3, [pc, #744]	; (80012b4 <MadgwickAHRSupdate+0x41c>)
 8000fcc:	ed93 7a00 	vldr	s14, [r3]
 8000fd0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fd8:	4bb3      	ldr	r3, [pc, #716]	; (80012a8 <MadgwickAHRSupdate+0x410>)
 8000fda:	edd3 6a00 	vldr	s13, [r3]
 8000fde:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fea:	4bb0      	ldr	r3, [pc, #704]	; (80012ac <MadgwickAHRSupdate+0x414>)
 8000fec:	edd3 6a00 	vldr	s13, [r3]
 8000ff0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ffc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001000:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001004:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001008:	edd7 7a06 	vldr	s15, [r7, #24]
 800100c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001014:	d10e      	bne.n	8001034 <MadgwickAHRSupdate+0x19c>
 8001016:	edd7 7a05 	vldr	s15, [r7, #20]
 800101a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001022:	d107      	bne.n	8001034 <MadgwickAHRSupdate+0x19c>
 8001024:	edd7 7a04 	vldr	s15, [r7, #16]
 8001028:	eef5 7a40 	vcmp.f32	s15, #0.0
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	f000 85ac 	beq.w	8001b8c <MadgwickAHRSupdate+0xcf4>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001034:	edd7 7a06 	vldr	s15, [r7, #24]
 8001038:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800103c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001040:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001048:	edd7 7a04 	vldr	s15, [r7, #16]
 800104c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001054:	eeb0 0a67 	vmov.f32	s0, s15
 8001058:	f001 f958 	bl	800230c <invSqrt>
 800105c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 8001060:	ed97 7a06 	vldr	s14, [r7, #24]
 8001064:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106c:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8001070:	ed97 7a05 	vldr	s14, [r7, #20]
 8001074:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107c:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001080:	ed97 7a04 	vldr	s14, [r7, #16]
 8001084:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108c:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001090:	edd7 7a03 	vldr	s15, [r7, #12]
 8001094:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001098:	edd7 7a02 	vldr	s15, [r7, #8]
 800109c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b0:	eeb0 0a67 	vmov.f32	s0, s15
 80010b4:	f001 f92a 	bl	800230c <invSqrt>
 80010b8:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 80010bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80010c0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c8:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 80010cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80010d0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d8:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 80010dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80010e0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e8:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 80010ec:	4b71      	ldr	r3, [pc, #452]	; (80012b4 <MadgwickAHRSupdate+0x41c>)
 80010ee:	edd3 7a00 	vldr	s15, [r3]
 80010f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80010fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fe:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 8001102:	4b6c      	ldr	r3, [pc, #432]	; (80012b4 <MadgwickAHRSupdate+0x41c>)
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800110c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001114:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001118:	4b66      	ldr	r3, [pc, #408]	; (80012b4 <MadgwickAHRSupdate+0x41c>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001122:	ed97 7a01 	vldr	s14, [r7, #4]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 800112e:	4b5e      	ldr	r3, [pc, #376]	; (80012a8 <MadgwickAHRSupdate+0x410>)
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001138:	ed97 7a03 	vldr	s14, [r7, #12]
 800113c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001140:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 8001144:	4b5b      	ldr	r3, [pc, #364]	; (80012b4 <MadgwickAHRSupdate+0x41c>)
 8001146:	edd3 7a00 	vldr	s15, [r3]
 800114a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800114e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 8001152:	4b55      	ldr	r3, [pc, #340]	; (80012a8 <MadgwickAHRSupdate+0x410>)
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800115c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 8001160:	4b52      	ldr	r3, [pc, #328]	; (80012ac <MadgwickAHRSupdate+0x414>)
 8001162:	edd3 7a00 	vldr	s15, [r3]
 8001166:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800116a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 800116e:	4b50      	ldr	r3, [pc, #320]	; (80012b0 <MadgwickAHRSupdate+0x418>)
 8001170:	edd3 7a00 	vldr	s15, [r3]
 8001174:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001178:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 800117c:	4b4d      	ldr	r3, [pc, #308]	; (80012b4 <MadgwickAHRSupdate+0x41c>)
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001186:	4b49      	ldr	r3, [pc, #292]	; (80012ac <MadgwickAHRSupdate+0x414>)
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001190:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 8001194:	4b45      	ldr	r3, [pc, #276]	; (80012ac <MadgwickAHRSupdate+0x414>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800119e:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <MadgwickAHRSupdate+0x418>)
 80011a0:	edd3 7a00 	vldr	s15, [r3]
 80011a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 80011ac:	4b41      	ldr	r3, [pc, #260]	; (80012b4 <MadgwickAHRSupdate+0x41c>)
 80011ae:	ed93 7a00 	vldr	s14, [r3]
 80011b2:	4b40      	ldr	r3, [pc, #256]	; (80012b4 <MadgwickAHRSupdate+0x41c>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011bc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 80011c0:	4b3c      	ldr	r3, [pc, #240]	; (80012b4 <MadgwickAHRSupdate+0x41c>)
 80011c2:	ed93 7a00 	vldr	s14, [r3]
 80011c6:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <MadgwickAHRSupdate+0x410>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 80011d4:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <MadgwickAHRSupdate+0x41c>)
 80011d6:	ed93 7a00 	vldr	s14, [r3]
 80011da:	4b34      	ldr	r3, [pc, #208]	; (80012ac <MadgwickAHRSupdate+0x414>)
 80011dc:	edd3 7a00 	vldr	s15, [r3]
 80011e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <MadgwickAHRSupdate+0x41c>)
 80011ea:	ed93 7a00 	vldr	s14, [r3]
 80011ee:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <MadgwickAHRSupdate+0x418>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 80011fc:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <MadgwickAHRSupdate+0x410>)
 80011fe:	ed93 7a00 	vldr	s14, [r3]
 8001202:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <MadgwickAHRSupdate+0x410>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001210:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <MadgwickAHRSupdate+0x410>)
 8001212:	ed93 7a00 	vldr	s14, [r3]
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <MadgwickAHRSupdate+0x414>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001220:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8001224:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MadgwickAHRSupdate+0x410>)
 8001226:	ed93 7a00 	vldr	s14, [r3]
 800122a:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <MadgwickAHRSupdate+0x418>)
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001234:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MadgwickAHRSupdate+0x414>)
 800123a:	ed93 7a00 	vldr	s14, [r3]
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MadgwickAHRSupdate+0x414>)
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001248:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MadgwickAHRSupdate+0x414>)
 800124e:	ed93 7a00 	vldr	s14, [r3]
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MadgwickAHRSupdate+0x418>)
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MadgwickAHRSupdate+0x418>)
 8001262:	ed93 7a00 	vldr	s14, [r3]
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MadgwickAHRSupdate+0x418>)
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001270:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001274:	ed97 7a03 	vldr	s14, [r7, #12]
 8001278:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800127c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <MadgwickAHRSupdate+0x418>)
 8001282:	edd3 6a00 	vldr	s13, [r3]
 8001286:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800128a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MadgwickAHRSupdate+0x414>)
 8001294:	edd3 6a00 	vldr	s13, [r3]
 8001298:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800129c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a4:	e008      	b.n	80012b8 <MadgwickAHRSupdate+0x420>
 80012a6:	bf00      	nop
 80012a8:	2000020c 	.word	0x2000020c
 80012ac:	20000210 	.word	0x20000210
 80012b0:	20000214 	.word	0x20000214
 80012b4:	20000004 	.word	0x20000004
 80012b8:	edd7 6a03 	vldr	s13, [r7, #12]
 80012bc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80012c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012c8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80012cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80012d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012d4:	4bf5      	ldr	r3, [pc, #980]	; (80016ac <MadgwickAHRSupdate+0x814>)
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e2:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80012e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012ee:	4bf0      	ldr	r3, [pc, #960]	; (80016b0 <MadgwickAHRSupdate+0x818>)
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012fc:	edd7 6a03 	vldr	s13, [r7, #12]
 8001300:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001308:	ee37 7a67 	vsub.f32	s14, s14, s15
 800130c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001310:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001320:	4be3      	ldr	r3, [pc, #908]	; (80016b0 <MadgwickAHRSupdate+0x818>)
 8001322:	ed93 7a00 	vldr	s14, [r3]
 8001326:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800132a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800132e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001332:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800133a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800133e:	4bdd      	ldr	r3, [pc, #884]	; (80016b4 <MadgwickAHRSupdate+0x81c>)
 8001340:	edd3 6a00 	vldr	s13, [r3]
 8001344:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800134c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001350:	4bd6      	ldr	r3, [pc, #856]	; (80016ac <MadgwickAHRSupdate+0x814>)
 8001352:	edd3 6a00 	vldr	s13, [r3]
 8001356:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800135a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001362:	edd7 6a02 	vldr	s13, [r7, #8]
 8001366:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800136a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001372:	edd7 6a02 	vldr	s13, [r7, #8]
 8001376:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800137a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001382:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001386:	edd7 7a01 	vldr	s15, [r7, #4]
 800138a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800138e:	4bc8      	ldr	r3, [pc, #800]	; (80016b0 <MadgwickAHRSupdate+0x818>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001398:	ee37 7a27 	vadd.f32	s14, s14, s15
 800139c:	edd7 6a02 	vldr	s13, [r7, #8]
 80013a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ac:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 80013b0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80013b4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013b8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80013bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c4:	ee17 0a90 	vmov	r0, s15
 80013c8:	f7ff f86a 	bl	80004a0 <__aeabi_f2d>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	ec43 2b10 	vmov	d0, r2, r3
 80013d4:	f00a fbf8 	bl	800bbc8 <sqrt>
 80013d8:	ec53 2b10 	vmov	r2, r3, d0
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fb8e 	bl	8000b00 <__aeabi_d2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80013e8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80013ec:	eeb1 7a67 	vneg.f32	s14, s15
 80013f0:	4bae      	ldr	r3, [pc, #696]	; (80016ac <MadgwickAHRSupdate+0x814>)
 80013f2:	edd3 7a00 	vldr	s15, [r3]
 80013f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fa:	4bae      	ldr	r3, [pc, #696]	; (80016b4 <MadgwickAHRSupdate+0x81c>)
 80013fc:	edd3 6a00 	vldr	s13, [r3]
 8001400:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001408:	ee37 7a27 	vadd.f32	s14, s14, s15
 800140c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001410:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001418:	ee37 7a27 	vadd.f32	s14, s14, s15
 800141c:	4ba4      	ldr	r3, [pc, #656]	; (80016b0 <MadgwickAHRSupdate+0x818>)
 800141e:	edd3 6a00 	vldr	s13, [r3]
 8001422:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800142e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001432:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800143e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001442:	edd7 7a02 	vldr	s15, [r7, #8]
 8001446:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800144a:	4b99      	ldr	r3, [pc, #612]	; (80016b0 <MadgwickAHRSupdate+0x818>)
 800144c:	edd3 7a00 	vldr	s15, [r3]
 8001450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001458:	edd7 6a01 	vldr	s13, [r7, #4]
 800145c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001464:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001468:	edd7 6a01 	vldr	s13, [r7, #4]
 800146c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001478:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 800147c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001480:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001484:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 8001488:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800148c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001490:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001494:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001498:	eeb1 7a67 	vneg.f32	s14, s15
 800149c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80014a0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80014a4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80014a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80014bc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80014c0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80014c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80014c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80014cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014d0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80014d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014dc:	4b73      	ldr	r3, [pc, #460]	; (80016ac <MadgwickAHRSupdate+0x814>)
 80014de:	edd3 6a00 	vldr	s13, [r3]
 80014e2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014ea:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80014ee:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80014f2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80014f6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80014fa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80014fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001502:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001506:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800150a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800150e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001512:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001516:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800151a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800151e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001522:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800152e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001532:	eef1 6a67 	vneg.f32	s13, s15
 8001536:	4b5e      	ldr	r3, [pc, #376]	; (80016b0 <MadgwickAHRSupdate+0x818>)
 8001538:	edd3 7a00 	vldr	s15, [r3]
 800153c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001540:	4b5c      	ldr	r3, [pc, #368]	; (80016b4 <MadgwickAHRSupdate+0x81c>)
 8001542:	ed93 6a00 	vldr	s12, [r3]
 8001546:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800154a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800154e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001552:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001556:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800155a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800155e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001562:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001566:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800156a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800156e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001572:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001576:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800157a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800157e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001582:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800158e:	4b47      	ldr	r3, [pc, #284]	; (80016ac <MadgwickAHRSupdate+0x814>)
 8001590:	edd3 6a00 	vldr	s13, [r3]
 8001594:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001598:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800159c:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80015a0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80015a4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80015a8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015b0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80015b4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80015b8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80015bc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80015c0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80015c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80015c8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80015cc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80015d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80015d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80015e4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80015e8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015ec:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80015f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015fc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001604:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001608:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800160c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001610:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001614:	edd7 7a05 	vldr	s15, [r7, #20]
 8001618:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800161c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001624:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <MadgwickAHRSupdate+0x81c>)
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001632:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001636:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800163a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800163e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001642:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001646:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800164a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800164e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001652:	edd7 7a04 	vldr	s15, [r7, #16]
 8001656:	ee76 7a67 	vsub.f32	s15, s12, s15
 800165a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800165e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MadgwickAHRSupdate+0x818>)
 8001664:	edd3 6a00 	vldr	s13, [r3]
 8001668:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800166c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001670:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001674:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001678:	ee36 6a67 	vsub.f32	s12, s12, s15
 800167c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001680:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001684:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001688:	ee26 6a27 	vmul.f32	s12, s12, s15
 800168c:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001690:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001694:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001698:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800169c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80016a0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80016a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016a8:	e006      	b.n	80016b8 <MadgwickAHRSupdate+0x820>
 80016aa:	bf00      	nop
 80016ac:	20000210 	.word	0x20000210
 80016b0:	20000214 	.word	0x20000214
 80016b4:	2000020c 	.word	0x2000020c
 80016b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80016bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c4:	4bf6      	ldr	r3, [pc, #984]	; (8001aa0 <MadgwickAHRSupdate+0xc08>)
 80016c6:	edd3 6a00 	vldr	s13, [r3]
 80016ca:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016d2:	4bf4      	ldr	r3, [pc, #976]	; (8001aa4 <MadgwickAHRSupdate+0xc0c>)
 80016d4:	ed93 6a00 	vldr	s12, [r3]
 80016d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016e4:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80016e8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80016ec:	ee36 6a67 	vsub.f32	s12, s12, s15
 80016f0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016f8:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80016fc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001700:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001704:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001708:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800170c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001710:	edd7 7a02 	vldr	s15, [r7, #8]
 8001714:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001720:	4be1      	ldr	r3, [pc, #900]	; (8001aa8 <MadgwickAHRSupdate+0xc10>)
 8001722:	edd3 6a00 	vldr	s13, [r3]
 8001726:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800172a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800172e:	4bdf      	ldr	r3, [pc, #892]	; (8001aac <MadgwickAHRSupdate+0xc14>)
 8001730:	ed93 6a00 	vldr	s12, [r3]
 8001734:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001738:	ee66 7a27 	vmul.f32	s15, s12, s15
 800173c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001740:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001744:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001748:	ee36 6a27 	vadd.f32	s12, s12, s15
 800174c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001750:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001754:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001758:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800175c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001760:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001764:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001768:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800176c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001770:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001774:	edd7 7a01 	vldr	s15, [r7, #4]
 8001778:	ee76 7a67 	vsub.f32	s15, s12, s15
 800177c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001784:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001788:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800178c:	eeb1 7a67 	vneg.f32	s14, s15
 8001790:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001794:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001798:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800179c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ac:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80017b0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80017b4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80017b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017c4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80017c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d0:	4bb3      	ldr	r3, [pc, #716]	; (8001aa0 <MadgwickAHRSupdate+0xc08>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80017da:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80017de:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80017ea:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017ee:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017f6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80017fe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001806:	ee37 7a67 	vsub.f32	s14, s14, s15
 800180a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800180e:	eef1 6a67 	vneg.f32	s13, s15
 8001812:	4ba3      	ldr	r3, [pc, #652]	; (8001aa0 <MadgwickAHRSupdate+0xc08>)
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800181c:	4ba1      	ldr	r3, [pc, #644]	; (8001aa4 <MadgwickAHRSupdate+0xc0c>)
 800181e:	ed93 6a00 	vldr	s12, [r3]
 8001822:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001826:	ee66 7a27 	vmul.f32	s15, s12, s15
 800182a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800182e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001832:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001836:	ee36 6a67 	vsub.f32	s12, s12, s15
 800183a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800183e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001842:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001846:	ee26 6a27 	vmul.f32	s12, s12, s15
 800184a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800184e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001852:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001856:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800185a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800185e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001862:	edd7 7a03 	vldr	s15, [r7, #12]
 8001866:	ee76 7a67 	vsub.f32	s15, s12, s15
 800186a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800186e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001872:	4b8e      	ldr	r3, [pc, #568]	; (8001aac <MadgwickAHRSupdate+0xc14>)
 8001874:	edd3 6a00 	vldr	s13, [r3]
 8001878:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800187c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001880:	4b89      	ldr	r3, [pc, #548]	; (8001aa8 <MadgwickAHRSupdate+0xc10>)
 8001882:	ed93 6a00 	vldr	s12, [r3]
 8001886:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800188a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800188e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001892:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001896:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800189a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800189e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018a2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018a6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80018aa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80018ae:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80018b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018b6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018ba:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018be:	edd7 7a02 	vldr	s15, [r7, #8]
 80018c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ce:	4b75      	ldr	r3, [pc, #468]	; (8001aa4 <MadgwickAHRSupdate+0xc0c>)
 80018d0:	edd3 6a00 	vldr	s13, [r3]
 80018d4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018dc:	4b70      	ldr	r3, [pc, #448]	; (8001aa0 <MadgwickAHRSupdate+0xc08>)
 80018de:	ed93 6a00 	vldr	s12, [r3]
 80018e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80018e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018ea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018ee:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80018f2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018f6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018fa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018fe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001902:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001906:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800190a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800190e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001912:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001916:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800191a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800191e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001922:	edd7 7a01 	vldr	s15, [r7, #4]
 8001926:	ee76 7a67 	vsub.f32	s15, s12, s15
 800192a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800192e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001932:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001936:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800193a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800193e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001942:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001946:	edd7 7a06 	vldr	s15, [r7, #24]
 800194a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800194e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001956:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800195a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800195e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001962:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001966:	edd7 7a05 	vldr	s15, [r7, #20]
 800196a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800196e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001976:	ee37 7a27 	vadd.f32	s14, s14, s15
 800197a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800197e:	eef1 6a67 	vneg.f32	s13, s15
 8001982:	4b49      	ldr	r3, [pc, #292]	; (8001aa8 <MadgwickAHRSupdate+0xc10>)
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800198c:	4b47      	ldr	r3, [pc, #284]	; (8001aac <MadgwickAHRSupdate+0xc14>)
 800198e:	ed93 6a00 	vldr	s12, [r3]
 8001992:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001996:	ee66 7a27 	vmul.f32	s15, s12, s15
 800199a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800199e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80019a2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019a6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019aa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80019ae:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019b2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019b6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019ba:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80019be:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80019c2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019ca:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019ce:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019e6:	eef1 6a67 	vneg.f32	s13, s15
 80019ea:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <MadgwickAHRSupdate+0xc0c>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019f4:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <MadgwickAHRSupdate+0xc08>)
 80019f6:	ed93 6a00 	vldr	s12, [r3]
 80019fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a02:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a06:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001a0a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001a0e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a12:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a16:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a1a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001a1e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001a22:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001a26:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a2a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a2e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a32:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a36:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MadgwickAHRSupdate+0xc14>)
 8001a44:	edd3 6a00 	vldr	s13, [r3]
 8001a48:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a4c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a50:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001a54:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a58:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a5c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a60:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a64:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001a68:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a6c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a70:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a74:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a78:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a7c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a80:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a84:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a88:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001a98:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a9c:	e008      	b.n	8001ab0 <MadgwickAHRSupdate+0xc18>
 8001a9e:	bf00      	nop
 8001aa0:	20000210 	.word	0x20000210
 8001aa4:	20000004 	.word	0x20000004
 8001aa8:	20000214 	.word	0x20000214
 8001aac:	2000020c 	.word	0x2000020c
 8001ab0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001ab4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ab8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001abc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ac4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001acc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ad0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8001adc:	f000 fc16 	bl	800230c <invSqrt>
 8001ae0:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001ae4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001ae8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001af4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001af8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b00:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001b04:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001b08:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b10:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001b14:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001b18:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b20:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001b24:	4b61      	ldr	r3, [pc, #388]	; (8001cac <MadgwickAHRSupdate+0xe14>)
 8001b26:	ed93 7a00 	vldr	s14, [r3]
 8001b2a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b32:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001b3e:	4b5b      	ldr	r3, [pc, #364]	; (8001cac <MadgwickAHRSupdate+0xe14>)
 8001b40:	ed93 7a00 	vldr	s14, [r3]
 8001b44:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b54:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001b58:	4b54      	ldr	r3, [pc, #336]	; (8001cac <MadgwickAHRSupdate+0xe14>)
 8001b5a:	ed93 7a00 	vldr	s14, [r3]
 8001b5e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b66:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b6e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001b72:	4b4e      	ldr	r3, [pc, #312]	; (8001cac <MadgwickAHRSupdate+0xe14>)
 8001b74:	ed93 7a00 	vldr	s14, [r3]
 8001b78:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b80:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b88:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001b8c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001b90:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001cb0 <MadgwickAHRSupdate+0xe18>
 8001b94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b98:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <MadgwickAHRSupdate+0xe1c>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba2:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <MadgwickAHRSupdate+0xe1c>)
 8001ba4:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001ba8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001bac:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001cb0 <MadgwickAHRSupdate+0xe18>
 8001bb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bb4:	4b40      	ldr	r3, [pc, #256]	; (8001cb8 <MadgwickAHRSupdate+0xe20>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbe:	4b3e      	ldr	r3, [pc, #248]	; (8001cb8 <MadgwickAHRSupdate+0xe20>)
 8001bc0:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001bc4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001bc8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001cb0 <MadgwickAHRSupdate+0xe18>
 8001bcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bd0:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <MadgwickAHRSupdate+0xe24>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bda:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <MadgwickAHRSupdate+0xe24>)
 8001bdc:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001be0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001be4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001cb0 <MadgwickAHRSupdate+0xe18>
 8001be8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bec:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <MadgwickAHRSupdate+0xe28>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf6:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <MadgwickAHRSupdate+0xe28>)
 8001bf8:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <MadgwickAHRSupdate+0xe1c>)
 8001bfe:	ed93 7a00 	vldr	s14, [r3]
 8001c02:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <MadgwickAHRSupdate+0xe1c>)
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <MadgwickAHRSupdate+0xe20>)
 8001c0e:	edd3 6a00 	vldr	s13, [r3]
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <MadgwickAHRSupdate+0xe20>)
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c20:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <MadgwickAHRSupdate+0xe24>)
 8001c22:	edd3 6a00 	vldr	s13, [r3]
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <MadgwickAHRSupdate+0xe24>)
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <MadgwickAHRSupdate+0xe28>)
 8001c36:	edd3 6a00 	vldr	s13, [r3]
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <MadgwickAHRSupdate+0xe28>)
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c48:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4c:	f000 fb5e 	bl	800230c <invSqrt>
 8001c50:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8001c54:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MadgwickAHRSupdate+0xe1c>)
 8001c56:	ed93 7a00 	vldr	s14, [r3]
 8001c5a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MadgwickAHRSupdate+0xe1c>)
 8001c64:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <MadgwickAHRSupdate+0xe20>)
 8001c6a:	ed93 7a00 	vldr	s14, [r3]
 8001c6e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <MadgwickAHRSupdate+0xe20>)
 8001c78:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MadgwickAHRSupdate+0xe24>)
 8001c7e:	ed93 7a00 	vldr	s14, [r3]
 8001c82:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MadgwickAHRSupdate+0xe24>)
 8001c8c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <MadgwickAHRSupdate+0xe28>)
 8001c92:	ed93 7a00 	vldr	s14, [r3]
 8001c96:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9e:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <MadgwickAHRSupdate+0xe28>)
 8001ca0:	edc3 7a00 	vstr	s15, [r3]
}
 8001ca4:	37b8      	adds	r7, #184	; 0xb8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	3ba3d70a 	.word	0x3ba3d70a
 8001cb4:	20000004 	.word	0x20000004
 8001cb8:	2000020c 	.word	0x2000020c
 8001cbc:	20000210 	.word	0x20000210
 8001cc0:	20000214 	.word	0x20000214

08001cc4 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b09c      	sub	sp, #112	; 0x70
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	ed87 0a05 	vstr	s0, [r7, #20]
 8001cce:	edc7 0a04 	vstr	s1, [r7, #16]
 8001cd2:	ed87 1a03 	vstr	s2, [r7, #12]
 8001cd6:	edc7 1a02 	vstr	s3, [r7, #8]
 8001cda:	ed87 2a01 	vstr	s4, [r7, #4]
 8001cde:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001ce2:	4bee      	ldr	r3, [pc, #952]	; (800209c <MadgwickAHRSupdateIMU+0x3d8>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	eeb1 7a67 	vneg.f32	s14, s15
 8001cec:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf4:	4bea      	ldr	r3, [pc, #936]	; (80020a0 <MadgwickAHRSupdateIMU+0x3dc>)
 8001cf6:	edd3 6a00 	vldr	s13, [r3]
 8001cfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d06:	4be7      	ldr	r3, [pc, #924]	; (80020a4 <MadgwickAHRSupdateIMU+0x3e0>)
 8001d08:	edd3 6a00 	vldr	s13, [r3]
 8001d0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d20:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001d24:	4be0      	ldr	r3, [pc, #896]	; (80020a8 <MadgwickAHRSupdateIMU+0x3e4>)
 8001d26:	ed93 7a00 	vldr	s14, [r3]
 8001d2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d32:	4bdb      	ldr	r3, [pc, #876]	; (80020a0 <MadgwickAHRSupdateIMU+0x3dc>)
 8001d34:	edd3 6a00 	vldr	s13, [r3]
 8001d38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d44:	4bd7      	ldr	r3, [pc, #860]	; (80020a4 <MadgwickAHRSupdateIMU+0x3e0>)
 8001d46:	edd3 6a00 	vldr	s13, [r3]
 8001d4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d5e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001d62:	4bd1      	ldr	r3, [pc, #836]	; (80020a8 <MadgwickAHRSupdateIMU+0x3e4>)
 8001d64:	ed93 7a00 	vldr	s14, [r3]
 8001d68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d70:	4bca      	ldr	r3, [pc, #808]	; (800209c <MadgwickAHRSupdateIMU+0x3d8>)
 8001d72:	edd3 6a00 	vldr	s13, [r3]
 8001d76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d82:	4bc8      	ldr	r3, [pc, #800]	; (80020a4 <MadgwickAHRSupdateIMU+0x3e0>)
 8001d84:	edd3 6a00 	vldr	s13, [r3]
 8001d88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d9c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001da0:	4bc1      	ldr	r3, [pc, #772]	; (80020a8 <MadgwickAHRSupdateIMU+0x3e4>)
 8001da2:	ed93 7a00 	vldr	s14, [r3]
 8001da6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001daa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dae:	4bbb      	ldr	r3, [pc, #748]	; (800209c <MadgwickAHRSupdateIMU+0x3d8>)
 8001db0:	edd3 6a00 	vldr	s13, [r3]
 8001db4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001db8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc0:	4bb7      	ldr	r3, [pc, #732]	; (80020a0 <MadgwickAHRSupdateIMU+0x3dc>)
 8001dc2:	edd3 6a00 	vldr	s13, [r3]
 8001dc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dda:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001dde:	edd7 7a02 	vldr	s15, [r7, #8]
 8001de2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dea:	d10e      	bne.n	8001e0a <MadgwickAHRSupdateIMU+0x146>
 8001dec:	edd7 7a01 	vldr	s15, [r7, #4]
 8001df0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	d107      	bne.n	8001e0a <MadgwickAHRSupdateIMU+0x146>
 8001dfa:	edd7 7a00 	vldr	s15, [r7]
 8001dfe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	f000 81e5 	beq.w	80021d4 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001e0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e0e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e1e:	edd7 7a00 	vldr	s15, [r7]
 8001e22:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2e:	f000 fa6d 	bl	800230c <invSqrt>
 8001e32:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8001e36:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e3a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e42:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8001e46:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e4a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e52:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 8001e56:	ed97 7a00 	vldr	s14, [r7]
 8001e5a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e62:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001e66:	4b90      	ldr	r3, [pc, #576]	; (80020a8 <MadgwickAHRSupdateIMU+0x3e4>)
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e70:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8001e74:	4b89      	ldr	r3, [pc, #548]	; (800209c <MadgwickAHRSupdateIMU+0x3d8>)
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e7e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 8001e82:	4b87      	ldr	r3, [pc, #540]	; (80020a0 <MadgwickAHRSupdateIMU+0x3dc>)
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e8c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8001e90:	4b84      	ldr	r3, [pc, #528]	; (80020a4 <MadgwickAHRSupdateIMU+0x3e0>)
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e9a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 8001e9e:	4b82      	ldr	r3, [pc, #520]	; (80020a8 <MadgwickAHRSupdateIMU+0x3e4>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eac:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8001eb0:	4b7a      	ldr	r3, [pc, #488]	; (800209c <MadgwickAHRSupdateIMU+0x3d8>)
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ebe:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8001ec2:	4b77      	ldr	r3, [pc, #476]	; (80020a0 <MadgwickAHRSupdateIMU+0x3dc>)
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8001ed4:	4b71      	ldr	r3, [pc, #452]	; (800209c <MadgwickAHRSupdateIMU+0x3d8>)
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8001ee6:	4b6e      	ldr	r3, [pc, #440]	; (80020a0 <MadgwickAHRSupdateIMU+0x3dc>)
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8001ef8:	4b6b      	ldr	r3, [pc, #428]	; (80020a8 <MadgwickAHRSupdateIMU+0x3e4>)
 8001efa:	ed93 7a00 	vldr	s14, [r3]
 8001efe:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <MadgwickAHRSupdateIMU+0x3e4>)
 8001f00:	edd3 7a00 	vldr	s15, [r3]
 8001f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f08:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8001f0c:	4b63      	ldr	r3, [pc, #396]	; (800209c <MadgwickAHRSupdateIMU+0x3d8>)
 8001f0e:	ed93 7a00 	vldr	s14, [r3]
 8001f12:	4b62      	ldr	r3, [pc, #392]	; (800209c <MadgwickAHRSupdateIMU+0x3d8>)
 8001f14:	edd3 7a00 	vldr	s15, [r3]
 8001f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8001f20:	4b5f      	ldr	r3, [pc, #380]	; (80020a0 <MadgwickAHRSupdateIMU+0x3dc>)
 8001f22:	ed93 7a00 	vldr	s14, [r3]
 8001f26:	4b5e      	ldr	r3, [pc, #376]	; (80020a0 <MadgwickAHRSupdateIMU+0x3dc>)
 8001f28:	edd3 7a00 	vldr	s15, [r3]
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f30:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8001f34:	4b5b      	ldr	r3, [pc, #364]	; (80020a4 <MadgwickAHRSupdateIMU+0x3e0>)
 8001f36:	ed93 7a00 	vldr	s14, [r3]
 8001f3a:	4b5a      	ldr	r3, [pc, #360]	; (80020a4 <MadgwickAHRSupdateIMU+0x3e0>)
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f44:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8001f48:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001f4c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f54:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001f58:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f64:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001f68:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f74:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001f78:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f84:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001f88:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001f8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f94:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001f98:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fa4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fa8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001fac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	; (800209c <MadgwickAHRSupdateIMU+0x3d8>)
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fbe:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001fc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fd6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001fda:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fe6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001fea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ff6:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001ffa:	edd7 7a00 	vldr	s15, [r7]
 8001ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002006:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800200a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800200e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002012:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002016:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <MadgwickAHRSupdateIMU+0x3dc>)
 8002018:	edd3 7a00 	vldr	s15, [r3]
 800201c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002020:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002024:	edd7 7a02 	vldr	s15, [r7, #8]
 8002028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800202c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002030:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002034:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002040:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002044:	edd7 7a01 	vldr	s15, [r7, #4]
 8002048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800204c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002050:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002054:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002058:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800205c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002064:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002068:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800206c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002074:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002078:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800207c:	edd7 7a00 	vldr	s15, [r7]
 8002080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002088:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800208c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002090:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002094:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002098:	e008      	b.n	80020ac <MadgwickAHRSupdateIMU+0x3e8>
 800209a:	bf00      	nop
 800209c:	2000020c 	.word	0x2000020c
 80020a0:	20000210 	.word	0x20000210
 80020a4:	20000214 	.word	0x20000214
 80020a8:	20000004 	.word	0x20000004
 80020ac:	4b91      	ldr	r3, [pc, #580]	; (80022f4 <MadgwickAHRSupdateIMU+0x630>)
 80020ae:	edd3 7a00 	vldr	s15, [r3]
 80020b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020b6:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80020ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80020be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80020ca:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80020ce:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80020d2:	4b88      	ldr	r3, [pc, #544]	; (80022f4 <MadgwickAHRSupdateIMU+0x630>)
 80020d4:	edd3 7a00 	vldr	s15, [r3]
 80020d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020e0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80020e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80020e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f0:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80020f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020f8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80020fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8002100:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002104:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002108:	edd7 7a07 	vldr	s15, [r7, #28]
 800210c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002110:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002114:	edd7 7a06 	vldr	s15, [r7, #24]
 8002118:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800211c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002120:	eeb0 0a67 	vmov.f32	s0, s15
 8002124:	f000 f8f2 	bl	800230c <invSqrt>
 8002128:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 800212c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002130:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002138:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 800213c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002140:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002148:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 800214c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002150:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002158:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 800215c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002160:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002168:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 800216c:	4b62      	ldr	r3, [pc, #392]	; (80022f8 <MadgwickAHRSupdateIMU+0x634>)
 800216e:	ed93 7a00 	vldr	s14, [r3]
 8002172:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800217e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002182:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8002186:	4b5c      	ldr	r3, [pc, #368]	; (80022f8 <MadgwickAHRSupdateIMU+0x634>)
 8002188:	ed93 7a00 	vldr	s14, [r3]
 800218c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002194:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 80021a0:	4b55      	ldr	r3, [pc, #340]	; (80022f8 <MadgwickAHRSupdateIMU+0x634>)
 80021a2:	ed93 7a00 	vldr	s14, [r3]
 80021a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80021aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ae:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80021b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 80021ba:	4b4f      	ldr	r3, [pc, #316]	; (80022f8 <MadgwickAHRSupdateIMU+0x634>)
 80021bc:	ed93 7a00 	vldr	s14, [r3]
 80021c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80021c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80021cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80021d4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80021d8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80022fc <MadgwickAHRSupdateIMU+0x638>
 80021dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021e0:	4b47      	ldr	r3, [pc, #284]	; (8002300 <MadgwickAHRSupdateIMU+0x63c>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ea:	4b45      	ldr	r3, [pc, #276]	; (8002300 <MadgwickAHRSupdateIMU+0x63c>)
 80021ec:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80021f0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80021f4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80022fc <MadgwickAHRSupdateIMU+0x638>
 80021f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021fc:	4b41      	ldr	r3, [pc, #260]	; (8002304 <MadgwickAHRSupdateIMU+0x640>)
 80021fe:	edd3 7a00 	vldr	s15, [r3]
 8002202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002206:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <MadgwickAHRSupdateIMU+0x640>)
 8002208:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 800220c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002210:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80022fc <MadgwickAHRSupdateIMU+0x638>
 8002214:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002218:	4b3b      	ldr	r3, [pc, #236]	; (8002308 <MadgwickAHRSupdateIMU+0x644>)
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002222:	4b39      	ldr	r3, [pc, #228]	; (8002308 <MadgwickAHRSupdateIMU+0x644>)
 8002224:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002228:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800222c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80022fc <MadgwickAHRSupdateIMU+0x638>
 8002230:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002234:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <MadgwickAHRSupdateIMU+0x630>)
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223e:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <MadgwickAHRSupdateIMU+0x630>)
 8002240:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002244:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <MadgwickAHRSupdateIMU+0x63c>)
 8002246:	ed93 7a00 	vldr	s14, [r3]
 800224a:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <MadgwickAHRSupdateIMU+0x63c>)
 800224c:	edd3 7a00 	vldr	s15, [r3]
 8002250:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <MadgwickAHRSupdateIMU+0x640>)
 8002256:	edd3 6a00 	vldr	s13, [r3]
 800225a:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <MadgwickAHRSupdateIMU+0x640>)
 800225c:	edd3 7a00 	vldr	s15, [r3]
 8002260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <MadgwickAHRSupdateIMU+0x644>)
 800226a:	edd3 6a00 	vldr	s13, [r3]
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <MadgwickAHRSupdateIMU+0x644>)
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002278:	ee37 7a27 	vadd.f32	s14, s14, s15
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <MadgwickAHRSupdateIMU+0x630>)
 800227e:	edd3 6a00 	vldr	s13, [r3]
 8002282:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <MadgwickAHRSupdateIMU+0x630>)
 8002284:	edd3 7a00 	vldr	s15, [r3]
 8002288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800228c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002290:	eeb0 0a67 	vmov.f32	s0, s15
 8002294:	f000 f83a 	bl	800230c <invSqrt>
 8002298:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 800229c:	4b18      	ldr	r3, [pc, #96]	; (8002300 <MadgwickAHRSupdateIMU+0x63c>)
 800229e:	ed93 7a00 	vldr	s14, [r3]
 80022a2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <MadgwickAHRSupdateIMU+0x63c>)
 80022ac:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <MadgwickAHRSupdateIMU+0x640>)
 80022b2:	ed93 7a00 	vldr	s14, [r3]
 80022b6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <MadgwickAHRSupdateIMU+0x640>)
 80022c0:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <MadgwickAHRSupdateIMU+0x644>)
 80022c6:	ed93 7a00 	vldr	s14, [r3]
 80022ca:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <MadgwickAHRSupdateIMU+0x644>)
 80022d4:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <MadgwickAHRSupdateIMU+0x630>)
 80022da:	ed93 7a00 	vldr	s14, [r3]
 80022de:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e6:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <MadgwickAHRSupdateIMU+0x630>)
 80022e8:	edc3 7a00 	vstr	s15, [r3]
}
 80022ec:	bf00      	nop
 80022ee:	3770      	adds	r7, #112	; 0x70
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000214 	.word	0x20000214
 80022f8:	20000000 	.word	0x20000000
 80022fc:	3ba3d70a 	.word	0x3ba3d70a
 8002300:	20000004 	.word	0x20000004
 8002304:	2000020c 	.word	0x2000020c
 8002308:	20000210 	.word	0x20000210

0800230c <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002316:	edd7 7a01 	vldr	s15, [r7, #4]
 800231a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800231e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002322:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800232a:	f107 0310 	add.w	r3, r7, #16
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	105a      	asrs	r2, r3, #1
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <invSqrt+0x74>)
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002344:	ed97 7a04 	vldr	s14, [r7, #16]
 8002348:	edd7 7a05 	vldr	s15, [r7, #20]
 800234c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002350:	edd7 7a04 	vldr	s15, [r7, #16]
 8002354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002358:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800235c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002360:	edd7 7a04 	vldr	s15, [r7, #16]
 8002364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002368:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	ee07 3a90 	vmov	s15, r3
}
 8002372:	eeb0 0a67 	vmov.f32	s0, s15
 8002376:	371c      	adds	r7, #28
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	5f3759df 	.word	0x5f3759df

08002384 <i2c1_pisiRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af04      	add	r7, sp, #16
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
 800238e:	460b      	mov	r3, r1
 8002390:	71bb      	strb	r3, [r7, #6]
 8002392:	4613      	mov	r3, r2
 8002394:	717b      	strb	r3, [r7, #5]
  naprava <<= 1;
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	71fb      	strb	r3, [r7, #7]
  return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	b299      	uxth	r1, r3
 80023a0:	79bb      	ldrb	r3, [r7, #6]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	230a      	movs	r3, #10
 80023a6:	9302      	str	r3, [sp, #8]
 80023a8:	2301      	movs	r3, #1
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	1d7b      	adds	r3, r7, #5
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	4804      	ldr	r0, [pc, #16]	; (80023c4 <i2c1_pisiRegister+0x40>)
 80023b4:	f002 fbc8 	bl	8004b48 <HAL_I2C_Mem_Write>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000634 	.word	0x20000634

080023c8 <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af04      	add	r7, sp, #16
 80023ce:	603a      	str	r2, [r7, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
 80023d6:	460b      	mov	r3, r1
 80023d8:	71bb      	strb	r3, [r7, #6]
 80023da:	4613      	mov	r3, r2
 80023dc:	717b      	strb	r3, [r7, #5]
  if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 80023de:	797b      	ldrb	r3, [r7, #5]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d906      	bls.n	80023f2 <i2c1_beriRegistre+0x2a>
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	2b19      	cmp	r3, #25
 80023e8:	d103      	bne.n	80023f2 <i2c1_beriRegistre+0x2a>
    reg |= 0x80;
 80023ea:	79bb      	ldrb	r3, [r7, #6]
 80023ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023f0:	71bb      	strb	r3, [r7, #6]
  naprava <<= 1;
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	b299      	uxth	r1, r3
 80023fc:	79bb      	ldrb	r3, [r7, #6]
 80023fe:	b298      	uxth	r0, r3
 8002400:	797b      	ldrb	r3, [r7, #5]
 8002402:	b29b      	uxth	r3, r3
 8002404:	797a      	ldrb	r2, [r7, #5]
 8002406:	9202      	str	r2, [sp, #8]
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	2301      	movs	r3, #1
 8002410:	4602      	mov	r2, r0
 8002412:	4803      	ldr	r0, [pc, #12]	; (8002420 <i2c1_beriRegistre+0x58>)
 8002414:	f002 fc92 	bl	8004d3c <HAL_I2C_Mem_Read>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000634 	.word	0x20000634

08002424 <spi1_beriRegister>:
uint8_t spi1_beriRegister(uint8_t reg) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af02      	add	r7, sp, #8
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
	uint16_t buf_out, buf_in;
	reg |= 0x80; // najpomembnejsi bit na 1
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002434:	71fb      	strb	r3, [r7, #7]
	buf_out = reg; // little endian, se postavi na pravo mesto ....
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	b29b      	uxth	r3, r3
 800243a:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800243c:	2200      	movs	r2, #0
 800243e:	2108      	movs	r1, #8
 8002440:	4812      	ldr	r0, [pc, #72]	; (800248c <spi1_beriRegister+0x68>)
 8002442:	f002 fa0b 	bl	800485c <HAL_GPIO_WritePin>
	//HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
	HAL_SPI_TransmitReceive(&hspi1, &((uint8_t*)&buf_out)[0], &((uint8_t*)&buf_in)[0], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 8002446:	f107 020c 	add.w	r2, r7, #12
 800244a:	f107 010e 	add.w	r1, r7, #14
 800244e:	2302      	movs	r3, #2
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2301      	movs	r3, #1
 8002454:	480e      	ldr	r0, [pc, #56]	; (8002490 <spi1_beriRegister+0x6c>)
 8002456:	f005 faab 	bl	80079b0 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, &((uint8_t*)&buf_out)[1], &((uint8_t*)&buf_in)[1], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 800245a:	f107 010e 	add.w	r1, r7, #14
 800245e:	3101      	adds	r1, #1
 8002460:	f107 020c 	add.w	r2, r7, #12
 8002464:	3201      	adds	r2, #1
 8002466:	2302      	movs	r3, #2
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2301      	movs	r3, #1
 800246c:	4808      	ldr	r0, [pc, #32]	; (8002490 <spi1_beriRegister+0x6c>)
 800246e:	f005 fa9f 	bl	80079b0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8002472:	2201      	movs	r2, #1
 8002474:	2108      	movs	r1, #8
 8002476:	4805      	ldr	r0, [pc, #20]	; (800248c <spi1_beriRegister+0x68>)
 8002478:	f002 f9f0 	bl	800485c <HAL_GPIO_WritePin>
	return buf_in >> 8; // little endian...
 800247c:	89bb      	ldrh	r3, [r7, #12]
 800247e:	0a1b      	lsrs	r3, r3, #8
 8002480:	b29b      	uxth	r3, r3
 8002482:	b2db      	uxtb	r3, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	20000a00 	.word	0x20000a00

08002494 <spi1_pisiRegister>:
void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	460a      	mov	r2, r1
 800249e:	71fb      	strb	r3, [r7, #7]
 80024a0:	4613      	mov	r3, r2
 80024a2:	71bb      	strb	r3, [r7, #6]
  uint16_t buf_out;
  buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	b21a      	sxth	r2, r3
 80024a8:	79bb      	ldrb	r3, [r7, #6]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	4313      	orrs	r3, r2
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	81fb      	strh	r3, [r7, #14]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2108      	movs	r1, #8
 80024ba:	480d      	ldr	r0, [pc, #52]	; (80024f0 <spi1_pisiRegister+0x5c>)
 80024bc:	f002 f9ce 	bl	800485c <HAL_GPIO_WritePin>
  //HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
  HAL_SPI_Transmit(&hspi1, &((uint8_t*)&buf_out)[0], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 80024c0:	f107 010e 	add.w	r1, r7, #14
 80024c4:	2302      	movs	r3, #2
 80024c6:	2201      	movs	r2, #1
 80024c8:	480a      	ldr	r0, [pc, #40]	; (80024f4 <spi1_pisiRegister+0x60>)
 80024ca:	f005 f824 	bl	8007516 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &((uint8_t*)&buf_out)[1], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 80024ce:	f107 010e 	add.w	r1, r7, #14
 80024d2:	3101      	adds	r1, #1
 80024d4:	2302      	movs	r3, #2
 80024d6:	2201      	movs	r2, #1
 80024d8:	4806      	ldr	r0, [pc, #24]	; (80024f4 <spi1_pisiRegister+0x60>)
 80024da:	f005 f81c 	bl	8007516 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80024de:	2201      	movs	r2, #1
 80024e0:	2108      	movs	r1, #8
 80024e2:	4803      	ldr	r0, [pc, #12]	; (80024f0 <spi1_pisiRegister+0x5c>)
 80024e4:	f002 f9ba 	bl	800485c <HAL_GPIO_WritePin>
}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	20000a00 	.word	0x20000a00

080024f8 <spi1_beriRegistre>:
void spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
 8002504:	4613      	mov	r3, r2
 8002506:	71bb      	strb	r3, [r7, #6]
  reg |= 0xC0; // najpomembnejsa bita na 1
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800250e:	b2db      	uxtb	r3, r3
 8002510:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8002512:	2200      	movs	r2, #0
 8002514:	2108      	movs	r1, #8
 8002516:	480c      	ldr	r0, [pc, #48]	; (8002548 <spi1_beriRegistre+0x50>)
 8002518:	f002 f9a0 	bl	800485c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 800251c:	1df9      	adds	r1, r7, #7
 800251e:	230a      	movs	r3, #10
 8002520:	2201      	movs	r2, #1
 8002522:	480a      	ldr	r0, [pc, #40]	; (800254c <spi1_beriRegistre+0x54>)
 8002524:	f004 fff7 	bl	8007516 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 8002528:	79bb      	ldrb	r3, [r7, #6]
 800252a:	b29a      	uxth	r2, r3
 800252c:	79bb      	ldrb	r3, [r7, #6]
 800252e:	6839      	ldr	r1, [r7, #0]
 8002530:	4806      	ldr	r0, [pc, #24]	; (800254c <spi1_beriRegistre+0x54>)
 8002532:	f005 f92c 	bl	800778e <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8002536:	2201      	movs	r2, #1
 8002538:	2108      	movs	r1, #8
 800253a:	4803      	ldr	r0, [pc, #12]	; (8002548 <spi1_beriRegistre+0x50>)
 800253c:	f002 f98e 	bl	800485c <HAL_GPIO_WritePin>
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000
 800254c:	20000a00 	.word	0x20000a00

08002550 <nastaviPospeskometer>:
void nastaviPospeskometer(){
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
	//register maping lsm303agr.pdf page(43)
	//0x23 0x40 BLE litle endian
	i2c1_pisiRegister(0x19, 0x21, 0x0);
 8002554:	2200      	movs	r2, #0
 8002556:	2121      	movs	r1, #33	; 0x21
 8002558:	2019      	movs	r0, #25
 800255a:	f7ff ff13 	bl	8002384 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x24, 0x0);
 800255e:	2200      	movs	r2, #0
 8002560:	2124      	movs	r1, #36	; 0x24
 8002562:	2019      	movs	r0, #25
 8002564:	f7ff ff0e 	bl	8002384 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x25, 0x0);
 8002568:	2200      	movs	r2, #0
 800256a:	2125      	movs	r1, #37	; 0x25
 800256c:	2019      	movs	r0, #25
 800256e:	f7ff ff09 	bl	8002384 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x26, 0x0);
 8002572:	2200      	movs	r2, #0
 8002574:	2126      	movs	r1, #38	; 0x26
 8002576:	2019      	movs	r0, #25
 8002578:	f7ff ff04 	bl	8002384 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x20, 0x67);  //ctrl_reg1 zbudi pospeskometer in omogoci osi //0x20 0x67 200Hz enable XYZ
 800257c:	2267      	movs	r2, #103	; 0x67
 800257e:	2120      	movs	r1, #32
 8002580:	2019      	movs	r0, #25
 8002582:	f7ff feff 	bl	8002384 <i2c1_pisiRegister>
	//block data update HR=1 oprating mode selection 12bit data output LPen = 0 (low power mode disabled) FS0 = 1(+-4g obcutljivost)
	i2c1_pisiRegister(0x19, 0x23, 0x8);  //ctrl_reg4 nastavi posodobitev samo ko se prebere vrednost ter locljivost +-2g
 8002586:	2208      	movs	r2, #8
 8002588:	2123      	movs	r1, #35	; 0x23
 800258a:	2019      	movs	r0, #25
 800258c:	f7ff fefa 	bl	8002384 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x22, 0x10);  //0x22 0x10 DRDY1 INT1 pin enable pe4
 8002590:	2210      	movs	r2, #16
 8002592:	2122      	movs	r1, #34	; 0x22
 8002594:	2019      	movs	r0, #25
 8002596:	f7ff fef5 	bl	8002384 <i2c1_pisiRegister>
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}

0800259e <nastaviMagnetometer>:
void nastaviMagnetometer(){
 800259e:	b580      	push	{r7, lr}
 80025a0:	af00      	add	r7, sp, #0
	i2c1_pisiRegister(0x1e, 0x60, 0xC); //cfg_reg_a_m ODR= 100HZ
 80025a2:	220c      	movs	r2, #12
 80025a4:	2160      	movs	r1, #96	; 0x60
 80025a6:	201e      	movs	r0, #30
 80025a8:	f7ff feec 	bl	8002384 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x1e, 0x61, 0x0); //cfg_reg_b_m
 80025ac:	2200      	movs	r2, #0
 80025ae:	2161      	movs	r1, #97	; 0x61
 80025b0:	201e      	movs	r0, #30
 80025b2:	f7ff fee7 	bl	8002384 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x1e, 0x62, 0x1); //cfg_reg_c_m INT_MAG=1 INT_MAG_PIN=0 BDU=0
 80025b6:	2201      	movs	r2, #1
 80025b8:	2162      	movs	r1, #98	; 0x62
 80025ba:	201e      	movs	r0, #30
 80025bc:	f7ff fee2 	bl	8002384 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x1e, 0x63, 0xE5); //int_ctrl_reg_m enable XYZ in IEN=1 interupt generation enable IEA=1
 80025c0:	22e5      	movs	r2, #229	; 0xe5
 80025c2:	2163      	movs	r1, #99	; 0x63
 80025c4:	201e      	movs	r0, #30
 80025c6:	f7ff fedd 	bl	8002384 <i2c1_pisiRegister>
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}

080025ce <nastaviGiroskop>:
void nastaviGiroskop() {
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
  // preverimo ali smo "poklicali" pravi senzor
  uint8_t cip = spi1_beriRegister(0x0F);
 80025d4:	200f      	movs	r0, #15
 80025d6:	f7ff ff25 	bl	8002424 <spi1_beriRegister>
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
  if (cip!=0xD4 && cip!=0xD3) {
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	2bd4      	cmp	r3, #212	; 0xd4
 80025e2:	d003      	beq.n	80025ec <nastaviGiroskop+0x1e>
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	2bd3      	cmp	r3, #211	; 0xd3
 80025e8:	d000      	beq.n	80025ec <nastaviGiroskop+0x1e>
	for (;;); //napaka ni senzorja
 80025ea:	e7fe      	b.n	80025ea <nastaviGiroskop+0x1c>
  }
  spi1_pisiRegister(0x21,0);//REG2 register za high pass filter
 80025ec:	2100      	movs	r1, #0
 80025ee:	2021      	movs	r0, #33	; 0x21
 80025f0:	f7ff ff50 	bl	8002494 <spi1_pisiRegister>
  spi1_pisiRegister(0x22,0x8);//REG3 interupt INT1 disable DRDY/INT2 enable
 80025f4:	2108      	movs	r1, #8
 80025f6:	2022      	movs	r0, #34	; 0x22
 80025f8:	f7ff ff4c 	bl	8002494 <spi1_pisiRegister>
    //0001 0000 FS-01 500dps
  spi1_pisiRegister(0x23,0x10);//REG4 MSB@lower addres 500deg/s 0x10 BLE = 0 BIGendian
 80025fc:	2110      	movs	r1, #16
 80025fe:	2023      	movs	r0, #35	; 0x23
 8002600:	f7ff ff48 	bl	8002494 <spi1_pisiRegister>

  spi1_pisiRegister(0x25,0);//REFRENCE
 8002604:	2100      	movs	r1, #0
 8002606:	2025      	movs	r0, #37	; 0x25
 8002608:	f7ff ff44 	bl	8002494 <spi1_pisiRegister>
  spi1_pisiRegister(0x2e,0);//FIFO_CTRL
 800260c:	2100      	movs	r1, #0
 800260e:	202e      	movs	r0, #46	; 0x2e
 8002610:	f7ff ff40 	bl	8002494 <spi1_pisiRegister>
  spi1_pisiRegister(0x32,0);//INT1_THS
 8002614:	2100      	movs	r1, #0
 8002616:	2032      	movs	r0, #50	; 0x32
 8002618:	f7ff ff3c 	bl	8002494 <spi1_pisiRegister>
  spi1_pisiRegister(0x33,0);//INT1_THS
 800261c:	2100      	movs	r1, #0
 800261e:	2033      	movs	r0, #51	; 0x33
 8002620:	f7ff ff38 	bl	8002494 <spi1_pisiRegister>
  spi1_pisiRegister(0x34,0);//INT1_THS
 8002624:	2100      	movs	r1, #0
 8002626:	2034      	movs	r0, #52	; 0x34
 8002628:	f7ff ff34 	bl	8002494 <spi1_pisiRegister>
  spi1_pisiRegister(0x35,0);//INT1_THS
 800262c:	2100      	movs	r1, #0
 800262e:	2035      	movs	r0, #53	; 0x35
 8002630:	f7ff ff30 	bl	8002494 <spi1_pisiRegister>
  spi1_pisiRegister(0x36,0);//INT1_THS
 8002634:	2100      	movs	r1, #0
 8002636:	2036      	movs	r0, #54	; 0x36
 8002638:	f7ff ff2c 	bl	8002494 <spi1_pisiRegister>
  spi1_pisiRegister(0x37,0);//INT1_THS
 800263c:	2100      	movs	r1, #0
 800263e:	2037      	movs	r0, #55	; 0x37
 8002640:	f7ff ff28 	bl	8002494 <spi1_pisiRegister>
  spi1_pisiRegister(0x38,0);//INT1_DUR
 8002644:	2100      	movs	r1, #0
 8002646:	2038      	movs	r0, #56	; 0x38
 8002648:	f7ff ff24 	bl	8002494 <spi1_pisiRegister>
  spi1_pisiRegister(0x30,0);//INT1_CFG
 800264c:	2100      	movs	r1, #0
 800264e:	2030      	movs	r0, #48	; 0x30
 8002650:	f7ff ff20 	bl	8002494 <spi1_pisiRegister>

  spi1_pisiRegister(0x24,0);//REG5
 8002654:	2100      	movs	r1, #0
 8002656:	2024      	movs	r0, #36	; 0x24
 8002658:	f7ff ff1c 	bl	8002494 <spi1_pisiRegister>
  //0101 1111 : (1111)=(PD,Zen,Yen,Xen)
  spi1_pisiRegister(0x20,0x5f);//CTRL_REG1 omogoci x-1,y-1,z-1,PD-1(normal mode) DR = 01 BW = 10 cutof=25 200hz
 800265c:	215f      	movs	r1, #95	; 0x5f
 800265e:	2020      	movs	r0, #32
 8002660:	f7ff ff18 	bl	8002494 <spi1_pisiRegister>

  spi1_pisiRegister(0x20, 0x0F);//CTRL REG1 zbudi ziroskop in omogoci osi
 8002664:	210f      	movs	r1, #15
 8002666:	2020      	movs	r0, #32
 8002668:	f7ff ff14 	bl	8002494 <spi1_pisiRegister>
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <normalize_v3f>:

float normalize_v3f(float* x, float* y, float* z){
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
	float norm = sqrt( (*x) * (*x) + (*y) * (*y) + (*z) * (*z) );
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	ed93 7a00 	vldr	s14, [r3]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	edd3 6a00 	vldr	s13, [r3]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	edd3 7a00 	vldr	s15, [r3]
 800269c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	edd3 6a00 	vldr	s13, [r3]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	edd3 7a00 	vldr	s15, [r3]
 80026b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b8:	ee17 0a90 	vmov	r0, s15
 80026bc:	f7fd fef0 	bl	80004a0 <__aeabi_f2d>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	ec43 2b10 	vmov	d0, r2, r3
 80026c8:	f009 fa7e 	bl	800bbc8 <sqrt>
 80026cc:	ec53 2b10 	vmov	r2, r3, d0
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	f7fe fa14 	bl	8000b00 <__aeabi_d2f>
 80026d8:	4603      	mov	r3, r0
 80026da:	617b      	str	r3, [r7, #20]
	*x /= norm;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	edd3 6a00 	vldr	s13, [r3]
 80026e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80026e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	edc3 7a00 	vstr	s15, [r3]
	*y /= norm;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	edd3 6a00 	vldr	s13, [r3]
 80026f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80026fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	edc3 7a00 	vstr	s15, [r3]
	*z /= norm;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	edd3 6a00 	vldr	s13, [r3]
 800270a:	ed97 7a05 	vldr	s14, [r7, #20]
 800270e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	edc3 7a00 	vstr	s15, [r3]
}
 8002718:	bf00      	nop
 800271a:	eeb0 0a67 	vmov.f32	s0, s15
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <izracunajPovprecjeInt16>:

int16_t izracunajPovprecjeInt16(struct tekocePovprecjeInt16* data,int16_t nov, uint8_t cleni){
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
 8002730:	4613      	mov	r3, r2
 8002732:	707b      	strb	r3, [r7, #1]
	data->sum =  data->sum + nov - data->vals[data->index]; //pristejemo trenutno vrednost in odstejemo zadnjo
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800273c:	4413      	add	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	7812      	ldrb	r2, [r2, #0]
 8002742:	4611      	mov	r1, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	3104      	adds	r1, #4
 8002748:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800274c:	1a9a      	subs	r2, r3, r2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	605a      	str	r2, [r3, #4]
	data->vals[data->index] = nov; //na zadnjo zamenjamo z novo
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3204      	adds	r2, #4
 800275c:	8879      	ldrh	r1, [r7, #2]
 800275e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	data->index++;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	b2da      	uxtb	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	701a      	strb	r2, [r3, #0]
	if(cleni > STEVILO_CLENOV_TP){cleni = STEVILO_CLENOV_TP;}
 800276e:	787b      	ldrb	r3, [r7, #1]
 8002770:	2b3c      	cmp	r3, #60	; 0x3c
 8002772:	d901      	bls.n	8002778 <izracunajPovprecjeInt16+0x54>
 8002774:	233c      	movs	r3, #60	; 0x3c
 8002776:	707b      	strb	r3, [r7, #1]
	if(data->index >= cleni){data->index = 0;}
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	787a      	ldrb	r2, [r7, #1]
 800277e:	429a      	cmp	r2, r3
 8002780:	d802      	bhi.n	8002788 <izracunajPovprecjeInt16+0x64>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
	data->avrage =  data->sum/cleni;//izracunamo povprecje
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	787b      	ldrb	r3, [r7, #1]
 800278e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002792:	b21a      	sxth	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	805a      	strh	r2, [r3, #2]
	return data->avrage;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <getDrift>:

void getDrift(){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80027b2:	2201      	movs	r2, #1
 80027b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027b8:	4849      	ldr	r0, [pc, #292]	; (80028e0 <getDrift+0x134>)
 80027ba:	f002 f84f 	bl	800485c <HAL_GPIO_WritePin>
	int32_t sumGyrox = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
	int32_t sumGyroy = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
	int32_t sumGyroz = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
	int32_t sumAccx = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
	int32_t sumAccy = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
	int32_t sumAccz = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
	for(int i=0; i < 400; i++){
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	e02f      	b.n	800283c <getDrift+0x90>
		sumGyrox += Gyro.x;
 80027dc:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <getDrift+0x138>)
 80027de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e2:	461a      	mov	r2, r3
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	4413      	add	r3, r2
 80027e8:	61fb      	str	r3, [r7, #28]
		sumGyroy += Gyro.y;
 80027ea:	4b3e      	ldr	r3, [pc, #248]	; (80028e4 <getDrift+0x138>)
 80027ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027f0:	461a      	mov	r2, r3
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4413      	add	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
		sumGyroz += Gyro.z;
 80027f8:	4b3a      	ldr	r3, [pc, #232]	; (80028e4 <getDrift+0x138>)
 80027fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027fe:	461a      	mov	r2, r3
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	4413      	add	r3, r2
 8002804:	617b      	str	r3, [r7, #20]
		sumAccx += Acc.x;
 8002806:	4b38      	ldr	r3, [pc, #224]	; (80028e8 <getDrift+0x13c>)
 8002808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800280c:	461a      	mov	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4413      	add	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
		sumAccy += Acc.y;
 8002814:	4b34      	ldr	r3, [pc, #208]	; (80028e8 <getDrift+0x13c>)
 8002816:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800281a:	461a      	mov	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
		sumAccz += Acc.z;
 8002822:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <getDrift+0x13c>)
 8002824:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002828:	461a      	mov	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4413      	add	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
		HAL_Delay(6);
 8002830:	2006      	movs	r0, #6
 8002832:	f001 fa6f 	bl	8003d14 <HAL_Delay>
	for(int i=0; i < 400; i++){
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3301      	adds	r3, #1
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002842:	dbcb      	blt.n	80027dc <getDrift+0x30>
	}
	E.Accx = sumAccx/400; //vektor gravitacije
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4a29      	ldr	r2, [pc, #164]	; (80028ec <getDrift+0x140>)
 8002848:	fb82 1203 	smull	r1, r2, r2, r3
 800284c:	11d2      	asrs	r2, r2, #7
 800284e:	17db      	asrs	r3, r3, #31
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	b21a      	sxth	r2, r3
 8002854:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <getDrift+0x144>)
 8002856:	841a      	strh	r2, [r3, #32]
	E.Accy = sumAccy/400;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a24      	ldr	r2, [pc, #144]	; (80028ec <getDrift+0x140>)
 800285c:	fb82 1203 	smull	r1, r2, r2, r3
 8002860:	11d2      	asrs	r2, r2, #7
 8002862:	17db      	asrs	r3, r3, #31
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	b21a      	sxth	r2, r3
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <getDrift+0x144>)
 800286a:	845a      	strh	r2, [r3, #34]	; 0x22
	E.Accz = sumAccz/400;
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <getDrift+0x140>)
 8002870:	fb82 1203 	smull	r1, r2, r2, r3
 8002874:	11d2      	asrs	r2, r2, #7
 8002876:	17db      	asrs	r3, r3, #31
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	b21a      	sxth	r2, r3
 800287c:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <getDrift+0x144>)
 800287e:	849a      	strh	r2, [r3, #36]	; 0x24
	E.Gyrox = sumGyrox/400;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	4a1a      	ldr	r2, [pc, #104]	; (80028ec <getDrift+0x140>)
 8002884:	fb82 1203 	smull	r1, r2, r2, r3
 8002888:	11d2      	asrs	r2, r2, #7
 800288a:	17db      	asrs	r3, r3, #31
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	b21a      	sxth	r2, r3
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <getDrift+0x144>)
 8002892:	801a      	strh	r2, [r3, #0]
	E.Gyroy = sumGyroy/400;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	4a15      	ldr	r2, [pc, #84]	; (80028ec <getDrift+0x140>)
 8002898:	fb82 1203 	smull	r1, r2, r2, r3
 800289c:	11d2      	asrs	r2, r2, #7
 800289e:	17db      	asrs	r3, r3, #31
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	b21a      	sxth	r2, r3
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <getDrift+0x144>)
 80028a6:	805a      	strh	r2, [r3, #2]
	E.Gyroz = sumGyroz/400;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	4a10      	ldr	r2, [pc, #64]	; (80028ec <getDrift+0x140>)
 80028ac:	fb82 1203 	smull	r1, r2, r2, r3
 80028b0:	11d2      	asrs	r2, r2, #7
 80028b2:	17db      	asrs	r3, r3, #31
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	b21a      	sxth	r2, r3
 80028b8:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <getDrift+0x144>)
 80028ba:	809a      	strh	r2, [r3, #4]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028c2:	4807      	ldr	r0, [pc, #28]	; (80028e0 <getDrift+0x134>)
 80028c4:	f001 ffca 	bl	800485c <HAL_GPIO_WritePin>

	P.pozX = 0;
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <getDrift+0x148>)
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	621a      	str	r2, [r3, #32]
	P.pozY = 0;
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <getDrift+0x148>)
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80028d8:	bf00      	nop
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	20000a90 	.word	0x20000a90
 80028e8:	20000a58 	.word	0x20000a58
 80028ec:	51eb851f 	.word	0x51eb851f
 80028f0:	20000a68 	.word	0x20000a68
 80028f4:	20000b38 	.word	0x20000b38

080028f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	80fb      	strh	r3, [r7, #6]
	//kateri pin je poklical EXIT event
	if(GPIO_Pin == GPIO_PIN_1){ //vsakic ko dobis interupt posodobi podatke
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d108      	bne.n	800291a <HAL_GPIO_EXTI_Callback+0x22>
		spi1_beriRegistre(0x28, (uint8_t*)&Gyro, 6);
 8002908:	2206      	movs	r2, #6
 800290a:	4912      	ldr	r1, [pc, #72]	; (8002954 <HAL_GPIO_EXTI_Callback+0x5c>)
 800290c:	2028      	movs	r0, #40	; 0x28
 800290e:	f7ff fdf3 	bl	80024f8 <spi1_beriRegistre>
		GyroReady = 1; //zastavica da so na voljo novi podatki 200Hz
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <HAL_GPIO_EXTI_Callback+0x60>)
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
		//data ready megnetometer
		i2c1_beriRegistre(0x1e, 0x68,(uint8_t*)&Mag, 6);
		MagReady = 1; //100Hz
	}

}
 8002918:	e018      	b.n	800294c <HAL_GPIO_EXTI_Callback+0x54>
	else if(GPIO_Pin == GPIO_PIN_4){
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	2b10      	cmp	r3, #16
 800291e:	d109      	bne.n	8002934 <HAL_GPIO_EXTI_Callback+0x3c>
		i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&Acc, 6);
 8002920:	2306      	movs	r3, #6
 8002922:	4a0e      	ldr	r2, [pc, #56]	; (800295c <HAL_GPIO_EXTI_Callback+0x64>)
 8002924:	2128      	movs	r1, #40	; 0x28
 8002926:	2019      	movs	r0, #25
 8002928:	f7ff fd4e 	bl	80023c8 <i2c1_beriRegistre>
		AccReady = 1; //200Hz
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_GPIO_EXTI_Callback+0x68>)
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
}
 8002932:	e00b      	b.n	800294c <HAL_GPIO_EXTI_Callback+0x54>
	else if(GPIO_Pin == GPIO_PIN_2){
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	2b04      	cmp	r3, #4
 8002938:	d108      	bne.n	800294c <HAL_GPIO_EXTI_Callback+0x54>
		i2c1_beriRegistre(0x1e, 0x68,(uint8_t*)&Mag, 6);
 800293a:	2306      	movs	r3, #6
 800293c:	4a09      	ldr	r2, [pc, #36]	; (8002964 <HAL_GPIO_EXTI_Callback+0x6c>)
 800293e:	2168      	movs	r1, #104	; 0x68
 8002940:	201e      	movs	r0, #30
 8002942:	f7ff fd41 	bl	80023c8 <i2c1_beriRegistre>
		MagReady = 1; //100Hz
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_GPIO_EXTI_Callback+0x70>)
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000a90 	.word	0x20000a90
 8002958:	20000218 	.word	0x20000218
 800295c:	20000a58 	.word	0x20000a58
 8002960:	20000219 	.word	0x20000219
 8002964:	20000810 	.word	0x20000810
 8002968:	2000021a 	.word	0x2000021a
 800296c:	00000000 	.word	0x00000000

08002970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002970:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002974:	b08a      	sub	sp, #40	; 0x28
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002978:	f001 f95a 	bl	8003c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800297c:	f000 fcd2 	bl	8003324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002980:	f000 fdf6 	bl	8003570 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002984:	f000 fd36 	bl	80033f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002988:	f000 fd62 	bl	8003450 <MX_SPI1_Init>
  MX_DMA_Init();
 800298c:	f000 fdc8 	bl	8003520 <MX_DMA_Init>
  MX_SPI5_Init();
 8002990:	f000 fd94 	bl	80034bc <MX_SPI5_Init>
  MX_USB_DEVICE_Init();
 8002994:	f008 fae8 	bl	800af68 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_I2C_ENABLE(&hi2c1); //omogocimo I2C1 za komunikacijo z vgrajenimi cipi
 8002998:	4ba1      	ldr	r3, [pc, #644]	; (8002c20 <main+0x2b0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4ba0      	ldr	r3, [pc, #640]	; (8002c20 <main+0x2b0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hspi1); //komunikacija gyro
 80029a8:	4b9e      	ldr	r3, [pc, #632]	; (8002c24 <main+0x2b4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b9d      	ldr	r3, [pc, #628]	; (8002c24 <main+0x2b4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b6:	601a      	str	r2, [r3, #0]

  __HAL_SPI_ENABLE(&hspi5); //rasbery pi
 80029b8:	4b9b      	ldr	r3, [pc, #620]	; (8002c28 <main+0x2b8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	4b9a      	ldr	r3, [pc, #616]	; (8002c28 <main+0x2b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029c6:	601a      	str	r2, [r3, #0]
  HAL_Delay(50);
 80029c8:	2032      	movs	r0, #50	; 0x32
 80029ca:	f001 f9a3 	bl	8003d14 <HAL_Delay>
  nastaviPospeskometer();
 80029ce:	f7ff fdbf 	bl	8002550 <nastaviPospeskometer>
  nastaviMagnetometer();
 80029d2:	f7ff fde4 	bl	800259e <nastaviMagnetometer>
  nastaviGiroskop();
 80029d6:	f7ff fdfa 	bl	80025ce <nastaviGiroskop>
  //prvic preberi podatke da se generirajo interupti
  spi1_beriRegistre(0x28, (uint8_t*)&Gyro, 6);
 80029da:	2206      	movs	r2, #6
 80029dc:	4993      	ldr	r1, [pc, #588]	; (8002c2c <main+0x2bc>)
 80029de:	2028      	movs	r0, #40	; 0x28
 80029e0:	f7ff fd8a 	bl	80024f8 <spi1_beriRegistre>
  i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&Acc, 6);
 80029e4:	2306      	movs	r3, #6
 80029e6:	4a92      	ldr	r2, [pc, #584]	; (8002c30 <main+0x2c0>)
 80029e8:	2128      	movs	r1, #40	; 0x28
 80029ea:	2019      	movs	r0, #25
 80029ec:	f7ff fcec 	bl	80023c8 <i2c1_beriRegistre>
  i2c1_beriRegistre(0x1e, 0x68,(uint8_t*)&Mag, 6);
 80029f0:	2306      	movs	r3, #6
 80029f2:	4a90      	ldr	r2, [pc, #576]	; (8002c34 <main+0x2c4>)
 80029f4:	2168      	movs	r1, #104	; 0x68
 80029f6:	201e      	movs	r0, #30
 80029f8:	f7ff fce6 	bl	80023c8 <i2c1_beriRegistre>

  E.Accx = 0;
 80029fc:	4b8e      	ldr	r3, [pc, #568]	; (8002c38 <main+0x2c8>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	841a      	strh	r2, [r3, #32]
  E.Accy = 0;
 8002a02:	4b8d      	ldr	r3, [pc, #564]	; (8002c38 <main+0x2c8>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	845a      	strh	r2, [r3, #34]	; 0x22
  E.Accz = 0;
 8002a08:	4b8b      	ldr	r3, [pc, #556]	; (8002c38 <main+0x2c8>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	849a      	strh	r2, [r3, #36]	; 0x24
  E.Gyrox = 0;
 8002a0e:	4b8a      	ldr	r3, [pc, #552]	; (8002c38 <main+0x2c8>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	801a      	strh	r2, [r3, #0]
  E.Gyroy = 0;
 8002a14:	4b88      	ldr	r3, [pc, #544]	; (8002c38 <main+0x2c8>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	805a      	strh	r2, [r3, #2]
  E.Gyroz = 0;
 8002a1a:	4b87      	ldr	r3, [pc, #540]	; (8002c38 <main+0x2c8>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	809a      	strh	r2, [r3, #4]
  E.HardIronMagx = 0;
 8002a20:	4b85      	ldr	r3, [pc, #532]	; (8002c38 <main+0x2c8>)
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  E.HardIronMagy = 0;
 8002a28:	4b83      	ldr	r3, [pc, #524]	; (8002c38 <main+0x2c8>)
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	60da      	str	r2, [r3, #12]
  E.HardIronMagz = 0;
 8002a30:	4b81      	ldr	r3, [pc, #516]	; (8002c38 <main+0x2c8>)
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  E.SoftIronMagx = 1;
 8002a38:	4b7f      	ldr	r3, [pc, #508]	; (8002c38 <main+0x2c8>)
 8002a3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a3e:	615a      	str	r2, [r3, #20]
  E.SoftIronMagy = 1;
 8002a40:	4b7d      	ldr	r3, [pc, #500]	; (8002c38 <main+0x2c8>)
 8002a42:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a46:	619a      	str	r2, [r3, #24]
  E.SoftIronMagz = 1;
 8002a48:	4b7b      	ldr	r3, [pc, #492]	; (8002c38 <main+0x2c8>)
 8002a4a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a4e:	61da      	str	r2, [r3, #28]

  getDrift();
 8002a50:	f7ff feac 	bl	80027ac <getDrift>

  while (1)
  {
    /* USER CODE END WHILE */
	  if(MagReady){
 8002a54:	4b79      	ldr	r3, [pc, #484]	; (8002c3c <main+0x2cc>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d02e      	beq.n	8002abc <main+0x14c>
		  MagF.x = izracunajPovprecjeInt16(&MagX,Mag.x,10);
 8002a5e:	4b75      	ldr	r3, [pc, #468]	; (8002c34 <main+0x2c4>)
 8002a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a64:	220a      	movs	r2, #10
 8002a66:	4619      	mov	r1, r3
 8002a68:	4875      	ldr	r0, [pc, #468]	; (8002c40 <main+0x2d0>)
 8002a6a:	f7ff fe5b 	bl	8002724 <izracunajPovprecjeInt16>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b74      	ldr	r3, [pc, #464]	; (8002c44 <main+0x2d4>)
 8002a74:	801a      	strh	r2, [r3, #0]
		  MagF.y = izracunajPovprecjeInt16(&MagY,Mag.y,10);
 8002a76:	4b6f      	ldr	r3, [pc, #444]	; (8002c34 <main+0x2c4>)
 8002a78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a7c:	220a      	movs	r2, #10
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4871      	ldr	r0, [pc, #452]	; (8002c48 <main+0x2d8>)
 8002a82:	f7ff fe4f 	bl	8002724 <izracunajPovprecjeInt16>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b6e      	ldr	r3, [pc, #440]	; (8002c44 <main+0x2d4>)
 8002a8c:	805a      	strh	r2, [r3, #2]
		  MagF.z = izracunajPovprecjeInt16(&MagZ,Mag.z,10);
 8002a8e:	4b69      	ldr	r3, [pc, #420]	; (8002c34 <main+0x2c4>)
 8002a90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a94:	220a      	movs	r2, #10
 8002a96:	4619      	mov	r1, r3
 8002a98:	486c      	ldr	r0, [pc, #432]	; (8002c4c <main+0x2dc>)
 8002a9a:	f7ff fe43 	bl	8002724 <izracunajPovprecjeInt16>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <main+0x2d4>)
 8002aa4:	809a      	strh	r2, [r3, #4]
		  MagReady = 0;
 8002aa6:	4b65      	ldr	r3, [pc, #404]	; (8002c3c <main+0x2cc>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]

		  //HAL_SPI_TransmitReceive_DMA(&hspi5, SpiTxData, SpiRxData, 32);
		  //HAL_SPI_Transmit_DMA(&hspi5, SpiTxData, 32);
		  //HAL_SPI_Receive_DMA(&hspi5, SpiRxData, 32);

		  P.head = 0xAAAB;
 8002aac:	4b68      	ldr	r3, [pc, #416]	; (8002c50 <main+0x2e0>)
 8002aae:	f64a 22ab 	movw	r2, #43691	; 0xaaab
 8002ab2:	601a      	str	r2, [r3, #0]
		  CDC_Transmit_FS((uint8_t*)&P,(sizeof(float)*12)+4);
 8002ab4:	2134      	movs	r1, #52	; 0x34
 8002ab6:	4866      	ldr	r0, [pc, #408]	; (8002c50 <main+0x2e0>)
 8002ab8:	f008 fb14 	bl	800b0e4 <CDC_Transmit_FS>
	  }
	  if(AccReady){
 8002abc:	4b65      	ldr	r3, [pc, #404]	; (8002c54 <main+0x2e4>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d040      	beq.n	8002b48 <main+0x1d8>
		  Acc.x -= E.Accx;
 8002ac6:	4b5c      	ldr	r3, [pc, #368]	; (8002c38 <main+0x2c8>)
 8002ac8:	8c1b      	ldrh	r3, [r3, #32]
 8002aca:	b219      	sxth	r1, r3
 8002acc:	4b58      	ldr	r3, [pc, #352]	; (8002c30 <main+0x2c0>)
 8002ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	b28b      	uxth	r3, r1
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	b21a      	sxth	r2, r3
 8002adc:	4b54      	ldr	r3, [pc, #336]	; (8002c30 <main+0x2c0>)
 8002ade:	801a      	strh	r2, [r3, #0]
		  Acc.y -= E.Accy;
 8002ae0:	4b55      	ldr	r3, [pc, #340]	; (8002c38 <main+0x2c8>)
 8002ae2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002ae4:	b219      	sxth	r1, r3
 8002ae6:	4b52      	ldr	r3, [pc, #328]	; (8002c30 <main+0x2c0>)
 8002ae8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	b28b      	uxth	r3, r1
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	b21a      	sxth	r2, r3
 8002af6:	4b4e      	ldr	r3, [pc, #312]	; (8002c30 <main+0x2c0>)
 8002af8:	805a      	strh	r2, [r3, #2]
		  AccF.x = izracunajPovprecjeInt16(&AccX,Acc.x,50);
 8002afa:	4b4d      	ldr	r3, [pc, #308]	; (8002c30 <main+0x2c0>)
 8002afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b00:	2232      	movs	r2, #50	; 0x32
 8002b02:	4619      	mov	r1, r3
 8002b04:	4854      	ldr	r0, [pc, #336]	; (8002c58 <main+0x2e8>)
 8002b06:	f7ff fe0d 	bl	8002724 <izracunajPovprecjeInt16>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <main+0x2ec>)
 8002b10:	801a      	strh	r2, [r3, #0]
		  AccF.y = izracunajPovprecjeInt16(&AccY,Acc.y,50);
 8002b12:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <main+0x2c0>)
 8002b14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b18:	2232      	movs	r2, #50	; 0x32
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4850      	ldr	r0, [pc, #320]	; (8002c60 <main+0x2f0>)
 8002b1e:	f7ff fe01 	bl	8002724 <izracunajPovprecjeInt16>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b4d      	ldr	r3, [pc, #308]	; (8002c5c <main+0x2ec>)
 8002b28:	805a      	strh	r2, [r3, #2]
		  AccF.z = izracunajPovprecjeInt16(&AccZ,Acc.z,50);
 8002b2a:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <main+0x2c0>)
 8002b2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b30:	2232      	movs	r2, #50	; 0x32
 8002b32:	4619      	mov	r1, r3
 8002b34:	484b      	ldr	r0, [pc, #300]	; (8002c64 <main+0x2f4>)
 8002b36:	f7ff fdf5 	bl	8002724 <izracunajPovprecjeInt16>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <main+0x2ec>)
 8002b40:	809a      	strh	r2, [r3, #4]
		  AccReady = 0;
 8002b42:	4b44      	ldr	r3, [pc, #272]	; (8002c54 <main+0x2e4>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
	  }
	  if(GyroReady){
 8002b48:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <main+0x2f8>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d080      	beq.n	8002a54 <main+0xe4>
		  Gyro.x -= E.Gyrox;
 8002b52:	4b39      	ldr	r3, [pc, #228]	; (8002c38 <main+0x2c8>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	b219      	sxth	r1, r3
 8002b58:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <main+0x2bc>)
 8002b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	b28b      	uxth	r3, r1
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	b21a      	sxth	r2, r3
 8002b68:	4b30      	ldr	r3, [pc, #192]	; (8002c2c <main+0x2bc>)
 8002b6a:	801a      	strh	r2, [r3, #0]
		  Gyro.y -= E.Gyroy;
 8002b6c:	4b32      	ldr	r3, [pc, #200]	; (8002c38 <main+0x2c8>)
 8002b6e:	885b      	ldrh	r3, [r3, #2]
 8002b70:	b219      	sxth	r1, r3
 8002b72:	4b2e      	ldr	r3, [pc, #184]	; (8002c2c <main+0x2bc>)
 8002b74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	b28b      	uxth	r3, r1
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	b21a      	sxth	r2, r3
 8002b82:	4b2a      	ldr	r3, [pc, #168]	; (8002c2c <main+0x2bc>)
 8002b84:	805a      	strh	r2, [r3, #2]
		  Gyro.z -= E.Gyroz;
 8002b86:	4b2c      	ldr	r3, [pc, #176]	; (8002c38 <main+0x2c8>)
 8002b88:	889b      	ldrh	r3, [r3, #4]
 8002b8a:	b219      	sxth	r1, r3
 8002b8c:	4b27      	ldr	r3, [pc, #156]	; (8002c2c <main+0x2bc>)
 8002b8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	b28b      	uxth	r3, r1
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	b21a      	sxth	r2, r3
 8002b9c:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <main+0x2bc>)
 8002b9e:	809a      	strh	r2, [r3, #4]
		  GyroF.x = izracunajPovprecjeInt16(&GyroX,Gyro.x,50);
 8002ba0:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <main+0x2bc>)
 8002ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba6:	2232      	movs	r2, #50	; 0x32
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4830      	ldr	r0, [pc, #192]	; (8002c6c <main+0x2fc>)
 8002bac:	f7ff fdba 	bl	8002724 <izracunajPovprecjeInt16>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <main+0x300>)
 8002bb6:	801a      	strh	r2, [r3, #0]
		  GyroF.y = izracunajPovprecjeInt16(&GyroY,Gyro.y,50);
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <main+0x2bc>)
 8002bba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bbe:	2232      	movs	r2, #50	; 0x32
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	482c      	ldr	r0, [pc, #176]	; (8002c74 <main+0x304>)
 8002bc4:	f7ff fdae 	bl	8002724 <izracunajPovprecjeInt16>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b28      	ldr	r3, [pc, #160]	; (8002c70 <main+0x300>)
 8002bce:	805a      	strh	r2, [r3, #2]
		  GyroF.z = izracunajPovprecjeInt16(&GyroZ,Gyro.z,50);
 8002bd0:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <main+0x2bc>)
 8002bd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bd6:	2232      	movs	r2, #50	; 0x32
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4827      	ldr	r0, [pc, #156]	; (8002c78 <main+0x308>)
 8002bdc:	f7ff fda2 	bl	8002724 <izracunajPovprecjeInt16>
 8002be0:	4603      	mov	r3, r0
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <main+0x300>)
 8002be6:	809a      	strh	r2, [r3, #4]
		  GyroReady = 0;
 8002be8:	4b1f      	ldr	r3, [pc, #124]	; (8002c68 <main+0x2f8>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
		  //poracunamo podatke
		  float gx,gy,gz,ax,ay,az,mx,my,mz;

		  if(AccF.x == 0 && AccF.y == 0 && AccF.z==0){ax=0.0f; ay=0.0f; az=1.0f;}
 8002bee:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <main+0x2ec>)
 8002bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d141      	bne.n	8002c7c <main+0x30c>
 8002bf8:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <main+0x2ec>)
 8002bfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d13c      	bne.n	8002c7c <main+0x30c>
 8002c02:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <main+0x2ec>)
 8002c04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d137      	bne.n	8002c7c <main+0x30c>
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	e05d      	b.n	8002cdc <main+0x36c>
 8002c20:	20000634 	.word	0x20000634
 8002c24:	20000a00 	.word	0x20000a00
 8002c28:	2000055c 	.word	0x2000055c
 8002c2c:	20000a90 	.word	0x20000a90
 8002c30:	20000a58 	.word	0x20000a58
 8002c34:	20000810 	.word	0x20000810
 8002c38:	20000a68 	.word	0x20000a68
 8002c3c:	2000021a 	.word	0x2000021a
 8002c40:	20000710 	.word	0x20000710
 8002c44:	200008f8 	.word	0x200008f8
 8002c48:	20000448 	.word	0x20000448
 8002c4c:	20000818 	.word	0x20000818
 8002c50:	20000b38 	.word	0x20000b38
 8002c54:	20000219 	.word	0x20000219
 8002c58:	20000980 	.word	0x20000980
 8002c5c:	200006e8 	.word	0x200006e8
 8002c60:	200004dc 	.word	0x200004dc
 8002c64:	20000790 	.word	0x20000790
 8002c68:	20000218 	.word	0x20000218
 8002c6c:	200005b4 	.word	0x200005b4
 8002c70:	20000a60 	.word	0x20000a60
 8002c74:	20000900 	.word	0x20000900
 8002c78:	20000a98 	.word	0x20000a98
		  else{
			  ax = ((float)AccF.x) *0.0006103515f;
 8002c7c:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <main+0x40c>)
 8002c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c8a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002d80 <main+0x410>
 8002c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c92:	edc7 7a05 	vstr	s15, [r7, #20]
			  ay = ((float)AccF.y) *0.0006103515f;
 8002c96:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <main+0x40c>)
 8002c98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ca4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002d80 <main+0x410>
 8002ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cac:	edc7 7a04 	vstr	s15, [r7, #16]
			  az = ((float)AccF.z) *0.0006103515f;//+-2g  2/(2^16/2)
 8002cb0:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <main+0x40c>)
 8002cb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002cb6:	ee07 3a90 	vmov	s15, r3
 8002cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cbe:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002d80 <main+0x410>
 8002cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc6:	edc7 7a03 	vstr	s15, [r7, #12]
			  normalize_v3f(&ax,&ay,&az);
 8002cca:	f107 020c 	add.w	r2, r7, #12
 8002cce:	f107 0110 	add.w	r1, r7, #16
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fccc 	bl	8002674 <normalize_v3f>
		  }

		  gx = ((float)GyroF.x) * 0.0175f * DEG_TO_RAD*2; //deg/s obcutljivost 500dps
 8002cdc:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <main+0x414>)
 8002cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce2:	ee07 3a90 	vmov	s15, r3
 8002ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cea:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002d88 <main+0x418>
 8002cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cf2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002d8c <main+0x41c>
 8002cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cfa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002cfe:	edc7 7a08 	vstr	s15, [r7, #32]
		  gy = ((float)GyroF.y) * -0.0175f * DEG_TO_RAD*2;
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <main+0x414>)
 8002d04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d08:	ee07 3a90 	vmov	s15, r3
 8002d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d10:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002d90 <main+0x420>
 8002d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d18:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d8c <main+0x41c>
 8002d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d24:	edc7 7a07 	vstr	s15, [r7, #28]
		  gz = ((float)GyroF.z) * 0.0175f * DEG_TO_RAD*2;
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <main+0x414>)
 8002d2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d2e:	ee07 3a90 	vmov	s15, r3
 8002d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d36:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002d88 <main+0x418>
 8002d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d3e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002d8c <main+0x41c>
 8002d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d4a:	edc7 7a06 	vstr	s15, [r7, #24]

		  if(MagF.x == 0 && MagF.y == 0 && MagF.z==0){mx = 0.2f; my = 0.2f; mz = 0.1f;}
 8002d4e:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <main+0x424>)
 8002d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d123      	bne.n	8002da0 <main+0x430>
 8002d58:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <main+0x424>)
 8002d5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d11e      	bne.n	8002da0 <main+0x430>
 8002d62:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <main+0x424>)
 8002d64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d119      	bne.n	8002da0 <main+0x430>
 8002d6c:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <main+0x428>)
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <main+0x428>)
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <main+0x42c>)
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	e02d      	b.n	8002dd6 <main+0x466>
 8002d7a:	bf00      	nop
 8002d7c:	200006e8 	.word	0x200006e8
 8002d80:	3a1fffff 	.word	0x3a1fffff
 8002d84:	20000a60 	.word	0x20000a60
 8002d88:	3c8f5c29 	.word	0x3c8f5c29
 8002d8c:	3c8efa35 	.word	0x3c8efa35
 8002d90:	bc8f5c29 	.word	0xbc8f5c29
 8002d94:	200008f8 	.word	0x200008f8
 8002d98:	3e4ccccd 	.word	0x3e4ccccd
 8002d9c:	3dcccccd 	.word	0x3dcccccd
		  else{
			  mx = ((float)MagF.x);// * 0.0015f; //magnetic sesnetivity 1.5 mgauss/LSB
 8002da0:	4bd4      	ldr	r3, [pc, #848]	; (80030f4 <main+0x784>)
 8002da2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dae:	edc7 7a02 	vstr	s15, [r7, #8]
			  my = ((float)MagF.y);// * -0.0015f;
 8002db2:	4bd0      	ldr	r3, [pc, #832]	; (80030f4 <main+0x784>)
 8002db4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002db8:	ee07 3a90 	vmov	s15, r3
 8002dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dc0:	edc7 7a01 	vstr	s15, [r7, #4]
			  mz = ((float)MagF.z);// * 0.0015f;
 8002dc4:	4bcb      	ldr	r3, [pc, #812]	; (80030f4 <main+0x784>)
 8002dc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002dca:	ee07 3a90 	vmov	s15, r3
 8002dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dd2:	edc7 7a00 	vstr	s15, [r7]
		  }
		  normalize_v3f(&mx,&my,&mz);
 8002dd6:	463a      	mov	r2, r7
 8002dd8:	1d39      	adds	r1, r7, #4
 8002dda:	f107 0308 	add.w	r3, r7, #8
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fc48 	bl	8002674 <normalize_v3f>

		  //MadgwickAHRSupdate(gx,gy,gz,ax,ay,az,mx,my,mz);
		  MadgwickAHRSupdate(gx,gy,gz,ax,ay,az,0,0,0);
 8002de4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002de8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002dec:	edd7 6a03 	vldr	s13, [r7, #12]
 8002df0:	ed9f 4ac1 	vldr	s8, [pc, #772]	; 80030f8 <main+0x788>
 8002df4:	eddf 3ac0 	vldr	s7, [pc, #768]	; 80030f8 <main+0x788>
 8002df8:	ed9f 3abf 	vldr	s6, [pc, #764]	; 80030f8 <main+0x788>
 8002dfc:	eef0 2a66 	vmov.f32	s5, s13
 8002e00:	eeb0 2a47 	vmov.f32	s4, s14
 8002e04:	eef0 1a67 	vmov.f32	s3, s15
 8002e08:	ed97 1a06 	vldr	s2, [r7, #24]
 8002e0c:	edd7 0a07 	vldr	s1, [r7, #28]
 8002e10:	ed97 0a08 	vldr	s0, [r7, #32]
 8002e14:	f7fe f840 	bl	8000e98 <MadgwickAHRSupdate>
		  P.heading = atan2(2*(q0*q3+q1*q2),1-2*(q2*q2+q3*q3));//*(180/PI);
 8002e18:	4bb8      	ldr	r3, [pc, #736]	; (80030fc <main+0x78c>)
 8002e1a:	ed93 7a00 	vldr	s14, [r3]
 8002e1e:	4bb8      	ldr	r3, [pc, #736]	; (8003100 <main+0x790>)
 8002e20:	edd3 7a00 	vldr	s15, [r3]
 8002e24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e28:	4bb6      	ldr	r3, [pc, #728]	; (8003104 <main+0x794>)
 8002e2a:	edd3 6a00 	vldr	s13, [r3]
 8002e2e:	4bb6      	ldr	r3, [pc, #728]	; (8003108 <main+0x798>)
 8002e30:	edd3 7a00 	vldr	s15, [r3]
 8002e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e40:	ee17 0a90 	vmov	r0, s15
 8002e44:	f7fd fb2c 	bl	80004a0 <__aeabi_f2d>
 8002e48:	4604      	mov	r4, r0
 8002e4a:	460d      	mov	r5, r1
 8002e4c:	4bae      	ldr	r3, [pc, #696]	; (8003108 <main+0x798>)
 8002e4e:	ed93 7a00 	vldr	s14, [r3]
 8002e52:	4bad      	ldr	r3, [pc, #692]	; (8003108 <main+0x798>)
 8002e54:	edd3 7a00 	vldr	s15, [r3]
 8002e58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e5c:	4ba8      	ldr	r3, [pc, #672]	; (8003100 <main+0x790>)
 8002e5e:	edd3 6a00 	vldr	s13, [r3]
 8002e62:	4ba7      	ldr	r3, [pc, #668]	; (8003100 <main+0x790>)
 8002e64:	edd3 7a00 	vldr	s15, [r3]
 8002e68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e7c:	ee17 0a90 	vmov	r0, s15
 8002e80:	f7fd fb0e 	bl	80004a0 <__aeabi_f2d>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	ec43 2b11 	vmov	d1, r2, r3
 8002e8c:	ec45 4b10 	vmov	d0, r4, r5
 8002e90:	f008 fe98 	bl	800bbc4 <atan2>
 8002e94:	ec53 2b10 	vmov	r2, r3, d0
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f7fd fe30 	bl	8000b00 <__aeabi_d2f>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4a9a      	ldr	r2, [pc, #616]	; (800310c <main+0x79c>)
 8002ea4:	60d3      	str	r3, [r2, #12]
		  P.roll = atan2(2*(q0*q1+q2*q3),1-2*(q1*q1+q2*q2));//*(180/PI);
 8002ea6:	4b95      	ldr	r3, [pc, #596]	; (80030fc <main+0x78c>)
 8002ea8:	ed93 7a00 	vldr	s14, [r3]
 8002eac:	4b95      	ldr	r3, [pc, #596]	; (8003104 <main+0x794>)
 8002eae:	edd3 7a00 	vldr	s15, [r3]
 8002eb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eb6:	4b94      	ldr	r3, [pc, #592]	; (8003108 <main+0x798>)
 8002eb8:	edd3 6a00 	vldr	s13, [r3]
 8002ebc:	4b90      	ldr	r3, [pc, #576]	; (8003100 <main+0x790>)
 8002ebe:	edd3 7a00 	vldr	s15, [r3]
 8002ec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ece:	ee17 0a90 	vmov	r0, s15
 8002ed2:	f7fd fae5 	bl	80004a0 <__aeabi_f2d>
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	460d      	mov	r5, r1
 8002eda:	4b8a      	ldr	r3, [pc, #552]	; (8003104 <main+0x794>)
 8002edc:	ed93 7a00 	vldr	s14, [r3]
 8002ee0:	4b88      	ldr	r3, [pc, #544]	; (8003104 <main+0x794>)
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eea:	4b87      	ldr	r3, [pc, #540]	; (8003108 <main+0x798>)
 8002eec:	edd3 6a00 	vldr	s13, [r3]
 8002ef0:	4b85      	ldr	r3, [pc, #532]	; (8003108 <main+0x798>)
 8002ef2:	edd3 7a00 	vldr	s15, [r3]
 8002ef6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002efe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f0a:	ee17 0a90 	vmov	r0, s15
 8002f0e:	f7fd fac7 	bl	80004a0 <__aeabi_f2d>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	ec43 2b11 	vmov	d1, r2, r3
 8002f1a:	ec45 4b10 	vmov	d0, r4, r5
 8002f1e:	f008 fe51 	bl	800bbc4 <atan2>
 8002f22:	ec53 2b10 	vmov	r2, r3, d0
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f7fd fde9 	bl	8000b00 <__aeabi_d2f>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4a76      	ldr	r2, [pc, #472]	; (800310c <main+0x79c>)
 8002f32:	6093      	str	r3, [r2, #8]
		  P.pitch = asin(2*(q0*q2 - q3*q1));//*(180/PI);
 8002f34:	4b71      	ldr	r3, [pc, #452]	; (80030fc <main+0x78c>)
 8002f36:	ed93 7a00 	vldr	s14, [r3]
 8002f3a:	4b73      	ldr	r3, [pc, #460]	; (8003108 <main+0x798>)
 8002f3c:	edd3 7a00 	vldr	s15, [r3]
 8002f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f44:	4b6e      	ldr	r3, [pc, #440]	; (8003100 <main+0x790>)
 8002f46:	edd3 6a00 	vldr	s13, [r3]
 8002f4a:	4b6e      	ldr	r3, [pc, #440]	; (8003104 <main+0x794>)
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f5c:	ee17 0a90 	vmov	r0, s15
 8002f60:	f7fd fa9e 	bl	80004a0 <__aeabi_f2d>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	ec43 2b10 	vmov	d0, r2, r3
 8002f6c:	f008 fdf0 	bl	800bb50 <asin>
 8002f70:	ec53 2b10 	vmov	r2, r3, d0
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	f7fd fdc2 	bl	8000b00 <__aeabi_d2f>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4a63      	ldr	r2, [pc, #396]	; (800310c <main+0x79c>)
 8002f80:	6053      	str	r3, [r2, #4]
		  P.Q0 = q0; P.Q1 = q1; P.Q2 = q2; P.Q3 = q3;
 8002f82:	4b5e      	ldr	r3, [pc, #376]	; (80030fc <main+0x78c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a61      	ldr	r2, [pc, #388]	; (800310c <main+0x79c>)
 8002f88:	6113      	str	r3, [r2, #16]
 8002f8a:	4b5e      	ldr	r3, [pc, #376]	; (8003104 <main+0x794>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a5f      	ldr	r2, [pc, #380]	; (800310c <main+0x79c>)
 8002f90:	6153      	str	r3, [r2, #20]
 8002f92:	4b5d      	ldr	r3, [pc, #372]	; (8003108 <main+0x798>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a5d      	ldr	r2, [pc, #372]	; (800310c <main+0x79c>)
 8002f98:	6193      	str	r3, [r2, #24]
 8002f9a:	4b59      	ldr	r3, [pc, #356]	; (8003100 <main+0x790>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a5b      	ldr	r2, [pc, #364]	; (800310c <main+0x79c>)
 8002fa0:	61d3      	str	r3, [r2, #28]


		  //rotiraj po X za roll
		  ay = ay*cos(P.roll)-az*sin(P.roll);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd fa7b 	bl	80004a0 <__aeabi_f2d>
 8002faa:	4604      	mov	r4, r0
 8002fac:	460d      	mov	r5, r1
 8002fae:	4b57      	ldr	r3, [pc, #348]	; (800310c <main+0x79c>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd fa74 	bl	80004a0 <__aeabi_f2d>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	ec43 2b10 	vmov	d0, r2, r3
 8002fc0:	f008 fd22 	bl	800ba08 <cos>
 8002fc4:	ec53 2b10 	vmov	r2, r3, d0
 8002fc8:	4620      	mov	r0, r4
 8002fca:	4629      	mov	r1, r5
 8002fcc:	f7fd fac0 	bl	8000550 <__aeabi_dmul>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4690      	mov	r8, r2
 8002fd6:	4699      	mov	r9, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fa60 	bl	80004a0 <__aeabi_f2d>
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	460d      	mov	r5, r1
 8002fe4:	4b49      	ldr	r3, [pc, #292]	; (800310c <main+0x79c>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fa59 	bl	80004a0 <__aeabi_f2d>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	ec43 2b10 	vmov	d0, r2, r3
 8002ff6:	f008 fd57 	bl	800baa8 <sin>
 8002ffa:	ec53 2b10 	vmov	r2, r3, d0
 8002ffe:	4620      	mov	r0, r4
 8003000:	4629      	mov	r1, r5
 8003002:	f7fd faa5 	bl	8000550 <__aeabi_dmul>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4640      	mov	r0, r8
 800300c:	4649      	mov	r1, r9
 800300e:	f7fd f8e7 	bl	80001e0 <__aeabi_dsub>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4610      	mov	r0, r2
 8003018:	4619      	mov	r1, r3
 800301a:	f7fd fd71 	bl	8000b00 <__aeabi_d2f>
 800301e:	4603      	mov	r3, r0
 8003020:	613b      	str	r3, [r7, #16]
		  az = ay*sin(P.roll)+az*cos(P.roll);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd fa3b 	bl	80004a0 <__aeabi_f2d>
 800302a:	4604      	mov	r4, r0
 800302c:	460d      	mov	r5, r1
 800302e:	4b37      	ldr	r3, [pc, #220]	; (800310c <main+0x79c>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd fa34 	bl	80004a0 <__aeabi_f2d>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	ec43 2b10 	vmov	d0, r2, r3
 8003040:	f008 fd32 	bl	800baa8 <sin>
 8003044:	ec53 2b10 	vmov	r2, r3, d0
 8003048:	4620      	mov	r0, r4
 800304a:	4629      	mov	r1, r5
 800304c:	f7fd fa80 	bl	8000550 <__aeabi_dmul>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4690      	mov	r8, r2
 8003056:	4699      	mov	r9, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fa20 	bl	80004a0 <__aeabi_f2d>
 8003060:	4604      	mov	r4, r0
 8003062:	460d      	mov	r5, r1
 8003064:	4b29      	ldr	r3, [pc, #164]	; (800310c <main+0x79c>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fa19 	bl	80004a0 <__aeabi_f2d>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	ec43 2b10 	vmov	d0, r2, r3
 8003076:	f008 fcc7 	bl	800ba08 <cos>
 800307a:	ec53 2b10 	vmov	r2, r3, d0
 800307e:	4620      	mov	r0, r4
 8003080:	4629      	mov	r1, r5
 8003082:	f7fd fa65 	bl	8000550 <__aeabi_dmul>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4640      	mov	r0, r8
 800308c:	4649      	mov	r1, r9
 800308e:	f7fd f8a9 	bl	80001e4 <__adddf3>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4610      	mov	r0, r2
 8003098:	4619      	mov	r1, r3
 800309a:	f7fd fd31 	bl	8000b00 <__aeabi_d2f>
 800309e:	4603      	mov	r3, r0
 80030a0:	60fb      	str	r3, [r7, #12]
		  //rotiraj vektor okoli Y za pitch
		  ax = ax*cos(-P.pitch)-az*sin(-P.pitch);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fd f9fb 	bl	80004a0 <__aeabi_f2d>
 80030aa:	4604      	mov	r4, r0
 80030ac:	460d      	mov	r5, r1
 80030ae:	4b17      	ldr	r3, [pc, #92]	; (800310c <main+0x79c>)
 80030b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80030b4:	eef1 7a67 	vneg.f32	s15, s15
 80030b8:	ee17 3a90 	vmov	r3, s15
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd f9ef 	bl	80004a0 <__aeabi_f2d>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	ec43 2b10 	vmov	d0, r2, r3
 80030ca:	f008 fc9d 	bl	800ba08 <cos>
 80030ce:	ec53 2b10 	vmov	r2, r3, d0
 80030d2:	4620      	mov	r0, r4
 80030d4:	4629      	mov	r1, r5
 80030d6:	f7fd fa3b 	bl	8000550 <__aeabi_dmul>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4690      	mov	r8, r2
 80030e0:	4699      	mov	r9, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd f9db 	bl	80004a0 <__aeabi_f2d>
 80030ea:	4604      	mov	r4, r0
 80030ec:	460d      	mov	r5, r1
 80030ee:	4b07      	ldr	r3, [pc, #28]	; (800310c <main+0x79c>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	e00d      	b.n	8003110 <main+0x7a0>
 80030f4:	200008f8 	.word	0x200008f8
 80030f8:	00000000 	.word	0x00000000
 80030fc:	20000004 	.word	0x20000004
 8003100:	20000214 	.word	0x20000214
 8003104:	2000020c 	.word	0x2000020c
 8003108:	20000210 	.word	0x20000210
 800310c:	20000b38 	.word	0x20000b38
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd f9c5 	bl	80004a0 <__aeabi_f2d>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	ec43 2b10 	vmov	d0, r2, r3
 800311e:	f008 fcc3 	bl	800baa8 <sin>
 8003122:	ec53 2b10 	vmov	r2, r3, d0
 8003126:	4620      	mov	r0, r4
 8003128:	4629      	mov	r1, r5
 800312a:	f7fd fa11 	bl	8000550 <__aeabi_dmul>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4640      	mov	r0, r8
 8003134:	4649      	mov	r1, r9
 8003136:	f7fd f855 	bl	80001e4 <__adddf3>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4610      	mov	r0, r2
 8003140:	4619      	mov	r1, r3
 8003142:	f7fd fcdd 	bl	8000b00 <__aeabi_d2f>
 8003146:	4603      	mov	r3, r0
 8003148:	617b      	str	r3, [r7, #20]
		  az = -ax*sin(-P.pitch)+az*cos(-P.pitch);
 800314a:	edd7 7a05 	vldr	s15, [r7, #20]
 800314e:	eef1 7a67 	vneg.f32	s15, s15
 8003152:	ee17 3a90 	vmov	r3, s15
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd f9a2 	bl	80004a0 <__aeabi_f2d>
 800315c:	4604      	mov	r4, r0
 800315e:	460d      	mov	r5, r1
 8003160:	4b6b      	ldr	r3, [pc, #428]	; (8003310 <main+0x9a0>)
 8003162:	edd3 7a01 	vldr	s15, [r3, #4]
 8003166:	eef1 7a67 	vneg.f32	s15, s15
 800316a:	ee17 3a90 	vmov	r3, s15
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd f996 	bl	80004a0 <__aeabi_f2d>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	ec43 2b10 	vmov	d0, r2, r3
 800317c:	f008 fc94 	bl	800baa8 <sin>
 8003180:	ec53 2b10 	vmov	r2, r3, d0
 8003184:	4620      	mov	r0, r4
 8003186:	4629      	mov	r1, r5
 8003188:	f7fd f9e2 	bl	8000550 <__aeabi_dmul>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4690      	mov	r8, r2
 8003192:	4699      	mov	r9, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd f982 	bl	80004a0 <__aeabi_f2d>
 800319c:	4604      	mov	r4, r0
 800319e:	460d      	mov	r5, r1
 80031a0:	4b5b      	ldr	r3, [pc, #364]	; (8003310 <main+0x9a0>)
 80031a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80031a6:	eef1 7a67 	vneg.f32	s15, s15
 80031aa:	ee17 3a90 	vmov	r3, s15
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd f976 	bl	80004a0 <__aeabi_f2d>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	ec43 2b10 	vmov	d0, r2, r3
 80031bc:	f008 fc24 	bl	800ba08 <cos>
 80031c0:	ec53 2b10 	vmov	r2, r3, d0
 80031c4:	4620      	mov	r0, r4
 80031c6:	4629      	mov	r1, r5
 80031c8:	f7fd f9c2 	bl	8000550 <__aeabi_dmul>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4640      	mov	r0, r8
 80031d2:	4649      	mov	r1, r9
 80031d4:	f7fd f806 	bl	80001e4 <__adddf3>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4610      	mov	r0, r2
 80031de:	4619      	mov	r1, r3
 80031e0:	f7fd fc8e 	bl	8000b00 <__aeabi_d2f>
 80031e4:	4603      	mov	r3, r0
 80031e6:	60fb      	str	r3, [r7, #12]

		  //pretvorimo v globalni kordinatni sistem

		  if(ax > 0.0005 || ay > 0.0005){
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd f958 	bl	80004a0 <__aeabi_f2d>
 80031f0:	a343      	add	r3, pc, #268	; (adr r3, 8003300 <main+0x990>)
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	f7fd fc3b 	bl	8000a70 <__aeabi_dcmpgt>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10b      	bne.n	8003218 <main+0x8a8>
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd f94c 	bl	80004a0 <__aeabi_f2d>
 8003208:	a33d      	add	r3, pc, #244	; (adr r3, 8003300 <main+0x990>)
 800320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320e:	f7fd fc2f 	bl	8000a70 <__aeabi_dcmpgt>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d057      	beq.n	80032c8 <main+0x958>
			  P.pozX = Xold + 0.5*ax*0.025;
 8003218:	4b3e      	ldr	r3, [pc, #248]	; (8003314 <main+0x9a4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd f93f 	bl	80004a0 <__aeabi_f2d>
 8003222:	4604      	mov	r4, r0
 8003224:	460d      	mov	r5, r1
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd f939 	bl	80004a0 <__aeabi_f2d>
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	4b39      	ldr	r3, [pc, #228]	; (8003318 <main+0x9a8>)
 8003234:	f7fd f98c 	bl	8000550 <__aeabi_dmul>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	a331      	add	r3, pc, #196	; (adr r3, 8003308 <main+0x998>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	f7fd f983 	bl	8000550 <__aeabi_dmul>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4620      	mov	r0, r4
 8003250:	4629      	mov	r1, r5
 8003252:	f7fc ffc7 	bl	80001e4 <__adddf3>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	f7fd fc4f 	bl	8000b00 <__aeabi_d2f>
 8003262:	4603      	mov	r3, r0
 8003264:	4a2a      	ldr	r2, [pc, #168]	; (8003310 <main+0x9a0>)
 8003266:	6213      	str	r3, [r2, #32]
			  P.pozY = Yold + 0.5*ay*0.025;
 8003268:	4b2c      	ldr	r3, [pc, #176]	; (800331c <main+0x9ac>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7fd f917 	bl	80004a0 <__aeabi_f2d>
 8003272:	4604      	mov	r4, r0
 8003274:	460d      	mov	r5, r1
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd f911 	bl	80004a0 <__aeabi_f2d>
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	4b25      	ldr	r3, [pc, #148]	; (8003318 <main+0x9a8>)
 8003284:	f7fd f964 	bl	8000550 <__aeabi_dmul>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	a31d      	add	r3, pc, #116	; (adr r3, 8003308 <main+0x998>)
 8003292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003296:	f7fd f95b 	bl	8000550 <__aeabi_dmul>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4620      	mov	r0, r4
 80032a0:	4629      	mov	r1, r5
 80032a2:	f7fc ff9f 	bl	80001e4 <__adddf3>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	f7fd fc27 	bl	8000b00 <__aeabi_d2f>
 80032b2:	4603      	mov	r3, r0
 80032b4:	4a16      	ldr	r2, [pc, #88]	; (8003310 <main+0x9a0>)
 80032b6:	6253      	str	r3, [r2, #36]	; 0x24
			  Xold = P.pozX;
 80032b8:	4b15      	ldr	r3, [pc, #84]	; (8003310 <main+0x9a0>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4a15      	ldr	r2, [pc, #84]	; (8003314 <main+0x9a4>)
 80032be:	6013      	str	r3, [r2, #0]
			  Yold = P.pozY;
 80032c0:	4b13      	ldr	r3, [pc, #76]	; (8003310 <main+0x9a0>)
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	4a15      	ldr	r2, [pc, #84]	; (800331c <main+0x9ac>)
 80032c6:	6013      	str	r3, [r2, #0]
		  }
		  P.magX = ax;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	4a11      	ldr	r2, [pc, #68]	; (8003310 <main+0x9a0>)
 80032cc:	6293      	str	r3, [r2, #40]	; 0x28
		  P.magY = ay;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4a0f      	ldr	r2, [pc, #60]	; (8003310 <main+0x9a0>)
 80032d2:	62d3      	str	r3, [r2, #44]	; 0x2c
		  P.magZ = az;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4a0e      	ldr	r2, [pc, #56]	; (8003310 <main+0x9a0>)
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30


		  for(int n=4; n<30; n++){ //pripravi podatke za spi
 80032da:	2304      	movs	r3, #4
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
 80032de:	e00a      	b.n	80032f6 <main+0x986>
			  SpiTxData[n-4] = ((uint8_t*)&P)[n];
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <main+0x9a0>)
 80032e4:	441a      	add	r2, r3
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	3b04      	subs	r3, #4
 80032ea:	7811      	ldrb	r1, [r2, #0]
 80032ec:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <main+0x9b0>)
 80032ee:	54d1      	strb	r1, [r2, r3]
		  for(int n=4; n<30; n++){ //pripravi podatke za spi
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	3301      	adds	r3, #1
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	2b1d      	cmp	r3, #29
 80032fa:	ddf1      	ble.n	80032e0 <main+0x970>
	  if(MagReady){
 80032fc:	f7ff bbaa 	b.w	8002a54 <main+0xe4>
 8003300:	d2f1a9fc 	.word	0xd2f1a9fc
 8003304:	3f40624d 	.word	0x3f40624d
 8003308:	9999999a 	.word	0x9999999a
 800330c:	3f999999 	.word	0x3f999999
 8003310:	20000b38 	.word	0x20000b38
 8003314:	2000021c 	.word	0x2000021c
 8003318:	3fe00000 	.word	0x3fe00000
 800331c:	20000220 	.word	0x20000220
 8003320:	20000b18 	.word	0x20000b18

08003324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b094      	sub	sp, #80	; 0x50
 8003328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800332a:	f107 0320 	add.w	r3, r7, #32
 800332e:	2230      	movs	r2, #48	; 0x30
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f008 fb60 	bl	800b9f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003338:	f107 030c 	add.w	r3, r7, #12
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003348:	2300      	movs	r3, #0
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	4b27      	ldr	r3, [pc, #156]	; (80033ec <SystemClock_Config+0xc8>)
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	4a26      	ldr	r2, [pc, #152]	; (80033ec <SystemClock_Config+0xc8>)
 8003352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003356:	6413      	str	r3, [r2, #64]	; 0x40
 8003358:	4b24      	ldr	r3, [pc, #144]	; (80033ec <SystemClock_Config+0xc8>)
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003364:	2300      	movs	r3, #0
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <SystemClock_Config+0xcc>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a20      	ldr	r2, [pc, #128]	; (80033f0 <SystemClock_Config+0xcc>)
 800336e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <SystemClock_Config+0xcc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003380:	2301      	movs	r3, #1
 8003382:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800338a:	2302      	movs	r3, #2
 800338c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800338e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003392:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003394:	2304      	movs	r3, #4
 8003396:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003398:	23a8      	movs	r3, #168	; 0xa8
 800339a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800339c:	2304      	movs	r3, #4
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80033a0:	2307      	movs	r3, #7
 80033a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033a4:	f107 0320 	add.w	r3, r7, #32
 80033a8:	4618      	mov	r0, r3
 80033aa:	f003 fbcb 	bl	8006b44 <HAL_RCC_OscConfig>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80033b4:	f000 fa2a 	bl	800380c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033b8:	230f      	movs	r3, #15
 80033ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033bc:	2302      	movs	r3, #2
 80033be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033ce:	f107 030c 	add.w	r3, r7, #12
 80033d2:	2102      	movs	r1, #2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f003 fe2d 	bl	8007034 <HAL_RCC_ClockConfig>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80033e0:	f000 fa14 	bl	800380c <Error_Handler>
  }
}
 80033e4:	bf00      	nop
 80033e6:	3750      	adds	r7, #80	; 0x50
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40007000 	.word	0x40007000

080033f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033f8:	4b12      	ldr	r3, [pc, #72]	; (8003444 <MX_I2C1_Init+0x50>)
 80033fa:	4a13      	ldr	r2, [pc, #76]	; (8003448 <MX_I2C1_Init+0x54>)
 80033fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80033fe:	4b11      	ldr	r3, [pc, #68]	; (8003444 <MX_I2C1_Init+0x50>)
 8003400:	4a12      	ldr	r2, [pc, #72]	; (800344c <MX_I2C1_Init+0x58>)
 8003402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <MX_I2C1_Init+0x50>)
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800340a:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <MX_I2C1_Init+0x50>)
 800340c:	2200      	movs	r2, #0
 800340e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <MX_I2C1_Init+0x50>)
 8003412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003416:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <MX_I2C1_Init+0x50>)
 800341a:	2200      	movs	r2, #0
 800341c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800341e:	4b09      	ldr	r3, [pc, #36]	; (8003444 <MX_I2C1_Init+0x50>)
 8003420:	2200      	movs	r2, #0
 8003422:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003424:	4b07      	ldr	r3, [pc, #28]	; (8003444 <MX_I2C1_Init+0x50>)
 8003426:	2200      	movs	r2, #0
 8003428:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <MX_I2C1_Init+0x50>)
 800342c:	2200      	movs	r2, #0
 800342e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003430:	4804      	ldr	r0, [pc, #16]	; (8003444 <MX_I2C1_Init+0x50>)
 8003432:	f001 fa45 	bl	80048c0 <HAL_I2C_Init>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800343c:	f000 f9e6 	bl	800380c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003440:	bf00      	nop
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000634 	.word	0x20000634
 8003448:	40005400 	.word	0x40005400
 800344c:	00061a80 	.word	0x00061a80

08003450 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003454:	4b17      	ldr	r3, [pc, #92]	; (80034b4 <MX_SPI1_Init+0x64>)
 8003456:	4a18      	ldr	r2, [pc, #96]	; (80034b8 <MX_SPI1_Init+0x68>)
 8003458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800345a:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <MX_SPI1_Init+0x64>)
 800345c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003462:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <MX_SPI1_Init+0x64>)
 8003464:	2200      	movs	r2, #0
 8003466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003468:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <MX_SPI1_Init+0x64>)
 800346a:	2200      	movs	r2, #0
 800346c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800346e:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <MX_SPI1_Init+0x64>)
 8003470:	2200      	movs	r2, #0
 8003472:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003474:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <MX_SPI1_Init+0x64>)
 8003476:	2201      	movs	r2, #1
 8003478:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <MX_SPI1_Init+0x64>)
 800347c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003480:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <MX_SPI1_Init+0x64>)
 8003484:	2218      	movs	r2, #24
 8003486:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003488:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <MX_SPI1_Init+0x64>)
 800348a:	2200      	movs	r2, #0
 800348c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <MX_SPI1_Init+0x64>)
 8003490:	2200      	movs	r2, #0
 8003492:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <MX_SPI1_Init+0x64>)
 8003496:	2200      	movs	r2, #0
 8003498:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <MX_SPI1_Init+0x64>)
 800349c:	220a      	movs	r2, #10
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80034a0:	4804      	ldr	r0, [pc, #16]	; (80034b4 <MX_SPI1_Init+0x64>)
 80034a2:	f003 ffaf 	bl	8007404 <HAL_SPI_Init>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80034ac:	f000 f9ae 	bl	800380c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80034b0:	bf00      	nop
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000a00 	.word	0x20000a00
 80034b8:	40013000 	.word	0x40013000

080034bc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <MX_SPI5_Init+0x5c>)
 80034c2:	4a16      	ldr	r2, [pc, #88]	; (800351c <MX_SPI5_Init+0x60>)
 80034c4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 80034c6:	4b14      	ldr	r3, [pc, #80]	; (8003518 <MX_SPI5_Init+0x5c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80034cc:	4b12      	ldr	r3, [pc, #72]	; (8003518 <MX_SPI5_Init+0x5c>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <MX_SPI5_Init+0x5c>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034d8:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <MX_SPI5_Init+0x5c>)
 80034da:	2200      	movs	r2, #0
 80034dc:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034de:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <MX_SPI5_Init+0x5c>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80034e4:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <MX_SPI5_Init+0x5c>)
 80034e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ea:	619a      	str	r2, [r3, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <MX_SPI5_Init+0x5c>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <MX_SPI5_Init+0x5c>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034f8:	4b07      	ldr	r3, [pc, #28]	; (8003518 <MX_SPI5_Init+0x5c>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <MX_SPI5_Init+0x5c>)
 8003500:	220a      	movs	r2, #10
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003504:	4804      	ldr	r0, [pc, #16]	; (8003518 <MX_SPI5_Init+0x5c>)
 8003506:	f003 ff7d 	bl	8007404 <HAL_SPI_Init>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_SPI5_Init+0x58>
  {
    Error_Handler();
 8003510:	f000 f97c 	bl	800380c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003514:	bf00      	nop
 8003516:	bd80      	pop	{r7, pc}
 8003518:	2000055c 	.word	0x2000055c
 800351c:	40015000 	.word	0x40015000

08003520 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	607b      	str	r3, [r7, #4]
 800352a:	4b10      	ldr	r3, [pc, #64]	; (800356c <MX_DMA_Init+0x4c>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	4a0f      	ldr	r2, [pc, #60]	; (800356c <MX_DMA_Init+0x4c>)
 8003530:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003534:	6313      	str	r3, [r2, #48]	; 0x30
 8003536:	4b0d      	ldr	r3, [pc, #52]	; (800356c <MX_DMA_Init+0x4c>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353e:	607b      	str	r3, [r7, #4]
 8003540:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2100      	movs	r1, #0
 8003546:	203b      	movs	r0, #59	; 0x3b
 8003548:	f000 fce3 	bl	8003f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800354c:	203b      	movs	r0, #59	; 0x3b
 800354e:	f000 fcfc 	bl	8003f4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8003552:	2200      	movs	r2, #0
 8003554:	2100      	movs	r1, #0
 8003556:	203c      	movs	r0, #60	; 0x3c
 8003558:	f000 fcdb 	bl	8003f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800355c:	203c      	movs	r0, #60	; 0x3c
 800355e:	f000 fcf4 	bl	8003f4a <HAL_NVIC_EnableIRQ>

}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40023800 	.word	0x40023800

08003570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08c      	sub	sp, #48	; 0x30
 8003574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003576:	f107 031c 	add.w	r3, r7, #28
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	609a      	str	r2, [r3, #8]
 8003582:	60da      	str	r2, [r3, #12]
 8003584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	4b9a      	ldr	r3, [pc, #616]	; (80037f4 <MX_GPIO_Init+0x284>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	4a99      	ldr	r2, [pc, #612]	; (80037f4 <MX_GPIO_Init+0x284>)
 8003590:	f043 0310 	orr.w	r3, r3, #16
 8003594:	6313      	str	r3, [r2, #48]	; 0x30
 8003596:	4b97      	ldr	r3, [pc, #604]	; (80037f4 <MX_GPIO_Init+0x284>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	61bb      	str	r3, [r7, #24]
 80035a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	4b93      	ldr	r3, [pc, #588]	; (80037f4 <MX_GPIO_Init+0x284>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	4a92      	ldr	r2, [pc, #584]	; (80037f4 <MX_GPIO_Init+0x284>)
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	6313      	str	r3, [r2, #48]	; 0x30
 80035b2:	4b90      	ldr	r3, [pc, #576]	; (80037f4 <MX_GPIO_Init+0x284>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	4b8c      	ldr	r3, [pc, #560]	; (80037f4 <MX_GPIO_Init+0x284>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	4a8b      	ldr	r2, [pc, #556]	; (80037f4 <MX_GPIO_Init+0x284>)
 80035c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035cc:	6313      	str	r3, [r2, #48]	; 0x30
 80035ce:	4b89      	ldr	r3, [pc, #548]	; (80037f4 <MX_GPIO_Init+0x284>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	4b85      	ldr	r3, [pc, #532]	; (80037f4 <MX_GPIO_Init+0x284>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	4a84      	ldr	r2, [pc, #528]	; (80037f4 <MX_GPIO_Init+0x284>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ea:	4b82      	ldr	r3, [pc, #520]	; (80037f4 <MX_GPIO_Init+0x284>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	4b7e      	ldr	r3, [pc, #504]	; (80037f4 <MX_GPIO_Init+0x284>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	4a7d      	ldr	r2, [pc, #500]	; (80037f4 <MX_GPIO_Init+0x284>)
 8003600:	f043 0302 	orr.w	r3, r3, #2
 8003604:	6313      	str	r3, [r2, #48]	; 0x30
 8003606:	4b7b      	ldr	r3, [pc, #492]	; (80037f4 <MX_GPIO_Init+0x284>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	4b77      	ldr	r3, [pc, #476]	; (80037f4 <MX_GPIO_Init+0x284>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a76      	ldr	r2, [pc, #472]	; (80037f4 <MX_GPIO_Init+0x284>)
 800361c:	f043 0308 	orr.w	r3, r3, #8
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b74      	ldr	r3, [pc, #464]	; (80037f4 <MX_GPIO_Init+0x284>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	607b      	str	r3, [r7, #4]
 800362c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_SPI1_Pin|mf_lf_Pin|mb_lf_Pin|GPIO_PIN_9
 800362e:	2200      	movs	r2, #0
 8003630:	f647 7188 	movw	r1, #32648	; 0x7f88
 8003634:	4870      	ldr	r0, [pc, #448]	; (80037f8 <MX_GPIO_Init+0x288>)
 8003636:	f001 f911 	bl	800485c <HAL_GPIO_WritePin>
                          |mb_rb_Pin|GPIO_PIN_11|mf_rb_Pin|GPIO_PIN_13
                          |mb_lb_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800363a:	2201      	movs	r2, #1
 800363c:	2101      	movs	r1, #1
 800363e:	486f      	ldr	r0, [pc, #444]	; (80037fc <MX_GPIO_Init+0x28c>)
 8003640:	f001 f90c 	bl	800485c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8003644:	2200      	movs	r2, #0
 8003646:	2104      	movs	r1, #4
 8003648:	486d      	ldr	r0, [pc, #436]	; (8003800 <MX_GPIO_Init+0x290>)
 800364a:	f001 f907 	bl	800485c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800364e:	2200      	movs	r2, #0
 8003650:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003654:	486b      	ldr	r0, [pc, #428]	; (8003804 <MX_GPIO_Init+0x294>)
 8003656:	f001 f901 	bl	800485c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_1;
 800365a:	2316      	movs	r3, #22
 800365c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800365e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	2300      	movs	r3, #0
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003668:	f107 031c 	add.w	r3, r7, #28
 800366c:	4619      	mov	r1, r3
 800366e:	4862      	ldr	r0, [pc, #392]	; (80037f8 <MX_GPIO_Init+0x288>)
 8003670:	f000 ff70 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SPI1_Pin */
  GPIO_InitStruct.Pin = CS_SPI1_Pin;
 8003674:	2308      	movs	r3, #8
 8003676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003678:	2301      	movs	r3, #1
 800367a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003680:	2302      	movs	r3, #2
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_SPI1_GPIO_Port, &GPIO_InitStruct);
 8003684:	f107 031c 	add.w	r3, r7, #28
 8003688:	4619      	mov	r1, r3
 800368a:	485b      	ldr	r0, [pc, #364]	; (80037f8 <MX_GPIO_Init+0x288>)
 800368c:	f000 ff62 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003690:	2301      	movs	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003694:	2301      	movs	r3, #1
 8003696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003698:	2300      	movs	r3, #0
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369c:	2300      	movs	r3, #0
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80036a0:	f107 031c 	add.w	r3, r7, #28
 80036a4:	4619      	mov	r1, r3
 80036a6:	4855      	ldr	r0, [pc, #340]	; (80037fc <MX_GPIO_Init+0x28c>)
 80036a8:	f000 ff54 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80036ac:	2308      	movs	r3, #8
 80036ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b0:	2302      	movs	r3, #2
 80036b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b8:	2300      	movs	r3, #0
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036bc:	2305      	movs	r3, #5
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80036c0:	f107 031c 	add.w	r3, r7, #28
 80036c4:	4619      	mov	r1, r3
 80036c6:	484d      	ldr	r0, [pc, #308]	; (80037fc <MX_GPIO_Init+0x28c>)
 80036c8:	f000 ff44 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036cc:	2301      	movs	r3, #1
 80036ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036d0:	2300      	movs	r3, #0
 80036d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d8:	f107 031c 	add.w	r3, r7, #28
 80036dc:	4619      	mov	r1, r3
 80036de:	484a      	ldr	r0, [pc, #296]	; (8003808 <MX_GPIO_Init+0x298>)
 80036e0:	f000 ff38 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80036e4:	2310      	movs	r3, #16
 80036e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e8:	2302      	movs	r3, #2
 80036ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f0:	2300      	movs	r3, #0
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036f4:	2306      	movs	r3, #6
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80036f8:	f107 031c 	add.w	r3, r7, #28
 80036fc:	4619      	mov	r1, r3
 80036fe:	4842      	ldr	r0, [pc, #264]	; (8003808 <MX_GPIO_Init+0x298>)
 8003700:	f000 ff28 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003704:	2304      	movs	r3, #4
 8003706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003708:	2301      	movs	r3, #1
 800370a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	2300      	movs	r3, #0
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003710:	2300      	movs	r3, #0
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003714:	f107 031c 	add.w	r3, r7, #28
 8003718:	4619      	mov	r1, r3
 800371a:	4839      	ldr	r0, [pc, #228]	; (8003800 <MX_GPIO_Init+0x290>)
 800371c:	f000 ff1a 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pins : mf_lf_Pin mb_lf_Pin PE9 mb_rb_Pin
                           PE11 mf_rb_Pin PE13 mb_lb_Pin */
  GPIO_InitStruct.Pin = mf_lf_Pin|mb_lf_Pin|GPIO_PIN_9|mb_rb_Pin
 8003720:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 8003724:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|mf_rb_Pin|GPIO_PIN_13|mb_lb_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003726:	2301      	movs	r3, #1
 8003728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372e:	2300      	movs	r3, #0
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003732:	f107 031c 	add.w	r3, r7, #28
 8003736:	4619      	mov	r1, r3
 8003738:	482f      	ldr	r0, [pc, #188]	; (80037f8 <MX_GPIO_Init+0x288>)
 800373a:	f000 ff0b 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800373e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374c:	2300      	movs	r3, #0
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003750:	2305      	movs	r3, #5
 8003752:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003754:	f107 031c 	add.w	r3, r7, #28
 8003758:	4619      	mov	r1, r3
 800375a:	4829      	ldr	r0, [pc, #164]	; (8003800 <MX_GPIO_Init+0x290>)
 800375c:	f000 fefa 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003760:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003764:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003766:	2301      	movs	r3, #1
 8003768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376e:	2300      	movs	r3, #0
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003772:	f107 031c 	add.w	r3, r7, #28
 8003776:	4619      	mov	r1, r3
 8003778:	4822      	ldr	r0, [pc, #136]	; (8003804 <MX_GPIO_Init+0x294>)
 800377a:	f000 feeb 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800377e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003784:	2302      	movs	r3, #2
 8003786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003788:	2300      	movs	r3, #0
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378c:	2300      	movs	r3, #0
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003790:	2306      	movs	r3, #6
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003794:	f107 031c 	add.w	r3, r7, #28
 8003798:	4619      	mov	r1, r3
 800379a:	4818      	ldr	r0, [pc, #96]	; (80037fc <MX_GPIO_Init+0x28c>)
 800379c:	f000 feda 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80037a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037a6:	2300      	movs	r3, #0
 80037a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ae:	f107 031c 	add.w	r3, r7, #28
 80037b2:	4619      	mov	r1, r3
 80037b4:	4811      	ldr	r0, [pc, #68]	; (80037fc <MX_GPIO_Init+0x28c>)
 80037b6:	f000 fecd 	bl	8004554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80037ba:	2200      	movs	r2, #0
 80037bc:	2100      	movs	r1, #0
 80037be:	2007      	movs	r0, #7
 80037c0:	f000 fba7 	bl	8003f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80037c4:	2007      	movs	r0, #7
 80037c6:	f000 fbc0 	bl	8003f4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80037ca:	2200      	movs	r2, #0
 80037cc:	2100      	movs	r1, #0
 80037ce:	2008      	movs	r0, #8
 80037d0:	f000 fb9f 	bl	8003f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80037d4:	2008      	movs	r0, #8
 80037d6:	f000 fbb8 	bl	8003f4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80037da:	2200      	movs	r2, #0
 80037dc:	2100      	movs	r1, #0
 80037de:	200a      	movs	r0, #10
 80037e0:	f000 fb97 	bl	8003f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80037e4:	200a      	movs	r0, #10
 80037e6:	f000 fbb0 	bl	8003f4a <HAL_NVIC_EnableIRQ>

}
 80037ea:	bf00      	nop
 80037ec:	3730      	adds	r7, #48	; 0x30
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40020800 	.word	0x40020800
 8003800:	40020400 	.word	0x40020400
 8003804:	40020c00 	.word	0x40020c00
 8003808:	40020000 	.word	0x40020000

0800380c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003810:	b672      	cpsid	i
}
 8003812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003814:	e7fe      	b.n	8003814 <Error_Handler+0x8>
	...

08003818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_MspInit+0x4c>)
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	4a0f      	ldr	r2, [pc, #60]	; (8003864 <HAL_MspInit+0x4c>)
 8003828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800382c:	6453      	str	r3, [r2, #68]	; 0x44
 800382e:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <HAL_MspInit+0x4c>)
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003836:	607b      	str	r3, [r7, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <HAL_MspInit+0x4c>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a08      	ldr	r2, [pc, #32]	; (8003864 <HAL_MspInit+0x4c>)
 8003844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_MspInit+0x4c>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003856:	2007      	movs	r0, #7
 8003858:	f000 fb50 	bl	8003efc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800

08003868 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a19      	ldr	r2, [pc, #100]	; (80038ec <HAL_I2C_MspInit+0x84>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d12c      	bne.n	80038e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	4b18      	ldr	r3, [pc, #96]	; (80038f0 <HAL_I2C_MspInit+0x88>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	4a17      	ldr	r2, [pc, #92]	; (80038f0 <HAL_I2C_MspInit+0x88>)
 8003894:	f043 0302 	orr.w	r3, r3, #2
 8003898:	6313      	str	r3, [r2, #48]	; 0x30
 800389a:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <HAL_I2C_MspInit+0x88>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80038a6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80038aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038ac:	2312      	movs	r3, #18
 80038ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038b0:	2301      	movs	r3, #1
 80038b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b4:	2300      	movs	r3, #0
 80038b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038b8:	2304      	movs	r3, #4
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	4619      	mov	r1, r3
 80038c2:	480c      	ldr	r0, [pc, #48]	; (80038f4 <HAL_I2C_MspInit+0x8c>)
 80038c4:	f000 fe46 	bl	8004554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <HAL_I2C_MspInit+0x88>)
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <HAL_I2C_MspInit+0x88>)
 80038d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038d6:	6413      	str	r3, [r2, #64]	; 0x40
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_I2C_MspInit+0x88>)
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80038e4:	bf00      	nop
 80038e6:	3728      	adds	r7, #40	; 0x28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40005400 	.word	0x40005400
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40020400 	.word	0x40020400

080038f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08c      	sub	sp, #48	; 0x30
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 031c 	add.w	r3, r7, #28
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a6f      	ldr	r2, [pc, #444]	; (8003ad4 <HAL_SPI_MspInit+0x1dc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d12c      	bne.n	8003974 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	4b6e      	ldr	r3, [pc, #440]	; (8003ad8 <HAL_SPI_MspInit+0x1e0>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	4a6d      	ldr	r2, [pc, #436]	; (8003ad8 <HAL_SPI_MspInit+0x1e0>)
 8003924:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003928:	6453      	str	r3, [r2, #68]	; 0x44
 800392a:	4b6b      	ldr	r3, [pc, #428]	; (8003ad8 <HAL_SPI_MspInit+0x1e0>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003932:	61bb      	str	r3, [r7, #24]
 8003934:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	4b67      	ldr	r3, [pc, #412]	; (8003ad8 <HAL_SPI_MspInit+0x1e0>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	4a66      	ldr	r2, [pc, #408]	; (8003ad8 <HAL_SPI_MspInit+0x1e0>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	6313      	str	r3, [r2, #48]	; 0x30
 8003946:	4b64      	ldr	r3, [pc, #400]	; (8003ad8 <HAL_SPI_MspInit+0x1e0>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003952:	23e0      	movs	r3, #224	; 0xe0
 8003954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003956:	2302      	movs	r3, #2
 8003958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395a:	2300      	movs	r3, #0
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395e:	2303      	movs	r3, #3
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003962:	2305      	movs	r3, #5
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003966:	f107 031c 	add.w	r3, r7, #28
 800396a:	4619      	mov	r1, r3
 800396c:	485b      	ldr	r0, [pc, #364]	; (8003adc <HAL_SPI_MspInit+0x1e4>)
 800396e:	f000 fdf1 	bl	8004554 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003972:	e0ab      	b.n	8003acc <HAL_SPI_MspInit+0x1d4>
  else if(hspi->Instance==SPI5)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a59      	ldr	r2, [pc, #356]	; (8003ae0 <HAL_SPI_MspInit+0x1e8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	f040 80a6 	bne.w	8003acc <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	4b54      	ldr	r3, [pc, #336]	; (8003ad8 <HAL_SPI_MspInit+0x1e0>)
 8003986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003988:	4a53      	ldr	r2, [pc, #332]	; (8003ad8 <HAL_SPI_MspInit+0x1e0>)
 800398a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800398e:	6453      	str	r3, [r2, #68]	; 0x44
 8003990:	4b51      	ldr	r3, [pc, #324]	; (8003ad8 <HAL_SPI_MspInit+0x1e0>)
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	4b4d      	ldr	r3, [pc, #308]	; (8003ad8 <HAL_SPI_MspInit+0x1e0>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	4a4c      	ldr	r2, [pc, #304]	; (8003ad8 <HAL_SPI_MspInit+0x1e0>)
 80039a6:	f043 0310 	orr.w	r3, r3, #16
 80039aa:	6313      	str	r3, [r2, #48]	; 0x30
 80039ac:	4b4a      	ldr	r3, [pc, #296]	; (8003ad8 <HAL_SPI_MspInit+0x1e0>)
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	4b46      	ldr	r3, [pc, #280]	; (8003ad8 <HAL_SPI_MspInit+0x1e0>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	4a45      	ldr	r2, [pc, #276]	; (8003ad8 <HAL_SPI_MspInit+0x1e0>)
 80039c2:	f043 0302 	orr.w	r3, r3, #2
 80039c6:	6313      	str	r3, [r2, #48]	; 0x30
 80039c8:	4b43      	ldr	r3, [pc, #268]	; (8003ad8 <HAL_SPI_MspInit+0x1e0>)
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80039d4:	2360      	movs	r3, #96	; 0x60
 80039d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d8:	2302      	movs	r3, #2
 80039da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e0:	2303      	movs	r3, #3
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80039e4:	2306      	movs	r3, #6
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039e8:	f107 031c 	add.w	r3, r7, #28
 80039ec:	4619      	mov	r1, r3
 80039ee:	483d      	ldr	r0, [pc, #244]	; (8003ae4 <HAL_SPI_MspInit+0x1ec>)
 80039f0:	f000 fdb0 	bl	8004554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80039f4:	2301      	movs	r3, #1
 80039f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f8:	2302      	movs	r3, #2
 80039fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a00:	2303      	movs	r3, #3
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8003a04:	2306      	movs	r3, #6
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a08:	f107 031c 	add.w	r3, r7, #28
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4836      	ldr	r0, [pc, #216]	; (8003ae8 <HAL_SPI_MspInit+0x1f0>)
 8003a10:	f000 fda0 	bl	8004554 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA2_Stream3;
 8003a14:	4b35      	ldr	r3, [pc, #212]	; (8003aec <HAL_SPI_MspInit+0x1f4>)
 8003a16:	4a36      	ldr	r2, [pc, #216]	; (8003af0 <HAL_SPI_MspInit+0x1f8>)
 8003a18:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 8003a1a:	4b34      	ldr	r3, [pc, #208]	; (8003aec <HAL_SPI_MspInit+0x1f4>)
 8003a1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a20:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a22:	4b32      	ldr	r3, [pc, #200]	; (8003aec <HAL_SPI_MspInit+0x1f4>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a28:	4b30      	ldr	r3, [pc, #192]	; (8003aec <HAL_SPI_MspInit+0x1f4>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a2e:	4b2f      	ldr	r3, [pc, #188]	; (8003aec <HAL_SPI_MspInit+0x1f4>)
 8003a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a34:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a36:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <HAL_SPI_MspInit+0x1f4>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a3c:	4b2b      	ldr	r3, [pc, #172]	; (8003aec <HAL_SPI_MspInit+0x1f4>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 8003a42:	4b2a      	ldr	r3, [pc, #168]	; (8003aec <HAL_SPI_MspInit+0x1f4>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a48:	4b28      	ldr	r3, [pc, #160]	; (8003aec <HAL_SPI_MspInit+0x1f4>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a4e:	4b27      	ldr	r3, [pc, #156]	; (8003aec <HAL_SPI_MspInit+0x1f4>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8003a54:	4825      	ldr	r0, [pc, #148]	; (8003aec <HAL_SPI_MspInit+0x1f4>)
 8003a56:	f000 fa93 	bl	8003f80 <HAL_DMA_Init>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_SPI_MspInit+0x16c>
      Error_Handler();
 8003a60:	f7ff fed4 	bl	800380c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a21      	ldr	r2, [pc, #132]	; (8003aec <HAL_SPI_MspInit+0x1f4>)
 8003a68:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a6a:	4a20      	ldr	r2, [pc, #128]	; (8003aec <HAL_SPI_MspInit+0x1f4>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi5_tx.Instance = DMA2_Stream4;
 8003a70:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_SPI_MspInit+0x1fc>)
 8003a72:	4a21      	ldr	r2, [pc, #132]	; (8003af8 <HAL_SPI_MspInit+0x200>)
 8003a74:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8003a76:	4b1f      	ldr	r3, [pc, #124]	; (8003af4 <HAL_SPI_MspInit+0x1fc>)
 8003a78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a7c:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a7e:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <HAL_SPI_MspInit+0x1fc>)
 8003a80:	2240      	movs	r2, #64	; 0x40
 8003a82:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_SPI_MspInit+0x1fc>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a8a:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_SPI_MspInit+0x1fc>)
 8003a8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a90:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a92:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <HAL_SPI_MspInit+0x1fc>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a98:	4b16      	ldr	r3, [pc, #88]	; (8003af4 <HAL_SPI_MspInit+0x1fc>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <HAL_SPI_MspInit+0x1fc>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <HAL_SPI_MspInit+0x1fc>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <HAL_SPI_MspInit+0x1fc>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8003ab0:	4810      	ldr	r0, [pc, #64]	; (8003af4 <HAL_SPI_MspInit+0x1fc>)
 8003ab2:	f000 fa65 	bl	8003f80 <HAL_DMA_Init>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_SPI_MspInit+0x1c8>
      Error_Handler();
 8003abc:	f7ff fea6 	bl	800380c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi5_tx);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a0c      	ldr	r2, [pc, #48]	; (8003af4 <HAL_SPI_MspInit+0x1fc>)
 8003ac4:	649a      	str	r2, [r3, #72]	; 0x48
 8003ac6:	4a0b      	ldr	r2, [pc, #44]	; (8003af4 <HAL_SPI_MspInit+0x1fc>)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003acc:	bf00      	nop
 8003ace:	3730      	adds	r7, #48	; 0x30
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40013000 	.word	0x40013000
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40020000 	.word	0x40020000
 8003ae0:	40015000 	.word	0x40015000
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40020400 	.word	0x40020400
 8003aec:	20000688 	.word	0x20000688
 8003af0:	40026458 	.word	0x40026458
 8003af4:	20000898 	.word	0x20000898
 8003af8:	40026470 	.word	0x40026470

08003afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b00:	e7fe      	b.n	8003b00 <NMI_Handler+0x4>

08003b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b02:	b480      	push	{r7}
 8003b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b06:	e7fe      	b.n	8003b06 <HardFault_Handler+0x4>

08003b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b0c:	e7fe      	b.n	8003b0c <MemManage_Handler+0x4>

08003b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b12:	e7fe      	b.n	8003b12 <BusFault_Handler+0x4>

08003b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b18:	e7fe      	b.n	8003b18 <UsageFault_Handler+0x4>

08003b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b3a:	bf00      	nop
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b48:	f000 f8c4 	bl	8003cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b4c:	bf00      	nop
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003b54:	2002      	movs	r0, #2
 8003b56:	f000 fe9b 	bl	8004890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003b62:	2004      	movs	r0, #4
 8003b64:	f000 fe94 	bl	8004890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003b68:	bf00      	nop
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003b70:	2010      	movs	r0, #16
 8003b72:	f000 fe8d 	bl	8004890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8003b80:	4802      	ldr	r0, [pc, #8]	; (8003b8c <DMA2_Stream3_IRQHandler+0x10>)
 8003b82:	f000 faab 	bl	80040dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000688 	.word	0x20000688

08003b90 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8003b94:	4802      	ldr	r0, [pc, #8]	; (8003ba0 <DMA2_Stream4_IRQHandler+0x10>)
 8003b96:	f000 faa1 	bl	80040dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000898 	.word	0x20000898

08003ba4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003ba8:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <OTG_FS_IRQHandler+0x10>)
 8003baa:	f001 ff98 	bl	8005ade <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20002040 	.word	0x20002040

08003bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <SystemInit+0x20>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	4a05      	ldr	r2, [pc, #20]	; (8003bd8 <SystemInit+0x20>)
 8003bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003be0:	480d      	ldr	r0, [pc, #52]	; (8003c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003be2:	490e      	ldr	r1, [pc, #56]	; (8003c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003be4:	4a0e      	ldr	r2, [pc, #56]	; (8003c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003be8:	e002      	b.n	8003bf0 <LoopCopyDataInit>

08003bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bee:	3304      	adds	r3, #4

08003bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bf4:	d3f9      	bcc.n	8003bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bf6:	4a0b      	ldr	r2, [pc, #44]	; (8003c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bf8:	4c0b      	ldr	r4, [pc, #44]	; (8003c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bfc:	e001      	b.n	8003c02 <LoopFillZerobss>

08003bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c00:	3204      	adds	r2, #4

08003c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c04:	d3fb      	bcc.n	8003bfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c06:	f7ff ffd7 	bl	8003bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c0a:	f007 fed1 	bl	800b9b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c0e:	f7fe feaf 	bl	8002970 <main>
  bx  lr    
 8003c12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c1c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003c20:	0800d948 	.word	0x0800d948
  ldr r2, =_sbss
 8003c24:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003c28:	20002448 	.word	0x20002448

08003c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c2c:	e7fe      	b.n	8003c2c <ADC_IRQHandler>
	...

08003c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c34:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <HAL_Init+0x40>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <HAL_Init+0x40>)
 8003c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <HAL_Init+0x40>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <HAL_Init+0x40>)
 8003c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <HAL_Init+0x40>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <HAL_Init+0x40>)
 8003c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c58:	2003      	movs	r0, #3
 8003c5a:	f000 f94f 	bl	8003efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c5e:	2000      	movs	r0, #0
 8003c60:	f000 f808 	bl	8003c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c64:	f7ff fdd8 	bl	8003818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40023c00 	.word	0x40023c00

08003c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_InitTick+0x54>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <HAL_InitTick+0x58>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	4619      	mov	r1, r3
 8003c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 f967 	bl	8003f66 <HAL_SYSTICK_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e00e      	b.n	8003cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b0f      	cmp	r3, #15
 8003ca6:	d80a      	bhi.n	8003cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ca8:	2200      	movs	r2, #0
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb0:	f000 f92f 	bl	8003f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cb4:	4a06      	ldr	r2, [pc, #24]	; (8003cd0 <HAL_InitTick+0x5c>)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e000      	b.n	8003cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000008 	.word	0x20000008
 8003ccc:	20000010 	.word	0x20000010
 8003cd0:	2000000c 	.word	0x2000000c

08003cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_IncTick+0x20>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_IncTick+0x24>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <HAL_IncTick+0x24>)
 8003ce6:	6013      	str	r3, [r2, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	20000010 	.word	0x20000010
 8003cf8:	20000b6c 	.word	0x20000b6c

08003cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8003d00:	4b03      	ldr	r3, [pc, #12]	; (8003d10 <HAL_GetTick+0x14>)
 8003d02:	681b      	ldr	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000b6c 	.word	0x20000b6c

08003d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d1c:	f7ff ffee 	bl	8003cfc <HAL_GetTick>
 8003d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d005      	beq.n	8003d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_Delay+0x44>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d3a:	bf00      	nop
 8003d3c:	f7ff ffde 	bl	8003cfc <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d8f7      	bhi.n	8003d3c <HAL_Delay+0x28>
  {
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000010 	.word	0x20000010

08003d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d8e:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	60d3      	str	r3, [r2, #12]
}
 8003d94:	bf00      	nop
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	e000ed00 	.word	0xe000ed00

08003da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003da8:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <__NVIC_GetPriorityGrouping+0x18>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	f003 0307 	and.w	r3, r3, #7
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	db0b      	blt.n	8003dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	f003 021f 	and.w	r2, r3, #31
 8003dd8:	4907      	ldr	r1, [pc, #28]	; (8003df8 <__NVIC_EnableIRQ+0x38>)
 8003dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	2001      	movs	r0, #1
 8003de2:	fa00 f202 	lsl.w	r2, r0, r2
 8003de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	e000e100 	.word	0xe000e100

08003dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	6039      	str	r1, [r7, #0]
 8003e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	db0a      	blt.n	8003e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	490c      	ldr	r1, [pc, #48]	; (8003e48 <__NVIC_SetPriority+0x4c>)
 8003e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1a:	0112      	lsls	r2, r2, #4
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	440b      	add	r3, r1
 8003e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e24:	e00a      	b.n	8003e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	4908      	ldr	r1, [pc, #32]	; (8003e4c <__NVIC_SetPriority+0x50>)
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	3b04      	subs	r3, #4
 8003e34:	0112      	lsls	r2, r2, #4
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	440b      	add	r3, r1
 8003e3a:	761a      	strb	r2, [r3, #24]
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	e000e100 	.word	0xe000e100
 8003e4c:	e000ed00 	.word	0xe000ed00

08003e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b089      	sub	sp, #36	; 0x24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f1c3 0307 	rsb	r3, r3, #7
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	bf28      	it	cs
 8003e6e:	2304      	movcs	r3, #4
 8003e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	3304      	adds	r3, #4
 8003e76:	2b06      	cmp	r3, #6
 8003e78:	d902      	bls.n	8003e80 <NVIC_EncodePriority+0x30>
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3b03      	subs	r3, #3
 8003e7e:	e000      	b.n	8003e82 <NVIC_EncodePriority+0x32>
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e84:	f04f 32ff 	mov.w	r2, #4294967295
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	401a      	ands	r2, r3
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e98:	f04f 31ff 	mov.w	r1, #4294967295
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea2:	43d9      	mvns	r1, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea8:	4313      	orrs	r3, r2
         );
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3724      	adds	r7, #36	; 0x24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ec8:	d301      	bcc.n	8003ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e00f      	b.n	8003eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ece:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <SysTick_Config+0x40>)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ed6:	210f      	movs	r1, #15
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8003edc:	f7ff ff8e 	bl	8003dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <SysTick_Config+0x40>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee6:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <SysTick_Config+0x40>)
 8003ee8:	2207      	movs	r2, #7
 8003eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	e000e010 	.word	0xe000e010

08003efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ff29 	bl	8003d5c <__NVIC_SetPriorityGrouping>
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b086      	sub	sp, #24
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	4603      	mov	r3, r0
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f24:	f7ff ff3e 	bl	8003da4 <__NVIC_GetPriorityGrouping>
 8003f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	6978      	ldr	r0, [r7, #20]
 8003f30:	f7ff ff8e 	bl	8003e50 <NVIC_EncodePriority>
 8003f34:	4602      	mov	r2, r0
 8003f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff ff5d 	bl	8003dfc <__NVIC_SetPriority>
}
 8003f42:	bf00      	nop
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	4603      	mov	r3, r0
 8003f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff31 	bl	8003dc0 <__NVIC_EnableIRQ>
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff ffa2 	bl	8003eb8 <SysTick_Config>
 8003f74:	4603      	mov	r3, r0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f8c:	f7ff feb6 	bl	8003cfc <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e099      	b.n	80040d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fbc:	e00f      	b.n	8003fde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fbe:	f7ff fe9d 	bl	8003cfc <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b05      	cmp	r3, #5
 8003fca:	d908      	bls.n	8003fde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e078      	b.n	80040d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e8      	bne.n	8003fbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4b38      	ldr	r3, [pc, #224]	; (80040d8 <HAL_DMA_Init+0x158>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800400a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	2b04      	cmp	r3, #4
 8004036:	d107      	bne.n	8004048 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	4313      	orrs	r3, r2
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f023 0307 	bic.w	r3, r3, #7
 800405e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	2b04      	cmp	r3, #4
 8004070:	d117      	bne.n	80040a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00e      	beq.n	80040a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f9e9 	bl	800445c <DMA_CheckFifoParam>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2240      	movs	r2, #64	; 0x40
 8004094:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800409e:	2301      	movs	r3, #1
 80040a0:	e016      	b.n	80040d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f9a0 	bl	80043f0 <DMA_CalcBaseAndBitshift>
 80040b0:	4603      	mov	r3, r0
 80040b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b8:	223f      	movs	r2, #63	; 0x3f
 80040ba:	409a      	lsls	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	f010803f 	.word	0xf010803f

080040dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040e8:	4b92      	ldr	r3, [pc, #584]	; (8004334 <HAL_DMA_IRQHandler+0x258>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a92      	ldr	r2, [pc, #584]	; (8004338 <HAL_DMA_IRQHandler+0x25c>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	0a9b      	lsrs	r3, r3, #10
 80040f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004106:	2208      	movs	r2, #8
 8004108:	409a      	lsls	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4013      	ands	r3, r2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d01a      	beq.n	8004148 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d013      	beq.n	8004148 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0204 	bic.w	r2, r2, #4
 800412e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004134:	2208      	movs	r2, #8
 8004136:	409a      	lsls	r2, r3
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	f043 0201 	orr.w	r2, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414c:	2201      	movs	r2, #1
 800414e:	409a      	lsls	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4013      	ands	r3, r2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d012      	beq.n	800417e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00b      	beq.n	800417e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416a:	2201      	movs	r2, #1
 800416c:	409a      	lsls	r2, r3
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	f043 0202 	orr.w	r2, r3, #2
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004182:	2204      	movs	r2, #4
 8004184:	409a      	lsls	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d012      	beq.n	80041b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00b      	beq.n	80041b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a0:	2204      	movs	r2, #4
 80041a2:	409a      	lsls	r2, r3
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	f043 0204 	orr.w	r2, r3, #4
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b8:	2210      	movs	r2, #16
 80041ba:	409a      	lsls	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d043      	beq.n	800424c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d03c      	beq.n	800424c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d6:	2210      	movs	r2, #16
 80041d8:	409a      	lsls	r2, r3
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d018      	beq.n	800421e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d108      	bne.n	800420c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d024      	beq.n	800424c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
 800420a:	e01f      	b.n	800424c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01b      	beq.n	800424c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4798      	blx	r3
 800421c:	e016      	b.n	800424c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d107      	bne.n	800423c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0208 	bic.w	r2, r2, #8
 800423a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004250:	2220      	movs	r2, #32
 8004252:	409a      	lsls	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4013      	ands	r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 808e 	beq.w	800437a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8086 	beq.w	800437a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004272:	2220      	movs	r2, #32
 8004274:	409a      	lsls	r2, r3
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b05      	cmp	r3, #5
 8004284:	d136      	bne.n	80042f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0216 	bic.w	r2, r2, #22
 8004294:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d103      	bne.n	80042b6 <HAL_DMA_IRQHandler+0x1da>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0208 	bic.w	r2, r2, #8
 80042c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ca:	223f      	movs	r2, #63	; 0x3f
 80042cc:	409a      	lsls	r2, r3
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d07d      	beq.n	80043e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	4798      	blx	r3
        }
        return;
 80042f2:	e078      	b.n	80043e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d01c      	beq.n	800433c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d108      	bne.n	8004322 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	2b00      	cmp	r3, #0
 8004316:	d030      	beq.n	800437a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	4798      	blx	r3
 8004320:	e02b      	b.n	800437a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d027      	beq.n	800437a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
 8004332:	e022      	b.n	800437a <HAL_DMA_IRQHandler+0x29e>
 8004334:	20000008 	.word	0x20000008
 8004338:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10f      	bne.n	800436a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0210 	bic.w	r2, r2, #16
 8004358:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	2b00      	cmp	r3, #0
 8004380:	d032      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d022      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2205      	movs	r2, #5
 8004392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0201 	bic.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	3301      	adds	r3, #1
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d307      	bcc.n	80043c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f2      	bne.n	80043a6 <HAL_DMA_IRQHandler+0x2ca>
 80043c0:	e000      	b.n	80043c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80043c2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	4798      	blx	r3
 80043e4:	e000      	b.n	80043e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80043e6:	bf00      	nop
    }
  }
}
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop

080043f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	3b10      	subs	r3, #16
 8004400:	4a14      	ldr	r2, [pc, #80]	; (8004454 <DMA_CalcBaseAndBitshift+0x64>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	091b      	lsrs	r3, r3, #4
 8004408:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800440a:	4a13      	ldr	r2, [pc, #76]	; (8004458 <DMA_CalcBaseAndBitshift+0x68>)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b03      	cmp	r3, #3
 800441c:	d909      	bls.n	8004432 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004426:	f023 0303 	bic.w	r3, r3, #3
 800442a:	1d1a      	adds	r2, r3, #4
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	659a      	str	r2, [r3, #88]	; 0x58
 8004430:	e007      	b.n	8004442 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800443a:	f023 0303 	bic.w	r3, r3, #3
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	aaaaaaab 	.word	0xaaaaaaab
 8004458:	0800d6e0 	.word	0x0800d6e0

0800445c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d11f      	bne.n	80044b6 <DMA_CheckFifoParam+0x5a>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b03      	cmp	r3, #3
 800447a:	d856      	bhi.n	800452a <DMA_CheckFifoParam+0xce>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <DMA_CheckFifoParam+0x28>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	08004495 	.word	0x08004495
 8004488:	080044a7 	.word	0x080044a7
 800448c:	08004495 	.word	0x08004495
 8004490:	0800452b 	.word	0x0800452b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d046      	beq.n	800452e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a4:	e043      	b.n	800452e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044ae:	d140      	bne.n	8004532 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b4:	e03d      	b.n	8004532 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044be:	d121      	bne.n	8004504 <DMA_CheckFifoParam+0xa8>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	d837      	bhi.n	8004536 <DMA_CheckFifoParam+0xda>
 80044c6:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <DMA_CheckFifoParam+0x70>)
 80044c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044cc:	080044dd 	.word	0x080044dd
 80044d0:	080044e3 	.word	0x080044e3
 80044d4:	080044dd 	.word	0x080044dd
 80044d8:	080044f5 	.word	0x080044f5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
      break;
 80044e0:	e030      	b.n	8004544 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d025      	beq.n	800453a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f2:	e022      	b.n	800453a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044fc:	d11f      	bne.n	800453e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004502:	e01c      	b.n	800453e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d903      	bls.n	8004512 <DMA_CheckFifoParam+0xb6>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b03      	cmp	r3, #3
 800450e:	d003      	beq.n	8004518 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004510:	e018      	b.n	8004544 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	73fb      	strb	r3, [r7, #15]
      break;
 8004516:	e015      	b.n	8004544 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00e      	beq.n	8004542 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
      break;
 8004528:	e00b      	b.n	8004542 <DMA_CheckFifoParam+0xe6>
      break;
 800452a:	bf00      	nop
 800452c:	e00a      	b.n	8004544 <DMA_CheckFifoParam+0xe8>
      break;
 800452e:	bf00      	nop
 8004530:	e008      	b.n	8004544 <DMA_CheckFifoParam+0xe8>
      break;
 8004532:	bf00      	nop
 8004534:	e006      	b.n	8004544 <DMA_CheckFifoParam+0xe8>
      break;
 8004536:	bf00      	nop
 8004538:	e004      	b.n	8004544 <DMA_CheckFifoParam+0xe8>
      break;
 800453a:	bf00      	nop
 800453c:	e002      	b.n	8004544 <DMA_CheckFifoParam+0xe8>
      break;   
 800453e:	bf00      	nop
 8004540:	e000      	b.n	8004544 <DMA_CheckFifoParam+0xe8>
      break;
 8004542:	bf00      	nop
    }
  } 
  
  return status; 
 8004544:	7bfb      	ldrb	r3, [r7, #15]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop

08004554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004554:	b480      	push	{r7}
 8004556:	b089      	sub	sp, #36	; 0x24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	e159      	b.n	8004824 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004570:	2201      	movs	r2, #1
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	429a      	cmp	r2, r3
 800458a:	f040 8148 	bne.w	800481e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b01      	cmp	r3, #1
 8004598:	d005      	beq.n	80045a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d130      	bne.n	8004608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	2203      	movs	r2, #3
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4013      	ands	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045dc:	2201      	movs	r2, #1
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	091b      	lsrs	r3, r3, #4
 80045f2:	f003 0201 	and.w	r2, r3, #1
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4313      	orrs	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	2b03      	cmp	r3, #3
 8004612:	d017      	beq.n	8004644 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	2203      	movs	r2, #3
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4013      	ands	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4313      	orrs	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d123      	bne.n	8004698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	08da      	lsrs	r2, r3, #3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3208      	adds	r2, #8
 8004658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800465c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	220f      	movs	r2, #15
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4013      	ands	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4313      	orrs	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	08da      	lsrs	r2, r3, #3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3208      	adds	r2, #8
 8004692:	69b9      	ldr	r1, [r7, #24]
 8004694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	2203      	movs	r2, #3
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4013      	ands	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f003 0203 	and.w	r2, r3, #3
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80a2 	beq.w	800481e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	4b57      	ldr	r3, [pc, #348]	; (800483c <HAL_GPIO_Init+0x2e8>)
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	4a56      	ldr	r2, [pc, #344]	; (800483c <HAL_GPIO_Init+0x2e8>)
 80046e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046e8:	6453      	str	r3, [r2, #68]	; 0x44
 80046ea:	4b54      	ldr	r3, [pc, #336]	; (800483c <HAL_GPIO_Init+0x2e8>)
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046f6:	4a52      	ldr	r2, [pc, #328]	; (8004840 <HAL_GPIO_Init+0x2ec>)
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	089b      	lsrs	r3, r3, #2
 80046fc:	3302      	adds	r3, #2
 80046fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	220f      	movs	r2, #15
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4013      	ands	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a49      	ldr	r2, [pc, #292]	; (8004844 <HAL_GPIO_Init+0x2f0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d019      	beq.n	8004756 <HAL_GPIO_Init+0x202>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a48      	ldr	r2, [pc, #288]	; (8004848 <HAL_GPIO_Init+0x2f4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_GPIO_Init+0x1fe>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a47      	ldr	r2, [pc, #284]	; (800484c <HAL_GPIO_Init+0x2f8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00d      	beq.n	800474e <HAL_GPIO_Init+0x1fa>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a46      	ldr	r2, [pc, #280]	; (8004850 <HAL_GPIO_Init+0x2fc>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d007      	beq.n	800474a <HAL_GPIO_Init+0x1f6>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a45      	ldr	r2, [pc, #276]	; (8004854 <HAL_GPIO_Init+0x300>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d101      	bne.n	8004746 <HAL_GPIO_Init+0x1f2>
 8004742:	2304      	movs	r3, #4
 8004744:	e008      	b.n	8004758 <HAL_GPIO_Init+0x204>
 8004746:	2307      	movs	r3, #7
 8004748:	e006      	b.n	8004758 <HAL_GPIO_Init+0x204>
 800474a:	2303      	movs	r3, #3
 800474c:	e004      	b.n	8004758 <HAL_GPIO_Init+0x204>
 800474e:	2302      	movs	r3, #2
 8004750:	e002      	b.n	8004758 <HAL_GPIO_Init+0x204>
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <HAL_GPIO_Init+0x204>
 8004756:	2300      	movs	r3, #0
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	f002 0203 	and.w	r2, r2, #3
 800475e:	0092      	lsls	r2, r2, #2
 8004760:	4093      	lsls	r3, r2
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4313      	orrs	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004768:	4935      	ldr	r1, [pc, #212]	; (8004840 <HAL_GPIO_Init+0x2ec>)
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	089b      	lsrs	r3, r3, #2
 800476e:	3302      	adds	r3, #2
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004776:	4b38      	ldr	r3, [pc, #224]	; (8004858 <HAL_GPIO_Init+0x304>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	43db      	mvns	r3, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4013      	ands	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800479a:	4a2f      	ldr	r2, [pc, #188]	; (8004858 <HAL_GPIO_Init+0x304>)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047a0:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <HAL_GPIO_Init+0x304>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047c4:	4a24      	ldr	r2, [pc, #144]	; (8004858 <HAL_GPIO_Init+0x304>)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047ca:	4b23      	ldr	r3, [pc, #140]	; (8004858 <HAL_GPIO_Init+0x304>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	43db      	mvns	r3, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4013      	ands	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047ee:	4a1a      	ldr	r2, [pc, #104]	; (8004858 <HAL_GPIO_Init+0x304>)
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047f4:	4b18      	ldr	r3, [pc, #96]	; (8004858 <HAL_GPIO_Init+0x304>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	43db      	mvns	r3, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004818:	4a0f      	ldr	r2, [pc, #60]	; (8004858 <HAL_GPIO_Init+0x304>)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	3301      	adds	r3, #1
 8004822:	61fb      	str	r3, [r7, #28]
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	2b0f      	cmp	r3, #15
 8004828:	f67f aea2 	bls.w	8004570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800482c:	bf00      	nop
 800482e:	bf00      	nop
 8004830:	3724      	adds	r7, #36	; 0x24
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800
 8004840:	40013800 	.word	0x40013800
 8004844:	40020000 	.word	0x40020000
 8004848:	40020400 	.word	0x40020400
 800484c:	40020800 	.word	0x40020800
 8004850:	40020c00 	.word	0x40020c00
 8004854:	40021000 	.word	0x40021000
 8004858:	40013c00 	.word	0x40013c00

0800485c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	807b      	strh	r3, [r7, #2]
 8004868:	4613      	mov	r3, r2
 800486a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800486c:	787b      	ldrb	r3, [r7, #1]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004872:	887a      	ldrh	r2, [r7, #2]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004878:	e003      	b.n	8004882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800487a:	887b      	ldrh	r3, [r7, #2]
 800487c:	041a      	lsls	r2, r3, #16
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	619a      	str	r2, [r3, #24]
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800489a:	4b08      	ldr	r3, [pc, #32]	; (80048bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d006      	beq.n	80048b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048a6:	4a05      	ldr	r2, [pc, #20]	; (80048bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe f822 	bl	80028f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40013c00 	.word	0x40013c00

080048c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e12b      	b.n	8004b2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fe ffbe 	bl	8003868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2224      	movs	r2, #36	; 0x24
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004912:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004922:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004924:	f002 fd5a 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 8004928:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4a81      	ldr	r2, [pc, #516]	; (8004b34 <HAL_I2C_Init+0x274>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d807      	bhi.n	8004944 <HAL_I2C_Init+0x84>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4a80      	ldr	r2, [pc, #512]	; (8004b38 <HAL_I2C_Init+0x278>)
 8004938:	4293      	cmp	r3, r2
 800493a:	bf94      	ite	ls
 800493c:	2301      	movls	r3, #1
 800493e:	2300      	movhi	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	e006      	b.n	8004952 <HAL_I2C_Init+0x92>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4a7d      	ldr	r2, [pc, #500]	; (8004b3c <HAL_I2C_Init+0x27c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	bf94      	ite	ls
 800494c:	2301      	movls	r3, #1
 800494e:	2300      	movhi	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e0e7      	b.n	8004b2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4a78      	ldr	r2, [pc, #480]	; (8004b40 <HAL_I2C_Init+0x280>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	0c9b      	lsrs	r3, r3, #18
 8004964:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4a6a      	ldr	r2, [pc, #424]	; (8004b34 <HAL_I2C_Init+0x274>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d802      	bhi.n	8004994 <HAL_I2C_Init+0xd4>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	3301      	adds	r3, #1
 8004992:	e009      	b.n	80049a8 <HAL_I2C_Init+0xe8>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800499a:	fb02 f303 	mul.w	r3, r2, r3
 800499e:	4a69      	ldr	r2, [pc, #420]	; (8004b44 <HAL_I2C_Init+0x284>)
 80049a0:	fba2 2303 	umull	r2, r3, r2, r3
 80049a4:	099b      	lsrs	r3, r3, #6
 80049a6:	3301      	adds	r3, #1
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	495c      	ldr	r1, [pc, #368]	; (8004b34 <HAL_I2C_Init+0x274>)
 80049c4:	428b      	cmp	r3, r1
 80049c6:	d819      	bhi.n	80049fc <HAL_I2C_Init+0x13c>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	1e59      	subs	r1, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80049d6:	1c59      	adds	r1, r3, #1
 80049d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049dc:	400b      	ands	r3, r1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_I2C_Init+0x138>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1e59      	subs	r1, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80049f0:	3301      	adds	r3, #1
 80049f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f6:	e051      	b.n	8004a9c <HAL_I2C_Init+0x1dc>
 80049f8:	2304      	movs	r3, #4
 80049fa:	e04f      	b.n	8004a9c <HAL_I2C_Init+0x1dc>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d111      	bne.n	8004a28 <HAL_I2C_Init+0x168>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1e58      	subs	r0, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	440b      	add	r3, r1
 8004a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a16:	3301      	adds	r3, #1
 8004a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	bf0c      	ite	eq
 8004a20:	2301      	moveq	r3, #1
 8004a22:	2300      	movne	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	e012      	b.n	8004a4e <HAL_I2C_Init+0x18e>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	1e58      	subs	r0, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6859      	ldr	r1, [r3, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	0099      	lsls	r1, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_I2C_Init+0x196>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e022      	b.n	8004a9c <HAL_I2C_Init+0x1dc>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10e      	bne.n	8004a7c <HAL_I2C_Init+0x1bc>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1e58      	subs	r0, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6859      	ldr	r1, [r3, #4]
 8004a66:	460b      	mov	r3, r1
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	440b      	add	r3, r1
 8004a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a70:	3301      	adds	r3, #1
 8004a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7a:	e00f      	b.n	8004a9c <HAL_I2C_Init+0x1dc>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	1e58      	subs	r0, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6859      	ldr	r1, [r3, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	0099      	lsls	r1, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a92:	3301      	adds	r3, #1
 8004a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	6809      	ldr	r1, [r1, #0]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69da      	ldr	r2, [r3, #28]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6911      	ldr	r1, [r2, #16]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68d2      	ldr	r2, [r2, #12]
 8004ad6:	4311      	orrs	r1, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6812      	ldr	r2, [r2, #0]
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0201 	orr.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	000186a0 	.word	0x000186a0
 8004b38:	001e847f 	.word	0x001e847f
 8004b3c:	003d08ff 	.word	0x003d08ff
 8004b40:	431bde83 	.word	0x431bde83
 8004b44:	10624dd3 	.word	0x10624dd3

08004b48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	4608      	mov	r0, r1
 8004b52:	4611      	mov	r1, r2
 8004b54:	461a      	mov	r2, r3
 8004b56:	4603      	mov	r3, r0
 8004b58:	817b      	strh	r3, [r7, #10]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	813b      	strh	r3, [r7, #8]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b62:	f7ff f8cb 	bl	8003cfc <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	f040 80d9 	bne.w	8004d28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	2319      	movs	r3, #25
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	496d      	ldr	r1, [pc, #436]	; (8004d34 <HAL_I2C_Mem_Write+0x1ec>)
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 fc7f 	bl	8005484 <I2C_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e0cc      	b.n	8004d2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_I2C_Mem_Write+0x56>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e0c5      	b.n	8004d2a <HAL_I2C_Mem_Write+0x1e2>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d007      	beq.n	8004bc4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2221      	movs	r2, #33	; 0x21
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2240      	movs	r2, #64	; 0x40
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a3a      	ldr	r2, [r7, #32]
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4a4d      	ldr	r2, [pc, #308]	; (8004d38 <HAL_I2C_Mem_Write+0x1f0>)
 8004c04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c06:	88f8      	ldrh	r0, [r7, #6]
 8004c08:	893a      	ldrh	r2, [r7, #8]
 8004c0a:	8979      	ldrh	r1, [r7, #10]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	4603      	mov	r3, r0
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 fab6 	bl	8005188 <I2C_RequestMemoryWrite>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d052      	beq.n	8004cc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e081      	b.n	8004d2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fd00 	bl	8005630 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00d      	beq.n	8004c52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d107      	bne.n	8004c4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e06b      	b.n	8004d2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	781a      	ldrb	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d11b      	bne.n	8004cc8 <HAL_I2C_Mem_Write+0x180>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d017      	beq.n	8004cc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	781a      	ldrb	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1aa      	bne.n	8004c26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fcec 	bl	80056b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00d      	beq.n	8004cfc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d107      	bne.n	8004cf8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e016      	b.n	8004d2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	e000      	b.n	8004d2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d28:	2302      	movs	r3, #2
  }
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	00100002 	.word	0x00100002
 8004d38:	ffff0000 	.word	0xffff0000

08004d3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08c      	sub	sp, #48	; 0x30
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	4608      	mov	r0, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	817b      	strh	r3, [r7, #10]
 8004d4e:	460b      	mov	r3, r1
 8004d50:	813b      	strh	r3, [r7, #8]
 8004d52:	4613      	mov	r3, r2
 8004d54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d56:	f7fe ffd1 	bl	8003cfc <HAL_GetTick>
 8004d5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	f040 8208 	bne.w	800517a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2319      	movs	r3, #25
 8004d70:	2201      	movs	r2, #1
 8004d72:	497b      	ldr	r1, [pc, #492]	; (8004f60 <HAL_I2C_Mem_Read+0x224>)
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 fb85 	bl	8005484 <I2C_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
 8004d82:	e1fb      	b.n	800517c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <HAL_I2C_Mem_Read+0x56>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e1f4      	b.n	800517c <HAL_I2C_Mem_Read+0x440>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d007      	beq.n	8004db8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2222      	movs	r2, #34	; 0x22
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2240      	movs	r2, #64	; 0x40
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4a5b      	ldr	r2, [pc, #364]	; (8004f64 <HAL_I2C_Mem_Read+0x228>)
 8004df8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dfa:	88f8      	ldrh	r0, [r7, #6]
 8004dfc:	893a      	ldrh	r2, [r7, #8]
 8004dfe:	8979      	ldrh	r1, [r7, #10]
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	9301      	str	r3, [sp, #4]
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	4603      	mov	r3, r0
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 fa52 	bl	80052b4 <I2C_RequestMemoryRead>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e1b0      	b.n	800517c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d113      	bne.n	8004e4a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e22:	2300      	movs	r3, #0
 8004e24:	623b      	str	r3, [r7, #32]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	623b      	str	r3, [r7, #32]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	623b      	str	r3, [r7, #32]
 8004e36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	e184      	b.n	8005154 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d11b      	bne.n	8004e8a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e62:	2300      	movs	r3, #0
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	e164      	b.n	8005154 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d11b      	bne.n	8004eca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	e144      	b.n	8005154 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ee0:	e138      	b.n	8005154 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	f200 80f1 	bhi.w	80050ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d123      	bne.n	8004f3c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 fc1b 	bl	8005734 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e139      	b.n	800517c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f3a:	e10b      	b.n	8005154 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d14e      	bne.n	8004fe2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	4906      	ldr	r1, [pc, #24]	; (8004f68 <HAL_I2C_Mem_Read+0x22c>)
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 fa98 	bl	8005484 <I2C_WaitOnFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d008      	beq.n	8004f6c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e10e      	b.n	800517c <HAL_I2C_Mem_Read+0x440>
 8004f5e:	bf00      	nop
 8004f60:	00100002 	.word	0x00100002
 8004f64:	ffff0000 	.word	0xffff0000
 8004f68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fe0:	e0b8      	b.n	8005154 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe8:	2200      	movs	r2, #0
 8004fea:	4966      	ldr	r1, [pc, #408]	; (8005184 <HAL_I2C_Mem_Read+0x448>)
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 fa49 	bl	8005484 <I2C_WaitOnFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0bf      	b.n	800517c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800500a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005044:	2200      	movs	r2, #0
 8005046:	494f      	ldr	r1, [pc, #316]	; (8005184 <HAL_I2C_Mem_Read+0x448>)
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 fa1b 	bl	8005484 <I2C_WaitOnFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e091      	b.n	800517c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005066:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691a      	ldr	r2, [r3, #16]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050cc:	e042      	b.n	8005154 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fb2e 	bl	8005734 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e04c      	b.n	800517c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510a:	b29b      	uxth	r3, r3
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b04      	cmp	r3, #4
 8005120:	d118      	bne.n	8005154 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005158:	2b00      	cmp	r3, #0
 800515a:	f47f aec2 	bne.w	8004ee2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	e000      	b.n	800517c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800517a:	2302      	movs	r3, #2
  }
}
 800517c:	4618      	mov	r0, r3
 800517e:	3728      	adds	r7, #40	; 0x28
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	00010004 	.word	0x00010004

08005188 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af02      	add	r7, sp, #8
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	4608      	mov	r0, r1
 8005192:	4611      	mov	r1, r2
 8005194:	461a      	mov	r2, r3
 8005196:	4603      	mov	r3, r0
 8005198:	817b      	strh	r3, [r7, #10]
 800519a:	460b      	mov	r3, r1
 800519c:	813b      	strh	r3, [r7, #8]
 800519e:	4613      	mov	r3, r2
 80051a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f960 	bl	8005484 <I2C_WaitOnFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00d      	beq.n	80051e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d8:	d103      	bne.n	80051e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e05f      	b.n	80052a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051e6:	897b      	ldrh	r3, [r7, #10]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	461a      	mov	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	6a3a      	ldr	r2, [r7, #32]
 80051fa:	492d      	ldr	r1, [pc, #180]	; (80052b0 <I2C_RequestMemoryWrite+0x128>)
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 f998 	bl	8005532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e04c      	b.n	80052a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005224:	6a39      	ldr	r1, [r7, #32]
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 fa02 	bl	8005630 <I2C_WaitOnTXEFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00d      	beq.n	800524e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	2b04      	cmp	r3, #4
 8005238:	d107      	bne.n	800524a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005248:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e02b      	b.n	80052a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d105      	bne.n	8005260 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005254:	893b      	ldrh	r3, [r7, #8]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	611a      	str	r2, [r3, #16]
 800525e:	e021      	b.n	80052a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005260:	893b      	ldrh	r3, [r7, #8]
 8005262:	0a1b      	lsrs	r3, r3, #8
 8005264:	b29b      	uxth	r3, r3
 8005266:	b2da      	uxtb	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800526e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005270:	6a39      	ldr	r1, [r7, #32]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f9dc 	bl	8005630 <I2C_WaitOnTXEFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00d      	beq.n	800529a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	2b04      	cmp	r3, #4
 8005284:	d107      	bne.n	8005296 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005294:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e005      	b.n	80052a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800529a:	893b      	ldrh	r3, [r7, #8]
 800529c:	b2da      	uxtb	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	00010002 	.word	0x00010002

080052b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	4608      	mov	r0, r1
 80052be:	4611      	mov	r1, r2
 80052c0:	461a      	mov	r2, r3
 80052c2:	4603      	mov	r3, r0
 80052c4:	817b      	strh	r3, [r7, #10]
 80052c6:	460b      	mov	r3, r1
 80052c8:	813b      	strh	r3, [r7, #8]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f8c2 	bl	8005484 <I2C_WaitOnFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00d      	beq.n	8005322 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005314:	d103      	bne.n	800531e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800531c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e0aa      	b.n	8005478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005322:	897b      	ldrh	r3, [r7, #10]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	461a      	mov	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005330:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	6a3a      	ldr	r2, [r7, #32]
 8005336:	4952      	ldr	r1, [pc, #328]	; (8005480 <I2C_RequestMemoryRead+0x1cc>)
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f8fa 	bl	8005532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e097      	b.n	8005478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005360:	6a39      	ldr	r1, [r7, #32]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f964 	bl	8005630 <I2C_WaitOnTXEFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00d      	beq.n	800538a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	2b04      	cmp	r3, #4
 8005374:	d107      	bne.n	8005386 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005384:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e076      	b.n	8005478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d105      	bne.n	800539c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005390:	893b      	ldrh	r3, [r7, #8]
 8005392:	b2da      	uxtb	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	611a      	str	r2, [r3, #16]
 800539a:	e021      	b.n	80053e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800539c:	893b      	ldrh	r3, [r7, #8]
 800539e:	0a1b      	lsrs	r3, r3, #8
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ac:	6a39      	ldr	r1, [r7, #32]
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 f93e 	bl	8005630 <I2C_WaitOnTXEFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d107      	bne.n	80053d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e050      	b.n	8005478 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053d6:	893b      	ldrh	r3, [r7, #8]
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e2:	6a39      	ldr	r1, [r7, #32]
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f923 	bl	8005630 <I2C_WaitOnTXEFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00d      	beq.n	800540c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d107      	bne.n	8005408 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005406:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e035      	b.n	8005478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800541a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	2200      	movs	r2, #0
 8005424:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f82b 	bl	8005484 <I2C_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00d      	beq.n	8005450 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005442:	d103      	bne.n	800544c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800544a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e013      	b.n	8005478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005450:	897b      	ldrh	r3, [r7, #10]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	f043 0301 	orr.w	r3, r3, #1
 8005458:	b2da      	uxtb	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	6a3a      	ldr	r2, [r7, #32]
 8005464:	4906      	ldr	r1, [pc, #24]	; (8005480 <I2C_RequestMemoryRead+0x1cc>)
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f863 	bl	8005532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	00010002 	.word	0x00010002

08005484 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	4613      	mov	r3, r2
 8005492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005494:	e025      	b.n	80054e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d021      	beq.n	80054e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549e:	f7fe fc2d 	bl	8003cfc <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d302      	bcc.n	80054b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d116      	bne.n	80054e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f043 0220 	orr.w	r2, r3, #32
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e023      	b.n	800552a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	0c1b      	lsrs	r3, r3, #16
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d10d      	bne.n	8005508 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	43da      	mvns	r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4013      	ands	r3, r2
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	bf0c      	ite	eq
 80054fe:	2301      	moveq	r3, #1
 8005500:	2300      	movne	r3, #0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	e00c      	b.n	8005522 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	43da      	mvns	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4013      	ands	r3, r2
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	bf0c      	ite	eq
 800551a:	2301      	moveq	r3, #1
 800551c:	2300      	movne	r3, #0
 800551e:	b2db      	uxtb	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	429a      	cmp	r2, r3
 8005526:	d0b6      	beq.n	8005496 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	60f8      	str	r0, [r7, #12]
 800553a:	60b9      	str	r1, [r7, #8]
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005540:	e051      	b.n	80055e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800554c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005550:	d123      	bne.n	800559a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005560:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800556a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f043 0204 	orr.w	r2, r3, #4
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e046      	b.n	8005628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a0:	d021      	beq.n	80055e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a2:	f7fe fbab 	bl	8003cfc <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d302      	bcc.n	80055b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d116      	bne.n	80055e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f043 0220 	orr.w	r2, r3, #32
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e020      	b.n	8005628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	0c1b      	lsrs	r3, r3, #16
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d10c      	bne.n	800560a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	43da      	mvns	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4013      	ands	r3, r2
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bf14      	ite	ne
 8005602:	2301      	movne	r3, #1
 8005604:	2300      	moveq	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	e00b      	b.n	8005622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	43da      	mvns	r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4013      	ands	r3, r2
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	bf14      	ite	ne
 800561c:	2301      	movne	r3, #1
 800561e:	2300      	moveq	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d18d      	bne.n	8005542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800563c:	e02d      	b.n	800569a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 f8ce 	bl	80057e0 <I2C_IsAcknowledgeFailed>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e02d      	b.n	80056aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d021      	beq.n	800569a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005656:	f7fe fb51 	bl	8003cfc <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	d302      	bcc.n	800566c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d116      	bne.n	800569a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e007      	b.n	80056aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a4:	2b80      	cmp	r3, #128	; 0x80
 80056a6:	d1ca      	bne.n	800563e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056be:	e02d      	b.n	800571c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f88d 	bl	80057e0 <I2C_IsAcknowledgeFailed>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e02d      	b.n	800572c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d021      	beq.n	800571c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d8:	f7fe fb10 	bl	8003cfc <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d302      	bcc.n	80056ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d116      	bne.n	800571c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	f043 0220 	orr.w	r2, r3, #32
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e007      	b.n	800572c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b04      	cmp	r3, #4
 8005728:	d1ca      	bne.n	80056c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005740:	e042      	b.n	80057c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	2b10      	cmp	r3, #16
 800574e:	d119      	bne.n	8005784 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f06f 0210 	mvn.w	r2, #16
 8005758:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e029      	b.n	80057d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005784:	f7fe faba 	bl	8003cfc <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	429a      	cmp	r2, r3
 8005792:	d302      	bcc.n	800579a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d116      	bne.n	80057c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	f043 0220 	orr.w	r2, r3, #32
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e007      	b.n	80057d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d2:	2b40      	cmp	r3, #64	; 0x40
 80057d4:	d1b5      	bne.n	8005742 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f6:	d11b      	bne.n	8005830 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005800:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	f043 0204 	orr.w	r2, r3, #4
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800583e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005840:	b08f      	sub	sp, #60	; 0x3c
 8005842:	af0a      	add	r7, sp, #40	; 0x28
 8005844:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e10f      	b.n	8005a70 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f005 fd82 	bl	800b374 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2203      	movs	r2, #3
 8005874:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005880:	2b00      	cmp	r3, #0
 8005882:	d102      	bne.n	800588a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f002 fc75 	bl	800817e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	603b      	str	r3, [r7, #0]
 800589a:	687e      	ldr	r6, [r7, #4]
 800589c:	466d      	mov	r5, sp
 800589e:	f106 0410 	add.w	r4, r6, #16
 80058a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80058b2:	1d33      	adds	r3, r6, #4
 80058b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058b6:	6838      	ldr	r0, [r7, #0]
 80058b8:	f002 fb4c 	bl	8007f54 <USB_CoreInit>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2202      	movs	r2, #2
 80058c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e0d0      	b.n	8005a70 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2100      	movs	r1, #0
 80058d4:	4618      	mov	r0, r3
 80058d6:	f002 fc63 	bl	80081a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058da:	2300      	movs	r3, #0
 80058dc:	73fb      	strb	r3, [r7, #15]
 80058de:	e04a      	b.n	8005976 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80058e0:	7bfa      	ldrb	r2, [r7, #15]
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	4613      	mov	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	1a9b      	subs	r3, r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	440b      	add	r3, r1
 80058ee:	333d      	adds	r3, #61	; 0x3d
 80058f0:	2201      	movs	r2, #1
 80058f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80058f4:	7bfa      	ldrb	r2, [r7, #15]
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	4613      	mov	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	333c      	adds	r3, #60	; 0x3c
 8005904:	7bfa      	ldrb	r2, [r7, #15]
 8005906:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005908:	7bfa      	ldrb	r2, [r7, #15]
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	b298      	uxth	r0, r3
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	4613      	mov	r3, r2
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	1a9b      	subs	r3, r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	3342      	adds	r3, #66	; 0x42
 800591c:	4602      	mov	r2, r0
 800591e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005920:	7bfa      	ldrb	r2, [r7, #15]
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	4613      	mov	r3, r2
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	1a9b      	subs	r3, r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	440b      	add	r3, r1
 800592e:	333f      	adds	r3, #63	; 0x3f
 8005930:	2200      	movs	r2, #0
 8005932:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005934:	7bfa      	ldrb	r2, [r7, #15]
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	3344      	adds	r3, #68	; 0x44
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005948:	7bfa      	ldrb	r2, [r7, #15]
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	4613      	mov	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	1a9b      	subs	r3, r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	3348      	adds	r3, #72	; 0x48
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800595c:	7bfa      	ldrb	r2, [r7, #15]
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	4613      	mov	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	1a9b      	subs	r3, r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	3350      	adds	r3, #80	; 0x50
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	3301      	adds	r3, #1
 8005974:	73fb      	strb	r3, [r7, #15]
 8005976:	7bfa      	ldrb	r2, [r7, #15]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	429a      	cmp	r2, r3
 800597e:	d3af      	bcc.n	80058e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005980:	2300      	movs	r3, #0
 8005982:	73fb      	strb	r3, [r7, #15]
 8005984:	e044      	b.n	8005a10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005986:	7bfa      	ldrb	r2, [r7, #15]
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800599c:	7bfa      	ldrb	r2, [r7, #15]
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80059ae:	7bfa      	ldrb	r2, [r7, #15]
 80059b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059b2:	7bfa      	ldrb	r2, [r7, #15]
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	4613      	mov	r3, r2
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	440b      	add	r3, r1
 80059c0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80059c4:	2200      	movs	r2, #0
 80059c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80059c8:	7bfa      	ldrb	r2, [r7, #15]
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	4613      	mov	r3, r2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	1a9b      	subs	r3, r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80059de:	7bfa      	ldrb	r2, [r7, #15]
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	1a9b      	subs	r3, r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	440b      	add	r3, r1
 80059ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80059f4:	7bfa      	ldrb	r2, [r7, #15]
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	1a9b      	subs	r3, r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
 8005a10:	7bfa      	ldrb	r2, [r7, #15]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d3b5      	bcc.n	8005986 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	687e      	ldr	r6, [r7, #4]
 8005a22:	466d      	mov	r5, sp
 8005a24:	f106 0410 	add.w	r4, r6, #16
 8005a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a34:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a38:	1d33      	adds	r3, r6, #4
 8005a3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a3c:	6838      	ldr	r0, [r7, #0]
 8005a3e:	f002 fbfb 	bl	8008238 <USB_DevInit>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e00d      	b.n	8005a70 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f003 fc77 	bl	800935c <USB_DevDisconnect>

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_PCD_Start+0x1c>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e020      	b.n	8005ad6 <HAL_PCD_Start+0x5e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d109      	bne.n	8005ab8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d005      	beq.n	8005ab8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f002 fb4d 	bl	800815c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f003 fc27 	bl	800931a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005ade:	b590      	push	{r4, r7, lr}
 8005ae0:	b08d      	sub	sp, #52	; 0x34
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f003 fce5 	bl	80094c4 <USB_GetMode>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f040 839d 	bne.w	800623c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f003 fc49 	bl	800939e <USB_ReadInterrupts>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 8393 	beq.w	800623a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f003 fc40 	bl	800939e <USB_ReadInterrupts>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d107      	bne.n	8005b38 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695a      	ldr	r2, [r3, #20]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f002 0202 	and.w	r2, r2, #2
 8005b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f003 fc2e 	bl	800939e <USB_ReadInterrupts>
 8005b42:	4603      	mov	r3, r0
 8005b44:	f003 0310 	and.w	r3, r3, #16
 8005b48:	2b10      	cmp	r3, #16
 8005b4a:	d161      	bne.n	8005c10 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0210 	bic.w	r2, r2, #16
 8005b5a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	f003 020f 	and.w	r2, r3, #15
 8005b68:	4613      	mov	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	4413      	add	r3, r2
 8005b78:	3304      	adds	r3, #4
 8005b7a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	0c5b      	lsrs	r3, r3, #17
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d124      	bne.n	8005bd2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d035      	beq.n	8005c00 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	091b      	lsrs	r3, r3, #4
 8005b9c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6a38      	ldr	r0, [r7, #32]
 8005ba8:	f003 fa65 	bl	8009076 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bb8:	441a      	add	r2, r3
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	091b      	lsrs	r3, r3, #4
 8005bc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bca:	441a      	add	r2, r3
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	619a      	str	r2, [r3, #24]
 8005bd0:	e016      	b.n	8005c00 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	0c5b      	lsrs	r3, r3, #17
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	2b06      	cmp	r3, #6
 8005bdc:	d110      	bne.n	8005c00 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005be4:	2208      	movs	r2, #8
 8005be6:	4619      	mov	r1, r3
 8005be8:	6a38      	ldr	r0, [r7, #32]
 8005bea:	f003 fa44 	bl	8009076 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	091b      	lsrs	r3, r3, #4
 8005bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bfa:	441a      	add	r2, r3
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0210 	orr.w	r2, r2, #16
 8005c0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f003 fbc2 	bl	800939e <USB_ReadInterrupts>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c24:	d16e      	bne.n	8005d04 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f003 fbc8 	bl	80093c4 <USB_ReadDevAllOutEpInterrupt>
 8005c34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005c36:	e062      	b.n	8005cfe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d057      	beq.n	8005cf2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f003 fbed 	bl	800942c <USB_ReadDevOutEPInterrupt>
 8005c52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00c      	beq.n	8005c78 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fdb0 	bl	80067d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00c      	beq.n	8005c9c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8e:	461a      	mov	r2, r3
 8005c90:	2308      	movs	r3, #8
 8005c92:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005c94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 feaa 	bl	80069f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f003 0310 	and.w	r3, r3, #16
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d008      	beq.n	8005cb8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d008      	beq.n	8005cd4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	461a      	mov	r2, r3
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d009      	beq.n	8005cf2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cea:	461a      	mov	r2, r3
 8005cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cf0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	085b      	lsrs	r3, r3, #1
 8005cfc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d199      	bne.n	8005c38 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f003 fb48 	bl	800939e <USB_ReadInterrupts>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d18:	f040 80c0 	bne.w	8005e9c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f003 fb69 	bl	80093f8 <USB_ReadDevAllInEpInterrupt>
 8005d26:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005d2c:	e0b2      	b.n	8005e94 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 80a7 	beq.w	8005e88 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	4611      	mov	r1, r2
 8005d44:	4618      	mov	r0, r3
 8005d46:	f003 fb8f 	bl	8009468 <USB_ReadDevInEPInterrupt>
 8005d4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d057      	beq.n	8005e06 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	69f9      	ldr	r1, [r7, #28]
 8005d72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d76:	4013      	ands	r3, r2
 8005d78:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d86:	461a      	mov	r2, r3
 8005d88:	2301      	movs	r3, #1
 8005d8a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d132      	bne.n	8005dfa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d98:	4613      	mov	r3, r2
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	1a9b      	subs	r3, r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	3348      	adds	r3, #72	; 0x48
 8005da4:	6819      	ldr	r1, [r3, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005daa:	4613      	mov	r3, r2
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4403      	add	r3, r0
 8005db4:	3344      	adds	r3, #68	; 0x44
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4419      	add	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	1a9b      	subs	r3, r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4403      	add	r3, r0
 8005dc8:	3348      	adds	r3, #72	; 0x48
 8005dca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d113      	bne.n	8005dfa <HAL_PCD_IRQHandler+0x31c>
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	1a9b      	subs	r3, r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	440b      	add	r3, r1
 8005de0:	3350      	adds	r3, #80	; 0x50
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d108      	bne.n	8005dfa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005df2:	461a      	mov	r2, r3
 8005df4:	2101      	movs	r1, #1
 8005df6:	f003 fb97 	bl	8009528 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f005 fb46 	bl	800b492 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d008      	beq.n	8005e22 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	2308      	movs	r3, #8
 8005e20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f003 0310 	and.w	r3, r3, #16
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d008      	beq.n	8005e3e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e38:	461a      	mov	r2, r3
 8005e3a:	2310      	movs	r3, #16
 8005e3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d008      	beq.n	8005e5a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e54:	461a      	mov	r2, r3
 8005e56:	2340      	movs	r3, #64	; 0x40
 8005e58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d008      	beq.n	8005e76 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e70:	461a      	mov	r2, r3
 8005e72:	2302      	movs	r3, #2
 8005e74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fc1b 	bl	80066be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	085b      	lsrs	r3, r3, #1
 8005e92:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f47f af49 	bne.w	8005d2e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f003 fa7c 	bl	800939e <USB_ReadInterrupts>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eb0:	d122      	bne.n	8005ef8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ec0:	f023 0301 	bic.w	r3, r3, #1
 8005ec4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d108      	bne.n	8005ee2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005ed8:	2100      	movs	r1, #0
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fe26 	bl	8006b2c <HAL_PCDEx_LPM_Callback>
 8005ee0:	e002      	b.n	8005ee8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f005 fb42 	bl	800b56c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695a      	ldr	r2, [r3, #20]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005ef6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f003 fa4e 	bl	800939e <USB_ReadInterrupts>
 8005f02:	4603      	mov	r3, r0
 8005f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f0c:	d112      	bne.n	8005f34 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d102      	bne.n	8005f24 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f005 fafe 	bl	800b520 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695a      	ldr	r2, [r3, #20]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005f32:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f003 fa30 	bl	800939e <USB_ReadInterrupts>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f48:	f040 80c7 	bne.w	80060da <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f5a:	f023 0301 	bic.w	r3, r3, #1
 8005f5e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2110      	movs	r1, #16
 8005f66:	4618      	mov	r0, r3
 8005f68:	f002 faca 	bl	8008500 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f70:	e056      	b.n	8006020 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f84:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f96:	0151      	lsls	r1, r2, #5
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	440a      	add	r2, r1
 8005f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fa4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fb6:	0151      	lsls	r1, r2, #5
 8005fb8:	69fa      	ldr	r2, [r7, #28]
 8005fba:	440a      	add	r2, r1
 8005fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fc4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fd8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fea:	0151      	lsls	r1, r2, #5
 8005fec:	69fa      	ldr	r2, [r7, #28]
 8005fee:	440a      	add	r2, r1
 8005ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ff8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800600a:	0151      	lsls	r1, r2, #5
 800600c:	69fa      	ldr	r2, [r7, #28]
 800600e:	440a      	add	r2, r1
 8006010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006014:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006018:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800601a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601c:	3301      	adds	r3, #1
 800601e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006026:	429a      	cmp	r2, r3
 8006028:	d3a3      	bcc.n	8005f72 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006038:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800603c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	2b00      	cmp	r3, #0
 8006044:	d016      	beq.n	8006074 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006050:	69fa      	ldr	r2, [r7, #28]
 8006052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006056:	f043 030b 	orr.w	r3, r3, #11
 800605a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800606c:	f043 030b 	orr.w	r3, r3, #11
 8006070:	6453      	str	r3, [r2, #68]	; 0x44
 8006072:	e015      	b.n	80060a0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006082:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006086:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800608a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800609a:	f043 030b 	orr.w	r3, r3, #11
 800609e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060c4:	461a      	mov	r2, r3
 80060c6:	f003 fa2f 	bl	8009528 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695a      	ldr	r2, [r3, #20]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80060d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f003 f95d 	bl	800939e <USB_ReadInterrupts>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ee:	d124      	bne.n	800613a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f003 f9f3 	bl	80094e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4618      	mov	r0, r3
 8006100:	f002 fa5b 	bl	80085ba <USB_GetDevSpeed>
 8006104:	4603      	mov	r3, r0
 8006106:	461a      	mov	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681c      	ldr	r4, [r3, #0]
 8006110:	f001 f958 	bl	80073c4 <HAL_RCC_GetHCLKFreq>
 8006114:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800611a:	b2db      	uxtb	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	4620      	mov	r0, r4
 8006120:	f001 ff7a 	bl	8008018 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f005 f9dc 	bl	800b4e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	695a      	ldr	r2, [r3, #20]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006138:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f003 f92d 	bl	800939e <USB_ReadInterrupts>
 8006144:	4603      	mov	r3, r0
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b08      	cmp	r3, #8
 800614c:	d10a      	bne.n	8006164 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f005 f9b9 	bl	800b4c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695a      	ldr	r2, [r3, #20]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f002 0208 	and.w	r2, r2, #8
 8006162:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f003 f918 	bl	800939e <USB_ReadInterrupts>
 800616e:	4603      	mov	r3, r0
 8006170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006178:	d10f      	bne.n	800619a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	b2db      	uxtb	r3, r3
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f005 fa11 	bl	800b5ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695a      	ldr	r2, [r3, #20]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006198:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f003 f8fd 	bl	800939e <USB_ReadInterrupts>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061ae:	d10f      	bne.n	80061d0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f005 f9e4 	bl	800b588 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695a      	ldr	r2, [r3, #20]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80061ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f003 f8e2 	bl	800939e <USB_ReadInterrupts>
 80061da:	4603      	mov	r3, r0
 80061dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e4:	d10a      	bne.n	80061fc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f005 f9f2 	bl	800b5d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695a      	ldr	r2, [r3, #20]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80061fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4618      	mov	r0, r3
 8006202:	f003 f8cc 	bl	800939e <USB_ReadInterrupts>
 8006206:	4603      	mov	r3, r0
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b04      	cmp	r3, #4
 800620e:	d115      	bne.n	800623c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	f003 0304 	and.w	r3, r3, #4
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f005 f9e2 	bl	800b5ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6859      	ldr	r1, [r3, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	430a      	orrs	r2, r1
 8006236:	605a      	str	r2, [r3, #4]
 8006238:	e000      	b.n	800623c <HAL_PCD_IRQHandler+0x75e>
      return;
 800623a:	bf00      	nop
    }
  }
}
 800623c:	3734      	adds	r7, #52	; 0x34
 800623e:	46bd      	mov	sp, r7
 8006240:	bd90      	pop	{r4, r7, pc}

08006242 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_PCD_SetAddress+0x1a>
 8006258:	2302      	movs	r3, #2
 800625a:	e013      	b.n	8006284 <HAL_PCD_SetAddress+0x42>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	78fa      	ldrb	r2, [r7, #3]
 8006268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	78fa      	ldrb	r2, [r7, #3]
 8006272:	4611      	mov	r1, r2
 8006274:	4618      	mov	r0, r3
 8006276:	f003 f82a 	bl	80092ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	4608      	mov	r0, r1
 8006296:	4611      	mov	r1, r2
 8006298:	461a      	mov	r2, r3
 800629a:	4603      	mov	r3, r0
 800629c:	70fb      	strb	r3, [r7, #3]
 800629e:	460b      	mov	r3, r1
 80062a0:	803b      	strh	r3, [r7, #0]
 80062a2:	4613      	mov	r3, r2
 80062a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	da0f      	bge.n	80062d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	f003 020f 	and.w	r2, r3, #15
 80062b8:	4613      	mov	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	3338      	adds	r3, #56	; 0x38
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	4413      	add	r3, r2
 80062c6:	3304      	adds	r3, #4
 80062c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	705a      	strb	r2, [r3, #1]
 80062d0:	e00f      	b.n	80062f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062d2:	78fb      	ldrb	r3, [r7, #3]
 80062d4:	f003 020f 	and.w	r2, r3, #15
 80062d8:	4613      	mov	r3, r2
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	1a9b      	subs	r3, r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	4413      	add	r3, r2
 80062e8:	3304      	adds	r3, #4
 80062ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80062f2:	78fb      	ldrb	r3, [r7, #3]
 80062f4:	f003 030f 	and.w	r3, r3, #15
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80062fe:	883a      	ldrh	r2, [r7, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	78ba      	ldrb	r2, [r7, #2]
 8006308:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	785b      	ldrb	r3, [r3, #1]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d004      	beq.n	800631c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800631c:	78bb      	ldrb	r3, [r7, #2]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d102      	bne.n	8006328 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_PCD_EP_Open+0xaa>
 8006332:	2302      	movs	r3, #2
 8006334:	e00e      	b.n	8006354 <HAL_PCD_EP_Open+0xc8>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68f9      	ldr	r1, [r7, #12]
 8006344:	4618      	mov	r0, r3
 8006346:	f002 f95d 	bl	8008604 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006352:	7afb      	ldrb	r3, [r7, #11]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800636c:	2b00      	cmp	r3, #0
 800636e:	da0f      	bge.n	8006390 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	f003 020f 	and.w	r2, r3, #15
 8006376:	4613      	mov	r3, r2
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	1a9b      	subs	r3, r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	3338      	adds	r3, #56	; 0x38
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	4413      	add	r3, r2
 8006384:	3304      	adds	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	705a      	strb	r2, [r3, #1]
 800638e:	e00f      	b.n	80063b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	f003 020f 	and.w	r2, r3, #15
 8006396:	4613      	mov	r3, r2
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	1a9b      	subs	r3, r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	4413      	add	r3, r2
 80063a6:	3304      	adds	r3, #4
 80063a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_PCD_EP_Close+0x6e>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e00e      	b.n	80063e8 <HAL_PCD_EP_Close+0x8c>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68f9      	ldr	r1, [r7, #12]
 80063d8:	4618      	mov	r0, r3
 80063da:	f002 f99b 	bl	8008714 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	607a      	str	r2, [r7, #4]
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	460b      	mov	r3, r1
 80063fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006400:	7afb      	ldrb	r3, [r7, #11]
 8006402:	f003 020f 	and.w	r2, r3, #15
 8006406:	4613      	mov	r3, r2
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	1a9b      	subs	r3, r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4413      	add	r3, r2
 8006416:	3304      	adds	r3, #4
 8006418:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2200      	movs	r2, #0
 800642a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	2200      	movs	r2, #0
 8006430:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006432:	7afb      	ldrb	r3, [r7, #11]
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	b2da      	uxtb	r2, r3
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d102      	bne.n	800644c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800644c:	7afb      	ldrb	r3, [r7, #11]
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	b2db      	uxtb	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	6979      	ldr	r1, [r7, #20]
 8006464:	f002 fc76 	bl	8008d54 <USB_EP0StartXfer>
 8006468:	e008      	b.n	800647c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	6979      	ldr	r1, [r7, #20]
 8006478:	f002 fa28 	bl	80088cc <USB_EPStartXfer>
  }

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	f003 020f 	and.w	r2, r3, #15
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80064a8:	681b      	ldr	r3, [r3, #0]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b086      	sub	sp, #24
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
 80064c2:	460b      	mov	r3, r1
 80064c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064c6:	7afb      	ldrb	r3, [r7, #11]
 80064c8:	f003 020f 	and.w	r2, r3, #15
 80064cc:	4613      	mov	r3, r2
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	1a9b      	subs	r3, r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	3338      	adds	r3, #56	; 0x38
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4413      	add	r3, r2
 80064da:	3304      	adds	r3, #4
 80064dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2200      	movs	r2, #0
 80064ee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2201      	movs	r2, #1
 80064f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064f6:	7afb      	ldrb	r3, [r7, #11]
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d102      	bne.n	8006510 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006510:	7afb      	ldrb	r3, [r7, #11]
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	2b00      	cmp	r3, #0
 8006518:	d109      	bne.n	800652e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	6979      	ldr	r1, [r7, #20]
 8006528:	f002 fc14 	bl	8008d54 <USB_EP0StartXfer>
 800652c:	e008      	b.n	8006540 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6818      	ldr	r0, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	6979      	ldr	r1, [r7, #20]
 800653c:	f002 f9c6 	bl	80088cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	460b      	mov	r3, r1
 8006554:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	f003 020f 	and.w	r2, r3, #15
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	429a      	cmp	r2, r3
 8006562:	d901      	bls.n	8006568 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e050      	b.n	800660a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800656c:	2b00      	cmp	r3, #0
 800656e:	da0f      	bge.n	8006590 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	f003 020f 	and.w	r2, r3, #15
 8006576:	4613      	mov	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	1a9b      	subs	r3, r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	3338      	adds	r3, #56	; 0x38
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	4413      	add	r3, r2
 8006584:	3304      	adds	r3, #4
 8006586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	705a      	strb	r2, [r3, #1]
 800658e:	e00d      	b.n	80065ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006590:	78fa      	ldrb	r2, [r7, #3]
 8006592:	4613      	mov	r3, r2
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	4413      	add	r3, r2
 80065a2:	3304      	adds	r3, #4
 80065a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	f003 030f 	and.w	r3, r3, #15
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d101      	bne.n	80065cc <HAL_PCD_EP_SetStall+0x82>
 80065c8:	2302      	movs	r3, #2
 80065ca:	e01e      	b.n	800660a <HAL_PCD_EP_SetStall+0xc0>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68f9      	ldr	r1, [r7, #12]
 80065da:	4618      	mov	r0, r3
 80065dc:	f002 fda3 	bl	8009126 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6818      	ldr	r0, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	b2d9      	uxtb	r1, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065fa:	461a      	mov	r2, r3
 80065fc:	f002 ff94 	bl	8009528 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	460b      	mov	r3, r1
 800661c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800661e:	78fb      	ldrb	r3, [r7, #3]
 8006620:	f003 020f 	and.w	r2, r3, #15
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	429a      	cmp	r2, r3
 800662a:	d901      	bls.n	8006630 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e042      	b.n	80066b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006630:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006634:	2b00      	cmp	r3, #0
 8006636:	da0f      	bge.n	8006658 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	f003 020f 	and.w	r2, r3, #15
 800663e:	4613      	mov	r3, r2
 8006640:	00db      	lsls	r3, r3, #3
 8006642:	1a9b      	subs	r3, r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	3338      	adds	r3, #56	; 0x38
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	4413      	add	r3, r2
 800664c:	3304      	adds	r3, #4
 800664e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	705a      	strb	r2, [r3, #1]
 8006656:	e00f      	b.n	8006678 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	f003 020f 	and.w	r2, r3, #15
 800665e:	4613      	mov	r3, r2
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	1a9b      	subs	r3, r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	4413      	add	r3, r2
 800666e:	3304      	adds	r3, #4
 8006670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800667e:	78fb      	ldrb	r3, [r7, #3]
 8006680:	f003 030f 	and.w	r3, r3, #15
 8006684:	b2da      	uxtb	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_PCD_EP_ClrStall+0x86>
 8006694:	2302      	movs	r3, #2
 8006696:	e00e      	b.n	80066b6 <HAL_PCD_EP_ClrStall+0xa4>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68f9      	ldr	r1, [r7, #12]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f002 fdab 	bl	8009202 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b08a      	sub	sp, #40	; 0x28
 80066c2:	af02      	add	r7, sp, #8
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	4613      	mov	r3, r2
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	1a9b      	subs	r3, r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	3338      	adds	r3, #56	; 0x38
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	4413      	add	r3, r2
 80066e2:	3304      	adds	r3, #4
 80066e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d901      	bls.n	80066f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e06c      	b.n	80067d0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	695a      	ldr	r2, [r3, #20]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	429a      	cmp	r2, r3
 800670a:	d902      	bls.n	8006712 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	3303      	adds	r3, #3
 8006716:	089b      	lsrs	r3, r3, #2
 8006718:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800671a:	e02b      	b.n	8006774 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	695a      	ldr	r2, [r3, #20]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	69fa      	ldr	r2, [r7, #28]
 800672e:	429a      	cmp	r2, r3
 8006730:	d902      	bls.n	8006738 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	3303      	adds	r3, #3
 800673c:	089b      	lsrs	r3, r3, #2
 800673e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	68d9      	ldr	r1, [r3, #12]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	b2da      	uxtb	r2, r3
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006750:	b2db      	uxtb	r3, r3
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	4603      	mov	r3, r0
 8006756:	6978      	ldr	r0, [r7, #20]
 8006758:	f002 fc4f 	bl	8008ffa <USB_WritePacket>

    ep->xfer_buff  += len;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	441a      	add	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	699a      	ldr	r2, [r3, #24]
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	441a      	add	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	b29b      	uxth	r3, r3
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	429a      	cmp	r2, r3
 8006788:	d809      	bhi.n	800679e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006792:	429a      	cmp	r2, r3
 8006794:	d203      	bcs.n	800679e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1be      	bne.n	800671c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	695a      	ldr	r2, [r3, #20]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d811      	bhi.n	80067ce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	f003 030f 	and.w	r3, r3, #15
 80067b0:	2201      	movs	r2, #1
 80067b2:	fa02 f303 	lsl.w	r3, r2, r3
 80067b6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	43db      	mvns	r3, r3
 80067c4:	6939      	ldr	r1, [r7, #16]
 80067c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067ca:	4013      	ands	r3, r2
 80067cc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3720      	adds	r7, #32
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	333c      	adds	r3, #60	; 0x3c
 80067f0:	3304      	adds	r3, #4
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	2b01      	cmp	r3, #1
 800680c:	f040 80a0 	bne.w	8006950 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f003 0308 	and.w	r3, r3, #8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d015      	beq.n	8006846 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4a72      	ldr	r2, [pc, #456]	; (80069e8 <PCD_EP_OutXfrComplete_int+0x210>)
 800681e:	4293      	cmp	r3, r2
 8006820:	f240 80dd 	bls.w	80069de <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 80d7 	beq.w	80069de <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683c:	461a      	mov	r2, r3
 800683e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006842:	6093      	str	r3, [r2, #8]
 8006844:	e0cb      	b.n	80069de <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	d009      	beq.n	8006864 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685c:	461a      	mov	r2, r3
 800685e:	2320      	movs	r3, #32
 8006860:	6093      	str	r3, [r2, #8]
 8006862:	e0bc      	b.n	80069de <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800686a:	2b00      	cmp	r3, #0
 800686c:	f040 80b7 	bne.w	80069de <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4a5d      	ldr	r2, [pc, #372]	; (80069e8 <PCD_EP_OutXfrComplete_int+0x210>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d90f      	bls.n	8006898 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4413      	add	r3, r2
 800688a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688e:	461a      	mov	r2, r3
 8006890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006894:	6093      	str	r3, [r2, #8]
 8006896:	e0a2      	b.n	80069de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	4613      	mov	r3, r2
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	1a9b      	subs	r3, r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	440b      	add	r3, r1
 80068a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80068aa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	0159      	lsls	r1, r3, #5
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	440b      	add	r3, r1
 80068b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80068be:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	4613      	mov	r3, r2
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	1a9b      	subs	r3, r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4403      	add	r3, r0
 80068ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80068d2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	4613      	mov	r3, r2
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	1a9b      	subs	r3, r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068e6:	6819      	ldr	r1, [r3, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	4613      	mov	r3, r2
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	1a9b      	subs	r3, r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4403      	add	r3, r0
 80068f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4419      	add	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	4613      	mov	r3, r2
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	1a9b      	subs	r3, r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4403      	add	r3, r0
 800690c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006910:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d114      	bne.n	8006942 <PCD_EP_OutXfrComplete_int+0x16a>
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	4613      	mov	r3, r2
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	1a9b      	subs	r3, r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d108      	bne.n	8006942 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800693a:	461a      	mov	r2, r3
 800693c:	2101      	movs	r1, #1
 800693e:	f002 fdf3 	bl	8009528 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f004 fd87 	bl	800b45c <HAL_PCD_DataOutStageCallback>
 800694e:	e046      	b.n	80069de <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4a26      	ldr	r2, [pc, #152]	; (80069ec <PCD_EP_OutXfrComplete_int+0x214>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d124      	bne.n	80069a2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696e:	461a      	mov	r2, r3
 8006970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006974:	6093      	str	r3, [r2, #8]
 8006976:	e032      	b.n	80069de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d008      	beq.n	8006994 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	4413      	add	r3, r2
 800698a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698e:	461a      	mov	r2, r3
 8006990:	2320      	movs	r3, #32
 8006992:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f004 fd5e 	bl	800b45c <HAL_PCD_DataOutStageCallback>
 80069a0:	e01d      	b.n	80069de <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d114      	bne.n	80069d2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	4613      	mov	r3, r2
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	1a9b      	subs	r3, r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	440b      	add	r3, r1
 80069b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d108      	bne.n	80069d2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80069ca:	461a      	mov	r2, r3
 80069cc:	2100      	movs	r1, #0
 80069ce:	f002 fdab 	bl	8009528 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f004 fd3f 	bl	800b45c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3718      	adds	r7, #24
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	4f54300a 	.word	0x4f54300a
 80069ec:	4f54310a 	.word	0x4f54310a

080069f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	333c      	adds	r3, #60	; 0x3c
 8006a08:	3304      	adds	r3, #4
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4a15      	ldr	r2, [pc, #84]	; (8006a78 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d90e      	bls.n	8006a44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d009      	beq.n	8006a44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f004 fcf7 	bl	800b438 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4a0a      	ldr	r2, [pc, #40]	; (8006a78 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d90c      	bls.n	8006a6c <PCD_EP_OutSetupPacket_int+0x7c>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d108      	bne.n	8006a6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a64:	461a      	mov	r2, r3
 8006a66:	2101      	movs	r1, #1
 8006a68:	f002 fd5e 	bl	8009528 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	4f54300a 	.word	0x4f54300a

08006a7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	70fb      	strb	r3, [r7, #3]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d107      	bne.n	8006aaa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a9a:	883b      	ldrh	r3, [r7, #0]
 8006a9c:	0419      	lsls	r1, r3, #16
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	629a      	str	r2, [r3, #40]	; 0x28
 8006aa8:	e028      	b.n	8006afc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	0c1b      	lsrs	r3, r3, #16
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	73fb      	strb	r3, [r7, #15]
 8006abc:	e00d      	b.n	8006ada <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	3340      	adds	r3, #64	; 0x40
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	0c1b      	lsrs	r3, r3, #16
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	73fb      	strb	r3, [r7, #15]
 8006ada:	7bfa      	ldrb	r2, [r7, #15]
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d3ec      	bcc.n	8006abe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006ae4:	883b      	ldrh	r3, [r7, #0]
 8006ae6:	0418      	lsls	r0, r3, #16
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6819      	ldr	r1, [r3, #0]
 8006aec:	78fb      	ldrb	r3, [r7, #3]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	4302      	orrs	r2, r0
 8006af4:	3340      	adds	r3, #64	; 0x40
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	440b      	add	r3, r1
 8006afa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	460b      	mov	r3, r1
 8006b14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	887a      	ldrh	r2, [r7, #2]
 8006b1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	460b      	mov	r3, r1
 8006b36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e264      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d075      	beq.n	8006c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b62:	4ba3      	ldr	r3, [pc, #652]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 030c 	and.w	r3, r3, #12
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d00c      	beq.n	8006b88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b6e:	4ba0      	ldr	r3, [pc, #640]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b76:	2b08      	cmp	r3, #8
 8006b78:	d112      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b7a:	4b9d      	ldr	r3, [pc, #628]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b86:	d10b      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b88:	4b99      	ldr	r3, [pc, #612]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d05b      	beq.n	8006c4c <HAL_RCC_OscConfig+0x108>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d157      	bne.n	8006c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e23f      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba8:	d106      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x74>
 8006baa:	4b91      	ldr	r3, [pc, #580]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a90      	ldr	r2, [pc, #576]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	e01d      	b.n	8006bf4 <HAL_RCC_OscConfig+0xb0>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bc0:	d10c      	bne.n	8006bdc <HAL_RCC_OscConfig+0x98>
 8006bc2:	4b8b      	ldr	r3, [pc, #556]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a8a      	ldr	r2, [pc, #552]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	4b88      	ldr	r3, [pc, #544]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a87      	ldr	r2, [pc, #540]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	e00b      	b.n	8006bf4 <HAL_RCC_OscConfig+0xb0>
 8006bdc:	4b84      	ldr	r3, [pc, #528]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a83      	ldr	r2, [pc, #524]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	4b81      	ldr	r3, [pc, #516]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a80      	ldr	r2, [pc, #512]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d013      	beq.n	8006c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bfc:	f7fd f87e 	bl	8003cfc <HAL_GetTick>
 8006c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c04:	f7fd f87a 	bl	8003cfc <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b64      	cmp	r3, #100	; 0x64
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e204      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c16:	4b76      	ldr	r3, [pc, #472]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0f0      	beq.n	8006c04 <HAL_RCC_OscConfig+0xc0>
 8006c22:	e014      	b.n	8006c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c24:	f7fd f86a 	bl	8003cfc <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c2c:	f7fd f866 	bl	8003cfc <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b64      	cmp	r3, #100	; 0x64
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e1f0      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c3e:	4b6c      	ldr	r3, [pc, #432]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f0      	bne.n	8006c2c <HAL_RCC_OscConfig+0xe8>
 8006c4a:	e000      	b.n	8006c4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d063      	beq.n	8006d22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c5a:	4b65      	ldr	r3, [pc, #404]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 030c 	and.w	r3, r3, #12
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c66:	4b62      	ldr	r3, [pc, #392]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c6e:	2b08      	cmp	r3, #8
 8006c70:	d11c      	bne.n	8006cac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c72:	4b5f      	ldr	r3, [pc, #380]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d116      	bne.n	8006cac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c7e:	4b5c      	ldr	r3, [pc, #368]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d005      	beq.n	8006c96 <HAL_RCC_OscConfig+0x152>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d001      	beq.n	8006c96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e1c4      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c96:	4b56      	ldr	r3, [pc, #344]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	4952      	ldr	r1, [pc, #328]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006caa:	e03a      	b.n	8006d22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d020      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cb4:	4b4f      	ldr	r3, [pc, #316]	; (8006df4 <HAL_RCC_OscConfig+0x2b0>)
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cba:	f7fd f81f 	bl	8003cfc <HAL_GetTick>
 8006cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cc0:	e008      	b.n	8006cd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cc2:	f7fd f81b 	bl	8003cfc <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e1a5      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cd4:	4b46      	ldr	r3, [pc, #280]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0f0      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce0:	4b43      	ldr	r3, [pc, #268]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	00db      	lsls	r3, r3, #3
 8006cee:	4940      	ldr	r1, [pc, #256]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	600b      	str	r3, [r1, #0]
 8006cf4:	e015      	b.n	8006d22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cf6:	4b3f      	ldr	r3, [pc, #252]	; (8006df4 <HAL_RCC_OscConfig+0x2b0>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfc:	f7fc fffe 	bl	8003cfc <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d04:	f7fc fffa 	bl	8003cfc <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e184      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d16:	4b36      	ldr	r3, [pc, #216]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f0      	bne.n	8006d04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0308 	and.w	r3, r3, #8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d030      	beq.n	8006d90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d016      	beq.n	8006d64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d36:	4b30      	ldr	r3, [pc, #192]	; (8006df8 <HAL_RCC_OscConfig+0x2b4>)
 8006d38:	2201      	movs	r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d3c:	f7fc ffde 	bl	8003cfc <HAL_GetTick>
 8006d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d44:	f7fc ffda 	bl	8003cfc <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e164      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d56:	4b26      	ldr	r3, [pc, #152]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d0f0      	beq.n	8006d44 <HAL_RCC_OscConfig+0x200>
 8006d62:	e015      	b.n	8006d90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d64:	4b24      	ldr	r3, [pc, #144]	; (8006df8 <HAL_RCC_OscConfig+0x2b4>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d6a:	f7fc ffc7 	bl	8003cfc <HAL_GetTick>
 8006d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d70:	e008      	b.n	8006d84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d72:	f7fc ffc3 	bl	8003cfc <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e14d      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d84:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1f0      	bne.n	8006d72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 80a0 	beq.w	8006ede <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10f      	bne.n	8006dce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dae:	2300      	movs	r3, #0
 8006db0:	60bb      	str	r3, [r7, #8]
 8006db2:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	4a0e      	ldr	r2, [pc, #56]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <HAL_RCC_OscConfig+0x2ac>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc6:	60bb      	str	r3, [r7, #8]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dce:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <HAL_RCC_OscConfig+0x2b8>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d121      	bne.n	8006e1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dda:	4b08      	ldr	r3, [pc, #32]	; (8006dfc <HAL_RCC_OscConfig+0x2b8>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a07      	ldr	r2, [pc, #28]	; (8006dfc <HAL_RCC_OscConfig+0x2b8>)
 8006de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006de6:	f7fc ff89 	bl	8003cfc <HAL_GetTick>
 8006dea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dec:	e011      	b.n	8006e12 <HAL_RCC_OscConfig+0x2ce>
 8006dee:	bf00      	nop
 8006df0:	40023800 	.word	0x40023800
 8006df4:	42470000 	.word	0x42470000
 8006df8:	42470e80 	.word	0x42470e80
 8006dfc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e00:	f7fc ff7c 	bl	8003cfc <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e106      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e12:	4b85      	ldr	r3, [pc, #532]	; (8007028 <HAL_RCC_OscConfig+0x4e4>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0f0      	beq.n	8006e00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d106      	bne.n	8006e34 <HAL_RCC_OscConfig+0x2f0>
 8006e26:	4b81      	ldr	r3, [pc, #516]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2a:	4a80      	ldr	r2, [pc, #512]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006e2c:	f043 0301 	orr.w	r3, r3, #1
 8006e30:	6713      	str	r3, [r2, #112]	; 0x70
 8006e32:	e01c      	b.n	8006e6e <HAL_RCC_OscConfig+0x32a>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2b05      	cmp	r3, #5
 8006e3a:	d10c      	bne.n	8006e56 <HAL_RCC_OscConfig+0x312>
 8006e3c:	4b7b      	ldr	r3, [pc, #492]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e40:	4a7a      	ldr	r2, [pc, #488]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006e42:	f043 0304 	orr.w	r3, r3, #4
 8006e46:	6713      	str	r3, [r2, #112]	; 0x70
 8006e48:	4b78      	ldr	r3, [pc, #480]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4c:	4a77      	ldr	r2, [pc, #476]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006e4e:	f043 0301 	orr.w	r3, r3, #1
 8006e52:	6713      	str	r3, [r2, #112]	; 0x70
 8006e54:	e00b      	b.n	8006e6e <HAL_RCC_OscConfig+0x32a>
 8006e56:	4b75      	ldr	r3, [pc, #468]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5a:	4a74      	ldr	r2, [pc, #464]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006e5c:	f023 0301 	bic.w	r3, r3, #1
 8006e60:	6713      	str	r3, [r2, #112]	; 0x70
 8006e62:	4b72      	ldr	r3, [pc, #456]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e66:	4a71      	ldr	r2, [pc, #452]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006e68:	f023 0304 	bic.w	r3, r3, #4
 8006e6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d015      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e76:	f7fc ff41 	bl	8003cfc <HAL_GetTick>
 8006e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e7c:	e00a      	b.n	8006e94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e7e:	f7fc ff3d 	bl	8003cfc <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e0c5      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e94:	4b65      	ldr	r3, [pc, #404]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0ee      	beq.n	8006e7e <HAL_RCC_OscConfig+0x33a>
 8006ea0:	e014      	b.n	8006ecc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ea2:	f7fc ff2b 	bl	8003cfc <HAL_GetTick>
 8006ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ea8:	e00a      	b.n	8006ec0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eaa:	f7fc ff27 	bl	8003cfc <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d901      	bls.n	8006ec0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e0af      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ec0:	4b5a      	ldr	r3, [pc, #360]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1ee      	bne.n	8006eaa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d105      	bne.n	8006ede <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ed2:	4b56      	ldr	r3, [pc, #344]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	4a55      	ldr	r2, [pc, #340]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006edc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 809b 	beq.w	800701e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ee8:	4b50      	ldr	r3, [pc, #320]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 030c 	and.w	r3, r3, #12
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d05c      	beq.n	8006fae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d141      	bne.n	8006f80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006efc:	4b4c      	ldr	r3, [pc, #304]	; (8007030 <HAL_RCC_OscConfig+0x4ec>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f02:	f7fc fefb 	bl	8003cfc <HAL_GetTick>
 8006f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f08:	e008      	b.n	8006f1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f0a:	f7fc fef7 	bl	8003cfc <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e081      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f1c:	4b43      	ldr	r3, [pc, #268]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1f0      	bne.n	8006f0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	69da      	ldr	r2, [r3, #28]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	431a      	orrs	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	019b      	lsls	r3, r3, #6
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	3b01      	subs	r3, #1
 8006f42:	041b      	lsls	r3, r3, #16
 8006f44:	431a      	orrs	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	061b      	lsls	r3, r3, #24
 8006f4c:	4937      	ldr	r1, [pc, #220]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f52:	4b37      	ldr	r3, [pc, #220]	; (8007030 <HAL_RCC_OscConfig+0x4ec>)
 8006f54:	2201      	movs	r2, #1
 8006f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f58:	f7fc fed0 	bl	8003cfc <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f60:	f7fc fecc 	bl	8003cfc <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e056      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f72:	4b2e      	ldr	r3, [pc, #184]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d0f0      	beq.n	8006f60 <HAL_RCC_OscConfig+0x41c>
 8006f7e:	e04e      	b.n	800701e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f80:	4b2b      	ldr	r3, [pc, #172]	; (8007030 <HAL_RCC_OscConfig+0x4ec>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f86:	f7fc feb9 	bl	8003cfc <HAL_GetTick>
 8006f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f8e:	f7fc feb5 	bl	8003cfc <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e03f      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fa0:	4b22      	ldr	r3, [pc, #136]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1f0      	bne.n	8006f8e <HAL_RCC_OscConfig+0x44a>
 8006fac:	e037      	b.n	800701e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d101      	bne.n	8006fba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e032      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fba:	4b1c      	ldr	r3, [pc, #112]	; (800702c <HAL_RCC_OscConfig+0x4e8>)
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d028      	beq.n	800701a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d121      	bne.n	800701a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d11a      	bne.n	800701a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fea:	4013      	ands	r3, r2
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ff0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d111      	bne.n	800701a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007000:	085b      	lsrs	r3, r3, #1
 8007002:	3b01      	subs	r3, #1
 8007004:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007006:	429a      	cmp	r2, r3
 8007008:	d107      	bne.n	800701a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007016:	429a      	cmp	r2, r3
 8007018:	d001      	beq.n	800701e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e000      	b.n	8007020 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	40007000 	.word	0x40007000
 800702c:	40023800 	.word	0x40023800
 8007030:	42470060 	.word	0x42470060

08007034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e0cc      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007048:	4b68      	ldr	r3, [pc, #416]	; (80071ec <HAL_RCC_ClockConfig+0x1b8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0307 	and.w	r3, r3, #7
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	429a      	cmp	r2, r3
 8007054:	d90c      	bls.n	8007070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007056:	4b65      	ldr	r3, [pc, #404]	; (80071ec <HAL_RCC_ClockConfig+0x1b8>)
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800705e:	4b63      	ldr	r3, [pc, #396]	; (80071ec <HAL_RCC_ClockConfig+0x1b8>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d001      	beq.n	8007070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e0b8      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d020      	beq.n	80070be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d005      	beq.n	8007094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007088:	4b59      	ldr	r3, [pc, #356]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	4a58      	ldr	r2, [pc, #352]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 800708e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0308 	and.w	r3, r3, #8
 800709c:	2b00      	cmp	r3, #0
 800709e:	d005      	beq.n	80070ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070a0:	4b53      	ldr	r3, [pc, #332]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	4a52      	ldr	r2, [pc, #328]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 80070a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070ac:	4b50      	ldr	r3, [pc, #320]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	494d      	ldr	r1, [pc, #308]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d044      	beq.n	8007154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d107      	bne.n	80070e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070d2:	4b47      	ldr	r3, [pc, #284]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d119      	bne.n	8007112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e07f      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d003      	beq.n	80070f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d107      	bne.n	8007102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070f2:	4b3f      	ldr	r3, [pc, #252]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d109      	bne.n	8007112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e06f      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007102:	4b3b      	ldr	r3, [pc, #236]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e067      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007112:	4b37      	ldr	r3, [pc, #220]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f023 0203 	bic.w	r2, r3, #3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	4934      	ldr	r1, [pc, #208]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007120:	4313      	orrs	r3, r2
 8007122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007124:	f7fc fdea 	bl	8003cfc <HAL_GetTick>
 8007128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800712a:	e00a      	b.n	8007142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800712c:	f7fc fde6 	bl	8003cfc <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	f241 3288 	movw	r2, #5000	; 0x1388
 800713a:	4293      	cmp	r3, r2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e04f      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007142:	4b2b      	ldr	r3, [pc, #172]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f003 020c 	and.w	r2, r3, #12
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	429a      	cmp	r2, r3
 8007152:	d1eb      	bne.n	800712c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007154:	4b25      	ldr	r3, [pc, #148]	; (80071ec <HAL_RCC_ClockConfig+0x1b8>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0307 	and.w	r3, r3, #7
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	429a      	cmp	r2, r3
 8007160:	d20c      	bcs.n	800717c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007162:	4b22      	ldr	r3, [pc, #136]	; (80071ec <HAL_RCC_ClockConfig+0x1b8>)
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800716a:	4b20      	ldr	r3, [pc, #128]	; (80071ec <HAL_RCC_ClockConfig+0x1b8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0307 	and.w	r3, r3, #7
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	429a      	cmp	r2, r3
 8007176:	d001      	beq.n	800717c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e032      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b00      	cmp	r3, #0
 8007186:	d008      	beq.n	800719a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007188:	4b19      	ldr	r3, [pc, #100]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	4916      	ldr	r1, [pc, #88]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007196:	4313      	orrs	r3, r2
 8007198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d009      	beq.n	80071ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071a6:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	490e      	ldr	r1, [pc, #56]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071ba:	f000 f821 	bl	8007200 <HAL_RCC_GetSysClockFreq>
 80071be:	4602      	mov	r2, r0
 80071c0:	4b0b      	ldr	r3, [pc, #44]	; (80071f0 <HAL_RCC_ClockConfig+0x1bc>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	091b      	lsrs	r3, r3, #4
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	490a      	ldr	r1, [pc, #40]	; (80071f4 <HAL_RCC_ClockConfig+0x1c0>)
 80071cc:	5ccb      	ldrb	r3, [r1, r3]
 80071ce:	fa22 f303 	lsr.w	r3, r2, r3
 80071d2:	4a09      	ldr	r2, [pc, #36]	; (80071f8 <HAL_RCC_ClockConfig+0x1c4>)
 80071d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071d6:	4b09      	ldr	r3, [pc, #36]	; (80071fc <HAL_RCC_ClockConfig+0x1c8>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fc fd4a 	bl	8003c74 <HAL_InitTick>

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	40023c00 	.word	0x40023c00
 80071f0:	40023800 	.word	0x40023800
 80071f4:	0800d6c8 	.word	0x0800d6c8
 80071f8:	20000008 	.word	0x20000008
 80071fc:	2000000c 	.word	0x2000000c

08007200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007200:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	607b      	str	r3, [r7, #4]
 800720c:	2300      	movs	r3, #0
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	2300      	movs	r3, #0
 8007212:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007218:	4b67      	ldr	r3, [pc, #412]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 030c 	and.w	r3, r3, #12
 8007220:	2b08      	cmp	r3, #8
 8007222:	d00d      	beq.n	8007240 <HAL_RCC_GetSysClockFreq+0x40>
 8007224:	2b08      	cmp	r3, #8
 8007226:	f200 80bd 	bhi.w	80073a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <HAL_RCC_GetSysClockFreq+0x34>
 800722e:	2b04      	cmp	r3, #4
 8007230:	d003      	beq.n	800723a <HAL_RCC_GetSysClockFreq+0x3a>
 8007232:	e0b7      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007234:	4b61      	ldr	r3, [pc, #388]	; (80073bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007236:	60bb      	str	r3, [r7, #8]
       break;
 8007238:	e0b7      	b.n	80073aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800723a:	4b61      	ldr	r3, [pc, #388]	; (80073c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800723c:	60bb      	str	r3, [r7, #8]
      break;
 800723e:	e0b4      	b.n	80073aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007240:	4b5d      	ldr	r3, [pc, #372]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007248:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800724a:	4b5b      	ldr	r3, [pc, #364]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d04d      	beq.n	80072f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007256:	4b58      	ldr	r3, [pc, #352]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	099b      	lsrs	r3, r3, #6
 800725c:	461a      	mov	r2, r3
 800725e:	f04f 0300 	mov.w	r3, #0
 8007262:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007266:	f04f 0100 	mov.w	r1, #0
 800726a:	ea02 0800 	and.w	r8, r2, r0
 800726e:	ea03 0901 	and.w	r9, r3, r1
 8007272:	4640      	mov	r0, r8
 8007274:	4649      	mov	r1, r9
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	014b      	lsls	r3, r1, #5
 8007280:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007284:	0142      	lsls	r2, r0, #5
 8007286:	4610      	mov	r0, r2
 8007288:	4619      	mov	r1, r3
 800728a:	ebb0 0008 	subs.w	r0, r0, r8
 800728e:	eb61 0109 	sbc.w	r1, r1, r9
 8007292:	f04f 0200 	mov.w	r2, #0
 8007296:	f04f 0300 	mov.w	r3, #0
 800729a:	018b      	lsls	r3, r1, #6
 800729c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80072a0:	0182      	lsls	r2, r0, #6
 80072a2:	1a12      	subs	r2, r2, r0
 80072a4:	eb63 0301 	sbc.w	r3, r3, r1
 80072a8:	f04f 0000 	mov.w	r0, #0
 80072ac:	f04f 0100 	mov.w	r1, #0
 80072b0:	00d9      	lsls	r1, r3, #3
 80072b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072b6:	00d0      	lsls	r0, r2, #3
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	eb12 0208 	adds.w	r2, r2, r8
 80072c0:	eb43 0309 	adc.w	r3, r3, r9
 80072c4:	f04f 0000 	mov.w	r0, #0
 80072c8:	f04f 0100 	mov.w	r1, #0
 80072cc:	0259      	lsls	r1, r3, #9
 80072ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80072d2:	0250      	lsls	r0, r2, #9
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	4610      	mov	r0, r2
 80072da:	4619      	mov	r1, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	461a      	mov	r2, r3
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	f7f9 fc5c 	bl	8000ba0 <__aeabi_uldivmod>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4613      	mov	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	e04a      	b.n	8007388 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072f2:	4b31      	ldr	r3, [pc, #196]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	099b      	lsrs	r3, r3, #6
 80072f8:	461a      	mov	r2, r3
 80072fa:	f04f 0300 	mov.w	r3, #0
 80072fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007302:	f04f 0100 	mov.w	r1, #0
 8007306:	ea02 0400 	and.w	r4, r2, r0
 800730a:	ea03 0501 	and.w	r5, r3, r1
 800730e:	4620      	mov	r0, r4
 8007310:	4629      	mov	r1, r5
 8007312:	f04f 0200 	mov.w	r2, #0
 8007316:	f04f 0300 	mov.w	r3, #0
 800731a:	014b      	lsls	r3, r1, #5
 800731c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007320:	0142      	lsls	r2, r0, #5
 8007322:	4610      	mov	r0, r2
 8007324:	4619      	mov	r1, r3
 8007326:	1b00      	subs	r0, r0, r4
 8007328:	eb61 0105 	sbc.w	r1, r1, r5
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	018b      	lsls	r3, r1, #6
 8007336:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800733a:	0182      	lsls	r2, r0, #6
 800733c:	1a12      	subs	r2, r2, r0
 800733e:	eb63 0301 	sbc.w	r3, r3, r1
 8007342:	f04f 0000 	mov.w	r0, #0
 8007346:	f04f 0100 	mov.w	r1, #0
 800734a:	00d9      	lsls	r1, r3, #3
 800734c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007350:	00d0      	lsls	r0, r2, #3
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	1912      	adds	r2, r2, r4
 8007358:	eb45 0303 	adc.w	r3, r5, r3
 800735c:	f04f 0000 	mov.w	r0, #0
 8007360:	f04f 0100 	mov.w	r1, #0
 8007364:	0299      	lsls	r1, r3, #10
 8007366:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800736a:	0290      	lsls	r0, r2, #10
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4610      	mov	r0, r2
 8007372:	4619      	mov	r1, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	461a      	mov	r2, r3
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	f7f9 fc10 	bl	8000ba0 <__aeabi_uldivmod>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4613      	mov	r3, r2
 8007386:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007388:	4b0b      	ldr	r3, [pc, #44]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	0c1b      	lsrs	r3, r3, #16
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	3301      	adds	r3, #1
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a0:	60bb      	str	r3, [r7, #8]
      break;
 80073a2:	e002      	b.n	80073aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073a4:	4b05      	ldr	r3, [pc, #20]	; (80073bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073a6:	60bb      	str	r3, [r7, #8]
      break;
 80073a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073aa:	68bb      	ldr	r3, [r7, #8]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80073b6:	bf00      	nop
 80073b8:	40023800 	.word	0x40023800
 80073bc:	00f42400 	.word	0x00f42400
 80073c0:	007a1200 	.word	0x007a1200

080073c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073c8:	4b03      	ldr	r3, [pc, #12]	; (80073d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80073ca:	681b      	ldr	r3, [r3, #0]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	20000008 	.word	0x20000008

080073dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073e0:	f7ff fff0 	bl	80073c4 <HAL_RCC_GetHCLKFreq>
 80073e4:	4602      	mov	r2, r0
 80073e6:	4b05      	ldr	r3, [pc, #20]	; (80073fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	0a9b      	lsrs	r3, r3, #10
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	4903      	ldr	r1, [pc, #12]	; (8007400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073f2:	5ccb      	ldrb	r3, [r1, r3]
 80073f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	40023800 	.word	0x40023800
 8007400:	0800d6d8 	.word	0x0800d6d8

08007404 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e07b      	b.n	800750e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	2b00      	cmp	r3, #0
 800741c:	d108      	bne.n	8007430 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007426:	d009      	beq.n	800743c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	61da      	str	r2, [r3, #28]
 800742e:	e005      	b.n	800743c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d106      	bne.n	800745c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7fc fa4e 	bl	80038f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007472:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007484:	431a      	orrs	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	431a      	orrs	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	431a      	orrs	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c0:	ea42 0103 	orr.w	r1, r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	0c1b      	lsrs	r3, r3, #16
 80074da:	f003 0104 	and.w	r1, r3, #4
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	f003 0210 	and.w	r2, r3, #16
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69da      	ldr	r2, [r3, #28]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b088      	sub	sp, #32
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	603b      	str	r3, [r7, #0]
 8007522:	4613      	mov	r3, r2
 8007524:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <HAL_SPI_Transmit+0x22>
 8007534:	2302      	movs	r3, #2
 8007536:	e126      	b.n	8007786 <HAL_SPI_Transmit+0x270>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007540:	f7fc fbdc 	bl	8003cfc <HAL_GetTick>
 8007544:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007546:	88fb      	ldrh	r3, [r7, #6]
 8007548:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b01      	cmp	r3, #1
 8007554:	d002      	beq.n	800755c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007556:	2302      	movs	r3, #2
 8007558:	77fb      	strb	r3, [r7, #31]
    goto error;
 800755a:	e10b      	b.n	8007774 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <HAL_SPI_Transmit+0x52>
 8007562:	88fb      	ldrh	r3, [r7, #6]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d102      	bne.n	800756e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800756c:	e102      	b.n	8007774 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2203      	movs	r2, #3
 8007572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	88fa      	ldrh	r2, [r7, #6]
 8007586:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	88fa      	ldrh	r2, [r7, #6]
 800758c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075b4:	d10f      	bne.n	80075d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e0:	2b40      	cmp	r3, #64	; 0x40
 80075e2:	d007      	beq.n	80075f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075fc:	d14b      	bne.n	8007696 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <HAL_SPI_Transmit+0xf6>
 8007606:	8afb      	ldrh	r3, [r7, #22]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d13e      	bne.n	800768a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007610:	881a      	ldrh	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761c:	1c9a      	adds	r2, r3, #2
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007626:	b29b      	uxth	r3, r3
 8007628:	3b01      	subs	r3, #1
 800762a:	b29a      	uxth	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007630:	e02b      	b.n	800768a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b02      	cmp	r3, #2
 800763e:	d112      	bne.n	8007666 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007644:	881a      	ldrh	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007650:	1c9a      	adds	r2, r3, #2
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	86da      	strh	r2, [r3, #54]	; 0x36
 8007664:	e011      	b.n	800768a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007666:	f7fc fb49 	bl	8003cfc <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d803      	bhi.n	800767e <HAL_SPI_Transmit+0x168>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767c:	d102      	bne.n	8007684 <HAL_SPI_Transmit+0x16e>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007688:	e074      	b.n	8007774 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800768e:	b29b      	uxth	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1ce      	bne.n	8007632 <HAL_SPI_Transmit+0x11c>
 8007694:	e04c      	b.n	8007730 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <HAL_SPI_Transmit+0x18e>
 800769e:	8afb      	ldrh	r3, [r7, #22]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d140      	bne.n	8007726 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	330c      	adds	r3, #12
 80076ae:	7812      	ldrb	r2, [r2, #0]
 80076b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076ca:	e02c      	b.n	8007726 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d113      	bne.n	8007702 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	330c      	adds	r3, #12
 80076e4:	7812      	ldrb	r2, [r2, #0]
 80076e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8007700:	e011      	b.n	8007726 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007702:	f7fc fafb 	bl	8003cfc <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d803      	bhi.n	800771a <HAL_SPI_Transmit+0x204>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007718:	d102      	bne.n	8007720 <HAL_SPI_Transmit+0x20a>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d102      	bne.n	8007726 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007724:	e026      	b.n	8007774 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1cd      	bne.n	80076cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 fbcb 	bl	8007ed0 <SPI_EndRxTxTransaction>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2220      	movs	r2, #32
 8007744:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10a      	bne.n	8007764 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800774e:	2300      	movs	r3, #0
 8007750:	613b      	str	r3, [r7, #16]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	613b      	str	r3, [r7, #16]
 8007762:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	77fb      	strb	r3, [r7, #31]
 8007770:	e000      	b.n	8007774 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007772:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007784:	7ffb      	ldrb	r3, [r7, #31]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3720      	adds	r7, #32
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b088      	sub	sp, #32
 8007792:	af02      	add	r7, sp, #8
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	60b9      	str	r1, [r7, #8]
 8007798:	603b      	str	r3, [r7, #0]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077aa:	d112      	bne.n	80077d2 <HAL_SPI_Receive+0x44>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10e      	bne.n	80077d2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2204      	movs	r2, #4
 80077b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80077bc:	88fa      	ldrh	r2, [r7, #6]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	4613      	mov	r3, r2
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f8f1 	bl	80079b0 <HAL_SPI_TransmitReceive>
 80077ce:	4603      	mov	r3, r0
 80077d0:	e0ea      	b.n	80079a8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d101      	bne.n	80077e0 <HAL_SPI_Receive+0x52>
 80077dc:	2302      	movs	r3, #2
 80077de:	e0e3      	b.n	80079a8 <HAL_SPI_Receive+0x21a>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077e8:	f7fc fa88 	bl	8003cfc <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d002      	beq.n	8007800 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80077fa:	2302      	movs	r3, #2
 80077fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077fe:	e0ca      	b.n	8007996 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <HAL_SPI_Receive+0x7e>
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d102      	bne.n	8007812 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007810:	e0c1      	b.n	8007996 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2204      	movs	r2, #4
 8007816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	88fa      	ldrh	r2, [r7, #6]
 800782a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	88fa      	ldrh	r2, [r7, #6]
 8007830:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007858:	d10f      	bne.n	800787a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007868:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007878:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007884:	2b40      	cmp	r3, #64	; 0x40
 8007886:	d007      	beq.n	8007898 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007896:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d162      	bne.n	8007966 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80078a0:	e02e      	b.n	8007900 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d115      	bne.n	80078dc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f103 020c 	add.w	r2, r3, #12
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078bc:	7812      	ldrb	r2, [r2, #0]
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078da:	e011      	b.n	8007900 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078dc:	f7fc fa0e 	bl	8003cfc <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d803      	bhi.n	80078f4 <HAL_SPI_Receive+0x166>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f2:	d102      	bne.n	80078fa <HAL_SPI_Receive+0x16c>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d102      	bne.n	8007900 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80078fe:	e04a      	b.n	8007996 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1cb      	bne.n	80078a2 <HAL_SPI_Receive+0x114>
 800790a:	e031      	b.n	8007970 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b01      	cmp	r3, #1
 8007918:	d113      	bne.n	8007942 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68da      	ldr	r2, [r3, #12]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007924:	b292      	uxth	r2, r2
 8007926:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	1c9a      	adds	r2, r3, #2
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007936:	b29b      	uxth	r3, r3
 8007938:	3b01      	subs	r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007940:	e011      	b.n	8007966 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007942:	f7fc f9db 	bl	8003cfc <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d803      	bhi.n	800795a <HAL_SPI_Receive+0x1cc>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007958:	d102      	bne.n	8007960 <HAL_SPI_Receive+0x1d2>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007964:	e017      	b.n	8007996 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800796a:	b29b      	uxth	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1cd      	bne.n	800790c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 fa45 	bl	8007e04 <SPI_EndRxTransaction>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2220      	movs	r2, #32
 8007984:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	75fb      	strb	r3, [r7, #23]
 8007992:	e000      	b.n	8007996 <HAL_SPI_Receive+0x208>
  }

error :
 8007994:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08c      	sub	sp, #48	; 0x30
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079be:	2301      	movs	r3, #1
 80079c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d101      	bne.n	80079d6 <HAL_SPI_TransmitReceive+0x26>
 80079d2:	2302      	movs	r3, #2
 80079d4:	e18a      	b.n	8007cec <HAL_SPI_TransmitReceive+0x33c>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079de:	f7fc f98d 	bl	8003cfc <HAL_GetTick>
 80079e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80079f4:	887b      	ldrh	r3, [r7, #2]
 80079f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80079f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d00f      	beq.n	8007a20 <HAL_SPI_TransmitReceive+0x70>
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a06:	d107      	bne.n	8007a18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d103      	bne.n	8007a18 <HAL_SPI_TransmitReceive+0x68>
 8007a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a14:	2b04      	cmp	r3, #4
 8007a16:	d003      	beq.n	8007a20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a1e:	e15b      	b.n	8007cd8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <HAL_SPI_TransmitReceive+0x82>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <HAL_SPI_TransmitReceive+0x82>
 8007a2c:	887b      	ldrh	r3, [r7, #2]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d103      	bne.n	8007a3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a38:	e14e      	b.n	8007cd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	d003      	beq.n	8007a4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2205      	movs	r2, #5
 8007a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	887a      	ldrh	r2, [r7, #2]
 8007a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	887a      	ldrh	r2, [r7, #2]
 8007a64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	887a      	ldrh	r2, [r7, #2]
 8007a70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	887a      	ldrh	r2, [r7, #2]
 8007a76:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8e:	2b40      	cmp	r3, #64	; 0x40
 8007a90:	d007      	beq.n	8007aa2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aaa:	d178      	bne.n	8007b9e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <HAL_SPI_TransmitReceive+0x10a>
 8007ab4:	8b7b      	ldrh	r3, [r7, #26]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d166      	bne.n	8007b88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abe:	881a      	ldrh	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aca:	1c9a      	adds	r2, r3, #2
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ade:	e053      	b.n	8007b88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d11b      	bne.n	8007b26 <HAL_SPI_TransmitReceive+0x176>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d016      	beq.n	8007b26 <HAL_SPI_TransmitReceive+0x176>
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d113      	bne.n	8007b26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b02:	881a      	ldrh	r2, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0e:	1c9a      	adds	r2, r3, #2
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d119      	bne.n	8007b68 <HAL_SPI_TransmitReceive+0x1b8>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d014      	beq.n	8007b68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	b292      	uxth	r2, r2
 8007b4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b50:	1c9a      	adds	r2, r3, #2
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b64:	2301      	movs	r3, #1
 8007b66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b68:	f7fc f8c8 	bl	8003cfc <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d807      	bhi.n	8007b88 <HAL_SPI_TransmitReceive+0x1d8>
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7e:	d003      	beq.n	8007b88 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b86:	e0a7      	b.n	8007cd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1a6      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x130>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1a1      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x130>
 8007b9c:	e07c      	b.n	8007c98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <HAL_SPI_TransmitReceive+0x1fc>
 8007ba6:	8b7b      	ldrh	r3, [r7, #26]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d16b      	bne.n	8007c84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	330c      	adds	r3, #12
 8007bb6:	7812      	ldrb	r2, [r2, #0]
 8007bb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bd2:	e057      	b.n	8007c84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d11c      	bne.n	8007c1c <HAL_SPI_TransmitReceive+0x26c>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d017      	beq.n	8007c1c <HAL_SPI_TransmitReceive+0x26c>
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d114      	bne.n	8007c1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	330c      	adds	r3, #12
 8007bfc:	7812      	ldrb	r2, [r2, #0]
 8007bfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	3b01      	subs	r3, #1
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d119      	bne.n	8007c5e <HAL_SPI_TransmitReceive+0x2ae>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d014      	beq.n	8007c5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3e:	b2d2      	uxtb	r2, r2
 8007c40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	3b01      	subs	r3, #1
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c5e:	f7fc f84d 	bl	8003cfc <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d803      	bhi.n	8007c76 <HAL_SPI_TransmitReceive+0x2c6>
 8007c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c74:	d102      	bne.n	8007c7c <HAL_SPI_TransmitReceive+0x2cc>
 8007c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d103      	bne.n	8007c84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c82:	e029      	b.n	8007cd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1a2      	bne.n	8007bd4 <HAL_SPI_TransmitReceive+0x224>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d19d      	bne.n	8007bd4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 f917 	bl	8007ed0 <SPI_EndRxTxTransaction>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d006      	beq.n	8007cb6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2220      	movs	r2, #32
 8007cb2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007cb4:	e010      	b.n	8007cd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10b      	bne.n	8007cd6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	617b      	str	r3, [r7, #20]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	617b      	str	r3, [r7, #20]
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	e000      	b.n	8007cd8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007cd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ce8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3730      	adds	r7, #48	; 0x30
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	603b      	str	r3, [r7, #0]
 8007d00:	4613      	mov	r3, r2
 8007d02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d04:	f7fb fffa 	bl	8003cfc <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	1a9b      	subs	r3, r3, r2
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	4413      	add	r3, r2
 8007d12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d14:	f7fb fff2 	bl	8003cfc <HAL_GetTick>
 8007d18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d1a:	4b39      	ldr	r3, [pc, #228]	; (8007e00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	015b      	lsls	r3, r3, #5
 8007d20:	0d1b      	lsrs	r3, r3, #20
 8007d22:	69fa      	ldr	r2, [r7, #28]
 8007d24:	fb02 f303 	mul.w	r3, r2, r3
 8007d28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d2a:	e054      	b.n	8007dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d32:	d050      	beq.n	8007dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d34:	f7fb ffe2 	bl	8003cfc <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	69fa      	ldr	r2, [r7, #28]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d902      	bls.n	8007d4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d13d      	bne.n	8007dc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d62:	d111      	bne.n	8007d88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d6c:	d004      	beq.n	8007d78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d76:	d107      	bne.n	8007d88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d90:	d10f      	bne.n	8007db2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007db0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e017      	b.n	8007df6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	4013      	ands	r3, r2
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	bf0c      	ite	eq
 8007de6:	2301      	moveq	r3, #1
 8007de8:	2300      	movne	r3, #0
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	461a      	mov	r2, r3
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d19b      	bne.n	8007d2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000008 	.word	0x20000008

08007e04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af02      	add	r7, sp, #8
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e18:	d111      	bne.n	8007e3e <SPI_EndRxTransaction+0x3a>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e22:	d004      	beq.n	8007e2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e2c:	d107      	bne.n	8007e3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e3c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e46:	d12a      	bne.n	8007e9e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e50:	d012      	beq.n	8007e78 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	2180      	movs	r1, #128	; 0x80
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f7ff ff49 	bl	8007cf4 <SPI_WaitFlagStateUntilTimeout>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d02d      	beq.n	8007ec4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6c:	f043 0220 	orr.w	r2, r3, #32
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e026      	b.n	8007ec6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	2101      	movs	r1, #1
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f7ff ff36 	bl	8007cf4 <SPI_WaitFlagStateUntilTimeout>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d01a      	beq.n	8007ec4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e92:	f043 0220 	orr.w	r2, r3, #32
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e013      	b.n	8007ec6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f7ff ff23 	bl	8007cf4 <SPI_WaitFlagStateUntilTimeout>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d007      	beq.n	8007ec4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb8:	f043 0220 	orr.w	r2, r3, #32
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e000      	b.n	8007ec6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
	...

08007ed0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b088      	sub	sp, #32
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007edc:	4b1b      	ldr	r3, [pc, #108]	; (8007f4c <SPI_EndRxTxTransaction+0x7c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a1b      	ldr	r2, [pc, #108]	; (8007f50 <SPI_EndRxTxTransaction+0x80>)
 8007ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee6:	0d5b      	lsrs	r3, r3, #21
 8007ee8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007eec:	fb02 f303 	mul.w	r3, r2, r3
 8007ef0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007efa:	d112      	bne.n	8007f22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2200      	movs	r2, #0
 8007f04:	2180      	movs	r1, #128	; 0x80
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f7ff fef4 	bl	8007cf4 <SPI_WaitFlagStateUntilTimeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d016      	beq.n	8007f40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f16:	f043 0220 	orr.w	r2, r3, #32
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e00f      	b.n	8007f42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00a      	beq.n	8007f3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f38:	2b80      	cmp	r3, #128	; 0x80
 8007f3a:	d0f2      	beq.n	8007f22 <SPI_EndRxTxTransaction+0x52>
 8007f3c:	e000      	b.n	8007f40 <SPI_EndRxTxTransaction+0x70>
        break;
 8007f3e:	bf00      	nop
  }

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000008 	.word	0x20000008
 8007f50:	165e9f81 	.word	0x165e9f81

08007f54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f54:	b084      	sub	sp, #16
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b084      	sub	sp, #16
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	f107 001c 	add.w	r0, r7, #28
 8007f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d122      	bne.n	8007fb2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d105      	bne.n	8007fa6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f001 fb1c 	bl	80095e4 <USB_CoreReset>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]
 8007fb0:	e01a      	b.n	8007fe8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 fb10 	bl	80095e4 <USB_CoreReset>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d106      	bne.n	8007fdc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	639a      	str	r2, [r3, #56]	; 0x38
 8007fda:	e005      	b.n	8007fe8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d10b      	bne.n	8008006 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f043 0206 	orr.w	r2, r3, #6
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f043 0220 	orr.w	r2, r3, #32
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008006:	7bfb      	ldrb	r3, [r7, #15]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008012:	b004      	add	sp, #16
 8008014:	4770      	bx	lr
	...

08008018 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008026:	79fb      	ldrb	r3, [r7, #7]
 8008028:	2b02      	cmp	r3, #2
 800802a:	d165      	bne.n	80080f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	4a41      	ldr	r2, [pc, #260]	; (8008134 <USB_SetTurnaroundTime+0x11c>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d906      	bls.n	8008042 <USB_SetTurnaroundTime+0x2a>
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	4a40      	ldr	r2, [pc, #256]	; (8008138 <USB_SetTurnaroundTime+0x120>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d202      	bcs.n	8008042 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800803c:	230f      	movs	r3, #15
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	e062      	b.n	8008108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	4a3c      	ldr	r2, [pc, #240]	; (8008138 <USB_SetTurnaroundTime+0x120>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d306      	bcc.n	8008058 <USB_SetTurnaroundTime+0x40>
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	4a3b      	ldr	r2, [pc, #236]	; (800813c <USB_SetTurnaroundTime+0x124>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d202      	bcs.n	8008058 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008052:	230e      	movs	r3, #14
 8008054:	617b      	str	r3, [r7, #20]
 8008056:	e057      	b.n	8008108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	4a38      	ldr	r2, [pc, #224]	; (800813c <USB_SetTurnaroundTime+0x124>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d306      	bcc.n	800806e <USB_SetTurnaroundTime+0x56>
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	4a37      	ldr	r2, [pc, #220]	; (8008140 <USB_SetTurnaroundTime+0x128>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d202      	bcs.n	800806e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008068:	230d      	movs	r3, #13
 800806a:	617b      	str	r3, [r7, #20]
 800806c:	e04c      	b.n	8008108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	4a33      	ldr	r2, [pc, #204]	; (8008140 <USB_SetTurnaroundTime+0x128>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d306      	bcc.n	8008084 <USB_SetTurnaroundTime+0x6c>
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	4a32      	ldr	r2, [pc, #200]	; (8008144 <USB_SetTurnaroundTime+0x12c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d802      	bhi.n	8008084 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800807e:	230c      	movs	r3, #12
 8008080:	617b      	str	r3, [r7, #20]
 8008082:	e041      	b.n	8008108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	4a2f      	ldr	r2, [pc, #188]	; (8008144 <USB_SetTurnaroundTime+0x12c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d906      	bls.n	800809a <USB_SetTurnaroundTime+0x82>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	4a2e      	ldr	r2, [pc, #184]	; (8008148 <USB_SetTurnaroundTime+0x130>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d802      	bhi.n	800809a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008094:	230b      	movs	r3, #11
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	e036      	b.n	8008108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	4a2a      	ldr	r2, [pc, #168]	; (8008148 <USB_SetTurnaroundTime+0x130>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d906      	bls.n	80080b0 <USB_SetTurnaroundTime+0x98>
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	4a29      	ldr	r2, [pc, #164]	; (800814c <USB_SetTurnaroundTime+0x134>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d802      	bhi.n	80080b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80080aa:	230a      	movs	r3, #10
 80080ac:	617b      	str	r3, [r7, #20]
 80080ae:	e02b      	b.n	8008108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	4a26      	ldr	r2, [pc, #152]	; (800814c <USB_SetTurnaroundTime+0x134>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d906      	bls.n	80080c6 <USB_SetTurnaroundTime+0xae>
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	4a25      	ldr	r2, [pc, #148]	; (8008150 <USB_SetTurnaroundTime+0x138>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d202      	bcs.n	80080c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80080c0:	2309      	movs	r3, #9
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	e020      	b.n	8008108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	4a21      	ldr	r2, [pc, #132]	; (8008150 <USB_SetTurnaroundTime+0x138>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d306      	bcc.n	80080dc <USB_SetTurnaroundTime+0xc4>
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	4a20      	ldr	r2, [pc, #128]	; (8008154 <USB_SetTurnaroundTime+0x13c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d802      	bhi.n	80080dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80080d6:	2308      	movs	r3, #8
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	e015      	b.n	8008108 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	4a1d      	ldr	r2, [pc, #116]	; (8008154 <USB_SetTurnaroundTime+0x13c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d906      	bls.n	80080f2 <USB_SetTurnaroundTime+0xda>
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	4a1c      	ldr	r2, [pc, #112]	; (8008158 <USB_SetTurnaroundTime+0x140>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d202      	bcs.n	80080f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80080ec:	2307      	movs	r3, #7
 80080ee:	617b      	str	r3, [r7, #20]
 80080f0:	e00a      	b.n	8008108 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80080f2:	2306      	movs	r3, #6
 80080f4:	617b      	str	r3, [r7, #20]
 80080f6:	e007      	b.n	8008108 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80080f8:	79fb      	ldrb	r3, [r7, #7]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d102      	bne.n	8008104 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80080fe:	2309      	movs	r3, #9
 8008100:	617b      	str	r3, [r7, #20]
 8008102:	e001      	b.n	8008108 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008104:	2309      	movs	r3, #9
 8008106:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	68da      	ldr	r2, [r3, #12]
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	029b      	lsls	r3, r3, #10
 800811c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008120:	431a      	orrs	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	371c      	adds	r7, #28
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	00d8acbf 	.word	0x00d8acbf
 8008138:	00e4e1c0 	.word	0x00e4e1c0
 800813c:	00f42400 	.word	0x00f42400
 8008140:	01067380 	.word	0x01067380
 8008144:	011a499f 	.word	0x011a499f
 8008148:	01312cff 	.word	0x01312cff
 800814c:	014ca43f 	.word	0x014ca43f
 8008150:	016e3600 	.word	0x016e3600
 8008154:	01a6ab1f 	.word	0x01a6ab1f
 8008158:	01e84800 	.word	0x01e84800

0800815c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f043 0201 	orr.w	r2, r3, #1
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800817e:	b480      	push	{r7}
 8008180:	b083      	sub	sp, #12
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f023 0201 	bic.w	r2, r3, #1
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	460b      	mov	r3, r1
 80081aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80081bc:	78fb      	ldrb	r3, [r7, #3]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d115      	bne.n	80081ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081ce:	2001      	movs	r0, #1
 80081d0:	f7fb fda0 	bl	8003d14 <HAL_Delay>
      ms++;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3301      	adds	r3, #1
 80081d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 f972 	bl	80094c4 <USB_GetMode>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d01e      	beq.n	8008224 <USB_SetCurrentMode+0x84>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b31      	cmp	r3, #49	; 0x31
 80081ea:	d9f0      	bls.n	80081ce <USB_SetCurrentMode+0x2e>
 80081ec:	e01a      	b.n	8008224 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80081ee:	78fb      	ldrb	r3, [r7, #3]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d115      	bne.n	8008220 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008200:	2001      	movs	r0, #1
 8008202:	f7fb fd87 	bl	8003d14 <HAL_Delay>
      ms++;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f001 f959 	bl	80094c4 <USB_GetMode>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d005      	beq.n	8008224 <USB_SetCurrentMode+0x84>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b31      	cmp	r3, #49	; 0x31
 800821c:	d9f0      	bls.n	8008200 <USB_SetCurrentMode+0x60>
 800821e:	e001      	b.n	8008224 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e005      	b.n	8008230 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b32      	cmp	r3, #50	; 0x32
 8008228:	d101      	bne.n	800822e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008238:	b084      	sub	sp, #16
 800823a:	b580      	push	{r7, lr}
 800823c:	b086      	sub	sp, #24
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008252:	2300      	movs	r3, #0
 8008254:	613b      	str	r3, [r7, #16]
 8008256:	e009      	b.n	800826c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	3340      	adds	r3, #64	; 0x40
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	2200      	movs	r2, #0
 8008264:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	3301      	adds	r3, #1
 800826a:	613b      	str	r3, [r7, #16]
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	2b0e      	cmp	r3, #14
 8008270:	d9f2      	bls.n	8008258 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008274:	2b00      	cmp	r3, #0
 8008276:	d11c      	bne.n	80082b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008286:	f043 0302 	orr.w	r3, r3, #2
 800828a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008290:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	639a      	str	r2, [r3, #56]	; 0x38
 80082b0:	e00b      	b.n	80082ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082d0:	461a      	mov	r2, r3
 80082d2:	2300      	movs	r3, #0
 80082d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082dc:	4619      	mov	r1, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e4:	461a      	mov	r2, r3
 80082e6:	680b      	ldr	r3, [r1, #0]
 80082e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d10c      	bne.n	800830a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80082f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d104      	bne.n	8008300 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80082f6:	2100      	movs	r1, #0
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f945 	bl	8008588 <USB_SetDevSpeed>
 80082fe:	e008      	b.n	8008312 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008300:	2101      	movs	r1, #1
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f940 	bl	8008588 <USB_SetDevSpeed>
 8008308:	e003      	b.n	8008312 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800830a:	2103      	movs	r1, #3
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f93b 	bl	8008588 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008312:	2110      	movs	r1, #16
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f8f3 	bl	8008500 <USB_FlushTxFifo>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f90f 	bl	8008548 <USB_FlushRxFifo>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833a:	461a      	mov	r2, r3
 800833c:	2300      	movs	r3, #0
 800833e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008346:	461a      	mov	r2, r3
 8008348:	2300      	movs	r3, #0
 800834a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008352:	461a      	mov	r2, r3
 8008354:	2300      	movs	r3, #0
 8008356:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008358:	2300      	movs	r3, #0
 800835a:	613b      	str	r3, [r7, #16]
 800835c:	e043      	b.n	80083e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008374:	d118      	bne.n	80083a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10a      	bne.n	8008392 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008388:	461a      	mov	r2, r3
 800838a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800838e:	6013      	str	r3, [r2, #0]
 8008390:	e013      	b.n	80083ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	015a      	lsls	r2, r3, #5
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	4413      	add	r3, r2
 800839a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800839e:	461a      	mov	r2, r3
 80083a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	e008      	b.n	80083ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b4:	461a      	mov	r2, r3
 80083b6:	2300      	movs	r3, #0
 80083b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c6:	461a      	mov	r2, r3
 80083c8:	2300      	movs	r3, #0
 80083ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d8:	461a      	mov	r2, r3
 80083da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	3301      	adds	r3, #1
 80083e4:	613b      	str	r3, [r7, #16]
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d3b7      	bcc.n	800835e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083ee:	2300      	movs	r3, #0
 80083f0:	613b      	str	r3, [r7, #16]
 80083f2:	e043      	b.n	800847c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008406:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800840a:	d118      	bne.n	800843e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	4413      	add	r3, r2
 800841a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841e:	461a      	mov	r2, r3
 8008420:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008424:	6013      	str	r3, [r2, #0]
 8008426:	e013      	b.n	8008450 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008434:	461a      	mov	r2, r3
 8008436:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	e008      	b.n	8008450 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4413      	add	r3, r2
 8008446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844a:	461a      	mov	r2, r3
 800844c:	2300      	movs	r3, #0
 800844e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845c:	461a      	mov	r2, r3
 800845e:	2300      	movs	r3, #0
 8008460:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846e:	461a      	mov	r2, r3
 8008470:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008474:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	3301      	adds	r3, #1
 800847a:	613b      	str	r3, [r7, #16]
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	429a      	cmp	r2, r3
 8008482:	d3b7      	bcc.n	80083f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008492:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008496:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80084a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d105      	bne.n	80084b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	f043 0210 	orr.w	r2, r3, #16
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	699a      	ldr	r2, [r3, #24]
 80084bc:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <USB_DevInit+0x2c4>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80084c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d005      	beq.n	80084d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	f043 0208 	orr.w	r2, r3, #8
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80084d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d107      	bne.n	80084ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084e4:	f043 0304 	orr.w	r3, r3, #4
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80084ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084f8:	b004      	add	sp, #16
 80084fa:	4770      	bx	lr
 80084fc:	803c3800 	.word	0x803c3800

08008500 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800850a:	2300      	movs	r3, #0
 800850c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	019b      	lsls	r3, r3, #6
 8008512:	f043 0220 	orr.w	r2, r3, #32
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3301      	adds	r3, #1
 800851e:	60fb      	str	r3, [r7, #12]
 8008520:	4a08      	ldr	r2, [pc, #32]	; (8008544 <USB_FlushTxFifo+0x44>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d901      	bls.n	800852a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e006      	b.n	8008538 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	f003 0320 	and.w	r3, r3, #32
 8008532:	2b20      	cmp	r3, #32
 8008534:	d0f1      	beq.n	800851a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	00030d40 	.word	0x00030d40

08008548 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2210      	movs	r2, #16
 8008558:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3301      	adds	r3, #1
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	4a08      	ldr	r2, [pc, #32]	; (8008584 <USB_FlushRxFifo+0x3c>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d901      	bls.n	800856a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e006      	b.n	8008578 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	f003 0310 	and.w	r3, r3, #16
 8008572:	2b10      	cmp	r3, #16
 8008574:	d0f1      	beq.n	800855a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	00030d40 	.word	0x00030d40

08008588 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	68f9      	ldr	r1, [r7, #12]
 80085a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085a8:	4313      	orrs	r3, r2
 80085aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b087      	sub	sp, #28
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f003 0306 	and.w	r3, r3, #6
 80085d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d102      	bne.n	80085e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80085da:	2300      	movs	r3, #0
 80085dc:	75fb      	strb	r3, [r7, #23]
 80085de:	e00a      	b.n	80085f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d002      	beq.n	80085ec <USB_GetDevSpeed+0x32>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b06      	cmp	r3, #6
 80085ea:	d102      	bne.n	80085f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80085ec:	2302      	movs	r3, #2
 80085ee:	75fb      	strb	r3, [r7, #23]
 80085f0:	e001      	b.n	80085f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80085f2:	230f      	movs	r3, #15
 80085f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	371c      	adds	r7, #28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	785b      	ldrb	r3, [r3, #1]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d13a      	bne.n	8008696 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008626:	69da      	ldr	r2, [r3, #28]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	f003 030f 	and.w	r3, r3, #15
 8008630:	2101      	movs	r1, #1
 8008632:	fa01 f303 	lsl.w	r3, r1, r3
 8008636:	b29b      	uxth	r3, r3
 8008638:	68f9      	ldr	r1, [r7, #12]
 800863a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800863e:	4313      	orrs	r3, r2
 8008640:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	4413      	add	r3, r2
 800864a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d155      	bne.n	8008704 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4413      	add	r3, r2
 8008660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	78db      	ldrb	r3, [r3, #3]
 8008672:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008674:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	059b      	lsls	r3, r3, #22
 800867a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800867c:	4313      	orrs	r3, r2
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	0151      	lsls	r1, r2, #5
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	440a      	add	r2, r1
 8008686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800868a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800868e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	e036      	b.n	8008704 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800869c:	69da      	ldr	r2, [r3, #28]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	f003 030f 	and.w	r3, r3, #15
 80086a6:	2101      	movs	r1, #1
 80086a8:	fa01 f303 	lsl.w	r3, r1, r3
 80086ac:	041b      	lsls	r3, r3, #16
 80086ae:	68f9      	ldr	r1, [r7, #12]
 80086b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086b4:	4313      	orrs	r3, r2
 80086b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d11a      	bne.n	8008704 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	78db      	ldrb	r3, [r3, #3]
 80086e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80086ea:	430b      	orrs	r3, r1
 80086ec:	4313      	orrs	r3, r2
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	0151      	lsls	r1, r2, #5
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	440a      	add	r2, r1
 80086f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008702:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
	...

08008714 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	785b      	ldrb	r3, [r3, #1]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d161      	bne.n	80087f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	015a      	lsls	r2, r3, #5
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	4413      	add	r3, r2
 8008738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008746:	d11f      	bne.n	8008788 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	0151      	lsls	r1, r2, #5
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	440a      	add	r2, r1
 800875e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008762:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008766:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	0151      	lsls	r1, r2, #5
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	440a      	add	r2, r1
 800877e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008782:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008786:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800878e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	f003 030f 	and.w	r3, r3, #15
 8008798:	2101      	movs	r1, #1
 800879a:	fa01 f303 	lsl.w	r3, r1, r3
 800879e:	b29b      	uxth	r3, r3
 80087a0:	43db      	mvns	r3, r3
 80087a2:	68f9      	ldr	r1, [r7, #12]
 80087a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087a8:	4013      	ands	r3, r2
 80087aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b2:	69da      	ldr	r2, [r3, #28]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	f003 030f 	and.w	r3, r3, #15
 80087bc:	2101      	movs	r1, #1
 80087be:	fa01 f303 	lsl.w	r3, r1, r3
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	43db      	mvns	r3, r3
 80087c6:	68f9      	ldr	r1, [r7, #12]
 80087c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087cc:	4013      	ands	r3, r2
 80087ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	0159      	lsls	r1, r3, #5
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	440b      	add	r3, r1
 80087e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ea:	4619      	mov	r1, r3
 80087ec:	4b35      	ldr	r3, [pc, #212]	; (80088c4 <USB_DeactivateEndpoint+0x1b0>)
 80087ee:	4013      	ands	r3, r2
 80087f0:	600b      	str	r3, [r1, #0]
 80087f2:	e060      	b.n	80088b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	015a      	lsls	r2, r3, #5
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	4413      	add	r3, r2
 80087fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800880a:	d11f      	bne.n	800884c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	4413      	add	r3, r2
 8008814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	0151      	lsls	r1, r2, #5
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	440a      	add	r2, r1
 8008822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008826:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800882a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4413      	add	r3, r2
 8008834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	0151      	lsls	r1, r2, #5
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	440a      	add	r2, r1
 8008842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008846:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800884a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	f003 030f 	and.w	r3, r3, #15
 800885c:	2101      	movs	r1, #1
 800885e:	fa01 f303 	lsl.w	r3, r1, r3
 8008862:	041b      	lsls	r3, r3, #16
 8008864:	43db      	mvns	r3, r3
 8008866:	68f9      	ldr	r1, [r7, #12]
 8008868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800886c:	4013      	ands	r3, r2
 800886e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008876:	69da      	ldr	r2, [r3, #28]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	f003 030f 	and.w	r3, r3, #15
 8008880:	2101      	movs	r1, #1
 8008882:	fa01 f303 	lsl.w	r3, r1, r3
 8008886:	041b      	lsls	r3, r3, #16
 8008888:	43db      	mvns	r3, r3
 800888a:	68f9      	ldr	r1, [r7, #12]
 800888c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008890:	4013      	ands	r3, r2
 8008892:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	015a      	lsls	r2, r3, #5
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4413      	add	r3, r2
 800889c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	0159      	lsls	r1, r3, #5
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	440b      	add	r3, r1
 80088aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ae:	4619      	mov	r1, r3
 80088b0:	4b05      	ldr	r3, [pc, #20]	; (80088c8 <USB_DeactivateEndpoint+0x1b4>)
 80088b2:	4013      	ands	r3, r2
 80088b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	ec337800 	.word	0xec337800
 80088c8:	eff37800 	.word	0xeff37800

080088cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b08a      	sub	sp, #40	; 0x28
 80088d0:	af02      	add	r7, sp, #8
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	785b      	ldrb	r3, [r3, #1]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	f040 815c 	bne.w	8008ba6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d132      	bne.n	800895c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	0151      	lsls	r1, r2, #5
 8008908:	69fa      	ldr	r2, [r7, #28]
 800890a:	440a      	add	r2, r1
 800890c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008910:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008914:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008918:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	0151      	lsls	r1, r2, #5
 800892c:	69fa      	ldr	r2, [r7, #28]
 800892e:	440a      	add	r2, r1
 8008930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008938:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	4413      	add	r3, r2
 8008942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	0151      	lsls	r1, r2, #5
 800894c:	69fa      	ldr	r2, [r7, #28]
 800894e:	440a      	add	r2, r1
 8008950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008954:	0cdb      	lsrs	r3, r3, #19
 8008956:	04db      	lsls	r3, r3, #19
 8008958:	6113      	str	r3, [r2, #16]
 800895a:	e074      	b.n	8008a46 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	0151      	lsls	r1, r2, #5
 800896e:	69fa      	ldr	r2, [r7, #28]
 8008970:	440a      	add	r2, r1
 8008972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008976:	0cdb      	lsrs	r3, r3, #19
 8008978:	04db      	lsls	r3, r3, #19
 800897a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	69ba      	ldr	r2, [r7, #24]
 800898c:	0151      	lsls	r1, r2, #5
 800898e:	69fa      	ldr	r2, [r7, #28]
 8008990:	440a      	add	r2, r1
 8008992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008996:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800899a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800899e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	6959      	ldr	r1, [r3, #20]
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	440b      	add	r3, r1
 80089b8:	1e59      	subs	r1, r3, #1
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	fbb1 f3f3 	udiv	r3, r1, r3
 80089c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80089c4:	4b9d      	ldr	r3, [pc, #628]	; (8008c3c <USB_EPStartXfer+0x370>)
 80089c6:	400b      	ands	r3, r1
 80089c8:	69b9      	ldr	r1, [r7, #24]
 80089ca:	0148      	lsls	r0, r1, #5
 80089cc:	69f9      	ldr	r1, [r7, #28]
 80089ce:	4401      	add	r1, r0
 80089d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80089d4:	4313      	orrs	r3, r2
 80089d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e4:	691a      	ldr	r2, [r3, #16]
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089ee:	69b9      	ldr	r1, [r7, #24]
 80089f0:	0148      	lsls	r0, r1, #5
 80089f2:	69f9      	ldr	r1, [r7, #28]
 80089f4:	4401      	add	r1, r0
 80089f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80089fa:	4313      	orrs	r3, r2
 80089fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	78db      	ldrb	r3, [r3, #3]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d11f      	bne.n	8008a46 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	0151      	lsls	r1, r2, #5
 8008a18:	69fa      	ldr	r2, [r7, #28]
 8008a1a:	440a      	add	r2, r1
 8008a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008a24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	69ba      	ldr	r2, [r7, #24]
 8008a36:	0151      	lsls	r1, r2, #5
 8008a38:	69fa      	ldr	r2, [r7, #28]
 8008a3a:	440a      	add	r2, r1
 8008a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008a46:	79fb      	ldrb	r3, [r7, #7]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d14b      	bne.n	8008ae4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	015a      	lsls	r2, r3, #5
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a60:	461a      	mov	r2, r3
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	78db      	ldrb	r3, [r3, #3]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d128      	bne.n	8008ac2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d110      	bne.n	8008aa2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	e00f      	b.n	8008ac2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69ba      	ldr	r2, [r7, #24]
 8008ab2:	0151      	lsls	r1, r2, #5
 8008ab4:	69fa      	ldr	r2, [r7, #28]
 8008ab6:	440a      	add	r2, r1
 8008ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ac0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	0151      	lsls	r1, r2, #5
 8008ad4:	69fa      	ldr	r2, [r7, #28]
 8008ad6:	440a      	add	r2, r1
 8008ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008adc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ae0:	6013      	str	r3, [r2, #0]
 8008ae2:	e12f      	b.n	8008d44 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	015a      	lsls	r2, r3, #5
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	4413      	add	r3, r2
 8008aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	0151      	lsls	r1, r2, #5
 8008af6:	69fa      	ldr	r2, [r7, #28]
 8008af8:	440a      	add	r2, r1
 8008afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008afe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	78db      	ldrb	r3, [r3, #3]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d015      	beq.n	8008b38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	695b      	ldr	r3, [r3, #20]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 8117 	beq.w	8008d44 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	f003 030f 	and.w	r3, r3, #15
 8008b26:	2101      	movs	r1, #1
 8008b28:	fa01 f303 	lsl.w	r3, r1, r3
 8008b2c:	69f9      	ldr	r1, [r7, #28]
 8008b2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b32:	4313      	orrs	r3, r2
 8008b34:	634b      	str	r3, [r1, #52]	; 0x34
 8008b36:	e105      	b.n	8008d44 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d110      	bne.n	8008b6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	0151      	lsls	r1, r2, #5
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	440a      	add	r2, r1
 8008b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b66:	6013      	str	r3, [r2, #0]
 8008b68:	e00f      	b.n	8008b8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	0151      	lsls	r1, r2, #5
 8008b7c:	69fa      	ldr	r2, [r7, #28]
 8008b7e:	440a      	add	r2, r1
 8008b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	68d9      	ldr	r1, [r3, #12]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	781a      	ldrb	r2, [r3, #0]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	b298      	uxth	r0, r3
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f000 fa2b 	bl	8008ffa <USB_WritePacket>
 8008ba4:	e0ce      	b.n	8008d44 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	015a      	lsls	r2, r3, #5
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	4413      	add	r3, r2
 8008bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	0151      	lsls	r1, r2, #5
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	440a      	add	r2, r1
 8008bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bc0:	0cdb      	lsrs	r3, r3, #19
 8008bc2:	04db      	lsls	r3, r3, #19
 8008bc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	015a      	lsls	r2, r3, #5
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	0151      	lsls	r1, r2, #5
 8008bd8:	69fa      	ldr	r2, [r7, #28]
 8008bda:	440a      	add	r2, r1
 8008bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008be0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008be4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008be8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d126      	bne.n	8008c40 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	015a      	lsls	r2, r3, #5
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfe:	691a      	ldr	r2, [r3, #16]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c08:	69b9      	ldr	r1, [r7, #24]
 8008c0a:	0148      	lsls	r0, r1, #5
 8008c0c:	69f9      	ldr	r1, [r7, #28]
 8008c0e:	4401      	add	r1, r0
 8008c10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c14:	4313      	orrs	r3, r2
 8008c16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	0151      	lsls	r1, r2, #5
 8008c2a:	69fa      	ldr	r2, [r7, #28]
 8008c2c:	440a      	add	r2, r1
 8008c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c36:	6113      	str	r3, [r2, #16]
 8008c38:	e036      	b.n	8008ca8 <USB_EPStartXfer+0x3dc>
 8008c3a:	bf00      	nop
 8008c3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	695a      	ldr	r2, [r3, #20]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	4413      	add	r3, r2
 8008c4a:	1e5a      	subs	r2, r3, #1
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c54:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c62:	691a      	ldr	r2, [r3, #16]
 8008c64:	8afb      	ldrh	r3, [r7, #22]
 8008c66:	04d9      	lsls	r1, r3, #19
 8008c68:	4b39      	ldr	r3, [pc, #228]	; (8008d50 <USB_EPStartXfer+0x484>)
 8008c6a:	400b      	ands	r3, r1
 8008c6c:	69b9      	ldr	r1, [r7, #24]
 8008c6e:	0148      	lsls	r0, r1, #5
 8008c70:	69f9      	ldr	r1, [r7, #28]
 8008c72:	4401      	add	r1, r0
 8008c74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c88:	691a      	ldr	r2, [r3, #16]
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	8af9      	ldrh	r1, [r7, #22]
 8008c90:	fb01 f303 	mul.w	r3, r1, r3
 8008c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c98:	69b9      	ldr	r1, [r7, #24]
 8008c9a:	0148      	lsls	r0, r1, #5
 8008c9c:	69f9      	ldr	r1, [r7, #28]
 8008c9e:	4401      	add	r1, r0
 8008ca0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008ca8:	79fb      	ldrb	r3, [r7, #7]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d10d      	bne.n	8008cca <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d009      	beq.n	8008cca <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	68d9      	ldr	r1, [r3, #12]
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc6:	460a      	mov	r2, r1
 8008cc8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	78db      	ldrb	r3, [r3, #3]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d128      	bne.n	8008d24 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d110      	bne.n	8008d04 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	0151      	lsls	r1, r2, #5
 8008cf4:	69fa      	ldr	r2, [r7, #28]
 8008cf6:	440a      	add	r2, r1
 8008cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	e00f      	b.n	8008d24 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	0151      	lsls	r1, r2, #5
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	440a      	add	r2, r1
 8008d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	015a      	lsls	r2, r3, #5
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	0151      	lsls	r1, r2, #5
 8008d36:	69fa      	ldr	r2, [r7, #28]
 8008d38:	440a      	add	r2, r1
 8008d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3720      	adds	r7, #32
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	1ff80000 	.word	0x1ff80000

08008d54 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b087      	sub	sp, #28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	785b      	ldrb	r3, [r3, #1]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	f040 80cd 	bne.w	8008f10 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d132      	bne.n	8008de4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	0151      	lsls	r1, r2, #5
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	440a      	add	r2, r1
 8008d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008da0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	0151      	lsls	r1, r2, #5
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	440a      	add	r2, r1
 8008db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	0151      	lsls	r1, r2, #5
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	440a      	add	r2, r1
 8008dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ddc:	0cdb      	lsrs	r3, r3, #19
 8008dde:	04db      	lsls	r3, r3, #19
 8008de0:	6113      	str	r3, [r2, #16]
 8008de2:	e04e      	b.n	8008e82 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	015a      	lsls	r2, r3, #5
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	0151      	lsls	r1, r2, #5
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	440a      	add	r2, r1
 8008dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dfe:	0cdb      	lsrs	r3, r3, #19
 8008e00:	04db      	lsls	r3, r3, #19
 8008e02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	0151      	lsls	r1, r2, #5
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	440a      	add	r2, r1
 8008e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e26:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	695a      	ldr	r2, [r3, #20]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d903      	bls.n	8008e3c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	689a      	ldr	r2, [r3, #8]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	0151      	lsls	r1, r2, #5
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	440a      	add	r2, r1
 8008e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e68:	691a      	ldr	r2, [r3, #16]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e72:	6939      	ldr	r1, [r7, #16]
 8008e74:	0148      	lsls	r0, r1, #5
 8008e76:	6979      	ldr	r1, [r7, #20]
 8008e78:	4401      	add	r1, r0
 8008e7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008e82:	79fb      	ldrb	r3, [r7, #7]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d11e      	bne.n	8008ec6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d009      	beq.n	8008ea4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	015a      	lsls	r2, r3, #5
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	0151      	lsls	r1, r2, #5
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	440a      	add	r2, r1
 8008eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ebe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ec2:	6013      	str	r3, [r2, #0]
 8008ec4:	e092      	b.n	8008fec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	0151      	lsls	r1, r2, #5
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	440a      	add	r2, r1
 8008edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ee0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ee4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d07e      	beq.n	8008fec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	f003 030f 	and.w	r3, r3, #15
 8008efe:	2101      	movs	r1, #1
 8008f00:	fa01 f303 	lsl.w	r3, r1, r3
 8008f04:	6979      	ldr	r1, [r7, #20]
 8008f06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	634b      	str	r3, [r1, #52]	; 0x34
 8008f0e:	e06d      	b.n	8008fec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	0151      	lsls	r1, r2, #5
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	440a      	add	r2, r1
 8008f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f2a:	0cdb      	lsrs	r3, r3, #19
 8008f2c:	04db      	lsls	r3, r3, #19
 8008f2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	0151      	lsls	r1, r2, #5
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	440a      	add	r2, r1
 8008f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f52:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d003      	beq.n	8008f64 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	689a      	ldr	r2, [r3, #8]
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	0151      	lsls	r1, r2, #5
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	440a      	add	r2, r1
 8008f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f90:	691a      	ldr	r2, [r3, #16]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f9a:	6939      	ldr	r1, [r7, #16]
 8008f9c:	0148      	lsls	r0, r1, #5
 8008f9e:	6979      	ldr	r1, [r7, #20]
 8008fa0:	4401      	add	r1, r0
 8008fa2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d10d      	bne.n	8008fcc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d009      	beq.n	8008fcc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	68d9      	ldr	r1, [r3, #12]
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc8:	460a      	mov	r2, r1
 8008fca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	015a      	lsls	r2, r3, #5
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	0151      	lsls	r1, r2, #5
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	440a      	add	r2, r1
 8008fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fe6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008fea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	371c      	adds	r7, #28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b089      	sub	sp, #36	; 0x24
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	60b9      	str	r1, [r7, #8]
 8009004:	4611      	mov	r1, r2
 8009006:	461a      	mov	r2, r3
 8009008:	460b      	mov	r3, r1
 800900a:	71fb      	strb	r3, [r7, #7]
 800900c:	4613      	mov	r3, r2
 800900e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009018:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800901c:	2b00      	cmp	r3, #0
 800901e:	d123      	bne.n	8009068 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009020:	88bb      	ldrh	r3, [r7, #4]
 8009022:	3303      	adds	r3, #3
 8009024:	089b      	lsrs	r3, r3, #2
 8009026:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009028:	2300      	movs	r3, #0
 800902a:	61bb      	str	r3, [r7, #24]
 800902c:	e018      	b.n	8009060 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800902e:	79fb      	ldrb	r3, [r7, #7]
 8009030:	031a      	lsls	r2, r3, #12
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	4413      	add	r3, r2
 8009036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800903a:	461a      	mov	r2, r3
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	3301      	adds	r3, #1
 8009046:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	3301      	adds	r3, #1
 800904c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	3301      	adds	r3, #1
 8009052:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	3301      	adds	r3, #1
 8009058:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	3301      	adds	r3, #1
 800905e:	61bb      	str	r3, [r7, #24]
 8009060:	69ba      	ldr	r2, [r7, #24]
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	429a      	cmp	r2, r3
 8009066:	d3e2      	bcc.n	800902e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3724      	adds	r7, #36	; 0x24
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009076:	b480      	push	{r7}
 8009078:	b08b      	sub	sp, #44	; 0x2c
 800907a:	af00      	add	r7, sp, #0
 800907c:	60f8      	str	r0, [r7, #12]
 800907e:	60b9      	str	r1, [r7, #8]
 8009080:	4613      	mov	r3, r2
 8009082:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800908c:	88fb      	ldrh	r3, [r7, #6]
 800908e:	089b      	lsrs	r3, r3, #2
 8009090:	b29b      	uxth	r3, r3
 8009092:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009094:	88fb      	ldrh	r3, [r7, #6]
 8009096:	f003 0303 	and.w	r3, r3, #3
 800909a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800909c:	2300      	movs	r3, #0
 800909e:	623b      	str	r3, [r7, #32]
 80090a0:	e014      	b.n	80090cc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	601a      	str	r2, [r3, #0]
    pDest++;
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	3301      	adds	r3, #1
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	3301      	adds	r3, #1
 80090b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	3301      	adds	r3, #1
 80090be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	3301      	adds	r3, #1
 80090c4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	3301      	adds	r3, #1
 80090ca:	623b      	str	r3, [r7, #32]
 80090cc:	6a3a      	ldr	r2, [r7, #32]
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d3e6      	bcc.n	80090a2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80090d4:	8bfb      	ldrh	r3, [r7, #30]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d01e      	beq.n	8009118 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e4:	461a      	mov	r2, r3
 80090e6:	f107 0310 	add.w	r3, r7, #16
 80090ea:	6812      	ldr	r2, [r2, #0]
 80090ec:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80090ee:	693a      	ldr	r2, [r7, #16]
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	00db      	lsls	r3, r3, #3
 80090f6:	fa22 f303 	lsr.w	r3, r2, r3
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fe:	701a      	strb	r2, [r3, #0]
      i++;
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	3301      	adds	r3, #1
 8009104:	623b      	str	r3, [r7, #32]
      pDest++;
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	3301      	adds	r3, #1
 800910a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800910c:	8bfb      	ldrh	r3, [r7, #30]
 800910e:	3b01      	subs	r3, #1
 8009110:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009112:	8bfb      	ldrh	r3, [r7, #30]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1ea      	bne.n	80090ee <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800911a:	4618      	mov	r0, r3
 800911c:	372c      	adds	r7, #44	; 0x2c
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009126:	b480      	push	{r7}
 8009128:	b085      	sub	sp, #20
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	785b      	ldrb	r3, [r3, #1]
 800913e:	2b01      	cmp	r3, #1
 8009140:	d12c      	bne.n	800919c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	4413      	add	r3, r2
 800914a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	db12      	blt.n	800917a <USB_EPSetStall+0x54>
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00f      	beq.n	800917a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	0151      	lsls	r1, r2, #5
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	440a      	add	r2, r1
 8009170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009174:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009178:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	4413      	add	r3, r2
 8009182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	0151      	lsls	r1, r2, #5
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	440a      	add	r2, r1
 8009190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009198:	6013      	str	r3, [r2, #0]
 800919a:	e02b      	b.n	80091f4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	db12      	blt.n	80091d4 <USB_EPSetStall+0xae>
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00f      	beq.n	80091d4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	0151      	lsls	r1, r2, #5
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	440a      	add	r2, r1
 80091ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091d2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	0151      	lsls	r1, r2, #5
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	440a      	add	r2, r1
 80091ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009202:	b480      	push	{r7}
 8009204:	b085      	sub	sp, #20
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	785b      	ldrb	r3, [r3, #1]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d128      	bne.n	8009270 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	0151      	lsls	r1, r2, #5
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	440a      	add	r2, r1
 8009234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009238:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800923c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	78db      	ldrb	r3, [r3, #3]
 8009242:	2b03      	cmp	r3, #3
 8009244:	d003      	beq.n	800924e <USB_EPClearStall+0x4c>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	78db      	ldrb	r3, [r3, #3]
 800924a:	2b02      	cmp	r3, #2
 800924c:	d138      	bne.n	80092c0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	0151      	lsls	r1, r2, #5
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	440a      	add	r2, r1
 8009264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800926c:	6013      	str	r3, [r2, #0]
 800926e:	e027      	b.n	80092c0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	0151      	lsls	r1, r2, #5
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	440a      	add	r2, r1
 8009286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800928a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800928e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	78db      	ldrb	r3, [r3, #3]
 8009294:	2b03      	cmp	r3, #3
 8009296:	d003      	beq.n	80092a0 <USB_EPClearStall+0x9e>
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	78db      	ldrb	r3, [r3, #3]
 800929c:	2b02      	cmp	r3, #2
 800929e:	d10f      	bne.n	80092c0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	0151      	lsls	r1, r2, #5
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	440a      	add	r2, r1
 80092b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092be:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b085      	sub	sp, #20
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	460b      	mov	r3, r1
 80092d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80092f0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	011b      	lsls	r3, r3, #4
 80092fe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009302:	68f9      	ldr	r1, [r7, #12]
 8009304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009308:	4313      	orrs	r3, r2
 800930a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800931a:	b480      	push	{r7}
 800931c:	b085      	sub	sp, #20
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009334:	f023 0303 	bic.w	r3, r3, #3
 8009338:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009348:	f023 0302 	bic.w	r3, r3, #2
 800934c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009376:	f023 0303 	bic.w	r3, r3, #3
 800937a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800938a:	f043 0302 	orr.w	r3, r3, #2
 800938e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800939e:	b480      	push	{r7}
 80093a0:	b085      	sub	sp, #20
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	4013      	ands	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80093b6:	68fb      	ldr	r3, [r7, #12]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093e0:	69db      	ldr	r3, [r3, #28]
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	4013      	ands	r3, r2
 80093e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	0c1b      	lsrs	r3, r3, #16
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	4013      	ands	r3, r2
 800941a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	b29b      	uxth	r3, r3
}
 8009420:	4618      	mov	r0, r3
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800943c:	78fb      	ldrb	r3, [r7, #3]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009452:	695b      	ldr	r3, [r3, #20]
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	4013      	ands	r3, r2
 8009458:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800945a:	68bb      	ldr	r3, [r7, #8]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800948c:	78fb      	ldrb	r3, [r7, #3]
 800948e:	f003 030f 	and.w	r3, r3, #15
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	fa22 f303 	lsr.w	r3, r2, r3
 8009498:	01db      	lsls	r3, r3, #7
 800949a:	b2db      	uxtb	r3, r3
 800949c:	693a      	ldr	r2, [r7, #16]
 800949e:	4313      	orrs	r3, r2
 80094a0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80094a2:	78fb      	ldrb	r3, [r7, #3]
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	4013      	ands	r3, r2
 80094b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094b6:	68bb      	ldr	r3, [r7, #8]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	371c      	adds	r7, #28
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	695b      	ldr	r3, [r3, #20]
 80094d0:	f003 0301 	and.w	r3, r3, #1
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80094fe:	f023 0307 	bic.w	r3, r3, #7
 8009502:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009516:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
	...

08009528 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009528:	b480      	push	{r7}
 800952a:	b087      	sub	sp, #28
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	460b      	mov	r3, r1
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	333c      	adds	r3, #60	; 0x3c
 800953e:	3304      	adds	r3, #4
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	4a26      	ldr	r2, [pc, #152]	; (80095e0 <USB_EP0_OutStart+0xb8>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d90a      	bls.n	8009562 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009558:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800955c:	d101      	bne.n	8009562 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	e037      	b.n	80095d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009568:	461a      	mov	r2, r3
 800956a:	2300      	movs	r3, #0
 800956c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800957c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009580:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009590:	f043 0318 	orr.w	r3, r3, #24
 8009594:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80095a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80095aa:	7afb      	ldrb	r3, [r7, #11]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d10f      	bne.n	80095d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095b6:	461a      	mov	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80095ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	371c      	adds	r7, #28
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	4f54300a 	.word	0x4f54300a

080095e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3301      	adds	r3, #1
 80095f4:	60fb      	str	r3, [r7, #12]
 80095f6:	4a13      	ldr	r2, [pc, #76]	; (8009644 <USB_CoreReset+0x60>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d901      	bls.n	8009600 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e01a      	b.n	8009636 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	2b00      	cmp	r3, #0
 8009606:	daf3      	bge.n	80095f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	f043 0201 	orr.w	r2, r3, #1
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	3301      	adds	r3, #1
 800961c:	60fb      	str	r3, [r7, #12]
 800961e:	4a09      	ldr	r2, [pc, #36]	; (8009644 <USB_CoreReset+0x60>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d901      	bls.n	8009628 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e006      	b.n	8009636 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	f003 0301 	and.w	r3, r3, #1
 8009630:	2b01      	cmp	r3, #1
 8009632:	d0f1      	beq.n	8009618 <USB_CoreReset+0x34>

  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	00030d40 	.word	0x00030d40

08009648 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	460b      	mov	r3, r1
 8009652:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009654:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009658:	f002 f960 	bl	800b91c <USBD_static_malloc>
 800965c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d105      	bne.n	8009670 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800966c:	2302      	movs	r3, #2
 800966e:	e066      	b.n	800973e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	7c1b      	ldrb	r3, [r3, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d119      	bne.n	80096b4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009684:	2202      	movs	r2, #2
 8009686:	2181      	movs	r1, #129	; 0x81
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f002 f824 	bl	800b6d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009698:	2202      	movs	r2, #2
 800969a:	2101      	movs	r1, #1
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f002 f81a 	bl	800b6d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2210      	movs	r2, #16
 80096ae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80096b2:	e016      	b.n	80096e2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80096b4:	2340      	movs	r3, #64	; 0x40
 80096b6:	2202      	movs	r2, #2
 80096b8:	2181      	movs	r1, #129	; 0x81
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f002 f80b 	bl	800b6d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80096c6:	2340      	movs	r3, #64	; 0x40
 80096c8:	2202      	movs	r2, #2
 80096ca:	2101      	movs	r1, #1
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f002 f802 	bl	800b6d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2210      	movs	r2, #16
 80096de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80096e2:	2308      	movs	r3, #8
 80096e4:	2203      	movs	r2, #3
 80096e6:	2182      	movs	r1, #130	; 0x82
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f001 fff4 	bl	800b6d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	7c1b      	ldrb	r3, [r3, #16]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d109      	bne.n	800972c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800971e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009722:	2101      	movs	r1, #1
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f002 f8c5 	bl	800b8b4 <USBD_LL_PrepareReceive>
 800972a:	e007      	b.n	800973c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009732:	2340      	movs	r3, #64	; 0x40
 8009734:	2101      	movs	r1, #1
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f002 f8bc 	bl	800b8b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b082      	sub	sp, #8
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	460b      	mov	r3, r1
 8009750:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009752:	2181      	movs	r1, #129	; 0x81
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f001 ffe4 	bl	800b722 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009760:	2101      	movs	r1, #1
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f001 ffdd 	bl	800b722 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009770:	2182      	movs	r1, #130	; 0x82
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 ffd5 	bl	800b722 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00e      	beq.n	80097b0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097a2:	4618      	mov	r0, r3
 80097a4:	f002 f8c8 	bl	800b938 <USBD_static_free>
    pdev->pClassData = NULL;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80097ce:	2300      	movs	r3, #0
 80097d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80097d2:	2300      	movs	r3, #0
 80097d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e0af      	b.n	8009944 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d03f      	beq.n	8009870 <USBD_CDC_Setup+0xb4>
 80097f0:	2b20      	cmp	r3, #32
 80097f2:	f040 809f 	bne.w	8009934 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	88db      	ldrh	r3, [r3, #6]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d02e      	beq.n	800985c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	b25b      	sxtb	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	da16      	bge.n	8009836 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009814:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	88d2      	ldrh	r2, [r2, #6]
 800981a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	88db      	ldrh	r3, [r3, #6]
 8009820:	2b07      	cmp	r3, #7
 8009822:	bf28      	it	cs
 8009824:	2307      	movcs	r3, #7
 8009826:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	89fa      	ldrh	r2, [r7, #14]
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f001 fb19 	bl	800ae66 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009834:	e085      	b.n	8009942 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	785a      	ldrb	r2, [r3, #1]
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	88db      	ldrh	r3, [r3, #6]
 8009844:	b2da      	uxtb	r2, r3
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800984c:	6939      	ldr	r1, [r7, #16]
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	88db      	ldrh	r3, [r3, #6]
 8009852:	461a      	mov	r2, r3
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f001 fb32 	bl	800aebe <USBD_CtlPrepareRx>
      break;
 800985a:	e072      	b.n	8009942 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	7850      	ldrb	r0, [r2, #1]
 8009868:	2200      	movs	r2, #0
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	4798      	blx	r3
      break;
 800986e:	e068      	b.n	8009942 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	785b      	ldrb	r3, [r3, #1]
 8009874:	2b0b      	cmp	r3, #11
 8009876:	d852      	bhi.n	800991e <USBD_CDC_Setup+0x162>
 8009878:	a201      	add	r2, pc, #4	; (adr r2, 8009880 <USBD_CDC_Setup+0xc4>)
 800987a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987e:	bf00      	nop
 8009880:	080098b1 	.word	0x080098b1
 8009884:	0800992d 	.word	0x0800992d
 8009888:	0800991f 	.word	0x0800991f
 800988c:	0800991f 	.word	0x0800991f
 8009890:	0800991f 	.word	0x0800991f
 8009894:	0800991f 	.word	0x0800991f
 8009898:	0800991f 	.word	0x0800991f
 800989c:	0800991f 	.word	0x0800991f
 80098a0:	0800991f 	.word	0x0800991f
 80098a4:	0800991f 	.word	0x0800991f
 80098a8:	080098db 	.word	0x080098db
 80098ac:	08009905 	.word	0x08009905
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b03      	cmp	r3, #3
 80098ba:	d107      	bne.n	80098cc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80098bc:	f107 030a 	add.w	r3, r7, #10
 80098c0:	2202      	movs	r2, #2
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f001 face 	bl	800ae66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80098ca:	e032      	b.n	8009932 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f001 fa58 	bl	800ad84 <USBD_CtlError>
            ret = USBD_FAIL;
 80098d4:	2303      	movs	r3, #3
 80098d6:	75fb      	strb	r3, [r7, #23]
          break;
 80098d8:	e02b      	b.n	8009932 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b03      	cmp	r3, #3
 80098e4:	d107      	bne.n	80098f6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80098e6:	f107 030d 	add.w	r3, r7, #13
 80098ea:	2201      	movs	r2, #1
 80098ec:	4619      	mov	r1, r3
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f001 fab9 	bl	800ae66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80098f4:	e01d      	b.n	8009932 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f001 fa43 	bl	800ad84 <USBD_CtlError>
            ret = USBD_FAIL;
 80098fe:	2303      	movs	r3, #3
 8009900:	75fb      	strb	r3, [r7, #23]
          break;
 8009902:	e016      	b.n	8009932 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b03      	cmp	r3, #3
 800990e:	d00f      	beq.n	8009930 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f001 fa36 	bl	800ad84 <USBD_CtlError>
            ret = USBD_FAIL;
 8009918:	2303      	movs	r3, #3
 800991a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800991c:	e008      	b.n	8009930 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f001 fa2f 	bl	800ad84 <USBD_CtlError>
          ret = USBD_FAIL;
 8009926:	2303      	movs	r3, #3
 8009928:	75fb      	strb	r3, [r7, #23]
          break;
 800992a:	e002      	b.n	8009932 <USBD_CDC_Setup+0x176>
          break;
 800992c:	bf00      	nop
 800992e:	e008      	b.n	8009942 <USBD_CDC_Setup+0x186>
          break;
 8009930:	bf00      	nop
      }
      break;
 8009932:	e006      	b.n	8009942 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f001 fa24 	bl	800ad84 <USBD_CtlError>
      ret = USBD_FAIL;
 800993c:	2303      	movs	r3, #3
 800993e:	75fb      	strb	r3, [r7, #23]
      break;
 8009940:	bf00      	nop
  }

  return (uint8_t)ret;
 8009942:	7dfb      	ldrb	r3, [r7, #23]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3718      	adds	r7, #24
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	460b      	mov	r3, r1
 8009956:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800995e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800996a:	2303      	movs	r3, #3
 800996c:	e04f      	b.n	8009a0e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009974:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009976:	78fa      	ldrb	r2, [r7, #3]
 8009978:	6879      	ldr	r1, [r7, #4]
 800997a:	4613      	mov	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	440b      	add	r3, r1
 8009984:	3318      	adds	r3, #24
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d029      	beq.n	80099e0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800998c:	78fa      	ldrb	r2, [r7, #3]
 800998e:	6879      	ldr	r1, [r7, #4]
 8009990:	4613      	mov	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	440b      	add	r3, r1
 800999a:	3318      	adds	r3, #24
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	78f9      	ldrb	r1, [r7, #3]
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	460b      	mov	r3, r1
 80099a4:	00db      	lsls	r3, r3, #3
 80099a6:	1a5b      	subs	r3, r3, r1
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4403      	add	r3, r0
 80099ac:	3344      	adds	r3, #68	; 0x44
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80099b4:	fb03 f301 	mul.w	r3, r3, r1
 80099b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d110      	bne.n	80099e0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80099be:	78fa      	ldrb	r2, [r7, #3]
 80099c0:	6879      	ldr	r1, [r7, #4]
 80099c2:	4613      	mov	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4413      	add	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	440b      	add	r3, r1
 80099cc:	3318      	adds	r3, #24
 80099ce:	2200      	movs	r2, #0
 80099d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80099d2:	78f9      	ldrb	r1, [r7, #3]
 80099d4:	2300      	movs	r3, #0
 80099d6:	2200      	movs	r2, #0
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f001 ff4a 	bl	800b872 <USBD_LL_Transmit>
 80099de:	e015      	b.n	8009a0c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00b      	beq.n	8009a0c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009a02:	68ba      	ldr	r2, [r7, #8]
 8009a04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009a08:	78fa      	ldrb	r2, [r7, #3]
 8009a0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	460b      	mov	r3, r1
 8009a20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d101      	bne.n	8009a38 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e015      	b.n	8009a64 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009a38:	78fb      	ldrb	r3, [r7, #3]
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f001 ff5a 	bl	800b8f6 <USBD_LL_GetRxDataSize>
 8009a42:	4602      	mov	r2, r0
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009a5e:	4611      	mov	r1, r2
 8009a60:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a7a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009a82:	2303      	movs	r3, #3
 8009a84:	e01b      	b.n	8009abe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d015      	beq.n	8009abc <USBD_CDC_EP0_RxReady+0x50>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009a96:	2bff      	cmp	r3, #255	; 0xff
 8009a98:	d010      	beq.n	8009abc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009aa8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ab0:	b292      	uxth	r2, r2
 8009ab2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	22ff      	movs	r2, #255	; 0xff
 8009ab8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2243      	movs	r2, #67	; 0x43
 8009ad4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009ad6:	4b03      	ldr	r3, [pc, #12]	; (8009ae4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	2000009c 	.word	0x2000009c

08009ae8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2243      	movs	r2, #67	; 0x43
 8009af4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009af6:	4b03      	ldr	r3, [pc, #12]	; (8009b04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	20000058 	.word	0x20000058

08009b08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2243      	movs	r2, #67	; 0x43
 8009b14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009b16:	4b03      	ldr	r3, [pc, #12]	; (8009b24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	200000e0 	.word	0x200000e0

08009b28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	220a      	movs	r2, #10
 8009b34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009b36:	4b03      	ldr	r3, [pc, #12]	; (8009b44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	20000014 	.word	0x20000014

08009b48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d101      	bne.n	8009b5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e004      	b.n	8009b66 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b087      	sub	sp, #28
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	60f8      	str	r0, [r7, #12]
 8009b7a:	60b9      	str	r1, [r7, #8]
 8009b7c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b84:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e008      	b.n	8009ba2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	371c      	adds	r7, #28
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009bae:	b480      	push	{r7}
 8009bb0:	b085      	sub	sp, #20
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bbe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	e004      	b.n	8009bd4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e01a      	b.n	8009c38 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d114      	bne.n	8009c36 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009c2a:	2181      	movs	r1, #129	; 0x81
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 fe20 	bl	800b872 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009c32:	2300      	movs	r3, #0
 8009c34:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d101      	bne.n	8009c5e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	e016      	b.n	8009c8c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	7c1b      	ldrb	r3, [r3, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d109      	bne.n	8009c7a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c70:	2101      	movs	r1, #1
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f001 fe1e 	bl	800b8b4 <USBD_LL_PrepareReceive>
 8009c78:	e007      	b.n	8009c8a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c80:	2340      	movs	r3, #64	; 0x40
 8009c82:	2101      	movs	r1, #1
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 fe15 	bl	800b8b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	e01f      	b.n	8009cec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	79fa      	ldrb	r2, [r7, #7]
 8009cde:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f001 fc91 	bl	800b608 <USBD_LL_Init>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3718      	adds	r7, #24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d101      	bne.n	8009d0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009d08:	2303      	movs	r3, #3
 8009d0a:	e016      	b.n	8009d3a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00b      	beq.n	8009d38 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d28:	f107 020e 	add.w	r2, r7, #14
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	4798      	blx	r3
 8009d30:	4602      	mov	r2, r0
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b082      	sub	sp, #8
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f001 fca8 	bl	800b6a0 <USBD_LL_Start>
 8009d50:	4603      	mov	r3, r0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d009      	beq.n	8009d9e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	78fa      	ldrb	r2, [r7, #3]
 8009d94:	4611      	mov	r1, r2
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	4798      	blx	r3
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	460b      	mov	r3, r1
 8009db2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d007      	beq.n	8009dce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	78fa      	ldrb	r2, [r7, #3]
 8009dc8:	4611      	mov	r1, r2
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	4798      	blx	r3
  }

  return USBD_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009de8:	6839      	ldr	r1, [r7, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 ff90 	bl	800ad10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009dfe:	461a      	mov	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e0c:	f003 031f 	and.w	r3, r3, #31
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d01a      	beq.n	8009e4a <USBD_LL_SetupStage+0x72>
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	d822      	bhi.n	8009e5e <USBD_LL_SetupStage+0x86>
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d002      	beq.n	8009e22 <USBD_LL_SetupStage+0x4a>
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d00a      	beq.n	8009e36 <USBD_LL_SetupStage+0x5e>
 8009e20:	e01d      	b.n	8009e5e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e28:	4619      	mov	r1, r3
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fa62 	bl	800a2f4 <USBD_StdDevReq>
 8009e30:	4603      	mov	r3, r0
 8009e32:	73fb      	strb	r3, [r7, #15]
      break;
 8009e34:	e020      	b.n	8009e78 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fac6 	bl	800a3d0 <USBD_StdItfReq>
 8009e44:	4603      	mov	r3, r0
 8009e46:	73fb      	strb	r3, [r7, #15]
      break;
 8009e48:	e016      	b.n	8009e78 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e50:	4619      	mov	r1, r3
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 fb05 	bl	800a462 <USBD_StdEPReq>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e5c:	e00c      	b.n	8009e78 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f001 fc77 	bl	800b760 <USBD_LL_StallEP>
 8009e72:	4603      	mov	r3, r0
 8009e74:	73fb      	strb	r3, [r7, #15]
      break;
 8009e76:	bf00      	nop
  }

  return ret;
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b086      	sub	sp, #24
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	60f8      	str	r0, [r7, #12]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	607a      	str	r2, [r7, #4]
 8009e8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009e90:	7afb      	ldrb	r3, [r7, #11]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d138      	bne.n	8009f08 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009e9c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ea4:	2b03      	cmp	r3, #3
 8009ea6:	d14a      	bne.n	8009f3e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	689a      	ldr	r2, [r3, #8]
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d913      	bls.n	8009edc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	689a      	ldr	r2, [r3, #8]
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	1ad2      	subs	r2, r2, r3
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	68da      	ldr	r2, [r3, #12]
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	bf28      	it	cs
 8009ece:	4613      	movcs	r3, r2
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f001 f80f 	bl	800aef8 <USBD_CtlContinueRx>
 8009eda:	e030      	b.n	8009f3e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	2b03      	cmp	r3, #3
 8009ee6:	d10b      	bne.n	8009f00 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d005      	beq.n	8009f00 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f001 f80a 	bl	800af1a <USBD_CtlSendStatus>
 8009f06:	e01a      	b.n	8009f3e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d114      	bne.n	8009f3e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00e      	beq.n	8009f3e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	7afa      	ldrb	r2, [r7, #11]
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	4798      	blx	r3
 8009f30:	4603      	mov	r3, r0
 8009f32:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009f34:	7dfb      	ldrb	r3, [r7, #23]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009f3a:	7dfb      	ldrb	r3, [r7, #23]
 8009f3c:	e000      	b.n	8009f40 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	460b      	mov	r3, r1
 8009f52:	607a      	str	r2, [r7, #4]
 8009f54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009f56:	7afb      	ldrb	r3, [r7, #11]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d16b      	bne.n	800a034 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	3314      	adds	r3, #20
 8009f60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d156      	bne.n	800a01a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	689a      	ldr	r2, [r3, #8]
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d914      	bls.n	8009fa2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	689a      	ldr	r2, [r3, #8]
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	1ad2      	subs	r2, r2, r3
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	6879      	ldr	r1, [r7, #4]
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f000 ff84 	bl	800ae9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f94:	2300      	movs	r3, #0
 8009f96:	2200      	movs	r2, #0
 8009f98:	2100      	movs	r1, #0
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f001 fc8a 	bl	800b8b4 <USBD_LL_PrepareReceive>
 8009fa0:	e03b      	b.n	800a01a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	68da      	ldr	r2, [r3, #12]
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d11c      	bne.n	8009fe8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	685a      	ldr	r2, [r3, #4]
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d316      	bcc.n	8009fe8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	685a      	ldr	r2, [r3, #4]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d20f      	bcs.n	8009fe8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009fc8:	2200      	movs	r2, #0
 8009fca:	2100      	movs	r1, #0
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 ff65 	bl	800ae9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fda:	2300      	movs	r3, #0
 8009fdc:	2200      	movs	r2, #0
 8009fde:	2100      	movs	r1, #0
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f001 fc67 	bl	800b8b4 <USBD_LL_PrepareReceive>
 8009fe6:	e018      	b.n	800a01a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d10b      	bne.n	800a00c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d005      	beq.n	800a00c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a00c:	2180      	movs	r1, #128	; 0x80
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f001 fba6 	bl	800b760 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f000 ff93 	bl	800af40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a020:	2b01      	cmp	r3, #1
 800a022:	d122      	bne.n	800a06a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f7ff fe98 	bl	8009d5a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a032:	e01a      	b.n	800a06a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b03      	cmp	r3, #3
 800a03e:	d114      	bne.n	800a06a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00e      	beq.n	800a06a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a052:	695b      	ldr	r3, [r3, #20]
 800a054:	7afa      	ldrb	r2, [r7, #11]
 800a056:	4611      	mov	r1, r2
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	4798      	blx	r3
 800a05c:	4603      	mov	r3, r0
 800a05e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a060:	7dfb      	ldrb	r3, [r7, #23]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a066:	7dfb      	ldrb	r3, [r7, #23]
 800a068:	e000      	b.n	800a06c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d101      	bne.n	800a0a8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e02f      	b.n	800a108 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00f      	beq.n	800a0d2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d009      	beq.n	800a0d2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	6852      	ldr	r2, [r2, #4]
 800a0ca:	b2d2      	uxtb	r2, r2
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0d2:	2340      	movs	r3, #64	; 0x40
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f001 fafc 	bl	800b6d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2240      	movs	r2, #64	; 0x40
 800a0ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0ee:	2340      	movs	r3, #64	; 0x40
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	2180      	movs	r1, #128	; 0x80
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f001 faee 	bl	800b6d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2240      	movs	r2, #64	; 0x40
 800a104:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	78fa      	ldrb	r2, [r7, #3]
 800a120:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2204      	movs	r2, #4
 800a14a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b04      	cmp	r3, #4
 800a16e:	d106      	bne.n	800a17e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a176:	b2da      	uxtb	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d101      	bne.n	800a1a2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	e012      	b.n	800a1c8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	2b03      	cmp	r3, #3
 800a1ac:	d10b      	bne.n	800a1c6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d005      	beq.n	800a1c6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1c0:	69db      	ldr	r3, [r3, #28]
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	e014      	b.n	800a214 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	d10d      	bne.n	800a212 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1fc:	6a1b      	ldr	r3, [r3, #32]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d007      	beq.n	800a212 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a208:	6a1b      	ldr	r3, [r3, #32]
 800a20a:	78fa      	ldrb	r2, [r7, #3]
 800a20c:	4611      	mov	r1, r2
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a232:	2303      	movs	r3, #3
 800a234:	e014      	b.n	800a260 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d10d      	bne.n	800a25e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d007      	beq.n	800a25e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	78fa      	ldrb	r2, [r7, #3]
 800a258:	4611      	mov	r1, r2
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	370c      	adds	r7, #12
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b082      	sub	sp, #8
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a294:	2b00      	cmp	r3, #0
 800a296:	d009      	beq.n	800a2ac <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	6852      	ldr	r2, [r2, #4]
 800a2a4:	b2d2      	uxtb	r2, r2
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	4798      	blx	r3
  }

  return USBD_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b087      	sub	sp, #28
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a2d4:	8a3b      	ldrh	r3, [r7, #16]
 800a2d6:	021b      	lsls	r3, r3, #8
 800a2d8:	b21a      	sxth	r2, r3
 800a2da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	b21b      	sxth	r3, r3
 800a2e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a2e4:	89fb      	ldrh	r3, [r7, #14]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	371c      	adds	r7, #28
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
	...

0800a2f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a30a:	2b40      	cmp	r3, #64	; 0x40
 800a30c:	d005      	beq.n	800a31a <USBD_StdDevReq+0x26>
 800a30e:	2b40      	cmp	r3, #64	; 0x40
 800a310:	d853      	bhi.n	800a3ba <USBD_StdDevReq+0xc6>
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00b      	beq.n	800a32e <USBD_StdDevReq+0x3a>
 800a316:	2b20      	cmp	r3, #32
 800a318:	d14f      	bne.n	800a3ba <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	6839      	ldr	r1, [r7, #0]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	4798      	blx	r3
 800a328:	4603      	mov	r3, r0
 800a32a:	73fb      	strb	r3, [r7, #15]
      break;
 800a32c:	e04a      	b.n	800a3c4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	785b      	ldrb	r3, [r3, #1]
 800a332:	2b09      	cmp	r3, #9
 800a334:	d83b      	bhi.n	800a3ae <USBD_StdDevReq+0xba>
 800a336:	a201      	add	r2, pc, #4	; (adr r2, 800a33c <USBD_StdDevReq+0x48>)
 800a338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33c:	0800a391 	.word	0x0800a391
 800a340:	0800a3a5 	.word	0x0800a3a5
 800a344:	0800a3af 	.word	0x0800a3af
 800a348:	0800a39b 	.word	0x0800a39b
 800a34c:	0800a3af 	.word	0x0800a3af
 800a350:	0800a36f 	.word	0x0800a36f
 800a354:	0800a365 	.word	0x0800a365
 800a358:	0800a3af 	.word	0x0800a3af
 800a35c:	0800a387 	.word	0x0800a387
 800a360:	0800a379 	.word	0x0800a379
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f9de 	bl	800a728 <USBD_GetDescriptor>
          break;
 800a36c:	e024      	b.n	800a3b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a36e:	6839      	ldr	r1, [r7, #0]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fb43 	bl	800a9fc <USBD_SetAddress>
          break;
 800a376:	e01f      	b.n	800a3b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a378:	6839      	ldr	r1, [r7, #0]
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fb82 	bl	800aa84 <USBD_SetConfig>
 800a380:	4603      	mov	r3, r0
 800a382:	73fb      	strb	r3, [r7, #15]
          break;
 800a384:	e018      	b.n	800a3b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a386:	6839      	ldr	r1, [r7, #0]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fc21 	bl	800abd0 <USBD_GetConfig>
          break;
 800a38e:	e013      	b.n	800a3b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a390:	6839      	ldr	r1, [r7, #0]
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 fc52 	bl	800ac3c <USBD_GetStatus>
          break;
 800a398:	e00e      	b.n	800a3b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fc81 	bl	800aca4 <USBD_SetFeature>
          break;
 800a3a2:	e009      	b.n	800a3b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a3a4:	6839      	ldr	r1, [r7, #0]
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fc90 	bl	800accc <USBD_ClrFeature>
          break;
 800a3ac:	e004      	b.n	800a3b8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fce7 	bl	800ad84 <USBD_CtlError>
          break;
 800a3b6:	bf00      	nop
      }
      break;
 800a3b8:	e004      	b.n	800a3c4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a3ba:	6839      	ldr	r1, [r7, #0]
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 fce1 	bl	800ad84 <USBD_CtlError>
      break;
 800a3c2:	bf00      	nop
  }

  return ret;
 800a3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop

0800a3d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3e6:	2b40      	cmp	r3, #64	; 0x40
 800a3e8:	d005      	beq.n	800a3f6 <USBD_StdItfReq+0x26>
 800a3ea:	2b40      	cmp	r3, #64	; 0x40
 800a3ec:	d82f      	bhi.n	800a44e <USBD_StdItfReq+0x7e>
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <USBD_StdItfReq+0x26>
 800a3f2:	2b20      	cmp	r3, #32
 800a3f4:	d12b      	bne.n	800a44e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	3b01      	subs	r3, #1
 800a400:	2b02      	cmp	r3, #2
 800a402:	d81d      	bhi.n	800a440 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	889b      	ldrh	r3, [r3, #4]
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d813      	bhi.n	800a436 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	4798      	blx	r3
 800a41c:	4603      	mov	r3, r0
 800a41e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	88db      	ldrh	r3, [r3, #6]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d110      	bne.n	800a44a <USBD_StdItfReq+0x7a>
 800a428:	7bfb      	ldrb	r3, [r7, #15]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10d      	bne.n	800a44a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fd73 	bl	800af1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a434:	e009      	b.n	800a44a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 fca3 	bl	800ad84 <USBD_CtlError>
          break;
 800a43e:	e004      	b.n	800a44a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 fc9e 	bl	800ad84 <USBD_CtlError>
          break;
 800a448:	e000      	b.n	800a44c <USBD_StdItfReq+0x7c>
          break;
 800a44a:	bf00      	nop
      }
      break;
 800a44c:	e004      	b.n	800a458 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 fc97 	bl	800ad84 <USBD_CtlError>
      break;
 800a456:	bf00      	nop
  }

  return ret;
 800a458:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b084      	sub	sp, #16
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	889b      	ldrh	r3, [r3, #4]
 800a474:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a47e:	2b40      	cmp	r3, #64	; 0x40
 800a480:	d007      	beq.n	800a492 <USBD_StdEPReq+0x30>
 800a482:	2b40      	cmp	r3, #64	; 0x40
 800a484:	f200 8145 	bhi.w	800a712 <USBD_StdEPReq+0x2b0>
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00c      	beq.n	800a4a6 <USBD_StdEPReq+0x44>
 800a48c:	2b20      	cmp	r3, #32
 800a48e:	f040 8140 	bne.w	800a712 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	4798      	blx	r3
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a4a4:	e13a      	b.n	800a71c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	785b      	ldrb	r3, [r3, #1]
 800a4aa:	2b03      	cmp	r3, #3
 800a4ac:	d007      	beq.n	800a4be <USBD_StdEPReq+0x5c>
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	f300 8129 	bgt.w	800a706 <USBD_StdEPReq+0x2a4>
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d07f      	beq.n	800a5b8 <USBD_StdEPReq+0x156>
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d03c      	beq.n	800a536 <USBD_StdEPReq+0xd4>
 800a4bc:	e123      	b.n	800a706 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	d002      	beq.n	800a4d0 <USBD_StdEPReq+0x6e>
 800a4ca:	2b03      	cmp	r3, #3
 800a4cc:	d016      	beq.n	800a4fc <USBD_StdEPReq+0x9a>
 800a4ce:	e02c      	b.n	800a52a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4d0:	7bbb      	ldrb	r3, [r7, #14]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00d      	beq.n	800a4f2 <USBD_StdEPReq+0x90>
 800a4d6:	7bbb      	ldrb	r3, [r7, #14]
 800a4d8:	2b80      	cmp	r3, #128	; 0x80
 800a4da:	d00a      	beq.n	800a4f2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4dc:	7bbb      	ldrb	r3, [r7, #14]
 800a4de:	4619      	mov	r1, r3
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f001 f93d 	bl	800b760 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4e6:	2180      	movs	r1, #128	; 0x80
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 f939 	bl	800b760 <USBD_LL_StallEP>
 800a4ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4f0:	e020      	b.n	800a534 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fc45 	bl	800ad84 <USBD_CtlError>
              break;
 800a4fa:	e01b      	b.n	800a534 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	885b      	ldrh	r3, [r3, #2]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10e      	bne.n	800a522 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a504:	7bbb      	ldrb	r3, [r7, #14]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00b      	beq.n	800a522 <USBD_StdEPReq+0xc0>
 800a50a:	7bbb      	ldrb	r3, [r7, #14]
 800a50c:	2b80      	cmp	r3, #128	; 0x80
 800a50e:	d008      	beq.n	800a522 <USBD_StdEPReq+0xc0>
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	88db      	ldrh	r3, [r3, #6]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d104      	bne.n	800a522 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a518:	7bbb      	ldrb	r3, [r7, #14]
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f001 f91f 	bl	800b760 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fcf9 	bl	800af1a <USBD_CtlSendStatus>

              break;
 800a528:	e004      	b.n	800a534 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a52a:	6839      	ldr	r1, [r7, #0]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fc29 	bl	800ad84 <USBD_CtlError>
              break;
 800a532:	bf00      	nop
          }
          break;
 800a534:	e0ec      	b.n	800a710 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d002      	beq.n	800a548 <USBD_StdEPReq+0xe6>
 800a542:	2b03      	cmp	r3, #3
 800a544:	d016      	beq.n	800a574 <USBD_StdEPReq+0x112>
 800a546:	e030      	b.n	800a5aa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a548:	7bbb      	ldrb	r3, [r7, #14]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00d      	beq.n	800a56a <USBD_StdEPReq+0x108>
 800a54e:	7bbb      	ldrb	r3, [r7, #14]
 800a550:	2b80      	cmp	r3, #128	; 0x80
 800a552:	d00a      	beq.n	800a56a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a554:	7bbb      	ldrb	r3, [r7, #14]
 800a556:	4619      	mov	r1, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f001 f901 	bl	800b760 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a55e:	2180      	movs	r1, #128	; 0x80
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f001 f8fd 	bl	800b760 <USBD_LL_StallEP>
 800a566:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a568:	e025      	b.n	800a5b6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fc09 	bl	800ad84 <USBD_CtlError>
              break;
 800a572:	e020      	b.n	800a5b6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	885b      	ldrh	r3, [r3, #2]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d11b      	bne.n	800a5b4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a582:	2b00      	cmp	r3, #0
 800a584:	d004      	beq.n	800a590 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a586:	7bbb      	ldrb	r3, [r7, #14]
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f001 f907 	bl	800b79e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fcc2 	bl	800af1a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	4798      	blx	r3
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a5a8:	e004      	b.n	800a5b4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fbe9 	bl	800ad84 <USBD_CtlError>
              break;
 800a5b2:	e000      	b.n	800a5b6 <USBD_StdEPReq+0x154>
              break;
 800a5b4:	bf00      	nop
          }
          break;
 800a5b6:	e0ab      	b.n	800a710 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d002      	beq.n	800a5ca <USBD_StdEPReq+0x168>
 800a5c4:	2b03      	cmp	r3, #3
 800a5c6:	d032      	beq.n	800a62e <USBD_StdEPReq+0x1cc>
 800a5c8:	e097      	b.n	800a6fa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5ca:	7bbb      	ldrb	r3, [r7, #14]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d007      	beq.n	800a5e0 <USBD_StdEPReq+0x17e>
 800a5d0:	7bbb      	ldrb	r3, [r7, #14]
 800a5d2:	2b80      	cmp	r3, #128	; 0x80
 800a5d4:	d004      	beq.n	800a5e0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fbd3 	bl	800ad84 <USBD_CtlError>
                break;
 800a5de:	e091      	b.n	800a704 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	da0b      	bge.n	800a600 <USBD_StdEPReq+0x19e>
 800a5e8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	4413      	add	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	3310      	adds	r3, #16
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	e00b      	b.n	800a618 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a600:	7bbb      	ldrb	r3, [r7, #14]
 800a602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a606:	4613      	mov	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	4413      	add	r3, r2
 800a616:	3304      	adds	r3, #4
 800a618:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2200      	movs	r2, #0
 800a61e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2202      	movs	r2, #2
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fc1d 	bl	800ae66 <USBD_CtlSendData>
              break;
 800a62c:	e06a      	b.n	800a704 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a62e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a632:	2b00      	cmp	r3, #0
 800a634:	da11      	bge.n	800a65a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a636:	7bbb      	ldrb	r3, [r7, #14]
 800a638:	f003 020f 	and.w	r2, r3, #15
 800a63c:	6879      	ldr	r1, [r7, #4]
 800a63e:	4613      	mov	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	440b      	add	r3, r1
 800a648:	3324      	adds	r3, #36	; 0x24
 800a64a:	881b      	ldrh	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d117      	bne.n	800a680 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fb96 	bl	800ad84 <USBD_CtlError>
                  break;
 800a658:	e054      	b.n	800a704 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a65a:	7bbb      	ldrb	r3, [r7, #14]
 800a65c:	f003 020f 	and.w	r2, r3, #15
 800a660:	6879      	ldr	r1, [r7, #4]
 800a662:	4613      	mov	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	440b      	add	r3, r1
 800a66c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d104      	bne.n	800a680 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a676:	6839      	ldr	r1, [r7, #0]
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 fb83 	bl	800ad84 <USBD_CtlError>
                  break;
 800a67e:	e041      	b.n	800a704 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a680:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a684:	2b00      	cmp	r3, #0
 800a686:	da0b      	bge.n	800a6a0 <USBD_StdEPReq+0x23e>
 800a688:	7bbb      	ldrb	r3, [r7, #14]
 800a68a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a68e:	4613      	mov	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	3310      	adds	r3, #16
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	4413      	add	r3, r2
 800a69c:	3304      	adds	r3, #4
 800a69e:	e00b      	b.n	800a6b8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6a0:	7bbb      	ldrb	r3, [r7, #14]
 800a6a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a6ba:	7bbb      	ldrb	r3, [r7, #14]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d002      	beq.n	800a6c6 <USBD_StdEPReq+0x264>
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
 800a6c2:	2b80      	cmp	r3, #128	; 0x80
 800a6c4:	d103      	bne.n	800a6ce <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	e00e      	b.n	800a6ec <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f001 f882 	bl	800b7dc <USBD_LL_IsStallEP>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d003      	beq.n	800a6e6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	e002      	b.n	800a6ec <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	2202      	movs	r2, #2
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fbb7 	bl	800ae66 <USBD_CtlSendData>
              break;
 800a6f8:	e004      	b.n	800a704 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fb41 	bl	800ad84 <USBD_CtlError>
              break;
 800a702:	bf00      	nop
          }
          break;
 800a704:	e004      	b.n	800a710 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a706:	6839      	ldr	r1, [r7, #0]
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fb3b 	bl	800ad84 <USBD_CtlError>
          break;
 800a70e:	bf00      	nop
      }
      break;
 800a710:	e004      	b.n	800a71c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a712:	6839      	ldr	r1, [r7, #0]
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fb35 	bl	800ad84 <USBD_CtlError>
      break;
 800a71a:	bf00      	nop
  }

  return ret;
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
	...

0800a728 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a732:	2300      	movs	r3, #0
 800a734:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a736:	2300      	movs	r3, #0
 800a738:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	885b      	ldrh	r3, [r3, #2]
 800a742:	0a1b      	lsrs	r3, r3, #8
 800a744:	b29b      	uxth	r3, r3
 800a746:	3b01      	subs	r3, #1
 800a748:	2b06      	cmp	r3, #6
 800a74a:	f200 8128 	bhi.w	800a99e <USBD_GetDescriptor+0x276>
 800a74e:	a201      	add	r2, pc, #4	; (adr r2, 800a754 <USBD_GetDescriptor+0x2c>)
 800a750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a754:	0800a771 	.word	0x0800a771
 800a758:	0800a789 	.word	0x0800a789
 800a75c:	0800a7c9 	.word	0x0800a7c9
 800a760:	0800a99f 	.word	0x0800a99f
 800a764:	0800a99f 	.word	0x0800a99f
 800a768:	0800a93f 	.word	0x0800a93f
 800a76c:	0800a96b 	.word	0x0800a96b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	7c12      	ldrb	r2, [r2, #16]
 800a77c:	f107 0108 	add.w	r1, r7, #8
 800a780:	4610      	mov	r0, r2
 800a782:	4798      	blx	r3
 800a784:	60f8      	str	r0, [r7, #12]
      break;
 800a786:	e112      	b.n	800a9ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	7c1b      	ldrb	r3, [r3, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10d      	bne.n	800a7ac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a798:	f107 0208 	add.w	r2, r7, #8
 800a79c:	4610      	mov	r0, r2
 800a79e:	4798      	blx	r3
 800a7a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	2202      	movs	r2, #2
 800a7a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a7aa:	e100      	b.n	800a9ae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b4:	f107 0208 	add.w	r2, r7, #8
 800a7b8:	4610      	mov	r0, r2
 800a7ba:	4798      	blx	r3
 800a7bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	701a      	strb	r2, [r3, #0]
      break;
 800a7c6:	e0f2      	b.n	800a9ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	885b      	ldrh	r3, [r3, #2]
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	2b05      	cmp	r3, #5
 800a7d0:	f200 80ac 	bhi.w	800a92c <USBD_GetDescriptor+0x204>
 800a7d4:	a201      	add	r2, pc, #4	; (adr r2, 800a7dc <USBD_GetDescriptor+0xb4>)
 800a7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7da:	bf00      	nop
 800a7dc:	0800a7f5 	.word	0x0800a7f5
 800a7e0:	0800a829 	.word	0x0800a829
 800a7e4:	0800a85d 	.word	0x0800a85d
 800a7e8:	0800a891 	.word	0x0800a891
 800a7ec:	0800a8c5 	.word	0x0800a8c5
 800a7f0:	0800a8f9 	.word	0x0800a8f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00b      	beq.n	800a818 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	7c12      	ldrb	r2, [r2, #16]
 800a80c:	f107 0108 	add.w	r1, r7, #8
 800a810:	4610      	mov	r0, r2
 800a812:	4798      	blx	r3
 800a814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a816:	e091      	b.n	800a93c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a818:	6839      	ldr	r1, [r7, #0]
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 fab2 	bl	800ad84 <USBD_CtlError>
            err++;
 800a820:	7afb      	ldrb	r3, [r7, #11]
 800a822:	3301      	adds	r3, #1
 800a824:	72fb      	strb	r3, [r7, #11]
          break;
 800a826:	e089      	b.n	800a93c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00b      	beq.n	800a84c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	7c12      	ldrb	r2, [r2, #16]
 800a840:	f107 0108 	add.w	r1, r7, #8
 800a844:	4610      	mov	r0, r2
 800a846:	4798      	blx	r3
 800a848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a84a:	e077      	b.n	800a93c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fa98 	bl	800ad84 <USBD_CtlError>
            err++;
 800a854:	7afb      	ldrb	r3, [r7, #11]
 800a856:	3301      	adds	r3, #1
 800a858:	72fb      	strb	r3, [r7, #11]
          break;
 800a85a:	e06f      	b.n	800a93c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00b      	beq.n	800a880 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	7c12      	ldrb	r2, [r2, #16]
 800a874:	f107 0108 	add.w	r1, r7, #8
 800a878:	4610      	mov	r0, r2
 800a87a:	4798      	blx	r3
 800a87c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a87e:	e05d      	b.n	800a93c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a880:	6839      	ldr	r1, [r7, #0]
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fa7e 	bl	800ad84 <USBD_CtlError>
            err++;
 800a888:	7afb      	ldrb	r3, [r7, #11]
 800a88a:	3301      	adds	r3, #1
 800a88c:	72fb      	strb	r3, [r7, #11]
          break;
 800a88e:	e055      	b.n	800a93c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00b      	beq.n	800a8b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	7c12      	ldrb	r2, [r2, #16]
 800a8a8:	f107 0108 	add.w	r1, r7, #8
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	4798      	blx	r3
 800a8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8b2:	e043      	b.n	800a93c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 fa64 	bl	800ad84 <USBD_CtlError>
            err++;
 800a8bc:	7afb      	ldrb	r3, [r7, #11]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8c2:	e03b      	b.n	800a93c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00b      	beq.n	800a8e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8d6:	695b      	ldr	r3, [r3, #20]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	7c12      	ldrb	r2, [r2, #16]
 800a8dc:	f107 0108 	add.w	r1, r7, #8
 800a8e0:	4610      	mov	r0, r2
 800a8e2:	4798      	blx	r3
 800a8e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8e6:	e029      	b.n	800a93c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fa4a 	bl	800ad84 <USBD_CtlError>
            err++;
 800a8f0:	7afb      	ldrb	r3, [r7, #11]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a8f6:	e021      	b.n	800a93c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8fe:	699b      	ldr	r3, [r3, #24]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00b      	beq.n	800a91c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a90a:	699b      	ldr	r3, [r3, #24]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	7c12      	ldrb	r2, [r2, #16]
 800a910:	f107 0108 	add.w	r1, r7, #8
 800a914:	4610      	mov	r0, r2
 800a916:	4798      	blx	r3
 800a918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a91a:	e00f      	b.n	800a93c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a91c:	6839      	ldr	r1, [r7, #0]
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fa30 	bl	800ad84 <USBD_CtlError>
            err++;
 800a924:	7afb      	ldrb	r3, [r7, #11]
 800a926:	3301      	adds	r3, #1
 800a928:	72fb      	strb	r3, [r7, #11]
          break;
 800a92a:	e007      	b.n	800a93c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a92c:	6839      	ldr	r1, [r7, #0]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fa28 	bl	800ad84 <USBD_CtlError>
          err++;
 800a934:	7afb      	ldrb	r3, [r7, #11]
 800a936:	3301      	adds	r3, #1
 800a938:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a93a:	bf00      	nop
      }
      break;
 800a93c:	e037      	b.n	800a9ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	7c1b      	ldrb	r3, [r3, #16]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d109      	bne.n	800a95a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a94c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a94e:	f107 0208 	add.w	r2, r7, #8
 800a952:	4610      	mov	r0, r2
 800a954:	4798      	blx	r3
 800a956:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a958:	e029      	b.n	800a9ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fa11 	bl	800ad84 <USBD_CtlError>
        err++;
 800a962:	7afb      	ldrb	r3, [r7, #11]
 800a964:	3301      	adds	r3, #1
 800a966:	72fb      	strb	r3, [r7, #11]
      break;
 800a968:	e021      	b.n	800a9ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	7c1b      	ldrb	r3, [r3, #16]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10d      	bne.n	800a98e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97a:	f107 0208 	add.w	r2, r7, #8
 800a97e:	4610      	mov	r0, r2
 800a980:	4798      	blx	r3
 800a982:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	3301      	adds	r3, #1
 800a988:	2207      	movs	r2, #7
 800a98a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a98c:	e00f      	b.n	800a9ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f9f7 	bl	800ad84 <USBD_CtlError>
        err++;
 800a996:	7afb      	ldrb	r3, [r7, #11]
 800a998:	3301      	adds	r3, #1
 800a99a:	72fb      	strb	r3, [r7, #11]
      break;
 800a99c:	e007      	b.n	800a9ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a99e:	6839      	ldr	r1, [r7, #0]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f9ef 	bl	800ad84 <USBD_CtlError>
      err++;
 800a9a6:	7afb      	ldrb	r3, [r7, #11]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a9ac:	bf00      	nop
  }

  if (err != 0U)
 800a9ae:	7afb      	ldrb	r3, [r7, #11]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d11e      	bne.n	800a9f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	88db      	ldrh	r3, [r3, #6]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d016      	beq.n	800a9ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a9bc:	893b      	ldrh	r3, [r7, #8]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00e      	beq.n	800a9e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	88da      	ldrh	r2, [r3, #6]
 800a9c6:	893b      	ldrh	r3, [r7, #8]
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	bf28      	it	cs
 800a9cc:	4613      	movcs	r3, r2
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a9d2:	893b      	ldrh	r3, [r7, #8]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	68f9      	ldr	r1, [r7, #12]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fa44 	bl	800ae66 <USBD_CtlSendData>
 800a9de:	e009      	b.n	800a9f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f9ce 	bl	800ad84 <USBD_CtlError>
 800a9e8:	e004      	b.n	800a9f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 fa95 	bl	800af1a <USBD_CtlSendStatus>
 800a9f0:	e000      	b.n	800a9f4 <USBD_GetDescriptor+0x2cc>
    return;
 800a9f2:	bf00      	nop
  }
}
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop

0800a9fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	889b      	ldrh	r3, [r3, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d131      	bne.n	800aa72 <USBD_SetAddress+0x76>
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	88db      	ldrh	r3, [r3, #6]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d12d      	bne.n	800aa72 <USBD_SetAddress+0x76>
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	885b      	ldrh	r3, [r3, #2]
 800aa1a:	2b7f      	cmp	r3, #127	; 0x7f
 800aa1c:	d829      	bhi.n	800aa72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	885b      	ldrh	r3, [r3, #2]
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d104      	bne.n	800aa40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f9a3 	bl	800ad84 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa3e:	e01d      	b.n	800aa7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	7bfa      	ldrb	r2, [r7, #15]
 800aa44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fef1 	bl	800b834 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 fa61 	bl	800af1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d004      	beq.n	800aa68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2202      	movs	r2, #2
 800aa62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa66:	e009      	b.n	800aa7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa70:	e004      	b.n	800aa7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 f985 	bl	800ad84 <USBD_CtlError>
  }
}
 800aa7a:	bf00      	nop
 800aa7c:	bf00      	nop
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	885b      	ldrh	r3, [r3, #2]
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	4b4c      	ldr	r3, [pc, #304]	; (800abcc <USBD_SetConfig+0x148>)
 800aa9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa9c:	4b4b      	ldr	r3, [pc, #300]	; (800abcc <USBD_SetConfig+0x148>)
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d905      	bls.n	800aab0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f96c 	bl	800ad84 <USBD_CtlError>
    return USBD_FAIL;
 800aaac:	2303      	movs	r3, #3
 800aaae:	e088      	b.n	800abc2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d002      	beq.n	800aac2 <USBD_SetConfig+0x3e>
 800aabc:	2b03      	cmp	r3, #3
 800aabe:	d025      	beq.n	800ab0c <USBD_SetConfig+0x88>
 800aac0:	e071      	b.n	800aba6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aac2:	4b42      	ldr	r3, [pc, #264]	; (800abcc <USBD_SetConfig+0x148>)
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d01c      	beq.n	800ab04 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800aaca:	4b40      	ldr	r3, [pc, #256]	; (800abcc <USBD_SetConfig+0x148>)
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	461a      	mov	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aad4:	4b3d      	ldr	r3, [pc, #244]	; (800abcc <USBD_SetConfig+0x148>)
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	4619      	mov	r1, r3
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7ff f948 	bl	8009d70 <USBD_SetClassConfig>
 800aae0:	4603      	mov	r3, r0
 800aae2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d004      	beq.n	800aaf4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f949 	bl	800ad84 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aaf2:	e065      	b.n	800abc0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fa10 	bl	800af1a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2203      	movs	r2, #3
 800aafe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ab02:	e05d      	b.n	800abc0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fa08 	bl	800af1a <USBD_CtlSendStatus>
      break;
 800ab0a:	e059      	b.n	800abc0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ab0c:	4b2f      	ldr	r3, [pc, #188]	; (800abcc <USBD_SetConfig+0x148>)
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d112      	bne.n	800ab3a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2202      	movs	r2, #2
 800ab18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ab1c:	4b2b      	ldr	r3, [pc, #172]	; (800abcc <USBD_SetConfig+0x148>)
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	461a      	mov	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab26:	4b29      	ldr	r3, [pc, #164]	; (800abcc <USBD_SetConfig+0x148>)
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7ff f93b 	bl	8009da8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f9f1 	bl	800af1a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab38:	e042      	b.n	800abc0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ab3a:	4b24      	ldr	r3, [pc, #144]	; (800abcc <USBD_SetConfig+0x148>)
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d02a      	beq.n	800ab9e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	4619      	mov	r1, r3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f7ff f929 	bl	8009da8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ab56:	4b1d      	ldr	r3, [pc, #116]	; (800abcc <USBD_SetConfig+0x148>)
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab60:	4b1a      	ldr	r3, [pc, #104]	; (800abcc <USBD_SetConfig+0x148>)
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	4619      	mov	r1, r3
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7ff f902 	bl	8009d70 <USBD_SetClassConfig>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00f      	beq.n	800ab96 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f903 	bl	800ad84 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	4619      	mov	r1, r3
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7ff f90e 	bl	8009da8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ab94:	e014      	b.n	800abc0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f9bf 	bl	800af1a <USBD_CtlSendStatus>
      break;
 800ab9c:	e010      	b.n	800abc0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f9bb 	bl	800af1a <USBD_CtlSendStatus>
      break;
 800aba4:	e00c      	b.n	800abc0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 f8eb 	bl	800ad84 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800abae:	4b07      	ldr	r3, [pc, #28]	; (800abcc <USBD_SetConfig+0x148>)
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	4619      	mov	r1, r3
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7ff f8f7 	bl	8009da8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800abba:	2303      	movs	r3, #3
 800abbc:	73fb      	strb	r3, [r7, #15]
      break;
 800abbe:	bf00      	nop
  }

  return ret;
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	20000224 	.word	0x20000224

0800abd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	88db      	ldrh	r3, [r3, #6]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d004      	beq.n	800abec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 f8cd 	bl	800ad84 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800abea:	e023      	b.n	800ac34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	dc02      	bgt.n	800abfe <USBD_GetConfig+0x2e>
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	dc03      	bgt.n	800ac04 <USBD_GetConfig+0x34>
 800abfc:	e015      	b.n	800ac2a <USBD_GetConfig+0x5a>
 800abfe:	2b03      	cmp	r3, #3
 800ac00:	d00b      	beq.n	800ac1a <USBD_GetConfig+0x4a>
 800ac02:	e012      	b.n	800ac2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3308      	adds	r3, #8
 800ac0e:	2201      	movs	r2, #1
 800ac10:	4619      	mov	r1, r3
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f927 	bl	800ae66 <USBD_CtlSendData>
        break;
 800ac18:	e00c      	b.n	800ac34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	2201      	movs	r2, #1
 800ac20:	4619      	mov	r1, r3
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f91f 	bl	800ae66 <USBD_CtlSendData>
        break;
 800ac28:	e004      	b.n	800ac34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f8a9 	bl	800ad84 <USBD_CtlError>
        break;
 800ac32:	bf00      	nop
}
 800ac34:	bf00      	nop
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d81e      	bhi.n	800ac92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	88db      	ldrh	r3, [r3, #6]
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d004      	beq.n	800ac66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f890 	bl	800ad84 <USBD_CtlError>
        break;
 800ac64:	e01a      	b.n	800ac9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d005      	beq.n	800ac82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	f043 0202 	orr.w	r2, r3, #2
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	330c      	adds	r3, #12
 800ac86:	2202      	movs	r2, #2
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f8eb 	bl	800ae66 <USBD_CtlSendData>
      break;
 800ac90:	e004      	b.n	800ac9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ac92:	6839      	ldr	r1, [r7, #0]
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f875 	bl	800ad84 <USBD_CtlError>
      break;
 800ac9a:	bf00      	nop
  }
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	885b      	ldrh	r3, [r3, #2]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d106      	bne.n	800acc4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f92b 	bl	800af1a <USBD_CtlSendStatus>
  }
}
 800acc4:	bf00      	nop
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	3b01      	subs	r3, #1
 800ace0:	2b02      	cmp	r3, #2
 800ace2:	d80b      	bhi.n	800acfc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	885b      	ldrh	r3, [r3, #2]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d10c      	bne.n	800ad06 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 f910 	bl	800af1a <USBD_CtlSendStatus>
      }
      break;
 800acfa:	e004      	b.n	800ad06 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f840 	bl	800ad84 <USBD_CtlError>
      break;
 800ad04:	e000      	b.n	800ad08 <USBD_ClrFeature+0x3c>
      break;
 800ad06:	bf00      	nop
  }
}
 800ad08:	bf00      	nop
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	781a      	ldrb	r2, [r3, #0]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	781a      	ldrb	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	3301      	adds	r3, #1
 800ad38:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f7ff fabb 	bl	800a2b6 <SWAPBYTE>
 800ad40:	4603      	mov	r3, r0
 800ad42:	461a      	mov	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3301      	adds	r3, #1
 800ad52:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f7ff faae 	bl	800a2b6 <SWAPBYTE>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	3301      	adds	r3, #1
 800ad66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f7ff faa1 	bl	800a2b6 <SWAPBYTE>
 800ad74:	4603      	mov	r3, r0
 800ad76:	461a      	mov	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	80da      	strh	r2, [r3, #6]
}
 800ad7c:	bf00      	nop
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad8e:	2180      	movs	r1, #128	; 0x80
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 fce5 	bl	800b760 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad96:	2100      	movs	r1, #0
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fce1 	bl	800b760 <USBD_LL_StallEP>
}
 800ad9e:	bf00      	nop
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b086      	sub	sp, #24
 800adaa:	af00      	add	r7, sp, #0
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	60b9      	str	r1, [r7, #8]
 800adb0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800adb2:	2300      	movs	r3, #0
 800adb4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d036      	beq.n	800ae2a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800adc0:	6938      	ldr	r0, [r7, #16]
 800adc2:	f000 f836 	bl	800ae32 <USBD_GetLen>
 800adc6:	4603      	mov	r3, r0
 800adc8:	3301      	adds	r3, #1
 800adca:	b29b      	uxth	r3, r3
 800adcc:	005b      	lsls	r3, r3, #1
 800adce:	b29a      	uxth	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800add4:	7dfb      	ldrb	r3, [r7, #23]
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	4413      	add	r3, r2
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	7812      	ldrb	r2, [r2, #0]
 800adde:	701a      	strb	r2, [r3, #0]
  idx++;
 800ade0:	7dfb      	ldrb	r3, [r7, #23]
 800ade2:	3301      	adds	r3, #1
 800ade4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ade6:	7dfb      	ldrb	r3, [r7, #23]
 800ade8:	68ba      	ldr	r2, [r7, #8]
 800adea:	4413      	add	r3, r2
 800adec:	2203      	movs	r2, #3
 800adee:	701a      	strb	r2, [r3, #0]
  idx++;
 800adf0:	7dfb      	ldrb	r3, [r7, #23]
 800adf2:	3301      	adds	r3, #1
 800adf4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800adf6:	e013      	b.n	800ae20 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800adf8:	7dfb      	ldrb	r3, [r7, #23]
 800adfa:	68ba      	ldr	r2, [r7, #8]
 800adfc:	4413      	add	r3, r2
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	7812      	ldrb	r2, [r2, #0]
 800ae02:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	3301      	adds	r3, #1
 800ae08:	613b      	str	r3, [r7, #16]
    idx++;
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ae10:	7dfb      	ldrb	r3, [r7, #23]
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	4413      	add	r3, r2
 800ae16:	2200      	movs	r2, #0
 800ae18:	701a      	strb	r2, [r3, #0]
    idx++;
 800ae1a:	7dfb      	ldrb	r3, [r7, #23]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1e7      	bne.n	800adf8 <USBD_GetString+0x52>
 800ae28:	e000      	b.n	800ae2c <USBD_GetString+0x86>
    return;
 800ae2a:	bf00      	nop
  }
}
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b085      	sub	sp, #20
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ae42:	e005      	b.n	800ae50 <USBD_GetLen+0x1e>
  {
    len++;
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
 800ae46:	3301      	adds	r3, #1
 800ae48:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1f5      	bne.n	800ae44 <USBD_GetLen+0x12>
  }

  return len;
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b084      	sub	sp, #16
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	60f8      	str	r0, [r7, #12]
 800ae6e:	60b9      	str	r1, [r7, #8]
 800ae70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2202      	movs	r2, #2
 800ae76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68ba      	ldr	r2, [r7, #8]
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f000 fcf0 	bl	800b872 <USBD_LL_Transmit>

  return USBD_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	68ba      	ldr	r2, [r7, #8]
 800aeac:	2100      	movs	r1, #0
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f000 fcdf 	bl	800b872 <USBD_LL_Transmit>

  return USBD_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b084      	sub	sp, #16
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	60f8      	str	r0, [r7, #12]
 800aec6:	60b9      	str	r1, [r7, #8]
 800aec8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2203      	movs	r2, #3
 800aece:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	2100      	movs	r1, #0
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f000 fce3 	bl	800b8b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	2100      	movs	r1, #0
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f000 fcd2 	bl	800b8b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b082      	sub	sp, #8
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2204      	movs	r2, #4
 800af26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af2a:	2300      	movs	r3, #0
 800af2c:	2200      	movs	r2, #0
 800af2e:	2100      	movs	r1, #0
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fc9e 	bl	800b872 <USBD_LL_Transmit>

  return USBD_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2205      	movs	r2, #5
 800af4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af50:	2300      	movs	r3, #0
 800af52:	2200      	movs	r2, #0
 800af54:	2100      	movs	r1, #0
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fcac 	bl	800b8b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
	...

0800af68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800af6c:	2200      	movs	r2, #0
 800af6e:	4912      	ldr	r1, [pc, #72]	; (800afb8 <MX_USB_DEVICE_Init+0x50>)
 800af70:	4812      	ldr	r0, [pc, #72]	; (800afbc <MX_USB_DEVICE_Init+0x54>)
 800af72:	f7fe fe8f 	bl	8009c94 <USBD_Init>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d001      	beq.n	800af80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800af7c:	f7f8 fc46 	bl	800380c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800af80:	490f      	ldr	r1, [pc, #60]	; (800afc0 <MX_USB_DEVICE_Init+0x58>)
 800af82:	480e      	ldr	r0, [pc, #56]	; (800afbc <MX_USB_DEVICE_Init+0x54>)
 800af84:	f7fe feb6 	bl	8009cf4 <USBD_RegisterClass>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800af8e:	f7f8 fc3d 	bl	800380c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800af92:	490c      	ldr	r1, [pc, #48]	; (800afc4 <MX_USB_DEVICE_Init+0x5c>)
 800af94:	4809      	ldr	r0, [pc, #36]	; (800afbc <MX_USB_DEVICE_Init+0x54>)
 800af96:	f7fe fdd7 	bl	8009b48 <USBD_CDC_RegisterInterface>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d001      	beq.n	800afa4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800afa0:	f7f8 fc34 	bl	800380c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800afa4:	4805      	ldr	r0, [pc, #20]	; (800afbc <MX_USB_DEVICE_Init+0x54>)
 800afa6:	f7fe fecc 	bl	8009d42 <USBD_Start>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800afb0:	f7f8 fc2c 	bl	800380c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800afb4:	bf00      	nop
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	20000138 	.word	0x20000138
 800afbc:	20000b70 	.word	0x20000b70
 800afc0:	20000020 	.word	0x20000020
 800afc4:	20000124 	.word	0x20000124

0800afc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800afcc:	2200      	movs	r2, #0
 800afce:	4905      	ldr	r1, [pc, #20]	; (800afe4 <CDC_Init_FS+0x1c>)
 800afd0:	4805      	ldr	r0, [pc, #20]	; (800afe8 <CDC_Init_FS+0x20>)
 800afd2:	f7fe fdce 	bl	8009b72 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800afd6:	4905      	ldr	r1, [pc, #20]	; (800afec <CDC_Init_FS+0x24>)
 800afd8:	4803      	ldr	r0, [pc, #12]	; (800afe8 <CDC_Init_FS+0x20>)
 800afda:	f7fe fde8 	bl	8009bae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800afde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	20001640 	.word	0x20001640
 800afe8:	20000b70 	.word	0x20000b70
 800afec:	20000e40 	.word	0x20000e40

0800aff0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aff0:	b480      	push	{r7}
 800aff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aff4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	4603      	mov	r3, r0
 800b008:	6039      	str	r1, [r7, #0]
 800b00a:	71fb      	strb	r3, [r7, #7]
 800b00c:	4613      	mov	r3, r2
 800b00e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b010:	79fb      	ldrb	r3, [r7, #7]
 800b012:	2b23      	cmp	r3, #35	; 0x23
 800b014:	d84a      	bhi.n	800b0ac <CDC_Control_FS+0xac>
 800b016:	a201      	add	r2, pc, #4	; (adr r2, 800b01c <CDC_Control_FS+0x1c>)
 800b018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01c:	0800b0ad 	.word	0x0800b0ad
 800b020:	0800b0ad 	.word	0x0800b0ad
 800b024:	0800b0ad 	.word	0x0800b0ad
 800b028:	0800b0ad 	.word	0x0800b0ad
 800b02c:	0800b0ad 	.word	0x0800b0ad
 800b030:	0800b0ad 	.word	0x0800b0ad
 800b034:	0800b0ad 	.word	0x0800b0ad
 800b038:	0800b0ad 	.word	0x0800b0ad
 800b03c:	0800b0ad 	.word	0x0800b0ad
 800b040:	0800b0ad 	.word	0x0800b0ad
 800b044:	0800b0ad 	.word	0x0800b0ad
 800b048:	0800b0ad 	.word	0x0800b0ad
 800b04c:	0800b0ad 	.word	0x0800b0ad
 800b050:	0800b0ad 	.word	0x0800b0ad
 800b054:	0800b0ad 	.word	0x0800b0ad
 800b058:	0800b0ad 	.word	0x0800b0ad
 800b05c:	0800b0ad 	.word	0x0800b0ad
 800b060:	0800b0ad 	.word	0x0800b0ad
 800b064:	0800b0ad 	.word	0x0800b0ad
 800b068:	0800b0ad 	.word	0x0800b0ad
 800b06c:	0800b0ad 	.word	0x0800b0ad
 800b070:	0800b0ad 	.word	0x0800b0ad
 800b074:	0800b0ad 	.word	0x0800b0ad
 800b078:	0800b0ad 	.word	0x0800b0ad
 800b07c:	0800b0ad 	.word	0x0800b0ad
 800b080:	0800b0ad 	.word	0x0800b0ad
 800b084:	0800b0ad 	.word	0x0800b0ad
 800b088:	0800b0ad 	.word	0x0800b0ad
 800b08c:	0800b0ad 	.word	0x0800b0ad
 800b090:	0800b0ad 	.word	0x0800b0ad
 800b094:	0800b0ad 	.word	0x0800b0ad
 800b098:	0800b0ad 	.word	0x0800b0ad
 800b09c:	0800b0ad 	.word	0x0800b0ad
 800b0a0:	0800b0ad 	.word	0x0800b0ad
 800b0a4:	0800b0ad 	.word	0x0800b0ad
 800b0a8:	0800b0ad 	.word	0x0800b0ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b0ac:	bf00      	nop
  }

  return (USBD_OK);
 800b0ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b0c6:	6879      	ldr	r1, [r7, #4]
 800b0c8:	4805      	ldr	r0, [pc, #20]	; (800b0e0 <CDC_Receive_FS+0x24>)
 800b0ca:	f7fe fd70 	bl	8009bae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b0ce:	4804      	ldr	r0, [pc, #16]	; (800b0e0 <CDC_Receive_FS+0x24>)
 800b0d0:	f7fe fdb6 	bl	8009c40 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b0d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	20000b70 	.word	0x20000b70

0800b0e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b0f4:	4b0d      	ldr	r3, [pc, #52]	; (800b12c <CDC_Transmit_FS+0x48>)
 800b0f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b102:	2b00      	cmp	r3, #0
 800b104:	d001      	beq.n	800b10a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b106:	2301      	movs	r3, #1
 800b108:	e00b      	b.n	800b122 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b10a:	887b      	ldrh	r3, [r7, #2]
 800b10c:	461a      	mov	r2, r3
 800b10e:	6879      	ldr	r1, [r7, #4]
 800b110:	4806      	ldr	r0, [pc, #24]	; (800b12c <CDC_Transmit_FS+0x48>)
 800b112:	f7fe fd2e 	bl	8009b72 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b116:	4805      	ldr	r0, [pc, #20]	; (800b12c <CDC_Transmit_FS+0x48>)
 800b118:	f7fe fd62 	bl	8009be0 <USBD_CDC_TransmitPacket>
 800b11c:	4603      	mov	r3, r0
 800b11e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b120:	7bfb      	ldrb	r3, [r7, #15]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	20000b70 	.word	0x20000b70

0800b130 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b130:	b480      	push	{r7}
 800b132:	b087      	sub	sp, #28
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	4613      	mov	r3, r2
 800b13c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b142:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b146:	4618      	mov	r0, r3
 800b148:	371c      	adds	r7, #28
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
	...

0800b154 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	4603      	mov	r3, r0
 800b15c:	6039      	str	r1, [r7, #0]
 800b15e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	2212      	movs	r2, #18
 800b164:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b166:	4b03      	ldr	r3, [pc, #12]	; (800b174 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b168:	4618      	mov	r0, r3
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr
 800b174:	20000154 	.word	0x20000154

0800b178 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	4603      	mov	r3, r0
 800b180:	6039      	str	r1, [r7, #0]
 800b182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	2204      	movs	r2, #4
 800b188:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b18a:	4b03      	ldr	r3, [pc, #12]	; (800b198 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr
 800b198:	20000168 	.word	0x20000168

0800b19c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	6039      	str	r1, [r7, #0]
 800b1a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b1a8:	79fb      	ldrb	r3, [r7, #7]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d105      	bne.n	800b1ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	4907      	ldr	r1, [pc, #28]	; (800b1d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b1b2:	4808      	ldr	r0, [pc, #32]	; (800b1d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b1b4:	f7ff fdf7 	bl	800ada6 <USBD_GetString>
 800b1b8:	e004      	b.n	800b1c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	4904      	ldr	r1, [pc, #16]	; (800b1d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b1be:	4805      	ldr	r0, [pc, #20]	; (800b1d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b1c0:	f7ff fdf1 	bl	800ada6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1c4:	4b02      	ldr	r3, [pc, #8]	; (800b1d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20001e40 	.word	0x20001e40
 800b1d4:	0800d690 	.word	0x0800d690

0800b1d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	4603      	mov	r3, r0
 800b1e0:	6039      	str	r1, [r7, #0]
 800b1e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b1e4:	683a      	ldr	r2, [r7, #0]
 800b1e6:	4904      	ldr	r1, [pc, #16]	; (800b1f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b1e8:	4804      	ldr	r0, [pc, #16]	; (800b1fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b1ea:	f7ff fddc 	bl	800ada6 <USBD_GetString>
  return USBD_StrDesc;
 800b1ee:	4b02      	ldr	r3, [pc, #8]	; (800b1f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	20001e40 	.word	0x20001e40
 800b1fc:	0800d698 	.word	0x0800d698

0800b200 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	4603      	mov	r3, r0
 800b208:	6039      	str	r1, [r7, #0]
 800b20a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	221a      	movs	r2, #26
 800b210:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b212:	f000 f843 	bl	800b29c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b216:	4b02      	ldr	r3, [pc, #8]	; (800b220 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	2000016c 	.word	0x2000016c

0800b224 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	4603      	mov	r3, r0
 800b22c:	6039      	str	r1, [r7, #0]
 800b22e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b230:	79fb      	ldrb	r3, [r7, #7]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d105      	bne.n	800b242 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b236:	683a      	ldr	r2, [r7, #0]
 800b238:	4907      	ldr	r1, [pc, #28]	; (800b258 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b23a:	4808      	ldr	r0, [pc, #32]	; (800b25c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b23c:	f7ff fdb3 	bl	800ada6 <USBD_GetString>
 800b240:	e004      	b.n	800b24c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b242:	683a      	ldr	r2, [r7, #0]
 800b244:	4904      	ldr	r1, [pc, #16]	; (800b258 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b246:	4805      	ldr	r0, [pc, #20]	; (800b25c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b248:	f7ff fdad 	bl	800ada6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b24c:	4b02      	ldr	r3, [pc, #8]	; (800b258 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3708      	adds	r7, #8
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	20001e40 	.word	0x20001e40
 800b25c:	0800d6ac 	.word	0x0800d6ac

0800b260 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	4603      	mov	r3, r0
 800b268:	6039      	str	r1, [r7, #0]
 800b26a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b26c:	79fb      	ldrb	r3, [r7, #7]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d105      	bne.n	800b27e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b272:	683a      	ldr	r2, [r7, #0]
 800b274:	4907      	ldr	r1, [pc, #28]	; (800b294 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b276:	4808      	ldr	r0, [pc, #32]	; (800b298 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b278:	f7ff fd95 	bl	800ada6 <USBD_GetString>
 800b27c:	e004      	b.n	800b288 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	4904      	ldr	r1, [pc, #16]	; (800b294 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b282:	4805      	ldr	r0, [pc, #20]	; (800b298 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b284:	f7ff fd8f 	bl	800ada6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b288:	4b02      	ldr	r3, [pc, #8]	; (800b294 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3708      	adds	r7, #8
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	20001e40 	.word	0x20001e40
 800b298:	0800d6b8 	.word	0x0800d6b8

0800b29c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b2a2:	4b0f      	ldr	r3, [pc, #60]	; (800b2e0 <Get_SerialNum+0x44>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b2a8:	4b0e      	ldr	r3, [pc, #56]	; (800b2e4 <Get_SerialNum+0x48>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b2ae:	4b0e      	ldr	r3, [pc, #56]	; (800b2e8 <Get_SerialNum+0x4c>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d009      	beq.n	800b2d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b2c2:	2208      	movs	r2, #8
 800b2c4:	4909      	ldr	r1, [pc, #36]	; (800b2ec <Get_SerialNum+0x50>)
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f000 f814 	bl	800b2f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b2cc:	2204      	movs	r2, #4
 800b2ce:	4908      	ldr	r1, [pc, #32]	; (800b2f0 <Get_SerialNum+0x54>)
 800b2d0:	68b8      	ldr	r0, [r7, #8]
 800b2d2:	f000 f80f 	bl	800b2f4 <IntToUnicode>
  }
}
 800b2d6:	bf00      	nop
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	1fff7a10 	.word	0x1fff7a10
 800b2e4:	1fff7a14 	.word	0x1fff7a14
 800b2e8:	1fff7a18 	.word	0x1fff7a18
 800b2ec:	2000016e 	.word	0x2000016e
 800b2f0:	2000017e 	.word	0x2000017e

0800b2f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b087      	sub	sp, #28
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	4613      	mov	r3, r2
 800b300:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b302:	2300      	movs	r3, #0
 800b304:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b306:	2300      	movs	r3, #0
 800b308:	75fb      	strb	r3, [r7, #23]
 800b30a:	e027      	b.n	800b35c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	0f1b      	lsrs	r3, r3, #28
 800b310:	2b09      	cmp	r3, #9
 800b312:	d80b      	bhi.n	800b32c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	0f1b      	lsrs	r3, r3, #28
 800b318:	b2da      	uxtb	r2, r3
 800b31a:	7dfb      	ldrb	r3, [r7, #23]
 800b31c:	005b      	lsls	r3, r3, #1
 800b31e:	4619      	mov	r1, r3
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	440b      	add	r3, r1
 800b324:	3230      	adds	r2, #48	; 0x30
 800b326:	b2d2      	uxtb	r2, r2
 800b328:	701a      	strb	r2, [r3, #0]
 800b32a:	e00a      	b.n	800b342 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	0f1b      	lsrs	r3, r3, #28
 800b330:	b2da      	uxtb	r2, r3
 800b332:	7dfb      	ldrb	r3, [r7, #23]
 800b334:	005b      	lsls	r3, r3, #1
 800b336:	4619      	mov	r1, r3
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	440b      	add	r3, r1
 800b33c:	3237      	adds	r2, #55	; 0x37
 800b33e:	b2d2      	uxtb	r2, r2
 800b340:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	011b      	lsls	r3, r3, #4
 800b346:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b348:	7dfb      	ldrb	r3, [r7, #23]
 800b34a:	005b      	lsls	r3, r3, #1
 800b34c:	3301      	adds	r3, #1
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	4413      	add	r3, r2
 800b352:	2200      	movs	r2, #0
 800b354:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b356:	7dfb      	ldrb	r3, [r7, #23]
 800b358:	3301      	adds	r3, #1
 800b35a:	75fb      	strb	r3, [r7, #23]
 800b35c:	7dfa      	ldrb	r2, [r7, #23]
 800b35e:	79fb      	ldrb	r3, [r7, #7]
 800b360:	429a      	cmp	r2, r3
 800b362:	d3d3      	bcc.n	800b30c <IntToUnicode+0x18>
  }
}
 800b364:	bf00      	nop
 800b366:	bf00      	nop
 800b368:	371c      	adds	r7, #28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
	...

0800b374 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b08a      	sub	sp, #40	; 0x28
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b37c:	f107 0314 	add.w	r3, r7, #20
 800b380:	2200      	movs	r2, #0
 800b382:	601a      	str	r2, [r3, #0]
 800b384:	605a      	str	r2, [r3, #4]
 800b386:	609a      	str	r2, [r3, #8]
 800b388:	60da      	str	r2, [r3, #12]
 800b38a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b394:	d147      	bne.n	800b426 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b396:	2300      	movs	r3, #0
 800b398:	613b      	str	r3, [r7, #16]
 800b39a:	4b25      	ldr	r3, [pc, #148]	; (800b430 <HAL_PCD_MspInit+0xbc>)
 800b39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b39e:	4a24      	ldr	r2, [pc, #144]	; (800b430 <HAL_PCD_MspInit+0xbc>)
 800b3a0:	f043 0301 	orr.w	r3, r3, #1
 800b3a4:	6313      	str	r3, [r2, #48]	; 0x30
 800b3a6:	4b22      	ldr	r3, [pc, #136]	; (800b430 <HAL_PCD_MspInit+0xbc>)
 800b3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	613b      	str	r3, [r7, #16]
 800b3b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b3b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b3c0:	f107 0314 	add.w	r3, r7, #20
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	481b      	ldr	r0, [pc, #108]	; (800b434 <HAL_PCD_MspInit+0xc0>)
 800b3c8:	f7f9 f8c4 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b3cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b3d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3da:	2303      	movs	r3, #3
 800b3dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b3de:	230a      	movs	r3, #10
 800b3e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3e2:	f107 0314 	add.w	r3, r7, #20
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	4812      	ldr	r0, [pc, #72]	; (800b434 <HAL_PCD_MspInit+0xc0>)
 800b3ea:	f7f9 f8b3 	bl	8004554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b3ee:	4b10      	ldr	r3, [pc, #64]	; (800b430 <HAL_PCD_MspInit+0xbc>)
 800b3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f2:	4a0f      	ldr	r2, [pc, #60]	; (800b430 <HAL_PCD_MspInit+0xbc>)
 800b3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3f8:	6353      	str	r3, [r2, #52]	; 0x34
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60fb      	str	r3, [r7, #12]
 800b3fe:	4b0c      	ldr	r3, [pc, #48]	; (800b430 <HAL_PCD_MspInit+0xbc>)
 800b400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b402:	4a0b      	ldr	r2, [pc, #44]	; (800b430 <HAL_PCD_MspInit+0xbc>)
 800b404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b408:	6453      	str	r3, [r2, #68]	; 0x44
 800b40a:	4b09      	ldr	r3, [pc, #36]	; (800b430 <HAL_PCD_MspInit+0xbc>)
 800b40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b40e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b412:	60fb      	str	r3, [r7, #12]
 800b414:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b416:	2200      	movs	r2, #0
 800b418:	2100      	movs	r1, #0
 800b41a:	2043      	movs	r0, #67	; 0x43
 800b41c:	f7f8 fd79 	bl	8003f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b420:	2043      	movs	r0, #67	; 0x43
 800b422:	f7f8 fd92 	bl	8003f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b426:	bf00      	nop
 800b428:	3728      	adds	r7, #40	; 0x28
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	40023800 	.word	0x40023800
 800b434:	40020000 	.word	0x40020000

0800b438 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b44c:	4619      	mov	r1, r3
 800b44e:	4610      	mov	r0, r2
 800b450:	f7fe fcc2 	bl	8009dd8 <USBD_LL_SetupStage>
}
 800b454:	bf00      	nop
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	460b      	mov	r3, r1
 800b466:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b46e:	78fa      	ldrb	r2, [r7, #3]
 800b470:	6879      	ldr	r1, [r7, #4]
 800b472:	4613      	mov	r3, r2
 800b474:	00db      	lsls	r3, r3, #3
 800b476:	1a9b      	subs	r3, r3, r2
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	440b      	add	r3, r1
 800b47c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	78fb      	ldrb	r3, [r7, #3]
 800b484:	4619      	mov	r1, r3
 800b486:	f7fe fcfc 	bl	8009e82 <USBD_LL_DataOutStage>
}
 800b48a:	bf00      	nop
 800b48c:	3708      	adds	r7, #8
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b082      	sub	sp, #8
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
 800b49a:	460b      	mov	r3, r1
 800b49c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b4a4:	78fa      	ldrb	r2, [r7, #3]
 800b4a6:	6879      	ldr	r1, [r7, #4]
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	00db      	lsls	r3, r3, #3
 800b4ac:	1a9b      	subs	r3, r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	440b      	add	r3, r1
 800b4b2:	3348      	adds	r3, #72	; 0x48
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	78fb      	ldrb	r3, [r7, #3]
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	f7fe fd45 	bl	8009f48 <USBD_LL_DataInStage>
}
 800b4be:	bf00      	nop
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b082      	sub	sp, #8
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7fe fe59 	bl	800a18c <USBD_LL_SOF>
}
 800b4da:	bf00      	nop
 800b4dc:	3708      	adds	r7, #8
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b084      	sub	sp, #16
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d001      	beq.n	800b4fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b4f6:	f7f8 f989 	bl	800380c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b500:	7bfa      	ldrb	r2, [r7, #15]
 800b502:	4611      	mov	r1, r2
 800b504:	4618      	mov	r0, r3
 800b506:	f7fe fe03 	bl	800a110 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b510:	4618      	mov	r0, r3
 800b512:	f7fe fdaf 	bl	800a074 <USBD_LL_Reset>
}
 800b516:	bf00      	nop
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
	...

0800b520 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fe fdfe 	bl	800a130 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	6812      	ldr	r2, [r2, #0]
 800b542:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b546:	f043 0301 	orr.w	r3, r3, #1
 800b54a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a1b      	ldr	r3, [r3, #32]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d005      	beq.n	800b560 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b554:	4b04      	ldr	r3, [pc, #16]	; (800b568 <HAL_PCD_SuspendCallback+0x48>)
 800b556:	691b      	ldr	r3, [r3, #16]
 800b558:	4a03      	ldr	r2, [pc, #12]	; (800b568 <HAL_PCD_SuspendCallback+0x48>)
 800b55a:	f043 0306 	orr.w	r3, r3, #6
 800b55e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b560:	bf00      	nop
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	e000ed00 	.word	0xe000ed00

0800b56c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe fdee 	bl	800a15c <USBD_LL_Resume>
}
 800b580:	bf00      	nop
 800b582:	3708      	adds	r7, #8
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	460b      	mov	r3, r1
 800b592:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b59a:	78fa      	ldrb	r2, [r7, #3]
 800b59c:	4611      	mov	r1, r2
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fe fe3c 	bl	800a21c <USBD_LL_IsoOUTIncomplete>
}
 800b5a4:	bf00      	nop
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b5be:	78fa      	ldrb	r2, [r7, #3]
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fe fe04 	bl	800a1d0 <USBD_LL_IsoINIncomplete>
}
 800b5c8:	bf00      	nop
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fe fe42 	bl	800a268 <USBD_LL_DevConnected>
}
 800b5e4:	bf00      	nop
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fe fe3f 	bl	800a27e <USBD_LL_DevDisconnected>
}
 800b600:	bf00      	nop
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d13c      	bne.n	800b692 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b618:	4a20      	ldr	r2, [pc, #128]	; (800b69c <USBD_LL_Init+0x94>)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a1e      	ldr	r2, [pc, #120]	; (800b69c <USBD_LL_Init+0x94>)
 800b624:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b628:	4b1c      	ldr	r3, [pc, #112]	; (800b69c <USBD_LL_Init+0x94>)
 800b62a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b62e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b630:	4b1a      	ldr	r3, [pc, #104]	; (800b69c <USBD_LL_Init+0x94>)
 800b632:	2204      	movs	r2, #4
 800b634:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b636:	4b19      	ldr	r3, [pc, #100]	; (800b69c <USBD_LL_Init+0x94>)
 800b638:	2202      	movs	r2, #2
 800b63a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b63c:	4b17      	ldr	r3, [pc, #92]	; (800b69c <USBD_LL_Init+0x94>)
 800b63e:	2200      	movs	r2, #0
 800b640:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b642:	4b16      	ldr	r3, [pc, #88]	; (800b69c <USBD_LL_Init+0x94>)
 800b644:	2202      	movs	r2, #2
 800b646:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b648:	4b14      	ldr	r3, [pc, #80]	; (800b69c <USBD_LL_Init+0x94>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b64e:	4b13      	ldr	r3, [pc, #76]	; (800b69c <USBD_LL_Init+0x94>)
 800b650:	2200      	movs	r2, #0
 800b652:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b654:	4b11      	ldr	r3, [pc, #68]	; (800b69c <USBD_LL_Init+0x94>)
 800b656:	2200      	movs	r2, #0
 800b658:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b65a:	4b10      	ldr	r3, [pc, #64]	; (800b69c <USBD_LL_Init+0x94>)
 800b65c:	2201      	movs	r2, #1
 800b65e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b660:	4b0e      	ldr	r3, [pc, #56]	; (800b69c <USBD_LL_Init+0x94>)
 800b662:	2200      	movs	r2, #0
 800b664:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b666:	480d      	ldr	r0, [pc, #52]	; (800b69c <USBD_LL_Init+0x94>)
 800b668:	f7fa f8e9 	bl	800583e <HAL_PCD_Init>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d001      	beq.n	800b676 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b672:	f7f8 f8cb 	bl	800380c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b676:	2180      	movs	r1, #128	; 0x80
 800b678:	4808      	ldr	r0, [pc, #32]	; (800b69c <USBD_LL_Init+0x94>)
 800b67a:	f7fb fa46 	bl	8006b0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b67e:	2240      	movs	r2, #64	; 0x40
 800b680:	2100      	movs	r1, #0
 800b682:	4806      	ldr	r0, [pc, #24]	; (800b69c <USBD_LL_Init+0x94>)
 800b684:	f7fb f9fa 	bl	8006a7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b688:	2280      	movs	r2, #128	; 0x80
 800b68a:	2101      	movs	r1, #1
 800b68c:	4803      	ldr	r0, [pc, #12]	; (800b69c <USBD_LL_Init+0x94>)
 800b68e:	f7fb f9f5 	bl	8006a7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	20002040 	.word	0x20002040

0800b6a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7fa f9de 	bl	8005a78 <HAL_PCD_Start>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6c0:	7bfb      	ldrb	r3, [r7, #15]
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f000 f942 	bl	800b94c <USBD_Get_USB_Status>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b084      	sub	sp, #16
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	4608      	mov	r0, r1
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	70fb      	strb	r3, [r7, #3]
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	70bb      	strb	r3, [r7, #2]
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b6fe:	78bb      	ldrb	r3, [r7, #2]
 800b700:	883a      	ldrh	r2, [r7, #0]
 800b702:	78f9      	ldrb	r1, [r7, #3]
 800b704:	f7fa fdc2 	bl	800628c <HAL_PCD_EP_Open>
 800b708:	4603      	mov	r3, r0
 800b70a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 f91c 	bl	800b94c <USBD_Get_USB_Status>
 800b714:	4603      	mov	r3, r0
 800b716:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b718:	7bbb      	ldrb	r3, [r7, #14]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b084      	sub	sp, #16
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	460b      	mov	r3, r1
 800b72c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b72e:	2300      	movs	r3, #0
 800b730:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b732:	2300      	movs	r3, #0
 800b734:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b73c:	78fa      	ldrb	r2, [r7, #3]
 800b73e:	4611      	mov	r1, r2
 800b740:	4618      	mov	r0, r3
 800b742:	f7fa fe0b 	bl	800635c <HAL_PCD_EP_Close>
 800b746:	4603      	mov	r3, r0
 800b748:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f000 f8fd 	bl	800b94c <USBD_Get_USB_Status>
 800b752:	4603      	mov	r3, r0
 800b754:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b756:	7bbb      	ldrb	r3, [r7, #14]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	460b      	mov	r3, r1
 800b76a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b76c:	2300      	movs	r3, #0
 800b76e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b770:	2300      	movs	r3, #0
 800b772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b77a:	78fa      	ldrb	r2, [r7, #3]
 800b77c:	4611      	mov	r1, r2
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fa fee3 	bl	800654a <HAL_PCD_EP_SetStall>
 800b784:	4603      	mov	r3, r0
 800b786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b788:	7bfb      	ldrb	r3, [r7, #15]
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 f8de 	bl	800b94c <USBD_Get_USB_Status>
 800b790:	4603      	mov	r3, r0
 800b792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b794:	7bbb      	ldrb	r3, [r7, #14]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b084      	sub	sp, #16
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b7b8:	78fa      	ldrb	r2, [r7, #3]
 800b7ba:	4611      	mov	r1, r2
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7fa ff28 	bl	8006612 <HAL_PCD_EP_ClrStall>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7c6:	7bfb      	ldrb	r3, [r7, #15]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f000 f8bf 	bl	800b94c <USBD_Get_USB_Status>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b7ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b7f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	da0b      	bge.n	800b810 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b7f8:	78fb      	ldrb	r3, [r7, #3]
 800b7fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b7fe:	68f9      	ldr	r1, [r7, #12]
 800b800:	4613      	mov	r3, r2
 800b802:	00db      	lsls	r3, r3, #3
 800b804:	1a9b      	subs	r3, r3, r2
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	440b      	add	r3, r1
 800b80a:	333e      	adds	r3, #62	; 0x3e
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	e00b      	b.n	800b828 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b810:	78fb      	ldrb	r3, [r7, #3]
 800b812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b816:	68f9      	ldr	r1, [r7, #12]
 800b818:	4613      	mov	r3, r2
 800b81a:	00db      	lsls	r3, r3, #3
 800b81c:	1a9b      	subs	r3, r3, r2
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	440b      	add	r3, r1
 800b822:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b826:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	460b      	mov	r3, r1
 800b83e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b840:	2300      	movs	r3, #0
 800b842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b844:	2300      	movs	r3, #0
 800b846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b84e:	78fa      	ldrb	r2, [r7, #3]
 800b850:	4611      	mov	r1, r2
 800b852:	4618      	mov	r0, r3
 800b854:	f7fa fcf5 	bl	8006242 <HAL_PCD_SetAddress>
 800b858:	4603      	mov	r3, r0
 800b85a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 f874 	bl	800b94c <USBD_Get_USB_Status>
 800b864:	4603      	mov	r3, r0
 800b866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b868:	7bbb      	ldrb	r3, [r7, #14]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b086      	sub	sp, #24
 800b876:	af00      	add	r7, sp, #0
 800b878:	60f8      	str	r0, [r7, #12]
 800b87a:	607a      	str	r2, [r7, #4]
 800b87c:	603b      	str	r3, [r7, #0]
 800b87e:	460b      	mov	r3, r1
 800b880:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b882:	2300      	movs	r3, #0
 800b884:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b886:	2300      	movs	r3, #0
 800b888:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b890:	7af9      	ldrb	r1, [r7, #11]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	f7fa fe0e 	bl	80064b6 <HAL_PCD_EP_Transmit>
 800b89a:	4603      	mov	r3, r0
 800b89c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b89e:	7dfb      	ldrb	r3, [r7, #23]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f000 f853 	bl	800b94c <USBD_Get_USB_Status>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b8aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3718      	adds	r7, #24
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	607a      	str	r2, [r7, #4]
 800b8be:	603b      	str	r3, [r7, #0]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b8d2:	7af9      	ldrb	r1, [r7, #11]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	f7fa fd8a 	bl	80063f0 <HAL_PCD_EP_Receive>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8e0:	7dfb      	ldrb	r3, [r7, #23]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 f832 	bl	800b94c <USBD_Get_USB_Status>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b8ec:	7dbb      	ldrb	r3, [r7, #22]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3718      	adds	r7, #24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b082      	sub	sp, #8
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	460b      	mov	r3, r1
 800b900:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b908:	78fa      	ldrb	r2, [r7, #3]
 800b90a:	4611      	mov	r1, r2
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fa fdba 	bl	8006486 <HAL_PCD_EP_GetRxCount>
 800b912:	4603      	mov	r3, r0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3708      	adds	r7, #8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b924:	4b03      	ldr	r3, [pc, #12]	; (800b934 <USBD_static_malloc+0x18>)
}
 800b926:	4618      	mov	r0, r3
 800b928:	370c      	adds	r7, #12
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	20000228 	.word	0x20000228

0800b938 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]

}
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	4603      	mov	r3, r0
 800b954:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b956:	2300      	movs	r3, #0
 800b958:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b95a:	79fb      	ldrb	r3, [r7, #7]
 800b95c:	2b03      	cmp	r3, #3
 800b95e:	d817      	bhi.n	800b990 <USBD_Get_USB_Status+0x44>
 800b960:	a201      	add	r2, pc, #4	; (adr r2, 800b968 <USBD_Get_USB_Status+0x1c>)
 800b962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b966:	bf00      	nop
 800b968:	0800b979 	.word	0x0800b979
 800b96c:	0800b97f 	.word	0x0800b97f
 800b970:	0800b985 	.word	0x0800b985
 800b974:	0800b98b 	.word	0x0800b98b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	73fb      	strb	r3, [r7, #15]
    break;
 800b97c:	e00b      	b.n	800b996 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b97e:	2303      	movs	r3, #3
 800b980:	73fb      	strb	r3, [r7, #15]
    break;
 800b982:	e008      	b.n	800b996 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b984:	2301      	movs	r3, #1
 800b986:	73fb      	strb	r3, [r7, #15]
    break;
 800b988:	e005      	b.n	800b996 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b98a:	2303      	movs	r3, #3
 800b98c:	73fb      	strb	r3, [r7, #15]
    break;
 800b98e:	e002      	b.n	800b996 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b990:	2303      	movs	r3, #3
 800b992:	73fb      	strb	r3, [r7, #15]
    break;
 800b994:	bf00      	nop
  }
  return usb_status;
 800b996:	7bfb      	ldrb	r3, [r7, #15]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3714      	adds	r7, #20
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <__errno>:
 800b9a4:	4b01      	ldr	r3, [pc, #4]	; (800b9ac <__errno+0x8>)
 800b9a6:	6818      	ldr	r0, [r3, #0]
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	20000188 	.word	0x20000188

0800b9b0 <__libc_init_array>:
 800b9b0:	b570      	push	{r4, r5, r6, lr}
 800b9b2:	4d0d      	ldr	r5, [pc, #52]	; (800b9e8 <__libc_init_array+0x38>)
 800b9b4:	4c0d      	ldr	r4, [pc, #52]	; (800b9ec <__libc_init_array+0x3c>)
 800b9b6:	1b64      	subs	r4, r4, r5
 800b9b8:	10a4      	asrs	r4, r4, #2
 800b9ba:	2600      	movs	r6, #0
 800b9bc:	42a6      	cmp	r6, r4
 800b9be:	d109      	bne.n	800b9d4 <__libc_init_array+0x24>
 800b9c0:	4d0b      	ldr	r5, [pc, #44]	; (800b9f0 <__libc_init_array+0x40>)
 800b9c2:	4c0c      	ldr	r4, [pc, #48]	; (800b9f4 <__libc_init_array+0x44>)
 800b9c4:	f001 fe56 	bl	800d674 <_init>
 800b9c8:	1b64      	subs	r4, r4, r5
 800b9ca:	10a4      	asrs	r4, r4, #2
 800b9cc:	2600      	movs	r6, #0
 800b9ce:	42a6      	cmp	r6, r4
 800b9d0:	d105      	bne.n	800b9de <__libc_init_array+0x2e>
 800b9d2:	bd70      	pop	{r4, r5, r6, pc}
 800b9d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9d8:	4798      	blx	r3
 800b9da:	3601      	adds	r6, #1
 800b9dc:	e7ee      	b.n	800b9bc <__libc_init_array+0xc>
 800b9de:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9e2:	4798      	blx	r3
 800b9e4:	3601      	adds	r6, #1
 800b9e6:	e7f2      	b.n	800b9ce <__libc_init_array+0x1e>
 800b9e8:	0800d940 	.word	0x0800d940
 800b9ec:	0800d940 	.word	0x0800d940
 800b9f0:	0800d940 	.word	0x0800d940
 800b9f4:	0800d944 	.word	0x0800d944

0800b9f8 <memset>:
 800b9f8:	4402      	add	r2, r0
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d100      	bne.n	800ba02 <memset+0xa>
 800ba00:	4770      	bx	lr
 800ba02:	f803 1b01 	strb.w	r1, [r3], #1
 800ba06:	e7f9      	b.n	800b9fc <memset+0x4>

0800ba08 <cos>:
 800ba08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba0a:	ec53 2b10 	vmov	r2, r3, d0
 800ba0e:	4824      	ldr	r0, [pc, #144]	; (800baa0 <cos+0x98>)
 800ba10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ba14:	4281      	cmp	r1, r0
 800ba16:	dc06      	bgt.n	800ba26 <cos+0x1e>
 800ba18:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800ba98 <cos+0x90>
 800ba1c:	f000 fea8 	bl	800c770 <__kernel_cos>
 800ba20:	ec51 0b10 	vmov	r0, r1, d0
 800ba24:	e007      	b.n	800ba36 <cos+0x2e>
 800ba26:	481f      	ldr	r0, [pc, #124]	; (800baa4 <cos+0x9c>)
 800ba28:	4281      	cmp	r1, r0
 800ba2a:	dd09      	ble.n	800ba40 <cos+0x38>
 800ba2c:	ee10 0a10 	vmov	r0, s0
 800ba30:	4619      	mov	r1, r3
 800ba32:	f7f4 fbd5 	bl	80001e0 <__aeabi_dsub>
 800ba36:	ec41 0b10 	vmov	d0, r0, r1
 800ba3a:	b005      	add	sp, #20
 800ba3c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba40:	4668      	mov	r0, sp
 800ba42:	f000 fbd5 	bl	800c1f0 <__ieee754_rem_pio2>
 800ba46:	f000 0003 	and.w	r0, r0, #3
 800ba4a:	2801      	cmp	r0, #1
 800ba4c:	d007      	beq.n	800ba5e <cos+0x56>
 800ba4e:	2802      	cmp	r0, #2
 800ba50:	d012      	beq.n	800ba78 <cos+0x70>
 800ba52:	b9c0      	cbnz	r0, 800ba86 <cos+0x7e>
 800ba54:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba58:	ed9d 0b00 	vldr	d0, [sp]
 800ba5c:	e7de      	b.n	800ba1c <cos+0x14>
 800ba5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba62:	ed9d 0b00 	vldr	d0, [sp]
 800ba66:	f001 fa8b 	bl	800cf80 <__kernel_sin>
 800ba6a:	ec53 2b10 	vmov	r2, r3, d0
 800ba6e:	ee10 0a10 	vmov	r0, s0
 800ba72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ba76:	e7de      	b.n	800ba36 <cos+0x2e>
 800ba78:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba7c:	ed9d 0b00 	vldr	d0, [sp]
 800ba80:	f000 fe76 	bl	800c770 <__kernel_cos>
 800ba84:	e7f1      	b.n	800ba6a <cos+0x62>
 800ba86:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba8a:	ed9d 0b00 	vldr	d0, [sp]
 800ba8e:	2001      	movs	r0, #1
 800ba90:	f001 fa76 	bl	800cf80 <__kernel_sin>
 800ba94:	e7c4      	b.n	800ba20 <cos+0x18>
 800ba96:	bf00      	nop
	...
 800baa0:	3fe921fb 	.word	0x3fe921fb
 800baa4:	7fefffff 	.word	0x7fefffff

0800baa8 <sin>:
 800baa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800baaa:	ec53 2b10 	vmov	r2, r3, d0
 800baae:	4826      	ldr	r0, [pc, #152]	; (800bb48 <sin+0xa0>)
 800bab0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bab4:	4281      	cmp	r1, r0
 800bab6:	dc07      	bgt.n	800bac8 <sin+0x20>
 800bab8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800bb40 <sin+0x98>
 800babc:	2000      	movs	r0, #0
 800babe:	f001 fa5f 	bl	800cf80 <__kernel_sin>
 800bac2:	ec51 0b10 	vmov	r0, r1, d0
 800bac6:	e007      	b.n	800bad8 <sin+0x30>
 800bac8:	4820      	ldr	r0, [pc, #128]	; (800bb4c <sin+0xa4>)
 800baca:	4281      	cmp	r1, r0
 800bacc:	dd09      	ble.n	800bae2 <sin+0x3a>
 800bace:	ee10 0a10 	vmov	r0, s0
 800bad2:	4619      	mov	r1, r3
 800bad4:	f7f4 fb84 	bl	80001e0 <__aeabi_dsub>
 800bad8:	ec41 0b10 	vmov	d0, r0, r1
 800badc:	b005      	add	sp, #20
 800bade:	f85d fb04 	ldr.w	pc, [sp], #4
 800bae2:	4668      	mov	r0, sp
 800bae4:	f000 fb84 	bl	800c1f0 <__ieee754_rem_pio2>
 800bae8:	f000 0003 	and.w	r0, r0, #3
 800baec:	2801      	cmp	r0, #1
 800baee:	d008      	beq.n	800bb02 <sin+0x5a>
 800baf0:	2802      	cmp	r0, #2
 800baf2:	d00d      	beq.n	800bb10 <sin+0x68>
 800baf4:	b9d0      	cbnz	r0, 800bb2c <sin+0x84>
 800baf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bafa:	ed9d 0b00 	vldr	d0, [sp]
 800bafe:	2001      	movs	r0, #1
 800bb00:	e7dd      	b.n	800babe <sin+0x16>
 800bb02:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb06:	ed9d 0b00 	vldr	d0, [sp]
 800bb0a:	f000 fe31 	bl	800c770 <__kernel_cos>
 800bb0e:	e7d8      	b.n	800bac2 <sin+0x1a>
 800bb10:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb14:	ed9d 0b00 	vldr	d0, [sp]
 800bb18:	2001      	movs	r0, #1
 800bb1a:	f001 fa31 	bl	800cf80 <__kernel_sin>
 800bb1e:	ec53 2b10 	vmov	r2, r3, d0
 800bb22:	ee10 0a10 	vmov	r0, s0
 800bb26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bb2a:	e7d5      	b.n	800bad8 <sin+0x30>
 800bb2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb30:	ed9d 0b00 	vldr	d0, [sp]
 800bb34:	f000 fe1c 	bl	800c770 <__kernel_cos>
 800bb38:	e7f1      	b.n	800bb1e <sin+0x76>
 800bb3a:	bf00      	nop
 800bb3c:	f3af 8000 	nop.w
	...
 800bb48:	3fe921fb 	.word	0x3fe921fb
 800bb4c:	7fefffff 	.word	0x7fefffff

0800bb50 <asin>:
 800bb50:	b538      	push	{r3, r4, r5, lr}
 800bb52:	ed2d 8b02 	vpush	{d8}
 800bb56:	ec55 4b10 	vmov	r4, r5, d0
 800bb5a:	f000 f869 	bl	800bc30 <__ieee754_asin>
 800bb5e:	4b16      	ldr	r3, [pc, #88]	; (800bbb8 <asin+0x68>)
 800bb60:	eeb0 8a40 	vmov.f32	s16, s0
 800bb64:	eef0 8a60 	vmov.f32	s17, s1
 800bb68:	f993 3000 	ldrsb.w	r3, [r3]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	d01c      	beq.n	800bbaa <asin+0x5a>
 800bb70:	4622      	mov	r2, r4
 800bb72:	462b      	mov	r3, r5
 800bb74:	4620      	mov	r0, r4
 800bb76:	4629      	mov	r1, r5
 800bb78:	f7f4 ff84 	bl	8000a84 <__aeabi_dcmpun>
 800bb7c:	b9a8      	cbnz	r0, 800bbaa <asin+0x5a>
 800bb7e:	ec45 4b10 	vmov	d0, r4, r5
 800bb82:	f001 fc5d 	bl	800d440 <fabs>
 800bb86:	4b0d      	ldr	r3, [pc, #52]	; (800bbbc <asin+0x6c>)
 800bb88:	ec51 0b10 	vmov	r0, r1, d0
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f7f4 ff6f 	bl	8000a70 <__aeabi_dcmpgt>
 800bb92:	b150      	cbz	r0, 800bbaa <asin+0x5a>
 800bb94:	f7ff ff06 	bl	800b9a4 <__errno>
 800bb98:	ecbd 8b02 	vpop	{d8}
 800bb9c:	2321      	movs	r3, #33	; 0x21
 800bb9e:	6003      	str	r3, [r0, #0]
 800bba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bba4:	4806      	ldr	r0, [pc, #24]	; (800bbc0 <asin+0x70>)
 800bba6:	f001 bcd7 	b.w	800d558 <nan>
 800bbaa:	eeb0 0a48 	vmov.f32	s0, s16
 800bbae:	eef0 0a68 	vmov.f32	s1, s17
 800bbb2:	ecbd 8b02 	vpop	{d8}
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}
 800bbb8:	200001ec 	.word	0x200001ec
 800bbbc:	3ff00000 	.word	0x3ff00000
 800bbc0:	0800d6e8 	.word	0x0800d6e8

0800bbc4 <atan2>:
 800bbc4:	f000 ba48 	b.w	800c058 <__ieee754_atan2>

0800bbc8 <sqrt>:
 800bbc8:	b538      	push	{r3, r4, r5, lr}
 800bbca:	ed2d 8b02 	vpush	{d8}
 800bbce:	ec55 4b10 	vmov	r4, r5, d0
 800bbd2:	f000 fd17 	bl	800c604 <__ieee754_sqrt>
 800bbd6:	4b15      	ldr	r3, [pc, #84]	; (800bc2c <sqrt+0x64>)
 800bbd8:	eeb0 8a40 	vmov.f32	s16, s0
 800bbdc:	eef0 8a60 	vmov.f32	s17, s1
 800bbe0:	f993 3000 	ldrsb.w	r3, [r3]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	d019      	beq.n	800bc1c <sqrt+0x54>
 800bbe8:	4622      	mov	r2, r4
 800bbea:	462b      	mov	r3, r5
 800bbec:	4620      	mov	r0, r4
 800bbee:	4629      	mov	r1, r5
 800bbf0:	f7f4 ff48 	bl	8000a84 <__aeabi_dcmpun>
 800bbf4:	b990      	cbnz	r0, 800bc1c <sqrt+0x54>
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	f7f4 ff19 	bl	8000a34 <__aeabi_dcmplt>
 800bc02:	b158      	cbz	r0, 800bc1c <sqrt+0x54>
 800bc04:	f7ff fece 	bl	800b9a4 <__errno>
 800bc08:	2321      	movs	r3, #33	; 0x21
 800bc0a:	6003      	str	r3, [r0, #0]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	2300      	movs	r3, #0
 800bc10:	4610      	mov	r0, r2
 800bc12:	4619      	mov	r1, r3
 800bc14:	f7f4 fdc6 	bl	80007a4 <__aeabi_ddiv>
 800bc18:	ec41 0b18 	vmov	d8, r0, r1
 800bc1c:	eeb0 0a48 	vmov.f32	s0, s16
 800bc20:	eef0 0a68 	vmov.f32	s1, s17
 800bc24:	ecbd 8b02 	vpop	{d8}
 800bc28:	bd38      	pop	{r3, r4, r5, pc}
 800bc2a:	bf00      	nop
 800bc2c:	200001ec 	.word	0x200001ec

0800bc30 <__ieee754_asin>:
 800bc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc34:	ed2d 8b04 	vpush	{d8-d9}
 800bc38:	ec55 4b10 	vmov	r4, r5, d0
 800bc3c:	4bcc      	ldr	r3, [pc, #816]	; (800bf70 <__ieee754_asin+0x340>)
 800bc3e:	b083      	sub	sp, #12
 800bc40:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800bc44:	4598      	cmp	r8, r3
 800bc46:	9501      	str	r5, [sp, #4]
 800bc48:	dd35      	ble.n	800bcb6 <__ieee754_asin+0x86>
 800bc4a:	ee10 3a10 	vmov	r3, s0
 800bc4e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800bc52:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800bc56:	ea58 0303 	orrs.w	r3, r8, r3
 800bc5a:	d117      	bne.n	800bc8c <__ieee754_asin+0x5c>
 800bc5c:	a3aa      	add	r3, pc, #680	; (adr r3, 800bf08 <__ieee754_asin+0x2d8>)
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	ee10 0a10 	vmov	r0, s0
 800bc66:	4629      	mov	r1, r5
 800bc68:	f7f4 fc72 	bl	8000550 <__aeabi_dmul>
 800bc6c:	a3a8      	add	r3, pc, #672	; (adr r3, 800bf10 <__ieee754_asin+0x2e0>)
 800bc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc72:	4606      	mov	r6, r0
 800bc74:	460f      	mov	r7, r1
 800bc76:	4620      	mov	r0, r4
 800bc78:	4629      	mov	r1, r5
 800bc7a:	f7f4 fc69 	bl	8000550 <__aeabi_dmul>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	460b      	mov	r3, r1
 800bc82:	4630      	mov	r0, r6
 800bc84:	4639      	mov	r1, r7
 800bc86:	f7f4 faad 	bl	80001e4 <__adddf3>
 800bc8a:	e00b      	b.n	800bca4 <__ieee754_asin+0x74>
 800bc8c:	ee10 2a10 	vmov	r2, s0
 800bc90:	462b      	mov	r3, r5
 800bc92:	ee10 0a10 	vmov	r0, s0
 800bc96:	4629      	mov	r1, r5
 800bc98:	f7f4 faa2 	bl	80001e0 <__aeabi_dsub>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	f7f4 fd80 	bl	80007a4 <__aeabi_ddiv>
 800bca4:	4604      	mov	r4, r0
 800bca6:	460d      	mov	r5, r1
 800bca8:	ec45 4b10 	vmov	d0, r4, r5
 800bcac:	b003      	add	sp, #12
 800bcae:	ecbd 8b04 	vpop	{d8-d9}
 800bcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb6:	4baf      	ldr	r3, [pc, #700]	; (800bf74 <__ieee754_asin+0x344>)
 800bcb8:	4598      	cmp	r8, r3
 800bcba:	dc11      	bgt.n	800bce0 <__ieee754_asin+0xb0>
 800bcbc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bcc0:	f280 80ae 	bge.w	800be20 <__ieee754_asin+0x1f0>
 800bcc4:	a394      	add	r3, pc, #592	; (adr r3, 800bf18 <__ieee754_asin+0x2e8>)
 800bcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcca:	ee10 0a10 	vmov	r0, s0
 800bcce:	4629      	mov	r1, r5
 800bcd0:	f7f4 fa88 	bl	80001e4 <__adddf3>
 800bcd4:	4ba8      	ldr	r3, [pc, #672]	; (800bf78 <__ieee754_asin+0x348>)
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f7f4 feca 	bl	8000a70 <__aeabi_dcmpgt>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d1e3      	bne.n	800bca8 <__ieee754_asin+0x78>
 800bce0:	ec45 4b10 	vmov	d0, r4, r5
 800bce4:	f001 fbac 	bl	800d440 <fabs>
 800bce8:	49a3      	ldr	r1, [pc, #652]	; (800bf78 <__ieee754_asin+0x348>)
 800bcea:	ec53 2b10 	vmov	r2, r3, d0
 800bcee:	2000      	movs	r0, #0
 800bcf0:	f7f4 fa76 	bl	80001e0 <__aeabi_dsub>
 800bcf4:	4ba1      	ldr	r3, [pc, #644]	; (800bf7c <__ieee754_asin+0x34c>)
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f7f4 fc2a 	bl	8000550 <__aeabi_dmul>
 800bcfc:	a388      	add	r3, pc, #544	; (adr r3, 800bf20 <__ieee754_asin+0x2f0>)
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	4604      	mov	r4, r0
 800bd04:	460d      	mov	r5, r1
 800bd06:	f7f4 fc23 	bl	8000550 <__aeabi_dmul>
 800bd0a:	a387      	add	r3, pc, #540	; (adr r3, 800bf28 <__ieee754_asin+0x2f8>)
 800bd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd10:	f7f4 fa68 	bl	80001e4 <__adddf3>
 800bd14:	4622      	mov	r2, r4
 800bd16:	462b      	mov	r3, r5
 800bd18:	f7f4 fc1a 	bl	8000550 <__aeabi_dmul>
 800bd1c:	a384      	add	r3, pc, #528	; (adr r3, 800bf30 <__ieee754_asin+0x300>)
 800bd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd22:	f7f4 fa5d 	bl	80001e0 <__aeabi_dsub>
 800bd26:	4622      	mov	r2, r4
 800bd28:	462b      	mov	r3, r5
 800bd2a:	f7f4 fc11 	bl	8000550 <__aeabi_dmul>
 800bd2e:	a382      	add	r3, pc, #520	; (adr r3, 800bf38 <__ieee754_asin+0x308>)
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	f7f4 fa56 	bl	80001e4 <__adddf3>
 800bd38:	4622      	mov	r2, r4
 800bd3a:	462b      	mov	r3, r5
 800bd3c:	f7f4 fc08 	bl	8000550 <__aeabi_dmul>
 800bd40:	a37f      	add	r3, pc, #508	; (adr r3, 800bf40 <__ieee754_asin+0x310>)
 800bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd46:	f7f4 fa4b 	bl	80001e0 <__aeabi_dsub>
 800bd4a:	4622      	mov	r2, r4
 800bd4c:	462b      	mov	r3, r5
 800bd4e:	f7f4 fbff 	bl	8000550 <__aeabi_dmul>
 800bd52:	a37d      	add	r3, pc, #500	; (adr r3, 800bf48 <__ieee754_asin+0x318>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	f7f4 fa44 	bl	80001e4 <__adddf3>
 800bd5c:	4622      	mov	r2, r4
 800bd5e:	462b      	mov	r3, r5
 800bd60:	f7f4 fbf6 	bl	8000550 <__aeabi_dmul>
 800bd64:	a37a      	add	r3, pc, #488	; (adr r3, 800bf50 <__ieee754_asin+0x320>)
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	ec41 0b18 	vmov	d8, r0, r1
 800bd6e:	4620      	mov	r0, r4
 800bd70:	4629      	mov	r1, r5
 800bd72:	f7f4 fbed 	bl	8000550 <__aeabi_dmul>
 800bd76:	a378      	add	r3, pc, #480	; (adr r3, 800bf58 <__ieee754_asin+0x328>)
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	f7f4 fa30 	bl	80001e0 <__aeabi_dsub>
 800bd80:	4622      	mov	r2, r4
 800bd82:	462b      	mov	r3, r5
 800bd84:	f7f4 fbe4 	bl	8000550 <__aeabi_dmul>
 800bd88:	a375      	add	r3, pc, #468	; (adr r3, 800bf60 <__ieee754_asin+0x330>)
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	f7f4 fa29 	bl	80001e4 <__adddf3>
 800bd92:	4622      	mov	r2, r4
 800bd94:	462b      	mov	r3, r5
 800bd96:	f7f4 fbdb 	bl	8000550 <__aeabi_dmul>
 800bd9a:	a373      	add	r3, pc, #460	; (adr r3, 800bf68 <__ieee754_asin+0x338>)
 800bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda0:	f7f4 fa1e 	bl	80001e0 <__aeabi_dsub>
 800bda4:	4622      	mov	r2, r4
 800bda6:	462b      	mov	r3, r5
 800bda8:	f7f4 fbd2 	bl	8000550 <__aeabi_dmul>
 800bdac:	4b72      	ldr	r3, [pc, #456]	; (800bf78 <__ieee754_asin+0x348>)
 800bdae:	2200      	movs	r2, #0
 800bdb0:	f7f4 fa18 	bl	80001e4 <__adddf3>
 800bdb4:	ec45 4b10 	vmov	d0, r4, r5
 800bdb8:	4606      	mov	r6, r0
 800bdba:	460f      	mov	r7, r1
 800bdbc:	f000 fc22 	bl	800c604 <__ieee754_sqrt>
 800bdc0:	4b6f      	ldr	r3, [pc, #444]	; (800bf80 <__ieee754_asin+0x350>)
 800bdc2:	4598      	cmp	r8, r3
 800bdc4:	ec5b ab10 	vmov	sl, fp, d0
 800bdc8:	f340 80dc 	ble.w	800bf84 <__ieee754_asin+0x354>
 800bdcc:	4632      	mov	r2, r6
 800bdce:	463b      	mov	r3, r7
 800bdd0:	ec51 0b18 	vmov	r0, r1, d8
 800bdd4:	f7f4 fce6 	bl	80007a4 <__aeabi_ddiv>
 800bdd8:	4652      	mov	r2, sl
 800bdda:	465b      	mov	r3, fp
 800bddc:	f7f4 fbb8 	bl	8000550 <__aeabi_dmul>
 800bde0:	4652      	mov	r2, sl
 800bde2:	465b      	mov	r3, fp
 800bde4:	f7f4 f9fe 	bl	80001e4 <__adddf3>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	f7f4 f9fa 	bl	80001e4 <__adddf3>
 800bdf0:	a347      	add	r3, pc, #284	; (adr r3, 800bf10 <__ieee754_asin+0x2e0>)
 800bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf6:	f7f4 f9f3 	bl	80001e0 <__aeabi_dsub>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	a142      	add	r1, pc, #264	; (adr r1, 800bf08 <__ieee754_asin+0x2d8>)
 800be00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be04:	f7f4 f9ec 	bl	80001e0 <__aeabi_dsub>
 800be08:	9b01      	ldr	r3, [sp, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	bfdc      	itt	le
 800be0e:	4602      	movle	r2, r0
 800be10:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800be14:	4604      	mov	r4, r0
 800be16:	460d      	mov	r5, r1
 800be18:	bfdc      	itt	le
 800be1a:	4614      	movle	r4, r2
 800be1c:	461d      	movle	r5, r3
 800be1e:	e743      	b.n	800bca8 <__ieee754_asin+0x78>
 800be20:	ee10 2a10 	vmov	r2, s0
 800be24:	ee10 0a10 	vmov	r0, s0
 800be28:	462b      	mov	r3, r5
 800be2a:	4629      	mov	r1, r5
 800be2c:	f7f4 fb90 	bl	8000550 <__aeabi_dmul>
 800be30:	a33b      	add	r3, pc, #236	; (adr r3, 800bf20 <__ieee754_asin+0x2f0>)
 800be32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be36:	4606      	mov	r6, r0
 800be38:	460f      	mov	r7, r1
 800be3a:	f7f4 fb89 	bl	8000550 <__aeabi_dmul>
 800be3e:	a33a      	add	r3, pc, #232	; (adr r3, 800bf28 <__ieee754_asin+0x2f8>)
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	f7f4 f9ce 	bl	80001e4 <__adddf3>
 800be48:	4632      	mov	r2, r6
 800be4a:	463b      	mov	r3, r7
 800be4c:	f7f4 fb80 	bl	8000550 <__aeabi_dmul>
 800be50:	a337      	add	r3, pc, #220	; (adr r3, 800bf30 <__ieee754_asin+0x300>)
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	f7f4 f9c3 	bl	80001e0 <__aeabi_dsub>
 800be5a:	4632      	mov	r2, r6
 800be5c:	463b      	mov	r3, r7
 800be5e:	f7f4 fb77 	bl	8000550 <__aeabi_dmul>
 800be62:	a335      	add	r3, pc, #212	; (adr r3, 800bf38 <__ieee754_asin+0x308>)
 800be64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be68:	f7f4 f9bc 	bl	80001e4 <__adddf3>
 800be6c:	4632      	mov	r2, r6
 800be6e:	463b      	mov	r3, r7
 800be70:	f7f4 fb6e 	bl	8000550 <__aeabi_dmul>
 800be74:	a332      	add	r3, pc, #200	; (adr r3, 800bf40 <__ieee754_asin+0x310>)
 800be76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7a:	f7f4 f9b1 	bl	80001e0 <__aeabi_dsub>
 800be7e:	4632      	mov	r2, r6
 800be80:	463b      	mov	r3, r7
 800be82:	f7f4 fb65 	bl	8000550 <__aeabi_dmul>
 800be86:	a330      	add	r3, pc, #192	; (adr r3, 800bf48 <__ieee754_asin+0x318>)
 800be88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8c:	f7f4 f9aa 	bl	80001e4 <__adddf3>
 800be90:	4632      	mov	r2, r6
 800be92:	463b      	mov	r3, r7
 800be94:	f7f4 fb5c 	bl	8000550 <__aeabi_dmul>
 800be98:	a32d      	add	r3, pc, #180	; (adr r3, 800bf50 <__ieee754_asin+0x320>)
 800be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9e:	4680      	mov	r8, r0
 800bea0:	4689      	mov	r9, r1
 800bea2:	4630      	mov	r0, r6
 800bea4:	4639      	mov	r1, r7
 800bea6:	f7f4 fb53 	bl	8000550 <__aeabi_dmul>
 800beaa:	a32b      	add	r3, pc, #172	; (adr r3, 800bf58 <__ieee754_asin+0x328>)
 800beac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb0:	f7f4 f996 	bl	80001e0 <__aeabi_dsub>
 800beb4:	4632      	mov	r2, r6
 800beb6:	463b      	mov	r3, r7
 800beb8:	f7f4 fb4a 	bl	8000550 <__aeabi_dmul>
 800bebc:	a328      	add	r3, pc, #160	; (adr r3, 800bf60 <__ieee754_asin+0x330>)
 800bebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec2:	f7f4 f98f 	bl	80001e4 <__adddf3>
 800bec6:	4632      	mov	r2, r6
 800bec8:	463b      	mov	r3, r7
 800beca:	f7f4 fb41 	bl	8000550 <__aeabi_dmul>
 800bece:	a326      	add	r3, pc, #152	; (adr r3, 800bf68 <__ieee754_asin+0x338>)
 800bed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed4:	f7f4 f984 	bl	80001e0 <__aeabi_dsub>
 800bed8:	4632      	mov	r2, r6
 800beda:	463b      	mov	r3, r7
 800bedc:	f7f4 fb38 	bl	8000550 <__aeabi_dmul>
 800bee0:	4b25      	ldr	r3, [pc, #148]	; (800bf78 <__ieee754_asin+0x348>)
 800bee2:	2200      	movs	r2, #0
 800bee4:	f7f4 f97e 	bl	80001e4 <__adddf3>
 800bee8:	4602      	mov	r2, r0
 800beea:	460b      	mov	r3, r1
 800beec:	4640      	mov	r0, r8
 800beee:	4649      	mov	r1, r9
 800bef0:	f7f4 fc58 	bl	80007a4 <__aeabi_ddiv>
 800bef4:	4622      	mov	r2, r4
 800bef6:	462b      	mov	r3, r5
 800bef8:	f7f4 fb2a 	bl	8000550 <__aeabi_dmul>
 800befc:	4602      	mov	r2, r0
 800befe:	460b      	mov	r3, r1
 800bf00:	4620      	mov	r0, r4
 800bf02:	4629      	mov	r1, r5
 800bf04:	e6bf      	b.n	800bc86 <__ieee754_asin+0x56>
 800bf06:	bf00      	nop
 800bf08:	54442d18 	.word	0x54442d18
 800bf0c:	3ff921fb 	.word	0x3ff921fb
 800bf10:	33145c07 	.word	0x33145c07
 800bf14:	3c91a626 	.word	0x3c91a626
 800bf18:	8800759c 	.word	0x8800759c
 800bf1c:	7e37e43c 	.word	0x7e37e43c
 800bf20:	0dfdf709 	.word	0x0dfdf709
 800bf24:	3f023de1 	.word	0x3f023de1
 800bf28:	7501b288 	.word	0x7501b288
 800bf2c:	3f49efe0 	.word	0x3f49efe0
 800bf30:	b5688f3b 	.word	0xb5688f3b
 800bf34:	3fa48228 	.word	0x3fa48228
 800bf38:	0e884455 	.word	0x0e884455
 800bf3c:	3fc9c155 	.word	0x3fc9c155
 800bf40:	03eb6f7d 	.word	0x03eb6f7d
 800bf44:	3fd4d612 	.word	0x3fd4d612
 800bf48:	55555555 	.word	0x55555555
 800bf4c:	3fc55555 	.word	0x3fc55555
 800bf50:	b12e9282 	.word	0xb12e9282
 800bf54:	3fb3b8c5 	.word	0x3fb3b8c5
 800bf58:	1b8d0159 	.word	0x1b8d0159
 800bf5c:	3fe6066c 	.word	0x3fe6066c
 800bf60:	9c598ac8 	.word	0x9c598ac8
 800bf64:	40002ae5 	.word	0x40002ae5
 800bf68:	1c8a2d4b 	.word	0x1c8a2d4b
 800bf6c:	40033a27 	.word	0x40033a27
 800bf70:	3fefffff 	.word	0x3fefffff
 800bf74:	3fdfffff 	.word	0x3fdfffff
 800bf78:	3ff00000 	.word	0x3ff00000
 800bf7c:	3fe00000 	.word	0x3fe00000
 800bf80:	3fef3332 	.word	0x3fef3332
 800bf84:	ee10 2a10 	vmov	r2, s0
 800bf88:	ee10 0a10 	vmov	r0, s0
 800bf8c:	465b      	mov	r3, fp
 800bf8e:	4659      	mov	r1, fp
 800bf90:	f7f4 f928 	bl	80001e4 <__adddf3>
 800bf94:	4632      	mov	r2, r6
 800bf96:	463b      	mov	r3, r7
 800bf98:	ec41 0b19 	vmov	d9, r0, r1
 800bf9c:	ec51 0b18 	vmov	r0, r1, d8
 800bfa0:	f7f4 fc00 	bl	80007a4 <__aeabi_ddiv>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	ec51 0b19 	vmov	r0, r1, d9
 800bfac:	f7f4 fad0 	bl	8000550 <__aeabi_dmul>
 800bfb0:	f04f 0800 	mov.w	r8, #0
 800bfb4:	4606      	mov	r6, r0
 800bfb6:	460f      	mov	r7, r1
 800bfb8:	4642      	mov	r2, r8
 800bfba:	465b      	mov	r3, fp
 800bfbc:	4640      	mov	r0, r8
 800bfbe:	4659      	mov	r1, fp
 800bfc0:	f7f4 fac6 	bl	8000550 <__aeabi_dmul>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4620      	mov	r0, r4
 800bfca:	4629      	mov	r1, r5
 800bfcc:	f7f4 f908 	bl	80001e0 <__aeabi_dsub>
 800bfd0:	4642      	mov	r2, r8
 800bfd2:	4604      	mov	r4, r0
 800bfd4:	460d      	mov	r5, r1
 800bfd6:	465b      	mov	r3, fp
 800bfd8:	4650      	mov	r0, sl
 800bfda:	4659      	mov	r1, fp
 800bfdc:	f7f4 f902 	bl	80001e4 <__adddf3>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	4629      	mov	r1, r5
 800bfe8:	f7f4 fbdc 	bl	80007a4 <__aeabi_ddiv>
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	f7f4 f8f8 	bl	80001e4 <__adddf3>
 800bff4:	4602      	mov	r2, r0
 800bff6:	460b      	mov	r3, r1
 800bff8:	a113      	add	r1, pc, #76	; (adr r1, 800c048 <__ieee754_asin+0x418>)
 800bffa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bffe:	f7f4 f8ef 	bl	80001e0 <__aeabi_dsub>
 800c002:	4602      	mov	r2, r0
 800c004:	460b      	mov	r3, r1
 800c006:	4630      	mov	r0, r6
 800c008:	4639      	mov	r1, r7
 800c00a:	f7f4 f8e9 	bl	80001e0 <__aeabi_dsub>
 800c00e:	4642      	mov	r2, r8
 800c010:	4604      	mov	r4, r0
 800c012:	460d      	mov	r5, r1
 800c014:	465b      	mov	r3, fp
 800c016:	4640      	mov	r0, r8
 800c018:	4659      	mov	r1, fp
 800c01a:	f7f4 f8e3 	bl	80001e4 <__adddf3>
 800c01e:	4602      	mov	r2, r0
 800c020:	460b      	mov	r3, r1
 800c022:	a10b      	add	r1, pc, #44	; (adr r1, 800c050 <__ieee754_asin+0x420>)
 800c024:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c028:	f7f4 f8da 	bl	80001e0 <__aeabi_dsub>
 800c02c:	4602      	mov	r2, r0
 800c02e:	460b      	mov	r3, r1
 800c030:	4620      	mov	r0, r4
 800c032:	4629      	mov	r1, r5
 800c034:	f7f4 f8d4 	bl	80001e0 <__aeabi_dsub>
 800c038:	4602      	mov	r2, r0
 800c03a:	460b      	mov	r3, r1
 800c03c:	a104      	add	r1, pc, #16	; (adr r1, 800c050 <__ieee754_asin+0x420>)
 800c03e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c042:	e6df      	b.n	800be04 <__ieee754_asin+0x1d4>
 800c044:	f3af 8000 	nop.w
 800c048:	33145c07 	.word	0x33145c07
 800c04c:	3c91a626 	.word	0x3c91a626
 800c050:	54442d18 	.word	0x54442d18
 800c054:	3fe921fb 	.word	0x3fe921fb

0800c058 <__ieee754_atan2>:
 800c058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c05c:	ec57 6b11 	vmov	r6, r7, d1
 800c060:	4273      	negs	r3, r6
 800c062:	f8df e184 	ldr.w	lr, [pc, #388]	; 800c1e8 <__ieee754_atan2+0x190>
 800c066:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c06a:	4333      	orrs	r3, r6
 800c06c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c070:	4573      	cmp	r3, lr
 800c072:	ec51 0b10 	vmov	r0, r1, d0
 800c076:	ee11 8a10 	vmov	r8, s2
 800c07a:	d80a      	bhi.n	800c092 <__ieee754_atan2+0x3a>
 800c07c:	4244      	negs	r4, r0
 800c07e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c082:	4304      	orrs	r4, r0
 800c084:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c088:	4574      	cmp	r4, lr
 800c08a:	ee10 9a10 	vmov	r9, s0
 800c08e:	468c      	mov	ip, r1
 800c090:	d907      	bls.n	800c0a2 <__ieee754_atan2+0x4a>
 800c092:	4632      	mov	r2, r6
 800c094:	463b      	mov	r3, r7
 800c096:	f7f4 f8a5 	bl	80001e4 <__adddf3>
 800c09a:	ec41 0b10 	vmov	d0, r0, r1
 800c09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0a2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c0a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c0aa:	4334      	orrs	r4, r6
 800c0ac:	d103      	bne.n	800c0b6 <__ieee754_atan2+0x5e>
 800c0ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0b2:	f001 b825 	b.w	800d100 <atan>
 800c0b6:	17bc      	asrs	r4, r7, #30
 800c0b8:	f004 0402 	and.w	r4, r4, #2
 800c0bc:	ea53 0909 	orrs.w	r9, r3, r9
 800c0c0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c0c4:	d107      	bne.n	800c0d6 <__ieee754_atan2+0x7e>
 800c0c6:	2c02      	cmp	r4, #2
 800c0c8:	d060      	beq.n	800c18c <__ieee754_atan2+0x134>
 800c0ca:	2c03      	cmp	r4, #3
 800c0cc:	d1e5      	bne.n	800c09a <__ieee754_atan2+0x42>
 800c0ce:	a142      	add	r1, pc, #264	; (adr r1, 800c1d8 <__ieee754_atan2+0x180>)
 800c0d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0d4:	e7e1      	b.n	800c09a <__ieee754_atan2+0x42>
 800c0d6:	ea52 0808 	orrs.w	r8, r2, r8
 800c0da:	d106      	bne.n	800c0ea <__ieee754_atan2+0x92>
 800c0dc:	f1bc 0f00 	cmp.w	ip, #0
 800c0e0:	da5f      	bge.n	800c1a2 <__ieee754_atan2+0x14a>
 800c0e2:	a13f      	add	r1, pc, #252	; (adr r1, 800c1e0 <__ieee754_atan2+0x188>)
 800c0e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0e8:	e7d7      	b.n	800c09a <__ieee754_atan2+0x42>
 800c0ea:	4572      	cmp	r2, lr
 800c0ec:	d10f      	bne.n	800c10e <__ieee754_atan2+0xb6>
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	f104 34ff 	add.w	r4, r4, #4294967295
 800c0f4:	d107      	bne.n	800c106 <__ieee754_atan2+0xae>
 800c0f6:	2c02      	cmp	r4, #2
 800c0f8:	d84c      	bhi.n	800c194 <__ieee754_atan2+0x13c>
 800c0fa:	4b35      	ldr	r3, [pc, #212]	; (800c1d0 <__ieee754_atan2+0x178>)
 800c0fc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c100:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c104:	e7c9      	b.n	800c09a <__ieee754_atan2+0x42>
 800c106:	2c02      	cmp	r4, #2
 800c108:	d848      	bhi.n	800c19c <__ieee754_atan2+0x144>
 800c10a:	4b32      	ldr	r3, [pc, #200]	; (800c1d4 <__ieee754_atan2+0x17c>)
 800c10c:	e7f6      	b.n	800c0fc <__ieee754_atan2+0xa4>
 800c10e:	4573      	cmp	r3, lr
 800c110:	d0e4      	beq.n	800c0dc <__ieee754_atan2+0x84>
 800c112:	1a9b      	subs	r3, r3, r2
 800c114:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c118:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c11c:	da1e      	bge.n	800c15c <__ieee754_atan2+0x104>
 800c11e:	2f00      	cmp	r7, #0
 800c120:	da01      	bge.n	800c126 <__ieee754_atan2+0xce>
 800c122:	323c      	adds	r2, #60	; 0x3c
 800c124:	db1e      	blt.n	800c164 <__ieee754_atan2+0x10c>
 800c126:	4632      	mov	r2, r6
 800c128:	463b      	mov	r3, r7
 800c12a:	f7f4 fb3b 	bl	80007a4 <__aeabi_ddiv>
 800c12e:	ec41 0b10 	vmov	d0, r0, r1
 800c132:	f001 f985 	bl	800d440 <fabs>
 800c136:	f000 ffe3 	bl	800d100 <atan>
 800c13a:	ec51 0b10 	vmov	r0, r1, d0
 800c13e:	2c01      	cmp	r4, #1
 800c140:	d013      	beq.n	800c16a <__ieee754_atan2+0x112>
 800c142:	2c02      	cmp	r4, #2
 800c144:	d015      	beq.n	800c172 <__ieee754_atan2+0x11a>
 800c146:	2c00      	cmp	r4, #0
 800c148:	d0a7      	beq.n	800c09a <__ieee754_atan2+0x42>
 800c14a:	a319      	add	r3, pc, #100	; (adr r3, 800c1b0 <__ieee754_atan2+0x158>)
 800c14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c150:	f7f4 f846 	bl	80001e0 <__aeabi_dsub>
 800c154:	a318      	add	r3, pc, #96	; (adr r3, 800c1b8 <__ieee754_atan2+0x160>)
 800c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15a:	e014      	b.n	800c186 <__ieee754_atan2+0x12e>
 800c15c:	a118      	add	r1, pc, #96	; (adr r1, 800c1c0 <__ieee754_atan2+0x168>)
 800c15e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c162:	e7ec      	b.n	800c13e <__ieee754_atan2+0xe6>
 800c164:	2000      	movs	r0, #0
 800c166:	2100      	movs	r1, #0
 800c168:	e7e9      	b.n	800c13e <__ieee754_atan2+0xe6>
 800c16a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c16e:	4619      	mov	r1, r3
 800c170:	e793      	b.n	800c09a <__ieee754_atan2+0x42>
 800c172:	a30f      	add	r3, pc, #60	; (adr r3, 800c1b0 <__ieee754_atan2+0x158>)
 800c174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c178:	f7f4 f832 	bl	80001e0 <__aeabi_dsub>
 800c17c:	4602      	mov	r2, r0
 800c17e:	460b      	mov	r3, r1
 800c180:	a10d      	add	r1, pc, #52	; (adr r1, 800c1b8 <__ieee754_atan2+0x160>)
 800c182:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c186:	f7f4 f82b 	bl	80001e0 <__aeabi_dsub>
 800c18a:	e786      	b.n	800c09a <__ieee754_atan2+0x42>
 800c18c:	a10a      	add	r1, pc, #40	; (adr r1, 800c1b8 <__ieee754_atan2+0x160>)
 800c18e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c192:	e782      	b.n	800c09a <__ieee754_atan2+0x42>
 800c194:	a10c      	add	r1, pc, #48	; (adr r1, 800c1c8 <__ieee754_atan2+0x170>)
 800c196:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c19a:	e77e      	b.n	800c09a <__ieee754_atan2+0x42>
 800c19c:	2000      	movs	r0, #0
 800c19e:	2100      	movs	r1, #0
 800c1a0:	e77b      	b.n	800c09a <__ieee754_atan2+0x42>
 800c1a2:	a107      	add	r1, pc, #28	; (adr r1, 800c1c0 <__ieee754_atan2+0x168>)
 800c1a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1a8:	e777      	b.n	800c09a <__ieee754_atan2+0x42>
 800c1aa:	bf00      	nop
 800c1ac:	f3af 8000 	nop.w
 800c1b0:	33145c07 	.word	0x33145c07
 800c1b4:	3ca1a626 	.word	0x3ca1a626
 800c1b8:	54442d18 	.word	0x54442d18
 800c1bc:	400921fb 	.word	0x400921fb
 800c1c0:	54442d18 	.word	0x54442d18
 800c1c4:	3ff921fb 	.word	0x3ff921fb
 800c1c8:	54442d18 	.word	0x54442d18
 800c1cc:	3fe921fb 	.word	0x3fe921fb
 800c1d0:	0800d6f0 	.word	0x0800d6f0
 800c1d4:	0800d708 	.word	0x0800d708
 800c1d8:	54442d18 	.word	0x54442d18
 800c1dc:	c00921fb 	.word	0xc00921fb
 800c1e0:	54442d18 	.word	0x54442d18
 800c1e4:	bff921fb 	.word	0xbff921fb
 800c1e8:	7ff00000 	.word	0x7ff00000
 800c1ec:	00000000 	.word	0x00000000

0800c1f0 <__ieee754_rem_pio2>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	ed2d 8b02 	vpush	{d8}
 800c1f8:	ec55 4b10 	vmov	r4, r5, d0
 800c1fc:	4bca      	ldr	r3, [pc, #808]	; (800c528 <__ieee754_rem_pio2+0x338>)
 800c1fe:	b08b      	sub	sp, #44	; 0x2c
 800c200:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c204:	4598      	cmp	r8, r3
 800c206:	4682      	mov	sl, r0
 800c208:	9502      	str	r5, [sp, #8]
 800c20a:	dc08      	bgt.n	800c21e <__ieee754_rem_pio2+0x2e>
 800c20c:	2200      	movs	r2, #0
 800c20e:	2300      	movs	r3, #0
 800c210:	ed80 0b00 	vstr	d0, [r0]
 800c214:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c218:	f04f 0b00 	mov.w	fp, #0
 800c21c:	e028      	b.n	800c270 <__ieee754_rem_pio2+0x80>
 800c21e:	4bc3      	ldr	r3, [pc, #780]	; (800c52c <__ieee754_rem_pio2+0x33c>)
 800c220:	4598      	cmp	r8, r3
 800c222:	dc78      	bgt.n	800c316 <__ieee754_rem_pio2+0x126>
 800c224:	9b02      	ldr	r3, [sp, #8]
 800c226:	4ec2      	ldr	r6, [pc, #776]	; (800c530 <__ieee754_rem_pio2+0x340>)
 800c228:	2b00      	cmp	r3, #0
 800c22a:	ee10 0a10 	vmov	r0, s0
 800c22e:	a3b0      	add	r3, pc, #704	; (adr r3, 800c4f0 <__ieee754_rem_pio2+0x300>)
 800c230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c234:	4629      	mov	r1, r5
 800c236:	dd39      	ble.n	800c2ac <__ieee754_rem_pio2+0xbc>
 800c238:	f7f3 ffd2 	bl	80001e0 <__aeabi_dsub>
 800c23c:	45b0      	cmp	r8, r6
 800c23e:	4604      	mov	r4, r0
 800c240:	460d      	mov	r5, r1
 800c242:	d01b      	beq.n	800c27c <__ieee754_rem_pio2+0x8c>
 800c244:	a3ac      	add	r3, pc, #688	; (adr r3, 800c4f8 <__ieee754_rem_pio2+0x308>)
 800c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24a:	f7f3 ffc9 	bl	80001e0 <__aeabi_dsub>
 800c24e:	4602      	mov	r2, r0
 800c250:	460b      	mov	r3, r1
 800c252:	e9ca 2300 	strd	r2, r3, [sl]
 800c256:	4620      	mov	r0, r4
 800c258:	4629      	mov	r1, r5
 800c25a:	f7f3 ffc1 	bl	80001e0 <__aeabi_dsub>
 800c25e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c4f8 <__ieee754_rem_pio2+0x308>)
 800c260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c264:	f7f3 ffbc 	bl	80001e0 <__aeabi_dsub>
 800c268:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c26c:	f04f 0b01 	mov.w	fp, #1
 800c270:	4658      	mov	r0, fp
 800c272:	b00b      	add	sp, #44	; 0x2c
 800c274:	ecbd 8b02 	vpop	{d8}
 800c278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c27c:	a3a0      	add	r3, pc, #640	; (adr r3, 800c500 <__ieee754_rem_pio2+0x310>)
 800c27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c282:	f7f3 ffad 	bl	80001e0 <__aeabi_dsub>
 800c286:	a3a0      	add	r3, pc, #640	; (adr r3, 800c508 <__ieee754_rem_pio2+0x318>)
 800c288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28c:	4604      	mov	r4, r0
 800c28e:	460d      	mov	r5, r1
 800c290:	f7f3 ffa6 	bl	80001e0 <__aeabi_dsub>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	e9ca 2300 	strd	r2, r3, [sl]
 800c29c:	4620      	mov	r0, r4
 800c29e:	4629      	mov	r1, r5
 800c2a0:	f7f3 ff9e 	bl	80001e0 <__aeabi_dsub>
 800c2a4:	a398      	add	r3, pc, #608	; (adr r3, 800c508 <__ieee754_rem_pio2+0x318>)
 800c2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2aa:	e7db      	b.n	800c264 <__ieee754_rem_pio2+0x74>
 800c2ac:	f7f3 ff9a 	bl	80001e4 <__adddf3>
 800c2b0:	45b0      	cmp	r8, r6
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	460d      	mov	r5, r1
 800c2b6:	d016      	beq.n	800c2e6 <__ieee754_rem_pio2+0xf6>
 800c2b8:	a38f      	add	r3, pc, #572	; (adr r3, 800c4f8 <__ieee754_rem_pio2+0x308>)
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	f7f3 ff91 	bl	80001e4 <__adddf3>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	e9ca 2300 	strd	r2, r3, [sl]
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	4629      	mov	r1, r5
 800c2ce:	f7f3 ff87 	bl	80001e0 <__aeabi_dsub>
 800c2d2:	a389      	add	r3, pc, #548	; (adr r3, 800c4f8 <__ieee754_rem_pio2+0x308>)
 800c2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d8:	f7f3 ff84 	bl	80001e4 <__adddf3>
 800c2dc:	f04f 3bff 	mov.w	fp, #4294967295
 800c2e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c2e4:	e7c4      	b.n	800c270 <__ieee754_rem_pio2+0x80>
 800c2e6:	a386      	add	r3, pc, #536	; (adr r3, 800c500 <__ieee754_rem_pio2+0x310>)
 800c2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ec:	f7f3 ff7a 	bl	80001e4 <__adddf3>
 800c2f0:	a385      	add	r3, pc, #532	; (adr r3, 800c508 <__ieee754_rem_pio2+0x318>)
 800c2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	460d      	mov	r5, r1
 800c2fa:	f7f3 ff73 	bl	80001e4 <__adddf3>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	e9ca 2300 	strd	r2, r3, [sl]
 800c306:	4620      	mov	r0, r4
 800c308:	4629      	mov	r1, r5
 800c30a:	f7f3 ff69 	bl	80001e0 <__aeabi_dsub>
 800c30e:	a37e      	add	r3, pc, #504	; (adr r3, 800c508 <__ieee754_rem_pio2+0x318>)
 800c310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c314:	e7e0      	b.n	800c2d8 <__ieee754_rem_pio2+0xe8>
 800c316:	4b87      	ldr	r3, [pc, #540]	; (800c534 <__ieee754_rem_pio2+0x344>)
 800c318:	4598      	cmp	r8, r3
 800c31a:	f300 80d9 	bgt.w	800c4d0 <__ieee754_rem_pio2+0x2e0>
 800c31e:	f001 f88f 	bl	800d440 <fabs>
 800c322:	ec55 4b10 	vmov	r4, r5, d0
 800c326:	ee10 0a10 	vmov	r0, s0
 800c32a:	a379      	add	r3, pc, #484	; (adr r3, 800c510 <__ieee754_rem_pio2+0x320>)
 800c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c330:	4629      	mov	r1, r5
 800c332:	f7f4 f90d 	bl	8000550 <__aeabi_dmul>
 800c336:	4b80      	ldr	r3, [pc, #512]	; (800c538 <__ieee754_rem_pio2+0x348>)
 800c338:	2200      	movs	r2, #0
 800c33a:	f7f3 ff53 	bl	80001e4 <__adddf3>
 800c33e:	f7f4 fbb7 	bl	8000ab0 <__aeabi_d2iz>
 800c342:	4683      	mov	fp, r0
 800c344:	f7f4 f89a 	bl	800047c <__aeabi_i2d>
 800c348:	4602      	mov	r2, r0
 800c34a:	460b      	mov	r3, r1
 800c34c:	ec43 2b18 	vmov	d8, r2, r3
 800c350:	a367      	add	r3, pc, #412	; (adr r3, 800c4f0 <__ieee754_rem_pio2+0x300>)
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	f7f4 f8fb 	bl	8000550 <__aeabi_dmul>
 800c35a:	4602      	mov	r2, r0
 800c35c:	460b      	mov	r3, r1
 800c35e:	4620      	mov	r0, r4
 800c360:	4629      	mov	r1, r5
 800c362:	f7f3 ff3d 	bl	80001e0 <__aeabi_dsub>
 800c366:	a364      	add	r3, pc, #400	; (adr r3, 800c4f8 <__ieee754_rem_pio2+0x308>)
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	4606      	mov	r6, r0
 800c36e:	460f      	mov	r7, r1
 800c370:	ec51 0b18 	vmov	r0, r1, d8
 800c374:	f7f4 f8ec 	bl	8000550 <__aeabi_dmul>
 800c378:	f1bb 0f1f 	cmp.w	fp, #31
 800c37c:	4604      	mov	r4, r0
 800c37e:	460d      	mov	r5, r1
 800c380:	dc0d      	bgt.n	800c39e <__ieee754_rem_pio2+0x1ae>
 800c382:	4b6e      	ldr	r3, [pc, #440]	; (800c53c <__ieee754_rem_pio2+0x34c>)
 800c384:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c38c:	4543      	cmp	r3, r8
 800c38e:	d006      	beq.n	800c39e <__ieee754_rem_pio2+0x1ae>
 800c390:	4622      	mov	r2, r4
 800c392:	462b      	mov	r3, r5
 800c394:	4630      	mov	r0, r6
 800c396:	4639      	mov	r1, r7
 800c398:	f7f3 ff22 	bl	80001e0 <__aeabi_dsub>
 800c39c:	e00f      	b.n	800c3be <__ieee754_rem_pio2+0x1ce>
 800c39e:	462b      	mov	r3, r5
 800c3a0:	4622      	mov	r2, r4
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	4639      	mov	r1, r7
 800c3a6:	f7f3 ff1b 	bl	80001e0 <__aeabi_dsub>
 800c3aa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c3ae:	9303      	str	r3, [sp, #12]
 800c3b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c3b4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c3b8:	f1b8 0f10 	cmp.w	r8, #16
 800c3bc:	dc02      	bgt.n	800c3c4 <__ieee754_rem_pio2+0x1d4>
 800c3be:	e9ca 0100 	strd	r0, r1, [sl]
 800c3c2:	e039      	b.n	800c438 <__ieee754_rem_pio2+0x248>
 800c3c4:	a34e      	add	r3, pc, #312	; (adr r3, 800c500 <__ieee754_rem_pio2+0x310>)
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	ec51 0b18 	vmov	r0, r1, d8
 800c3ce:	f7f4 f8bf 	bl	8000550 <__aeabi_dmul>
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	460d      	mov	r5, r1
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	460b      	mov	r3, r1
 800c3da:	4630      	mov	r0, r6
 800c3dc:	4639      	mov	r1, r7
 800c3de:	f7f3 feff 	bl	80001e0 <__aeabi_dsub>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	4680      	mov	r8, r0
 800c3e8:	4689      	mov	r9, r1
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	4639      	mov	r1, r7
 800c3ee:	f7f3 fef7 	bl	80001e0 <__aeabi_dsub>
 800c3f2:	4622      	mov	r2, r4
 800c3f4:	462b      	mov	r3, r5
 800c3f6:	f7f3 fef3 	bl	80001e0 <__aeabi_dsub>
 800c3fa:	a343      	add	r3, pc, #268	; (adr r3, 800c508 <__ieee754_rem_pio2+0x318>)
 800c3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c400:	4604      	mov	r4, r0
 800c402:	460d      	mov	r5, r1
 800c404:	ec51 0b18 	vmov	r0, r1, d8
 800c408:	f7f4 f8a2 	bl	8000550 <__aeabi_dmul>
 800c40c:	4622      	mov	r2, r4
 800c40e:	462b      	mov	r3, r5
 800c410:	f7f3 fee6 	bl	80001e0 <__aeabi_dsub>
 800c414:	4602      	mov	r2, r0
 800c416:	460b      	mov	r3, r1
 800c418:	4604      	mov	r4, r0
 800c41a:	460d      	mov	r5, r1
 800c41c:	4640      	mov	r0, r8
 800c41e:	4649      	mov	r1, r9
 800c420:	f7f3 fede 	bl	80001e0 <__aeabi_dsub>
 800c424:	9a03      	ldr	r2, [sp, #12]
 800c426:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c42a:	1ad3      	subs	r3, r2, r3
 800c42c:	2b31      	cmp	r3, #49	; 0x31
 800c42e:	dc24      	bgt.n	800c47a <__ieee754_rem_pio2+0x28a>
 800c430:	e9ca 0100 	strd	r0, r1, [sl]
 800c434:	4646      	mov	r6, r8
 800c436:	464f      	mov	r7, r9
 800c438:	e9da 8900 	ldrd	r8, r9, [sl]
 800c43c:	4630      	mov	r0, r6
 800c43e:	4642      	mov	r2, r8
 800c440:	464b      	mov	r3, r9
 800c442:	4639      	mov	r1, r7
 800c444:	f7f3 fecc 	bl	80001e0 <__aeabi_dsub>
 800c448:	462b      	mov	r3, r5
 800c44a:	4622      	mov	r2, r4
 800c44c:	f7f3 fec8 	bl	80001e0 <__aeabi_dsub>
 800c450:	9b02      	ldr	r3, [sp, #8]
 800c452:	2b00      	cmp	r3, #0
 800c454:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c458:	f6bf af0a 	bge.w	800c270 <__ieee754_rem_pio2+0x80>
 800c45c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c460:	f8ca 3004 	str.w	r3, [sl, #4]
 800c464:	f8ca 8000 	str.w	r8, [sl]
 800c468:	f8ca 0008 	str.w	r0, [sl, #8]
 800c46c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c470:	f8ca 300c 	str.w	r3, [sl, #12]
 800c474:	f1cb 0b00 	rsb	fp, fp, #0
 800c478:	e6fa      	b.n	800c270 <__ieee754_rem_pio2+0x80>
 800c47a:	a327      	add	r3, pc, #156	; (adr r3, 800c518 <__ieee754_rem_pio2+0x328>)
 800c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c480:	ec51 0b18 	vmov	r0, r1, d8
 800c484:	f7f4 f864 	bl	8000550 <__aeabi_dmul>
 800c488:	4604      	mov	r4, r0
 800c48a:	460d      	mov	r5, r1
 800c48c:	4602      	mov	r2, r0
 800c48e:	460b      	mov	r3, r1
 800c490:	4640      	mov	r0, r8
 800c492:	4649      	mov	r1, r9
 800c494:	f7f3 fea4 	bl	80001e0 <__aeabi_dsub>
 800c498:	4602      	mov	r2, r0
 800c49a:	460b      	mov	r3, r1
 800c49c:	4606      	mov	r6, r0
 800c49e:	460f      	mov	r7, r1
 800c4a0:	4640      	mov	r0, r8
 800c4a2:	4649      	mov	r1, r9
 800c4a4:	f7f3 fe9c 	bl	80001e0 <__aeabi_dsub>
 800c4a8:	4622      	mov	r2, r4
 800c4aa:	462b      	mov	r3, r5
 800c4ac:	f7f3 fe98 	bl	80001e0 <__aeabi_dsub>
 800c4b0:	a31b      	add	r3, pc, #108	; (adr r3, 800c520 <__ieee754_rem_pio2+0x330>)
 800c4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	460d      	mov	r5, r1
 800c4ba:	ec51 0b18 	vmov	r0, r1, d8
 800c4be:	f7f4 f847 	bl	8000550 <__aeabi_dmul>
 800c4c2:	4622      	mov	r2, r4
 800c4c4:	462b      	mov	r3, r5
 800c4c6:	f7f3 fe8b 	bl	80001e0 <__aeabi_dsub>
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	460d      	mov	r5, r1
 800c4ce:	e75f      	b.n	800c390 <__ieee754_rem_pio2+0x1a0>
 800c4d0:	4b1b      	ldr	r3, [pc, #108]	; (800c540 <__ieee754_rem_pio2+0x350>)
 800c4d2:	4598      	cmp	r8, r3
 800c4d4:	dd36      	ble.n	800c544 <__ieee754_rem_pio2+0x354>
 800c4d6:	ee10 2a10 	vmov	r2, s0
 800c4da:	462b      	mov	r3, r5
 800c4dc:	4620      	mov	r0, r4
 800c4de:	4629      	mov	r1, r5
 800c4e0:	f7f3 fe7e 	bl	80001e0 <__aeabi_dsub>
 800c4e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c4e8:	e9ca 0100 	strd	r0, r1, [sl]
 800c4ec:	e694      	b.n	800c218 <__ieee754_rem_pio2+0x28>
 800c4ee:	bf00      	nop
 800c4f0:	54400000 	.word	0x54400000
 800c4f4:	3ff921fb 	.word	0x3ff921fb
 800c4f8:	1a626331 	.word	0x1a626331
 800c4fc:	3dd0b461 	.word	0x3dd0b461
 800c500:	1a600000 	.word	0x1a600000
 800c504:	3dd0b461 	.word	0x3dd0b461
 800c508:	2e037073 	.word	0x2e037073
 800c50c:	3ba3198a 	.word	0x3ba3198a
 800c510:	6dc9c883 	.word	0x6dc9c883
 800c514:	3fe45f30 	.word	0x3fe45f30
 800c518:	2e000000 	.word	0x2e000000
 800c51c:	3ba3198a 	.word	0x3ba3198a
 800c520:	252049c1 	.word	0x252049c1
 800c524:	397b839a 	.word	0x397b839a
 800c528:	3fe921fb 	.word	0x3fe921fb
 800c52c:	4002d97b 	.word	0x4002d97b
 800c530:	3ff921fb 	.word	0x3ff921fb
 800c534:	413921fb 	.word	0x413921fb
 800c538:	3fe00000 	.word	0x3fe00000
 800c53c:	0800d720 	.word	0x0800d720
 800c540:	7fefffff 	.word	0x7fefffff
 800c544:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c548:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c54c:	ee10 0a10 	vmov	r0, s0
 800c550:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c554:	ee10 6a10 	vmov	r6, s0
 800c558:	460f      	mov	r7, r1
 800c55a:	f7f4 faa9 	bl	8000ab0 <__aeabi_d2iz>
 800c55e:	f7f3 ff8d 	bl	800047c <__aeabi_i2d>
 800c562:	4602      	mov	r2, r0
 800c564:	460b      	mov	r3, r1
 800c566:	4630      	mov	r0, r6
 800c568:	4639      	mov	r1, r7
 800c56a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c56e:	f7f3 fe37 	bl	80001e0 <__aeabi_dsub>
 800c572:	4b22      	ldr	r3, [pc, #136]	; (800c5fc <__ieee754_rem_pio2+0x40c>)
 800c574:	2200      	movs	r2, #0
 800c576:	f7f3 ffeb 	bl	8000550 <__aeabi_dmul>
 800c57a:	460f      	mov	r7, r1
 800c57c:	4606      	mov	r6, r0
 800c57e:	f7f4 fa97 	bl	8000ab0 <__aeabi_d2iz>
 800c582:	f7f3 ff7b 	bl	800047c <__aeabi_i2d>
 800c586:	4602      	mov	r2, r0
 800c588:	460b      	mov	r3, r1
 800c58a:	4630      	mov	r0, r6
 800c58c:	4639      	mov	r1, r7
 800c58e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c592:	f7f3 fe25 	bl	80001e0 <__aeabi_dsub>
 800c596:	4b19      	ldr	r3, [pc, #100]	; (800c5fc <__ieee754_rem_pio2+0x40c>)
 800c598:	2200      	movs	r2, #0
 800c59a:	f7f3 ffd9 	bl	8000550 <__aeabi_dmul>
 800c59e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c5a2:	ad04      	add	r5, sp, #16
 800c5a4:	f04f 0803 	mov.w	r8, #3
 800c5a8:	46a9      	mov	r9, r5
 800c5aa:	2600      	movs	r6, #0
 800c5ac:	2700      	movs	r7, #0
 800c5ae:	4632      	mov	r2, r6
 800c5b0:	463b      	mov	r3, r7
 800c5b2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c5b6:	46c3      	mov	fp, r8
 800c5b8:	3d08      	subs	r5, #8
 800c5ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800c5be:	f7f4 fa2f 	bl	8000a20 <__aeabi_dcmpeq>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d1f3      	bne.n	800c5ae <__ieee754_rem_pio2+0x3be>
 800c5c6:	4b0e      	ldr	r3, [pc, #56]	; (800c600 <__ieee754_rem_pio2+0x410>)
 800c5c8:	9301      	str	r3, [sp, #4]
 800c5ca:	2302      	movs	r3, #2
 800c5cc:	9300      	str	r3, [sp, #0]
 800c5ce:	4622      	mov	r2, r4
 800c5d0:	465b      	mov	r3, fp
 800c5d2:	4651      	mov	r1, sl
 800c5d4:	4648      	mov	r0, r9
 800c5d6:	f000 f993 	bl	800c900 <__kernel_rem_pio2>
 800c5da:	9b02      	ldr	r3, [sp, #8]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	4683      	mov	fp, r0
 800c5e0:	f6bf ae46 	bge.w	800c270 <__ieee754_rem_pio2+0x80>
 800c5e4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c5e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c5ec:	f8ca 3004 	str.w	r3, [sl, #4]
 800c5f0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c5f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c5f8:	e73a      	b.n	800c470 <__ieee754_rem_pio2+0x280>
 800c5fa:	bf00      	nop
 800c5fc:	41700000 	.word	0x41700000
 800c600:	0800d7a0 	.word	0x0800d7a0

0800c604 <__ieee754_sqrt>:
 800c604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c608:	ec55 4b10 	vmov	r4, r5, d0
 800c60c:	4e56      	ldr	r6, [pc, #344]	; (800c768 <__ieee754_sqrt+0x164>)
 800c60e:	43ae      	bics	r6, r5
 800c610:	ee10 0a10 	vmov	r0, s0
 800c614:	ee10 3a10 	vmov	r3, s0
 800c618:	4629      	mov	r1, r5
 800c61a:	462a      	mov	r2, r5
 800c61c:	d110      	bne.n	800c640 <__ieee754_sqrt+0x3c>
 800c61e:	ee10 2a10 	vmov	r2, s0
 800c622:	462b      	mov	r3, r5
 800c624:	f7f3 ff94 	bl	8000550 <__aeabi_dmul>
 800c628:	4602      	mov	r2, r0
 800c62a:	460b      	mov	r3, r1
 800c62c:	4620      	mov	r0, r4
 800c62e:	4629      	mov	r1, r5
 800c630:	f7f3 fdd8 	bl	80001e4 <__adddf3>
 800c634:	4604      	mov	r4, r0
 800c636:	460d      	mov	r5, r1
 800c638:	ec45 4b10 	vmov	d0, r4, r5
 800c63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c640:	2d00      	cmp	r5, #0
 800c642:	dc10      	bgt.n	800c666 <__ieee754_sqrt+0x62>
 800c644:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c648:	4330      	orrs	r0, r6
 800c64a:	d0f5      	beq.n	800c638 <__ieee754_sqrt+0x34>
 800c64c:	b15d      	cbz	r5, 800c666 <__ieee754_sqrt+0x62>
 800c64e:	ee10 2a10 	vmov	r2, s0
 800c652:	462b      	mov	r3, r5
 800c654:	ee10 0a10 	vmov	r0, s0
 800c658:	f7f3 fdc2 	bl	80001e0 <__aeabi_dsub>
 800c65c:	4602      	mov	r2, r0
 800c65e:	460b      	mov	r3, r1
 800c660:	f7f4 f8a0 	bl	80007a4 <__aeabi_ddiv>
 800c664:	e7e6      	b.n	800c634 <__ieee754_sqrt+0x30>
 800c666:	1509      	asrs	r1, r1, #20
 800c668:	d076      	beq.n	800c758 <__ieee754_sqrt+0x154>
 800c66a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c66e:	07ce      	lsls	r6, r1, #31
 800c670:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c674:	bf5e      	ittt	pl
 800c676:	0fda      	lsrpl	r2, r3, #31
 800c678:	005b      	lslpl	r3, r3, #1
 800c67a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c67e:	0fda      	lsrs	r2, r3, #31
 800c680:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c684:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c688:	2000      	movs	r0, #0
 800c68a:	106d      	asrs	r5, r5, #1
 800c68c:	005b      	lsls	r3, r3, #1
 800c68e:	f04f 0e16 	mov.w	lr, #22
 800c692:	4684      	mov	ip, r0
 800c694:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c698:	eb0c 0401 	add.w	r4, ip, r1
 800c69c:	4294      	cmp	r4, r2
 800c69e:	bfde      	ittt	le
 800c6a0:	1b12      	suble	r2, r2, r4
 800c6a2:	eb04 0c01 	addle.w	ip, r4, r1
 800c6a6:	1840      	addle	r0, r0, r1
 800c6a8:	0052      	lsls	r2, r2, #1
 800c6aa:	f1be 0e01 	subs.w	lr, lr, #1
 800c6ae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c6b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c6b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c6ba:	d1ed      	bne.n	800c698 <__ieee754_sqrt+0x94>
 800c6bc:	4671      	mov	r1, lr
 800c6be:	2720      	movs	r7, #32
 800c6c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c6c4:	4562      	cmp	r2, ip
 800c6c6:	eb04 060e 	add.w	r6, r4, lr
 800c6ca:	dc02      	bgt.n	800c6d2 <__ieee754_sqrt+0xce>
 800c6cc:	d113      	bne.n	800c6f6 <__ieee754_sqrt+0xf2>
 800c6ce:	429e      	cmp	r6, r3
 800c6d0:	d811      	bhi.n	800c6f6 <__ieee754_sqrt+0xf2>
 800c6d2:	2e00      	cmp	r6, #0
 800c6d4:	eb06 0e04 	add.w	lr, r6, r4
 800c6d8:	da43      	bge.n	800c762 <__ieee754_sqrt+0x15e>
 800c6da:	f1be 0f00 	cmp.w	lr, #0
 800c6de:	db40      	blt.n	800c762 <__ieee754_sqrt+0x15e>
 800c6e0:	f10c 0801 	add.w	r8, ip, #1
 800c6e4:	eba2 020c 	sub.w	r2, r2, ip
 800c6e8:	429e      	cmp	r6, r3
 800c6ea:	bf88      	it	hi
 800c6ec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c6f0:	1b9b      	subs	r3, r3, r6
 800c6f2:	4421      	add	r1, r4
 800c6f4:	46c4      	mov	ip, r8
 800c6f6:	0052      	lsls	r2, r2, #1
 800c6f8:	3f01      	subs	r7, #1
 800c6fa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c6fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c702:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c706:	d1dd      	bne.n	800c6c4 <__ieee754_sqrt+0xc0>
 800c708:	4313      	orrs	r3, r2
 800c70a:	d006      	beq.n	800c71a <__ieee754_sqrt+0x116>
 800c70c:	1c4c      	adds	r4, r1, #1
 800c70e:	bf13      	iteet	ne
 800c710:	3101      	addne	r1, #1
 800c712:	3001      	addeq	r0, #1
 800c714:	4639      	moveq	r1, r7
 800c716:	f021 0101 	bicne.w	r1, r1, #1
 800c71a:	1043      	asrs	r3, r0, #1
 800c71c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c720:	0849      	lsrs	r1, r1, #1
 800c722:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c726:	07c2      	lsls	r2, r0, #31
 800c728:	bf48      	it	mi
 800c72a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c72e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c732:	460c      	mov	r4, r1
 800c734:	463d      	mov	r5, r7
 800c736:	e77f      	b.n	800c638 <__ieee754_sqrt+0x34>
 800c738:	0ada      	lsrs	r2, r3, #11
 800c73a:	3815      	subs	r0, #21
 800c73c:	055b      	lsls	r3, r3, #21
 800c73e:	2a00      	cmp	r2, #0
 800c740:	d0fa      	beq.n	800c738 <__ieee754_sqrt+0x134>
 800c742:	02d7      	lsls	r7, r2, #11
 800c744:	d50a      	bpl.n	800c75c <__ieee754_sqrt+0x158>
 800c746:	f1c1 0420 	rsb	r4, r1, #32
 800c74a:	fa23 f404 	lsr.w	r4, r3, r4
 800c74e:	1e4d      	subs	r5, r1, #1
 800c750:	408b      	lsls	r3, r1
 800c752:	4322      	orrs	r2, r4
 800c754:	1b41      	subs	r1, r0, r5
 800c756:	e788      	b.n	800c66a <__ieee754_sqrt+0x66>
 800c758:	4608      	mov	r0, r1
 800c75a:	e7f0      	b.n	800c73e <__ieee754_sqrt+0x13a>
 800c75c:	0052      	lsls	r2, r2, #1
 800c75e:	3101      	adds	r1, #1
 800c760:	e7ef      	b.n	800c742 <__ieee754_sqrt+0x13e>
 800c762:	46e0      	mov	r8, ip
 800c764:	e7be      	b.n	800c6e4 <__ieee754_sqrt+0xe0>
 800c766:	bf00      	nop
 800c768:	7ff00000 	.word	0x7ff00000
 800c76c:	00000000 	.word	0x00000000

0800c770 <__kernel_cos>:
 800c770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c774:	ec57 6b10 	vmov	r6, r7, d0
 800c778:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c77c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c780:	ed8d 1b00 	vstr	d1, [sp]
 800c784:	da07      	bge.n	800c796 <__kernel_cos+0x26>
 800c786:	ee10 0a10 	vmov	r0, s0
 800c78a:	4639      	mov	r1, r7
 800c78c:	f7f4 f990 	bl	8000ab0 <__aeabi_d2iz>
 800c790:	2800      	cmp	r0, #0
 800c792:	f000 8088 	beq.w	800c8a6 <__kernel_cos+0x136>
 800c796:	4632      	mov	r2, r6
 800c798:	463b      	mov	r3, r7
 800c79a:	4630      	mov	r0, r6
 800c79c:	4639      	mov	r1, r7
 800c79e:	f7f3 fed7 	bl	8000550 <__aeabi_dmul>
 800c7a2:	4b51      	ldr	r3, [pc, #324]	; (800c8e8 <__kernel_cos+0x178>)
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	460d      	mov	r5, r1
 800c7aa:	f7f3 fed1 	bl	8000550 <__aeabi_dmul>
 800c7ae:	a340      	add	r3, pc, #256	; (adr r3, 800c8b0 <__kernel_cos+0x140>)
 800c7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b4:	4682      	mov	sl, r0
 800c7b6:	468b      	mov	fp, r1
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	4629      	mov	r1, r5
 800c7bc:	f7f3 fec8 	bl	8000550 <__aeabi_dmul>
 800c7c0:	a33d      	add	r3, pc, #244	; (adr r3, 800c8b8 <__kernel_cos+0x148>)
 800c7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c6:	f7f3 fd0d 	bl	80001e4 <__adddf3>
 800c7ca:	4622      	mov	r2, r4
 800c7cc:	462b      	mov	r3, r5
 800c7ce:	f7f3 febf 	bl	8000550 <__aeabi_dmul>
 800c7d2:	a33b      	add	r3, pc, #236	; (adr r3, 800c8c0 <__kernel_cos+0x150>)
 800c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d8:	f7f3 fd02 	bl	80001e0 <__aeabi_dsub>
 800c7dc:	4622      	mov	r2, r4
 800c7de:	462b      	mov	r3, r5
 800c7e0:	f7f3 feb6 	bl	8000550 <__aeabi_dmul>
 800c7e4:	a338      	add	r3, pc, #224	; (adr r3, 800c8c8 <__kernel_cos+0x158>)
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	f7f3 fcfb 	bl	80001e4 <__adddf3>
 800c7ee:	4622      	mov	r2, r4
 800c7f0:	462b      	mov	r3, r5
 800c7f2:	f7f3 fead 	bl	8000550 <__aeabi_dmul>
 800c7f6:	a336      	add	r3, pc, #216	; (adr r3, 800c8d0 <__kernel_cos+0x160>)
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	f7f3 fcf0 	bl	80001e0 <__aeabi_dsub>
 800c800:	4622      	mov	r2, r4
 800c802:	462b      	mov	r3, r5
 800c804:	f7f3 fea4 	bl	8000550 <__aeabi_dmul>
 800c808:	a333      	add	r3, pc, #204	; (adr r3, 800c8d8 <__kernel_cos+0x168>)
 800c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80e:	f7f3 fce9 	bl	80001e4 <__adddf3>
 800c812:	4622      	mov	r2, r4
 800c814:	462b      	mov	r3, r5
 800c816:	f7f3 fe9b 	bl	8000550 <__aeabi_dmul>
 800c81a:	4622      	mov	r2, r4
 800c81c:	462b      	mov	r3, r5
 800c81e:	f7f3 fe97 	bl	8000550 <__aeabi_dmul>
 800c822:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c826:	4604      	mov	r4, r0
 800c828:	460d      	mov	r5, r1
 800c82a:	4630      	mov	r0, r6
 800c82c:	4639      	mov	r1, r7
 800c82e:	f7f3 fe8f 	bl	8000550 <__aeabi_dmul>
 800c832:	460b      	mov	r3, r1
 800c834:	4602      	mov	r2, r0
 800c836:	4629      	mov	r1, r5
 800c838:	4620      	mov	r0, r4
 800c83a:	f7f3 fcd1 	bl	80001e0 <__aeabi_dsub>
 800c83e:	4b2b      	ldr	r3, [pc, #172]	; (800c8ec <__kernel_cos+0x17c>)
 800c840:	4598      	cmp	r8, r3
 800c842:	4606      	mov	r6, r0
 800c844:	460f      	mov	r7, r1
 800c846:	dc10      	bgt.n	800c86a <__kernel_cos+0xfa>
 800c848:	4602      	mov	r2, r0
 800c84a:	460b      	mov	r3, r1
 800c84c:	4650      	mov	r0, sl
 800c84e:	4659      	mov	r1, fp
 800c850:	f7f3 fcc6 	bl	80001e0 <__aeabi_dsub>
 800c854:	460b      	mov	r3, r1
 800c856:	4926      	ldr	r1, [pc, #152]	; (800c8f0 <__kernel_cos+0x180>)
 800c858:	4602      	mov	r2, r0
 800c85a:	2000      	movs	r0, #0
 800c85c:	f7f3 fcc0 	bl	80001e0 <__aeabi_dsub>
 800c860:	ec41 0b10 	vmov	d0, r0, r1
 800c864:	b003      	add	sp, #12
 800c866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c86a:	4b22      	ldr	r3, [pc, #136]	; (800c8f4 <__kernel_cos+0x184>)
 800c86c:	4920      	ldr	r1, [pc, #128]	; (800c8f0 <__kernel_cos+0x180>)
 800c86e:	4598      	cmp	r8, r3
 800c870:	bfcc      	ite	gt
 800c872:	4d21      	ldrgt	r5, [pc, #132]	; (800c8f8 <__kernel_cos+0x188>)
 800c874:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c878:	2400      	movs	r4, #0
 800c87a:	4622      	mov	r2, r4
 800c87c:	462b      	mov	r3, r5
 800c87e:	2000      	movs	r0, #0
 800c880:	f7f3 fcae 	bl	80001e0 <__aeabi_dsub>
 800c884:	4622      	mov	r2, r4
 800c886:	4680      	mov	r8, r0
 800c888:	4689      	mov	r9, r1
 800c88a:	462b      	mov	r3, r5
 800c88c:	4650      	mov	r0, sl
 800c88e:	4659      	mov	r1, fp
 800c890:	f7f3 fca6 	bl	80001e0 <__aeabi_dsub>
 800c894:	4632      	mov	r2, r6
 800c896:	463b      	mov	r3, r7
 800c898:	f7f3 fca2 	bl	80001e0 <__aeabi_dsub>
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4640      	mov	r0, r8
 800c8a2:	4649      	mov	r1, r9
 800c8a4:	e7da      	b.n	800c85c <__kernel_cos+0xec>
 800c8a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c8e0 <__kernel_cos+0x170>
 800c8aa:	e7db      	b.n	800c864 <__kernel_cos+0xf4>
 800c8ac:	f3af 8000 	nop.w
 800c8b0:	be8838d4 	.word	0xbe8838d4
 800c8b4:	bda8fae9 	.word	0xbda8fae9
 800c8b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c8bc:	3e21ee9e 	.word	0x3e21ee9e
 800c8c0:	809c52ad 	.word	0x809c52ad
 800c8c4:	3e927e4f 	.word	0x3e927e4f
 800c8c8:	19cb1590 	.word	0x19cb1590
 800c8cc:	3efa01a0 	.word	0x3efa01a0
 800c8d0:	16c15177 	.word	0x16c15177
 800c8d4:	3f56c16c 	.word	0x3f56c16c
 800c8d8:	5555554c 	.word	0x5555554c
 800c8dc:	3fa55555 	.word	0x3fa55555
 800c8e0:	00000000 	.word	0x00000000
 800c8e4:	3ff00000 	.word	0x3ff00000
 800c8e8:	3fe00000 	.word	0x3fe00000
 800c8ec:	3fd33332 	.word	0x3fd33332
 800c8f0:	3ff00000 	.word	0x3ff00000
 800c8f4:	3fe90000 	.word	0x3fe90000
 800c8f8:	3fd20000 	.word	0x3fd20000
 800c8fc:	00000000 	.word	0x00000000

0800c900 <__kernel_rem_pio2>:
 800c900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c904:	ed2d 8b02 	vpush	{d8}
 800c908:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c90c:	f112 0f14 	cmn.w	r2, #20
 800c910:	9308      	str	r3, [sp, #32]
 800c912:	9101      	str	r1, [sp, #4]
 800c914:	4bc6      	ldr	r3, [pc, #792]	; (800cc30 <__kernel_rem_pio2+0x330>)
 800c916:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c918:	9009      	str	r0, [sp, #36]	; 0x24
 800c91a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c91e:	9304      	str	r3, [sp, #16]
 800c920:	9b08      	ldr	r3, [sp, #32]
 800c922:	f103 33ff 	add.w	r3, r3, #4294967295
 800c926:	bfa8      	it	ge
 800c928:	1ed4      	subge	r4, r2, #3
 800c92a:	9306      	str	r3, [sp, #24]
 800c92c:	bfb2      	itee	lt
 800c92e:	2400      	movlt	r4, #0
 800c930:	2318      	movge	r3, #24
 800c932:	fb94 f4f3 	sdivge	r4, r4, r3
 800c936:	f06f 0317 	mvn.w	r3, #23
 800c93a:	fb04 3303 	mla	r3, r4, r3, r3
 800c93e:	eb03 0a02 	add.w	sl, r3, r2
 800c942:	9b04      	ldr	r3, [sp, #16]
 800c944:	9a06      	ldr	r2, [sp, #24]
 800c946:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800cc20 <__kernel_rem_pio2+0x320>
 800c94a:	eb03 0802 	add.w	r8, r3, r2
 800c94e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c950:	1aa7      	subs	r7, r4, r2
 800c952:	ae20      	add	r6, sp, #128	; 0x80
 800c954:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c958:	2500      	movs	r5, #0
 800c95a:	4545      	cmp	r5, r8
 800c95c:	dd18      	ble.n	800c990 <__kernel_rem_pio2+0x90>
 800c95e:	9b08      	ldr	r3, [sp, #32]
 800c960:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c964:	aa20      	add	r2, sp, #128	; 0x80
 800c966:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800cc20 <__kernel_rem_pio2+0x320>
 800c96a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c96e:	f1c3 0301 	rsb	r3, r3, #1
 800c972:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c976:	9307      	str	r3, [sp, #28]
 800c978:	9b07      	ldr	r3, [sp, #28]
 800c97a:	9a04      	ldr	r2, [sp, #16]
 800c97c:	4443      	add	r3, r8
 800c97e:	429a      	cmp	r2, r3
 800c980:	db2f      	blt.n	800c9e2 <__kernel_rem_pio2+0xe2>
 800c982:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c986:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c98a:	462f      	mov	r7, r5
 800c98c:	2600      	movs	r6, #0
 800c98e:	e01b      	b.n	800c9c8 <__kernel_rem_pio2+0xc8>
 800c990:	42ef      	cmn	r7, r5
 800c992:	d407      	bmi.n	800c9a4 <__kernel_rem_pio2+0xa4>
 800c994:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c998:	f7f3 fd70 	bl	800047c <__aeabi_i2d>
 800c99c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c9a0:	3501      	adds	r5, #1
 800c9a2:	e7da      	b.n	800c95a <__kernel_rem_pio2+0x5a>
 800c9a4:	ec51 0b18 	vmov	r0, r1, d8
 800c9a8:	e7f8      	b.n	800c99c <__kernel_rem_pio2+0x9c>
 800c9aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9ae:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c9b2:	f7f3 fdcd 	bl	8000550 <__aeabi_dmul>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9be:	f7f3 fc11 	bl	80001e4 <__adddf3>
 800c9c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9c6:	3601      	adds	r6, #1
 800c9c8:	9b06      	ldr	r3, [sp, #24]
 800c9ca:	429e      	cmp	r6, r3
 800c9cc:	f1a7 0708 	sub.w	r7, r7, #8
 800c9d0:	ddeb      	ble.n	800c9aa <__kernel_rem_pio2+0xaa>
 800c9d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c9d6:	3508      	adds	r5, #8
 800c9d8:	ecab 7b02 	vstmia	fp!, {d7}
 800c9dc:	f108 0801 	add.w	r8, r8, #1
 800c9e0:	e7ca      	b.n	800c978 <__kernel_rem_pio2+0x78>
 800c9e2:	9b04      	ldr	r3, [sp, #16]
 800c9e4:	aa0c      	add	r2, sp, #48	; 0x30
 800c9e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9ec:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c9ee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c9f2:	9c04      	ldr	r4, [sp, #16]
 800c9f4:	930a      	str	r3, [sp, #40]	; 0x28
 800c9f6:	ab98      	add	r3, sp, #608	; 0x260
 800c9f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c9fc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ca00:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ca04:	f8cd b008 	str.w	fp, [sp, #8]
 800ca08:	4625      	mov	r5, r4
 800ca0a:	2d00      	cmp	r5, #0
 800ca0c:	dc78      	bgt.n	800cb00 <__kernel_rem_pio2+0x200>
 800ca0e:	ec47 6b10 	vmov	d0, r6, r7
 800ca12:	4650      	mov	r0, sl
 800ca14:	f000 fda8 	bl	800d568 <scalbn>
 800ca18:	ec57 6b10 	vmov	r6, r7, d0
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ca22:	ee10 0a10 	vmov	r0, s0
 800ca26:	4639      	mov	r1, r7
 800ca28:	f7f3 fd92 	bl	8000550 <__aeabi_dmul>
 800ca2c:	ec41 0b10 	vmov	d0, r0, r1
 800ca30:	f000 fd12 	bl	800d458 <floor>
 800ca34:	4b7f      	ldr	r3, [pc, #508]	; (800cc34 <__kernel_rem_pio2+0x334>)
 800ca36:	ec51 0b10 	vmov	r0, r1, d0
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f7f3 fd88 	bl	8000550 <__aeabi_dmul>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4630      	mov	r0, r6
 800ca46:	4639      	mov	r1, r7
 800ca48:	f7f3 fbca 	bl	80001e0 <__aeabi_dsub>
 800ca4c:	460f      	mov	r7, r1
 800ca4e:	4606      	mov	r6, r0
 800ca50:	f7f4 f82e 	bl	8000ab0 <__aeabi_d2iz>
 800ca54:	9007      	str	r0, [sp, #28]
 800ca56:	f7f3 fd11 	bl	800047c <__aeabi_i2d>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	4630      	mov	r0, r6
 800ca60:	4639      	mov	r1, r7
 800ca62:	f7f3 fbbd 	bl	80001e0 <__aeabi_dsub>
 800ca66:	f1ba 0f00 	cmp.w	sl, #0
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	460f      	mov	r7, r1
 800ca6e:	dd70      	ble.n	800cb52 <__kernel_rem_pio2+0x252>
 800ca70:	1e62      	subs	r2, r4, #1
 800ca72:	ab0c      	add	r3, sp, #48	; 0x30
 800ca74:	9d07      	ldr	r5, [sp, #28]
 800ca76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ca7a:	f1ca 0118 	rsb	r1, sl, #24
 800ca7e:	fa40 f301 	asr.w	r3, r0, r1
 800ca82:	441d      	add	r5, r3
 800ca84:	408b      	lsls	r3, r1
 800ca86:	1ac0      	subs	r0, r0, r3
 800ca88:	ab0c      	add	r3, sp, #48	; 0x30
 800ca8a:	9507      	str	r5, [sp, #28]
 800ca8c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ca90:	f1ca 0317 	rsb	r3, sl, #23
 800ca94:	fa40 f303 	asr.w	r3, r0, r3
 800ca98:	9302      	str	r3, [sp, #8]
 800ca9a:	9b02      	ldr	r3, [sp, #8]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	dd66      	ble.n	800cb6e <__kernel_rem_pio2+0x26e>
 800caa0:	9b07      	ldr	r3, [sp, #28]
 800caa2:	2200      	movs	r2, #0
 800caa4:	3301      	adds	r3, #1
 800caa6:	9307      	str	r3, [sp, #28]
 800caa8:	4615      	mov	r5, r2
 800caaa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800caae:	4294      	cmp	r4, r2
 800cab0:	f300 8099 	bgt.w	800cbe6 <__kernel_rem_pio2+0x2e6>
 800cab4:	f1ba 0f00 	cmp.w	sl, #0
 800cab8:	dd07      	ble.n	800caca <__kernel_rem_pio2+0x1ca>
 800caba:	f1ba 0f01 	cmp.w	sl, #1
 800cabe:	f000 80a5 	beq.w	800cc0c <__kernel_rem_pio2+0x30c>
 800cac2:	f1ba 0f02 	cmp.w	sl, #2
 800cac6:	f000 80c1 	beq.w	800cc4c <__kernel_rem_pio2+0x34c>
 800caca:	9b02      	ldr	r3, [sp, #8]
 800cacc:	2b02      	cmp	r3, #2
 800cace:	d14e      	bne.n	800cb6e <__kernel_rem_pio2+0x26e>
 800cad0:	4632      	mov	r2, r6
 800cad2:	463b      	mov	r3, r7
 800cad4:	4958      	ldr	r1, [pc, #352]	; (800cc38 <__kernel_rem_pio2+0x338>)
 800cad6:	2000      	movs	r0, #0
 800cad8:	f7f3 fb82 	bl	80001e0 <__aeabi_dsub>
 800cadc:	4606      	mov	r6, r0
 800cade:	460f      	mov	r7, r1
 800cae0:	2d00      	cmp	r5, #0
 800cae2:	d044      	beq.n	800cb6e <__kernel_rem_pio2+0x26e>
 800cae4:	4650      	mov	r0, sl
 800cae6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800cc28 <__kernel_rem_pio2+0x328>
 800caea:	f000 fd3d 	bl	800d568 <scalbn>
 800caee:	4630      	mov	r0, r6
 800caf0:	4639      	mov	r1, r7
 800caf2:	ec53 2b10 	vmov	r2, r3, d0
 800caf6:	f7f3 fb73 	bl	80001e0 <__aeabi_dsub>
 800cafa:	4606      	mov	r6, r0
 800cafc:	460f      	mov	r7, r1
 800cafe:	e036      	b.n	800cb6e <__kernel_rem_pio2+0x26e>
 800cb00:	4b4e      	ldr	r3, [pc, #312]	; (800cc3c <__kernel_rem_pio2+0x33c>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	4630      	mov	r0, r6
 800cb06:	4639      	mov	r1, r7
 800cb08:	f7f3 fd22 	bl	8000550 <__aeabi_dmul>
 800cb0c:	f7f3 ffd0 	bl	8000ab0 <__aeabi_d2iz>
 800cb10:	f7f3 fcb4 	bl	800047c <__aeabi_i2d>
 800cb14:	4b4a      	ldr	r3, [pc, #296]	; (800cc40 <__kernel_rem_pio2+0x340>)
 800cb16:	2200      	movs	r2, #0
 800cb18:	4680      	mov	r8, r0
 800cb1a:	4689      	mov	r9, r1
 800cb1c:	f7f3 fd18 	bl	8000550 <__aeabi_dmul>
 800cb20:	4602      	mov	r2, r0
 800cb22:	460b      	mov	r3, r1
 800cb24:	4630      	mov	r0, r6
 800cb26:	4639      	mov	r1, r7
 800cb28:	f7f3 fb5a 	bl	80001e0 <__aeabi_dsub>
 800cb2c:	f7f3 ffc0 	bl	8000ab0 <__aeabi_d2iz>
 800cb30:	9b02      	ldr	r3, [sp, #8]
 800cb32:	f843 0b04 	str.w	r0, [r3], #4
 800cb36:	3d01      	subs	r5, #1
 800cb38:	9302      	str	r3, [sp, #8]
 800cb3a:	ab70      	add	r3, sp, #448	; 0x1c0
 800cb3c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb44:	4640      	mov	r0, r8
 800cb46:	4649      	mov	r1, r9
 800cb48:	f7f3 fb4c 	bl	80001e4 <__adddf3>
 800cb4c:	4606      	mov	r6, r0
 800cb4e:	460f      	mov	r7, r1
 800cb50:	e75b      	b.n	800ca0a <__kernel_rem_pio2+0x10a>
 800cb52:	d105      	bne.n	800cb60 <__kernel_rem_pio2+0x260>
 800cb54:	1e63      	subs	r3, r4, #1
 800cb56:	aa0c      	add	r2, sp, #48	; 0x30
 800cb58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cb5c:	15c3      	asrs	r3, r0, #23
 800cb5e:	e79b      	b.n	800ca98 <__kernel_rem_pio2+0x198>
 800cb60:	4b38      	ldr	r3, [pc, #224]	; (800cc44 <__kernel_rem_pio2+0x344>)
 800cb62:	2200      	movs	r2, #0
 800cb64:	f7f3 ff7a 	bl	8000a5c <__aeabi_dcmpge>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d139      	bne.n	800cbe0 <__kernel_rem_pio2+0x2e0>
 800cb6c:	9002      	str	r0, [sp, #8]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	2300      	movs	r3, #0
 800cb72:	4630      	mov	r0, r6
 800cb74:	4639      	mov	r1, r7
 800cb76:	f7f3 ff53 	bl	8000a20 <__aeabi_dcmpeq>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	f000 80b4 	beq.w	800cce8 <__kernel_rem_pio2+0x3e8>
 800cb80:	f104 3bff 	add.w	fp, r4, #4294967295
 800cb84:	465b      	mov	r3, fp
 800cb86:	2200      	movs	r2, #0
 800cb88:	9904      	ldr	r1, [sp, #16]
 800cb8a:	428b      	cmp	r3, r1
 800cb8c:	da65      	bge.n	800cc5a <__kernel_rem_pio2+0x35a>
 800cb8e:	2a00      	cmp	r2, #0
 800cb90:	d07b      	beq.n	800cc8a <__kernel_rem_pio2+0x38a>
 800cb92:	ab0c      	add	r3, sp, #48	; 0x30
 800cb94:	f1aa 0a18 	sub.w	sl, sl, #24
 800cb98:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f000 80a0 	beq.w	800cce2 <__kernel_rem_pio2+0x3e2>
 800cba2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800cc28 <__kernel_rem_pio2+0x328>
 800cba6:	4650      	mov	r0, sl
 800cba8:	f000 fcde 	bl	800d568 <scalbn>
 800cbac:	4f23      	ldr	r7, [pc, #140]	; (800cc3c <__kernel_rem_pio2+0x33c>)
 800cbae:	ec55 4b10 	vmov	r4, r5, d0
 800cbb2:	46d8      	mov	r8, fp
 800cbb4:	2600      	movs	r6, #0
 800cbb6:	f1b8 0f00 	cmp.w	r8, #0
 800cbba:	f280 80cf 	bge.w	800cd5c <__kernel_rem_pio2+0x45c>
 800cbbe:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800cc20 <__kernel_rem_pio2+0x320>
 800cbc2:	465f      	mov	r7, fp
 800cbc4:	f04f 0800 	mov.w	r8, #0
 800cbc8:	2f00      	cmp	r7, #0
 800cbca:	f2c0 80fd 	blt.w	800cdc8 <__kernel_rem_pio2+0x4c8>
 800cbce:	ab70      	add	r3, sp, #448	; 0x1c0
 800cbd0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800cc48 <__kernel_rem_pio2+0x348>
 800cbd4:	ec55 4b18 	vmov	r4, r5, d8
 800cbd8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800cbdc:	2600      	movs	r6, #0
 800cbde:	e0e5      	b.n	800cdac <__kernel_rem_pio2+0x4ac>
 800cbe0:	2302      	movs	r3, #2
 800cbe2:	9302      	str	r3, [sp, #8]
 800cbe4:	e75c      	b.n	800caa0 <__kernel_rem_pio2+0x1a0>
 800cbe6:	f8db 3000 	ldr.w	r3, [fp]
 800cbea:	b955      	cbnz	r5, 800cc02 <__kernel_rem_pio2+0x302>
 800cbec:	b123      	cbz	r3, 800cbf8 <__kernel_rem_pio2+0x2f8>
 800cbee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cbf2:	f8cb 3000 	str.w	r3, [fp]
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	3201      	adds	r2, #1
 800cbfa:	f10b 0b04 	add.w	fp, fp, #4
 800cbfe:	461d      	mov	r5, r3
 800cc00:	e755      	b.n	800caae <__kernel_rem_pio2+0x1ae>
 800cc02:	1acb      	subs	r3, r1, r3
 800cc04:	f8cb 3000 	str.w	r3, [fp]
 800cc08:	462b      	mov	r3, r5
 800cc0a:	e7f5      	b.n	800cbf8 <__kernel_rem_pio2+0x2f8>
 800cc0c:	1e62      	subs	r2, r4, #1
 800cc0e:	ab0c      	add	r3, sp, #48	; 0x30
 800cc10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc14:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cc18:	a90c      	add	r1, sp, #48	; 0x30
 800cc1a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cc1e:	e754      	b.n	800caca <__kernel_rem_pio2+0x1ca>
	...
 800cc2c:	3ff00000 	.word	0x3ff00000
 800cc30:	0800d8e8 	.word	0x0800d8e8
 800cc34:	40200000 	.word	0x40200000
 800cc38:	3ff00000 	.word	0x3ff00000
 800cc3c:	3e700000 	.word	0x3e700000
 800cc40:	41700000 	.word	0x41700000
 800cc44:	3fe00000 	.word	0x3fe00000
 800cc48:	0800d8a8 	.word	0x0800d8a8
 800cc4c:	1e62      	subs	r2, r4, #1
 800cc4e:	ab0c      	add	r3, sp, #48	; 0x30
 800cc50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc54:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cc58:	e7de      	b.n	800cc18 <__kernel_rem_pio2+0x318>
 800cc5a:	a90c      	add	r1, sp, #48	; 0x30
 800cc5c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cc60:	3b01      	subs	r3, #1
 800cc62:	430a      	orrs	r2, r1
 800cc64:	e790      	b.n	800cb88 <__kernel_rem_pio2+0x288>
 800cc66:	3301      	adds	r3, #1
 800cc68:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cc6c:	2900      	cmp	r1, #0
 800cc6e:	d0fa      	beq.n	800cc66 <__kernel_rem_pio2+0x366>
 800cc70:	9a08      	ldr	r2, [sp, #32]
 800cc72:	18e3      	adds	r3, r4, r3
 800cc74:	18a6      	adds	r6, r4, r2
 800cc76:	aa20      	add	r2, sp, #128	; 0x80
 800cc78:	1c65      	adds	r5, r4, #1
 800cc7a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800cc7e:	9302      	str	r3, [sp, #8]
 800cc80:	9b02      	ldr	r3, [sp, #8]
 800cc82:	42ab      	cmp	r3, r5
 800cc84:	da04      	bge.n	800cc90 <__kernel_rem_pio2+0x390>
 800cc86:	461c      	mov	r4, r3
 800cc88:	e6b5      	b.n	800c9f6 <__kernel_rem_pio2+0xf6>
 800cc8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e7eb      	b.n	800cc68 <__kernel_rem_pio2+0x368>
 800cc90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc96:	f7f3 fbf1 	bl	800047c <__aeabi_i2d>
 800cc9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cc9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cca0:	46b3      	mov	fp, r6
 800cca2:	461c      	mov	r4, r3
 800cca4:	2700      	movs	r7, #0
 800cca6:	f04f 0800 	mov.w	r8, #0
 800ccaa:	f04f 0900 	mov.w	r9, #0
 800ccae:	9b06      	ldr	r3, [sp, #24]
 800ccb0:	429f      	cmp	r7, r3
 800ccb2:	dd06      	ble.n	800ccc2 <__kernel_rem_pio2+0x3c2>
 800ccb4:	ab70      	add	r3, sp, #448	; 0x1c0
 800ccb6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ccba:	e9c3 8900 	strd	r8, r9, [r3]
 800ccbe:	3501      	adds	r5, #1
 800ccc0:	e7de      	b.n	800cc80 <__kernel_rem_pio2+0x380>
 800ccc2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ccc6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ccca:	f7f3 fc41 	bl	8000550 <__aeabi_dmul>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	4640      	mov	r0, r8
 800ccd4:	4649      	mov	r1, r9
 800ccd6:	f7f3 fa85 	bl	80001e4 <__adddf3>
 800ccda:	3701      	adds	r7, #1
 800ccdc:	4680      	mov	r8, r0
 800ccde:	4689      	mov	r9, r1
 800cce0:	e7e5      	b.n	800ccae <__kernel_rem_pio2+0x3ae>
 800cce2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cce6:	e754      	b.n	800cb92 <__kernel_rem_pio2+0x292>
 800cce8:	ec47 6b10 	vmov	d0, r6, r7
 800ccec:	f1ca 0000 	rsb	r0, sl, #0
 800ccf0:	f000 fc3a 	bl	800d568 <scalbn>
 800ccf4:	ec57 6b10 	vmov	r6, r7, d0
 800ccf8:	4b9f      	ldr	r3, [pc, #636]	; (800cf78 <__kernel_rem_pio2+0x678>)
 800ccfa:	ee10 0a10 	vmov	r0, s0
 800ccfe:	2200      	movs	r2, #0
 800cd00:	4639      	mov	r1, r7
 800cd02:	f7f3 feab 	bl	8000a5c <__aeabi_dcmpge>
 800cd06:	b300      	cbz	r0, 800cd4a <__kernel_rem_pio2+0x44a>
 800cd08:	4b9c      	ldr	r3, [pc, #624]	; (800cf7c <__kernel_rem_pio2+0x67c>)
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	4639      	mov	r1, r7
 800cd10:	f7f3 fc1e 	bl	8000550 <__aeabi_dmul>
 800cd14:	f7f3 fecc 	bl	8000ab0 <__aeabi_d2iz>
 800cd18:	4605      	mov	r5, r0
 800cd1a:	f7f3 fbaf 	bl	800047c <__aeabi_i2d>
 800cd1e:	4b96      	ldr	r3, [pc, #600]	; (800cf78 <__kernel_rem_pio2+0x678>)
 800cd20:	2200      	movs	r2, #0
 800cd22:	f7f3 fc15 	bl	8000550 <__aeabi_dmul>
 800cd26:	460b      	mov	r3, r1
 800cd28:	4602      	mov	r2, r0
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	f7f3 fa57 	bl	80001e0 <__aeabi_dsub>
 800cd32:	f7f3 febd 	bl	8000ab0 <__aeabi_d2iz>
 800cd36:	f104 0b01 	add.w	fp, r4, #1
 800cd3a:	ab0c      	add	r3, sp, #48	; 0x30
 800cd3c:	f10a 0a18 	add.w	sl, sl, #24
 800cd40:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cd44:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800cd48:	e72b      	b.n	800cba2 <__kernel_rem_pio2+0x2a2>
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	4639      	mov	r1, r7
 800cd4e:	f7f3 feaf 	bl	8000ab0 <__aeabi_d2iz>
 800cd52:	ab0c      	add	r3, sp, #48	; 0x30
 800cd54:	46a3      	mov	fp, r4
 800cd56:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cd5a:	e722      	b.n	800cba2 <__kernel_rem_pio2+0x2a2>
 800cd5c:	ab70      	add	r3, sp, #448	; 0x1c0
 800cd5e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800cd62:	ab0c      	add	r3, sp, #48	; 0x30
 800cd64:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cd68:	f7f3 fb88 	bl	800047c <__aeabi_i2d>
 800cd6c:	4622      	mov	r2, r4
 800cd6e:	462b      	mov	r3, r5
 800cd70:	f7f3 fbee 	bl	8000550 <__aeabi_dmul>
 800cd74:	4632      	mov	r2, r6
 800cd76:	e9c9 0100 	strd	r0, r1, [r9]
 800cd7a:	463b      	mov	r3, r7
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	4629      	mov	r1, r5
 800cd80:	f7f3 fbe6 	bl	8000550 <__aeabi_dmul>
 800cd84:	f108 38ff 	add.w	r8, r8, #4294967295
 800cd88:	4604      	mov	r4, r0
 800cd8a:	460d      	mov	r5, r1
 800cd8c:	e713      	b.n	800cbb6 <__kernel_rem_pio2+0x2b6>
 800cd8e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800cd92:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800cd96:	f7f3 fbdb 	bl	8000550 <__aeabi_dmul>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	4620      	mov	r0, r4
 800cda0:	4629      	mov	r1, r5
 800cda2:	f7f3 fa1f 	bl	80001e4 <__adddf3>
 800cda6:	3601      	adds	r6, #1
 800cda8:	4604      	mov	r4, r0
 800cdaa:	460d      	mov	r5, r1
 800cdac:	9b04      	ldr	r3, [sp, #16]
 800cdae:	429e      	cmp	r6, r3
 800cdb0:	dc01      	bgt.n	800cdb6 <__kernel_rem_pio2+0x4b6>
 800cdb2:	45b0      	cmp	r8, r6
 800cdb4:	daeb      	bge.n	800cd8e <__kernel_rem_pio2+0x48e>
 800cdb6:	ab48      	add	r3, sp, #288	; 0x120
 800cdb8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cdbc:	e9c3 4500 	strd	r4, r5, [r3]
 800cdc0:	3f01      	subs	r7, #1
 800cdc2:	f108 0801 	add.w	r8, r8, #1
 800cdc6:	e6ff      	b.n	800cbc8 <__kernel_rem_pio2+0x2c8>
 800cdc8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800cdca:	2b02      	cmp	r3, #2
 800cdcc:	dc0b      	bgt.n	800cde6 <__kernel_rem_pio2+0x4e6>
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	dc6e      	bgt.n	800ceb0 <__kernel_rem_pio2+0x5b0>
 800cdd2:	d045      	beq.n	800ce60 <__kernel_rem_pio2+0x560>
 800cdd4:	9b07      	ldr	r3, [sp, #28]
 800cdd6:	f003 0007 	and.w	r0, r3, #7
 800cdda:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cdde:	ecbd 8b02 	vpop	{d8}
 800cde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800cde8:	2b03      	cmp	r3, #3
 800cdea:	d1f3      	bne.n	800cdd4 <__kernel_rem_pio2+0x4d4>
 800cdec:	ab48      	add	r3, sp, #288	; 0x120
 800cdee:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800cdf2:	46d0      	mov	r8, sl
 800cdf4:	46d9      	mov	r9, fp
 800cdf6:	f1b9 0f00 	cmp.w	r9, #0
 800cdfa:	f1a8 0808 	sub.w	r8, r8, #8
 800cdfe:	dc64      	bgt.n	800ceca <__kernel_rem_pio2+0x5ca>
 800ce00:	465c      	mov	r4, fp
 800ce02:	2c01      	cmp	r4, #1
 800ce04:	f1aa 0a08 	sub.w	sl, sl, #8
 800ce08:	dc7e      	bgt.n	800cf08 <__kernel_rem_pio2+0x608>
 800ce0a:	2000      	movs	r0, #0
 800ce0c:	2100      	movs	r1, #0
 800ce0e:	f1bb 0f01 	cmp.w	fp, #1
 800ce12:	f300 8097 	bgt.w	800cf44 <__kernel_rem_pio2+0x644>
 800ce16:	9b02      	ldr	r3, [sp, #8]
 800ce18:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800ce1c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f040 8099 	bne.w	800cf58 <__kernel_rem_pio2+0x658>
 800ce26:	9b01      	ldr	r3, [sp, #4]
 800ce28:	e9c3 5600 	strd	r5, r6, [r3]
 800ce2c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ce30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ce34:	e7ce      	b.n	800cdd4 <__kernel_rem_pio2+0x4d4>
 800ce36:	ab48      	add	r3, sp, #288	; 0x120
 800ce38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ce3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce40:	f7f3 f9d0 	bl	80001e4 <__adddf3>
 800ce44:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce48:	f1bb 0f00 	cmp.w	fp, #0
 800ce4c:	daf3      	bge.n	800ce36 <__kernel_rem_pio2+0x536>
 800ce4e:	9b02      	ldr	r3, [sp, #8]
 800ce50:	b113      	cbz	r3, 800ce58 <__kernel_rem_pio2+0x558>
 800ce52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce56:	4619      	mov	r1, r3
 800ce58:	9b01      	ldr	r3, [sp, #4]
 800ce5a:	e9c3 0100 	strd	r0, r1, [r3]
 800ce5e:	e7b9      	b.n	800cdd4 <__kernel_rem_pio2+0x4d4>
 800ce60:	2000      	movs	r0, #0
 800ce62:	2100      	movs	r1, #0
 800ce64:	e7f0      	b.n	800ce48 <__kernel_rem_pio2+0x548>
 800ce66:	ab48      	add	r3, sp, #288	; 0x120
 800ce68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce70:	f7f3 f9b8 	bl	80001e4 <__adddf3>
 800ce74:	3c01      	subs	r4, #1
 800ce76:	2c00      	cmp	r4, #0
 800ce78:	daf5      	bge.n	800ce66 <__kernel_rem_pio2+0x566>
 800ce7a:	9b02      	ldr	r3, [sp, #8]
 800ce7c:	b1e3      	cbz	r3, 800ceb8 <__kernel_rem_pio2+0x5b8>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce84:	9c01      	ldr	r4, [sp, #4]
 800ce86:	e9c4 2300 	strd	r2, r3, [r4]
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ce92:	f7f3 f9a5 	bl	80001e0 <__aeabi_dsub>
 800ce96:	ad4a      	add	r5, sp, #296	; 0x128
 800ce98:	2401      	movs	r4, #1
 800ce9a:	45a3      	cmp	fp, r4
 800ce9c:	da0f      	bge.n	800cebe <__kernel_rem_pio2+0x5be>
 800ce9e:	9b02      	ldr	r3, [sp, #8]
 800cea0:	b113      	cbz	r3, 800cea8 <__kernel_rem_pio2+0x5a8>
 800cea2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cea6:	4619      	mov	r1, r3
 800cea8:	9b01      	ldr	r3, [sp, #4]
 800ceaa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ceae:	e791      	b.n	800cdd4 <__kernel_rem_pio2+0x4d4>
 800ceb0:	465c      	mov	r4, fp
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	e7de      	b.n	800ce76 <__kernel_rem_pio2+0x576>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	460b      	mov	r3, r1
 800cebc:	e7e2      	b.n	800ce84 <__kernel_rem_pio2+0x584>
 800cebe:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800cec2:	f7f3 f98f 	bl	80001e4 <__adddf3>
 800cec6:	3401      	adds	r4, #1
 800cec8:	e7e7      	b.n	800ce9a <__kernel_rem_pio2+0x59a>
 800ceca:	e9d8 4500 	ldrd	r4, r5, [r8]
 800cece:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800ced2:	4620      	mov	r0, r4
 800ced4:	4632      	mov	r2, r6
 800ced6:	463b      	mov	r3, r7
 800ced8:	4629      	mov	r1, r5
 800ceda:	f7f3 f983 	bl	80001e4 <__adddf3>
 800cede:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cee2:	4602      	mov	r2, r0
 800cee4:	460b      	mov	r3, r1
 800cee6:	4620      	mov	r0, r4
 800cee8:	4629      	mov	r1, r5
 800ceea:	f7f3 f979 	bl	80001e0 <__aeabi_dsub>
 800ceee:	4632      	mov	r2, r6
 800cef0:	463b      	mov	r3, r7
 800cef2:	f7f3 f977 	bl	80001e4 <__adddf3>
 800cef6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cefa:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800cefe:	ed88 7b00 	vstr	d7, [r8]
 800cf02:	f109 39ff 	add.w	r9, r9, #4294967295
 800cf06:	e776      	b.n	800cdf6 <__kernel_rem_pio2+0x4f6>
 800cf08:	e9da 8900 	ldrd	r8, r9, [sl]
 800cf0c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800cf10:	4640      	mov	r0, r8
 800cf12:	4632      	mov	r2, r6
 800cf14:	463b      	mov	r3, r7
 800cf16:	4649      	mov	r1, r9
 800cf18:	f7f3 f964 	bl	80001e4 <__adddf3>
 800cf1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf20:	4602      	mov	r2, r0
 800cf22:	460b      	mov	r3, r1
 800cf24:	4640      	mov	r0, r8
 800cf26:	4649      	mov	r1, r9
 800cf28:	f7f3 f95a 	bl	80001e0 <__aeabi_dsub>
 800cf2c:	4632      	mov	r2, r6
 800cf2e:	463b      	mov	r3, r7
 800cf30:	f7f3 f958 	bl	80001e4 <__adddf3>
 800cf34:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cf38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cf3c:	ed8a 7b00 	vstr	d7, [sl]
 800cf40:	3c01      	subs	r4, #1
 800cf42:	e75e      	b.n	800ce02 <__kernel_rem_pio2+0x502>
 800cf44:	ab48      	add	r3, sp, #288	; 0x120
 800cf46:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4e:	f7f3 f949 	bl	80001e4 <__adddf3>
 800cf52:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cf56:	e75a      	b.n	800ce0e <__kernel_rem_pio2+0x50e>
 800cf58:	9b01      	ldr	r3, [sp, #4]
 800cf5a:	9a01      	ldr	r2, [sp, #4]
 800cf5c:	601d      	str	r5, [r3, #0]
 800cf5e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800cf62:	605c      	str	r4, [r3, #4]
 800cf64:	609f      	str	r7, [r3, #8]
 800cf66:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800cf6a:	60d3      	str	r3, [r2, #12]
 800cf6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf70:	6110      	str	r0, [r2, #16]
 800cf72:	6153      	str	r3, [r2, #20]
 800cf74:	e72e      	b.n	800cdd4 <__kernel_rem_pio2+0x4d4>
 800cf76:	bf00      	nop
 800cf78:	41700000 	.word	0x41700000
 800cf7c:	3e700000 	.word	0x3e700000

0800cf80 <__kernel_sin>:
 800cf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf84:	ed2d 8b04 	vpush	{d8-d9}
 800cf88:	eeb0 8a41 	vmov.f32	s16, s2
 800cf8c:	eef0 8a61 	vmov.f32	s17, s3
 800cf90:	ec55 4b10 	vmov	r4, r5, d0
 800cf94:	b083      	sub	sp, #12
 800cf96:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cf9a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cf9e:	9001      	str	r0, [sp, #4]
 800cfa0:	da06      	bge.n	800cfb0 <__kernel_sin+0x30>
 800cfa2:	ee10 0a10 	vmov	r0, s0
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	f7f3 fd82 	bl	8000ab0 <__aeabi_d2iz>
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d051      	beq.n	800d054 <__kernel_sin+0xd4>
 800cfb0:	4622      	mov	r2, r4
 800cfb2:	462b      	mov	r3, r5
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	4629      	mov	r1, r5
 800cfb8:	f7f3 faca 	bl	8000550 <__aeabi_dmul>
 800cfbc:	4682      	mov	sl, r0
 800cfbe:	468b      	mov	fp, r1
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	4629      	mov	r1, r5
 800cfc8:	f7f3 fac2 	bl	8000550 <__aeabi_dmul>
 800cfcc:	a341      	add	r3, pc, #260	; (adr r3, 800d0d4 <__kernel_sin+0x154>)
 800cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd2:	4680      	mov	r8, r0
 800cfd4:	4689      	mov	r9, r1
 800cfd6:	4650      	mov	r0, sl
 800cfd8:	4659      	mov	r1, fp
 800cfda:	f7f3 fab9 	bl	8000550 <__aeabi_dmul>
 800cfde:	a33f      	add	r3, pc, #252	; (adr r3, 800d0dc <__kernel_sin+0x15c>)
 800cfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe4:	f7f3 f8fc 	bl	80001e0 <__aeabi_dsub>
 800cfe8:	4652      	mov	r2, sl
 800cfea:	465b      	mov	r3, fp
 800cfec:	f7f3 fab0 	bl	8000550 <__aeabi_dmul>
 800cff0:	a33c      	add	r3, pc, #240	; (adr r3, 800d0e4 <__kernel_sin+0x164>)
 800cff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff6:	f7f3 f8f5 	bl	80001e4 <__adddf3>
 800cffa:	4652      	mov	r2, sl
 800cffc:	465b      	mov	r3, fp
 800cffe:	f7f3 faa7 	bl	8000550 <__aeabi_dmul>
 800d002:	a33a      	add	r3, pc, #232	; (adr r3, 800d0ec <__kernel_sin+0x16c>)
 800d004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d008:	f7f3 f8ea 	bl	80001e0 <__aeabi_dsub>
 800d00c:	4652      	mov	r2, sl
 800d00e:	465b      	mov	r3, fp
 800d010:	f7f3 fa9e 	bl	8000550 <__aeabi_dmul>
 800d014:	a337      	add	r3, pc, #220	; (adr r3, 800d0f4 <__kernel_sin+0x174>)
 800d016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01a:	f7f3 f8e3 	bl	80001e4 <__adddf3>
 800d01e:	9b01      	ldr	r3, [sp, #4]
 800d020:	4606      	mov	r6, r0
 800d022:	460f      	mov	r7, r1
 800d024:	b9eb      	cbnz	r3, 800d062 <__kernel_sin+0xe2>
 800d026:	4602      	mov	r2, r0
 800d028:	460b      	mov	r3, r1
 800d02a:	4650      	mov	r0, sl
 800d02c:	4659      	mov	r1, fp
 800d02e:	f7f3 fa8f 	bl	8000550 <__aeabi_dmul>
 800d032:	a325      	add	r3, pc, #148	; (adr r3, 800d0c8 <__kernel_sin+0x148>)
 800d034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d038:	f7f3 f8d2 	bl	80001e0 <__aeabi_dsub>
 800d03c:	4642      	mov	r2, r8
 800d03e:	464b      	mov	r3, r9
 800d040:	f7f3 fa86 	bl	8000550 <__aeabi_dmul>
 800d044:	4602      	mov	r2, r0
 800d046:	460b      	mov	r3, r1
 800d048:	4620      	mov	r0, r4
 800d04a:	4629      	mov	r1, r5
 800d04c:	f7f3 f8ca 	bl	80001e4 <__adddf3>
 800d050:	4604      	mov	r4, r0
 800d052:	460d      	mov	r5, r1
 800d054:	ec45 4b10 	vmov	d0, r4, r5
 800d058:	b003      	add	sp, #12
 800d05a:	ecbd 8b04 	vpop	{d8-d9}
 800d05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d062:	4b1b      	ldr	r3, [pc, #108]	; (800d0d0 <__kernel_sin+0x150>)
 800d064:	ec51 0b18 	vmov	r0, r1, d8
 800d068:	2200      	movs	r2, #0
 800d06a:	f7f3 fa71 	bl	8000550 <__aeabi_dmul>
 800d06e:	4632      	mov	r2, r6
 800d070:	ec41 0b19 	vmov	d9, r0, r1
 800d074:	463b      	mov	r3, r7
 800d076:	4640      	mov	r0, r8
 800d078:	4649      	mov	r1, r9
 800d07a:	f7f3 fa69 	bl	8000550 <__aeabi_dmul>
 800d07e:	4602      	mov	r2, r0
 800d080:	460b      	mov	r3, r1
 800d082:	ec51 0b19 	vmov	r0, r1, d9
 800d086:	f7f3 f8ab 	bl	80001e0 <__aeabi_dsub>
 800d08a:	4652      	mov	r2, sl
 800d08c:	465b      	mov	r3, fp
 800d08e:	f7f3 fa5f 	bl	8000550 <__aeabi_dmul>
 800d092:	ec53 2b18 	vmov	r2, r3, d8
 800d096:	f7f3 f8a3 	bl	80001e0 <__aeabi_dsub>
 800d09a:	a30b      	add	r3, pc, #44	; (adr r3, 800d0c8 <__kernel_sin+0x148>)
 800d09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a0:	4606      	mov	r6, r0
 800d0a2:	460f      	mov	r7, r1
 800d0a4:	4640      	mov	r0, r8
 800d0a6:	4649      	mov	r1, r9
 800d0a8:	f7f3 fa52 	bl	8000550 <__aeabi_dmul>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	4639      	mov	r1, r7
 800d0b4:	f7f3 f896 	bl	80001e4 <__adddf3>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	4620      	mov	r0, r4
 800d0be:	4629      	mov	r1, r5
 800d0c0:	f7f3 f88e 	bl	80001e0 <__aeabi_dsub>
 800d0c4:	e7c4      	b.n	800d050 <__kernel_sin+0xd0>
 800d0c6:	bf00      	nop
 800d0c8:	55555549 	.word	0x55555549
 800d0cc:	3fc55555 	.word	0x3fc55555
 800d0d0:	3fe00000 	.word	0x3fe00000
 800d0d4:	5acfd57c 	.word	0x5acfd57c
 800d0d8:	3de5d93a 	.word	0x3de5d93a
 800d0dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800d0e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800d0e4:	57b1fe7d 	.word	0x57b1fe7d
 800d0e8:	3ec71de3 	.word	0x3ec71de3
 800d0ec:	19c161d5 	.word	0x19c161d5
 800d0f0:	3f2a01a0 	.word	0x3f2a01a0
 800d0f4:	1110f8a6 	.word	0x1110f8a6
 800d0f8:	3f811111 	.word	0x3f811111
 800d0fc:	00000000 	.word	0x00000000

0800d100 <atan>:
 800d100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d104:	ec55 4b10 	vmov	r4, r5, d0
 800d108:	4bc3      	ldr	r3, [pc, #780]	; (800d418 <atan+0x318>)
 800d10a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d10e:	429e      	cmp	r6, r3
 800d110:	46ab      	mov	fp, r5
 800d112:	dd18      	ble.n	800d146 <atan+0x46>
 800d114:	4bc1      	ldr	r3, [pc, #772]	; (800d41c <atan+0x31c>)
 800d116:	429e      	cmp	r6, r3
 800d118:	dc01      	bgt.n	800d11e <atan+0x1e>
 800d11a:	d109      	bne.n	800d130 <atan+0x30>
 800d11c:	b144      	cbz	r4, 800d130 <atan+0x30>
 800d11e:	4622      	mov	r2, r4
 800d120:	462b      	mov	r3, r5
 800d122:	4620      	mov	r0, r4
 800d124:	4629      	mov	r1, r5
 800d126:	f7f3 f85d 	bl	80001e4 <__adddf3>
 800d12a:	4604      	mov	r4, r0
 800d12c:	460d      	mov	r5, r1
 800d12e:	e006      	b.n	800d13e <atan+0x3e>
 800d130:	f1bb 0f00 	cmp.w	fp, #0
 800d134:	f300 8131 	bgt.w	800d39a <atan+0x29a>
 800d138:	a59b      	add	r5, pc, #620	; (adr r5, 800d3a8 <atan+0x2a8>)
 800d13a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d13e:	ec45 4b10 	vmov	d0, r4, r5
 800d142:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d146:	4bb6      	ldr	r3, [pc, #728]	; (800d420 <atan+0x320>)
 800d148:	429e      	cmp	r6, r3
 800d14a:	dc14      	bgt.n	800d176 <atan+0x76>
 800d14c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d150:	429e      	cmp	r6, r3
 800d152:	dc0d      	bgt.n	800d170 <atan+0x70>
 800d154:	a396      	add	r3, pc, #600	; (adr r3, 800d3b0 <atan+0x2b0>)
 800d156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15a:	ee10 0a10 	vmov	r0, s0
 800d15e:	4629      	mov	r1, r5
 800d160:	f7f3 f840 	bl	80001e4 <__adddf3>
 800d164:	4baf      	ldr	r3, [pc, #700]	; (800d424 <atan+0x324>)
 800d166:	2200      	movs	r2, #0
 800d168:	f7f3 fc82 	bl	8000a70 <__aeabi_dcmpgt>
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d1e6      	bne.n	800d13e <atan+0x3e>
 800d170:	f04f 3aff 	mov.w	sl, #4294967295
 800d174:	e02b      	b.n	800d1ce <atan+0xce>
 800d176:	f000 f963 	bl	800d440 <fabs>
 800d17a:	4bab      	ldr	r3, [pc, #684]	; (800d428 <atan+0x328>)
 800d17c:	429e      	cmp	r6, r3
 800d17e:	ec55 4b10 	vmov	r4, r5, d0
 800d182:	f300 80bf 	bgt.w	800d304 <atan+0x204>
 800d186:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d18a:	429e      	cmp	r6, r3
 800d18c:	f300 80a0 	bgt.w	800d2d0 <atan+0x1d0>
 800d190:	ee10 2a10 	vmov	r2, s0
 800d194:	ee10 0a10 	vmov	r0, s0
 800d198:	462b      	mov	r3, r5
 800d19a:	4629      	mov	r1, r5
 800d19c:	f7f3 f822 	bl	80001e4 <__adddf3>
 800d1a0:	4ba0      	ldr	r3, [pc, #640]	; (800d424 <atan+0x324>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f7f3 f81c 	bl	80001e0 <__aeabi_dsub>
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	4606      	mov	r6, r0
 800d1ac:	460f      	mov	r7, r1
 800d1ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	4629      	mov	r1, r5
 800d1b6:	f7f3 f815 	bl	80001e4 <__adddf3>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	460b      	mov	r3, r1
 800d1be:	4630      	mov	r0, r6
 800d1c0:	4639      	mov	r1, r7
 800d1c2:	f7f3 faef 	bl	80007a4 <__aeabi_ddiv>
 800d1c6:	f04f 0a00 	mov.w	sl, #0
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	460d      	mov	r5, r1
 800d1ce:	4622      	mov	r2, r4
 800d1d0:	462b      	mov	r3, r5
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	f7f3 f9bb 	bl	8000550 <__aeabi_dmul>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	460b      	mov	r3, r1
 800d1de:	4680      	mov	r8, r0
 800d1e0:	4689      	mov	r9, r1
 800d1e2:	f7f3 f9b5 	bl	8000550 <__aeabi_dmul>
 800d1e6:	a374      	add	r3, pc, #464	; (adr r3, 800d3b8 <atan+0x2b8>)
 800d1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ec:	4606      	mov	r6, r0
 800d1ee:	460f      	mov	r7, r1
 800d1f0:	f7f3 f9ae 	bl	8000550 <__aeabi_dmul>
 800d1f4:	a372      	add	r3, pc, #456	; (adr r3, 800d3c0 <atan+0x2c0>)
 800d1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fa:	f7f2 fff3 	bl	80001e4 <__adddf3>
 800d1fe:	4632      	mov	r2, r6
 800d200:	463b      	mov	r3, r7
 800d202:	f7f3 f9a5 	bl	8000550 <__aeabi_dmul>
 800d206:	a370      	add	r3, pc, #448	; (adr r3, 800d3c8 <atan+0x2c8>)
 800d208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20c:	f7f2 ffea 	bl	80001e4 <__adddf3>
 800d210:	4632      	mov	r2, r6
 800d212:	463b      	mov	r3, r7
 800d214:	f7f3 f99c 	bl	8000550 <__aeabi_dmul>
 800d218:	a36d      	add	r3, pc, #436	; (adr r3, 800d3d0 <atan+0x2d0>)
 800d21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21e:	f7f2 ffe1 	bl	80001e4 <__adddf3>
 800d222:	4632      	mov	r2, r6
 800d224:	463b      	mov	r3, r7
 800d226:	f7f3 f993 	bl	8000550 <__aeabi_dmul>
 800d22a:	a36b      	add	r3, pc, #428	; (adr r3, 800d3d8 <atan+0x2d8>)
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	f7f2 ffd8 	bl	80001e4 <__adddf3>
 800d234:	4632      	mov	r2, r6
 800d236:	463b      	mov	r3, r7
 800d238:	f7f3 f98a 	bl	8000550 <__aeabi_dmul>
 800d23c:	a368      	add	r3, pc, #416	; (adr r3, 800d3e0 <atan+0x2e0>)
 800d23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d242:	f7f2 ffcf 	bl	80001e4 <__adddf3>
 800d246:	4642      	mov	r2, r8
 800d248:	464b      	mov	r3, r9
 800d24a:	f7f3 f981 	bl	8000550 <__aeabi_dmul>
 800d24e:	a366      	add	r3, pc, #408	; (adr r3, 800d3e8 <atan+0x2e8>)
 800d250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d254:	4680      	mov	r8, r0
 800d256:	4689      	mov	r9, r1
 800d258:	4630      	mov	r0, r6
 800d25a:	4639      	mov	r1, r7
 800d25c:	f7f3 f978 	bl	8000550 <__aeabi_dmul>
 800d260:	a363      	add	r3, pc, #396	; (adr r3, 800d3f0 <atan+0x2f0>)
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	f7f2 ffbb 	bl	80001e0 <__aeabi_dsub>
 800d26a:	4632      	mov	r2, r6
 800d26c:	463b      	mov	r3, r7
 800d26e:	f7f3 f96f 	bl	8000550 <__aeabi_dmul>
 800d272:	a361      	add	r3, pc, #388	; (adr r3, 800d3f8 <atan+0x2f8>)
 800d274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d278:	f7f2 ffb2 	bl	80001e0 <__aeabi_dsub>
 800d27c:	4632      	mov	r2, r6
 800d27e:	463b      	mov	r3, r7
 800d280:	f7f3 f966 	bl	8000550 <__aeabi_dmul>
 800d284:	a35e      	add	r3, pc, #376	; (adr r3, 800d400 <atan+0x300>)
 800d286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28a:	f7f2 ffa9 	bl	80001e0 <__aeabi_dsub>
 800d28e:	4632      	mov	r2, r6
 800d290:	463b      	mov	r3, r7
 800d292:	f7f3 f95d 	bl	8000550 <__aeabi_dmul>
 800d296:	a35c      	add	r3, pc, #368	; (adr r3, 800d408 <atan+0x308>)
 800d298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29c:	f7f2 ffa0 	bl	80001e0 <__aeabi_dsub>
 800d2a0:	4632      	mov	r2, r6
 800d2a2:	463b      	mov	r3, r7
 800d2a4:	f7f3 f954 	bl	8000550 <__aeabi_dmul>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	4640      	mov	r0, r8
 800d2ae:	4649      	mov	r1, r9
 800d2b0:	f7f2 ff98 	bl	80001e4 <__adddf3>
 800d2b4:	4622      	mov	r2, r4
 800d2b6:	462b      	mov	r3, r5
 800d2b8:	f7f3 f94a 	bl	8000550 <__aeabi_dmul>
 800d2bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	d14b      	bne.n	800d35e <atan+0x25e>
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	f7f2 ff89 	bl	80001e0 <__aeabi_dsub>
 800d2ce:	e72c      	b.n	800d12a <atan+0x2a>
 800d2d0:	ee10 0a10 	vmov	r0, s0
 800d2d4:	4b53      	ldr	r3, [pc, #332]	; (800d424 <atan+0x324>)
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	4629      	mov	r1, r5
 800d2da:	f7f2 ff81 	bl	80001e0 <__aeabi_dsub>
 800d2de:	4b51      	ldr	r3, [pc, #324]	; (800d424 <atan+0x324>)
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	460f      	mov	r7, r1
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	4629      	mov	r1, r5
 800d2ea:	f7f2 ff7b 	bl	80001e4 <__adddf3>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	4639      	mov	r1, r7
 800d2f6:	f7f3 fa55 	bl	80007a4 <__aeabi_ddiv>
 800d2fa:	f04f 0a01 	mov.w	sl, #1
 800d2fe:	4604      	mov	r4, r0
 800d300:	460d      	mov	r5, r1
 800d302:	e764      	b.n	800d1ce <atan+0xce>
 800d304:	4b49      	ldr	r3, [pc, #292]	; (800d42c <atan+0x32c>)
 800d306:	429e      	cmp	r6, r3
 800d308:	da1d      	bge.n	800d346 <atan+0x246>
 800d30a:	ee10 0a10 	vmov	r0, s0
 800d30e:	4b48      	ldr	r3, [pc, #288]	; (800d430 <atan+0x330>)
 800d310:	2200      	movs	r2, #0
 800d312:	4629      	mov	r1, r5
 800d314:	f7f2 ff64 	bl	80001e0 <__aeabi_dsub>
 800d318:	4b45      	ldr	r3, [pc, #276]	; (800d430 <atan+0x330>)
 800d31a:	4606      	mov	r6, r0
 800d31c:	460f      	mov	r7, r1
 800d31e:	2200      	movs	r2, #0
 800d320:	4620      	mov	r0, r4
 800d322:	4629      	mov	r1, r5
 800d324:	f7f3 f914 	bl	8000550 <__aeabi_dmul>
 800d328:	4b3e      	ldr	r3, [pc, #248]	; (800d424 <atan+0x324>)
 800d32a:	2200      	movs	r2, #0
 800d32c:	f7f2 ff5a 	bl	80001e4 <__adddf3>
 800d330:	4602      	mov	r2, r0
 800d332:	460b      	mov	r3, r1
 800d334:	4630      	mov	r0, r6
 800d336:	4639      	mov	r1, r7
 800d338:	f7f3 fa34 	bl	80007a4 <__aeabi_ddiv>
 800d33c:	f04f 0a02 	mov.w	sl, #2
 800d340:	4604      	mov	r4, r0
 800d342:	460d      	mov	r5, r1
 800d344:	e743      	b.n	800d1ce <atan+0xce>
 800d346:	462b      	mov	r3, r5
 800d348:	ee10 2a10 	vmov	r2, s0
 800d34c:	4939      	ldr	r1, [pc, #228]	; (800d434 <atan+0x334>)
 800d34e:	2000      	movs	r0, #0
 800d350:	f7f3 fa28 	bl	80007a4 <__aeabi_ddiv>
 800d354:	f04f 0a03 	mov.w	sl, #3
 800d358:	4604      	mov	r4, r0
 800d35a:	460d      	mov	r5, r1
 800d35c:	e737      	b.n	800d1ce <atan+0xce>
 800d35e:	4b36      	ldr	r3, [pc, #216]	; (800d438 <atan+0x338>)
 800d360:	4e36      	ldr	r6, [pc, #216]	; (800d43c <atan+0x33c>)
 800d362:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d366:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d36a:	e9da 2300 	ldrd	r2, r3, [sl]
 800d36e:	f7f2 ff37 	bl	80001e0 <__aeabi_dsub>
 800d372:	4622      	mov	r2, r4
 800d374:	462b      	mov	r3, r5
 800d376:	f7f2 ff33 	bl	80001e0 <__aeabi_dsub>
 800d37a:	4602      	mov	r2, r0
 800d37c:	460b      	mov	r3, r1
 800d37e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d382:	f7f2 ff2d 	bl	80001e0 <__aeabi_dsub>
 800d386:	f1bb 0f00 	cmp.w	fp, #0
 800d38a:	4604      	mov	r4, r0
 800d38c:	460d      	mov	r5, r1
 800d38e:	f6bf aed6 	bge.w	800d13e <atan+0x3e>
 800d392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d396:	461d      	mov	r5, r3
 800d398:	e6d1      	b.n	800d13e <atan+0x3e>
 800d39a:	a51d      	add	r5, pc, #116	; (adr r5, 800d410 <atan+0x310>)
 800d39c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d3a0:	e6cd      	b.n	800d13e <atan+0x3e>
 800d3a2:	bf00      	nop
 800d3a4:	f3af 8000 	nop.w
 800d3a8:	54442d18 	.word	0x54442d18
 800d3ac:	bff921fb 	.word	0xbff921fb
 800d3b0:	8800759c 	.word	0x8800759c
 800d3b4:	7e37e43c 	.word	0x7e37e43c
 800d3b8:	e322da11 	.word	0xe322da11
 800d3bc:	3f90ad3a 	.word	0x3f90ad3a
 800d3c0:	24760deb 	.word	0x24760deb
 800d3c4:	3fa97b4b 	.word	0x3fa97b4b
 800d3c8:	a0d03d51 	.word	0xa0d03d51
 800d3cc:	3fb10d66 	.word	0x3fb10d66
 800d3d0:	c54c206e 	.word	0xc54c206e
 800d3d4:	3fb745cd 	.word	0x3fb745cd
 800d3d8:	920083ff 	.word	0x920083ff
 800d3dc:	3fc24924 	.word	0x3fc24924
 800d3e0:	5555550d 	.word	0x5555550d
 800d3e4:	3fd55555 	.word	0x3fd55555
 800d3e8:	2c6a6c2f 	.word	0x2c6a6c2f
 800d3ec:	bfa2b444 	.word	0xbfa2b444
 800d3f0:	52defd9a 	.word	0x52defd9a
 800d3f4:	3fadde2d 	.word	0x3fadde2d
 800d3f8:	af749a6d 	.word	0xaf749a6d
 800d3fc:	3fb3b0f2 	.word	0x3fb3b0f2
 800d400:	fe231671 	.word	0xfe231671
 800d404:	3fbc71c6 	.word	0x3fbc71c6
 800d408:	9998ebc4 	.word	0x9998ebc4
 800d40c:	3fc99999 	.word	0x3fc99999
 800d410:	54442d18 	.word	0x54442d18
 800d414:	3ff921fb 	.word	0x3ff921fb
 800d418:	440fffff 	.word	0x440fffff
 800d41c:	7ff00000 	.word	0x7ff00000
 800d420:	3fdbffff 	.word	0x3fdbffff
 800d424:	3ff00000 	.word	0x3ff00000
 800d428:	3ff2ffff 	.word	0x3ff2ffff
 800d42c:	40038000 	.word	0x40038000
 800d430:	3ff80000 	.word	0x3ff80000
 800d434:	bff00000 	.word	0xbff00000
 800d438:	0800d918 	.word	0x0800d918
 800d43c:	0800d8f8 	.word	0x0800d8f8

0800d440 <fabs>:
 800d440:	ec51 0b10 	vmov	r0, r1, d0
 800d444:	ee10 2a10 	vmov	r2, s0
 800d448:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d44c:	ec43 2b10 	vmov	d0, r2, r3
 800d450:	4770      	bx	lr
 800d452:	0000      	movs	r0, r0
 800d454:	0000      	movs	r0, r0
	...

0800d458 <floor>:
 800d458:	ec51 0b10 	vmov	r0, r1, d0
 800d45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d460:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d464:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d468:	2e13      	cmp	r6, #19
 800d46a:	ee10 5a10 	vmov	r5, s0
 800d46e:	ee10 8a10 	vmov	r8, s0
 800d472:	460c      	mov	r4, r1
 800d474:	dc32      	bgt.n	800d4dc <floor+0x84>
 800d476:	2e00      	cmp	r6, #0
 800d478:	da14      	bge.n	800d4a4 <floor+0x4c>
 800d47a:	a333      	add	r3, pc, #204	; (adr r3, 800d548 <floor+0xf0>)
 800d47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d480:	f7f2 feb0 	bl	80001e4 <__adddf3>
 800d484:	2200      	movs	r2, #0
 800d486:	2300      	movs	r3, #0
 800d488:	f7f3 faf2 	bl	8000a70 <__aeabi_dcmpgt>
 800d48c:	b138      	cbz	r0, 800d49e <floor+0x46>
 800d48e:	2c00      	cmp	r4, #0
 800d490:	da57      	bge.n	800d542 <floor+0xea>
 800d492:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d496:	431d      	orrs	r5, r3
 800d498:	d001      	beq.n	800d49e <floor+0x46>
 800d49a:	4c2d      	ldr	r4, [pc, #180]	; (800d550 <floor+0xf8>)
 800d49c:	2500      	movs	r5, #0
 800d49e:	4621      	mov	r1, r4
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	e025      	b.n	800d4f0 <floor+0x98>
 800d4a4:	4f2b      	ldr	r7, [pc, #172]	; (800d554 <floor+0xfc>)
 800d4a6:	4137      	asrs	r7, r6
 800d4a8:	ea01 0307 	and.w	r3, r1, r7
 800d4ac:	4303      	orrs	r3, r0
 800d4ae:	d01f      	beq.n	800d4f0 <floor+0x98>
 800d4b0:	a325      	add	r3, pc, #148	; (adr r3, 800d548 <floor+0xf0>)
 800d4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b6:	f7f2 fe95 	bl	80001e4 <__adddf3>
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	2300      	movs	r3, #0
 800d4be:	f7f3 fad7 	bl	8000a70 <__aeabi_dcmpgt>
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	d0eb      	beq.n	800d49e <floor+0x46>
 800d4c6:	2c00      	cmp	r4, #0
 800d4c8:	bfbe      	ittt	lt
 800d4ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d4ce:	fa43 f606 	asrlt.w	r6, r3, r6
 800d4d2:	19a4      	addlt	r4, r4, r6
 800d4d4:	ea24 0407 	bic.w	r4, r4, r7
 800d4d8:	2500      	movs	r5, #0
 800d4da:	e7e0      	b.n	800d49e <floor+0x46>
 800d4dc:	2e33      	cmp	r6, #51	; 0x33
 800d4de:	dd0b      	ble.n	800d4f8 <floor+0xa0>
 800d4e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d4e4:	d104      	bne.n	800d4f0 <floor+0x98>
 800d4e6:	ee10 2a10 	vmov	r2, s0
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	f7f2 fe7a 	bl	80001e4 <__adddf3>
 800d4f0:	ec41 0b10 	vmov	d0, r0, r1
 800d4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4f8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d4fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d500:	fa23 f707 	lsr.w	r7, r3, r7
 800d504:	4207      	tst	r7, r0
 800d506:	d0f3      	beq.n	800d4f0 <floor+0x98>
 800d508:	a30f      	add	r3, pc, #60	; (adr r3, 800d548 <floor+0xf0>)
 800d50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50e:	f7f2 fe69 	bl	80001e4 <__adddf3>
 800d512:	2200      	movs	r2, #0
 800d514:	2300      	movs	r3, #0
 800d516:	f7f3 faab 	bl	8000a70 <__aeabi_dcmpgt>
 800d51a:	2800      	cmp	r0, #0
 800d51c:	d0bf      	beq.n	800d49e <floor+0x46>
 800d51e:	2c00      	cmp	r4, #0
 800d520:	da02      	bge.n	800d528 <floor+0xd0>
 800d522:	2e14      	cmp	r6, #20
 800d524:	d103      	bne.n	800d52e <floor+0xd6>
 800d526:	3401      	adds	r4, #1
 800d528:	ea25 0507 	bic.w	r5, r5, r7
 800d52c:	e7b7      	b.n	800d49e <floor+0x46>
 800d52e:	2301      	movs	r3, #1
 800d530:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d534:	fa03 f606 	lsl.w	r6, r3, r6
 800d538:	4435      	add	r5, r6
 800d53a:	4545      	cmp	r5, r8
 800d53c:	bf38      	it	cc
 800d53e:	18e4      	addcc	r4, r4, r3
 800d540:	e7f2      	b.n	800d528 <floor+0xd0>
 800d542:	2500      	movs	r5, #0
 800d544:	462c      	mov	r4, r5
 800d546:	e7aa      	b.n	800d49e <floor+0x46>
 800d548:	8800759c 	.word	0x8800759c
 800d54c:	7e37e43c 	.word	0x7e37e43c
 800d550:	bff00000 	.word	0xbff00000
 800d554:	000fffff 	.word	0x000fffff

0800d558 <nan>:
 800d558:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d560 <nan+0x8>
 800d55c:	4770      	bx	lr
 800d55e:	bf00      	nop
 800d560:	00000000 	.word	0x00000000
 800d564:	7ff80000 	.word	0x7ff80000

0800d568 <scalbn>:
 800d568:	b570      	push	{r4, r5, r6, lr}
 800d56a:	ec55 4b10 	vmov	r4, r5, d0
 800d56e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d572:	4606      	mov	r6, r0
 800d574:	462b      	mov	r3, r5
 800d576:	b99a      	cbnz	r2, 800d5a0 <scalbn+0x38>
 800d578:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d57c:	4323      	orrs	r3, r4
 800d57e:	d036      	beq.n	800d5ee <scalbn+0x86>
 800d580:	4b39      	ldr	r3, [pc, #228]	; (800d668 <scalbn+0x100>)
 800d582:	4629      	mov	r1, r5
 800d584:	ee10 0a10 	vmov	r0, s0
 800d588:	2200      	movs	r2, #0
 800d58a:	f7f2 ffe1 	bl	8000550 <__aeabi_dmul>
 800d58e:	4b37      	ldr	r3, [pc, #220]	; (800d66c <scalbn+0x104>)
 800d590:	429e      	cmp	r6, r3
 800d592:	4604      	mov	r4, r0
 800d594:	460d      	mov	r5, r1
 800d596:	da10      	bge.n	800d5ba <scalbn+0x52>
 800d598:	a32b      	add	r3, pc, #172	; (adr r3, 800d648 <scalbn+0xe0>)
 800d59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59e:	e03a      	b.n	800d616 <scalbn+0xae>
 800d5a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d5a4:	428a      	cmp	r2, r1
 800d5a6:	d10c      	bne.n	800d5c2 <scalbn+0x5a>
 800d5a8:	ee10 2a10 	vmov	r2, s0
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	4629      	mov	r1, r5
 800d5b0:	f7f2 fe18 	bl	80001e4 <__adddf3>
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	460d      	mov	r5, r1
 800d5b8:	e019      	b.n	800d5ee <scalbn+0x86>
 800d5ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d5be:	460b      	mov	r3, r1
 800d5c0:	3a36      	subs	r2, #54	; 0x36
 800d5c2:	4432      	add	r2, r6
 800d5c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d5c8:	428a      	cmp	r2, r1
 800d5ca:	dd08      	ble.n	800d5de <scalbn+0x76>
 800d5cc:	2d00      	cmp	r5, #0
 800d5ce:	a120      	add	r1, pc, #128	; (adr r1, 800d650 <scalbn+0xe8>)
 800d5d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5d4:	da1c      	bge.n	800d610 <scalbn+0xa8>
 800d5d6:	a120      	add	r1, pc, #128	; (adr r1, 800d658 <scalbn+0xf0>)
 800d5d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5dc:	e018      	b.n	800d610 <scalbn+0xa8>
 800d5de:	2a00      	cmp	r2, #0
 800d5e0:	dd08      	ble.n	800d5f4 <scalbn+0x8c>
 800d5e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d5e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d5ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d5ee:	ec45 4b10 	vmov	d0, r4, r5
 800d5f2:	bd70      	pop	{r4, r5, r6, pc}
 800d5f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d5f8:	da19      	bge.n	800d62e <scalbn+0xc6>
 800d5fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d5fe:	429e      	cmp	r6, r3
 800d600:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d604:	dd0a      	ble.n	800d61c <scalbn+0xb4>
 800d606:	a112      	add	r1, pc, #72	; (adr r1, 800d650 <scalbn+0xe8>)
 800d608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d1e2      	bne.n	800d5d6 <scalbn+0x6e>
 800d610:	a30f      	add	r3, pc, #60	; (adr r3, 800d650 <scalbn+0xe8>)
 800d612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d616:	f7f2 ff9b 	bl	8000550 <__aeabi_dmul>
 800d61a:	e7cb      	b.n	800d5b4 <scalbn+0x4c>
 800d61c:	a10a      	add	r1, pc, #40	; (adr r1, 800d648 <scalbn+0xe0>)
 800d61e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d0b8      	beq.n	800d598 <scalbn+0x30>
 800d626:	a10e      	add	r1, pc, #56	; (adr r1, 800d660 <scalbn+0xf8>)
 800d628:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d62c:	e7b4      	b.n	800d598 <scalbn+0x30>
 800d62e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d632:	3236      	adds	r2, #54	; 0x36
 800d634:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d638:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d63c:	4620      	mov	r0, r4
 800d63e:	4b0c      	ldr	r3, [pc, #48]	; (800d670 <scalbn+0x108>)
 800d640:	2200      	movs	r2, #0
 800d642:	e7e8      	b.n	800d616 <scalbn+0xae>
 800d644:	f3af 8000 	nop.w
 800d648:	c2f8f359 	.word	0xc2f8f359
 800d64c:	01a56e1f 	.word	0x01a56e1f
 800d650:	8800759c 	.word	0x8800759c
 800d654:	7e37e43c 	.word	0x7e37e43c
 800d658:	8800759c 	.word	0x8800759c
 800d65c:	fe37e43c 	.word	0xfe37e43c
 800d660:	c2f8f359 	.word	0xc2f8f359
 800d664:	81a56e1f 	.word	0x81a56e1f
 800d668:	43500000 	.word	0x43500000
 800d66c:	ffff3cb0 	.word	0xffff3cb0
 800d670:	3c900000 	.word	0x3c900000

0800d674 <_init>:
 800d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d676:	bf00      	nop
 800d678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d67a:	bc08      	pop	{r3}
 800d67c:	469e      	mov	lr, r3
 800d67e:	4770      	bx	lr

0800d680 <_fini>:
 800d680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d682:	bf00      	nop
 800d684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d686:	bc08      	pop	{r3}
 800d688:	469e      	mov	lr, r3
 800d68a:	4770      	bx	lr
