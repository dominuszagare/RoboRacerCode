
IMU_debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c170  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800c308  0800c308  0001c308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3d8  0800c3d8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3d8  0800c3d8  0001c3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3e0  0800c3e0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3e0  0800c3e0  0001c3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3e4  0800c3e4  0001c3e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c3e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002258  200001f0  0800c5d8  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002448  0800c5d8  00022448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f9d  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003915  00000000  00000000  0003a1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0003dad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  0003ebd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a04  00000000  00000000  0003fb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191e7  00000000  00000000  0005957c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cb2c  00000000  00000000  00072763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff28f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a04  00000000  00000000  000ff2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001f0 	.word	0x200001f0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c2f0 	.word	0x0800c2f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001f4 	.word	0x200001f4
 80001d4:	0800c2f0 	.word	0x0800c2f0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b96e 	b.w	8000e44 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468c      	mov	ip, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f040 8083 	bne.w	8000c96 <__udivmoddi4+0x116>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4617      	mov	r7, r2
 8000b94:	d947      	bls.n	8000c26 <__udivmoddi4+0xa6>
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	b142      	cbz	r2, 8000bae <__udivmoddi4+0x2e>
 8000b9c:	f1c2 0020 	rsb	r0, r2, #32
 8000ba0:	fa24 f000 	lsr.w	r0, r4, r0
 8000ba4:	4091      	lsls	r1, r2
 8000ba6:	4097      	lsls	r7, r2
 8000ba8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bac:	4094      	lsls	r4, r2
 8000bae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bb2:	0c23      	lsrs	r3, r4, #16
 8000bb4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bb8:	fa1f fe87 	uxth.w	lr, r7
 8000bbc:	fb08 c116 	mls	r1, r8, r6, ip
 8000bc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	d909      	bls.n	8000be0 <__udivmoddi4+0x60>
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd2:	f080 8119 	bcs.w	8000e08 <__udivmoddi4+0x288>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 8116 	bls.w	8000e08 <__udivmoddi4+0x288>
 8000bdc:	3e02      	subs	r6, #2
 8000bde:	443b      	add	r3, r7
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x8c>
 8000bf8:	193c      	adds	r4, r7, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	f080 8105 	bcs.w	8000e0c <__udivmoddi4+0x28c>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f240 8102 	bls.w	8000e0c <__udivmoddi4+0x28c>
 8000c08:	3802      	subs	r0, #2
 8000c0a:	443c      	add	r4, r7
 8000c0c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c10:	eba4 040e 	sub.w	r4, r4, lr
 8000c14:	2600      	movs	r6, #0
 8000c16:	b11d      	cbz	r5, 8000c20 <__udivmoddi4+0xa0>
 8000c18:	40d4      	lsrs	r4, r2
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c20:	4631      	mov	r1, r6
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	b902      	cbnz	r2, 8000c2a <__udivmoddi4+0xaa>
 8000c28:	deff      	udf	#255	; 0xff
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	2a00      	cmp	r2, #0
 8000c30:	d150      	bne.n	8000cd4 <__udivmoddi4+0x154>
 8000c32:	1bcb      	subs	r3, r1, r7
 8000c34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c38:	fa1f f887 	uxth.w	r8, r7
 8000c3c:	2601      	movs	r6, #1
 8000c3e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c42:	0c21      	lsrs	r1, r4, #16
 8000c44:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0xe4>
 8000c54:	1879      	adds	r1, r7, r1
 8000c56:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0xe2>
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	f200 80e9 	bhi.w	8000e34 <__udivmoddi4+0x2b4>
 8000c62:	4684      	mov	ip, r0
 8000c64:	1ac9      	subs	r1, r1, r3
 8000c66:	b2a3      	uxth	r3, r4
 8000c68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c70:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c74:	fb08 f800 	mul.w	r8, r8, r0
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0x10c>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x10a>
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	f200 80d9 	bhi.w	8000e3c <__udivmoddi4+0x2bc>
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	eba4 0408 	sub.w	r4, r4, r8
 8000c90:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c94:	e7bf      	b.n	8000c16 <__udivmoddi4+0x96>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0x12e>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	f000 80b1 	beq.w	8000e02 <__udivmoddi4+0x282>
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f683 	clz	r6, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d14a      	bne.n	8000d4c <__udivmoddi4+0x1cc>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0x140>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80b8 	bhi.w	8000e30 <__udivmoddi4+0x2b0>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	468c      	mov	ip, r1
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0a8      	beq.n	8000c20 <__udivmoddi4+0xa0>
 8000cce:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0xa0>
 8000cd4:	f1c2 0320 	rsb	r3, r2, #32
 8000cd8:	fa20 f603 	lsr.w	r6, r0, r3
 8000cdc:	4097      	lsls	r7, r2
 8000cde:	fa01 f002 	lsl.w	r0, r1, r2
 8000ce2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce6:	40d9      	lsrs	r1, r3
 8000ce8:	4330      	orrs	r0, r6
 8000cea:	0c03      	lsrs	r3, r0, #16
 8000cec:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f108 	mul.w	r1, r6, r8
 8000d00:	4299      	cmp	r1, r3
 8000d02:	fa04 f402 	lsl.w	r4, r4, r2
 8000d06:	d909      	bls.n	8000d1c <__udivmoddi4+0x19c>
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d0e:	f080 808d 	bcs.w	8000e2c <__udivmoddi4+0x2ac>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 808a 	bls.w	8000e2c <__udivmoddi4+0x2ac>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	443b      	add	r3, r7
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b281      	uxth	r1, r0
 8000d20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb00 f308 	mul.w	r3, r0, r8
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x1c4>
 8000d34:	1879      	adds	r1, r7, r1
 8000d36:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d3a:	d273      	bcs.n	8000e24 <__udivmoddi4+0x2a4>
 8000d3c:	428b      	cmp	r3, r1
 8000d3e:	d971      	bls.n	8000e24 <__udivmoddi4+0x2a4>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4439      	add	r1, r7
 8000d44:	1acb      	subs	r3, r1, r3
 8000d46:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d4a:	e778      	b.n	8000c3e <__udivmoddi4+0xbe>
 8000d4c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d50:	fa03 f406 	lsl.w	r4, r3, r6
 8000d54:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d58:	431c      	orrs	r4, r3
 8000d5a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d62:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d66:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d6a:	431f      	orrs	r7, r3
 8000d6c:	0c3b      	lsrs	r3, r7, #16
 8000d6e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d72:	fa1f f884 	uxth.w	r8, r4
 8000d76:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d7a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d7e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d82:	458a      	cmp	sl, r1
 8000d84:	fa02 f206 	lsl.w	r2, r2, r6
 8000d88:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x220>
 8000d8e:	1861      	adds	r1, r4, r1
 8000d90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d94:	d248      	bcs.n	8000e28 <__udivmoddi4+0x2a8>
 8000d96:	458a      	cmp	sl, r1
 8000d98:	d946      	bls.n	8000e28 <__udivmoddi4+0x2a8>
 8000d9a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9e:	4421      	add	r1, r4
 8000da0:	eba1 010a 	sub.w	r1, r1, sl
 8000da4:	b2bf      	uxth	r7, r7
 8000da6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000daa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000db2:	fb00 f808 	mul.w	r8, r0, r8
 8000db6:	45b8      	cmp	r8, r7
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x24a>
 8000dba:	19e7      	adds	r7, r4, r7
 8000dbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc0:	d22e      	bcs.n	8000e20 <__udivmoddi4+0x2a0>
 8000dc2:	45b8      	cmp	r8, r7
 8000dc4:	d92c      	bls.n	8000e20 <__udivmoddi4+0x2a0>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4427      	add	r7, r4
 8000dca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dce:	eba7 0708 	sub.w	r7, r7, r8
 8000dd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dd6:	454f      	cmp	r7, r9
 8000dd8:	46c6      	mov	lr, r8
 8000dda:	4649      	mov	r1, r9
 8000ddc:	d31a      	bcc.n	8000e14 <__udivmoddi4+0x294>
 8000dde:	d017      	beq.n	8000e10 <__udivmoddi4+0x290>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x27a>
 8000de2:	ebb3 020e 	subs.w	r2, r3, lr
 8000de6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dea:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dee:	40f2      	lsrs	r2, r6
 8000df0:	ea4c 0202 	orr.w	r2, ip, r2
 8000df4:	40f7      	lsrs	r7, r6
 8000df6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	462e      	mov	r6, r5
 8000e04:	4628      	mov	r0, r5
 8000e06:	e70b      	b.n	8000c20 <__udivmoddi4+0xa0>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	e6e9      	b.n	8000be0 <__udivmoddi4+0x60>
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	e6fd      	b.n	8000c0c <__udivmoddi4+0x8c>
 8000e10:	4543      	cmp	r3, r8
 8000e12:	d2e5      	bcs.n	8000de0 <__udivmoddi4+0x260>
 8000e14:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e18:	eb69 0104 	sbc.w	r1, r9, r4
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	e7df      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e7d2      	b.n	8000dca <__udivmoddi4+0x24a>
 8000e24:	4660      	mov	r0, ip
 8000e26:	e78d      	b.n	8000d44 <__udivmoddi4+0x1c4>
 8000e28:	4681      	mov	r9, r0
 8000e2a:	e7b9      	b.n	8000da0 <__udivmoddi4+0x220>
 8000e2c:	4666      	mov	r6, ip
 8000e2e:	e775      	b.n	8000d1c <__udivmoddi4+0x19c>
 8000e30:	4630      	mov	r0, r6
 8000e32:	e74a      	b.n	8000cca <__udivmoddi4+0x14a>
 8000e34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e38:	4439      	add	r1, r7
 8000e3a:	e713      	b.n	8000c64 <__udivmoddi4+0xe4>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	443c      	add	r4, r7
 8000e40:	e724      	b.n	8000c8c <__udivmoddi4+0x10c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0ae      	sub	sp, #184	; 0xb8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8000e52:	edc7 0a08 	vstr	s1, [r7, #32]
 8000e56:	ed87 1a07 	vstr	s2, [r7, #28]
 8000e5a:	edc7 1a06 	vstr	s3, [r7, #24]
 8000e5e:	ed87 2a05 	vstr	s4, [r7, #20]
 8000e62:	edc7 2a04 	vstr	s5, [r7, #16]
 8000e66:	ed87 3a03 	vstr	s6, [r7, #12]
 8000e6a:	edc7 3a02 	vstr	s7, [r7, #8]
 8000e6e:	ed87 4a01 	vstr	s8, [r7, #4]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8000e72:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7e:	d11d      	bne.n	8000ebc <MadgwickAHRSupdate+0x74>
 8000e80:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8c:	d116      	bne.n	8000ebc <MadgwickAHRSupdate+0x74>
 8000e8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9a:	d10f      	bne.n	8000ebc <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8000e9c:	edd7 2a04 	vldr	s5, [r7, #16]
 8000ea0:	ed97 2a05 	vldr	s4, [r7, #20]
 8000ea4:	edd7 1a06 	vldr	s3, [r7, #24]
 8000ea8:	ed97 1a07 	vldr	s2, [r7, #28]
 8000eac:	edd7 0a08 	vldr	s1, [r7, #32]
 8000eb0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000eb4:	f000 fede 	bl	8001c74 <MadgwickAHRSupdateIMU>
		return;
 8000eb8:	f000 becc 	b.w	8001c54 <MadgwickAHRSupdate+0xe0c>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000ebc:	4be6      	ldr	r3, [pc, #920]	; (8001258 <MadgwickAHRSupdate+0x410>)
 8000ebe:	edd3 7a00 	vldr	s15, [r3]
 8000ec2:	eeb1 7a67 	vneg.f32	s14, s15
 8000ec6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ece:	4be3      	ldr	r3, [pc, #908]	; (800125c <MadgwickAHRSupdate+0x414>)
 8000ed0:	edd3 6a00 	vldr	s13, [r3]
 8000ed4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000edc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ee0:	4bdf      	ldr	r3, [pc, #892]	; (8001260 <MadgwickAHRSupdate+0x418>)
 8000ee2:	edd3 6a00 	vldr	s13, [r3]
 8000ee6:	edd7 7a07 	vldr	s15, [r7, #28]
 8000eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000efa:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000efe:	4bd9      	ldr	r3, [pc, #868]	; (8001264 <MadgwickAHRSupdate+0x41c>)
 8000f00:	ed93 7a00 	vldr	s14, [r3]
 8000f04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f0c:	4bd3      	ldr	r3, [pc, #844]	; (800125c <MadgwickAHRSupdate+0x414>)
 8000f0e:	edd3 6a00 	vldr	s13, [r3]
 8000f12:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f1e:	4bd0      	ldr	r3, [pc, #832]	; (8001260 <MadgwickAHRSupdate+0x418>)
 8000f20:	edd3 6a00 	vldr	s13, [r3]
 8000f24:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f38:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8000f3c:	4bc9      	ldr	r3, [pc, #804]	; (8001264 <MadgwickAHRSupdate+0x41c>)
 8000f3e:	ed93 7a00 	vldr	s14, [r3]
 8000f42:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f4a:	4bc3      	ldr	r3, [pc, #780]	; (8001258 <MadgwickAHRSupdate+0x410>)
 8000f4c:	edd3 6a00 	vldr	s13, [r3]
 8000f50:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f5c:	4bc0      	ldr	r3, [pc, #768]	; (8001260 <MadgwickAHRSupdate+0x418>)
 8000f5e:	edd3 6a00 	vldr	s13, [r3]
 8000f62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f76:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8000f7a:	4bba      	ldr	r3, [pc, #744]	; (8001264 <MadgwickAHRSupdate+0x41c>)
 8000f7c:	ed93 7a00 	vldr	s14, [r3]
 8000f80:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f88:	4bb3      	ldr	r3, [pc, #716]	; (8001258 <MadgwickAHRSupdate+0x410>)
 8000f8a:	edd3 6a00 	vldr	s13, [r3]
 8000f8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f9a:	4bb0      	ldr	r3, [pc, #704]	; (800125c <MadgwickAHRSupdate+0x414>)
 8000f9c:	edd3 6a00 	vldr	s13, [r3]
 8000fa0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000fb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fbc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc4:	d10e      	bne.n	8000fe4 <MadgwickAHRSupdate+0x19c>
 8000fc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd2:	d107      	bne.n	8000fe4 <MadgwickAHRSupdate+0x19c>
 8000fd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fd8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe0:	f000 85ac 	beq.w	8001b3c <MadgwickAHRSupdate+0xcf4>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000fe4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fe8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000fec:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ff0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ff8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ffc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001004:	eeb0 0a67 	vmov.f32	s0, s15
 8001008:	f001 f958 	bl	80022bc <invSqrt>
 800100c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 8001010:	ed97 7a06 	vldr	s14, [r7, #24]
 8001014:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101c:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8001020:	ed97 7a05 	vldr	s14, [r7, #20]
 8001024:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102c:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001030:	ed97 7a04 	vldr	s14, [r7, #16]
 8001034:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103c:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001040:	edd7 7a03 	vldr	s15, [r7, #12]
 8001044:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001048:	edd7 7a02 	vldr	s15, [r7, #8]
 800104c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001054:	edd7 7a01 	vldr	s15, [r7, #4]
 8001058:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800105c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001060:	eeb0 0a67 	vmov.f32	s0, s15
 8001064:	f001 f92a 	bl	80022bc <invSqrt>
 8001068:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 800106c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001070:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001078:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 800107c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001080:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001088:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 800108c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001090:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001098:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 800109c:	4b71      	ldr	r3, [pc, #452]	; (8001264 <MadgwickAHRSupdate+0x41c>)
 800109e:	edd3 7a00 	vldr	s15, [r3]
 80010a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80010aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ae:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 80010b2:	4b6c      	ldr	r3, [pc, #432]	; (8001264 <MadgwickAHRSupdate+0x41c>)
 80010b4:	edd3 7a00 	vldr	s15, [r3]
 80010b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80010c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 80010c8:	4b66      	ldr	r3, [pc, #408]	; (8001264 <MadgwickAHRSupdate+0x41c>)
 80010ca:	edd3 7a00 	vldr	s15, [r3]
 80010ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80010d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010da:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 80010de:	4b5e      	ldr	r3, [pc, #376]	; (8001258 <MadgwickAHRSupdate+0x410>)
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80010ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 80010f4:	4b5b      	ldr	r3, [pc, #364]	; (8001264 <MadgwickAHRSupdate+0x41c>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
 80010fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010fe:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 8001102:	4b55      	ldr	r3, [pc, #340]	; (8001258 <MadgwickAHRSupdate+0x410>)
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800110c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 8001110:	4b52      	ldr	r3, [pc, #328]	; (800125c <MadgwickAHRSupdate+0x414>)
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800111a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 800111e:	4b50      	ldr	r3, [pc, #320]	; (8001260 <MadgwickAHRSupdate+0x418>)
 8001120:	edd3 7a00 	vldr	s15, [r3]
 8001124:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001128:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 800112c:	4b4d      	ldr	r3, [pc, #308]	; (8001264 <MadgwickAHRSupdate+0x41c>)
 800112e:	edd3 7a00 	vldr	s15, [r3]
 8001132:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001136:	4b49      	ldr	r3, [pc, #292]	; (800125c <MadgwickAHRSupdate+0x414>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001140:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 8001144:	4b45      	ldr	r3, [pc, #276]	; (800125c <MadgwickAHRSupdate+0x414>)
 8001146:	edd3 7a00 	vldr	s15, [r3]
 800114a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800114e:	4b44      	ldr	r3, [pc, #272]	; (8001260 <MadgwickAHRSupdate+0x418>)
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001158:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 800115c:	4b41      	ldr	r3, [pc, #260]	; (8001264 <MadgwickAHRSupdate+0x41c>)
 800115e:	ed93 7a00 	vldr	s14, [r3]
 8001162:	4b40      	ldr	r3, [pc, #256]	; (8001264 <MadgwickAHRSupdate+0x41c>)
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 8001170:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <MadgwickAHRSupdate+0x41c>)
 8001172:	ed93 7a00 	vldr	s14, [r3]
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <MadgwickAHRSupdate+0x410>)
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001180:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 8001184:	4b37      	ldr	r3, [pc, #220]	; (8001264 <MadgwickAHRSupdate+0x41c>)
 8001186:	ed93 7a00 	vldr	s14, [r3]
 800118a:	4b34      	ldr	r3, [pc, #208]	; (800125c <MadgwickAHRSupdate+0x414>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001194:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 8001198:	4b32      	ldr	r3, [pc, #200]	; (8001264 <MadgwickAHRSupdate+0x41c>)
 800119a:	ed93 7a00 	vldr	s14, [r3]
 800119e:	4b30      	ldr	r3, [pc, #192]	; (8001260 <MadgwickAHRSupdate+0x418>)
 80011a0:	edd3 7a00 	vldr	s15, [r3]
 80011a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 80011ac:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <MadgwickAHRSupdate+0x410>)
 80011ae:	ed93 7a00 	vldr	s14, [r3]
 80011b2:	4b29      	ldr	r3, [pc, #164]	; (8001258 <MadgwickAHRSupdate+0x410>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011bc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <MadgwickAHRSupdate+0x410>)
 80011c2:	ed93 7a00 	vldr	s14, [r3]
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <MadgwickAHRSupdate+0x414>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 80011d4:	4b20      	ldr	r3, [pc, #128]	; (8001258 <MadgwickAHRSupdate+0x410>)
 80011d6:	ed93 7a00 	vldr	s14, [r3]
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <MadgwickAHRSupdate+0x418>)
 80011dc:	edd3 7a00 	vldr	s15, [r3]
 80011e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <MadgwickAHRSupdate+0x414>)
 80011ea:	ed93 7a00 	vldr	s14, [r3]
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MadgwickAHRSupdate+0x414>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <MadgwickAHRSupdate+0x414>)
 80011fe:	ed93 7a00 	vldr	s14, [r3]
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <MadgwickAHRSupdate+0x418>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MadgwickAHRSupdate+0x418>)
 8001212:	ed93 7a00 	vldr	s14, [r3]
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MadgwickAHRSupdate+0x418>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001220:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001224:	ed97 7a03 	vldr	s14, [r7, #12]
 8001228:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800122c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MadgwickAHRSupdate+0x418>)
 8001232:	edd3 6a00 	vldr	s13, [r3]
 8001236:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800123a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <MadgwickAHRSupdate+0x414>)
 8001244:	edd3 6a00 	vldr	s13, [r3]
 8001248:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800124c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001250:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001254:	e008      	b.n	8001268 <MadgwickAHRSupdate+0x420>
 8001256:	bf00      	nop
 8001258:	2000020c 	.word	0x2000020c
 800125c:	20000210 	.word	0x20000210
 8001260:	20000214 	.word	0x20000214
 8001264:	20000004 	.word	0x20000004
 8001268:	edd7 6a03 	vldr	s13, [r7, #12]
 800126c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001278:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800127c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001280:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001284:	4bf5      	ldr	r3, [pc, #980]	; (800165c <MadgwickAHRSupdate+0x814>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001292:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001296:	edd7 7a01 	vldr	s15, [r7, #4]
 800129a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800129e:	4bf0      	ldr	r3, [pc, #960]	; (8001660 <MadgwickAHRSupdate+0x818>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ac:	edd7 6a03 	vldr	s13, [r7, #12]
 80012b0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80012b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012bc:	edd7 6a03 	vldr	s13, [r7, #12]
 80012c0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012cc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80012d0:	4be3      	ldr	r3, [pc, #908]	; (8001660 <MadgwickAHRSupdate+0x818>)
 80012d2:	ed93 7a00 	vldr	s14, [r3]
 80012d6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80012da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012de:	edd7 6a02 	vldr	s13, [r7, #8]
 80012e2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80012e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ee:	4bdd      	ldr	r3, [pc, #884]	; (8001664 <MadgwickAHRSupdate+0x81c>)
 80012f0:	edd3 6a00 	vldr	s13, [r3]
 80012f4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80012f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001300:	4bd6      	ldr	r3, [pc, #856]	; (800165c <MadgwickAHRSupdate+0x814>)
 8001302:	edd3 6a00 	vldr	s13, [r3]
 8001306:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800130a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001312:	edd7 6a02 	vldr	s13, [r7, #8]
 8001316:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800131a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001322:	edd7 6a02 	vldr	s13, [r7, #8]
 8001326:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800132a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800132e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001332:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001336:	edd7 7a01 	vldr	s15, [r7, #4]
 800133a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800133e:	4bc8      	ldr	r3, [pc, #800]	; (8001660 <MadgwickAHRSupdate+0x818>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001348:	ee37 7a27 	vadd.f32	s14, s14, s15
 800134c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001350:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800135c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8001360:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001364:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001368:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800136c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001374:	ee17 0a90 	vmov	r0, s15
 8001378:	f7ff f892 	bl	80004a0 <__aeabi_f2d>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	ec43 2b10 	vmov	d0, r2, r3
 8001384:	f00a fa38 	bl	800b7f8 <sqrt>
 8001388:	ec53 2b10 	vmov	r2, r3, d0
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fb8e 	bl	8000ab0 <__aeabi_d2f>
 8001394:	4603      	mov	r3, r0
 8001396:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001398:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800139c:	eeb1 7a67 	vneg.f32	s14, s15
 80013a0:	4bae      	ldr	r3, [pc, #696]	; (800165c <MadgwickAHRSupdate+0x814>)
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013aa:	4bae      	ldr	r3, [pc, #696]	; (8001664 <MadgwickAHRSupdate+0x81c>)
 80013ac:	edd3 6a00 	vldr	s13, [r3]
 80013b0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80013b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013bc:	edd7 6a01 	vldr	s13, [r7, #4]
 80013c0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80013c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013cc:	4ba4      	ldr	r3, [pc, #656]	; (8001660 <MadgwickAHRSupdate+0x818>)
 80013ce:	edd3 6a00 	vldr	s13, [r3]
 80013d2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80013d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013de:	edd7 6a01 	vldr	s13, [r7, #4]
 80013e2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80013e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013ee:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80013f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013fa:	4b99      	ldr	r3, [pc, #612]	; (8001660 <MadgwickAHRSupdate+0x818>)
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001404:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001408:	edd7 6a01 	vldr	s13, [r7, #4]
 800140c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001418:	edd7 6a01 	vldr	s13, [r7, #4]
 800141c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001428:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 800142c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001430:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001434:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 8001438:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800143c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001440:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001444:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001448:	eeb1 7a67 	vneg.f32	s14, s15
 800144c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001450:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001454:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001458:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800145c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001460:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001464:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001468:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800146c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001470:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001474:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001478:	edd7 7a05 	vldr	s15, [r7, #20]
 800147c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001480:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800148c:	4b73      	ldr	r3, [pc, #460]	; (800165c <MadgwickAHRSupdate+0x814>)
 800148e:	edd3 6a00 	vldr	s13, [r3]
 8001492:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001496:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800149a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800149e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80014a2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80014a6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80014aa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80014ae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80014b2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80014b6:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80014ba:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80014be:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80014c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014c6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80014ca:	ee36 6a27 	vadd.f32	s12, s12, s15
 80014ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80014d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014de:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80014e2:	eef1 6a67 	vneg.f32	s13, s15
 80014e6:	4b5e      	ldr	r3, [pc, #376]	; (8001660 <MadgwickAHRSupdate+0x818>)
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014f0:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <MadgwickAHRSupdate+0x81c>)
 80014f2:	ed93 6a00 	vldr	s12, [r3]
 80014f6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014fa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80014fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001502:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001506:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800150a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800150e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001512:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001516:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800151a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800151e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001522:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001526:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800152a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800152e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001532:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001536:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <MadgwickAHRSupdate+0x814>)
 8001540:	edd3 6a00 	vldr	s13, [r3]
 8001544:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001548:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800154c:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001550:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001554:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001558:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800155c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001560:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001564:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001568:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800156c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001570:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001574:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001578:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800157c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001580:	edd7 7a01 	vldr	s15, [r7, #4]
 8001584:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001588:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001590:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001594:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001598:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800159c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80015a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ac:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80015b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80015b8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80015bc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80015c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80015c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015cc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80015d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <MadgwickAHRSupdate+0x81c>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80015e2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80015e6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80015ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015ee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80015f2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80015f6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80015fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015fe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001602:	edd7 7a04 	vldr	s15, [r7, #16]
 8001606:	ee76 7a67 	vsub.f32	s15, s12, s15
 800160a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <MadgwickAHRSupdate+0x818>)
 8001614:	edd3 6a00 	vldr	s13, [r3]
 8001618:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800161c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001620:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001624:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001628:	ee36 6a67 	vsub.f32	s12, s12, s15
 800162c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001630:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001634:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001638:	ee26 6a27 	vmul.f32	s12, s12, s15
 800163c:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001640:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001644:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001648:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800164c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001650:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001654:	edd7 7a03 	vldr	s15, [r7, #12]
 8001658:	e006      	b.n	8001668 <MadgwickAHRSupdate+0x820>
 800165a:	bf00      	nop
 800165c:	20000210 	.word	0x20000210
 8001660:	20000214 	.word	0x20000214
 8001664:	2000020c 	.word	0x2000020c
 8001668:	ee76 7a67 	vsub.f32	s15, s12, s15
 800166c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001674:	4bf6      	ldr	r3, [pc, #984]	; (8001a50 <MadgwickAHRSupdate+0xc08>)
 8001676:	edd3 6a00 	vldr	s13, [r3]
 800167a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800167e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001682:	4bf4      	ldr	r3, [pc, #976]	; (8001a54 <MadgwickAHRSupdate+0xc0c>)
 8001684:	ed93 6a00 	vldr	s12, [r3]
 8001688:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800168c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001690:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001694:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001698:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800169c:	ee36 6a67 	vsub.f32	s12, s12, s15
 80016a0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016a8:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80016ac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80016b0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80016b4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016b8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80016bc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80016c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80016c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d0:	4be1      	ldr	r3, [pc, #900]	; (8001a58 <MadgwickAHRSupdate+0xc10>)
 80016d2:	edd3 6a00 	vldr	s13, [r3]
 80016d6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016de:	4bdf      	ldr	r3, [pc, #892]	; (8001a5c <MadgwickAHRSupdate+0xc14>)
 80016e0:	ed93 6a00 	vldr	s12, [r3]
 80016e4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80016e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016f0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80016f4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80016f8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80016fc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001700:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001704:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001708:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800170c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001710:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001714:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001718:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800171c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001720:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001724:	edd7 7a01 	vldr	s15, [r7, #4]
 8001728:	ee76 7a67 	vsub.f32	s15, s12, s15
 800172c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001734:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001738:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800173c:	eeb1 7a67 	vneg.f32	s14, s15
 8001740:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001744:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001748:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800174c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001750:	edd7 7a06 	vldr	s15, [r7, #24]
 8001754:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800175c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001760:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001764:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001768:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800176c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001770:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001774:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001780:	4bb3      	ldr	r3, [pc, #716]	; (8001a50 <MadgwickAHRSupdate+0xc08>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800178a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800178e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001792:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001796:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800179a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800179e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017a6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ae:	ee76 7a67 	vsub.f32	s15, s12, s15
 80017b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ba:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80017be:	eef1 6a67 	vneg.f32	s13, s15
 80017c2:	4ba3      	ldr	r3, [pc, #652]	; (8001a50 <MadgwickAHRSupdate+0xc08>)
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017cc:	4ba1      	ldr	r3, [pc, #644]	; (8001a54 <MadgwickAHRSupdate+0xc0c>)
 80017ce:	ed93 6a00 	vldr	s12, [r3]
 80017d2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017d6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017da:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017de:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80017e2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017e6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017ea:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80017ee:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017f2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017f6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80017fa:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80017fe:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001802:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001806:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800180a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800180e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001812:	edd7 7a03 	vldr	s15, [r7, #12]
 8001816:	ee76 7a67 	vsub.f32	s15, s12, s15
 800181a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800181e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001822:	4b8e      	ldr	r3, [pc, #568]	; (8001a5c <MadgwickAHRSupdate+0xc14>)
 8001824:	edd3 6a00 	vldr	s13, [r3]
 8001828:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800182c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001830:	4b89      	ldr	r3, [pc, #548]	; (8001a58 <MadgwickAHRSupdate+0xc10>)
 8001832:	ed93 6a00 	vldr	s12, [r3]
 8001836:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800183a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800183e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001842:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001846:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800184a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800184e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001852:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001856:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800185a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800185e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001862:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001866:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800186a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800186e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001872:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001876:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800187e:	4b75      	ldr	r3, [pc, #468]	; (8001a54 <MadgwickAHRSupdate+0xc0c>)
 8001880:	edd3 6a00 	vldr	s13, [r3]
 8001884:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001888:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800188c:	4b70      	ldr	r3, [pc, #448]	; (8001a50 <MadgwickAHRSupdate+0xc08>)
 800188e:	ed93 6a00 	vldr	s12, [r3]
 8001892:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001896:	ee66 7a27 	vmul.f32	s15, s12, s15
 800189a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800189e:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80018a2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018a6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018aa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018ae:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018b2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80018b6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80018ba:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018be:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018c2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018ca:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018ce:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80018e6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018ea:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018ee:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80018f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80018fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018fe:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001906:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800190a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800190e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001912:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001916:	edd7 7a05 	vldr	s15, [r7, #20]
 800191a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800191e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001922:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001926:	ee37 7a27 	vadd.f32	s14, s14, s15
 800192a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800192e:	eef1 6a67 	vneg.f32	s13, s15
 8001932:	4b49      	ldr	r3, [pc, #292]	; (8001a58 <MadgwickAHRSupdate+0xc10>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800193c:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <MadgwickAHRSupdate+0xc14>)
 800193e:	ed93 6a00 	vldr	s12, [r3]
 8001942:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001946:	ee66 7a27 	vmul.f32	s15, s12, s15
 800194a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800194e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001952:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001956:	ee36 6a67 	vsub.f32	s12, s12, s15
 800195a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800195e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001962:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001966:	ee26 6a27 	vmul.f32	s12, s12, s15
 800196a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800196e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001972:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001976:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800197a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800197e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001982:	edd7 7a03 	vldr	s15, [r7, #12]
 8001986:	ee76 7a67 	vsub.f32	s15, s12, s15
 800198a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001992:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001996:	eef1 6a67 	vneg.f32	s13, s15
 800199a:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <MadgwickAHRSupdate+0xc0c>)
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019a4:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <MadgwickAHRSupdate+0xc08>)
 80019a6:	ed93 6a00 	vldr	s12, [r3]
 80019aa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019b6:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80019ba:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80019be:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019c2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019ca:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80019ce:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80019d2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80019d6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019da:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019de:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MadgwickAHRSupdate+0xc14>)
 80019f4:	edd3 6a00 	vldr	s13, [r3]
 80019f8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a00:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001a04:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a08:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a0c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a10:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a14:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001a18:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a1c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a20:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a24:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a28:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a2c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a30:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a38:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a44:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001a48:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a4c:	e008      	b.n	8001a60 <MadgwickAHRSupdate+0xc18>
 8001a4e:	bf00      	nop
 8001a50:	20000210 	.word	0x20000210
 8001a54:	20000004 	.word	0x20000004
 8001a58:	20000214 	.word	0x20000214
 8001a5c:	2000020c 	.word	0x2000020c
 8001a60:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a64:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a68:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a70:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a7c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a88:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8c:	f000 fc16 	bl	80022bc <invSqrt>
 8001a90:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001a94:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001a98:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001aa4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001aa8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001ab4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001ab8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001ac4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001ac8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001ad4:	4b61      	ldr	r3, [pc, #388]	; (8001c5c <MadgwickAHRSupdate+0xe14>)
 8001ad6:	ed93 7a00 	vldr	s14, [r3]
 8001ada:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aea:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001aee:	4b5b      	ldr	r3, [pc, #364]	; (8001c5c <MadgwickAHRSupdate+0xe14>)
 8001af0:	ed93 7a00 	vldr	s14, [r3]
 8001af4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afc:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b04:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001b08:	4b54      	ldr	r3, [pc, #336]	; (8001c5c <MadgwickAHRSupdate+0xe14>)
 8001b0a:	ed93 7a00 	vldr	s14, [r3]
 8001b0e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b16:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001b22:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <MadgwickAHRSupdate+0xe14>)
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b30:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b38:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001b3c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001b40:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001c60 <MadgwickAHRSupdate+0xe18>
 8001b44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b48:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <MadgwickAHRSupdate+0xe1c>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b52:	4b44      	ldr	r3, [pc, #272]	; (8001c64 <MadgwickAHRSupdate+0xe1c>)
 8001b54:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001b58:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001b5c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001c60 <MadgwickAHRSupdate+0xe18>
 8001b60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b64:	4b40      	ldr	r3, [pc, #256]	; (8001c68 <MadgwickAHRSupdate+0xe20>)
 8001b66:	edd3 7a00 	vldr	s15, [r3]
 8001b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6e:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <MadgwickAHRSupdate+0xe20>)
 8001b70:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001b74:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001b78:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001c60 <MadgwickAHRSupdate+0xe18>
 8001b7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b80:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <MadgwickAHRSupdate+0xe24>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8a:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <MadgwickAHRSupdate+0xe24>)
 8001b8c:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001b90:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001b94:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001c60 <MadgwickAHRSupdate+0xe18>
 8001b98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b9c:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <MadgwickAHRSupdate+0xe28>)
 8001b9e:	edd3 7a00 	vldr	s15, [r3]
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <MadgwickAHRSupdate+0xe28>)
 8001ba8:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001bac:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <MadgwickAHRSupdate+0xe1c>)
 8001bae:	ed93 7a00 	vldr	s14, [r3]
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <MadgwickAHRSupdate+0xe1c>)
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <MadgwickAHRSupdate+0xe20>)
 8001bbe:	edd3 6a00 	vldr	s13, [r3]
 8001bc2:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <MadgwickAHRSupdate+0xe20>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd0:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <MadgwickAHRSupdate+0xe24>)
 8001bd2:	edd3 6a00 	vldr	s13, [r3]
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <MadgwickAHRSupdate+0xe24>)
 8001bd8:	edd3 7a00 	vldr	s15, [r3]
 8001bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <MadgwickAHRSupdate+0xe28>)
 8001be6:	edd3 6a00 	vldr	s13, [r3]
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <MadgwickAHRSupdate+0xe28>)
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfc:	f000 fb5e 	bl	80022bc <invSqrt>
 8001c00:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <MadgwickAHRSupdate+0xe1c>)
 8001c06:	ed93 7a00 	vldr	s14, [r3]
 8001c0a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <MadgwickAHRSupdate+0xe1c>)
 8001c14:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <MadgwickAHRSupdate+0xe20>)
 8001c1a:	ed93 7a00 	vldr	s14, [r3]
 8001c1e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <MadgwickAHRSupdate+0xe20>)
 8001c28:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <MadgwickAHRSupdate+0xe24>)
 8001c2e:	ed93 7a00 	vldr	s14, [r3]
 8001c32:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MadgwickAHRSupdate+0xe24>)
 8001c3c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <MadgwickAHRSupdate+0xe28>)
 8001c42:	ed93 7a00 	vldr	s14, [r3]
 8001c46:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <MadgwickAHRSupdate+0xe28>)
 8001c50:	edc3 7a00 	vstr	s15, [r3]
}
 8001c54:	37b8      	adds	r7, #184	; 0xb8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	3ba3d70a 	.word	0x3ba3d70a
 8001c64:	20000004 	.word	0x20000004
 8001c68:	2000020c 	.word	0x2000020c
 8001c6c:	20000210 	.word	0x20000210
 8001c70:	20000214 	.word	0x20000214

08001c74 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b09c      	sub	sp, #112	; 0x70
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	ed87 0a05 	vstr	s0, [r7, #20]
 8001c7e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001c82:	ed87 1a03 	vstr	s2, [r7, #12]
 8001c86:	edc7 1a02 	vstr	s3, [r7, #8]
 8001c8a:	ed87 2a01 	vstr	s4, [r7, #4]
 8001c8e:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001c92:	4bee      	ldr	r3, [pc, #952]	; (800204c <MadgwickAHRSupdateIMU+0x3d8>)
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	eeb1 7a67 	vneg.f32	s14, s15
 8001c9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca4:	4bea      	ldr	r3, [pc, #936]	; (8002050 <MadgwickAHRSupdateIMU+0x3dc>)
 8001ca6:	edd3 6a00 	vldr	s13, [r3]
 8001caa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cb6:	4be7      	ldr	r3, [pc, #924]	; (8002054 <MadgwickAHRSupdateIMU+0x3e0>)
 8001cb8:	edd3 6a00 	vldr	s13, [r3]
 8001cbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001cd4:	4be0      	ldr	r3, [pc, #896]	; (8002058 <MadgwickAHRSupdateIMU+0x3e4>)
 8001cd6:	ed93 7a00 	vldr	s14, [r3]
 8001cda:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce2:	4bdb      	ldr	r3, [pc, #876]	; (8002050 <MadgwickAHRSupdateIMU+0x3dc>)
 8001ce4:	edd3 6a00 	vldr	s13, [r3]
 8001ce8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cf4:	4bd7      	ldr	r3, [pc, #860]	; (8002054 <MadgwickAHRSupdateIMU+0x3e0>)
 8001cf6:	edd3 6a00 	vldr	s13, [r3]
 8001cfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d0e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001d12:	4bd1      	ldr	r3, [pc, #836]	; (8002058 <MadgwickAHRSupdateIMU+0x3e4>)
 8001d14:	ed93 7a00 	vldr	s14, [r3]
 8001d18:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d20:	4bca      	ldr	r3, [pc, #808]	; (800204c <MadgwickAHRSupdateIMU+0x3d8>)
 8001d22:	edd3 6a00 	vldr	s13, [r3]
 8001d26:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d32:	4bc8      	ldr	r3, [pc, #800]	; (8002054 <MadgwickAHRSupdateIMU+0x3e0>)
 8001d34:	edd3 6a00 	vldr	s13, [r3]
 8001d38:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d4c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001d50:	4bc1      	ldr	r3, [pc, #772]	; (8002058 <MadgwickAHRSupdateIMU+0x3e4>)
 8001d52:	ed93 7a00 	vldr	s14, [r3]
 8001d56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d5e:	4bbb      	ldr	r3, [pc, #748]	; (800204c <MadgwickAHRSupdateIMU+0x3d8>)
 8001d60:	edd3 6a00 	vldr	s13, [r3]
 8001d64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d70:	4bb7      	ldr	r3, [pc, #732]	; (8002050 <MadgwickAHRSupdateIMU+0x3dc>)
 8001d72:	edd3 6a00 	vldr	s13, [r3]
 8001d76:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d8a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001d8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9a:	d10e      	bne.n	8001dba <MadgwickAHRSupdateIMU+0x146>
 8001d9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001da0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da8:	d107      	bne.n	8001dba <MadgwickAHRSupdateIMU+0x146>
 8001daa:	edd7 7a00 	vldr	s15, [r7]
 8001dae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db6:	f000 81e5 	beq.w	8002184 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001dba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dbe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001dc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dc6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dce:	edd7 7a00 	vldr	s15, [r7]
 8001dd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dda:	eeb0 0a67 	vmov.f32	s0, s15
 8001dde:	f000 fa6d 	bl	80022bc <invSqrt>
 8001de2:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8001de6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df2:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8001df6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dfa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e02:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 8001e06:	ed97 7a00 	vldr	s14, [r7]
 8001e0a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e12:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001e16:	4b90      	ldr	r3, [pc, #576]	; (8002058 <MadgwickAHRSupdateIMU+0x3e4>)
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e20:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8001e24:	4b89      	ldr	r3, [pc, #548]	; (800204c <MadgwickAHRSupdateIMU+0x3d8>)
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e2e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 8001e32:	4b87      	ldr	r3, [pc, #540]	; (8002050 <MadgwickAHRSupdateIMU+0x3dc>)
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e3c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8001e40:	4b84      	ldr	r3, [pc, #528]	; (8002054 <MadgwickAHRSupdateIMU+0x3e0>)
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e4a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 8001e4e:	4b82      	ldr	r3, [pc, #520]	; (8002058 <MadgwickAHRSupdateIMU+0x3e4>)
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8001e60:	4b7a      	ldr	r3, [pc, #488]	; (800204c <MadgwickAHRSupdateIMU+0x3d8>)
 8001e62:	edd3 7a00 	vldr	s15, [r3]
 8001e66:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001e6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e6e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8001e72:	4b77      	ldr	r3, [pc, #476]	; (8002050 <MadgwickAHRSupdateIMU+0x3dc>)
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e80:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8001e84:	4b71      	ldr	r3, [pc, #452]	; (800204c <MadgwickAHRSupdateIMU+0x3d8>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e92:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8001e96:	4b6e      	ldr	r3, [pc, #440]	; (8002050 <MadgwickAHRSupdateIMU+0x3dc>)
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8001ea8:	4b6b      	ldr	r3, [pc, #428]	; (8002058 <MadgwickAHRSupdateIMU+0x3e4>)
 8001eaa:	ed93 7a00 	vldr	s14, [r3]
 8001eae:	4b6a      	ldr	r3, [pc, #424]	; (8002058 <MadgwickAHRSupdateIMU+0x3e4>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8001ebc:	4b63      	ldr	r3, [pc, #396]	; (800204c <MadgwickAHRSupdateIMU+0x3d8>)
 8001ebe:	ed93 7a00 	vldr	s14, [r3]
 8001ec2:	4b62      	ldr	r3, [pc, #392]	; (800204c <MadgwickAHRSupdateIMU+0x3d8>)
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ecc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8001ed0:	4b5f      	ldr	r3, [pc, #380]	; (8002050 <MadgwickAHRSupdateIMU+0x3dc>)
 8001ed2:	ed93 7a00 	vldr	s14, [r3]
 8001ed6:	4b5e      	ldr	r3, [pc, #376]	; (8002050 <MadgwickAHRSupdateIMU+0x3dc>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8001ee4:	4b5b      	ldr	r3, [pc, #364]	; (8002054 <MadgwickAHRSupdateIMU+0x3e0>)
 8001ee6:	ed93 7a00 	vldr	s14, [r3]
 8001eea:	4b5a      	ldr	r3, [pc, #360]	; (8002054 <MadgwickAHRSupdateIMU+0x3e0>)
 8001eec:	edd3 7a00 	vldr	s15, [r3]
 8001ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8001ef8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001efc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f04:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001f08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f14:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001f18:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f24:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001f28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f34:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001f38:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001f3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f44:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001f48:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f54:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f58:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001f5c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001f60:	4b3a      	ldr	r3, [pc, #232]	; (800204c <MadgwickAHRSupdateIMU+0x3d8>)
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f6e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f7e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f86:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001f8a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f96:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001f9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fa6:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001faa:	edd7 7a00 	vldr	s15, [r7]
 8001fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb6:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8001fba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fbe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001fc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fc6:	4b22      	ldr	r3, [pc, #136]	; (8002050 <MadgwickAHRSupdateIMU+0x3dc>)
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001fd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fe0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001fe4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ff0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001ff4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ffc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002000:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002004:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002008:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800200c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002018:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800201c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002024:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002028:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800202c:	edd7 7a00 	vldr	s15, [r7]
 8002030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002038:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800203c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002040:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002044:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002048:	e008      	b.n	800205c <MadgwickAHRSupdateIMU+0x3e8>
 800204a:	bf00      	nop
 800204c:	2000020c 	.word	0x2000020c
 8002050:	20000210 	.word	0x20000210
 8002054:	20000214 	.word	0x20000214
 8002058:	20000004 	.word	0x20000004
 800205c:	4b91      	ldr	r3, [pc, #580]	; (80022a4 <MadgwickAHRSupdateIMU+0x630>)
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002066:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800206a:	edd7 7a02 	vldr	s15, [r7, #8]
 800206e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002072:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002076:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800207a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800207e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002082:	4b88      	ldr	r3, [pc, #544]	; (80022a4 <MadgwickAHRSupdateIMU+0x630>)
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800208c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002090:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002094:	edd7 7a01 	vldr	s15, [r7, #4]
 8002098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a0:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80020a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020a8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80020ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80020b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80020bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80020c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d0:	eeb0 0a67 	vmov.f32	s0, s15
 80020d4:	f000 f8f2 	bl	80022bc <invSqrt>
 80020d8:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 80020dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80020e0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80020e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 80020ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80020f0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80020f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f8:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 80020fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8002100:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002108:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 800210c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002110:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002118:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 800211c:	4b62      	ldr	r3, [pc, #392]	; (80022a8 <MadgwickAHRSupdateIMU+0x634>)
 800211e:	ed93 7a00 	vldr	s14, [r3]
 8002122:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800212e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002132:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <MadgwickAHRSupdateIMU+0x634>)
 8002138:	ed93 7a00 	vldr	s14, [r3]
 800213c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002144:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800214c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8002150:	4b55      	ldr	r3, [pc, #340]	; (80022a8 <MadgwickAHRSupdateIMU+0x634>)
 8002152:	ed93 7a00 	vldr	s14, [r3]
 8002156:	edd7 7a07 	vldr	s15, [r7, #28]
 800215a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002166:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 800216a:	4b4f      	ldr	r3, [pc, #316]	; (80022a8 <MadgwickAHRSupdateIMU+0x634>)
 800216c:	ed93 7a00 	vldr	s14, [r3]
 8002170:	edd7 7a06 	vldr	s15, [r7, #24]
 8002174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002178:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800217c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002180:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002184:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002188:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80022ac <MadgwickAHRSupdateIMU+0x638>
 800218c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002190:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <MadgwickAHRSupdateIMU+0x63c>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219a:	4b45      	ldr	r3, [pc, #276]	; (80022b0 <MadgwickAHRSupdateIMU+0x63c>)
 800219c:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80021a0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80021a4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80022ac <MadgwickAHRSupdateIMU+0x638>
 80021a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021ac:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <MadgwickAHRSupdateIMU+0x640>)
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b6:	4b3f      	ldr	r3, [pc, #252]	; (80022b4 <MadgwickAHRSupdateIMU+0x640>)
 80021b8:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80021bc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80021c0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80022ac <MadgwickAHRSupdateIMU+0x638>
 80021c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021c8:	4b3b      	ldr	r3, [pc, #236]	; (80022b8 <MadgwickAHRSupdateIMU+0x644>)
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d2:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <MadgwickAHRSupdateIMU+0x644>)
 80021d4:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 80021d8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80021dc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80022ac <MadgwickAHRSupdateIMU+0x638>
 80021e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021e4:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <MadgwickAHRSupdateIMU+0x630>)
 80021e6:	edd3 7a00 	vldr	s15, [r3]
 80021ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ee:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <MadgwickAHRSupdateIMU+0x630>)
 80021f0:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <MadgwickAHRSupdateIMU+0x63c>)
 80021f6:	ed93 7a00 	vldr	s14, [r3]
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <MadgwickAHRSupdateIMU+0x63c>)
 80021fc:	edd3 7a00 	vldr	s15, [r3]
 8002200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002204:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <MadgwickAHRSupdateIMU+0x640>)
 8002206:	edd3 6a00 	vldr	s13, [r3]
 800220a:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <MadgwickAHRSupdateIMU+0x640>)
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002214:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002218:	4b27      	ldr	r3, [pc, #156]	; (80022b8 <MadgwickAHRSupdateIMU+0x644>)
 800221a:	edd3 6a00 	vldr	s13, [r3]
 800221e:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <MadgwickAHRSupdateIMU+0x644>)
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002228:	ee37 7a27 	vadd.f32	s14, s14, s15
 800222c:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <MadgwickAHRSupdateIMU+0x630>)
 800222e:	edd3 6a00 	vldr	s13, [r3]
 8002232:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <MadgwickAHRSupdateIMU+0x630>)
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800223c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002240:	eeb0 0a67 	vmov.f32	s0, s15
 8002244:	f000 f83a 	bl	80022bc <invSqrt>
 8002248:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <MadgwickAHRSupdateIMU+0x63c>)
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <MadgwickAHRSupdateIMU+0x63c>)
 800225c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <MadgwickAHRSupdateIMU+0x640>)
 8002262:	ed93 7a00 	vldr	s14, [r3]
 8002266:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800226a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <MadgwickAHRSupdateIMU+0x640>)
 8002270:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002274:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <MadgwickAHRSupdateIMU+0x644>)
 8002276:	ed93 7a00 	vldr	s14, [r3]
 800227a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800227e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <MadgwickAHRSupdateIMU+0x644>)
 8002284:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <MadgwickAHRSupdateIMU+0x630>)
 800228a:	ed93 7a00 	vldr	s14, [r3]
 800228e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002296:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <MadgwickAHRSupdateIMU+0x630>)
 8002298:	edc3 7a00 	vstr	s15, [r3]
}
 800229c:	bf00      	nop
 800229e:	3770      	adds	r7, #112	; 0x70
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000214 	.word	0x20000214
 80022a8:	20000000 	.word	0x20000000
 80022ac:	3ba3d70a 	.word	0x3ba3d70a
 80022b0:	20000004 	.word	0x20000004
 80022b4:	2000020c 	.word	0x2000020c
 80022b8:	20000210 	.word	0x20000210

080022bc <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80022c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d2:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80022da:	f107 0310 	add.w	r3, r7, #16
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	105a      	asrs	r2, r3, #1
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <invSqrt+0x74>)
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80022f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80022f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80022fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002300:	edd7 7a04 	vldr	s15, [r7, #16]
 8002304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002308:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800230c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002310:	edd7 7a04 	vldr	s15, [r7, #16]
 8002314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002318:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	ee07 3a90 	vmov	s15, r3
}
 8002322:	eeb0 0a67 	vmov.f32	s0, s15
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	5f3759df 	.word	0x5f3759df

08002334 <i2c1_pisiRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af04      	add	r7, sp, #16
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
 800233e:	460b      	mov	r3, r1
 8002340:	71bb      	strb	r3, [r7, #6]
 8002342:	4613      	mov	r3, r2
 8002344:	717b      	strb	r3, [r7, #5]
  naprava <<= 1;
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	71fb      	strb	r3, [r7, #7]
  return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	b299      	uxth	r1, r3
 8002350:	79bb      	ldrb	r3, [r7, #6]
 8002352:	b29a      	uxth	r2, r3
 8002354:	230a      	movs	r3, #10
 8002356:	9302      	str	r3, [sp, #8]
 8002358:	2301      	movs	r3, #1
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	1d7b      	adds	r3, r7, #5
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2301      	movs	r3, #1
 8002362:	4804      	ldr	r0, [pc, #16]	; (8002374 <i2c1_pisiRegister+0x40>)
 8002364:	f002 faac 	bl	80048c0 <HAL_I2C_Mem_Write>
 8002368:	4603      	mov	r3, r0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000634 	.word	0x20000634

08002378 <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af04      	add	r7, sp, #16
 800237e:	603a      	str	r2, [r7, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
 8002386:	460b      	mov	r3, r1
 8002388:	71bb      	strb	r3, [r7, #6]
 800238a:	4613      	mov	r3, r2
 800238c:	717b      	strb	r3, [r7, #5]
  if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 800238e:	797b      	ldrb	r3, [r7, #5]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d906      	bls.n	80023a2 <i2c1_beriRegistre+0x2a>
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b19      	cmp	r3, #25
 8002398:	d103      	bne.n	80023a2 <i2c1_beriRegistre+0x2a>
    reg |= 0x80;
 800239a:	79bb      	ldrb	r3, [r7, #6]
 800239c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023a0:	71bb      	strb	r3, [r7, #6]
  naprava <<= 1;
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	b299      	uxth	r1, r3
 80023ac:	79bb      	ldrb	r3, [r7, #6]
 80023ae:	b298      	uxth	r0, r3
 80023b0:	797b      	ldrb	r3, [r7, #5]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	797a      	ldrb	r2, [r7, #5]
 80023b6:	9202      	str	r2, [sp, #8]
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2301      	movs	r3, #1
 80023c0:	4602      	mov	r2, r0
 80023c2:	4803      	ldr	r0, [pc, #12]	; (80023d0 <i2c1_beriRegistre+0x58>)
 80023c4:	f002 fb76 	bl	8004ab4 <HAL_I2C_Mem_Read>
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000634 	.word	0x20000634

080023d4 <spi1_beriRegister>:
uint8_t spi1_beriRegister(uint8_t reg) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af02      	add	r7, sp, #8
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
	uint16_t buf_out, buf_in;
	reg |= 0x80; // najpomembnejsi bit na 1
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023e4:	71fb      	strb	r3, [r7, #7]
	buf_out = reg; // little endian, se postavi na pravo mesto ....
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80023ec:	2200      	movs	r2, #0
 80023ee:	2108      	movs	r1, #8
 80023f0:	4812      	ldr	r0, [pc, #72]	; (800243c <spi1_beriRegister+0x68>)
 80023f2:	f002 f8ef 	bl	80045d4 <HAL_GPIO_WritePin>
	//HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
	HAL_SPI_TransmitReceive(&hspi1, &((uint8_t*)&buf_out)[0], &((uint8_t*)&buf_in)[0], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 80023f6:	f107 020c 	add.w	r2, r7, #12
 80023fa:	f107 010e 	add.w	r1, r7, #14
 80023fe:	2302      	movs	r3, #2
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2301      	movs	r3, #1
 8002404:	480e      	ldr	r0, [pc, #56]	; (8002440 <spi1_beriRegister+0x6c>)
 8002406:	f005 f98f 	bl	8007728 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, &((uint8_t*)&buf_out)[1], &((uint8_t*)&buf_in)[1], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 800240a:	f107 010e 	add.w	r1, r7, #14
 800240e:	3101      	adds	r1, #1
 8002410:	f107 020c 	add.w	r2, r7, #12
 8002414:	3201      	adds	r2, #1
 8002416:	2302      	movs	r3, #2
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2301      	movs	r3, #1
 800241c:	4808      	ldr	r0, [pc, #32]	; (8002440 <spi1_beriRegister+0x6c>)
 800241e:	f005 f983 	bl	8007728 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8002422:	2201      	movs	r2, #1
 8002424:	2108      	movs	r1, #8
 8002426:	4805      	ldr	r0, [pc, #20]	; (800243c <spi1_beriRegister+0x68>)
 8002428:	f002 f8d4 	bl	80045d4 <HAL_GPIO_WritePin>
	return buf_in >> 8; // little endian...
 800242c:	89bb      	ldrh	r3, [r7, #12]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	b29b      	uxth	r3, r3
 8002432:	b2db      	uxtb	r3, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	20000a00 	.word	0x20000a00

08002444 <spi1_pisiRegister>:
void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	460a      	mov	r2, r1
 800244e:	71fb      	strb	r3, [r7, #7]
 8002450:	4613      	mov	r3, r2
 8002452:	71bb      	strb	r3, [r7, #6]
  uint16_t buf_out;
  buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	b21a      	sxth	r2, r3
 8002458:	79bb      	ldrb	r3, [r7, #6]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	b21b      	sxth	r3, r3
 800245e:	4313      	orrs	r3, r2
 8002460:	b21b      	sxth	r3, r3
 8002462:	b29b      	uxth	r3, r3
 8002464:	81fb      	strh	r3, [r7, #14]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8002466:	2200      	movs	r2, #0
 8002468:	2108      	movs	r1, #8
 800246a:	480d      	ldr	r0, [pc, #52]	; (80024a0 <spi1_pisiRegister+0x5c>)
 800246c:	f002 f8b2 	bl	80045d4 <HAL_GPIO_WritePin>
  //HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
  HAL_SPI_Transmit(&hspi1, &((uint8_t*)&buf_out)[0], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 8002470:	f107 010e 	add.w	r1, r7, #14
 8002474:	2302      	movs	r3, #2
 8002476:	2201      	movs	r2, #1
 8002478:	480a      	ldr	r0, [pc, #40]	; (80024a4 <spi1_pisiRegister+0x60>)
 800247a:	f004 ff08 	bl	800728e <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &((uint8_t*)&buf_out)[1], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 800247e:	f107 010e 	add.w	r1, r7, #14
 8002482:	3101      	adds	r1, #1
 8002484:	2302      	movs	r3, #2
 8002486:	2201      	movs	r2, #1
 8002488:	4806      	ldr	r0, [pc, #24]	; (80024a4 <spi1_pisiRegister+0x60>)
 800248a:	f004 ff00 	bl	800728e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800248e:	2201      	movs	r2, #1
 8002490:	2108      	movs	r1, #8
 8002492:	4803      	ldr	r0, [pc, #12]	; (80024a0 <spi1_pisiRegister+0x5c>)
 8002494:	f002 f89e 	bl	80045d4 <HAL_GPIO_WritePin>
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40021000 	.word	0x40021000
 80024a4:	20000a00 	.word	0x20000a00

080024a8 <spi1_beriRegistre>:
void spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	6039      	str	r1, [r7, #0]
 80024b2:	71fb      	strb	r3, [r7, #7]
 80024b4:	4613      	mov	r3, r2
 80024b6:	71bb      	strb	r3, [r7, #6]
  reg |= 0xC0; // najpomembnejsa bita na 1
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2108      	movs	r1, #8
 80024c6:	480c      	ldr	r0, [pc, #48]	; (80024f8 <spi1_beriRegistre+0x50>)
 80024c8:	f002 f884 	bl	80045d4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 80024cc:	1df9      	adds	r1, r7, #7
 80024ce:	230a      	movs	r3, #10
 80024d0:	2201      	movs	r2, #1
 80024d2:	480a      	ldr	r0, [pc, #40]	; (80024fc <spi1_beriRegistre+0x54>)
 80024d4:	f004 fedb 	bl	800728e <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 80024d8:	79bb      	ldrb	r3, [r7, #6]
 80024da:	b29a      	uxth	r2, r3
 80024dc:	79bb      	ldrb	r3, [r7, #6]
 80024de:	6839      	ldr	r1, [r7, #0]
 80024e0:	4806      	ldr	r0, [pc, #24]	; (80024fc <spi1_beriRegistre+0x54>)
 80024e2:	f005 f810 	bl	8007506 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80024e6:	2201      	movs	r2, #1
 80024e8:	2108      	movs	r1, #8
 80024ea:	4803      	ldr	r0, [pc, #12]	; (80024f8 <spi1_beriRegistre+0x50>)
 80024ec:	f002 f872 	bl	80045d4 <HAL_GPIO_WritePin>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000
 80024fc:	20000a00 	.word	0x20000a00

08002500 <nastaviPospeskometer>:
void nastaviPospeskometer(){
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	//register maping lsm303agr.pdf page(43)
	//0x23 0x40 BLE litle endian
	i2c1_pisiRegister(0x19, 0x21, 0x0);
 8002504:	2200      	movs	r2, #0
 8002506:	2121      	movs	r1, #33	; 0x21
 8002508:	2019      	movs	r0, #25
 800250a:	f7ff ff13 	bl	8002334 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x24, 0x0);
 800250e:	2200      	movs	r2, #0
 8002510:	2124      	movs	r1, #36	; 0x24
 8002512:	2019      	movs	r0, #25
 8002514:	f7ff ff0e 	bl	8002334 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x25, 0x0);
 8002518:	2200      	movs	r2, #0
 800251a:	2125      	movs	r1, #37	; 0x25
 800251c:	2019      	movs	r0, #25
 800251e:	f7ff ff09 	bl	8002334 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x26, 0x0);
 8002522:	2200      	movs	r2, #0
 8002524:	2126      	movs	r1, #38	; 0x26
 8002526:	2019      	movs	r0, #25
 8002528:	f7ff ff04 	bl	8002334 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x20, 0x67);  //ctrl_reg1 zbudi pospeskometer in omogoci osi //0x20 0x67 200Hz enable XYZ
 800252c:	2267      	movs	r2, #103	; 0x67
 800252e:	2120      	movs	r1, #32
 8002530:	2019      	movs	r0, #25
 8002532:	f7ff feff 	bl	8002334 <i2c1_pisiRegister>
	//block data update HR=1 oprating mode selection 12bit data output LPen = 0 (low power mode disabled) FS0 = 1(+-4g obcutljivost)
	i2c1_pisiRegister(0x19, 0x23, 0x8);  //ctrl_reg4 nastavi posodobitev samo ko se prebere vrednost ter locljivost +-2g
 8002536:	2208      	movs	r2, #8
 8002538:	2123      	movs	r1, #35	; 0x23
 800253a:	2019      	movs	r0, #25
 800253c:	f7ff fefa 	bl	8002334 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, 0x22, 0x10);  //0x22 0x10 DRDY1 INT1 pin enable pe4
 8002540:	2210      	movs	r2, #16
 8002542:	2122      	movs	r1, #34	; 0x22
 8002544:	2019      	movs	r0, #25
 8002546:	f7ff fef5 	bl	8002334 <i2c1_pisiRegister>
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}

0800254e <nastaviMagnetometer>:
void nastaviMagnetometer(){
 800254e:	b580      	push	{r7, lr}
 8002550:	af00      	add	r7, sp, #0
	i2c1_pisiRegister(0x1e, 0x60, 0xC); //cfg_reg_a_m ODR= 100HZ
 8002552:	220c      	movs	r2, #12
 8002554:	2160      	movs	r1, #96	; 0x60
 8002556:	201e      	movs	r0, #30
 8002558:	f7ff feec 	bl	8002334 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x1e, 0x61, 0x0); //cfg_reg_b_m
 800255c:	2200      	movs	r2, #0
 800255e:	2161      	movs	r1, #97	; 0x61
 8002560:	201e      	movs	r0, #30
 8002562:	f7ff fee7 	bl	8002334 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x1e, 0x62, 0x1); //cfg_reg_c_m INT_MAG=1 INT_MAG_PIN=0 BDU=0
 8002566:	2201      	movs	r2, #1
 8002568:	2162      	movs	r1, #98	; 0x62
 800256a:	201e      	movs	r0, #30
 800256c:	f7ff fee2 	bl	8002334 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x1e, 0x63, 0xE5); //int_ctrl_reg_m enable XYZ in IEN=1 interupt generation enable IEA=1
 8002570:	22e5      	movs	r2, #229	; 0xe5
 8002572:	2163      	movs	r1, #99	; 0x63
 8002574:	201e      	movs	r0, #30
 8002576:	f7ff fedd 	bl	8002334 <i2c1_pisiRegister>
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}

0800257e <nastaviGiroskop>:
void nastaviGiroskop() {
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
  // preverimo ali smo "poklicali" pravi senzor
  uint8_t cip = spi1_beriRegister(0x0F);
 8002584:	200f      	movs	r0, #15
 8002586:	f7ff ff25 	bl	80023d4 <spi1_beriRegister>
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  if (cip!=0xD4 && cip!=0xD3) {
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	2bd4      	cmp	r3, #212	; 0xd4
 8002592:	d003      	beq.n	800259c <nastaviGiroskop+0x1e>
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	2bd3      	cmp	r3, #211	; 0xd3
 8002598:	d000      	beq.n	800259c <nastaviGiroskop+0x1e>
	for (;;); //napaka ni senzorja
 800259a:	e7fe      	b.n	800259a <nastaviGiroskop+0x1c>
  }
  spi1_pisiRegister(0x21,0);//REG2 register za high pass filter
 800259c:	2100      	movs	r1, #0
 800259e:	2021      	movs	r0, #33	; 0x21
 80025a0:	f7ff ff50 	bl	8002444 <spi1_pisiRegister>
  spi1_pisiRegister(0x22,0x8);//REG3 interupt INT1 disable DRDY/INT2 enable
 80025a4:	2108      	movs	r1, #8
 80025a6:	2022      	movs	r0, #34	; 0x22
 80025a8:	f7ff ff4c 	bl	8002444 <spi1_pisiRegister>
    //0001 0000 FS-01 500dps
  spi1_pisiRegister(0x23,0x10);//REG4 MSB@lower addres 500deg/s 0x10 BLE = 0 BIGendian
 80025ac:	2110      	movs	r1, #16
 80025ae:	2023      	movs	r0, #35	; 0x23
 80025b0:	f7ff ff48 	bl	8002444 <spi1_pisiRegister>

  spi1_pisiRegister(0x25,0);//REFRENCE
 80025b4:	2100      	movs	r1, #0
 80025b6:	2025      	movs	r0, #37	; 0x25
 80025b8:	f7ff ff44 	bl	8002444 <spi1_pisiRegister>
  spi1_pisiRegister(0x2e,0);//FIFO_CTRL
 80025bc:	2100      	movs	r1, #0
 80025be:	202e      	movs	r0, #46	; 0x2e
 80025c0:	f7ff ff40 	bl	8002444 <spi1_pisiRegister>
  spi1_pisiRegister(0x32,0);//INT1_THS
 80025c4:	2100      	movs	r1, #0
 80025c6:	2032      	movs	r0, #50	; 0x32
 80025c8:	f7ff ff3c 	bl	8002444 <spi1_pisiRegister>
  spi1_pisiRegister(0x33,0);//INT1_THS
 80025cc:	2100      	movs	r1, #0
 80025ce:	2033      	movs	r0, #51	; 0x33
 80025d0:	f7ff ff38 	bl	8002444 <spi1_pisiRegister>
  spi1_pisiRegister(0x34,0);//INT1_THS
 80025d4:	2100      	movs	r1, #0
 80025d6:	2034      	movs	r0, #52	; 0x34
 80025d8:	f7ff ff34 	bl	8002444 <spi1_pisiRegister>
  spi1_pisiRegister(0x35,0);//INT1_THS
 80025dc:	2100      	movs	r1, #0
 80025de:	2035      	movs	r0, #53	; 0x35
 80025e0:	f7ff ff30 	bl	8002444 <spi1_pisiRegister>
  spi1_pisiRegister(0x36,0);//INT1_THS
 80025e4:	2100      	movs	r1, #0
 80025e6:	2036      	movs	r0, #54	; 0x36
 80025e8:	f7ff ff2c 	bl	8002444 <spi1_pisiRegister>
  spi1_pisiRegister(0x37,0);//INT1_THS
 80025ec:	2100      	movs	r1, #0
 80025ee:	2037      	movs	r0, #55	; 0x37
 80025f0:	f7ff ff28 	bl	8002444 <spi1_pisiRegister>
  spi1_pisiRegister(0x38,0);//INT1_DUR
 80025f4:	2100      	movs	r1, #0
 80025f6:	2038      	movs	r0, #56	; 0x38
 80025f8:	f7ff ff24 	bl	8002444 <spi1_pisiRegister>
  spi1_pisiRegister(0x30,0);//INT1_CFG
 80025fc:	2100      	movs	r1, #0
 80025fe:	2030      	movs	r0, #48	; 0x30
 8002600:	f7ff ff20 	bl	8002444 <spi1_pisiRegister>

  spi1_pisiRegister(0x24,0);//REG5
 8002604:	2100      	movs	r1, #0
 8002606:	2024      	movs	r0, #36	; 0x24
 8002608:	f7ff ff1c 	bl	8002444 <spi1_pisiRegister>
  //0101 1111 : (1111)=(PD,Zen,Yen,Xen)
  spi1_pisiRegister(0x20,0x5f);//CTRL_REG1 omogoci x-1,y-1,z-1,PD-1(normal mode) DR = 01 BW = 10 cutof=25 200hz
 800260c:	215f      	movs	r1, #95	; 0x5f
 800260e:	2020      	movs	r0, #32
 8002610:	f7ff ff18 	bl	8002444 <spi1_pisiRegister>

  spi1_pisiRegister(0x20, 0x0F);//CTRL REG1 zbudi ziroskop in omogoci osi
 8002614:	210f      	movs	r1, #15
 8002616:	2020      	movs	r0, #32
 8002618:	f7ff ff14 	bl	8002444 <spi1_pisiRegister>
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <normalize_v3f>:

float normalize_v3f(float* x, float* y, float* z){
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
	float norm = sqrt( (*x) * (*x) + (*y) * (*y) + (*z) * (*z) );
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	ed93 7a00 	vldr	s14, [r3]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	edd3 6a00 	vldr	s13, [r3]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002650:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	edd3 6a00 	vldr	s13, [r3]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002668:	ee17 0a90 	vmov	r0, s15
 800266c:	f7fd ff18 	bl	80004a0 <__aeabi_f2d>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	ec43 2b10 	vmov	d0, r2, r3
 8002678:	f009 f8be 	bl	800b7f8 <sqrt>
 800267c:	ec53 2b10 	vmov	r2, r3, d0
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	f7fe fa14 	bl	8000ab0 <__aeabi_d2f>
 8002688:	4603      	mov	r3, r0
 800268a:	617b      	str	r3, [r7, #20]
	*x /= norm;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	edd3 6a00 	vldr	s13, [r3]
 8002692:	ed97 7a05 	vldr	s14, [r7, #20]
 8002696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	edc3 7a00 	vstr	s15, [r3]
	*y /= norm;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	edd3 6a00 	vldr	s13, [r3]
 80026a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80026aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	edc3 7a00 	vstr	s15, [r3]
	*z /= norm;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	edd3 6a00 	vldr	s13, [r3]
 80026ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80026be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	edc3 7a00 	vstr	s15, [r3]
}
 80026c8:	bf00      	nop
 80026ca:	eeb0 0a67 	vmov.f32	s0, s15
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <izracunajPovprecjeInt16>:

int16_t izracunajPovprecjeInt16(struct tekocePovprecjeInt16* data,int16_t nov, uint8_t cleni){
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	807b      	strh	r3, [r7, #2]
 80026e0:	4613      	mov	r3, r2
 80026e2:	707b      	strb	r3, [r7, #1]
	data->sum =  data->sum + nov - data->vals[data->index]; //pristejemo trenutno vrednost in odstejemo zadnjo
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026ec:	4413      	add	r3, r2
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	7812      	ldrb	r2, [r2, #0]
 80026f2:	4611      	mov	r1, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	3104      	adds	r1, #4
 80026f8:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80026fc:	1a9a      	subs	r2, r3, r2
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	605a      	str	r2, [r3, #4]
	data->vals[data->index] = nov; //na zadnjo zamenjamo z novo
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3204      	adds	r2, #4
 800270c:	8879      	ldrh	r1, [r7, #2]
 800270e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	data->index++;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	b2da      	uxtb	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	701a      	strb	r2, [r3, #0]
	if(cleni > STEVILO_CLENOV_TP){cleni = STEVILO_CLENOV_TP;}
 800271e:	787b      	ldrb	r3, [r7, #1]
 8002720:	2b3c      	cmp	r3, #60	; 0x3c
 8002722:	d901      	bls.n	8002728 <izracunajPovprecjeInt16+0x54>
 8002724:	233c      	movs	r3, #60	; 0x3c
 8002726:	707b      	strb	r3, [r7, #1]
	if(data->index >= cleni){data->index = 0;}
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	787a      	ldrb	r2, [r7, #1]
 800272e:	429a      	cmp	r2, r3
 8002730:	d802      	bhi.n	8002738 <izracunajPovprecjeInt16+0x64>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
	data->avrage =  data->sum/cleni;//izracunamo povprecje
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	787b      	ldrb	r3, [r7, #1]
 800273e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002742:	b21a      	sxth	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	805a      	strh	r2, [r3, #2]
	return data->avrage;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <getDrift>:

void getDrift(){
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8002762:	2201      	movs	r2, #1
 8002764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002768:	4849      	ldr	r0, [pc, #292]	; (8002890 <getDrift+0x134>)
 800276a:	f001 ff33 	bl	80045d4 <HAL_GPIO_WritePin>
	int32_t sumGyrox = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
	int32_t sumGyroy = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
	int32_t sumGyroz = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
	int32_t sumAccx = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
	int32_t sumAccy = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
	int32_t sumAccz = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
	for(int i=0; i < 400; i++){
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	e02f      	b.n	80027ec <getDrift+0x90>
		sumGyrox += Gyro.x;
 800278c:	4b41      	ldr	r3, [pc, #260]	; (8002894 <getDrift+0x138>)
 800278e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002792:	461a      	mov	r2, r3
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	4413      	add	r3, r2
 8002798:	61fb      	str	r3, [r7, #28]
		sumGyroy += Gyro.y;
 800279a:	4b3e      	ldr	r3, [pc, #248]	; (8002894 <getDrift+0x138>)
 800279c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027a0:	461a      	mov	r2, r3
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	4413      	add	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
		sumGyroz += Gyro.z;
 80027a8:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <getDrift+0x138>)
 80027aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027ae:	461a      	mov	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	4413      	add	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
		sumAccx += Acc.x;
 80027b6:	4b38      	ldr	r3, [pc, #224]	; (8002898 <getDrift+0x13c>)
 80027b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027bc:	461a      	mov	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4413      	add	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
		sumAccy += Acc.y;
 80027c4:	4b34      	ldr	r3, [pc, #208]	; (8002898 <getDrift+0x13c>)
 80027c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4413      	add	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
		sumAccz += Acc.z;
 80027d2:	4b31      	ldr	r3, [pc, #196]	; (8002898 <getDrift+0x13c>)
 80027d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027d8:	461a      	mov	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4413      	add	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
		HAL_Delay(6);
 80027e0:	2006      	movs	r0, #6
 80027e2:	f001 f953 	bl	8003a8c <HAL_Delay>
	for(int i=0; i < 400; i++){
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3301      	adds	r3, #1
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80027f2:	dbcb      	blt.n	800278c <getDrift+0x30>
	}
	E.Accx = sumAccx/400; //vektor gravitacije
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4a29      	ldr	r2, [pc, #164]	; (800289c <getDrift+0x140>)
 80027f8:	fb82 1203 	smull	r1, r2, r2, r3
 80027fc:	11d2      	asrs	r2, r2, #7
 80027fe:	17db      	asrs	r3, r3, #31
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	b21a      	sxth	r2, r3
 8002804:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <getDrift+0x144>)
 8002806:	841a      	strh	r2, [r3, #32]
	E.Accy = sumAccy/400;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a24      	ldr	r2, [pc, #144]	; (800289c <getDrift+0x140>)
 800280c:	fb82 1203 	smull	r1, r2, r2, r3
 8002810:	11d2      	asrs	r2, r2, #7
 8002812:	17db      	asrs	r3, r3, #31
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	b21a      	sxth	r2, r3
 8002818:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <getDrift+0x144>)
 800281a:	845a      	strh	r2, [r3, #34]	; 0x22
	E.Accz = sumAccz/400;
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4a1f      	ldr	r2, [pc, #124]	; (800289c <getDrift+0x140>)
 8002820:	fb82 1203 	smull	r1, r2, r2, r3
 8002824:	11d2      	asrs	r2, r2, #7
 8002826:	17db      	asrs	r3, r3, #31
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	b21a      	sxth	r2, r3
 800282c:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <getDrift+0x144>)
 800282e:	849a      	strh	r2, [r3, #36]	; 0x24
	E.Gyrox = sumGyrox/400;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	4a1a      	ldr	r2, [pc, #104]	; (800289c <getDrift+0x140>)
 8002834:	fb82 1203 	smull	r1, r2, r2, r3
 8002838:	11d2      	asrs	r2, r2, #7
 800283a:	17db      	asrs	r3, r3, #31
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	b21a      	sxth	r2, r3
 8002840:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <getDrift+0x144>)
 8002842:	801a      	strh	r2, [r3, #0]
	E.Gyroy = sumGyroy/400;
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4a15      	ldr	r2, [pc, #84]	; (800289c <getDrift+0x140>)
 8002848:	fb82 1203 	smull	r1, r2, r2, r3
 800284c:	11d2      	asrs	r2, r2, #7
 800284e:	17db      	asrs	r3, r3, #31
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	b21a      	sxth	r2, r3
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <getDrift+0x144>)
 8002856:	805a      	strh	r2, [r3, #2]
	E.Gyroz = sumGyroz/400;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	4a10      	ldr	r2, [pc, #64]	; (800289c <getDrift+0x140>)
 800285c:	fb82 1203 	smull	r1, r2, r2, r3
 8002860:	11d2      	asrs	r2, r2, #7
 8002862:	17db      	asrs	r3, r3, #31
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	b21a      	sxth	r2, r3
 8002868:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <getDrift+0x144>)
 800286a:	809a      	strh	r2, [r3, #4]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002872:	4807      	ldr	r0, [pc, #28]	; (8002890 <getDrift+0x134>)
 8002874:	f001 feae 	bl	80045d4 <HAL_GPIO_WritePin>

	P.pozX = 0;
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <getDrift+0x148>)
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	621a      	str	r2, [r3, #32]
	P.pozY = 0;
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <getDrift+0x148>)
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002888:	bf00      	nop
 800288a:	3720      	adds	r7, #32
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40020c00 	.word	0x40020c00
 8002894:	20000a90 	.word	0x20000a90
 8002898:	20000a58 	.word	0x20000a58
 800289c:	51eb851f 	.word	0x51eb851f
 80028a0:	20000a68 	.word	0x20000a68
 80028a4:	20000b38 	.word	0x20000b38

080028a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	80fb      	strh	r3, [r7, #6]
	//kateri pin je poklical EXIT event
	if(GPIO_Pin == GPIO_PIN_1){ //vsakic ko dobis interupt posodobi podatke
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d108      	bne.n	80028ca <HAL_GPIO_EXTI_Callback+0x22>
		spi1_beriRegistre(0x28, (uint8_t*)&Gyro, 6);
 80028b8:	2206      	movs	r2, #6
 80028ba:	4912      	ldr	r1, [pc, #72]	; (8002904 <HAL_GPIO_EXTI_Callback+0x5c>)
 80028bc:	2028      	movs	r0, #40	; 0x28
 80028be:	f7ff fdf3 	bl	80024a8 <spi1_beriRegistre>
		GyroReady = 1; //zastavica da so na voljo novi podatki 200Hz
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <HAL_GPIO_EXTI_Callback+0x60>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
		//data ready megnetometer
		i2c1_beriRegistre(0x1e, 0x68,(uint8_t*)&Mag, 6);
		MagReady = 1; //100Hz
	}

}
 80028c8:	e018      	b.n	80028fc <HAL_GPIO_EXTI_Callback+0x54>
	else if(GPIO_Pin == GPIO_PIN_4){
 80028ca:	88fb      	ldrh	r3, [r7, #6]
 80028cc:	2b10      	cmp	r3, #16
 80028ce:	d109      	bne.n	80028e4 <HAL_GPIO_EXTI_Callback+0x3c>
		i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&Acc, 6);
 80028d0:	2306      	movs	r3, #6
 80028d2:	4a0e      	ldr	r2, [pc, #56]	; (800290c <HAL_GPIO_EXTI_Callback+0x64>)
 80028d4:	2128      	movs	r1, #40	; 0x28
 80028d6:	2019      	movs	r0, #25
 80028d8:	f7ff fd4e 	bl	8002378 <i2c1_beriRegistre>
		AccReady = 1; //200Hz
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <HAL_GPIO_EXTI_Callback+0x68>)
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
}
 80028e2:	e00b      	b.n	80028fc <HAL_GPIO_EXTI_Callback+0x54>
	else if(GPIO_Pin == GPIO_PIN_2){
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d108      	bne.n	80028fc <HAL_GPIO_EXTI_Callback+0x54>
		i2c1_beriRegistre(0x1e, 0x68,(uint8_t*)&Mag, 6);
 80028ea:	2306      	movs	r3, #6
 80028ec:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_GPIO_EXTI_Callback+0x6c>)
 80028ee:	2168      	movs	r1, #104	; 0x68
 80028f0:	201e      	movs	r0, #30
 80028f2:	f7ff fd41 	bl	8002378 <i2c1_beriRegistre>
		MagReady = 1; //100Hz
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_GPIO_EXTI_Callback+0x70>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000a90 	.word	0x20000a90
 8002908:	20000218 	.word	0x20000218
 800290c:	20000a58 	.word	0x20000a58
 8002910:	20000219 	.word	0x20000219
 8002914:	20000810 	.word	0x20000810
 8002918:	2000021a 	.word	0x2000021a
 800291c:	00000000 	.word	0x00000000

08002920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002926:	f001 f83f 	bl	80039a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800292a:	f000 fbb7 	bl	800309c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800292e:	f000 fcdb 	bl	80032e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002932:	f000 fc1b 	bl	800316c <MX_I2C1_Init>
  MX_SPI1_Init();
 8002936:	f000 fc47 	bl	80031c8 <MX_SPI1_Init>
  MX_DMA_Init();
 800293a:	f000 fcad 	bl	8003298 <MX_DMA_Init>
  MX_SPI5_Init();
 800293e:	f000 fc79 	bl	8003234 <MX_SPI5_Init>
  MX_USB_DEVICE_Init();
 8002942:	f008 f9cd 	bl	800ace0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_I2C_ENABLE(&hi2c1); //omogocimo I2C1 za komunikacijo z vgrajenimi cipi
 8002946:	4ba2      	ldr	r3, [pc, #648]	; (8002bd0 <main+0x2b0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4ba0      	ldr	r3, [pc, #640]	; (8002bd0 <main+0x2b0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hspi1); //komunikacija gyro
 8002956:	4b9f      	ldr	r3, [pc, #636]	; (8002bd4 <main+0x2b4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b9d      	ldr	r3, [pc, #628]	; (8002bd4 <main+0x2b4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002964:	601a      	str	r2, [r3, #0]

  __HAL_SPI_ENABLE(&hspi5); //rasbery pi
 8002966:	4b9c      	ldr	r3, [pc, #624]	; (8002bd8 <main+0x2b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b9a      	ldr	r3, [pc, #616]	; (8002bd8 <main+0x2b8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002974:	601a      	str	r2, [r3, #0]
  HAL_Delay(50);
 8002976:	2032      	movs	r0, #50	; 0x32
 8002978:	f001 f888 	bl	8003a8c <HAL_Delay>
  nastaviPospeskometer();
 800297c:	f7ff fdc0 	bl	8002500 <nastaviPospeskometer>
  nastaviMagnetometer();
 8002980:	f7ff fde5 	bl	800254e <nastaviMagnetometer>
  nastaviGiroskop();
 8002984:	f7ff fdfb 	bl	800257e <nastaviGiroskop>
  //prvic preberi podatke da se generirajo interupti
  spi1_beriRegistre(0x28, (uint8_t*)&Gyro, 6);
 8002988:	2206      	movs	r2, #6
 800298a:	4994      	ldr	r1, [pc, #592]	; (8002bdc <main+0x2bc>)
 800298c:	2028      	movs	r0, #40	; 0x28
 800298e:	f7ff fd8b 	bl	80024a8 <spi1_beriRegistre>
  i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&Acc, 6);
 8002992:	2306      	movs	r3, #6
 8002994:	4a92      	ldr	r2, [pc, #584]	; (8002be0 <main+0x2c0>)
 8002996:	2128      	movs	r1, #40	; 0x28
 8002998:	2019      	movs	r0, #25
 800299a:	f7ff fced 	bl	8002378 <i2c1_beriRegistre>
  i2c1_beriRegistre(0x1e, 0x68,(uint8_t*)&Mag, 6);
 800299e:	2306      	movs	r3, #6
 80029a0:	4a90      	ldr	r2, [pc, #576]	; (8002be4 <main+0x2c4>)
 80029a2:	2168      	movs	r1, #104	; 0x68
 80029a4:	201e      	movs	r0, #30
 80029a6:	f7ff fce7 	bl	8002378 <i2c1_beriRegistre>

  E.Accx = 0;
 80029aa:	4b8f      	ldr	r3, [pc, #572]	; (8002be8 <main+0x2c8>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	841a      	strh	r2, [r3, #32]
  E.Accy = 0;
 80029b0:	4b8d      	ldr	r3, [pc, #564]	; (8002be8 <main+0x2c8>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	845a      	strh	r2, [r3, #34]	; 0x22
  E.Accz = 0;
 80029b6:	4b8c      	ldr	r3, [pc, #560]	; (8002be8 <main+0x2c8>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	849a      	strh	r2, [r3, #36]	; 0x24
  E.Gyrox = 0;
 80029bc:	4b8a      	ldr	r3, [pc, #552]	; (8002be8 <main+0x2c8>)
 80029be:	2200      	movs	r2, #0
 80029c0:	801a      	strh	r2, [r3, #0]
  E.Gyroy = 0;
 80029c2:	4b89      	ldr	r3, [pc, #548]	; (8002be8 <main+0x2c8>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	805a      	strh	r2, [r3, #2]
  E.Gyroz = 0;
 80029c8:	4b87      	ldr	r3, [pc, #540]	; (8002be8 <main+0x2c8>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	809a      	strh	r2, [r3, #4]
  E.HardIronMagx = 0;
 80029ce:	4b86      	ldr	r3, [pc, #536]	; (8002be8 <main+0x2c8>)
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  E.HardIronMagy = 0;
 80029d6:	4b84      	ldr	r3, [pc, #528]	; (8002be8 <main+0x2c8>)
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
  E.HardIronMagz = 0;
 80029de:	4b82      	ldr	r3, [pc, #520]	; (8002be8 <main+0x2c8>)
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]
  E.SoftIronMagx = 1;
 80029e6:	4b80      	ldr	r3, [pc, #512]	; (8002be8 <main+0x2c8>)
 80029e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029ec:	615a      	str	r2, [r3, #20]
  E.SoftIronMagy = 1;
 80029ee:	4b7e      	ldr	r3, [pc, #504]	; (8002be8 <main+0x2c8>)
 80029f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029f4:	619a      	str	r2, [r3, #24]
  E.SoftIronMagz = 1;
 80029f6:	4b7c      	ldr	r3, [pc, #496]	; (8002be8 <main+0x2c8>)
 80029f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029fc:	61da      	str	r2, [r3, #28]

  getDrift();
 80029fe:	f7ff fead 	bl	800275c <getDrift>

  while (1)
  {
    /* USER CODE END WHILE */
	  if(MagReady){
 8002a02:	4b7a      	ldr	r3, [pc, #488]	; (8002bec <main+0x2cc>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d02e      	beq.n	8002a6a <main+0x14a>
		  MagF.x = izracunajPovprecjeInt16(&MagX,Mag.x,10);
 8002a0c:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <main+0x2c4>)
 8002a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a12:	220a      	movs	r2, #10
 8002a14:	4619      	mov	r1, r3
 8002a16:	4876      	ldr	r0, [pc, #472]	; (8002bf0 <main+0x2d0>)
 8002a18:	f7ff fe5c 	bl	80026d4 <izracunajPovprecjeInt16>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4b74      	ldr	r3, [pc, #464]	; (8002bf4 <main+0x2d4>)
 8002a22:	801a      	strh	r2, [r3, #0]
		  MagF.y = izracunajPovprecjeInt16(&MagY,Mag.y,10);
 8002a24:	4b6f      	ldr	r3, [pc, #444]	; (8002be4 <main+0x2c4>)
 8002a26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a2a:	220a      	movs	r2, #10
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4872      	ldr	r0, [pc, #456]	; (8002bf8 <main+0x2d8>)
 8002a30:	f7ff fe50 	bl	80026d4 <izracunajPovprecjeInt16>
 8002a34:	4603      	mov	r3, r0
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b6e      	ldr	r3, [pc, #440]	; (8002bf4 <main+0x2d4>)
 8002a3a:	805a      	strh	r2, [r3, #2]
		  MagF.z = izracunajPovprecjeInt16(&MagZ,Mag.z,10);
 8002a3c:	4b69      	ldr	r3, [pc, #420]	; (8002be4 <main+0x2c4>)
 8002a3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a42:	220a      	movs	r2, #10
 8002a44:	4619      	mov	r1, r3
 8002a46:	486d      	ldr	r0, [pc, #436]	; (8002bfc <main+0x2dc>)
 8002a48:	f7ff fe44 	bl	80026d4 <izracunajPovprecjeInt16>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	461a      	mov	r2, r3
 8002a50:	4b68      	ldr	r3, [pc, #416]	; (8002bf4 <main+0x2d4>)
 8002a52:	809a      	strh	r2, [r3, #4]
		  MagReady = 0;
 8002a54:	4b65      	ldr	r3, [pc, #404]	; (8002bec <main+0x2cc>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]

		  //HAL_SPI_TransmitReceive_DMA(&hspi5, SpiTxData, SpiRxData, 32);
		  //HAL_SPI_Transmit_DMA(&hspi5, SpiTxData, 32);
		  //HAL_SPI_Receive_DMA(&hspi5, SpiRxData, 32);

		  P.head = 0xAAAB;
 8002a5a:	4b69      	ldr	r3, [pc, #420]	; (8002c00 <main+0x2e0>)
 8002a5c:	f64a 22ab 	movw	r2, #43691	; 0xaaab
 8002a60:	601a      	str	r2, [r3, #0]
		  CDC_Transmit_FS((uint8_t*)&P,(sizeof(float)*12)+4);
 8002a62:	2134      	movs	r1, #52	; 0x34
 8002a64:	4866      	ldr	r0, [pc, #408]	; (8002c00 <main+0x2e0>)
 8002a66:	f008 f9f9 	bl	800ae5c <CDC_Transmit_FS>
	  }
	  if(AccReady){
 8002a6a:	4b66      	ldr	r3, [pc, #408]	; (8002c04 <main+0x2e4>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d040      	beq.n	8002af6 <main+0x1d6>
		  Acc.x -= E.Accx;
 8002a74:	4b5c      	ldr	r3, [pc, #368]	; (8002be8 <main+0x2c8>)
 8002a76:	8c1b      	ldrh	r3, [r3, #32]
 8002a78:	b219      	sxth	r1, r3
 8002a7a:	4b59      	ldr	r3, [pc, #356]	; (8002be0 <main+0x2c0>)
 8002a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	b28b      	uxth	r3, r1
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	b21a      	sxth	r2, r3
 8002a8a:	4b55      	ldr	r3, [pc, #340]	; (8002be0 <main+0x2c0>)
 8002a8c:	801a      	strh	r2, [r3, #0]
		  Acc.y -= E.Accy;
 8002a8e:	4b56      	ldr	r3, [pc, #344]	; (8002be8 <main+0x2c8>)
 8002a90:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002a92:	b219      	sxth	r1, r3
 8002a94:	4b52      	ldr	r3, [pc, #328]	; (8002be0 <main+0x2c0>)
 8002a96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	b28b      	uxth	r3, r1
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	b21a      	sxth	r2, r3
 8002aa4:	4b4e      	ldr	r3, [pc, #312]	; (8002be0 <main+0x2c0>)
 8002aa6:	805a      	strh	r2, [r3, #2]
		  AccF.x = izracunajPovprecjeInt16(&AccX,Acc.x,50);
 8002aa8:	4b4d      	ldr	r3, [pc, #308]	; (8002be0 <main+0x2c0>)
 8002aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aae:	2232      	movs	r2, #50	; 0x32
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4855      	ldr	r0, [pc, #340]	; (8002c08 <main+0x2e8>)
 8002ab4:	f7ff fe0e 	bl	80026d4 <izracunajPovprecjeInt16>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	461a      	mov	r2, r3
 8002abc:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <main+0x2ec>)
 8002abe:	801a      	strh	r2, [r3, #0]
		  AccF.y = izracunajPovprecjeInt16(&AccY,Acc.y,50);
 8002ac0:	4b47      	ldr	r3, [pc, #284]	; (8002be0 <main+0x2c0>)
 8002ac2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ac6:	2232      	movs	r2, #50	; 0x32
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4851      	ldr	r0, [pc, #324]	; (8002c10 <main+0x2f0>)
 8002acc:	f7ff fe02 	bl	80026d4 <izracunajPovprecjeInt16>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b4d      	ldr	r3, [pc, #308]	; (8002c0c <main+0x2ec>)
 8002ad6:	805a      	strh	r2, [r3, #2]
		  AccF.z = izracunajPovprecjeInt16(&AccZ,Acc.z,50);
 8002ad8:	4b41      	ldr	r3, [pc, #260]	; (8002be0 <main+0x2c0>)
 8002ada:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ade:	2232      	movs	r2, #50	; 0x32
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	484c      	ldr	r0, [pc, #304]	; (8002c14 <main+0x2f4>)
 8002ae4:	f7ff fdf6 	bl	80026d4 <izracunajPovprecjeInt16>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <main+0x2ec>)
 8002aee:	809a      	strh	r2, [r3, #4]
		  AccReady = 0;
 8002af0:	4b44      	ldr	r3, [pc, #272]	; (8002c04 <main+0x2e4>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
	  }
	  if(GyroReady){
 8002af6:	4b48      	ldr	r3, [pc, #288]	; (8002c18 <main+0x2f8>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d080      	beq.n	8002a02 <main+0xe2>
		  Gyro.x -= E.Gyrox;
 8002b00:	4b39      	ldr	r3, [pc, #228]	; (8002be8 <main+0x2c8>)
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	b219      	sxth	r1, r3
 8002b06:	4b35      	ldr	r3, [pc, #212]	; (8002bdc <main+0x2bc>)
 8002b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	b28b      	uxth	r3, r1
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	b21a      	sxth	r2, r3
 8002b16:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <main+0x2bc>)
 8002b18:	801a      	strh	r2, [r3, #0]
		  Gyro.y -= E.Gyroy;
 8002b1a:	4b33      	ldr	r3, [pc, #204]	; (8002be8 <main+0x2c8>)
 8002b1c:	885b      	ldrh	r3, [r3, #2]
 8002b1e:	b219      	sxth	r1, r3
 8002b20:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <main+0x2bc>)
 8002b22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	b28b      	uxth	r3, r1
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	b21a      	sxth	r2, r3
 8002b30:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <main+0x2bc>)
 8002b32:	805a      	strh	r2, [r3, #2]
		  Gyro.z -= E.Gyroz;
 8002b34:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <main+0x2c8>)
 8002b36:	889b      	ldrh	r3, [r3, #4]
 8002b38:	b219      	sxth	r1, r3
 8002b3a:	4b28      	ldr	r3, [pc, #160]	; (8002bdc <main+0x2bc>)
 8002b3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	b28b      	uxth	r3, r1
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	b21a      	sxth	r2, r3
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <main+0x2bc>)
 8002b4c:	809a      	strh	r2, [r3, #4]
		  GyroF.x = izracunajPovprecjeInt16(&GyroX,Gyro.x,50);
 8002b4e:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <main+0x2bc>)
 8002b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b54:	2232      	movs	r2, #50	; 0x32
 8002b56:	4619      	mov	r1, r3
 8002b58:	4830      	ldr	r0, [pc, #192]	; (8002c1c <main+0x2fc>)
 8002b5a:	f7ff fdbb 	bl	80026d4 <izracunajPovprecjeInt16>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b2f      	ldr	r3, [pc, #188]	; (8002c20 <main+0x300>)
 8002b64:	801a      	strh	r2, [r3, #0]
		  GyroF.y = izracunajPovprecjeInt16(&GyroY,Gyro.y,50);
 8002b66:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <main+0x2bc>)
 8002b68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b6c:	2232      	movs	r2, #50	; 0x32
 8002b6e:	4619      	mov	r1, r3
 8002b70:	482c      	ldr	r0, [pc, #176]	; (8002c24 <main+0x304>)
 8002b72:	f7ff fdaf 	bl	80026d4 <izracunajPovprecjeInt16>
 8002b76:	4603      	mov	r3, r0
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4b29      	ldr	r3, [pc, #164]	; (8002c20 <main+0x300>)
 8002b7c:	805a      	strh	r2, [r3, #2]
		  GyroF.z = izracunajPovprecjeInt16(&GyroZ,Gyro.z,50);
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <main+0x2bc>)
 8002b80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b84:	2232      	movs	r2, #50	; 0x32
 8002b86:	4619      	mov	r1, r3
 8002b88:	4827      	ldr	r0, [pc, #156]	; (8002c28 <main+0x308>)
 8002b8a:	f7ff fda3 	bl	80026d4 <izracunajPovprecjeInt16>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b23      	ldr	r3, [pc, #140]	; (8002c20 <main+0x300>)
 8002b94:	809a      	strh	r2, [r3, #4]
		  GyroReady = 0;
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <main+0x2f8>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
		  //poracunamo podatke
		  float gx,gy,gz,ax,ay,az,mx,my,mz;

		  if(AccF.x == 0 && AccF.y == 0 && AccF.z==0){ax=0.0f; ay=0.0f; az=1.0f;}
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <main+0x2ec>)
 8002b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d142      	bne.n	8002c2c <main+0x30c>
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <main+0x2ec>)
 8002ba8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d13d      	bne.n	8002c2c <main+0x30c>
 8002bb0:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <main+0x2ec>)
 8002bb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d138      	bne.n	8002c2c <main+0x30c>
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e05e      	b.n	8002c8c <main+0x36c>
 8002bce:	bf00      	nop
 8002bd0:	20000634 	.word	0x20000634
 8002bd4:	20000a00 	.word	0x20000a00
 8002bd8:	2000055c 	.word	0x2000055c
 8002bdc:	20000a90 	.word	0x20000a90
 8002be0:	20000a58 	.word	0x20000a58
 8002be4:	20000810 	.word	0x20000810
 8002be8:	20000a68 	.word	0x20000a68
 8002bec:	2000021a 	.word	0x2000021a
 8002bf0:	20000710 	.word	0x20000710
 8002bf4:	200008f8 	.word	0x200008f8
 8002bf8:	20000448 	.word	0x20000448
 8002bfc:	20000818 	.word	0x20000818
 8002c00:	20000b38 	.word	0x20000b38
 8002c04:	20000219 	.word	0x20000219
 8002c08:	20000980 	.word	0x20000980
 8002c0c:	200006e8 	.word	0x200006e8
 8002c10:	200004dc 	.word	0x200004dc
 8002c14:	20000790 	.word	0x20000790
 8002c18:	20000218 	.word	0x20000218
 8002c1c:	200005b4 	.word	0x200005b4
 8002c20:	20000a60 	.word	0x20000a60
 8002c24:	20000900 	.word	0x20000900
 8002c28:	20000a98 	.word	0x20000a98
		  else{
			  ax = ((float)AccF.x) *0.0006103515f;
 8002c2c:	4b3c      	ldr	r3, [pc, #240]	; (8002d20 <main+0x400>)
 8002c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c32:	ee07 3a90 	vmov	s15, r3
 8002c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c3a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002d24 <main+0x404>
 8002c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c42:	edc7 7a05 	vstr	s15, [r7, #20]
			  ay = ((float)AccF.y) *0.0006103515f;
 8002c46:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <main+0x400>)
 8002c48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c54:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002d24 <main+0x404>
 8002c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c5c:	edc7 7a04 	vstr	s15, [r7, #16]
			  az = ((float)AccF.z) *0.0006103515f;//+-2g  2/(2^16/2)
 8002c60:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <main+0x400>)
 8002c62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c66:	ee07 3a90 	vmov	s15, r3
 8002c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c6e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002d24 <main+0x404>
 8002c72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c76:	edc7 7a03 	vstr	s15, [r7, #12]
			  normalize_v3f(&ax,&ay,&az);
 8002c7a:	f107 020c 	add.w	r2, r7, #12
 8002c7e:	f107 0110 	add.w	r1, r7, #16
 8002c82:	f107 0314 	add.w	r3, r7, #20
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fccc 	bl	8002624 <normalize_v3f>
		  }

		  gx = ((float)GyroF.x) * 0.0175f * DEG_TO_RAD; //deg/s obcutljivost 500dps
 8002c8c:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <main+0x408>)
 8002c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c92:	ee07 3a90 	vmov	s15, r3
 8002c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c9a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002d2c <main+0x40c>
 8002c9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ca2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002d30 <main+0x410>
 8002ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002caa:	edc7 7a08 	vstr	s15, [r7, #32]
		  gy = ((float)GyroF.y) * -0.0175f * DEG_TO_RAD;
 8002cae:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <main+0x408>)
 8002cb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cb4:	ee07 3a90 	vmov	s15, r3
 8002cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cbc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002d34 <main+0x414>
 8002cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002d30 <main+0x410>
 8002cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ccc:	edc7 7a07 	vstr	s15, [r7, #28]
		  gz = ((float)GyroF.z) * 0.0175f * DEG_TO_RAD;
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <main+0x408>)
 8002cd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cde:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002d2c <main+0x40c>
 8002ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ce6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002d30 <main+0x410>
 8002cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cee:	edc7 7a06 	vstr	s15, [r7, #24]

		  if(MagF.x == 0 && MagF.y == 0 && MagF.z==0){mx = 0.2f; my = 0.2f; mz = 0.1f;}
 8002cf2:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <main+0x418>)
 8002cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d123      	bne.n	8002d44 <main+0x424>
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <main+0x418>)
 8002cfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d11e      	bne.n	8002d44 <main+0x424>
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <main+0x418>)
 8002d08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d119      	bne.n	8002d44 <main+0x424>
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <main+0x41c>)
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <main+0x41c>)
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <main+0x420>)
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	e039      	b.n	8002d92 <main+0x472>
 8002d1e:	bf00      	nop
 8002d20:	200006e8 	.word	0x200006e8
 8002d24:	3a1fffff 	.word	0x3a1fffff
 8002d28:	20000a60 	.word	0x20000a60
 8002d2c:	3c8f5c29 	.word	0x3c8f5c29
 8002d30:	3c8efa35 	.word	0x3c8efa35
 8002d34:	bc8f5c29 	.word	0xbc8f5c29
 8002d38:	200008f8 	.word	0x200008f8
 8002d3c:	3e4ccccd 	.word	0x3e4ccccd
 8002d40:	3dcccccd 	.word	0x3dcccccd
		  else{
			  mx = ((float)MagF.x) * 0.0015f; //magnetic sesnetivity 1.5 mgauss/LSB
 8002d44:	4bca      	ldr	r3, [pc, #808]	; (8003070 <main+0x750>)
 8002d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4a:	ee07 3a90 	vmov	s15, r3
 8002d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d52:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 8003074 <main+0x754>
 8002d56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5a:	edc7 7a02 	vstr	s15, [r7, #8]
			  my = ((float)MagF.y) * -0.0015f;
 8002d5e:	4bc4      	ldr	r3, [pc, #784]	; (8003070 <main+0x750>)
 8002d60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d64:	ee07 3a90 	vmov	s15, r3
 8002d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d6c:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8003078 <main+0x758>
 8002d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d74:	edc7 7a01 	vstr	s15, [r7, #4]
			  mz = ((float)MagF.z) * 0.0015f;
 8002d78:	4bbd      	ldr	r3, [pc, #756]	; (8003070 <main+0x750>)
 8002d7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d86:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8003074 <main+0x754>
 8002d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d8e:	edc7 7a00 	vstr	s15, [r7]
		  }
		  normalize_v3f(&mx,&my,&mz);
 8002d92:	463a      	mov	r2, r7
 8002d94:	1d39      	adds	r1, r7, #4
 8002d96:	f107 0308 	add.w	r3, r7, #8
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fc42 	bl	8002624 <normalize_v3f>

		  MadgwickAHRSupdate(gx,gy,gz,ax,ay,az,mx,my,mz);
 8002da0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002da4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002da8:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dac:	ed97 6a02 	vldr	s12, [r7, #8]
 8002db0:	edd7 5a01 	vldr	s11, [r7, #4]
 8002db4:	ed97 5a00 	vldr	s10, [r7]
 8002db8:	eeb0 4a45 	vmov.f32	s8, s10
 8002dbc:	eef0 3a65 	vmov.f32	s7, s11
 8002dc0:	eeb0 3a46 	vmov.f32	s6, s12
 8002dc4:	eef0 2a66 	vmov.f32	s5, s13
 8002dc8:	eeb0 2a47 	vmov.f32	s4, s14
 8002dcc:	eef0 1a67 	vmov.f32	s3, s15
 8002dd0:	ed97 1a06 	vldr	s2, [r7, #24]
 8002dd4:	edd7 0a07 	vldr	s1, [r7, #28]
 8002dd8:	ed97 0a08 	vldr	s0, [r7, #32]
 8002ddc:	f7fe f834 	bl	8000e48 <MadgwickAHRSupdate>
		  P.heading = atan2(2*(q0*q3+q1*q2),1-2*(q2*q2+q3*q3))*(180/PI);
 8002de0:	4ba6      	ldr	r3, [pc, #664]	; (800307c <main+0x75c>)
 8002de2:	ed93 7a00 	vldr	s14, [r3]
 8002de6:	4ba6      	ldr	r3, [pc, #664]	; (8003080 <main+0x760>)
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002df0:	4ba4      	ldr	r3, [pc, #656]	; (8003084 <main+0x764>)
 8002df2:	edd3 6a00 	vldr	s13, [r3]
 8002df6:	4ba4      	ldr	r3, [pc, #656]	; (8003088 <main+0x768>)
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e08:	ee17 0a90 	vmov	r0, s15
 8002e0c:	f7fd fb48 	bl	80004a0 <__aeabi_f2d>
 8002e10:	4604      	mov	r4, r0
 8002e12:	460d      	mov	r5, r1
 8002e14:	4b9c      	ldr	r3, [pc, #624]	; (8003088 <main+0x768>)
 8002e16:	ed93 7a00 	vldr	s14, [r3]
 8002e1a:	4b9b      	ldr	r3, [pc, #620]	; (8003088 <main+0x768>)
 8002e1c:	edd3 7a00 	vldr	s15, [r3]
 8002e20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e24:	4b96      	ldr	r3, [pc, #600]	; (8003080 <main+0x760>)
 8002e26:	edd3 6a00 	vldr	s13, [r3]
 8002e2a:	4b95      	ldr	r3, [pc, #596]	; (8003080 <main+0x760>)
 8002e2c:	edd3 7a00 	vldr	s15, [r3]
 8002e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e44:	ee17 0a90 	vmov	r0, s15
 8002e48:	f7fd fb2a 	bl	80004a0 <__aeabi_f2d>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	ec43 2b11 	vmov	d1, r2, r3
 8002e54:	ec45 4b10 	vmov	d0, r4, r5
 8002e58:	f008 fccc 	bl	800b7f4 <atan2>
 8002e5c:	ec51 0b10 	vmov	r0, r1, d0
 8002e60:	a37f      	add	r3, pc, #508	; (adr r3, 8003060 <main+0x740>)
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	f7fd fb73 	bl	8000550 <__aeabi_dmul>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	f7fd fe1d 	bl	8000ab0 <__aeabi_d2f>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4a84      	ldr	r2, [pc, #528]	; (800308c <main+0x76c>)
 8002e7a:	60d3      	str	r3, [r2, #12]
		  P.roll = atan2(2*(q0*q1+q2*q3),1-2*(q1*q1+q2*q2))*(180/PI);
 8002e7c:	4b7f      	ldr	r3, [pc, #508]	; (800307c <main+0x75c>)
 8002e7e:	ed93 7a00 	vldr	s14, [r3]
 8002e82:	4b80      	ldr	r3, [pc, #512]	; (8003084 <main+0x764>)
 8002e84:	edd3 7a00 	vldr	s15, [r3]
 8002e88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e8c:	4b7e      	ldr	r3, [pc, #504]	; (8003088 <main+0x768>)
 8002e8e:	edd3 6a00 	vldr	s13, [r3]
 8002e92:	4b7b      	ldr	r3, [pc, #492]	; (8003080 <main+0x760>)
 8002e94:	edd3 7a00 	vldr	s15, [r3]
 8002e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ea4:	ee17 0a90 	vmov	r0, s15
 8002ea8:	f7fd fafa 	bl	80004a0 <__aeabi_f2d>
 8002eac:	4604      	mov	r4, r0
 8002eae:	460d      	mov	r5, r1
 8002eb0:	4b74      	ldr	r3, [pc, #464]	; (8003084 <main+0x764>)
 8002eb2:	ed93 7a00 	vldr	s14, [r3]
 8002eb6:	4b73      	ldr	r3, [pc, #460]	; (8003084 <main+0x764>)
 8002eb8:	edd3 7a00 	vldr	s15, [r3]
 8002ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ec0:	4b71      	ldr	r3, [pc, #452]	; (8003088 <main+0x768>)
 8002ec2:	edd3 6a00 	vldr	s13, [r3]
 8002ec6:	4b70      	ldr	r3, [pc, #448]	; (8003088 <main+0x768>)
 8002ec8:	edd3 7a00 	vldr	s15, [r3]
 8002ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002edc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee0:	ee17 0a90 	vmov	r0, s15
 8002ee4:	f7fd fadc 	bl	80004a0 <__aeabi_f2d>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	ec43 2b11 	vmov	d1, r2, r3
 8002ef0:	ec45 4b10 	vmov	d0, r4, r5
 8002ef4:	f008 fc7e 	bl	800b7f4 <atan2>
 8002ef8:	ec51 0b10 	vmov	r0, r1, d0
 8002efc:	a358      	add	r3, pc, #352	; (adr r3, 8003060 <main+0x740>)
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	f7fd fb25 	bl	8000550 <__aeabi_dmul>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7fd fdcf 	bl	8000ab0 <__aeabi_d2f>
 8002f12:	4603      	mov	r3, r0
 8002f14:	4a5d      	ldr	r2, [pc, #372]	; (800308c <main+0x76c>)
 8002f16:	6093      	str	r3, [r2, #8]
		  P.pitch = asin(2*(q0*q2 - q3*q1))*(180/PI);
 8002f18:	4b58      	ldr	r3, [pc, #352]	; (800307c <main+0x75c>)
 8002f1a:	ed93 7a00 	vldr	s14, [r3]
 8002f1e:	4b5a      	ldr	r3, [pc, #360]	; (8003088 <main+0x768>)
 8002f20:	edd3 7a00 	vldr	s15, [r3]
 8002f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f28:	4b55      	ldr	r3, [pc, #340]	; (8003080 <main+0x760>)
 8002f2a:	edd3 6a00 	vldr	s13, [r3]
 8002f2e:	4b55      	ldr	r3, [pc, #340]	; (8003084 <main+0x764>)
 8002f30:	edd3 7a00 	vldr	s15, [r3]
 8002f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f40:	ee17 0a90 	vmov	r0, s15
 8002f44:	f7fd faac 	bl	80004a0 <__aeabi_f2d>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	ec43 2b10 	vmov	d0, r2, r3
 8002f50:	f008 fc16 	bl	800b780 <asin>
 8002f54:	ec51 0b10 	vmov	r0, r1, d0
 8002f58:	a341      	add	r3, pc, #260	; (adr r3, 8003060 <main+0x740>)
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	f7fd faf7 	bl	8000550 <__aeabi_dmul>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f7fd fda1 	bl	8000ab0 <__aeabi_d2f>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4a46      	ldr	r2, [pc, #280]	; (800308c <main+0x76c>)
 8002f72:	6053      	str	r3, [r2, #4]
		  P.Q0 = q0; P.Q1 = q1; P.Q2 = q2; P.Q3 = q3;
 8002f74:	4b41      	ldr	r3, [pc, #260]	; (800307c <main+0x75c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a44      	ldr	r2, [pc, #272]	; (800308c <main+0x76c>)
 8002f7a:	6113      	str	r3, [r2, #16]
 8002f7c:	4b41      	ldr	r3, [pc, #260]	; (8003084 <main+0x764>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a42      	ldr	r2, [pc, #264]	; (800308c <main+0x76c>)
 8002f82:	6153      	str	r3, [r2, #20]
 8002f84:	4b40      	ldr	r3, [pc, #256]	; (8003088 <main+0x768>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a40      	ldr	r2, [pc, #256]	; (800308c <main+0x76c>)
 8002f8a:	6193      	str	r3, [r2, #24]
 8002f8c:	4b3c      	ldr	r3, [pc, #240]	; (8003080 <main+0x760>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a3e      	ldr	r2, [pc, #248]	; (800308c <main+0x76c>)
 8002f92:	61d3      	str	r3, [r2, #28]

		  if(prevAx-ax  > 0.0001 || prevAy-ay > 0.0001){
 8002f94:	4b3e      	ldr	r3, [pc, #248]	; (8003090 <main+0x770>)
 8002f96:	ed93 7a00 	vldr	s14, [r3]
 8002f9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa2:	ee17 0a90 	vmov	r0, s15
 8002fa6:	f7fd fa7b 	bl	80004a0 <__aeabi_f2d>
 8002faa:	a32f      	add	r3, pc, #188	; (adr r3, 8003068 <main+0x748>)
 8002fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb0:	f7fd fd5e 	bl	8000a70 <__aeabi_dcmpgt>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d112      	bne.n	8002fe0 <main+0x6c0>
 8002fba:	4b36      	ldr	r3, [pc, #216]	; (8003094 <main+0x774>)
 8002fbc:	ed93 7a00 	vldr	s14, [r3]
 8002fc0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc8:	ee17 0a90 	vmov	r0, s15
 8002fcc:	f7fd fa68 	bl	80004a0 <__aeabi_f2d>
 8002fd0:	a325      	add	r3, pc, #148	; (adr r3, 8003068 <main+0x748>)
 8002fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd6:	f7fd fd4b 	bl	8000a70 <__aeabi_dcmpgt>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01d      	beq.n	800301c <main+0x6fc>
			  P.pozX += prevAx-ax;
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <main+0x770>)
 8002fe2:	ed93 7a00 	vldr	s14, [r3]
 8002fe6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fee:	4b27      	ldr	r3, [pc, #156]	; (800308c <main+0x76c>)
 8002ff0:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <main+0x76c>)
 8002ffa:	edc3 7a08 	vstr	s15, [r3, #32]
			  P.pozY += prevAy-ay;
 8002ffe:	4b25      	ldr	r3, [pc, #148]	; (8003094 <main+0x774>)
 8003000:	ed93 7a00 	vldr	s14, [r3]
 8003004:	edd7 7a04 	vldr	s15, [r7, #16]
 8003008:	ee37 7a67 	vsub.f32	s14, s14, s15
 800300c:	4b1f      	ldr	r3, [pc, #124]	; (800308c <main+0x76c>)
 800300e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003016:	4b1d      	ldr	r3, [pc, #116]	; (800308c <main+0x76c>)
 8003018:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		  }
		  prevAx = ax;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <main+0x770>)
 8003020:	6013      	str	r3, [r2, #0]
		  prevAy = ay;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <main+0x774>)
 8003026:	6013      	str	r3, [r2, #0]

		  P.magX = mx;
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4a18      	ldr	r2, [pc, #96]	; (800308c <main+0x76c>)
 800302c:	6293      	str	r3, [r2, #40]	; 0x28
		  P.magY = my;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a16      	ldr	r2, [pc, #88]	; (800308c <main+0x76c>)
 8003032:	62d3      	str	r3, [r2, #44]	; 0x2c
		  P.magZ = mz;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	4a15      	ldr	r2, [pc, #84]	; (800308c <main+0x76c>)
 8003038:	6313      	str	r3, [r2, #48]	; 0x30


		  for(int n=4; n<30; n++){ //pripravi podatke za spi
 800303a:	2304      	movs	r3, #4
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
 800303e:	e00a      	b.n	8003056 <main+0x736>
			  SpiTxData[n-4] = ((uint8_t*)&P)[n];
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	4a12      	ldr	r2, [pc, #72]	; (800308c <main+0x76c>)
 8003044:	441a      	add	r2, r3
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	3b04      	subs	r3, #4
 800304a:	7811      	ldrb	r1, [r2, #0]
 800304c:	4a12      	ldr	r2, [pc, #72]	; (8003098 <main+0x778>)
 800304e:	54d1      	strb	r1, [r2, r3]
		  for(int n=4; n<30; n++){ //pripravi podatke za spi
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	3301      	adds	r3, #1
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	2b1d      	cmp	r3, #29
 800305a:	ddf1      	ble.n	8003040 <main+0x720>
	  if(MagReady){
 800305c:	e4d1      	b.n	8002a02 <main+0xe2>
 800305e:	bf00      	nop
 8003060:	00000000 	.word	0x00000000
 8003064:	404ca5dc 	.word	0x404ca5dc
 8003068:	eb1c432d 	.word	0xeb1c432d
 800306c:	3f1a36e2 	.word	0x3f1a36e2
 8003070:	200008f8 	.word	0x200008f8
 8003074:	3ac49ba6 	.word	0x3ac49ba6
 8003078:	bac49ba6 	.word	0xbac49ba6
 800307c:	20000004 	.word	0x20000004
 8003080:	20000214 	.word	0x20000214
 8003084:	2000020c 	.word	0x2000020c
 8003088:	20000210 	.word	0x20000210
 800308c:	20000b38 	.word	0x20000b38
 8003090:	2000021c 	.word	0x2000021c
 8003094:	20000220 	.word	0x20000220
 8003098:	20000b18 	.word	0x20000b18

0800309c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b094      	sub	sp, #80	; 0x50
 80030a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030a2:	f107 0320 	add.w	r3, r7, #32
 80030a6:	2230      	movs	r2, #48	; 0x30
 80030a8:	2100      	movs	r1, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f008 fb60 	bl	800b770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030b0:	f107 030c 	add.w	r3, r7, #12
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c0:	2300      	movs	r3, #0
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	4b27      	ldr	r3, [pc, #156]	; (8003164 <SystemClock_Config+0xc8>)
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	4a26      	ldr	r2, [pc, #152]	; (8003164 <SystemClock_Config+0xc8>)
 80030ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ce:	6413      	str	r3, [r2, #64]	; 0x40
 80030d0:	4b24      	ldr	r3, [pc, #144]	; (8003164 <SystemClock_Config+0xc8>)
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030dc:	2300      	movs	r3, #0
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	4b21      	ldr	r3, [pc, #132]	; (8003168 <SystemClock_Config+0xcc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a20      	ldr	r2, [pc, #128]	; (8003168 <SystemClock_Config+0xcc>)
 80030e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <SystemClock_Config+0xcc>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030f8:	2301      	movs	r3, #1
 80030fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003102:	2302      	movs	r3, #2
 8003104:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003106:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800310a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800310c:	2304      	movs	r3, #4
 800310e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003110:	23a8      	movs	r3, #168	; 0xa8
 8003112:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003114:	2304      	movs	r3, #4
 8003116:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003118:	2307      	movs	r3, #7
 800311a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800311c:	f107 0320 	add.w	r3, r7, #32
 8003120:	4618      	mov	r0, r3
 8003122:	f003 fbcb 	bl	80068bc <HAL_RCC_OscConfig>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800312c:	f000 fa2a 	bl	8003584 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003130:	230f      	movs	r3, #15
 8003132:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003134:	2302      	movs	r3, #2
 8003136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800313c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003146:	f107 030c 	add.w	r3, r7, #12
 800314a:	2102      	movs	r1, #2
 800314c:	4618      	mov	r0, r3
 800314e:	f003 fe2d 	bl	8006dac <HAL_RCC_ClockConfig>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003158:	f000 fa14 	bl	8003584 <Error_Handler>
  }
}
 800315c:	bf00      	nop
 800315e:	3750      	adds	r7, #80	; 0x50
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40023800 	.word	0x40023800
 8003168:	40007000 	.word	0x40007000

0800316c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003170:	4b12      	ldr	r3, [pc, #72]	; (80031bc <MX_I2C1_Init+0x50>)
 8003172:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <MX_I2C1_Init+0x54>)
 8003174:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003176:	4b11      	ldr	r3, [pc, #68]	; (80031bc <MX_I2C1_Init+0x50>)
 8003178:	4a12      	ldr	r2, [pc, #72]	; (80031c4 <MX_I2C1_Init+0x58>)
 800317a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <MX_I2C1_Init+0x50>)
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003182:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <MX_I2C1_Init+0x50>)
 8003184:	2200      	movs	r2, #0
 8003186:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <MX_I2C1_Init+0x50>)
 800318a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800318e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <MX_I2C1_Init+0x50>)
 8003192:	2200      	movs	r2, #0
 8003194:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <MX_I2C1_Init+0x50>)
 8003198:	2200      	movs	r2, #0
 800319a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800319c:	4b07      	ldr	r3, [pc, #28]	; (80031bc <MX_I2C1_Init+0x50>)
 800319e:	2200      	movs	r2, #0
 80031a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <MX_I2C1_Init+0x50>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031a8:	4804      	ldr	r0, [pc, #16]	; (80031bc <MX_I2C1_Init+0x50>)
 80031aa:	f001 fa45 	bl	8004638 <HAL_I2C_Init>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80031b4:	f000 f9e6 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031b8:	bf00      	nop
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20000634 	.word	0x20000634
 80031c0:	40005400 	.word	0x40005400
 80031c4:	00061a80 	.word	0x00061a80

080031c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80031cc:	4b17      	ldr	r3, [pc, #92]	; (800322c <MX_SPI1_Init+0x64>)
 80031ce:	4a18      	ldr	r2, [pc, #96]	; (8003230 <MX_SPI1_Init+0x68>)
 80031d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031d2:	4b16      	ldr	r3, [pc, #88]	; (800322c <MX_SPI1_Init+0x64>)
 80031d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <MX_SPI1_Init+0x64>)
 80031dc:	2200      	movs	r2, #0
 80031de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <MX_SPI1_Init+0x64>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <MX_SPI1_Init+0x64>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <MX_SPI1_Init+0x64>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031f2:	4b0e      	ldr	r3, [pc, #56]	; (800322c <MX_SPI1_Init+0x64>)
 80031f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <MX_SPI1_Init+0x64>)
 80031fc:	2218      	movs	r2, #24
 80031fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003200:	4b0a      	ldr	r3, [pc, #40]	; (800322c <MX_SPI1_Init+0x64>)
 8003202:	2200      	movs	r2, #0
 8003204:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <MX_SPI1_Init+0x64>)
 8003208:	2200      	movs	r2, #0
 800320a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800320c:	4b07      	ldr	r3, [pc, #28]	; (800322c <MX_SPI1_Init+0x64>)
 800320e:	2200      	movs	r2, #0
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <MX_SPI1_Init+0x64>)
 8003214:	220a      	movs	r2, #10
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003218:	4804      	ldr	r0, [pc, #16]	; (800322c <MX_SPI1_Init+0x64>)
 800321a:	f003 ffaf 	bl	800717c <HAL_SPI_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003224:	f000 f9ae 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000a00 	.word	0x20000a00
 8003230:	40013000 	.word	0x40013000

08003234 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8003238:	4b15      	ldr	r3, [pc, #84]	; (8003290 <MX_SPI5_Init+0x5c>)
 800323a:	4a16      	ldr	r2, [pc, #88]	; (8003294 <MX_SPI5_Init+0x60>)
 800323c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 800323e:	4b14      	ldr	r3, [pc, #80]	; (8003290 <MX_SPI5_Init+0x5c>)
 8003240:	2200      	movs	r2, #0
 8003242:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <MX_SPI5_Init+0x5c>)
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <MX_SPI5_Init+0x5c>)
 800324c:	2200      	movs	r2, #0
 800324e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <MX_SPI5_Init+0x5c>)
 8003252:	2200      	movs	r2, #0
 8003254:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <MX_SPI5_Init+0x5c>)
 8003258:	2200      	movs	r2, #0
 800325a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <MX_SPI5_Init+0x5c>)
 800325e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003262:	619a      	str	r2, [r3, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <MX_SPI5_Init+0x5c>)
 8003266:	2200      	movs	r2, #0
 8003268:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <MX_SPI5_Init+0x5c>)
 800326c:	2200      	movs	r2, #0
 800326e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003270:	4b07      	ldr	r3, [pc, #28]	; (8003290 <MX_SPI5_Init+0x5c>)
 8003272:	2200      	movs	r2, #0
 8003274:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <MX_SPI5_Init+0x5c>)
 8003278:	220a      	movs	r2, #10
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800327c:	4804      	ldr	r0, [pc, #16]	; (8003290 <MX_SPI5_Init+0x5c>)
 800327e:	f003 ff7d 	bl	800717c <HAL_SPI_Init>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <MX_SPI5_Init+0x58>
  {
    Error_Handler();
 8003288:	f000 f97c 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800328c:	bf00      	nop
 800328e:	bd80      	pop	{r7, pc}
 8003290:	2000055c 	.word	0x2000055c
 8003294:	40015000 	.word	0x40015000

08003298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <MX_DMA_Init+0x4c>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4a0f      	ldr	r2, [pc, #60]	; (80032e4 <MX_DMA_Init+0x4c>)
 80032a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032ac:	6313      	str	r3, [r2, #48]	; 0x30
 80032ae:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <MX_DMA_Init+0x4c>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b6:	607b      	str	r3, [r7, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2100      	movs	r1, #0
 80032be:	203b      	movs	r0, #59	; 0x3b
 80032c0:	f000 fce3 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80032c4:	203b      	movs	r0, #59	; 0x3b
 80032c6:	f000 fcfc 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2100      	movs	r1, #0
 80032ce:	203c      	movs	r0, #60	; 0x3c
 80032d0:	f000 fcdb 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80032d4:	203c      	movs	r0, #60	; 0x3c
 80032d6:	f000 fcf4 	bl	8003cc2 <HAL_NVIC_EnableIRQ>

}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800

080032e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08c      	sub	sp, #48	; 0x30
 80032ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ee:	f107 031c 	add.w	r3, r7, #28
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	4b9a      	ldr	r3, [pc, #616]	; (800356c <MX_GPIO_Init+0x284>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a99      	ldr	r2, [pc, #612]	; (800356c <MX_GPIO_Init+0x284>)
 8003308:	f043 0310 	orr.w	r3, r3, #16
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b97      	ldr	r3, [pc, #604]	; (800356c <MX_GPIO_Init+0x284>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	4b93      	ldr	r3, [pc, #588]	; (800356c <MX_GPIO_Init+0x284>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	4a92      	ldr	r2, [pc, #584]	; (800356c <MX_GPIO_Init+0x284>)
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	6313      	str	r3, [r2, #48]	; 0x30
 800332a:	4b90      	ldr	r3, [pc, #576]	; (800356c <MX_GPIO_Init+0x284>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	4b8c      	ldr	r3, [pc, #560]	; (800356c <MX_GPIO_Init+0x284>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	4a8b      	ldr	r2, [pc, #556]	; (800356c <MX_GPIO_Init+0x284>)
 8003340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003344:	6313      	str	r3, [r2, #48]	; 0x30
 8003346:	4b89      	ldr	r3, [pc, #548]	; (800356c <MX_GPIO_Init+0x284>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	4b85      	ldr	r3, [pc, #532]	; (800356c <MX_GPIO_Init+0x284>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a84      	ldr	r2, [pc, #528]	; (800356c <MX_GPIO_Init+0x284>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b82      	ldr	r3, [pc, #520]	; (800356c <MX_GPIO_Init+0x284>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	4b7e      	ldr	r3, [pc, #504]	; (800356c <MX_GPIO_Init+0x284>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4a7d      	ldr	r2, [pc, #500]	; (800356c <MX_GPIO_Init+0x284>)
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	6313      	str	r3, [r2, #48]	; 0x30
 800337e:	4b7b      	ldr	r3, [pc, #492]	; (800356c <MX_GPIO_Init+0x284>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	4b77      	ldr	r3, [pc, #476]	; (800356c <MX_GPIO_Init+0x284>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a76      	ldr	r2, [pc, #472]	; (800356c <MX_GPIO_Init+0x284>)
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b74      	ldr	r3, [pc, #464]	; (800356c <MX_GPIO_Init+0x284>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_SPI1_Pin|mf_lf_Pin|mb_lf_Pin|GPIO_PIN_9
 80033a6:	2200      	movs	r2, #0
 80033a8:	f647 7188 	movw	r1, #32648	; 0x7f88
 80033ac:	4870      	ldr	r0, [pc, #448]	; (8003570 <MX_GPIO_Init+0x288>)
 80033ae:	f001 f911 	bl	80045d4 <HAL_GPIO_WritePin>
                          |mb_rb_Pin|GPIO_PIN_11|mf_rb_Pin|GPIO_PIN_13
                          |mb_lb_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80033b2:	2201      	movs	r2, #1
 80033b4:	2101      	movs	r1, #1
 80033b6:	486f      	ldr	r0, [pc, #444]	; (8003574 <MX_GPIO_Init+0x28c>)
 80033b8:	f001 f90c 	bl	80045d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80033bc:	2200      	movs	r2, #0
 80033be:	2104      	movs	r1, #4
 80033c0:	486d      	ldr	r0, [pc, #436]	; (8003578 <MX_GPIO_Init+0x290>)
 80033c2:	f001 f907 	bl	80045d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80033c6:	2200      	movs	r2, #0
 80033c8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80033cc:	486b      	ldr	r0, [pc, #428]	; (800357c <MX_GPIO_Init+0x294>)
 80033ce:	f001 f901 	bl	80045d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_1;
 80033d2:	2316      	movs	r3, #22
 80033d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80033da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033e0:	f107 031c 	add.w	r3, r7, #28
 80033e4:	4619      	mov	r1, r3
 80033e6:	4862      	ldr	r0, [pc, #392]	; (8003570 <MX_GPIO_Init+0x288>)
 80033e8:	f000 ff70 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SPI1_Pin */
  GPIO_InitStruct.Pin = CS_SPI1_Pin;
 80033ec:	2308      	movs	r3, #8
 80033ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f0:	2301      	movs	r3, #1
 80033f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033f8:	2302      	movs	r3, #2
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_SPI1_GPIO_Port, &GPIO_InitStruct);
 80033fc:	f107 031c 	add.w	r3, r7, #28
 8003400:	4619      	mov	r1, r3
 8003402:	485b      	ldr	r0, [pc, #364]	; (8003570 <MX_GPIO_Init+0x288>)
 8003404:	f000 ff62 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003408:	2301      	movs	r3, #1
 800340a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800340c:	2301      	movs	r3, #1
 800340e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003414:	2300      	movs	r3, #0
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003418:	f107 031c 	add.w	r3, r7, #28
 800341c:	4619      	mov	r1, r3
 800341e:	4855      	ldr	r0, [pc, #340]	; (8003574 <MX_GPIO_Init+0x28c>)
 8003420:	f000 ff54 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003424:	2308      	movs	r3, #8
 8003426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003428:	2302      	movs	r3, #2
 800342a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003430:	2300      	movs	r3, #0
 8003432:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003434:	2305      	movs	r3, #5
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003438:	f107 031c 	add.w	r3, r7, #28
 800343c:	4619      	mov	r1, r3
 800343e:	484d      	ldr	r0, [pc, #308]	; (8003574 <MX_GPIO_Init+0x28c>)
 8003440:	f000 ff44 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003444:	2301      	movs	r3, #1
 8003446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003448:	2300      	movs	r3, #0
 800344a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344c:	2300      	movs	r3, #0
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003450:	f107 031c 	add.w	r3, r7, #28
 8003454:	4619      	mov	r1, r3
 8003456:	484a      	ldr	r0, [pc, #296]	; (8003580 <MX_GPIO_Init+0x298>)
 8003458:	f000 ff38 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800345c:	2310      	movs	r3, #16
 800345e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003460:	2302      	movs	r3, #2
 8003462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003468:	2300      	movs	r3, #0
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800346c:	2306      	movs	r3, #6
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003470:	f107 031c 	add.w	r3, r7, #28
 8003474:	4619      	mov	r1, r3
 8003476:	4842      	ldr	r0, [pc, #264]	; (8003580 <MX_GPIO_Init+0x298>)
 8003478:	f000 ff28 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800347c:	2304      	movs	r3, #4
 800347e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003480:	2301      	movs	r3, #1
 8003482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003488:	2300      	movs	r3, #0
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348c:	f107 031c 	add.w	r3, r7, #28
 8003490:	4619      	mov	r1, r3
 8003492:	4839      	ldr	r0, [pc, #228]	; (8003578 <MX_GPIO_Init+0x290>)
 8003494:	f000 ff1a 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : mf_lf_Pin mb_lf_Pin PE9 mb_rb_Pin
                           PE11 mf_rb_Pin PE13 mb_lb_Pin */
  GPIO_InitStruct.Pin = mf_lf_Pin|mb_lf_Pin|GPIO_PIN_9|mb_rb_Pin
 8003498:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 800349c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|mf_rb_Pin|GPIO_PIN_13|mb_lb_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800349e:	2301      	movs	r3, #1
 80034a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a6:	2300      	movs	r3, #0
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034aa:	f107 031c 	add.w	r3, r7, #28
 80034ae:	4619      	mov	r1, r3
 80034b0:	482f      	ldr	r0, [pc, #188]	; (8003570 <MX_GPIO_Init+0x288>)
 80034b2:	f000 ff0b 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80034b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034bc:	2302      	movs	r3, #2
 80034be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034c8:	2305      	movs	r3, #5
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034cc:	f107 031c 	add.w	r3, r7, #28
 80034d0:	4619      	mov	r1, r3
 80034d2:	4829      	ldr	r0, [pc, #164]	; (8003578 <MX_GPIO_Init+0x290>)
 80034d4:	f000 fefa 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80034d8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80034dc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034de:	2301      	movs	r3, #1
 80034e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e6:	2300      	movs	r3, #0
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034ea:	f107 031c 	add.w	r3, r7, #28
 80034ee:	4619      	mov	r1, r3
 80034f0:	4822      	ldr	r0, [pc, #136]	; (800357c <MX_GPIO_Init+0x294>)
 80034f2:	f000 feeb 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80034f6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80034fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	2302      	movs	r3, #2
 80034fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	2300      	movs	r3, #0
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003508:	2306      	movs	r3, #6
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800350c:	f107 031c 	add.w	r3, r7, #28
 8003510:	4619      	mov	r1, r3
 8003512:	4818      	ldr	r0, [pc, #96]	; (8003574 <MX_GPIO_Init+0x28c>)
 8003514:	f000 feda 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800351c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800351e:	2300      	movs	r3, #0
 8003520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003526:	f107 031c 	add.w	r3, r7, #28
 800352a:	4619      	mov	r1, r3
 800352c:	4811      	ldr	r0, [pc, #68]	; (8003574 <MX_GPIO_Init+0x28c>)
 800352e:	f000 fecd 	bl	80042cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003532:	2200      	movs	r2, #0
 8003534:	2100      	movs	r1, #0
 8003536:	2007      	movs	r0, #7
 8003538:	f000 fba7 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800353c:	2007      	movs	r0, #7
 800353e:	f000 fbc0 	bl	8003cc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2100      	movs	r1, #0
 8003546:	2008      	movs	r0, #8
 8003548:	f000 fb9f 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800354c:	2008      	movs	r0, #8
 800354e:	f000 fbb8 	bl	8003cc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003552:	2200      	movs	r2, #0
 8003554:	2100      	movs	r1, #0
 8003556:	200a      	movs	r0, #10
 8003558:	f000 fb97 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800355c:	200a      	movs	r0, #10
 800355e:	f000 fbb0 	bl	8003cc2 <HAL_NVIC_EnableIRQ>

}
 8003562:	bf00      	nop
 8003564:	3730      	adds	r7, #48	; 0x30
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40023800 	.word	0x40023800
 8003570:	40021000 	.word	0x40021000
 8003574:	40020800 	.word	0x40020800
 8003578:	40020400 	.word	0x40020400
 800357c:	40020c00 	.word	0x40020c00
 8003580:	40020000 	.word	0x40020000

08003584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003588:	b672      	cpsid	i
}
 800358a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800358c:	e7fe      	b.n	800358c <Error_Handler+0x8>
	...

08003590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <HAL_MspInit+0x4c>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	4a0f      	ldr	r2, [pc, #60]	; (80035dc <HAL_MspInit+0x4c>)
 80035a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a4:	6453      	str	r3, [r2, #68]	; 0x44
 80035a6:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <HAL_MspInit+0x4c>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_MspInit+0x4c>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	4a08      	ldr	r2, [pc, #32]	; (80035dc <HAL_MspInit+0x4c>)
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6413      	str	r3, [r2, #64]	; 0x40
 80035c2:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_MspInit+0x4c>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80035ce:	2007      	movs	r0, #7
 80035d0:	f000 fb50 	bl	8003c74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40023800 	.word	0x40023800

080035e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	; 0x28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a19      	ldr	r2, [pc, #100]	; (8003664 <HAL_I2C_MspInit+0x84>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d12c      	bne.n	800365c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	4b18      	ldr	r3, [pc, #96]	; (8003668 <HAL_I2C_MspInit+0x88>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	4a17      	ldr	r2, [pc, #92]	; (8003668 <HAL_I2C_MspInit+0x88>)
 800360c:	f043 0302 	orr.w	r3, r3, #2
 8003610:	6313      	str	r3, [r2, #48]	; 0x30
 8003612:	4b15      	ldr	r3, [pc, #84]	; (8003668 <HAL_I2C_MspInit+0x88>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800361e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003624:	2312      	movs	r3, #18
 8003626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003628:	2301      	movs	r3, #1
 800362a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362c:	2300      	movs	r3, #0
 800362e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003630:	2304      	movs	r3, #4
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4619      	mov	r1, r3
 800363a:	480c      	ldr	r0, [pc, #48]	; (800366c <HAL_I2C_MspInit+0x8c>)
 800363c:	f000 fe46 	bl	80042cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HAL_I2C_MspInit+0x88>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	4a07      	ldr	r2, [pc, #28]	; (8003668 <HAL_I2C_MspInit+0x88>)
 800364a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800364e:	6413      	str	r3, [r2, #64]	; 0x40
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_I2C_MspInit+0x88>)
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800365c:	bf00      	nop
 800365e:	3728      	adds	r7, #40	; 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40005400 	.word	0x40005400
 8003668:	40023800 	.word	0x40023800
 800366c:	40020400 	.word	0x40020400

08003670 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08c      	sub	sp, #48	; 0x30
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	f107 031c 	add.w	r3, r7, #28
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a6f      	ldr	r2, [pc, #444]	; (800384c <HAL_SPI_MspInit+0x1dc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d12c      	bne.n	80036ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	4b6e      	ldr	r3, [pc, #440]	; (8003850 <HAL_SPI_MspInit+0x1e0>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	4a6d      	ldr	r2, [pc, #436]	; (8003850 <HAL_SPI_MspInit+0x1e0>)
 800369c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036a0:	6453      	str	r3, [r2, #68]	; 0x44
 80036a2:	4b6b      	ldr	r3, [pc, #428]	; (8003850 <HAL_SPI_MspInit+0x1e0>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	4b67      	ldr	r3, [pc, #412]	; (8003850 <HAL_SPI_MspInit+0x1e0>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	4a66      	ldr	r2, [pc, #408]	; (8003850 <HAL_SPI_MspInit+0x1e0>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6313      	str	r3, [r2, #48]	; 0x30
 80036be:	4b64      	ldr	r3, [pc, #400]	; (8003850 <HAL_SPI_MspInit+0x1e0>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80036ca:	23e0      	movs	r3, #224	; 0xe0
 80036cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ce:	2302      	movs	r3, #2
 80036d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d6:	2303      	movs	r3, #3
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036da:	2305      	movs	r3, #5
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036de:	f107 031c 	add.w	r3, r7, #28
 80036e2:	4619      	mov	r1, r3
 80036e4:	485b      	ldr	r0, [pc, #364]	; (8003854 <HAL_SPI_MspInit+0x1e4>)
 80036e6:	f000 fdf1 	bl	80042cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80036ea:	e0ab      	b.n	8003844 <HAL_SPI_MspInit+0x1d4>
  else if(hspi->Instance==SPI5)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a59      	ldr	r2, [pc, #356]	; (8003858 <HAL_SPI_MspInit+0x1e8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	f040 80a6 	bne.w	8003844 <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	4b54      	ldr	r3, [pc, #336]	; (8003850 <HAL_SPI_MspInit+0x1e0>)
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	4a53      	ldr	r2, [pc, #332]	; (8003850 <HAL_SPI_MspInit+0x1e0>)
 8003702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003706:	6453      	str	r3, [r2, #68]	; 0x44
 8003708:	4b51      	ldr	r3, [pc, #324]	; (8003850 <HAL_SPI_MspInit+0x1e0>)
 800370a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	4b4d      	ldr	r3, [pc, #308]	; (8003850 <HAL_SPI_MspInit+0x1e0>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	4a4c      	ldr	r2, [pc, #304]	; (8003850 <HAL_SPI_MspInit+0x1e0>)
 800371e:	f043 0310 	orr.w	r3, r3, #16
 8003722:	6313      	str	r3, [r2, #48]	; 0x30
 8003724:	4b4a      	ldr	r3, [pc, #296]	; (8003850 <HAL_SPI_MspInit+0x1e0>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003730:	2300      	movs	r3, #0
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	4b46      	ldr	r3, [pc, #280]	; (8003850 <HAL_SPI_MspInit+0x1e0>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	4a45      	ldr	r2, [pc, #276]	; (8003850 <HAL_SPI_MspInit+0x1e0>)
 800373a:	f043 0302 	orr.w	r3, r3, #2
 800373e:	6313      	str	r3, [r2, #48]	; 0x30
 8003740:	4b43      	ldr	r3, [pc, #268]	; (8003850 <HAL_SPI_MspInit+0x1e0>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800374c:	2360      	movs	r3, #96	; 0x60
 800374e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003750:	2302      	movs	r3, #2
 8003752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003758:	2303      	movs	r3, #3
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800375c:	2306      	movs	r3, #6
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003760:	f107 031c 	add.w	r3, r7, #28
 8003764:	4619      	mov	r1, r3
 8003766:	483d      	ldr	r0, [pc, #244]	; (800385c <HAL_SPI_MspInit+0x1ec>)
 8003768:	f000 fdb0 	bl	80042cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800376c:	2301      	movs	r3, #1
 800376e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003770:	2302      	movs	r3, #2
 8003772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003778:	2303      	movs	r3, #3
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800377c:	2306      	movs	r3, #6
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003780:	f107 031c 	add.w	r3, r7, #28
 8003784:	4619      	mov	r1, r3
 8003786:	4836      	ldr	r0, [pc, #216]	; (8003860 <HAL_SPI_MspInit+0x1f0>)
 8003788:	f000 fda0 	bl	80042cc <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA2_Stream3;
 800378c:	4b35      	ldr	r3, [pc, #212]	; (8003864 <HAL_SPI_MspInit+0x1f4>)
 800378e:	4a36      	ldr	r2, [pc, #216]	; (8003868 <HAL_SPI_MspInit+0x1f8>)
 8003790:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 8003792:	4b34      	ldr	r3, [pc, #208]	; (8003864 <HAL_SPI_MspInit+0x1f4>)
 8003794:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003798:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800379a:	4b32      	ldr	r3, [pc, #200]	; (8003864 <HAL_SPI_MspInit+0x1f4>)
 800379c:	2200      	movs	r2, #0
 800379e:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037a0:	4b30      	ldr	r3, [pc, #192]	; (8003864 <HAL_SPI_MspInit+0x1f4>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037a6:	4b2f      	ldr	r3, [pc, #188]	; (8003864 <HAL_SPI_MspInit+0x1f4>)
 80037a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ac:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037ae:	4b2d      	ldr	r3, [pc, #180]	; (8003864 <HAL_SPI_MspInit+0x1f4>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037b4:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_SPI_MspInit+0x1f4>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 80037ba:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <HAL_SPI_MspInit+0x1f4>)
 80037bc:	2200      	movs	r2, #0
 80037be:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037c0:	4b28      	ldr	r3, [pc, #160]	; (8003864 <HAL_SPI_MspInit+0x1f4>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037c6:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_SPI_MspInit+0x1f4>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80037cc:	4825      	ldr	r0, [pc, #148]	; (8003864 <HAL_SPI_MspInit+0x1f4>)
 80037ce:	f000 fa93 	bl	8003cf8 <HAL_DMA_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_SPI_MspInit+0x16c>
      Error_Handler();
 80037d8:	f7ff fed4 	bl	8003584 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a21      	ldr	r2, [pc, #132]	; (8003864 <HAL_SPI_MspInit+0x1f4>)
 80037e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80037e2:	4a20      	ldr	r2, [pc, #128]	; (8003864 <HAL_SPI_MspInit+0x1f4>)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi5_tx.Instance = DMA2_Stream4;
 80037e8:	4b20      	ldr	r3, [pc, #128]	; (800386c <HAL_SPI_MspInit+0x1fc>)
 80037ea:	4a21      	ldr	r2, [pc, #132]	; (8003870 <HAL_SPI_MspInit+0x200>)
 80037ec:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 80037ee:	4b1f      	ldr	r3, [pc, #124]	; (800386c <HAL_SPI_MspInit+0x1fc>)
 80037f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80037f4:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037f6:	4b1d      	ldr	r3, [pc, #116]	; (800386c <HAL_SPI_MspInit+0x1fc>)
 80037f8:	2240      	movs	r2, #64	; 0x40
 80037fa:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <HAL_SPI_MspInit+0x1fc>)
 80037fe:	2200      	movs	r2, #0
 8003800:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003802:	4b1a      	ldr	r3, [pc, #104]	; (800386c <HAL_SPI_MspInit+0x1fc>)
 8003804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003808:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800380a:	4b18      	ldr	r3, [pc, #96]	; (800386c <HAL_SPI_MspInit+0x1fc>)
 800380c:	2200      	movs	r2, #0
 800380e:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003810:	4b16      	ldr	r3, [pc, #88]	; (800386c <HAL_SPI_MspInit+0x1fc>)
 8003812:	2200      	movs	r2, #0
 8003814:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <HAL_SPI_MspInit+0x1fc>)
 8003818:	2200      	movs	r2, #0
 800381a:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800381c:	4b13      	ldr	r3, [pc, #76]	; (800386c <HAL_SPI_MspInit+0x1fc>)
 800381e:	2200      	movs	r2, #0
 8003820:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <HAL_SPI_MspInit+0x1fc>)
 8003824:	2200      	movs	r2, #0
 8003826:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8003828:	4810      	ldr	r0, [pc, #64]	; (800386c <HAL_SPI_MspInit+0x1fc>)
 800382a:	f000 fa65 	bl	8003cf8 <HAL_DMA_Init>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_SPI_MspInit+0x1c8>
      Error_Handler();
 8003834:	f7ff fea6 	bl	8003584 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi5_tx);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a0c      	ldr	r2, [pc, #48]	; (800386c <HAL_SPI_MspInit+0x1fc>)
 800383c:	649a      	str	r2, [r3, #72]	; 0x48
 800383e:	4a0b      	ldr	r2, [pc, #44]	; (800386c <HAL_SPI_MspInit+0x1fc>)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003844:	bf00      	nop
 8003846:	3730      	adds	r7, #48	; 0x30
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40013000 	.word	0x40013000
 8003850:	40023800 	.word	0x40023800
 8003854:	40020000 	.word	0x40020000
 8003858:	40015000 	.word	0x40015000
 800385c:	40021000 	.word	0x40021000
 8003860:	40020400 	.word	0x40020400
 8003864:	20000688 	.word	0x20000688
 8003868:	40026458 	.word	0x40026458
 800386c:	20000898 	.word	0x20000898
 8003870:	40026470 	.word	0x40026470

08003874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003878:	e7fe      	b.n	8003878 <NMI_Handler+0x4>

0800387a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800387e:	e7fe      	b.n	800387e <HardFault_Handler+0x4>

08003880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003884:	e7fe      	b.n	8003884 <MemManage_Handler+0x4>

08003886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003886:	b480      	push	{r7}
 8003888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800388a:	e7fe      	b.n	800388a <BusFault_Handler+0x4>

0800388c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003890:	e7fe      	b.n	8003890 <UsageFault_Handler+0x4>

08003892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003892:	b480      	push	{r7}
 8003894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038a4:	bf00      	nop
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038ae:	b480      	push	{r7}
 80038b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038c0:	f000 f8c4 	bl	8003a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038c4:	bf00      	nop
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80038cc:	2002      	movs	r0, #2
 80038ce:	f000 fe9b 	bl	8004608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80038da:	2004      	movs	r0, #4
 80038dc:	f000 fe94 	bl	8004608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80038e8:	2010      	movs	r0, #16
 80038ea:	f000 fe8d 	bl	8004608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 80038f8:	4802      	ldr	r0, [pc, #8]	; (8003904 <DMA2_Stream3_IRQHandler+0x10>)
 80038fa:	f000 faab 	bl	8003e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000688 	.word	0x20000688

08003908 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 800390c:	4802      	ldr	r0, [pc, #8]	; (8003918 <DMA2_Stream4_IRQHandler+0x10>)
 800390e:	f000 faa1 	bl	8003e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000898 	.word	0x20000898

0800391c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003920:	4802      	ldr	r0, [pc, #8]	; (800392c <OTG_FS_IRQHandler+0x10>)
 8003922:	f001 ff98 	bl	8005856 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20002040 	.word	0x20002040

08003930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <SystemInit+0x20>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	4a05      	ldr	r2, [pc, #20]	; (8003950 <SystemInit+0x20>)
 800393c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800398c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003958:	480d      	ldr	r0, [pc, #52]	; (8003990 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800395a:	490e      	ldr	r1, [pc, #56]	; (8003994 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800395c:	4a0e      	ldr	r2, [pc, #56]	; (8003998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800395e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003960:	e002      	b.n	8003968 <LoopCopyDataInit>

08003962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003966:	3304      	adds	r3, #4

08003968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800396a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800396c:	d3f9      	bcc.n	8003962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800396e:	4a0b      	ldr	r2, [pc, #44]	; (800399c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003970:	4c0b      	ldr	r4, [pc, #44]	; (80039a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003974:	e001      	b.n	800397a <LoopFillZerobss>

08003976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003978:	3204      	adds	r2, #4

0800397a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800397a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800397c:	d3fb      	bcc.n	8003976 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800397e:	f7ff ffd7 	bl	8003930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003982:	f007 fed1 	bl	800b728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003986:	f7fe ffcb 	bl	8002920 <main>
  bx  lr    
 800398a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800398c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003994:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003998:	0800c3e8 	.word	0x0800c3e8
  ldr r2, =_sbss
 800399c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80039a0:	20002448 	.word	0x20002448

080039a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039a4:	e7fe      	b.n	80039a4 <ADC_IRQHandler>
	...

080039a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039ac:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <HAL_Init+0x40>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0d      	ldr	r2, [pc, #52]	; (80039e8 <HAL_Init+0x40>)
 80039b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_Init+0x40>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <HAL_Init+0x40>)
 80039be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <HAL_Init+0x40>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a07      	ldr	r2, [pc, #28]	; (80039e8 <HAL_Init+0x40>)
 80039ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039d0:	2003      	movs	r0, #3
 80039d2:	f000 f94f 	bl	8003c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039d6:	2000      	movs	r0, #0
 80039d8:	f000 f808 	bl	80039ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039dc:	f7ff fdd8 	bl	8003590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023c00 	.word	0x40023c00

080039ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039f4:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <HAL_InitTick+0x54>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <HAL_InitTick+0x58>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	4619      	mov	r1, r3
 80039fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f967 	bl	8003cde <HAL_SYSTICK_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e00e      	b.n	8003a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b0f      	cmp	r3, #15
 8003a1e:	d80a      	bhi.n	8003a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a20:	2200      	movs	r2, #0
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	f000 f92f 	bl	8003c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a2c:	4a06      	ldr	r2, [pc, #24]	; (8003a48 <HAL_InitTick+0x5c>)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e000      	b.n	8003a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	20000008 	.word	0x20000008
 8003a44:	20000010 	.word	0x20000010
 8003a48:	2000000c 	.word	0x2000000c

08003a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_IncTick+0x20>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_IncTick+0x24>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	4a04      	ldr	r2, [pc, #16]	; (8003a70 <HAL_IncTick+0x24>)
 8003a5e:	6013      	str	r3, [r2, #0]
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000010 	.word	0x20000010
 8003a70:	20000b6c 	.word	0x20000b6c

08003a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return uwTick;
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <HAL_GetTick+0x14>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000b6c 	.word	0x20000b6c

08003a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a94:	f7ff ffee 	bl	8003a74 <HAL_GetTick>
 8003a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d005      	beq.n	8003ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <HAL_Delay+0x44>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ab2:	bf00      	nop
 8003ab4:	f7ff ffde 	bl	8003a74 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d8f7      	bhi.n	8003ab4 <HAL_Delay+0x28>
  {
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000010 	.word	0x20000010

08003ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003af0:	4013      	ands	r3, r2
 8003af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b06:	4a04      	ldr	r2, [pc, #16]	; (8003b18 <__NVIC_SetPriorityGrouping+0x44>)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	60d3      	str	r3, [r2, #12]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b20:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <__NVIC_GetPriorityGrouping+0x18>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	f003 0307 	and.w	r3, r3, #7
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	db0b      	blt.n	8003b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	f003 021f 	and.w	r2, r3, #31
 8003b50:	4907      	ldr	r1, [pc, #28]	; (8003b70 <__NVIC_EnableIRQ+0x38>)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	2001      	movs	r0, #1
 8003b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	e000e100 	.word	0xe000e100

08003b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	6039      	str	r1, [r7, #0]
 8003b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	db0a      	blt.n	8003b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	490c      	ldr	r1, [pc, #48]	; (8003bc0 <__NVIC_SetPriority+0x4c>)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	0112      	lsls	r2, r2, #4
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	440b      	add	r3, r1
 8003b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b9c:	e00a      	b.n	8003bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4908      	ldr	r1, [pc, #32]	; (8003bc4 <__NVIC_SetPriority+0x50>)
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	3b04      	subs	r3, #4
 8003bac:	0112      	lsls	r2, r2, #4
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	761a      	strb	r2, [r3, #24]
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	e000e100 	.word	0xe000e100
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b089      	sub	sp, #36	; 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f1c3 0307 	rsb	r3, r3, #7
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	bf28      	it	cs
 8003be6:	2304      	movcs	r3, #4
 8003be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3304      	adds	r3, #4
 8003bee:	2b06      	cmp	r3, #6
 8003bf0:	d902      	bls.n	8003bf8 <NVIC_EncodePriority+0x30>
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3b03      	subs	r3, #3
 8003bf6:	e000      	b.n	8003bfa <NVIC_EncodePriority+0x32>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43da      	mvns	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c10:	f04f 31ff 	mov.w	r1, #4294967295
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	43d9      	mvns	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c20:	4313      	orrs	r3, r2
         );
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3724      	adds	r7, #36	; 0x24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c40:	d301      	bcc.n	8003c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c42:	2301      	movs	r3, #1
 8003c44:	e00f      	b.n	8003c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <SysTick_Config+0x40>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c4e:	210f      	movs	r1, #15
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295
 8003c54:	f7ff ff8e 	bl	8003b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <SysTick_Config+0x40>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c5e:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <SysTick_Config+0x40>)
 8003c60:	2207      	movs	r2, #7
 8003c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	e000e010 	.word	0xe000e010

08003c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff29 	bl	8003ad4 <__NVIC_SetPriorityGrouping>
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c9c:	f7ff ff3e 	bl	8003b1c <__NVIC_GetPriorityGrouping>
 8003ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f7ff ff8e 	bl	8003bc8 <NVIC_EncodePriority>
 8003cac:	4602      	mov	r2, r0
 8003cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff5d 	bl	8003b74 <__NVIC_SetPriority>
}
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	4603      	mov	r3, r0
 8003cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff ff31 	bl	8003b38 <__NVIC_EnableIRQ>
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ffa2 	bl	8003c30 <SysTick_Config>
 8003cec:	4603      	mov	r3, r0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d04:	f7ff feb6 	bl	8003a74 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e099      	b.n	8003e48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0201 	bic.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d34:	e00f      	b.n	8003d56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d36:	f7ff fe9d 	bl	8003a74 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b05      	cmp	r3, #5
 8003d42:	d908      	bls.n	8003d56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2203      	movs	r2, #3
 8003d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e078      	b.n	8003e48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e8      	bne.n	8003d36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4b38      	ldr	r3, [pc, #224]	; (8003e50 <HAL_DMA_Init+0x158>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d107      	bne.n	8003dc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	4313      	orrs	r3, r2
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0307 	bic.w	r3, r3, #7
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d117      	bne.n	8003e1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00e      	beq.n	8003e1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f9e9 	bl	80041d4 <DMA_CheckFifoParam>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2240      	movs	r2, #64	; 0x40
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e16:	2301      	movs	r3, #1
 8003e18:	e016      	b.n	8003e48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f9a0 	bl	8004168 <DMA_CalcBaseAndBitshift>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e30:	223f      	movs	r2, #63	; 0x3f
 8003e32:	409a      	lsls	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	f010803f 	.word	0xf010803f

08003e54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e60:	4b92      	ldr	r3, [pc, #584]	; (80040ac <HAL_DMA_IRQHandler+0x258>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a92      	ldr	r2, [pc, #584]	; (80040b0 <HAL_DMA_IRQHandler+0x25c>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	0a9b      	lsrs	r3, r3, #10
 8003e6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7e:	2208      	movs	r2, #8
 8003e80:	409a      	lsls	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01a      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0204 	bic.w	r2, r2, #4
 8003ea6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eac:	2208      	movs	r2, #8
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	f043 0201 	orr.w	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d012      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00b      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	f043 0202 	orr.w	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efa:	2204      	movs	r2, #4
 8003efc:	409a      	lsls	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d012      	beq.n	8003f2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f18:	2204      	movs	r2, #4
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f043 0204 	orr.w	r2, r3, #4
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f30:	2210      	movs	r2, #16
 8003f32:	409a      	lsls	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d043      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d03c      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4e:	2210      	movs	r2, #16
 8003f50:	409a      	lsls	r2, r3
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d018      	beq.n	8003f96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d108      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d024      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
 8003f82:	e01f      	b.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01b      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
 8003f94:	e016      	b.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d107      	bne.n	8003fb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0208 	bic.w	r2, r2, #8
 8003fb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc8:	2220      	movs	r2, #32
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 808e 	beq.w	80040f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8086 	beq.w	80040f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fea:	2220      	movs	r2, #32
 8003fec:	409a      	lsls	r2, r3
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b05      	cmp	r3, #5
 8003ffc:	d136      	bne.n	800406c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0216 	bic.w	r2, r2, #22
 800400c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695a      	ldr	r2, [r3, #20]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800401c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <HAL_DMA_IRQHandler+0x1da>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0208 	bic.w	r2, r2, #8
 800403c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004042:	223f      	movs	r2, #63	; 0x3f
 8004044:	409a      	lsls	r2, r3
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405e:	2b00      	cmp	r3, #0
 8004060:	d07d      	beq.n	800415e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
        }
        return;
 800406a:	e078      	b.n	800415e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01c      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d108      	bne.n	800409a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	2b00      	cmp	r3, #0
 800408e:	d030      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4798      	blx	r3
 8004098:	e02b      	b.n	80040f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d027      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
 80040aa:	e022      	b.n	80040f2 <HAL_DMA_IRQHandler+0x29e>
 80040ac:	20000008 	.word	0x20000008
 80040b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10f      	bne.n	80040e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0210 	bic.w	r2, r2, #16
 80040d0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d032      	beq.n	8004160 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d022      	beq.n	800414c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2205      	movs	r2, #5
 800410a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	3301      	adds	r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	429a      	cmp	r2, r3
 8004128:	d307      	bcc.n	800413a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1f2      	bne.n	800411e <HAL_DMA_IRQHandler+0x2ca>
 8004138:	e000      	b.n	800413c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800413a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4798      	blx	r3
 800415c:	e000      	b.n	8004160 <HAL_DMA_IRQHandler+0x30c>
        return;
 800415e:	bf00      	nop
    }
  }
}
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop

08004168 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	3b10      	subs	r3, #16
 8004178:	4a14      	ldr	r2, [pc, #80]	; (80041cc <DMA_CalcBaseAndBitshift+0x64>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004182:	4a13      	ldr	r2, [pc, #76]	; (80041d0 <DMA_CalcBaseAndBitshift+0x68>)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b03      	cmp	r3, #3
 8004194:	d909      	bls.n	80041aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	1d1a      	adds	r2, r3, #4
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	659a      	str	r2, [r3, #88]	; 0x58
 80041a8:	e007      	b.n	80041ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041b2:	f023 0303 	bic.w	r3, r3, #3
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	aaaaaaab 	.word	0xaaaaaaab
 80041d0:	0800c358 	.word	0x0800c358

080041d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d11f      	bne.n	800422e <DMA_CheckFifoParam+0x5a>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d856      	bhi.n	80042a2 <DMA_CheckFifoParam+0xce>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <DMA_CheckFifoParam+0x28>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	0800420d 	.word	0x0800420d
 8004200:	0800421f 	.word	0x0800421f
 8004204:	0800420d 	.word	0x0800420d
 8004208:	080042a3 	.word	0x080042a3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d046      	beq.n	80042a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800421c:	e043      	b.n	80042a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004226:	d140      	bne.n	80042aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800422c:	e03d      	b.n	80042aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004236:	d121      	bne.n	800427c <DMA_CheckFifoParam+0xa8>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b03      	cmp	r3, #3
 800423c:	d837      	bhi.n	80042ae <DMA_CheckFifoParam+0xda>
 800423e:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <DMA_CheckFifoParam+0x70>)
 8004240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004244:	08004255 	.word	0x08004255
 8004248:	0800425b 	.word	0x0800425b
 800424c:	08004255 	.word	0x08004255
 8004250:	0800426d 	.word	0x0800426d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
      break;
 8004258:	e030      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d025      	beq.n	80042b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800426a:	e022      	b.n	80042b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004274:	d11f      	bne.n	80042b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800427a:	e01c      	b.n	80042b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d903      	bls.n	800428a <DMA_CheckFifoParam+0xb6>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d003      	beq.n	8004290 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004288:	e018      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
      break;
 800428e:	e015      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00e      	beq.n	80042ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
      break;
 80042a0:	e00b      	b.n	80042ba <DMA_CheckFifoParam+0xe6>
      break;
 80042a2:	bf00      	nop
 80042a4:	e00a      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
      break;
 80042a6:	bf00      	nop
 80042a8:	e008      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
      break;
 80042aa:	bf00      	nop
 80042ac:	e006      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
      break;
 80042ae:	bf00      	nop
 80042b0:	e004      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
      break;
 80042b2:	bf00      	nop
 80042b4:	e002      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
      break;   
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
      break;
 80042ba:	bf00      	nop
    }
  } 
  
  return status; 
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop

080042cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b089      	sub	sp, #36	; 0x24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042de:	2300      	movs	r3, #0
 80042e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	e159      	b.n	800459c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042e8:	2201      	movs	r2, #1
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4013      	ands	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	429a      	cmp	r2, r3
 8004302:	f040 8148 	bne.w	8004596 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	2b01      	cmp	r3, #1
 8004310:	d005      	beq.n	800431e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800431a:	2b02      	cmp	r3, #2
 800431c:	d130      	bne.n	8004380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	2203      	movs	r2, #3
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43db      	mvns	r3, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4013      	ands	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4313      	orrs	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004354:	2201      	movs	r2, #1
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 0201 	and.w	r2, r3, #1
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	2b03      	cmp	r3, #3
 800438a:	d017      	beq.n	80043bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	2203      	movs	r2, #3
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 0303 	and.w	r3, r3, #3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d123      	bne.n	8004410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	08da      	lsrs	r2, r3, #3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3208      	adds	r2, #8
 80043d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	220f      	movs	r2, #15
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	43db      	mvns	r3, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4013      	ands	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	08da      	lsrs	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3208      	adds	r2, #8
 800440a:	69b9      	ldr	r1, [r7, #24]
 800440c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	2203      	movs	r2, #3
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 0203 	and.w	r2, r3, #3
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 80a2 	beq.w	8004596 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	4b57      	ldr	r3, [pc, #348]	; (80045b4 <HAL_GPIO_Init+0x2e8>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	4a56      	ldr	r2, [pc, #344]	; (80045b4 <HAL_GPIO_Init+0x2e8>)
 800445c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004460:	6453      	str	r3, [r2, #68]	; 0x44
 8004462:	4b54      	ldr	r3, [pc, #336]	; (80045b4 <HAL_GPIO_Init+0x2e8>)
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800446e:	4a52      	ldr	r2, [pc, #328]	; (80045b8 <HAL_GPIO_Init+0x2ec>)
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	089b      	lsrs	r3, r3, #2
 8004474:	3302      	adds	r3, #2
 8004476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	220f      	movs	r2, #15
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43db      	mvns	r3, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a49      	ldr	r2, [pc, #292]	; (80045bc <HAL_GPIO_Init+0x2f0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d019      	beq.n	80044ce <HAL_GPIO_Init+0x202>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a48      	ldr	r2, [pc, #288]	; (80045c0 <HAL_GPIO_Init+0x2f4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d013      	beq.n	80044ca <HAL_GPIO_Init+0x1fe>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a47      	ldr	r2, [pc, #284]	; (80045c4 <HAL_GPIO_Init+0x2f8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00d      	beq.n	80044c6 <HAL_GPIO_Init+0x1fa>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a46      	ldr	r2, [pc, #280]	; (80045c8 <HAL_GPIO_Init+0x2fc>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d007      	beq.n	80044c2 <HAL_GPIO_Init+0x1f6>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a45      	ldr	r2, [pc, #276]	; (80045cc <HAL_GPIO_Init+0x300>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d101      	bne.n	80044be <HAL_GPIO_Init+0x1f2>
 80044ba:	2304      	movs	r3, #4
 80044bc:	e008      	b.n	80044d0 <HAL_GPIO_Init+0x204>
 80044be:	2307      	movs	r3, #7
 80044c0:	e006      	b.n	80044d0 <HAL_GPIO_Init+0x204>
 80044c2:	2303      	movs	r3, #3
 80044c4:	e004      	b.n	80044d0 <HAL_GPIO_Init+0x204>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e002      	b.n	80044d0 <HAL_GPIO_Init+0x204>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <HAL_GPIO_Init+0x204>
 80044ce:	2300      	movs	r3, #0
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	f002 0203 	and.w	r2, r2, #3
 80044d6:	0092      	lsls	r2, r2, #2
 80044d8:	4093      	lsls	r3, r2
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4313      	orrs	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044e0:	4935      	ldr	r1, [pc, #212]	; (80045b8 <HAL_GPIO_Init+0x2ec>)
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	089b      	lsrs	r3, r3, #2
 80044e6:	3302      	adds	r3, #2
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044ee:	4b38      	ldr	r3, [pc, #224]	; (80045d0 <HAL_GPIO_Init+0x304>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004512:	4a2f      	ldr	r2, [pc, #188]	; (80045d0 <HAL_GPIO_Init+0x304>)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004518:	4b2d      	ldr	r3, [pc, #180]	; (80045d0 <HAL_GPIO_Init+0x304>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	43db      	mvns	r3, r3
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4013      	ands	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800453c:	4a24      	ldr	r2, [pc, #144]	; (80045d0 <HAL_GPIO_Init+0x304>)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004542:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <HAL_GPIO_Init+0x304>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	43db      	mvns	r3, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4013      	ands	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004566:	4a1a      	ldr	r2, [pc, #104]	; (80045d0 <HAL_GPIO_Init+0x304>)
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800456c:	4b18      	ldr	r3, [pc, #96]	; (80045d0 <HAL_GPIO_Init+0x304>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	43db      	mvns	r3, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004590:	4a0f      	ldr	r2, [pc, #60]	; (80045d0 <HAL_GPIO_Init+0x304>)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	3301      	adds	r3, #1
 800459a:	61fb      	str	r3, [r7, #28]
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	2b0f      	cmp	r3, #15
 80045a0:	f67f aea2 	bls.w	80042e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	3724      	adds	r7, #36	; 0x24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800
 80045b8:	40013800 	.word	0x40013800
 80045bc:	40020000 	.word	0x40020000
 80045c0:	40020400 	.word	0x40020400
 80045c4:	40020800 	.word	0x40020800
 80045c8:	40020c00 	.word	0x40020c00
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40013c00 	.word	0x40013c00

080045d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	807b      	strh	r3, [r7, #2]
 80045e0:	4613      	mov	r3, r2
 80045e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045e4:	787b      	ldrb	r3, [r7, #1]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045ea:	887a      	ldrh	r2, [r7, #2]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045f0:	e003      	b.n	80045fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045f2:	887b      	ldrh	r3, [r7, #2]
 80045f4:	041a      	lsls	r2, r3, #16
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	619a      	str	r2, [r3, #24]
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004612:	4b08      	ldr	r3, [pc, #32]	; (8004634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	88fb      	ldrh	r3, [r7, #6]
 8004618:	4013      	ands	r3, r2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d006      	beq.n	800462c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800461e:	4a05      	ldr	r2, [pc, #20]	; (8004634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe f93e 	bl	80028a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40013c00 	.word	0x40013c00

08004638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e12b      	b.n	80048a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fe ffbe 	bl	80035e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2224      	movs	r2, #36	; 0x24
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0201 	bic.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800468a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800469a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800469c:	f002 fd5a 	bl	8007154 <HAL_RCC_GetPCLK1Freq>
 80046a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4a81      	ldr	r2, [pc, #516]	; (80048ac <HAL_I2C_Init+0x274>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d807      	bhi.n	80046bc <HAL_I2C_Init+0x84>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4a80      	ldr	r2, [pc, #512]	; (80048b0 <HAL_I2C_Init+0x278>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	bf94      	ite	ls
 80046b4:	2301      	movls	r3, #1
 80046b6:	2300      	movhi	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	e006      	b.n	80046ca <HAL_I2C_Init+0x92>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4a7d      	ldr	r2, [pc, #500]	; (80048b4 <HAL_I2C_Init+0x27c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	bf94      	ite	ls
 80046c4:	2301      	movls	r3, #1
 80046c6:	2300      	movhi	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e0e7      	b.n	80048a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a78      	ldr	r2, [pc, #480]	; (80048b8 <HAL_I2C_Init+0x280>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	0c9b      	lsrs	r3, r3, #18
 80046dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4a6a      	ldr	r2, [pc, #424]	; (80048ac <HAL_I2C_Init+0x274>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d802      	bhi.n	800470c <HAL_I2C_Init+0xd4>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	3301      	adds	r3, #1
 800470a:	e009      	b.n	8004720 <HAL_I2C_Init+0xe8>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004712:	fb02 f303 	mul.w	r3, r2, r3
 8004716:	4a69      	ldr	r2, [pc, #420]	; (80048bc <HAL_I2C_Init+0x284>)
 8004718:	fba2 2303 	umull	r2, r3, r2, r3
 800471c:	099b      	lsrs	r3, r3, #6
 800471e:	3301      	adds	r3, #1
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	430b      	orrs	r3, r1
 8004726:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004732:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	495c      	ldr	r1, [pc, #368]	; (80048ac <HAL_I2C_Init+0x274>)
 800473c:	428b      	cmp	r3, r1
 800473e:	d819      	bhi.n	8004774 <HAL_I2C_Init+0x13c>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	1e59      	subs	r1, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	fbb1 f3f3 	udiv	r3, r1, r3
 800474e:	1c59      	adds	r1, r3, #1
 8004750:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004754:	400b      	ands	r3, r1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_I2C_Init+0x138>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1e59      	subs	r1, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	fbb1 f3f3 	udiv	r3, r1, r3
 8004768:	3301      	adds	r3, #1
 800476a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476e:	e051      	b.n	8004814 <HAL_I2C_Init+0x1dc>
 8004770:	2304      	movs	r3, #4
 8004772:	e04f      	b.n	8004814 <HAL_I2C_Init+0x1dc>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d111      	bne.n	80047a0 <HAL_I2C_Init+0x168>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1e58      	subs	r0, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6859      	ldr	r1, [r3, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	440b      	add	r3, r1
 800478a:	fbb0 f3f3 	udiv	r3, r0, r3
 800478e:	3301      	adds	r3, #1
 8004790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	e012      	b.n	80047c6 <HAL_I2C_Init+0x18e>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1e58      	subs	r0, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6859      	ldr	r1, [r3, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	0099      	lsls	r1, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047b6:	3301      	adds	r3, #1
 80047b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047bc:	2b00      	cmp	r3, #0
 80047be:	bf0c      	ite	eq
 80047c0:	2301      	moveq	r3, #1
 80047c2:	2300      	movne	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_I2C_Init+0x196>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e022      	b.n	8004814 <HAL_I2C_Init+0x1dc>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10e      	bne.n	80047f4 <HAL_I2C_Init+0x1bc>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1e58      	subs	r0, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6859      	ldr	r1, [r3, #4]
 80047de:	460b      	mov	r3, r1
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	440b      	add	r3, r1
 80047e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80047e8:	3301      	adds	r3, #1
 80047ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f2:	e00f      	b.n	8004814 <HAL_I2C_Init+0x1dc>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1e58      	subs	r0, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6859      	ldr	r1, [r3, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	0099      	lsls	r1, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	fbb0 f3f3 	udiv	r3, r0, r3
 800480a:	3301      	adds	r3, #1
 800480c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	6809      	ldr	r1, [r1, #0]
 8004818:	4313      	orrs	r3, r2
 800481a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69da      	ldr	r2, [r3, #28]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6911      	ldr	r1, [r2, #16]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	68d2      	ldr	r2, [r2, #12]
 800484e:	4311      	orrs	r1, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	430b      	orrs	r3, r1
 8004856:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	000186a0 	.word	0x000186a0
 80048b0:	001e847f 	.word	0x001e847f
 80048b4:	003d08ff 	.word	0x003d08ff
 80048b8:	431bde83 	.word	0x431bde83
 80048bc:	10624dd3 	.word	0x10624dd3

080048c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	4608      	mov	r0, r1
 80048ca:	4611      	mov	r1, r2
 80048cc:	461a      	mov	r2, r3
 80048ce:	4603      	mov	r3, r0
 80048d0:	817b      	strh	r3, [r7, #10]
 80048d2:	460b      	mov	r3, r1
 80048d4:	813b      	strh	r3, [r7, #8]
 80048d6:	4613      	mov	r3, r2
 80048d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048da:	f7ff f8cb 	bl	8003a74 <HAL_GetTick>
 80048de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	f040 80d9 	bne.w	8004aa0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	2319      	movs	r3, #25
 80048f4:	2201      	movs	r2, #1
 80048f6:	496d      	ldr	r1, [pc, #436]	; (8004aac <HAL_I2C_Mem_Write+0x1ec>)
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 fc7f 	bl	80051fc <I2C_WaitOnFlagUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
 8004906:	e0cc      	b.n	8004aa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_I2C_Mem_Write+0x56>
 8004912:	2302      	movs	r3, #2
 8004914:	e0c5      	b.n	8004aa2 <HAL_I2C_Mem_Write+0x1e2>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b01      	cmp	r3, #1
 800492a:	d007      	beq.n	800493c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800494a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2221      	movs	r2, #33	; 0x21
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2240      	movs	r2, #64	; 0x40
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a3a      	ldr	r2, [r7, #32]
 8004966:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800496c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4a4d      	ldr	r2, [pc, #308]	; (8004ab0 <HAL_I2C_Mem_Write+0x1f0>)
 800497c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800497e:	88f8      	ldrh	r0, [r7, #6]
 8004980:	893a      	ldrh	r2, [r7, #8]
 8004982:	8979      	ldrh	r1, [r7, #10]
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	9301      	str	r3, [sp, #4]
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	4603      	mov	r3, r0
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fab6 	bl	8004f00 <I2C_RequestMemoryWrite>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d052      	beq.n	8004a40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e081      	b.n	8004aa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 fd00 	bl	80053a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00d      	beq.n	80049ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d107      	bne.n	80049c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e06b      	b.n	8004aa2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	781a      	ldrb	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d11b      	bne.n	8004a40 <HAL_I2C_Mem_Write+0x180>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d017      	beq.n	8004a40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	781a      	ldrb	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1aa      	bne.n	800499e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fcec 	bl	800542a <I2C_WaitOnBTFFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00d      	beq.n	8004a74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d107      	bne.n	8004a70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e016      	b.n	8004aa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e000      	b.n	8004aa2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004aa0:	2302      	movs	r3, #2
  }
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	00100002 	.word	0x00100002
 8004ab0:	ffff0000 	.word	0xffff0000

08004ab4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08c      	sub	sp, #48	; 0x30
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	4608      	mov	r0, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	817b      	strh	r3, [r7, #10]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	813b      	strh	r3, [r7, #8]
 8004aca:	4613      	mov	r3, r2
 8004acc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ace:	f7fe ffd1 	bl	8003a74 <HAL_GetTick>
 8004ad2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	f040 8208 	bne.w	8004ef2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	2319      	movs	r3, #25
 8004ae8:	2201      	movs	r2, #1
 8004aea:	497b      	ldr	r1, [pc, #492]	; (8004cd8 <HAL_I2C_Mem_Read+0x224>)
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fb85 	bl	80051fc <I2C_WaitOnFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
 8004afa:	e1fb      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_I2C_Mem_Read+0x56>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e1f4      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d007      	beq.n	8004b30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2222      	movs	r2, #34	; 0x22
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2240      	movs	r2, #64	; 0x40
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4a5b      	ldr	r2, [pc, #364]	; (8004cdc <HAL_I2C_Mem_Read+0x228>)
 8004b70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b72:	88f8      	ldrh	r0, [r7, #6]
 8004b74:	893a      	ldrh	r2, [r7, #8]
 8004b76:	8979      	ldrh	r1, [r7, #10]
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	4603      	mov	r3, r0
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fa52 	bl	800502c <I2C_RequestMemoryRead>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e1b0      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d113      	bne.n	8004bc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	623b      	str	r3, [r7, #32]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	623b      	str	r3, [r7, #32]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	623b      	str	r3, [r7, #32]
 8004bae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e184      	b.n	8004ecc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d11b      	bne.n	8004c02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	61fb      	str	r3, [r7, #28]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	e164      	b.n	8004ecc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d11b      	bne.n	8004c42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	61bb      	str	r3, [r7, #24]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	e144      	b.n	8004ecc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c58:	e138      	b.n	8004ecc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	f200 80f1 	bhi.w	8004e46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d123      	bne.n	8004cb4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fc1b 	bl	80054ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e139      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cb2:	e10b      	b.n	8004ecc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d14e      	bne.n	8004d5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	4906      	ldr	r1, [pc, #24]	; (8004ce0 <HAL_I2C_Mem_Read+0x22c>)
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fa98 	bl	80051fc <I2C_WaitOnFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e10e      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
 8004cd6:	bf00      	nop
 8004cd8:	00100002 	.word	0x00100002
 8004cdc:	ffff0000 	.word	0xffff0000
 8004ce0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d58:	e0b8      	b.n	8004ecc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d60:	2200      	movs	r2, #0
 8004d62:	4966      	ldr	r1, [pc, #408]	; (8004efc <HAL_I2C_Mem_Read+0x448>)
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fa49 	bl	80051fc <I2C_WaitOnFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0bf      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	494f      	ldr	r1, [pc, #316]	; (8004efc <HAL_I2C_Mem_Read+0x448>)
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 fa1b 	bl	80051fc <I2C_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e091      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e44:	e042      	b.n	8004ecc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fb2e 	bl	80054ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e04c      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d118      	bne.n	8004ecc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f47f aec2 	bne.w	8004c5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e000      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ef2:	2302      	movs	r3, #2
  }
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3728      	adds	r7, #40	; 0x28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	00010004 	.word	0x00010004

08004f00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	4608      	mov	r0, r1
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4603      	mov	r3, r0
 8004f10:	817b      	strh	r3, [r7, #10]
 8004f12:	460b      	mov	r3, r1
 8004f14:	813b      	strh	r3, [r7, #8]
 8004f16:	4613      	mov	r3, r2
 8004f18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f960 	bl	80051fc <I2C_WaitOnFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00d      	beq.n	8004f5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f50:	d103      	bne.n	8004f5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e05f      	b.n	800501e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f5e:	897b      	ldrh	r3, [r7, #10]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	6a3a      	ldr	r2, [r7, #32]
 8004f72:	492d      	ldr	r1, [pc, #180]	; (8005028 <I2C_RequestMemoryWrite+0x128>)
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f998 	bl	80052aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e04c      	b.n	800501e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9c:	6a39      	ldr	r1, [r7, #32]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 fa02 	bl	80053a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00d      	beq.n	8004fc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d107      	bne.n	8004fc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e02b      	b.n	800501e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d105      	bne.n	8004fd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fcc:	893b      	ldrh	r3, [r7, #8]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	611a      	str	r2, [r3, #16]
 8004fd6:	e021      	b.n	800501c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fd8:	893b      	ldrh	r3, [r7, #8]
 8004fda:	0a1b      	lsrs	r3, r3, #8
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe8:	6a39      	ldr	r1, [r7, #32]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f9dc 	bl	80053a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00d      	beq.n	8005012 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d107      	bne.n	800500e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e005      	b.n	800501e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005012:	893b      	ldrh	r3, [r7, #8]
 8005014:	b2da      	uxtb	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	00010002 	.word	0x00010002

0800502c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	4608      	mov	r0, r1
 8005036:	4611      	mov	r1, r2
 8005038:	461a      	mov	r2, r3
 800503a:	4603      	mov	r3, r0
 800503c:	817b      	strh	r3, [r7, #10]
 800503e:	460b      	mov	r3, r1
 8005040:	813b      	strh	r3, [r7, #8]
 8005042:	4613      	mov	r3, r2
 8005044:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005054:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005064:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	2200      	movs	r2, #0
 800506e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f8c2 	bl	80051fc <I2C_WaitOnFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00d      	beq.n	800509a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800508c:	d103      	bne.n	8005096 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005094:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e0aa      	b.n	80051f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800509a:	897b      	ldrh	r3, [r7, #10]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	6a3a      	ldr	r2, [r7, #32]
 80050ae:	4952      	ldr	r1, [pc, #328]	; (80051f8 <I2C_RequestMemoryRead+0x1cc>)
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 f8fa 	bl	80052aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e097      	b.n	80051f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d8:	6a39      	ldr	r1, [r7, #32]
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f964 	bl	80053a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00d      	beq.n	8005102 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d107      	bne.n	80050fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e076      	b.n	80051f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005102:	88fb      	ldrh	r3, [r7, #6]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d105      	bne.n	8005114 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005108:	893b      	ldrh	r3, [r7, #8]
 800510a:	b2da      	uxtb	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	611a      	str	r2, [r3, #16]
 8005112:	e021      	b.n	8005158 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005114:	893b      	ldrh	r3, [r7, #8]
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	b29b      	uxth	r3, r3
 800511a:	b2da      	uxtb	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005124:	6a39      	ldr	r1, [r7, #32]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 f93e 	bl	80053a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00d      	beq.n	800514e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	2b04      	cmp	r3, #4
 8005138:	d107      	bne.n	800514a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005148:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e050      	b.n	80051f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800514e:	893b      	ldrh	r3, [r7, #8]
 8005150:	b2da      	uxtb	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800515a:	6a39      	ldr	r1, [r7, #32]
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f923 	bl	80053a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00d      	beq.n	8005184 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	2b04      	cmp	r3, #4
 800516e:	d107      	bne.n	8005180 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800517e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e035      	b.n	80051f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005192:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	2200      	movs	r2, #0
 800519c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f82b 	bl	80051fc <I2C_WaitOnFlagUntilTimeout>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00d      	beq.n	80051c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ba:	d103      	bne.n	80051c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e013      	b.n	80051f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051c8:	897b      	ldrh	r3, [r7, #10]
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f043 0301 	orr.w	r3, r3, #1
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	6a3a      	ldr	r2, [r7, #32]
 80051dc:	4906      	ldr	r1, [pc, #24]	; (80051f8 <I2C_RequestMemoryRead+0x1cc>)
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f863 	bl	80052aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	00010002 	.word	0x00010002

080051fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	4613      	mov	r3, r2
 800520a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800520c:	e025      	b.n	800525a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d021      	beq.n	800525a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005216:	f7fe fc2d 	bl	8003a74 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d302      	bcc.n	800522c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d116      	bne.n	800525a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f043 0220 	orr.w	r2, r3, #32
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e023      	b.n	80052a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	0c1b      	lsrs	r3, r3, #16
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	d10d      	bne.n	8005280 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	43da      	mvns	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4013      	ands	r3, r2
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	bf0c      	ite	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	2300      	movne	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	e00c      	b.n	800529a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	43da      	mvns	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4013      	ands	r3, r2
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	bf0c      	ite	eq
 8005292:	2301      	moveq	r3, #1
 8005294:	2300      	movne	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	429a      	cmp	r2, r3
 800529e:	d0b6      	beq.n	800520e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	607a      	str	r2, [r7, #4]
 80052b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052b8:	e051      	b.n	800535e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c8:	d123      	bne.n	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f043 0204 	orr.w	r2, r3, #4
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e046      	b.n	80053a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005318:	d021      	beq.n	800535e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800531a:	f7fe fbab 	bl	8003a74 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	429a      	cmp	r2, r3
 8005328:	d302      	bcc.n	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d116      	bne.n	800535e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f043 0220 	orr.w	r2, r3, #32
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e020      	b.n	80053a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	0c1b      	lsrs	r3, r3, #16
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d10c      	bne.n	8005382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	43da      	mvns	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4013      	ands	r3, r2
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	bf14      	ite	ne
 800537a:	2301      	movne	r3, #1
 800537c:	2300      	moveq	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	e00b      	b.n	800539a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	43da      	mvns	r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4013      	ands	r3, r2
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf14      	ite	ne
 8005394:	2301      	movne	r3, #1
 8005396:	2300      	moveq	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d18d      	bne.n	80052ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053b4:	e02d      	b.n	8005412 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f8ce 	bl	8005558 <I2C_IsAcknowledgeFailed>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e02d      	b.n	8005422 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d021      	beq.n	8005412 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ce:	f7fe fb51 	bl	8003a74 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d302      	bcc.n	80053e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d116      	bne.n	8005412 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	f043 0220 	orr.w	r2, r3, #32
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e007      	b.n	8005422 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541c:	2b80      	cmp	r3, #128	; 0x80
 800541e:	d1ca      	bne.n	80053b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005436:	e02d      	b.n	8005494 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f88d 	bl	8005558 <I2C_IsAcknowledgeFailed>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e02d      	b.n	80054a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	d021      	beq.n	8005494 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005450:	f7fe fb10 	bl	8003a74 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	429a      	cmp	r2, r3
 800545e:	d302      	bcc.n	8005466 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d116      	bne.n	8005494 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	f043 0220 	orr.w	r2, r3, #32
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e007      	b.n	80054a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d1ca      	bne.n	8005438 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054b8:	e042      	b.n	8005540 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	f003 0310 	and.w	r3, r3, #16
 80054c4:	2b10      	cmp	r3, #16
 80054c6:	d119      	bne.n	80054fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0210 	mvn.w	r2, #16
 80054d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e029      	b.n	8005550 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fc:	f7fe faba 	bl	8003a74 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	429a      	cmp	r2, r3
 800550a:	d302      	bcc.n	8005512 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d116      	bne.n	8005540 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	f043 0220 	orr.w	r2, r3, #32
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e007      	b.n	8005550 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554a:	2b40      	cmp	r3, #64	; 0x40
 800554c:	d1b5      	bne.n	80054ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800556a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800556e:	d11b      	bne.n	80055a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005578:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	f043 0204 	orr.w	r2, r3, #4
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055b8:	b08f      	sub	sp, #60	; 0x3c
 80055ba:	af0a      	add	r7, sp, #40	; 0x28
 80055bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e10f      	b.n	80057e8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f005 fd82 	bl	800b0ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2203      	movs	r2, #3
 80055ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d102      	bne.n	8005602 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4618      	mov	r0, r3
 8005608:	f002 fc75 	bl	8007ef6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	603b      	str	r3, [r7, #0]
 8005612:	687e      	ldr	r6, [r7, #4]
 8005614:	466d      	mov	r5, sp
 8005616:	f106 0410 	add.w	r4, r6, #16
 800561a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800561c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800561e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005626:	e885 0003 	stmia.w	r5, {r0, r1}
 800562a:	1d33      	adds	r3, r6, #4
 800562c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800562e:	6838      	ldr	r0, [r7, #0]
 8005630:	f002 fb4c 	bl	8007ccc <USB_CoreInit>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2202      	movs	r2, #2
 800563e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e0d0      	b.n	80057e8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2100      	movs	r1, #0
 800564c:	4618      	mov	r0, r3
 800564e:	f002 fc63 	bl	8007f18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005652:	2300      	movs	r3, #0
 8005654:	73fb      	strb	r3, [r7, #15]
 8005656:	e04a      	b.n	80056ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005658:	7bfa      	ldrb	r2, [r7, #15]
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	333d      	adds	r3, #61	; 0x3d
 8005668:	2201      	movs	r2, #1
 800566a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800566c:	7bfa      	ldrb	r2, [r7, #15]
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	4613      	mov	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	333c      	adds	r3, #60	; 0x3c
 800567c:	7bfa      	ldrb	r2, [r7, #15]
 800567e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005680:	7bfa      	ldrb	r2, [r7, #15]
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	b298      	uxth	r0, r3
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	4613      	mov	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	3342      	adds	r3, #66	; 0x42
 8005694:	4602      	mov	r2, r0
 8005696:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005698:	7bfa      	ldrb	r2, [r7, #15]
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	4613      	mov	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	333f      	adds	r3, #63	; 0x3f
 80056a8:	2200      	movs	r2, #0
 80056aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056ac:	7bfa      	ldrb	r2, [r7, #15]
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	4613      	mov	r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	1a9b      	subs	r3, r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	3344      	adds	r3, #68	; 0x44
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056c0:	7bfa      	ldrb	r2, [r7, #15]
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	4613      	mov	r3, r2
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	3348      	adds	r3, #72	; 0x48
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056d4:	7bfa      	ldrb	r2, [r7, #15]
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	4613      	mov	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	1a9b      	subs	r3, r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	3350      	adds	r3, #80	; 0x50
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	3301      	adds	r3, #1
 80056ec:	73fb      	strb	r3, [r7, #15]
 80056ee:	7bfa      	ldrb	r2, [r7, #15]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d3af      	bcc.n	8005658 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056f8:	2300      	movs	r3, #0
 80056fa:	73fb      	strb	r3, [r7, #15]
 80056fc:	e044      	b.n	8005788 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056fe:	7bfa      	ldrb	r2, [r7, #15]
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005714:	7bfa      	ldrb	r2, [r7, #15]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005726:	7bfa      	ldrb	r2, [r7, #15]
 8005728:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800572a:	7bfa      	ldrb	r2, [r7, #15]
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	1a9b      	subs	r3, r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005740:	7bfa      	ldrb	r2, [r7, #15]
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	4613      	mov	r3, r2
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	1a9b      	subs	r3, r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005756:	7bfa      	ldrb	r2, [r7, #15]
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800576c:	7bfa      	ldrb	r2, [r7, #15]
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	4613      	mov	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	1a9b      	subs	r3, r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	3301      	adds	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
 8005788:	7bfa      	ldrb	r2, [r7, #15]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	429a      	cmp	r2, r3
 8005790:	d3b5      	bcc.n	80056fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	687e      	ldr	r6, [r7, #4]
 800579a:	466d      	mov	r5, sp
 800579c:	f106 0410 	add.w	r4, r6, #16
 80057a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80057b0:	1d33      	adds	r3, r6, #4
 80057b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057b4:	6838      	ldr	r0, [r7, #0]
 80057b6:	f002 fbfb 	bl	8007fb0 <USB_DevInit>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e00d      	b.n	80057e8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f003 fc77 	bl	80090d4 <USB_DevDisconnect>

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_PCD_Start+0x1c>
 8005808:	2302      	movs	r3, #2
 800580a:	e020      	b.n	800584e <HAL_PCD_Start+0x5e>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	2b01      	cmp	r3, #1
 800581a:	d109      	bne.n	8005830 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005820:	2b01      	cmp	r3, #1
 8005822:	d005      	beq.n	8005830 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f002 fb4d 	bl	8007ed4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f003 fc27 	bl	8009092 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005856:	b590      	push	{r4, r7, lr}
 8005858:	b08d      	sub	sp, #52	; 0x34
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4618      	mov	r0, r3
 800586e:	f003 fce5 	bl	800923c <USB_GetMode>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	f040 839d 	bne.w	8005fb4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f003 fc49 	bl	8009116 <USB_ReadInterrupts>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 8393 	beq.w	8005fb2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4618      	mov	r0, r3
 8005892:	f003 fc40 	bl	8009116 <USB_ReadInterrupts>
 8005896:	4603      	mov	r3, r0
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b02      	cmp	r3, #2
 800589e:	d107      	bne.n	80058b0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695a      	ldr	r2, [r3, #20]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f002 0202 	and.w	r2, r2, #2
 80058ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f003 fc2e 	bl	8009116 <USB_ReadInterrupts>
 80058ba:	4603      	mov	r3, r0
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d161      	bne.n	8005988 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0210 	bic.w	r2, r2, #16
 80058d2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	f003 020f 	and.w	r2, r3, #15
 80058e0:	4613      	mov	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	4413      	add	r3, r2
 80058f0:	3304      	adds	r3, #4
 80058f2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	0c5b      	lsrs	r3, r3, #17
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d124      	bne.n	800594a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005906:	4013      	ands	r3, r2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d035      	beq.n	8005978 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	091b      	lsrs	r3, r3, #4
 8005914:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005916:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800591a:	b29b      	uxth	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	6a38      	ldr	r0, [r7, #32]
 8005920:	f003 fa65 	bl	8008dee <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	091b      	lsrs	r3, r3, #4
 800592c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005930:	441a      	add	r2, r3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	699a      	ldr	r2, [r3, #24]
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	091b      	lsrs	r3, r3, #4
 800593e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005942:	441a      	add	r2, r3
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	619a      	str	r2, [r3, #24]
 8005948:	e016      	b.n	8005978 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	0c5b      	lsrs	r3, r3, #17
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	2b06      	cmp	r3, #6
 8005954:	d110      	bne.n	8005978 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800595c:	2208      	movs	r2, #8
 800595e:	4619      	mov	r1, r3
 8005960:	6a38      	ldr	r0, [r7, #32]
 8005962:	f003 fa44 	bl	8008dee <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	091b      	lsrs	r3, r3, #4
 800596e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005972:	441a      	add	r2, r3
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0210 	orr.w	r2, r2, #16
 8005986:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f003 fbc2 	bl	8009116 <USB_ReadInterrupts>
 8005992:	4603      	mov	r3, r0
 8005994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005998:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800599c:	d16e      	bne.n	8005a7c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f003 fbc8 	bl	800913c <USB_ReadDevAllOutEpInterrupt>
 80059ac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80059ae:	e062      	b.n	8005a76 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d057      	beq.n	8005a6a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	4611      	mov	r1, r2
 80059c4:	4618      	mov	r0, r3
 80059c6:	f003 fbed 	bl	80091a4 <USB_ReadDevOutEPInterrupt>
 80059ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00c      	beq.n	80059f0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e2:	461a      	mov	r2, r3
 80059e4:	2301      	movs	r3, #1
 80059e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80059e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fdb0 	bl	8006550 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00c      	beq.n	8005a14 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a06:	461a      	mov	r2, r3
 8005a08:	2308      	movs	r3, #8
 8005a0a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 feaa 	bl	8006768 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f003 0310 	and.w	r3, r3, #16
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d008      	beq.n	8005a30 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	2310      	movs	r3, #16
 8005a2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d008      	beq.n	8005a4c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	461a      	mov	r2, r3
 8005a48:	2320      	movs	r3, #32
 8005a4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d009      	beq.n	8005a6a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	461a      	mov	r2, r3
 8005a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a68:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a72:	085b      	lsrs	r3, r3, #1
 8005a74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d199      	bne.n	80059b0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f003 fb48 	bl	8009116 <USB_ReadInterrupts>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a90:	f040 80c0 	bne.w	8005c14 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f003 fb69 	bl	8009170 <USB_ReadDevAllInEpInterrupt>
 8005a9e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005aa4:	e0b2      	b.n	8005c0c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 80a7 	beq.w	8005c00 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	4611      	mov	r1, r2
 8005abc:	4618      	mov	r0, r3
 8005abe:	f003 fb8f 	bl	80091e0 <USB_ReadDevInEPInterrupt>
 8005ac2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d057      	beq.n	8005b7e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	69f9      	ldr	r1, [r7, #28]
 8005aea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aee:	4013      	ands	r3, r2
 8005af0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afe:	461a      	mov	r2, r3
 8005b00:	2301      	movs	r3, #1
 8005b02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d132      	bne.n	8005b72 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b10:	4613      	mov	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	1a9b      	subs	r3, r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	440b      	add	r3, r1
 8005b1a:	3348      	adds	r3, #72	; 0x48
 8005b1c:	6819      	ldr	r1, [r3, #0]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b22:	4613      	mov	r3, r2
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4403      	add	r3, r0
 8005b2c:	3344      	adds	r3, #68	; 0x44
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4419      	add	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b36:	4613      	mov	r3, r2
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4403      	add	r3, r0
 8005b40:	3348      	adds	r3, #72	; 0x48
 8005b42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d113      	bne.n	8005b72 <HAL_PCD_IRQHandler+0x31c>
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4e:	4613      	mov	r3, r2
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	1a9b      	subs	r3, r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	440b      	add	r3, r1
 8005b58:	3350      	adds	r3, #80	; 0x50
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d108      	bne.n	8005b72 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	f003 fb97 	bl	80092a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f005 fb46 	bl	800b20a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d008      	beq.n	8005b9a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	461a      	mov	r2, r3
 8005b96:	2308      	movs	r3, #8
 8005b98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d008      	beq.n	8005bb6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	2310      	movs	r3, #16
 8005bb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	461a      	mov	r2, r3
 8005bce:	2340      	movs	r3, #64	; 0x40
 8005bd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d008      	beq.n	8005bee <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be8:	461a      	mov	r2, r3
 8005bea:	2302      	movs	r3, #2
 8005bec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fc1b 	bl	8006436 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	3301      	adds	r3, #1
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c08:	085b      	lsrs	r3, r3, #1
 8005c0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f47f af49 	bne.w	8005aa6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f003 fa7c 	bl	8009116 <USB_ReadInterrupts>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c28:	d122      	bne.n	8005c70 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c38:	f023 0301 	bic.w	r3, r3, #1
 8005c3c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d108      	bne.n	8005c5a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c50:	2100      	movs	r1, #0
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fe26 	bl	80068a4 <HAL_PCDEx_LPM_Callback>
 8005c58:	e002      	b.n	8005c60 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f005 fb42 	bl	800b2e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695a      	ldr	r2, [r3, #20]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005c6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f003 fa4e 	bl	8009116 <USB_ReadInterrupts>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c84:	d112      	bne.n	8005cac <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d102      	bne.n	8005c9c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f005 fafe 	bl	800b298 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695a      	ldr	r2, [r3, #20]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005caa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f003 fa30 	bl	8009116 <USB_ReadInterrupts>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc0:	f040 80c7 	bne.w	8005e52 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cd2:	f023 0301 	bic.w	r3, r3, #1
 8005cd6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2110      	movs	r1, #16
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f002 faca 	bl	8008278 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce8:	e056      	b.n	8005d98 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cfc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d1c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d50:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d62:	0151      	lsls	r1, r2, #5
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	440a      	add	r2, r1
 8005d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d90:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	3301      	adds	r3, #1
 8005d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d3a3      	bcc.n	8005cea <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005db4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d016      	beq.n	8005dec <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dce:	f043 030b 	orr.w	r3, r3, #11
 8005dd2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dde:	69fa      	ldr	r2, [r7, #28]
 8005de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005de4:	f043 030b 	orr.w	r3, r3, #11
 8005de8:	6453      	str	r3, [r2, #68]	; 0x44
 8005dea:	e015      	b.n	8005e18 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dfa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005dfe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005e02:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e12:	f043 030b 	orr.w	r3, r3, #11
 8005e16:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e2a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f003 fa2f 	bl	80092a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	695a      	ldr	r2, [r3, #20]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f003 f95d 	bl	8009116 <USB_ReadInterrupts>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e66:	d124      	bne.n	8005eb2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f003 f9f3 	bl	8009258 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f002 fa5b 	bl	8008332 <USB_GetDevSpeed>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	461a      	mov	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681c      	ldr	r4, [r3, #0]
 8005e88:	f001 f958 	bl	800713c <HAL_RCC_GetHCLKFreq>
 8005e8c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	4620      	mov	r0, r4
 8005e98:	f001 ff7a 	bl	8007d90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f005 f9dc 	bl	800b25a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695a      	ldr	r2, [r3, #20]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005eb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f003 f92d 	bl	8009116 <USB_ReadInterrupts>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d10a      	bne.n	8005edc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f005 f9b9 	bl	800b23e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	695a      	ldr	r2, [r3, #20]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f002 0208 	and.w	r2, r2, #8
 8005eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f003 f918 	bl	8009116 <USB_ReadInterrupts>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef0:	d10f      	bne.n	8005f12 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f005 fa11 	bl	800b324 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695a      	ldr	r2, [r3, #20]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005f10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f003 f8fd 	bl	8009116 <USB_ReadInterrupts>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f26:	d10f      	bne.n	8005f48 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f005 f9e4 	bl	800b300 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695a      	ldr	r2, [r3, #20]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005f46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f003 f8e2 	bl	8009116 <USB_ReadInterrupts>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5c:	d10a      	bne.n	8005f74 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f005 f9f2 	bl	800b348 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695a      	ldr	r2, [r3, #20]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005f72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f003 f8cc 	bl	8009116 <USB_ReadInterrupts>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d115      	bne.n	8005fb4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f005 f9e2 	bl	800b364 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6859      	ldr	r1, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	605a      	str	r2, [r3, #4]
 8005fb0:	e000      	b.n	8005fb4 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005fb2:	bf00      	nop
    }
  }
}
 8005fb4:	3734      	adds	r7, #52	; 0x34
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd90      	pop	{r4, r7, pc}

08005fba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_PCD_SetAddress+0x1a>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e013      	b.n	8005ffc <HAL_PCD_SetAddress+0x42>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	78fa      	ldrb	r2, [r7, #3]
 8005fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	78fa      	ldrb	r2, [r7, #3]
 8005fea:	4611      	mov	r1, r2
 8005fec:	4618      	mov	r0, r3
 8005fee:	f003 f82a 	bl	8009046 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	4608      	mov	r0, r1
 800600e:	4611      	mov	r1, r2
 8006010:	461a      	mov	r2, r3
 8006012:	4603      	mov	r3, r0
 8006014:	70fb      	strb	r3, [r7, #3]
 8006016:	460b      	mov	r3, r1
 8006018:	803b      	strh	r3, [r7, #0]
 800601a:	4613      	mov	r3, r2
 800601c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006026:	2b00      	cmp	r3, #0
 8006028:	da0f      	bge.n	800604a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800602a:	78fb      	ldrb	r3, [r7, #3]
 800602c:	f003 020f 	and.w	r2, r3, #15
 8006030:	4613      	mov	r3, r2
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	1a9b      	subs	r3, r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	3338      	adds	r3, #56	; 0x38
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	4413      	add	r3, r2
 800603e:	3304      	adds	r3, #4
 8006040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	705a      	strb	r2, [r3, #1]
 8006048:	e00f      	b.n	800606a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	f003 020f 	and.w	r2, r3, #15
 8006050:	4613      	mov	r3, r2
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	4413      	add	r3, r2
 8006060:	3304      	adds	r3, #4
 8006062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800606a:	78fb      	ldrb	r3, [r7, #3]
 800606c:	f003 030f 	and.w	r3, r3, #15
 8006070:	b2da      	uxtb	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006076:	883a      	ldrh	r2, [r7, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	78ba      	ldrb	r2, [r7, #2]
 8006080:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	785b      	ldrb	r3, [r3, #1]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d004      	beq.n	8006094 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	b29a      	uxth	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006094:	78bb      	ldrb	r3, [r7, #2]
 8006096:	2b02      	cmp	r3, #2
 8006098:	d102      	bne.n	80060a0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <HAL_PCD_EP_Open+0xaa>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e00e      	b.n	80060cc <HAL_PCD_EP_Open+0xc8>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68f9      	ldr	r1, [r7, #12]
 80060bc:	4618      	mov	r0, r3
 80060be:	f002 f95d 	bl	800837c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80060ca:	7afb      	ldrb	r3, [r7, #11]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	da0f      	bge.n	8006108 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060e8:	78fb      	ldrb	r3, [r7, #3]
 80060ea:	f003 020f 	and.w	r2, r3, #15
 80060ee:	4613      	mov	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	1a9b      	subs	r3, r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	3338      	adds	r3, #56	; 0x38
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4413      	add	r3, r2
 80060fc:	3304      	adds	r3, #4
 80060fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	705a      	strb	r2, [r3, #1]
 8006106:	e00f      	b.n	8006128 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	f003 020f 	and.w	r2, r3, #15
 800610e:	4613      	mov	r3, r2
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	1a9b      	subs	r3, r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	4413      	add	r3, r2
 800611e:	3304      	adds	r3, #4
 8006120:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	b2da      	uxtb	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800613a:	2b01      	cmp	r3, #1
 800613c:	d101      	bne.n	8006142 <HAL_PCD_EP_Close+0x6e>
 800613e:	2302      	movs	r3, #2
 8006140:	e00e      	b.n	8006160 <HAL_PCD_EP_Close+0x8c>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68f9      	ldr	r1, [r7, #12]
 8006150:	4618      	mov	r0, r3
 8006152:	f002 f99b 	bl	800848c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	607a      	str	r2, [r7, #4]
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	460b      	mov	r3, r1
 8006176:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	f003 020f 	and.w	r2, r3, #15
 800617e:	4613      	mov	r3, r2
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	1a9b      	subs	r3, r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	3304      	adds	r3, #4
 8006190:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2200      	movs	r2, #0
 80061a2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2200      	movs	r2, #0
 80061a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061aa:	7afb      	ldrb	r3, [r7, #11]
 80061ac:	f003 030f 	and.w	r3, r3, #15
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d102      	bne.n	80061c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061c4:	7afb      	ldrb	r3, [r7, #11]
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d109      	bne.n	80061e2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	6979      	ldr	r1, [r7, #20]
 80061dc:	f002 fc76 	bl	8008acc <USB_EP0StartXfer>
 80061e0:	e008      	b.n	80061f4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	6979      	ldr	r1, [r7, #20]
 80061f0:	f002 fa28 	bl	8008644 <USB_EPStartXfer>
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	f003 020f 	and.w	r2, r3, #15
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	4613      	mov	r3, r2
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	1a9b      	subs	r3, r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006220:	681b      	ldr	r3, [r3, #0]
}
 8006222:	4618      	mov	r0, r3
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b086      	sub	sp, #24
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
 800623a:	460b      	mov	r3, r1
 800623c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800623e:	7afb      	ldrb	r3, [r7, #11]
 8006240:	f003 020f 	and.w	r2, r3, #15
 8006244:	4613      	mov	r3, r2
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	1a9b      	subs	r3, r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	3338      	adds	r3, #56	; 0x38
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4413      	add	r3, r2
 8006252:	3304      	adds	r3, #4
 8006254:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2200      	movs	r2, #0
 8006266:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2201      	movs	r2, #1
 800626c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800626e:	7afb      	ldrb	r3, [r7, #11]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	b2da      	uxtb	r2, r3
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d102      	bne.n	8006288 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006288:	7afb      	ldrb	r3, [r7, #11]
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	2b00      	cmp	r3, #0
 8006290:	d109      	bne.n	80062a6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	b2db      	uxtb	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	6979      	ldr	r1, [r7, #20]
 80062a0:	f002 fc14 	bl	8008acc <USB_EP0StartXfer>
 80062a4:	e008      	b.n	80062b8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	461a      	mov	r2, r3
 80062b2:	6979      	ldr	r1, [r7, #20]
 80062b4:	f002 f9c6 	bl	8008644 <USB_EPStartXfer>
  }

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	f003 020f 	and.w	r2, r3, #15
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d901      	bls.n	80062e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e050      	b.n	8006382 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	da0f      	bge.n	8006308 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	f003 020f 	and.w	r2, r3, #15
 80062ee:	4613      	mov	r3, r2
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	1a9b      	subs	r3, r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	3338      	adds	r3, #56	; 0x38
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	4413      	add	r3, r2
 80062fc:	3304      	adds	r3, #4
 80062fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	705a      	strb	r2, [r3, #1]
 8006306:	e00d      	b.n	8006324 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006308:	78fa      	ldrb	r2, [r7, #3]
 800630a:	4613      	mov	r3, r2
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	4413      	add	r3, r2
 800631a:	3304      	adds	r3, #4
 800631c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	b2da      	uxtb	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_PCD_EP_SetStall+0x82>
 8006340:	2302      	movs	r3, #2
 8006342:	e01e      	b.n	8006382 <HAL_PCD_EP_SetStall+0xc0>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68f9      	ldr	r1, [r7, #12]
 8006352:	4618      	mov	r0, r3
 8006354:	f002 fda3 	bl	8008e9e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10a      	bne.n	8006378 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	b2d9      	uxtb	r1, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006372:	461a      	mov	r2, r3
 8006374:	f002 ff94 	bl	80092a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	f003 020f 	and.w	r2, r3, #15
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d901      	bls.n	80063a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e042      	b.n	800642e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80063a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	da0f      	bge.n	80063d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	f003 020f 	and.w	r2, r3, #15
 80063b6:	4613      	mov	r3, r2
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	1a9b      	subs	r3, r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	3338      	adds	r3, #56	; 0x38
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	4413      	add	r3, r2
 80063c4:	3304      	adds	r3, #4
 80063c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	705a      	strb	r2, [r3, #1]
 80063ce:	e00f      	b.n	80063f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	f003 020f 	and.w	r2, r3, #15
 80063d6:	4613      	mov	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	1a9b      	subs	r3, r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	4413      	add	r3, r2
 80063e6:	3304      	adds	r3, #4
 80063e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	f003 030f 	and.w	r3, r3, #15
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_PCD_EP_ClrStall+0x86>
 800640c:	2302      	movs	r3, #2
 800640e:	e00e      	b.n	800642e <HAL_PCD_EP_ClrStall+0xa4>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68f9      	ldr	r1, [r7, #12]
 800641e:	4618      	mov	r0, r3
 8006420:	f002 fdab 	bl	8008f7a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b08a      	sub	sp, #40	; 0x28
 800643a:	af02      	add	r7, sp, #8
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	1a9b      	subs	r3, r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	3338      	adds	r3, #56	; 0x38
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	4413      	add	r3, r2
 800645a:	3304      	adds	r3, #4
 800645c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	429a      	cmp	r2, r3
 8006468:	d901      	bls.n	800646e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e06c      	b.n	8006548 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	695a      	ldr	r2, [r3, #20]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	429a      	cmp	r2, r3
 8006482:	d902      	bls.n	800648a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	3303      	adds	r3, #3
 800648e:	089b      	lsrs	r3, r3, #2
 8006490:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006492:	e02b      	b.n	80064ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	695a      	ldr	r2, [r3, #20]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	69fa      	ldr	r2, [r7, #28]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d902      	bls.n	80064b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	3303      	adds	r3, #3
 80064b4:	089b      	lsrs	r3, r3, #2
 80064b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	68d9      	ldr	r1, [r3, #12]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	4603      	mov	r3, r0
 80064ce:	6978      	ldr	r0, [r7, #20]
 80064d0:	f002 fc4f 	bl	8008d72 <USB_WritePacket>

    ep->xfer_buff  += len;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	441a      	add	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	699a      	ldr	r2, [r3, #24]
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	441a      	add	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d809      	bhi.n	8006516 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	699a      	ldr	r2, [r3, #24]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800650a:	429a      	cmp	r2, r3
 800650c:	d203      	bcs.n	8006516 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1be      	bne.n	8006494 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	695a      	ldr	r2, [r3, #20]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	429a      	cmp	r2, r3
 8006520:	d811      	bhi.n	8006546 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	f003 030f 	and.w	r3, r3, #15
 8006528:	2201      	movs	r2, #1
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	43db      	mvns	r3, r3
 800653c:	6939      	ldr	r1, [r7, #16]
 800653e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006542:	4013      	ands	r3, r2
 8006544:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3720      	adds	r7, #32
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	333c      	adds	r3, #60	; 0x3c
 8006568:	3304      	adds	r3, #4
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b01      	cmp	r3, #1
 8006584:	f040 80a0 	bne.w	80066c8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d015      	beq.n	80065be <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4a72      	ldr	r2, [pc, #456]	; (8006760 <PCD_EP_OutXfrComplete_int+0x210>)
 8006596:	4293      	cmp	r3, r2
 8006598:	f240 80dd 	bls.w	8006756 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 80d7 	beq.w	8006756 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b4:	461a      	mov	r2, r3
 80065b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ba:	6093      	str	r3, [r2, #8]
 80065bc:	e0cb      	b.n	8006756 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f003 0320 	and.w	r3, r3, #32
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d009      	beq.n	80065dc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d4:	461a      	mov	r2, r3
 80065d6:	2320      	movs	r3, #32
 80065d8:	6093      	str	r3, [r2, #8]
 80065da:	e0bc      	b.n	8006756 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f040 80b7 	bne.w	8006756 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4a5d      	ldr	r2, [pc, #372]	; (8006760 <PCD_EP_OutXfrComplete_int+0x210>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d90f      	bls.n	8006610 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006606:	461a      	mov	r2, r3
 8006608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800660c:	6093      	str	r3, [r2, #8]
 800660e:	e0a2      	b.n	8006756 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	4613      	mov	r3, r2
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	1a9b      	subs	r3, r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	440b      	add	r3, r1
 800661e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006622:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	0159      	lsls	r1, r3, #5
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	440b      	add	r3, r1
 800662c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006636:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	4613      	mov	r3, r2
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4403      	add	r3, r0
 8006646:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800664a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	4613      	mov	r3, r2
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	1a9b      	subs	r3, r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	440b      	add	r3, r1
 800665a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800665e:	6819      	ldr	r1, [r3, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	4613      	mov	r3, r2
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	1a9b      	subs	r3, r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4403      	add	r3, r0
 800666e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4419      	add	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	4613      	mov	r3, r2
 800667c:	00db      	lsls	r3, r3, #3
 800667e:	1a9b      	subs	r3, r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4403      	add	r3, r0
 8006684:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006688:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d114      	bne.n	80066ba <PCD_EP_OutXfrComplete_int+0x16a>
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	4613      	mov	r3, r2
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	1a9b      	subs	r3, r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d108      	bne.n	80066ba <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6818      	ldr	r0, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066b2:	461a      	mov	r2, r3
 80066b4:	2101      	movs	r1, #1
 80066b6:	f002 fdf3 	bl	80092a0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f004 fd87 	bl	800b1d4 <HAL_PCD_DataOutStageCallback>
 80066c6:	e046      	b.n	8006756 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4a26      	ldr	r2, [pc, #152]	; (8006764 <PCD_EP_OutXfrComplete_int+0x214>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d124      	bne.n	800671a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e6:	461a      	mov	r2, r3
 80066e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ec:	6093      	str	r3, [r2, #8]
 80066ee:	e032      	b.n	8006756 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 0320 	and.w	r3, r3, #32
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d008      	beq.n	800670c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006706:	461a      	mov	r2, r3
 8006708:	2320      	movs	r3, #32
 800670a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	b2db      	uxtb	r3, r3
 8006710:	4619      	mov	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f004 fd5e 	bl	800b1d4 <HAL_PCD_DataOutStageCallback>
 8006718:	e01d      	b.n	8006756 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d114      	bne.n	800674a <PCD_EP_OutXfrComplete_int+0x1fa>
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	4613      	mov	r3, r2
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d108      	bne.n	800674a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6818      	ldr	r0, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006742:	461a      	mov	r2, r3
 8006744:	2100      	movs	r1, #0
 8006746:	f002 fdab 	bl	80092a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f004 fd3f 	bl	800b1d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	4f54300a 	.word	0x4f54300a
 8006764:	4f54310a 	.word	0x4f54310a

08006768 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	333c      	adds	r3, #60	; 0x3c
 8006780:	3304      	adds	r3, #4
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d90e      	bls.n	80067bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d009      	beq.n	80067bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b4:	461a      	mov	r2, r3
 80067b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f004 fcf7 	bl	800b1b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4a0a      	ldr	r2, [pc, #40]	; (80067f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d90c      	bls.n	80067e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d108      	bne.n	80067e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6818      	ldr	r0, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067dc:	461a      	mov	r2, r3
 80067de:	2101      	movs	r1, #1
 80067e0:	f002 fd5e 	bl	80092a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	4f54300a 	.word	0x4f54300a

080067f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
 8006800:	4613      	mov	r3, r2
 8006802:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800680c:	78fb      	ldrb	r3, [r7, #3]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d107      	bne.n	8006822 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006812:	883b      	ldrh	r3, [r7, #0]
 8006814:	0419      	lsls	r1, r3, #16
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	430a      	orrs	r2, r1
 800681e:	629a      	str	r2, [r3, #40]	; 0x28
 8006820:	e028      	b.n	8006874 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006828:	0c1b      	lsrs	r3, r3, #16
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	4413      	add	r3, r2
 800682e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006830:	2300      	movs	r3, #0
 8006832:	73fb      	strb	r3, [r7, #15]
 8006834:	e00d      	b.n	8006852 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	7bfb      	ldrb	r3, [r7, #15]
 800683c:	3340      	adds	r3, #64	; 0x40
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	0c1b      	lsrs	r3, r3, #16
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	4413      	add	r3, r2
 800684a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	3301      	adds	r3, #1
 8006850:	73fb      	strb	r3, [r7, #15]
 8006852:	7bfa      	ldrb	r2, [r7, #15]
 8006854:	78fb      	ldrb	r3, [r7, #3]
 8006856:	3b01      	subs	r3, #1
 8006858:	429a      	cmp	r2, r3
 800685a:	d3ec      	bcc.n	8006836 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800685c:	883b      	ldrh	r3, [r7, #0]
 800685e:	0418      	lsls	r0, r3, #16
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6819      	ldr	r1, [r3, #0]
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	3b01      	subs	r3, #1
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	4302      	orrs	r2, r0
 800686c:	3340      	adds	r3, #64	; 0x40
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	887a      	ldrh	r2, [r7, #2]
 8006894:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e264      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d075      	beq.n	80069c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068da:	4ba3      	ldr	r3, [pc, #652]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 030c 	and.w	r3, r3, #12
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d00c      	beq.n	8006900 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068e6:	4ba0      	ldr	r3, [pc, #640]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d112      	bne.n	8006918 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068f2:	4b9d      	ldr	r3, [pc, #628]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068fe:	d10b      	bne.n	8006918 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006900:	4b99      	ldr	r3, [pc, #612]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d05b      	beq.n	80069c4 <HAL_RCC_OscConfig+0x108>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d157      	bne.n	80069c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e23f      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006920:	d106      	bne.n	8006930 <HAL_RCC_OscConfig+0x74>
 8006922:	4b91      	ldr	r3, [pc, #580]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a90      	ldr	r2, [pc, #576]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800692c:	6013      	str	r3, [r2, #0]
 800692e:	e01d      	b.n	800696c <HAL_RCC_OscConfig+0xb0>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006938:	d10c      	bne.n	8006954 <HAL_RCC_OscConfig+0x98>
 800693a:	4b8b      	ldr	r3, [pc, #556]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a8a      	ldr	r2, [pc, #552]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	4b88      	ldr	r3, [pc, #544]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a87      	ldr	r2, [pc, #540]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 800694c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	e00b      	b.n	800696c <HAL_RCC_OscConfig+0xb0>
 8006954:	4b84      	ldr	r3, [pc, #528]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a83      	ldr	r2, [pc, #524]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 800695a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	4b81      	ldr	r3, [pc, #516]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a80      	ldr	r2, [pc, #512]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800696a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d013      	beq.n	800699c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006974:	f7fd f87e 	bl	8003a74 <HAL_GetTick>
 8006978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800697a:	e008      	b.n	800698e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800697c:	f7fd f87a 	bl	8003a74 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b64      	cmp	r3, #100	; 0x64
 8006988:	d901      	bls.n	800698e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e204      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800698e:	4b76      	ldr	r3, [pc, #472]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0f0      	beq.n	800697c <HAL_RCC_OscConfig+0xc0>
 800699a:	e014      	b.n	80069c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800699c:	f7fd f86a 	bl	8003a74 <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069a4:	f7fd f866 	bl	8003a74 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b64      	cmp	r3, #100	; 0x64
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e1f0      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069b6:	4b6c      	ldr	r3, [pc, #432]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f0      	bne.n	80069a4 <HAL_RCC_OscConfig+0xe8>
 80069c2:	e000      	b.n	80069c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d063      	beq.n	8006a9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069d2:	4b65      	ldr	r3, [pc, #404]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f003 030c 	and.w	r3, r3, #12
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00b      	beq.n	80069f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069de:	4b62      	ldr	r3, [pc, #392]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069e6:	2b08      	cmp	r3, #8
 80069e8:	d11c      	bne.n	8006a24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069ea:	4b5f      	ldr	r3, [pc, #380]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d116      	bne.n	8006a24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069f6:	4b5c      	ldr	r3, [pc, #368]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d005      	beq.n	8006a0e <HAL_RCC_OscConfig+0x152>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d001      	beq.n	8006a0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e1c4      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a0e:	4b56      	ldr	r3, [pc, #344]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	4952      	ldr	r1, [pc, #328]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a22:	e03a      	b.n	8006a9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d020      	beq.n	8006a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a2c:	4b4f      	ldr	r3, [pc, #316]	; (8006b6c <HAL_RCC_OscConfig+0x2b0>)
 8006a2e:	2201      	movs	r2, #1
 8006a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a32:	f7fd f81f 	bl	8003a74 <HAL_GetTick>
 8006a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a38:	e008      	b.n	8006a4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a3a:	f7fd f81b 	bl	8003a74 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e1a5      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a4c:	4b46      	ldr	r3, [pc, #280]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0f0      	beq.n	8006a3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a58:	4b43      	ldr	r3, [pc, #268]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	4940      	ldr	r1, [pc, #256]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	600b      	str	r3, [r1, #0]
 8006a6c:	e015      	b.n	8006a9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a6e:	4b3f      	ldr	r3, [pc, #252]	; (8006b6c <HAL_RCC_OscConfig+0x2b0>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a74:	f7fc fffe 	bl	8003a74 <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a7c:	f7fc fffa 	bl	8003a74 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e184      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a8e:	4b36      	ldr	r3, [pc, #216]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1f0      	bne.n	8006a7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d030      	beq.n	8006b08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d016      	beq.n	8006adc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aae:	4b30      	ldr	r3, [pc, #192]	; (8006b70 <HAL_RCC_OscConfig+0x2b4>)
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab4:	f7fc ffde 	bl	8003a74 <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006abc:	f7fc ffda 	bl	8003a74 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e164      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ace:	4b26      	ldr	r3, [pc, #152]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0f0      	beq.n	8006abc <HAL_RCC_OscConfig+0x200>
 8006ada:	e015      	b.n	8006b08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006adc:	4b24      	ldr	r3, [pc, #144]	; (8006b70 <HAL_RCC_OscConfig+0x2b4>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ae2:	f7fc ffc7 	bl	8003a74 <HAL_GetTick>
 8006ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ae8:	e008      	b.n	8006afc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006aea:	f7fc ffc3 	bl	8003a74 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e14d      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006afc:	4b1a      	ldr	r3, [pc, #104]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1f0      	bne.n	8006aea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 80a0 	beq.w	8006c56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b16:	2300      	movs	r3, #0
 8006b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b1a:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10f      	bne.n	8006b46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b26:	2300      	movs	r3, #0
 8006b28:	60bb      	str	r3, [r7, #8]
 8006b2a:	4b0f      	ldr	r3, [pc, #60]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	4a0e      	ldr	r2, [pc, #56]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b34:	6413      	str	r3, [r2, #64]	; 0x40
 8006b36:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <HAL_RCC_OscConfig+0x2ac>)
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b3e:	60bb      	str	r3, [r7, #8]
 8006b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b42:	2301      	movs	r3, #1
 8006b44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b46:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <HAL_RCC_OscConfig+0x2b8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d121      	bne.n	8006b96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b52:	4b08      	ldr	r3, [pc, #32]	; (8006b74 <HAL_RCC_OscConfig+0x2b8>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a07      	ldr	r2, [pc, #28]	; (8006b74 <HAL_RCC_OscConfig+0x2b8>)
 8006b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b5e:	f7fc ff89 	bl	8003a74 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b64:	e011      	b.n	8006b8a <HAL_RCC_OscConfig+0x2ce>
 8006b66:	bf00      	nop
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	42470000 	.word	0x42470000
 8006b70:	42470e80 	.word	0x42470e80
 8006b74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b78:	f7fc ff7c 	bl	8003a74 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e106      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b8a:	4b85      	ldr	r3, [pc, #532]	; (8006da0 <HAL_RCC_OscConfig+0x4e4>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0f0      	beq.n	8006b78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d106      	bne.n	8006bac <HAL_RCC_OscConfig+0x2f0>
 8006b9e:	4b81      	ldr	r3, [pc, #516]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba2:	4a80      	ldr	r2, [pc, #512]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006ba4:	f043 0301 	orr.w	r3, r3, #1
 8006ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8006baa:	e01c      	b.n	8006be6 <HAL_RCC_OscConfig+0x32a>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2b05      	cmp	r3, #5
 8006bb2:	d10c      	bne.n	8006bce <HAL_RCC_OscConfig+0x312>
 8006bb4:	4b7b      	ldr	r3, [pc, #492]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb8:	4a7a      	ldr	r2, [pc, #488]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006bba:	f043 0304 	orr.w	r3, r3, #4
 8006bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc0:	4b78      	ldr	r3, [pc, #480]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc4:	4a77      	ldr	r2, [pc, #476]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006bc6:	f043 0301 	orr.w	r3, r3, #1
 8006bca:	6713      	str	r3, [r2, #112]	; 0x70
 8006bcc:	e00b      	b.n	8006be6 <HAL_RCC_OscConfig+0x32a>
 8006bce:	4b75      	ldr	r3, [pc, #468]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd2:	4a74      	ldr	r2, [pc, #464]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006bd4:	f023 0301 	bic.w	r3, r3, #1
 8006bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bda:	4b72      	ldr	r3, [pc, #456]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bde:	4a71      	ldr	r2, [pc, #452]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006be0:	f023 0304 	bic.w	r3, r3, #4
 8006be4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d015      	beq.n	8006c1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bee:	f7fc ff41 	bl	8003a74 <HAL_GetTick>
 8006bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bf4:	e00a      	b.n	8006c0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bf6:	f7fc ff3d 	bl	8003a74 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e0c5      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c0c:	4b65      	ldr	r3, [pc, #404]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0ee      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x33a>
 8006c18:	e014      	b.n	8006c44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c1a:	f7fc ff2b 	bl	8003a74 <HAL_GetTick>
 8006c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c20:	e00a      	b.n	8006c38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c22:	f7fc ff27 	bl	8003a74 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e0af      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c38:	4b5a      	ldr	r3, [pc, #360]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1ee      	bne.n	8006c22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d105      	bne.n	8006c56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c4a:	4b56      	ldr	r3, [pc, #344]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	4a55      	ldr	r2, [pc, #340]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 809b 	beq.w	8006d96 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c60:	4b50      	ldr	r3, [pc, #320]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f003 030c 	and.w	r3, r3, #12
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d05c      	beq.n	8006d26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d141      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c74:	4b4c      	ldr	r3, [pc, #304]	; (8006da8 <HAL_RCC_OscConfig+0x4ec>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c7a:	f7fc fefb 	bl	8003a74 <HAL_GetTick>
 8006c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c80:	e008      	b.n	8006c94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c82:	f7fc fef7 	bl	8003a74 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d901      	bls.n	8006c94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e081      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c94:	4b43      	ldr	r3, [pc, #268]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1f0      	bne.n	8006c82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	69da      	ldr	r2, [r3, #28]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	019b      	lsls	r3, r3, #6
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb6:	085b      	lsrs	r3, r3, #1
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	041b      	lsls	r3, r3, #16
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc2:	061b      	lsls	r3, r3, #24
 8006cc4:	4937      	ldr	r1, [pc, #220]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cca:	4b37      	ldr	r3, [pc, #220]	; (8006da8 <HAL_RCC_OscConfig+0x4ec>)
 8006ccc:	2201      	movs	r2, #1
 8006cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd0:	f7fc fed0 	bl	8003a74 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cd8:	f7fc fecc 	bl	8003a74 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e056      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cea:	4b2e      	ldr	r3, [pc, #184]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0f0      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x41c>
 8006cf6:	e04e      	b.n	8006d96 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cf8:	4b2b      	ldr	r3, [pc, #172]	; (8006da8 <HAL_RCC_OscConfig+0x4ec>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cfe:	f7fc feb9 	bl	8003a74 <HAL_GetTick>
 8006d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d04:	e008      	b.n	8006d18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d06:	f7fc feb5 	bl	8003a74 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e03f      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d18:	4b22      	ldr	r3, [pc, #136]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1f0      	bne.n	8006d06 <HAL_RCC_OscConfig+0x44a>
 8006d24:	e037      	b.n	8006d96 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d101      	bne.n	8006d32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e032      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d32:	4b1c      	ldr	r3, [pc, #112]	; (8006da4 <HAL_RCC_OscConfig+0x4e8>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d028      	beq.n	8006d92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d121      	bne.n	8006d92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d11a      	bne.n	8006d92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d62:	4013      	ands	r3, r2
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d68:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d111      	bne.n	8006d92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d107      	bne.n	8006d92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d001      	beq.n	8006d96 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3718      	adds	r7, #24
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	40007000 	.word	0x40007000
 8006da4:	40023800 	.word	0x40023800
 8006da8:	42470060 	.word	0x42470060

08006dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e0cc      	b.n	8006f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006dc0:	4b68      	ldr	r3, [pc, #416]	; (8006f64 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0307 	and.w	r3, r3, #7
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d90c      	bls.n	8006de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dce:	4b65      	ldr	r3, [pc, #404]	; (8006f64 <HAL_RCC_ClockConfig+0x1b8>)
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	b2d2      	uxtb	r2, r2
 8006dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dd6:	4b63      	ldr	r3, [pc, #396]	; (8006f64 <HAL_RCC_ClockConfig+0x1b8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d001      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e0b8      	b.n	8006f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d020      	beq.n	8006e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d005      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e00:	4b59      	ldr	r3, [pc, #356]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	4a58      	ldr	r2, [pc, #352]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e18:	4b53      	ldr	r3, [pc, #332]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	4a52      	ldr	r2, [pc, #328]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e24:	4b50      	ldr	r3, [pc, #320]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	494d      	ldr	r1, [pc, #308]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d044      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d107      	bne.n	8006e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e4a:	4b47      	ldr	r3, [pc, #284]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d119      	bne.n	8006e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e07f      	b.n	8006f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d003      	beq.n	8006e6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d107      	bne.n	8006e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e6a:	4b3f      	ldr	r3, [pc, #252]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d109      	bne.n	8006e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e06f      	b.n	8006f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e7a:	4b3b      	ldr	r3, [pc, #236]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e067      	b.n	8006f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e8a:	4b37      	ldr	r3, [pc, #220]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f023 0203 	bic.w	r2, r3, #3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	4934      	ldr	r1, [pc, #208]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e9c:	f7fc fdea 	bl	8003a74 <HAL_GetTick>
 8006ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ea2:	e00a      	b.n	8006eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ea4:	f7fc fde6 	bl	8003a74 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e04f      	b.n	8006f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eba:	4b2b      	ldr	r3, [pc, #172]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f003 020c 	and.w	r2, r3, #12
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d1eb      	bne.n	8006ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ecc:	4b25      	ldr	r3, [pc, #148]	; (8006f64 <HAL_RCC_ClockConfig+0x1b8>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0307 	and.w	r3, r3, #7
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d20c      	bcs.n	8006ef4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eda:	4b22      	ldr	r3, [pc, #136]	; (8006f64 <HAL_RCC_ClockConfig+0x1b8>)
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee2:	4b20      	ldr	r3, [pc, #128]	; (8006f64 <HAL_RCC_ClockConfig+0x1b8>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0307 	and.w	r3, r3, #7
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d001      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e032      	b.n	8006f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d008      	beq.n	8006f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f00:	4b19      	ldr	r3, [pc, #100]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	4916      	ldr	r1, [pc, #88]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d009      	beq.n	8006f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f1e:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	490e      	ldr	r1, [pc, #56]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f32:	f000 f821 	bl	8006f78 <HAL_RCC_GetSysClockFreq>
 8006f36:	4602      	mov	r2, r0
 8006f38:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	091b      	lsrs	r3, r3, #4
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	490a      	ldr	r1, [pc, #40]	; (8006f6c <HAL_RCC_ClockConfig+0x1c0>)
 8006f44:	5ccb      	ldrb	r3, [r1, r3]
 8006f46:	fa22 f303 	lsr.w	r3, r2, r3
 8006f4a:	4a09      	ldr	r2, [pc, #36]	; (8006f70 <HAL_RCC_ClockConfig+0x1c4>)
 8006f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f4e:	4b09      	ldr	r3, [pc, #36]	; (8006f74 <HAL_RCC_ClockConfig+0x1c8>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fc fd4a 	bl	80039ec <HAL_InitTick>

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	40023c00 	.word	0x40023c00
 8006f68:	40023800 	.word	0x40023800
 8006f6c:	0800c340 	.word	0x0800c340
 8006f70:	20000008 	.word	0x20000008
 8006f74:	2000000c 	.word	0x2000000c

08006f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	607b      	str	r3, [r7, #4]
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f90:	4b67      	ldr	r3, [pc, #412]	; (8007130 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f003 030c 	and.w	r3, r3, #12
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d00d      	beq.n	8006fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	f200 80bd 	bhi.w	800711c <HAL_RCC_GetSysClockFreq+0x1a4>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <HAL_RCC_GetSysClockFreq+0x34>
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d003      	beq.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006faa:	e0b7      	b.n	800711c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fac:	4b61      	ldr	r3, [pc, #388]	; (8007134 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006fae:	60bb      	str	r3, [r7, #8]
       break;
 8006fb0:	e0b7      	b.n	8007122 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fb2:	4b61      	ldr	r3, [pc, #388]	; (8007138 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006fb4:	60bb      	str	r3, [r7, #8]
      break;
 8006fb6:	e0b4      	b.n	8007122 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fb8:	4b5d      	ldr	r3, [pc, #372]	; (8007130 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fc0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fc2:	4b5b      	ldr	r3, [pc, #364]	; (8007130 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d04d      	beq.n	800706a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fce:	4b58      	ldr	r3, [pc, #352]	; (8007130 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	099b      	lsrs	r3, r3, #6
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f04f 0300 	mov.w	r3, #0
 8006fda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006fde:	f04f 0100 	mov.w	r1, #0
 8006fe2:	ea02 0800 	and.w	r8, r2, r0
 8006fe6:	ea03 0901 	and.w	r9, r3, r1
 8006fea:	4640      	mov	r0, r8
 8006fec:	4649      	mov	r1, r9
 8006fee:	f04f 0200 	mov.w	r2, #0
 8006ff2:	f04f 0300 	mov.w	r3, #0
 8006ff6:	014b      	lsls	r3, r1, #5
 8006ff8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ffc:	0142      	lsls	r2, r0, #5
 8006ffe:	4610      	mov	r0, r2
 8007000:	4619      	mov	r1, r3
 8007002:	ebb0 0008 	subs.w	r0, r0, r8
 8007006:	eb61 0109 	sbc.w	r1, r1, r9
 800700a:	f04f 0200 	mov.w	r2, #0
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	018b      	lsls	r3, r1, #6
 8007014:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007018:	0182      	lsls	r2, r0, #6
 800701a:	1a12      	subs	r2, r2, r0
 800701c:	eb63 0301 	sbc.w	r3, r3, r1
 8007020:	f04f 0000 	mov.w	r0, #0
 8007024:	f04f 0100 	mov.w	r1, #0
 8007028:	00d9      	lsls	r1, r3, #3
 800702a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800702e:	00d0      	lsls	r0, r2, #3
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	eb12 0208 	adds.w	r2, r2, r8
 8007038:	eb43 0309 	adc.w	r3, r3, r9
 800703c:	f04f 0000 	mov.w	r0, #0
 8007040:	f04f 0100 	mov.w	r1, #0
 8007044:	0259      	lsls	r1, r3, #9
 8007046:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800704a:	0250      	lsls	r0, r2, #9
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	4610      	mov	r0, r2
 8007052:	4619      	mov	r1, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	461a      	mov	r2, r3
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	f7f9 fd78 	bl	8000b50 <__aeabi_uldivmod>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	4613      	mov	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	e04a      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800706a:	4b31      	ldr	r3, [pc, #196]	; (8007130 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	099b      	lsrs	r3, r3, #6
 8007070:	461a      	mov	r2, r3
 8007072:	f04f 0300 	mov.w	r3, #0
 8007076:	f240 10ff 	movw	r0, #511	; 0x1ff
 800707a:	f04f 0100 	mov.w	r1, #0
 800707e:	ea02 0400 	and.w	r4, r2, r0
 8007082:	ea03 0501 	and.w	r5, r3, r1
 8007086:	4620      	mov	r0, r4
 8007088:	4629      	mov	r1, r5
 800708a:	f04f 0200 	mov.w	r2, #0
 800708e:	f04f 0300 	mov.w	r3, #0
 8007092:	014b      	lsls	r3, r1, #5
 8007094:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007098:	0142      	lsls	r2, r0, #5
 800709a:	4610      	mov	r0, r2
 800709c:	4619      	mov	r1, r3
 800709e:	1b00      	subs	r0, r0, r4
 80070a0:	eb61 0105 	sbc.w	r1, r1, r5
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	f04f 0300 	mov.w	r3, #0
 80070ac:	018b      	lsls	r3, r1, #6
 80070ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80070b2:	0182      	lsls	r2, r0, #6
 80070b4:	1a12      	subs	r2, r2, r0
 80070b6:	eb63 0301 	sbc.w	r3, r3, r1
 80070ba:	f04f 0000 	mov.w	r0, #0
 80070be:	f04f 0100 	mov.w	r1, #0
 80070c2:	00d9      	lsls	r1, r3, #3
 80070c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070c8:	00d0      	lsls	r0, r2, #3
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	1912      	adds	r2, r2, r4
 80070d0:	eb45 0303 	adc.w	r3, r5, r3
 80070d4:	f04f 0000 	mov.w	r0, #0
 80070d8:	f04f 0100 	mov.w	r1, #0
 80070dc:	0299      	lsls	r1, r3, #10
 80070de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80070e2:	0290      	lsls	r0, r2, #10
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4610      	mov	r0, r2
 80070ea:	4619      	mov	r1, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	461a      	mov	r2, r3
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	f7f9 fd2c 	bl	8000b50 <__aeabi_uldivmod>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4613      	mov	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007100:	4b0b      	ldr	r3, [pc, #44]	; (8007130 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	0c1b      	lsrs	r3, r3, #16
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	3301      	adds	r3, #1
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	fbb2 f3f3 	udiv	r3, r2, r3
 8007118:	60bb      	str	r3, [r7, #8]
      break;
 800711a:	e002      	b.n	8007122 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800711c:	4b05      	ldr	r3, [pc, #20]	; (8007134 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800711e:	60bb      	str	r3, [r7, #8]
      break;
 8007120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007122:	68bb      	ldr	r3, [r7, #8]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800712e:	bf00      	nop
 8007130:	40023800 	.word	0x40023800
 8007134:	00f42400 	.word	0x00f42400
 8007138:	007a1200 	.word	0x007a1200

0800713c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007140:	4b03      	ldr	r3, [pc, #12]	; (8007150 <HAL_RCC_GetHCLKFreq+0x14>)
 8007142:	681b      	ldr	r3, [r3, #0]
}
 8007144:	4618      	mov	r0, r3
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	20000008 	.word	0x20000008

08007154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007158:	f7ff fff0 	bl	800713c <HAL_RCC_GetHCLKFreq>
 800715c:	4602      	mov	r2, r0
 800715e:	4b05      	ldr	r3, [pc, #20]	; (8007174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	0a9b      	lsrs	r3, r3, #10
 8007164:	f003 0307 	and.w	r3, r3, #7
 8007168:	4903      	ldr	r1, [pc, #12]	; (8007178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800716a:	5ccb      	ldrb	r3, [r1, r3]
 800716c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007170:	4618      	mov	r0, r3
 8007172:	bd80      	pop	{r7, pc}
 8007174:	40023800 	.word	0x40023800
 8007178:	0800c350 	.word	0x0800c350

0800717c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e07b      	b.n	8007286 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	2b00      	cmp	r3, #0
 8007194:	d108      	bne.n	80071a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800719e:	d009      	beq.n	80071b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	61da      	str	r2, [r3, #28]
 80071a6:	e005      	b.n	80071b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d106      	bne.n	80071d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fc fa4e 	bl	8003670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071fc:	431a      	orrs	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007206:	431a      	orrs	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007224:	431a      	orrs	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007238:	ea42 0103 	orr.w	r1, r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	0c1b      	lsrs	r3, r3, #16
 8007252:	f003 0104 	and.w	r1, r3, #4
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	f003 0210 	and.w	r2, r3, #16
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69da      	ldr	r2, [r3, #28]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007274:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b088      	sub	sp, #32
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	603b      	str	r3, [r7, #0]
 800729a:	4613      	mov	r3, r2
 800729c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d101      	bne.n	80072b0 <HAL_SPI_Transmit+0x22>
 80072ac:	2302      	movs	r3, #2
 80072ae:	e126      	b.n	80074fe <HAL_SPI_Transmit+0x270>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072b8:	f7fc fbdc 	bl	8003a74 <HAL_GetTick>
 80072bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80072be:	88fb      	ldrh	r3, [r7, #6]
 80072c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d002      	beq.n	80072d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80072ce:	2302      	movs	r3, #2
 80072d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80072d2:	e10b      	b.n	80074ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <HAL_SPI_Transmit+0x52>
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d102      	bne.n	80072e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80072e4:	e102      	b.n	80074ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2203      	movs	r2, #3
 80072ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	88fa      	ldrh	r2, [r7, #6]
 80072fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	88fa      	ldrh	r2, [r7, #6]
 8007304:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800732c:	d10f      	bne.n	800734e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800733c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800734c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007358:	2b40      	cmp	r3, #64	; 0x40
 800735a:	d007      	beq.n	800736c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800736a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007374:	d14b      	bne.n	800740e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <HAL_SPI_Transmit+0xf6>
 800737e:	8afb      	ldrh	r3, [r7, #22]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d13e      	bne.n	8007402 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	881a      	ldrh	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007394:	1c9a      	adds	r2, r3, #2
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800739e:	b29b      	uxth	r3, r3
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80073a8:	e02b      	b.n	8007402 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d112      	bne.n	80073de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073bc:	881a      	ldrh	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c8:	1c9a      	adds	r2, r3, #2
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	3b01      	subs	r3, #1
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	86da      	strh	r2, [r3, #54]	; 0x36
 80073dc:	e011      	b.n	8007402 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073de:	f7fc fb49 	bl	8003a74 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d803      	bhi.n	80073f6 <HAL_SPI_Transmit+0x168>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f4:	d102      	bne.n	80073fc <HAL_SPI_Transmit+0x16e>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d102      	bne.n	8007402 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007400:	e074      	b.n	80074ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007406:	b29b      	uxth	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1ce      	bne.n	80073aa <HAL_SPI_Transmit+0x11c>
 800740c:	e04c      	b.n	80074a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <HAL_SPI_Transmit+0x18e>
 8007416:	8afb      	ldrh	r3, [r7, #22]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d140      	bne.n	800749e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	330c      	adds	r3, #12
 8007426:	7812      	ldrb	r2, [r2, #0]
 8007428:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007438:	b29b      	uxth	r3, r3
 800743a:	3b01      	subs	r3, #1
 800743c:	b29a      	uxth	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007442:	e02c      	b.n	800749e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b02      	cmp	r3, #2
 8007450:	d113      	bne.n	800747a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	330c      	adds	r3, #12
 800745c:	7812      	ldrb	r2, [r2, #0]
 800745e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800746e:	b29b      	uxth	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	86da      	strh	r2, [r3, #54]	; 0x36
 8007478:	e011      	b.n	800749e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800747a:	f7fc fafb 	bl	8003a74 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d803      	bhi.n	8007492 <HAL_SPI_Transmit+0x204>
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007490:	d102      	bne.n	8007498 <HAL_SPI_Transmit+0x20a>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d102      	bne.n	800749e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800749c:	e026      	b.n	80074ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1cd      	bne.n	8007444 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 fbcb 	bl	8007c48 <SPI_EndRxTxTransaction>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2220      	movs	r2, #32
 80074bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10a      	bne.n	80074dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074c6:	2300      	movs	r3, #0
 80074c8:	613b      	str	r3, [r7, #16]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	613b      	str	r3, [r7, #16]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	613b      	str	r3, [r7, #16]
 80074da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	77fb      	strb	r3, [r7, #31]
 80074e8:	e000      	b.n	80074ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80074ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3720      	adds	r7, #32
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b088      	sub	sp, #32
 800750a:	af02      	add	r7, sp, #8
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	603b      	str	r3, [r7, #0]
 8007512:	4613      	mov	r3, r2
 8007514:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007522:	d112      	bne.n	800754a <HAL_SPI_Receive+0x44>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10e      	bne.n	800754a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2204      	movs	r2, #4
 8007530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007534:	88fa      	ldrh	r2, [r7, #6]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	4613      	mov	r3, r2
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	68b9      	ldr	r1, [r7, #8]
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f8f1 	bl	8007728 <HAL_SPI_TransmitReceive>
 8007546:	4603      	mov	r3, r0
 8007548:	e0ea      	b.n	8007720 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007550:	2b01      	cmp	r3, #1
 8007552:	d101      	bne.n	8007558 <HAL_SPI_Receive+0x52>
 8007554:	2302      	movs	r3, #2
 8007556:	e0e3      	b.n	8007720 <HAL_SPI_Receive+0x21a>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007560:	f7fc fa88 	bl	8003a74 <HAL_GetTick>
 8007564:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b01      	cmp	r3, #1
 8007570:	d002      	beq.n	8007578 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007572:	2302      	movs	r3, #2
 8007574:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007576:	e0ca      	b.n	800770e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <HAL_SPI_Receive+0x7e>
 800757e:	88fb      	ldrh	r3, [r7, #6]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007588:	e0c1      	b.n	800770e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2204      	movs	r2, #4
 800758e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	88fa      	ldrh	r2, [r7, #6]
 80075a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	88fa      	ldrh	r2, [r7, #6]
 80075a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d0:	d10f      	bne.n	80075f2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80075f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fc:	2b40      	cmp	r3, #64	; 0x40
 80075fe:	d007      	beq.n	8007610 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800760e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d162      	bne.n	80076de <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007618:	e02e      	b.n	8007678 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b01      	cmp	r3, #1
 8007626:	d115      	bne.n	8007654 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f103 020c 	add.w	r2, r3, #12
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007634:	7812      	ldrb	r2, [r2, #0]
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007648:	b29b      	uxth	r3, r3
 800764a:	3b01      	subs	r3, #1
 800764c:	b29a      	uxth	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007652:	e011      	b.n	8007678 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007654:	f7fc fa0e 	bl	8003a74 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d803      	bhi.n	800766c <HAL_SPI_Receive+0x166>
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766a:	d102      	bne.n	8007672 <HAL_SPI_Receive+0x16c>
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d102      	bne.n	8007678 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007676:	e04a      	b.n	800770e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1cb      	bne.n	800761a <HAL_SPI_Receive+0x114>
 8007682:	e031      	b.n	80076e8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b01      	cmp	r3, #1
 8007690:	d113      	bne.n	80076ba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68da      	ldr	r2, [r3, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769c:	b292      	uxth	r2, r2
 800769e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	1c9a      	adds	r2, r3, #2
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076b8:	e011      	b.n	80076de <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076ba:	f7fc f9db 	bl	8003a74 <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d803      	bhi.n	80076d2 <HAL_SPI_Receive+0x1cc>
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d0:	d102      	bne.n	80076d8 <HAL_SPI_Receive+0x1d2>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d102      	bne.n	80076de <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80076dc:	e017      	b.n	800770e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1cd      	bne.n	8007684 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 fa45 	bl	8007b7c <SPI_EndRxTransaction>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2220      	movs	r2, #32
 80076fc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	75fb      	strb	r3, [r7, #23]
 800770a:	e000      	b.n	800770e <HAL_SPI_Receive+0x208>
  }

error :
 800770c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800771e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b08c      	sub	sp, #48	; 0x30
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
 8007734:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007736:	2301      	movs	r3, #1
 8007738:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007746:	2b01      	cmp	r3, #1
 8007748:	d101      	bne.n	800774e <HAL_SPI_TransmitReceive+0x26>
 800774a:	2302      	movs	r3, #2
 800774c:	e18a      	b.n	8007a64 <HAL_SPI_TransmitReceive+0x33c>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007756:	f7fc f98d 	bl	8003a74 <HAL_GetTick>
 800775a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800776c:	887b      	ldrh	r3, [r7, #2]
 800776e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007774:	2b01      	cmp	r3, #1
 8007776:	d00f      	beq.n	8007798 <HAL_SPI_TransmitReceive+0x70>
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800777e:	d107      	bne.n	8007790 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d103      	bne.n	8007790 <HAL_SPI_TransmitReceive+0x68>
 8007788:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800778c:	2b04      	cmp	r3, #4
 800778e:	d003      	beq.n	8007798 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007790:	2302      	movs	r3, #2
 8007792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007796:	e15b      	b.n	8007a50 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d005      	beq.n	80077aa <HAL_SPI_TransmitReceive+0x82>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <HAL_SPI_TransmitReceive+0x82>
 80077a4:	887b      	ldrh	r3, [r7, #2]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d103      	bne.n	80077b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077b0:	e14e      	b.n	8007a50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d003      	beq.n	80077c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2205      	movs	r2, #5
 80077c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	887a      	ldrh	r2, [r7, #2]
 80077d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	887a      	ldrh	r2, [r7, #2]
 80077dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	887a      	ldrh	r2, [r7, #2]
 80077e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	887a      	ldrh	r2, [r7, #2]
 80077ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007806:	2b40      	cmp	r3, #64	; 0x40
 8007808:	d007      	beq.n	800781a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007818:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007822:	d178      	bne.n	8007916 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_SPI_TransmitReceive+0x10a>
 800782c:	8b7b      	ldrh	r3, [r7, #26]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d166      	bne.n	8007900 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007836:	881a      	ldrh	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	1c9a      	adds	r2, r3, #2
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800784c:	b29b      	uxth	r3, r3
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007856:	e053      	b.n	8007900 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b02      	cmp	r3, #2
 8007864:	d11b      	bne.n	800789e <HAL_SPI_TransmitReceive+0x176>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800786a:	b29b      	uxth	r3, r3
 800786c:	2b00      	cmp	r3, #0
 800786e:	d016      	beq.n	800789e <HAL_SPI_TransmitReceive+0x176>
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	2b01      	cmp	r3, #1
 8007874:	d113      	bne.n	800789e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787a:	881a      	ldrh	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007886:	1c9a      	adds	r2, r3, #2
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f003 0301 	and.w	r3, r3, #1
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d119      	bne.n	80078e0 <HAL_SPI_TransmitReceive+0x1b8>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d014      	beq.n	80078e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68da      	ldr	r2, [r3, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c0:	b292      	uxth	r2, r2
 80078c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c8:	1c9a      	adds	r2, r3, #2
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	3b01      	subs	r3, #1
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078dc:	2301      	movs	r3, #1
 80078de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078e0:	f7fc f8c8 	bl	8003a74 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d807      	bhi.n	8007900 <HAL_SPI_TransmitReceive+0x1d8>
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f6:	d003      	beq.n	8007900 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80078fe:	e0a7      	b.n	8007a50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1a6      	bne.n	8007858 <HAL_SPI_TransmitReceive+0x130>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800790e:	b29b      	uxth	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1a1      	bne.n	8007858 <HAL_SPI_TransmitReceive+0x130>
 8007914:	e07c      	b.n	8007a10 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <HAL_SPI_TransmitReceive+0x1fc>
 800791e:	8b7b      	ldrh	r3, [r7, #26]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d16b      	bne.n	80079fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	330c      	adds	r3, #12
 800792e:	7812      	ldrb	r2, [r2, #0]
 8007930:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007940:	b29b      	uxth	r3, r3
 8007942:	3b01      	subs	r3, #1
 8007944:	b29a      	uxth	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800794a:	e057      	b.n	80079fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b02      	cmp	r3, #2
 8007958:	d11c      	bne.n	8007994 <HAL_SPI_TransmitReceive+0x26c>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d017      	beq.n	8007994 <HAL_SPI_TransmitReceive+0x26c>
 8007964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007966:	2b01      	cmp	r3, #1
 8007968:	d114      	bne.n	8007994 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	330c      	adds	r3, #12
 8007974:	7812      	ldrb	r2, [r2, #0]
 8007976:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007986:	b29b      	uxth	r3, r3
 8007988:	3b01      	subs	r3, #1
 800798a:	b29a      	uxth	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d119      	bne.n	80079d6 <HAL_SPI_TransmitReceive+0x2ae>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d014      	beq.n	80079d6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	b2d2      	uxtb	r2, r2
 80079b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079d2:	2301      	movs	r3, #1
 80079d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80079d6:	f7fc f84d 	bl	8003a74 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d803      	bhi.n	80079ee <HAL_SPI_TransmitReceive+0x2c6>
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ec:	d102      	bne.n	80079f4 <HAL_SPI_TransmitReceive+0x2cc>
 80079ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d103      	bne.n	80079fc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80079fa:	e029      	b.n	8007a50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1a2      	bne.n	800794c <HAL_SPI_TransmitReceive+0x224>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d19d      	bne.n	800794c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 f917 	bl	8007c48 <SPI_EndRxTxTransaction>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d006      	beq.n	8007a2e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007a2c:	e010      	b.n	8007a50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10b      	bne.n	8007a4e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a36:	2300      	movs	r3, #0
 8007a38:	617b      	str	r3, [r7, #20]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	617b      	str	r3, [r7, #20]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	e000      	b.n	8007a50 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007a4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3730      	adds	r7, #48	; 0x30
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b088      	sub	sp, #32
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	603b      	str	r3, [r7, #0]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a7c:	f7fb fffa 	bl	8003a74 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	4413      	add	r3, r2
 8007a8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a8c:	f7fb fff2 	bl	8003a74 <HAL_GetTick>
 8007a90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a92:	4b39      	ldr	r3, [pc, #228]	; (8007b78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	015b      	lsls	r3, r3, #5
 8007a98:	0d1b      	lsrs	r3, r3, #20
 8007a9a:	69fa      	ldr	r2, [r7, #28]
 8007a9c:	fb02 f303 	mul.w	r3, r2, r3
 8007aa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aa2:	e054      	b.n	8007b4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aaa:	d050      	beq.n	8007b4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007aac:	f7fb ffe2 	bl	8003a74 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	69fa      	ldr	r2, [r7, #28]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d902      	bls.n	8007ac2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d13d      	bne.n	8007b3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ad0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ada:	d111      	bne.n	8007b00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ae4:	d004      	beq.n	8007af0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aee:	d107      	bne.n	8007b00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007afe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b08:	d10f      	bne.n	8007b2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e017      	b.n	8007b6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	689a      	ldr	r2, [r3, #8]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	4013      	ands	r3, r2
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	bf0c      	ite	eq
 8007b5e:	2301      	moveq	r3, #1
 8007b60:	2300      	movne	r3, #0
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	461a      	mov	r2, r3
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d19b      	bne.n	8007aa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3720      	adds	r7, #32
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20000008 	.word	0x20000008

08007b7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b90:	d111      	bne.n	8007bb6 <SPI_EndRxTransaction+0x3a>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b9a:	d004      	beq.n	8007ba6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ba4:	d107      	bne.n	8007bb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bb4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bbe:	d12a      	bne.n	8007c16 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bc8:	d012      	beq.n	8007bf0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2180      	movs	r1, #128	; 0x80
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f7ff ff49 	bl	8007a6c <SPI_WaitFlagStateUntilTimeout>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d02d      	beq.n	8007c3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be4:	f043 0220 	orr.w	r2, r3, #32
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e026      	b.n	8007c3e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f7ff ff36 	bl	8007a6c <SPI_WaitFlagStateUntilTimeout>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d01a      	beq.n	8007c3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0a:	f043 0220 	orr.w	r2, r3, #32
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e013      	b.n	8007c3e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	2101      	movs	r1, #1
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f7ff ff23 	bl	8007a6c <SPI_WaitFlagStateUntilTimeout>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d007      	beq.n	8007c3c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c30:	f043 0220 	orr.w	r2, r3, #32
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e000      	b.n	8007c3e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b088      	sub	sp, #32
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c54:	4b1b      	ldr	r3, [pc, #108]	; (8007cc4 <SPI_EndRxTxTransaction+0x7c>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a1b      	ldr	r2, [pc, #108]	; (8007cc8 <SPI_EndRxTxTransaction+0x80>)
 8007c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c5e:	0d5b      	lsrs	r3, r3, #21
 8007c60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c64:	fb02 f303 	mul.w	r3, r2, r3
 8007c68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c72:	d112      	bne.n	8007c9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2180      	movs	r1, #128	; 0x80
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7ff fef4 	bl	8007a6c <SPI_WaitFlagStateUntilTimeout>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d016      	beq.n	8007cb8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8e:	f043 0220 	orr.w	r2, r3, #32
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e00f      	b.n	8007cba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb0:	2b80      	cmp	r3, #128	; 0x80
 8007cb2:	d0f2      	beq.n	8007c9a <SPI_EndRxTxTransaction+0x52>
 8007cb4:	e000      	b.n	8007cb8 <SPI_EndRxTxTransaction+0x70>
        break;
 8007cb6:	bf00      	nop
  }

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20000008 	.word	0x20000008
 8007cc8:	165e9f81 	.word	0x165e9f81

08007ccc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ccc:	b084      	sub	sp, #16
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	f107 001c 	add.w	r0, r7, #28
 8007cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d122      	bne.n	8007d2a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d105      	bne.n	8007d1e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 fb1c 	bl	800935c <USB_CoreReset>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]
 8007d28:	e01a      	b.n	8007d60 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f001 fb10 	bl	800935c <USB_CoreReset>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d106      	bne.n	8007d54 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	639a      	str	r2, [r3, #56]	; 0x38
 8007d52:	e005      	b.n	8007d60 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d10b      	bne.n	8007d7e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f043 0206 	orr.w	r2, r3, #6
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f043 0220 	orr.w	r2, r3, #32
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d8a:	b004      	add	sp, #16
 8007d8c:	4770      	bx	lr
	...

08007d90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d165      	bne.n	8007e70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	4a41      	ldr	r2, [pc, #260]	; (8007eac <USB_SetTurnaroundTime+0x11c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d906      	bls.n	8007dba <USB_SetTurnaroundTime+0x2a>
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	4a40      	ldr	r2, [pc, #256]	; (8007eb0 <USB_SetTurnaroundTime+0x120>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d202      	bcs.n	8007dba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007db4:	230f      	movs	r3, #15
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	e062      	b.n	8007e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	4a3c      	ldr	r2, [pc, #240]	; (8007eb0 <USB_SetTurnaroundTime+0x120>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d306      	bcc.n	8007dd0 <USB_SetTurnaroundTime+0x40>
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	4a3b      	ldr	r2, [pc, #236]	; (8007eb4 <USB_SetTurnaroundTime+0x124>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d202      	bcs.n	8007dd0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007dca:	230e      	movs	r3, #14
 8007dcc:	617b      	str	r3, [r7, #20]
 8007dce:	e057      	b.n	8007e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	4a38      	ldr	r2, [pc, #224]	; (8007eb4 <USB_SetTurnaroundTime+0x124>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d306      	bcc.n	8007de6 <USB_SetTurnaroundTime+0x56>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	4a37      	ldr	r2, [pc, #220]	; (8007eb8 <USB_SetTurnaroundTime+0x128>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d202      	bcs.n	8007de6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007de0:	230d      	movs	r3, #13
 8007de2:	617b      	str	r3, [r7, #20]
 8007de4:	e04c      	b.n	8007e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	4a33      	ldr	r2, [pc, #204]	; (8007eb8 <USB_SetTurnaroundTime+0x128>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d306      	bcc.n	8007dfc <USB_SetTurnaroundTime+0x6c>
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4a32      	ldr	r2, [pc, #200]	; (8007ebc <USB_SetTurnaroundTime+0x12c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d802      	bhi.n	8007dfc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007df6:	230c      	movs	r3, #12
 8007df8:	617b      	str	r3, [r7, #20]
 8007dfa:	e041      	b.n	8007e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	4a2f      	ldr	r2, [pc, #188]	; (8007ebc <USB_SetTurnaroundTime+0x12c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d906      	bls.n	8007e12 <USB_SetTurnaroundTime+0x82>
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	4a2e      	ldr	r2, [pc, #184]	; (8007ec0 <USB_SetTurnaroundTime+0x130>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d802      	bhi.n	8007e12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007e0c:	230b      	movs	r3, #11
 8007e0e:	617b      	str	r3, [r7, #20]
 8007e10:	e036      	b.n	8007e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	4a2a      	ldr	r2, [pc, #168]	; (8007ec0 <USB_SetTurnaroundTime+0x130>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d906      	bls.n	8007e28 <USB_SetTurnaroundTime+0x98>
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	4a29      	ldr	r2, [pc, #164]	; (8007ec4 <USB_SetTurnaroundTime+0x134>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d802      	bhi.n	8007e28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007e22:	230a      	movs	r3, #10
 8007e24:	617b      	str	r3, [r7, #20]
 8007e26:	e02b      	b.n	8007e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	4a26      	ldr	r2, [pc, #152]	; (8007ec4 <USB_SetTurnaroundTime+0x134>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d906      	bls.n	8007e3e <USB_SetTurnaroundTime+0xae>
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	4a25      	ldr	r2, [pc, #148]	; (8007ec8 <USB_SetTurnaroundTime+0x138>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d202      	bcs.n	8007e3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007e38:	2309      	movs	r3, #9
 8007e3a:	617b      	str	r3, [r7, #20]
 8007e3c:	e020      	b.n	8007e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	4a21      	ldr	r2, [pc, #132]	; (8007ec8 <USB_SetTurnaroundTime+0x138>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d306      	bcc.n	8007e54 <USB_SetTurnaroundTime+0xc4>
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	4a20      	ldr	r2, [pc, #128]	; (8007ecc <USB_SetTurnaroundTime+0x13c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d802      	bhi.n	8007e54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007e4e:	2308      	movs	r3, #8
 8007e50:	617b      	str	r3, [r7, #20]
 8007e52:	e015      	b.n	8007e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	4a1d      	ldr	r2, [pc, #116]	; (8007ecc <USB_SetTurnaroundTime+0x13c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d906      	bls.n	8007e6a <USB_SetTurnaroundTime+0xda>
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4a1c      	ldr	r2, [pc, #112]	; (8007ed0 <USB_SetTurnaroundTime+0x140>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d202      	bcs.n	8007e6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007e64:	2307      	movs	r3, #7
 8007e66:	617b      	str	r3, [r7, #20]
 8007e68:	e00a      	b.n	8007e80 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007e6a:	2306      	movs	r3, #6
 8007e6c:	617b      	str	r3, [r7, #20]
 8007e6e:	e007      	b.n	8007e80 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d102      	bne.n	8007e7c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007e76:	2309      	movs	r3, #9
 8007e78:	617b      	str	r3, [r7, #20]
 8007e7a:	e001      	b.n	8007e80 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007e7c:	2309      	movs	r3, #9
 8007e7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	68da      	ldr	r2, [r3, #12]
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	029b      	lsls	r3, r3, #10
 8007e94:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	371c      	adds	r7, #28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	00d8acbf 	.word	0x00d8acbf
 8007eb0:	00e4e1c0 	.word	0x00e4e1c0
 8007eb4:	00f42400 	.word	0x00f42400
 8007eb8:	01067380 	.word	0x01067380
 8007ebc:	011a499f 	.word	0x011a499f
 8007ec0:	01312cff 	.word	0x01312cff
 8007ec4:	014ca43f 	.word	0x014ca43f
 8007ec8:	016e3600 	.word	0x016e3600
 8007ecc:	01a6ab1f 	.word	0x01a6ab1f
 8007ed0:	01e84800 	.word	0x01e84800

08007ed4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f043 0201 	orr.w	r2, r3, #1
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f023 0201 	bic.w	r2, r3, #1
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d115      	bne.n	8007f66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f46:	2001      	movs	r0, #1
 8007f48:	f7fb fda0 	bl	8003a8c <HAL_Delay>
      ms++;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 f972 	bl	800923c <USB_GetMode>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d01e      	beq.n	8007f9c <USB_SetCurrentMode+0x84>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b31      	cmp	r3, #49	; 0x31
 8007f62:	d9f0      	bls.n	8007f46 <USB_SetCurrentMode+0x2e>
 8007f64:	e01a      	b.n	8007f9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f66:	78fb      	ldrb	r3, [r7, #3]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d115      	bne.n	8007f98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f78:	2001      	movs	r0, #1
 8007f7a:	f7fb fd87 	bl	8003a8c <HAL_Delay>
      ms++;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3301      	adds	r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f001 f959 	bl	800923c <USB_GetMode>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d005      	beq.n	8007f9c <USB_SetCurrentMode+0x84>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b31      	cmp	r3, #49	; 0x31
 8007f94:	d9f0      	bls.n	8007f78 <USB_SetCurrentMode+0x60>
 8007f96:	e001      	b.n	8007f9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e005      	b.n	8007fa8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b32      	cmp	r3, #50	; 0x32
 8007fa0:	d101      	bne.n	8007fa6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e000      	b.n	8007fa8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b086      	sub	sp, #24
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007fbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007fca:	2300      	movs	r3, #0
 8007fcc:	613b      	str	r3, [r7, #16]
 8007fce:	e009      	b.n	8007fe4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	3340      	adds	r3, #64	; 0x40
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	2200      	movs	r2, #0
 8007fdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	613b      	str	r3, [r7, #16]
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	2b0e      	cmp	r3, #14
 8007fe8:	d9f2      	bls.n	8007fd0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d11c      	bne.n	800802a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ffe:	f043 0302 	orr.w	r3, r3, #2
 8008002:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008008:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008014:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008020:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	639a      	str	r2, [r3, #56]	; 0x38
 8008028:	e00b      	b.n	8008042 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008048:	461a      	mov	r2, r3
 800804a:	2300      	movs	r3, #0
 800804c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008054:	4619      	mov	r1, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805c:	461a      	mov	r2, r3
 800805e:	680b      	ldr	r3, [r1, #0]
 8008060:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008064:	2b01      	cmp	r3, #1
 8008066:	d10c      	bne.n	8008082 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806a:	2b00      	cmp	r3, #0
 800806c:	d104      	bne.n	8008078 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800806e:	2100      	movs	r1, #0
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f945 	bl	8008300 <USB_SetDevSpeed>
 8008076:	e008      	b.n	800808a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008078:	2101      	movs	r1, #1
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f940 	bl	8008300 <USB_SetDevSpeed>
 8008080:	e003      	b.n	800808a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008082:	2103      	movs	r1, #3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f93b 	bl	8008300 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800808a:	2110      	movs	r1, #16
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f8f3 	bl	8008278 <USB_FlushTxFifo>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f90f 	bl	80082c0 <USB_FlushRxFifo>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b2:	461a      	mov	r2, r3
 80080b4:	2300      	movs	r3, #0
 80080b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080be:	461a      	mov	r2, r3
 80080c0:	2300      	movs	r3, #0
 80080c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ca:	461a      	mov	r2, r3
 80080cc:	2300      	movs	r3, #0
 80080ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080d0:	2300      	movs	r3, #0
 80080d2:	613b      	str	r3, [r7, #16]
 80080d4:	e043      	b.n	800815e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080ec:	d118      	bne.n	8008120 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10a      	bne.n	800810a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008100:	461a      	mov	r2, r3
 8008102:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008106:	6013      	str	r3, [r2, #0]
 8008108:	e013      	b.n	8008132 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008116:	461a      	mov	r2, r3
 8008118:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	e008      	b.n	8008132 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800812c:	461a      	mov	r2, r3
 800812e:	2300      	movs	r3, #0
 8008130:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813e:	461a      	mov	r2, r3
 8008140:	2300      	movs	r3, #0
 8008142:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4413      	add	r3, r2
 800814c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008150:	461a      	mov	r2, r3
 8008152:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008156:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	3301      	adds	r3, #1
 800815c:	613b      	str	r3, [r7, #16]
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	429a      	cmp	r2, r3
 8008164:	d3b7      	bcc.n	80080d6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008166:	2300      	movs	r3, #0
 8008168:	613b      	str	r3, [r7, #16]
 800816a:	e043      	b.n	80081f4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800817e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008182:	d118      	bne.n	80081b6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10a      	bne.n	80081a0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008196:	461a      	mov	r2, r3
 8008198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	e013      	b.n	80081c8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ac:	461a      	mov	r2, r3
 80081ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081b2:	6013      	str	r3, [r2, #0]
 80081b4:	e008      	b.n	80081c8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c2:	461a      	mov	r2, r3
 80081c4:	2300      	movs	r3, #0
 80081c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d4:	461a      	mov	r2, r3
 80081d6:	2300      	movs	r3, #0
 80081d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e6:	461a      	mov	r2, r3
 80081e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	3301      	adds	r3, #1
 80081f2:	613b      	str	r3, [r7, #16]
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d3b7      	bcc.n	800816c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800820a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800820e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800821c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	2b00      	cmp	r3, #0
 8008222:	d105      	bne.n	8008230 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	f043 0210 	orr.w	r2, r3, #16
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	699a      	ldr	r2, [r3, #24]
 8008234:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <USB_DevInit+0x2c4>)
 8008236:	4313      	orrs	r3, r2
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800823c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823e:	2b00      	cmp	r3, #0
 8008240:	d005      	beq.n	800824e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	f043 0208 	orr.w	r2, r3, #8
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800824e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008250:	2b01      	cmp	r3, #1
 8008252:	d107      	bne.n	8008264 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800825c:	f043 0304 	orr.w	r3, r3, #4
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008264:	7dfb      	ldrb	r3, [r7, #23]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008270:	b004      	add	sp, #16
 8008272:	4770      	bx	lr
 8008274:	803c3800 	.word	0x803c3800

08008278 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	019b      	lsls	r3, r3, #6
 800828a:	f043 0220 	orr.w	r2, r3, #32
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3301      	adds	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	4a08      	ldr	r2, [pc, #32]	; (80082bc <USB_FlushTxFifo+0x44>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d901      	bls.n	80082a2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e006      	b.n	80082b0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f003 0320 	and.w	r3, r3, #32
 80082aa:	2b20      	cmp	r3, #32
 80082ac:	d0f1      	beq.n	8008292 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	00030d40 	.word	0x00030d40

080082c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2210      	movs	r2, #16
 80082d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	3301      	adds	r3, #1
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	4a08      	ldr	r2, [pc, #32]	; (80082fc <USB_FlushRxFifo+0x3c>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d901      	bls.n	80082e2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e006      	b.n	80082f0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	f003 0310 	and.w	r3, r3, #16
 80082ea:	2b10      	cmp	r3, #16
 80082ec:	d0f1      	beq.n	80082d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	00030d40 	.word	0x00030d40

08008300 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	68f9      	ldr	r1, [r7, #12]
 800831c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008320:	4313      	orrs	r3, r2
 8008322:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008332:	b480      	push	{r7}
 8008334:	b087      	sub	sp, #28
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f003 0306 	and.w	r3, r3, #6
 800834a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d102      	bne.n	8008358 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008352:	2300      	movs	r3, #0
 8008354:	75fb      	strb	r3, [r7, #23]
 8008356:	e00a      	b.n	800836e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b02      	cmp	r3, #2
 800835c:	d002      	beq.n	8008364 <USB_GetDevSpeed+0x32>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2b06      	cmp	r3, #6
 8008362:	d102      	bne.n	800836a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008364:	2302      	movs	r3, #2
 8008366:	75fb      	strb	r3, [r7, #23]
 8008368:	e001      	b.n	800836e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800836a:	230f      	movs	r3, #15
 800836c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800836e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008370:	4618      	mov	r0, r3
 8008372:	371c      	adds	r7, #28
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d13a      	bne.n	800840e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839e:	69da      	ldr	r2, [r3, #28]
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	f003 030f 	and.w	r3, r3, #15
 80083a8:	2101      	movs	r1, #1
 80083aa:	fa01 f303 	lsl.w	r3, r1, r3
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	68f9      	ldr	r1, [r7, #12]
 80083b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083b6:	4313      	orrs	r3, r2
 80083b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d155      	bne.n	800847c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	78db      	ldrb	r3, [r3, #3]
 80083ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	059b      	lsls	r3, r3, #22
 80083f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083f4:	4313      	orrs	r3, r2
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	0151      	lsls	r1, r2, #5
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	440a      	add	r2, r1
 80083fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	e036      	b.n	800847c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008414:	69da      	ldr	r2, [r3, #28]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	f003 030f 	and.w	r3, r3, #15
 800841e:	2101      	movs	r1, #1
 8008420:	fa01 f303 	lsl.w	r3, r1, r3
 8008424:	041b      	lsls	r3, r3, #16
 8008426:	68f9      	ldr	r1, [r7, #12]
 8008428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800842c:	4313      	orrs	r3, r2
 800842e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d11a      	bne.n	800847c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	4413      	add	r3, r2
 800844e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	78db      	ldrb	r3, [r3, #3]
 8008460:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008462:	430b      	orrs	r3, r1
 8008464:	4313      	orrs	r3, r2
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	0151      	lsls	r1, r2, #5
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	440a      	add	r2, r1
 800846e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800847a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
	...

0800848c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	785b      	ldrb	r3, [r3, #1]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d161      	bne.n	800856c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084be:	d11f      	bne.n	8008500 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	0151      	lsls	r1, r2, #5
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	440a      	add	r2, r1
 80084d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80084de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	0151      	lsls	r1, r2, #5
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	440a      	add	r2, r1
 80084f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	f003 030f 	and.w	r3, r3, #15
 8008510:	2101      	movs	r1, #1
 8008512:	fa01 f303 	lsl.w	r3, r1, r3
 8008516:	b29b      	uxth	r3, r3
 8008518:	43db      	mvns	r3, r3
 800851a:	68f9      	ldr	r1, [r7, #12]
 800851c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008520:	4013      	ands	r3, r2
 8008522:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800852a:	69da      	ldr	r2, [r3, #28]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	f003 030f 	and.w	r3, r3, #15
 8008534:	2101      	movs	r1, #1
 8008536:	fa01 f303 	lsl.w	r3, r1, r3
 800853a:	b29b      	uxth	r3, r3
 800853c:	43db      	mvns	r3, r3
 800853e:	68f9      	ldr	r1, [r7, #12]
 8008540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008544:	4013      	ands	r3, r2
 8008546:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	0159      	lsls	r1, r3, #5
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	440b      	add	r3, r1
 800855e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008562:	4619      	mov	r1, r3
 8008564:	4b35      	ldr	r3, [pc, #212]	; (800863c <USB_DeactivateEndpoint+0x1b0>)
 8008566:	4013      	ands	r3, r2
 8008568:	600b      	str	r3, [r1, #0]
 800856a:	e060      	b.n	800862e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800857e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008582:	d11f      	bne.n	80085c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	0151      	lsls	r1, r2, #5
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	440a      	add	r2, r1
 800859a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800859e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	0151      	lsls	r1, r2, #5
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	440a      	add	r2, r1
 80085ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	2101      	movs	r1, #1
 80085d6:	fa01 f303 	lsl.w	r3, r1, r3
 80085da:	041b      	lsls	r3, r3, #16
 80085dc:	43db      	mvns	r3, r3
 80085de:	68f9      	ldr	r1, [r7, #12]
 80085e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085e4:	4013      	ands	r3, r2
 80085e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ee:	69da      	ldr	r2, [r3, #28]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	f003 030f 	and.w	r3, r3, #15
 80085f8:	2101      	movs	r1, #1
 80085fa:	fa01 f303 	lsl.w	r3, r1, r3
 80085fe:	041b      	lsls	r3, r3, #16
 8008600:	43db      	mvns	r3, r3
 8008602:	68f9      	ldr	r1, [r7, #12]
 8008604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008608:	4013      	ands	r3, r2
 800860a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	0159      	lsls	r1, r3, #5
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	440b      	add	r3, r1
 8008622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008626:	4619      	mov	r1, r3
 8008628:	4b05      	ldr	r3, [pc, #20]	; (8008640 <USB_DeactivateEndpoint+0x1b4>)
 800862a:	4013      	ands	r3, r2
 800862c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	ec337800 	.word	0xec337800
 8008640:	eff37800 	.word	0xeff37800

08008644 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b08a      	sub	sp, #40	; 0x28
 8008648:	af02      	add	r7, sp, #8
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	4613      	mov	r3, r2
 8008650:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	785b      	ldrb	r3, [r3, #1]
 8008660:	2b01      	cmp	r3, #1
 8008662:	f040 815c 	bne.w	800891e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d132      	bne.n	80086d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	4413      	add	r3, r2
 8008676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	0151      	lsls	r1, r2, #5
 8008680:	69fa      	ldr	r2, [r7, #28]
 8008682:	440a      	add	r2, r1
 8008684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008688:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800868c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008690:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	4413      	add	r3, r2
 800869a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	0151      	lsls	r1, r2, #5
 80086a4:	69fa      	ldr	r2, [r7, #28]
 80086a6:	440a      	add	r2, r1
 80086a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	69ba      	ldr	r2, [r7, #24]
 80086c2:	0151      	lsls	r1, r2, #5
 80086c4:	69fa      	ldr	r2, [r7, #28]
 80086c6:	440a      	add	r2, r1
 80086c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086cc:	0cdb      	lsrs	r3, r3, #19
 80086ce:	04db      	lsls	r3, r3, #19
 80086d0:	6113      	str	r3, [r2, #16]
 80086d2:	e074      	b.n	80087be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	69ba      	ldr	r2, [r7, #24]
 80086e4:	0151      	lsls	r1, r2, #5
 80086e6:	69fa      	ldr	r2, [r7, #28]
 80086e8:	440a      	add	r2, r1
 80086ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ee:	0cdb      	lsrs	r3, r3, #19
 80086f0:	04db      	lsls	r3, r3, #19
 80086f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	69ba      	ldr	r2, [r7, #24]
 8008704:	0151      	lsls	r1, r2, #5
 8008706:	69fa      	ldr	r2, [r7, #28]
 8008708:	440a      	add	r2, r1
 800870a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800870e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008712:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008716:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	4413      	add	r3, r2
 8008720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008724:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	6959      	ldr	r1, [r3, #20]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	440b      	add	r3, r1
 8008730:	1e59      	subs	r1, r3, #1
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	fbb1 f3f3 	udiv	r3, r1, r3
 800873a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800873c:	4b9d      	ldr	r3, [pc, #628]	; (80089b4 <USB_EPStartXfer+0x370>)
 800873e:	400b      	ands	r3, r1
 8008740:	69b9      	ldr	r1, [r7, #24]
 8008742:	0148      	lsls	r0, r1, #5
 8008744:	69f9      	ldr	r1, [r7, #28]
 8008746:	4401      	add	r1, r0
 8008748:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800874c:	4313      	orrs	r3, r2
 800874e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875c:	691a      	ldr	r2, [r3, #16]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008766:	69b9      	ldr	r1, [r7, #24]
 8008768:	0148      	lsls	r0, r1, #5
 800876a:	69f9      	ldr	r1, [r7, #28]
 800876c:	4401      	add	r1, r0
 800876e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008772:	4313      	orrs	r3, r2
 8008774:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	78db      	ldrb	r3, [r3, #3]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d11f      	bne.n	80087be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	4413      	add	r3, r2
 8008786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	0151      	lsls	r1, r2, #5
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	440a      	add	r2, r1
 8008794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008798:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800879c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	015a      	lsls	r2, r3, #5
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	69ba      	ldr	r2, [r7, #24]
 80087ae:	0151      	lsls	r1, r2, #5
 80087b0:	69fa      	ldr	r2, [r7, #28]
 80087b2:	440a      	add	r2, r1
 80087b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d14b      	bne.n	800885c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d009      	beq.n	80087e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d8:	461a      	mov	r2, r3
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	78db      	ldrb	r3, [r3, #3]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d128      	bne.n	800883a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d110      	bne.n	800881a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	0151      	lsls	r1, r2, #5
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	440a      	add	r2, r1
 800880e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008812:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	e00f      	b.n	800883a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	0151      	lsls	r1, r2, #5
 800882c:	69fa      	ldr	r2, [r7, #28]
 800882e:	440a      	add	r2, r1
 8008830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008838:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	4413      	add	r3, r2
 8008842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	0151      	lsls	r1, r2, #5
 800884c:	69fa      	ldr	r2, [r7, #28]
 800884e:	440a      	add	r2, r1
 8008850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008854:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008858:	6013      	str	r3, [r2, #0]
 800885a:	e12f      	b.n	8008abc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69ba      	ldr	r2, [r7, #24]
 800886c:	0151      	lsls	r1, r2, #5
 800886e:	69fa      	ldr	r2, [r7, #28]
 8008870:	440a      	add	r2, r1
 8008872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008876:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800887a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	78db      	ldrb	r3, [r3, #3]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d015      	beq.n	80088b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 8117 	beq.w	8008abc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	f003 030f 	and.w	r3, r3, #15
 800889e:	2101      	movs	r1, #1
 80088a0:	fa01 f303 	lsl.w	r3, r1, r3
 80088a4:	69f9      	ldr	r1, [r7, #28]
 80088a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088aa:	4313      	orrs	r3, r2
 80088ac:	634b      	str	r3, [r1, #52]	; 0x34
 80088ae:	e105      	b.n	8008abc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d110      	bne.n	80088e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	69ba      	ldr	r2, [r7, #24]
 80088d0:	0151      	lsls	r1, r2, #5
 80088d2:	69fa      	ldr	r2, [r7, #28]
 80088d4:	440a      	add	r2, r1
 80088d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	e00f      	b.n	8008902 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	69ba      	ldr	r2, [r7, #24]
 80088f2:	0151      	lsls	r1, r2, #5
 80088f4:	69fa      	ldr	r2, [r7, #28]
 80088f6:	440a      	add	r2, r1
 80088f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008900:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	68d9      	ldr	r1, [r3, #12]
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	781a      	ldrb	r2, [r3, #0]
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	b298      	uxth	r0, r3
 8008910:	79fb      	ldrb	r3, [r7, #7]
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	4603      	mov	r3, r0
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 fa2b 	bl	8008d72 <USB_WritePacket>
 800891c:	e0ce      	b.n	8008abc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	4413      	add	r3, r2
 8008926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	0151      	lsls	r1, r2, #5
 8008930:	69fa      	ldr	r2, [r7, #28]
 8008932:	440a      	add	r2, r1
 8008934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008938:	0cdb      	lsrs	r3, r3, #19
 800893a:	04db      	lsls	r3, r3, #19
 800893c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	4413      	add	r3, r2
 8008946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	0151      	lsls	r1, r2, #5
 8008950:	69fa      	ldr	r2, [r7, #28]
 8008952:	440a      	add	r2, r1
 8008954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008958:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800895c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008960:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d126      	bne.n	80089b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	4413      	add	r3, r2
 8008972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008976:	691a      	ldr	r2, [r3, #16]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008980:	69b9      	ldr	r1, [r7, #24]
 8008982:	0148      	lsls	r0, r1, #5
 8008984:	69f9      	ldr	r1, [r7, #28]
 8008986:	4401      	add	r1, r0
 8008988:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800898c:	4313      	orrs	r3, r2
 800898e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	4413      	add	r3, r2
 8008998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	0151      	lsls	r1, r2, #5
 80089a2:	69fa      	ldr	r2, [r7, #28]
 80089a4:	440a      	add	r2, r1
 80089a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089ae:	6113      	str	r3, [r2, #16]
 80089b0:	e036      	b.n	8008a20 <USB_EPStartXfer+0x3dc>
 80089b2:	bf00      	nop
 80089b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	695a      	ldr	r2, [r3, #20]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	4413      	add	r3, r2
 80089c2:	1e5a      	subs	r2, r3, #1
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089cc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089da:	691a      	ldr	r2, [r3, #16]
 80089dc:	8afb      	ldrh	r3, [r7, #22]
 80089de:	04d9      	lsls	r1, r3, #19
 80089e0:	4b39      	ldr	r3, [pc, #228]	; (8008ac8 <USB_EPStartXfer+0x484>)
 80089e2:	400b      	ands	r3, r1
 80089e4:	69b9      	ldr	r1, [r7, #24]
 80089e6:	0148      	lsls	r0, r1, #5
 80089e8:	69f9      	ldr	r1, [r7, #28]
 80089ea:	4401      	add	r1, r0
 80089ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089f0:	4313      	orrs	r3, r2
 80089f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a00:	691a      	ldr	r2, [r3, #16]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	8af9      	ldrh	r1, [r7, #22]
 8008a08:	fb01 f303 	mul.w	r3, r1, r3
 8008a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a10:	69b9      	ldr	r1, [r7, #24]
 8008a12:	0148      	lsls	r0, r1, #5
 8008a14:	69f9      	ldr	r1, [r7, #28]
 8008a16:	4401      	add	r1, r0
 8008a18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a20:	79fb      	ldrb	r3, [r7, #7]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d10d      	bne.n	8008a42 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d009      	beq.n	8008a42 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	68d9      	ldr	r1, [r3, #12]
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	015a      	lsls	r2, r3, #5
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	4413      	add	r3, r2
 8008a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a3e:	460a      	mov	r2, r1
 8008a40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	78db      	ldrb	r3, [r3, #3]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d128      	bne.n	8008a9c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d110      	bne.n	8008a7c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	0151      	lsls	r1, r2, #5
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	440a      	add	r2, r1
 8008a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	e00f      	b.n	8008a9c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	0151      	lsls	r1, r2, #5
 8008a8e:	69fa      	ldr	r2, [r7, #28]
 8008a90:	440a      	add	r2, r1
 8008a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	0151      	lsls	r1, r2, #5
 8008aae:	69fa      	ldr	r2, [r7, #28]
 8008ab0:	440a      	add	r2, r1
 8008ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ab6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008aba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3720      	adds	r7, #32
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	1ff80000 	.word	0x1ff80000

08008acc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	785b      	ldrb	r3, [r3, #1]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	f040 80cd 	bne.w	8008c88 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d132      	bne.n	8008b5c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	015a      	lsls	r2, r3, #5
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	0151      	lsls	r1, r2, #5
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	440a      	add	r2, r1
 8008b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	0151      	lsls	r1, r2, #5
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	440a      	add	r2, r1
 8008b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	0151      	lsls	r1, r2, #5
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	440a      	add	r2, r1
 8008b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b54:	0cdb      	lsrs	r3, r3, #19
 8008b56:	04db      	lsls	r3, r3, #19
 8008b58:	6113      	str	r3, [r2, #16]
 8008b5a:	e04e      	b.n	8008bfa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	015a      	lsls	r2, r3, #5
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	4413      	add	r3, r2
 8008b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	0151      	lsls	r1, r2, #5
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	440a      	add	r2, r1
 8008b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b76:	0cdb      	lsrs	r3, r3, #19
 8008b78:	04db      	lsls	r3, r3, #19
 8008b7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	0151      	lsls	r1, r2, #5
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	440a      	add	r2, r1
 8008b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b9e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	695a      	ldr	r2, [r3, #20]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d903      	bls.n	8008bb4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	689a      	ldr	r2, [r3, #8]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	0151      	lsls	r1, r2, #5
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	440a      	add	r2, r1
 8008bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	015a      	lsls	r2, r3, #5
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	4413      	add	r3, r2
 8008bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be0:	691a      	ldr	r2, [r3, #16]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bea:	6939      	ldr	r1, [r7, #16]
 8008bec:	0148      	lsls	r0, r1, #5
 8008bee:	6979      	ldr	r1, [r7, #20]
 8008bf0:	4401      	add	r1, r0
 8008bf2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d11e      	bne.n	8008c3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d009      	beq.n	8008c1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c14:	461a      	mov	r2, r3
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	0151      	lsls	r1, r2, #5
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	440a      	add	r2, r1
 8008c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	e092      	b.n	8008d64 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	0151      	lsls	r1, r2, #5
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	440a      	add	r2, r1
 8008c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d07e      	beq.n	8008d64 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	f003 030f 	and.w	r3, r3, #15
 8008c76:	2101      	movs	r1, #1
 8008c78:	fa01 f303 	lsl.w	r3, r1, r3
 8008c7c:	6979      	ldr	r1, [r7, #20]
 8008c7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c82:	4313      	orrs	r3, r2
 8008c84:	634b      	str	r3, [r1, #52]	; 0x34
 8008c86:	e06d      	b.n	8008d64 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	015a      	lsls	r2, r3, #5
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	0151      	lsls	r1, r2, #5
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	440a      	add	r2, r1
 8008c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ca2:	0cdb      	lsrs	r3, r3, #19
 8008ca4:	04db      	lsls	r3, r3, #19
 8008ca6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	0151      	lsls	r1, r2, #5
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	440a      	add	r2, r1
 8008cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008cc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008cca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d003      	beq.n	8008cdc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	0151      	lsls	r1, r2, #5
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	440a      	add	r2, r1
 8008cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cfa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d08:	691a      	ldr	r2, [r3, #16]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d12:	6939      	ldr	r1, [r7, #16]
 8008d14:	0148      	lsls	r0, r1, #5
 8008d16:	6979      	ldr	r1, [r7, #20]
 8008d18:	4401      	add	r1, r0
 8008d1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d10d      	bne.n	8008d44 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d009      	beq.n	8008d44 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	68d9      	ldr	r1, [r3, #12]
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d40:	460a      	mov	r2, r1
 8008d42:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	0151      	lsls	r1, r2, #5
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	440a      	add	r2, r1
 8008d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b089      	sub	sp, #36	; 0x24
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	60f8      	str	r0, [r7, #12]
 8008d7a:	60b9      	str	r1, [r7, #8]
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	461a      	mov	r2, r3
 8008d80:	460b      	mov	r3, r1
 8008d82:	71fb      	strb	r3, [r7, #7]
 8008d84:	4613      	mov	r3, r2
 8008d86:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008d90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d123      	bne.n	8008de0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d98:	88bb      	ldrh	r3, [r7, #4]
 8008d9a:	3303      	adds	r3, #3
 8008d9c:	089b      	lsrs	r3, r3, #2
 8008d9e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008da0:	2300      	movs	r3, #0
 8008da2:	61bb      	str	r3, [r7, #24]
 8008da4:	e018      	b.n	8008dd8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	031a      	lsls	r2, r3, #12
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	4413      	add	r3, r2
 8008dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db2:	461a      	mov	r2, r3
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	61bb      	str	r3, [r7, #24]
 8008dd8:	69ba      	ldr	r2, [r7, #24]
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d3e2      	bcc.n	8008da6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3724      	adds	r7, #36	; 0x24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b08b      	sub	sp, #44	; 0x2c
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	60b9      	str	r1, [r7, #8]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e04:	88fb      	ldrh	r3, [r7, #6]
 8008e06:	089b      	lsrs	r3, r3, #2
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e0c:	88fb      	ldrh	r3, [r7, #6]
 8008e0e:	f003 0303 	and.w	r3, r3, #3
 8008e12:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e14:	2300      	movs	r3, #0
 8008e16:	623b      	str	r3, [r7, #32]
 8008e18:	e014      	b.n	8008e44 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e28:	3301      	adds	r3, #1
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	3301      	adds	r3, #1
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	3301      	adds	r3, #1
 8008e36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	3301      	adds	r3, #1
 8008e42:	623b      	str	r3, [r7, #32]
 8008e44:	6a3a      	ldr	r2, [r7, #32]
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d3e6      	bcc.n	8008e1a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e4c:	8bfb      	ldrh	r3, [r7, #30]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d01e      	beq.n	8008e90 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f107 0310 	add.w	r3, r7, #16
 8008e62:	6812      	ldr	r2, [r2, #0]
 8008e64:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	00db      	lsls	r3, r3, #3
 8008e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	701a      	strb	r2, [r3, #0]
      i++;
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	3301      	adds	r3, #1
 8008e82:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008e84:	8bfb      	ldrh	r3, [r7, #30]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008e8a:	8bfb      	ldrh	r3, [r7, #30]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1ea      	bne.n	8008e66 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	372c      	adds	r7, #44	; 0x2c
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr

08008e9e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b085      	sub	sp, #20
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	785b      	ldrb	r3, [r3, #1]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d12c      	bne.n	8008f14 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	015a      	lsls	r2, r3, #5
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	db12      	blt.n	8008ef2 <USB_EPSetStall+0x54>
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00f      	beq.n	8008ef2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	015a      	lsls	r2, r3, #5
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	4413      	add	r3, r2
 8008eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	0151      	lsls	r1, r2, #5
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	440a      	add	r2, r1
 8008ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ef0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	015a      	lsls	r2, r3, #5
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	0151      	lsls	r1, r2, #5
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	440a      	add	r2, r1
 8008f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f10:	6013      	str	r3, [r2, #0]
 8008f12:	e02b      	b.n	8008f6c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	db12      	blt.n	8008f4c <USB_EPSetStall+0xae>
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00f      	beq.n	8008f4c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	0151      	lsls	r1, r2, #5
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	440a      	add	r2, r1
 8008f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f4a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	0151      	lsls	r1, r2, #5
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	440a      	add	r2, r1
 8008f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b085      	sub	sp, #20
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	785b      	ldrb	r3, [r3, #1]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d128      	bne.n	8008fe8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	0151      	lsls	r1, r2, #5
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	440a      	add	r2, r1
 8008fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	78db      	ldrb	r3, [r3, #3]
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d003      	beq.n	8008fc6 <USB_EPClearStall+0x4c>
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	78db      	ldrb	r3, [r3, #3]
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d138      	bne.n	8009038 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	015a      	lsls	r2, r3, #5
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	4413      	add	r3, r2
 8008fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	0151      	lsls	r1, r2, #5
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	440a      	add	r2, r1
 8008fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fe4:	6013      	str	r3, [r2, #0]
 8008fe6:	e027      	b.n	8009038 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	0151      	lsls	r1, r2, #5
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	440a      	add	r2, r1
 8008ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009002:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009006:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	78db      	ldrb	r3, [r3, #3]
 800900c:	2b03      	cmp	r3, #3
 800900e:	d003      	beq.n	8009018 <USB_EPClearStall+0x9e>
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	78db      	ldrb	r3, [r3, #3]
 8009014:	2b02      	cmp	r3, #2
 8009016:	d10f      	bne.n	8009038 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	440a      	add	r2, r1
 800902e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009036:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009046:	b480      	push	{r7}
 8009048:	b085      	sub	sp, #20
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	460b      	mov	r3, r1
 8009050:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009064:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009068:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	78fb      	ldrb	r3, [r7, #3]
 8009074:	011b      	lsls	r3, r3, #4
 8009076:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800907a:	68f9      	ldr	r1, [r7, #12]
 800907c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009080:	4313      	orrs	r3, r2
 8009082:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009092:	b480      	push	{r7}
 8009094:	b085      	sub	sp, #20
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090ac:	f023 0303 	bic.w	r3, r3, #3
 80090b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090c0:	f023 0302 	bic.w	r3, r3, #2
 80090c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090ee:	f023 0303 	bic.w	r3, r3, #3
 80090f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009102:	f043 0302 	orr.w	r3, r3, #2
 8009106:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	4013      	ands	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800912e:	68fb      	ldr	r3, [r7, #12]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800914e:	699b      	ldr	r3, [r3, #24]
 8009150:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	4013      	ands	r3, r2
 800915e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	0c1b      	lsrs	r3, r3, #16
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	4013      	ands	r3, r2
 8009192:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	b29b      	uxth	r3, r3
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	460b      	mov	r3, r1
 80091ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80091b4:	78fb      	ldrb	r3, [r7, #3]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	4013      	ands	r3, r2
 80091d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091d2:	68bb      	ldr	r3, [r7, #8]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3714      	adds	r7, #20
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b087      	sub	sp, #28
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	460b      	mov	r3, r1
 80091ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009202:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	f003 030f 	and.w	r3, r3, #15
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	fa22 f303 	lsr.w	r3, r2, r3
 8009210:	01db      	lsls	r3, r3, #7
 8009212:	b2db      	uxtb	r3, r3
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	4313      	orrs	r3, r2
 8009218:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800921a:	78fb      	ldrb	r3, [r7, #3]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	4413      	add	r3, r2
 8009222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	4013      	ands	r3, r2
 800922c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800922e:	68bb      	ldr	r3, [r7, #8]
}
 8009230:	4618      	mov	r0, r3
 8009232:	371c      	adds	r7, #28
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	f003 0301 	and.w	r3, r3, #1
}
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009272:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009276:	f023 0307 	bic.w	r3, r3, #7
 800927a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800928a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800928e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
	...

080092a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b087      	sub	sp, #28
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	460b      	mov	r3, r1
 80092aa:	607a      	str	r2, [r7, #4]
 80092ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	333c      	adds	r3, #60	; 0x3c
 80092b6:	3304      	adds	r3, #4
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	4a26      	ldr	r2, [pc, #152]	; (8009358 <USB_EP0_OutStart+0xb8>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d90a      	bls.n	80092da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092d4:	d101      	bne.n	80092da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	e037      	b.n	800934a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e0:	461a      	mov	r2, r3
 80092e2:	2300      	movs	r3, #0
 80092e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009308:	f043 0318 	orr.w	r3, r3, #24
 800930c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800931c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009320:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009322:	7afb      	ldrb	r3, [r7, #11]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d10f      	bne.n	8009348 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932e:	461a      	mov	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	697a      	ldr	r2, [r7, #20]
 800933e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009342:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009346:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	371c      	adds	r7, #28
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	4f54300a 	.word	0x4f54300a

0800935c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009364:	2300      	movs	r3, #0
 8009366:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	3301      	adds	r3, #1
 800936c:	60fb      	str	r3, [r7, #12]
 800936e:	4a13      	ldr	r2, [pc, #76]	; (80093bc <USB_CoreReset+0x60>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d901      	bls.n	8009378 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e01a      	b.n	80093ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	2b00      	cmp	r3, #0
 800937e:	daf3      	bge.n	8009368 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009380:	2300      	movs	r3, #0
 8009382:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	f043 0201 	orr.w	r2, r3, #1
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	3301      	adds	r3, #1
 8009394:	60fb      	str	r3, [r7, #12]
 8009396:	4a09      	ldr	r2, [pc, #36]	; (80093bc <USB_CoreReset+0x60>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d901      	bls.n	80093a0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	e006      	b.n	80093ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d0f1      	beq.n	8009390 <USB_CoreReset+0x34>

  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	00030d40 	.word	0x00030d40

080093c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80093cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80093d0:	f002 f960 	bl	800b694 <USBD_static_malloc>
 80093d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d105      	bne.n	80093e8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80093e4:	2302      	movs	r3, #2
 80093e6:	e066      	b.n	80094b6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	7c1b      	ldrb	r3, [r3, #16]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d119      	bne.n	800942c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80093f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093fc:	2202      	movs	r2, #2
 80093fe:	2181      	movs	r1, #129	; 0x81
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f002 f824 	bl	800b44e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800940c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009410:	2202      	movs	r2, #2
 8009412:	2101      	movs	r1, #1
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f002 f81a 	bl	800b44e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2210      	movs	r2, #16
 8009426:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800942a:	e016      	b.n	800945a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800942c:	2340      	movs	r3, #64	; 0x40
 800942e:	2202      	movs	r2, #2
 8009430:	2181      	movs	r1, #129	; 0x81
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f002 f80b 	bl	800b44e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800943e:	2340      	movs	r3, #64	; 0x40
 8009440:	2202      	movs	r2, #2
 8009442:	2101      	movs	r1, #1
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f002 f802 	bl	800b44e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2210      	movs	r2, #16
 8009456:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800945a:	2308      	movs	r3, #8
 800945c:	2203      	movs	r2, #3
 800945e:	2182      	movs	r1, #130	; 0x82
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f001 fff4 	bl	800b44e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	7c1b      	ldrb	r3, [r3, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d109      	bne.n	80094a4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800949a:	2101      	movs	r1, #1
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f002 f8c5 	bl	800b62c <USBD_LL_PrepareReceive>
 80094a2:	e007      	b.n	80094b4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094aa:	2340      	movs	r3, #64	; 0x40
 80094ac:	2101      	movs	r1, #1
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f002 f8bc 	bl	800b62c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b082      	sub	sp, #8
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	460b      	mov	r3, r1
 80094c8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80094ca:	2181      	movs	r1, #129	; 0x81
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f001 ffe4 	bl	800b49a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80094d8:	2101      	movs	r1, #1
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 ffdd 	bl	800b49a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80094e8:	2182      	movs	r1, #130	; 0x82
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f001 ffd5 	bl	800b49a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00e      	beq.n	8009528 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800951a:	4618      	mov	r0, r3
 800951c:	f002 f8c8 	bl	800b6b0 <USBD_static_free>
    pdev->pClassData = NULL;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009544:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800954a:	2300      	movs	r3, #0
 800954c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d101      	bne.n	800955c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009558:	2303      	movs	r3, #3
 800955a:	e0af      	b.n	80096bc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009564:	2b00      	cmp	r3, #0
 8009566:	d03f      	beq.n	80095e8 <USBD_CDC_Setup+0xb4>
 8009568:	2b20      	cmp	r3, #32
 800956a:	f040 809f 	bne.w	80096ac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	88db      	ldrh	r3, [r3, #6]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d02e      	beq.n	80095d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	b25b      	sxtb	r3, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	da16      	bge.n	80095ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800958c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	88d2      	ldrh	r2, [r2, #6]
 8009592:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	88db      	ldrh	r3, [r3, #6]
 8009598:	2b07      	cmp	r3, #7
 800959a:	bf28      	it	cs
 800959c:	2307      	movcs	r3, #7
 800959e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	89fa      	ldrh	r2, [r7, #14]
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f001 fb19 	bl	800abde <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80095ac:	e085      	b.n	80096ba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	785a      	ldrb	r2, [r3, #1]
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	88db      	ldrh	r3, [r3, #6]
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80095c4:	6939      	ldr	r1, [r7, #16]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	88db      	ldrh	r3, [r3, #6]
 80095ca:	461a      	mov	r2, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 fb32 	bl	800ac36 <USBD_CtlPrepareRx>
      break;
 80095d2:	e072      	b.n	80096ba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	683a      	ldr	r2, [r7, #0]
 80095de:	7850      	ldrb	r0, [r2, #1]
 80095e0:	2200      	movs	r2, #0
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	4798      	blx	r3
      break;
 80095e6:	e068      	b.n	80096ba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	785b      	ldrb	r3, [r3, #1]
 80095ec:	2b0b      	cmp	r3, #11
 80095ee:	d852      	bhi.n	8009696 <USBD_CDC_Setup+0x162>
 80095f0:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <USBD_CDC_Setup+0xc4>)
 80095f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f6:	bf00      	nop
 80095f8:	08009629 	.word	0x08009629
 80095fc:	080096a5 	.word	0x080096a5
 8009600:	08009697 	.word	0x08009697
 8009604:	08009697 	.word	0x08009697
 8009608:	08009697 	.word	0x08009697
 800960c:	08009697 	.word	0x08009697
 8009610:	08009697 	.word	0x08009697
 8009614:	08009697 	.word	0x08009697
 8009618:	08009697 	.word	0x08009697
 800961c:	08009697 	.word	0x08009697
 8009620:	08009653 	.word	0x08009653
 8009624:	0800967d 	.word	0x0800967d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b03      	cmp	r3, #3
 8009632:	d107      	bne.n	8009644 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009634:	f107 030a 	add.w	r3, r7, #10
 8009638:	2202      	movs	r2, #2
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 face 	bl	800abde <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009642:	e032      	b.n	80096aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f001 fa58 	bl	800aafc <USBD_CtlError>
            ret = USBD_FAIL;
 800964c:	2303      	movs	r3, #3
 800964e:	75fb      	strb	r3, [r7, #23]
          break;
 8009650:	e02b      	b.n	80096aa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b03      	cmp	r3, #3
 800965c:	d107      	bne.n	800966e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800965e:	f107 030d 	add.w	r3, r7, #13
 8009662:	2201      	movs	r2, #1
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f001 fab9 	bl	800abde <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800966c:	e01d      	b.n	80096aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f001 fa43 	bl	800aafc <USBD_CtlError>
            ret = USBD_FAIL;
 8009676:	2303      	movs	r3, #3
 8009678:	75fb      	strb	r3, [r7, #23]
          break;
 800967a:	e016      	b.n	80096aa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b03      	cmp	r3, #3
 8009686:	d00f      	beq.n	80096a8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f001 fa36 	bl	800aafc <USBD_CtlError>
            ret = USBD_FAIL;
 8009690:	2303      	movs	r3, #3
 8009692:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009694:	e008      	b.n	80096a8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f001 fa2f 	bl	800aafc <USBD_CtlError>
          ret = USBD_FAIL;
 800969e:	2303      	movs	r3, #3
 80096a0:	75fb      	strb	r3, [r7, #23]
          break;
 80096a2:	e002      	b.n	80096aa <USBD_CDC_Setup+0x176>
          break;
 80096a4:	bf00      	nop
 80096a6:	e008      	b.n	80096ba <USBD_CDC_Setup+0x186>
          break;
 80096a8:	bf00      	nop
      }
      break;
 80096aa:	e006      	b.n	80096ba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 fa24 	bl	800aafc <USBD_CtlError>
      ret = USBD_FAIL;
 80096b4:	2303      	movs	r3, #3
 80096b6:	75fb      	strb	r3, [r7, #23]
      break;
 80096b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3718      	adds	r7, #24
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	460b      	mov	r3, r1
 80096ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80096e2:	2303      	movs	r3, #3
 80096e4:	e04f      	b.n	8009786 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80096ee:	78fa      	ldrb	r2, [r7, #3]
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	4613      	mov	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	440b      	add	r3, r1
 80096fc:	3318      	adds	r3, #24
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d029      	beq.n	8009758 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009704:	78fa      	ldrb	r2, [r7, #3]
 8009706:	6879      	ldr	r1, [r7, #4]
 8009708:	4613      	mov	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4413      	add	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	440b      	add	r3, r1
 8009712:	3318      	adds	r3, #24
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	78f9      	ldrb	r1, [r7, #3]
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	460b      	mov	r3, r1
 800971c:	00db      	lsls	r3, r3, #3
 800971e:	1a5b      	subs	r3, r3, r1
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4403      	add	r3, r0
 8009724:	3344      	adds	r3, #68	; 0x44
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	fbb2 f1f3 	udiv	r1, r2, r3
 800972c:	fb03 f301 	mul.w	r3, r3, r1
 8009730:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009732:	2b00      	cmp	r3, #0
 8009734:	d110      	bne.n	8009758 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009736:	78fa      	ldrb	r2, [r7, #3]
 8009738:	6879      	ldr	r1, [r7, #4]
 800973a:	4613      	mov	r3, r2
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	440b      	add	r3, r1
 8009744:	3318      	adds	r3, #24
 8009746:	2200      	movs	r2, #0
 8009748:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800974a:	78f9      	ldrb	r1, [r7, #3]
 800974c:	2300      	movs	r3, #0
 800974e:	2200      	movs	r2, #0
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 ff4a 	bl	800b5ea <USBD_LL_Transmit>
 8009756:	e015      	b.n	8009784 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	2200      	movs	r2, #0
 800975c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00b      	beq.n	8009784 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009780:	78fa      	ldrb	r2, [r7, #3]
 8009782:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b084      	sub	sp, #16
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	460b      	mov	r3, r1
 8009798:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d101      	bne.n	80097b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e015      	b.n	80097dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f001 ff5a 	bl	800b66e <USBD_LL_GetRxDataSize>
 80097ba:	4602      	mov	r2, r0
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80097d6:	4611      	mov	r1, r2
 80097d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80097fa:	2303      	movs	r3, #3
 80097fc:	e01b      	b.n	8009836 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d015      	beq.n	8009834 <USBD_CDC_EP0_RxReady+0x50>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800980e:	2bff      	cmp	r3, #255	; 0xff
 8009810:	d010      	beq.n	8009834 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009820:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009828:	b292      	uxth	r2, r2
 800982a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	22ff      	movs	r2, #255	; 0xff
 8009830:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
	...

08009840 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2243      	movs	r2, #67	; 0x43
 800984c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800984e:	4b03      	ldr	r3, [pc, #12]	; (800985c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009850:	4618      	mov	r0, r3
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	2000009c 	.word	0x2000009c

08009860 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2243      	movs	r2, #67	; 0x43
 800986c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800986e:	4b03      	ldr	r3, [pc, #12]	; (800987c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009870:	4618      	mov	r0, r3
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr
 800987c:	20000058 	.word	0x20000058

08009880 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2243      	movs	r2, #67	; 0x43
 800988c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800988e:	4b03      	ldr	r3, [pc, #12]	; (800989c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009890:	4618      	mov	r0, r3
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	200000e0 	.word	0x200000e0

080098a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	220a      	movs	r2, #10
 80098ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80098ae:	4b03      	ldr	r3, [pc, #12]	; (80098bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr
 80098bc:	20000014 	.word	0x20000014

080098c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e004      	b.n	80098de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b087      	sub	sp, #28
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	60f8      	str	r0, [r7, #12]
 80098f2:	60b9      	str	r1, [r7, #8]
 80098f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009904:	2303      	movs	r3, #3
 8009906:	e008      	b.n	800991a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	371c      	adds	r7, #28
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009926:	b480      	push	{r7}
 8009928:	b085      	sub	sp, #20
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009936:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800993e:	2303      	movs	r3, #3
 8009940:	e004      	b.n	800994c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	683a      	ldr	r2, [r7, #0]
 8009946:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009966:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009968:	2301      	movs	r3, #1
 800996a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009976:	2303      	movs	r3, #3
 8009978:	e01a      	b.n	80099b0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009980:	2b00      	cmp	r3, #0
 8009982:	d114      	bne.n	80099ae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2201      	movs	r2, #1
 8009988:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80099a2:	2181      	movs	r1, #129	; 0x81
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 fe20 	bl	800b5ea <USBD_LL_Transmit>

    ret = USBD_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e016      	b.n	8009a04 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	7c1b      	ldrb	r3, [r3, #16]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d109      	bne.n	80099f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099e8:	2101      	movs	r1, #1
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f001 fe1e 	bl	800b62c <USBD_LL_PrepareReceive>
 80099f0:	e007      	b.n	8009a02 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099f8:	2340      	movs	r3, #64	; 0x40
 80099fa:	2101      	movs	r1, #1
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f001 fe15 	bl	800b62c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b086      	sub	sp, #24
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	4613      	mov	r3, r2
 8009a18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e01f      	b.n	8009a64 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d003      	beq.n	8009a4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	79fa      	ldrb	r2, [r7, #7]
 8009a56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f001 fc91 	bl	800b380 <USBD_LL_Init>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3718      	adds	r7, #24
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a76:	2300      	movs	r3, #0
 8009a78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e016      	b.n	8009ab2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00b      	beq.n	8009ab0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	f107 020e 	add.w	r2, r7, #14
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	4798      	blx	r3
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b082      	sub	sp, #8
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f001 fca8 	bl	800b418 <USBD_LL_Start>
 8009ac8:	4603      	mov	r3, r0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009af4:	2303      	movs	r3, #3
 8009af6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d009      	beq.n	8009b16 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	78fa      	ldrb	r2, [r7, #3]
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	4798      	blx	r3
 8009b12:	4603      	mov	r3, r0
 8009b14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d007      	beq.n	8009b46 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	78fa      	ldrb	r2, [r7, #3]
 8009b40:	4611      	mov	r1, r2
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	4798      	blx	r3
  }

  return USBD_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f000 ff90 	bl	800aa88 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009b76:	461a      	mov	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b84:	f003 031f 	and.w	r3, r3, #31
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d01a      	beq.n	8009bc2 <USBD_LL_SetupStage+0x72>
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d822      	bhi.n	8009bd6 <USBD_LL_SetupStage+0x86>
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <USBD_LL_SetupStage+0x4a>
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d00a      	beq.n	8009bae <USBD_LL_SetupStage+0x5e>
 8009b98:	e01d      	b.n	8009bd6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fa62 	bl	800a06c <USBD_StdDevReq>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	73fb      	strb	r3, [r7, #15]
      break;
 8009bac:	e020      	b.n	8009bf0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fac6 	bl	800a148 <USBD_StdItfReq>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8009bc0:	e016      	b.n	8009bf0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fb05 	bl	800a1da <USBD_StdEPReq>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8009bd4:	e00c      	b.n	8009bf0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009bdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f001 fc77 	bl	800b4d8 <USBD_LL_StallEP>
 8009bea:	4603      	mov	r3, r0
 8009bec:	73fb      	strb	r3, [r7, #15]
      break;
 8009bee:	bf00      	nop
  }

  return ret;
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b086      	sub	sp, #24
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	60f8      	str	r0, [r7, #12]
 8009c02:	460b      	mov	r3, r1
 8009c04:	607a      	str	r2, [r7, #4]
 8009c06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009c08:	7afb      	ldrb	r3, [r7, #11]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d138      	bne.n	8009c80 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009c14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d14a      	bne.n	8009cb6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d913      	bls.n	8009c54 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	689a      	ldr	r2, [r3, #8]
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	1ad2      	subs	r2, r2, r3
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	68da      	ldr	r2, [r3, #12]
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	4293      	cmp	r3, r2
 8009c44:	bf28      	it	cs
 8009c46:	4613      	movcs	r3, r2
 8009c48:	461a      	mov	r2, r3
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f001 f80f 	bl	800ac70 <USBD_CtlContinueRx>
 8009c52:	e030      	b.n	8009cb6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d10b      	bne.n	8009c78 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d005      	beq.n	8009c78 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f001 f80a 	bl	800ac92 <USBD_CtlSendStatus>
 8009c7e:	e01a      	b.n	8009cb6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b03      	cmp	r3, #3
 8009c8a:	d114      	bne.n	8009cb6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00e      	beq.n	8009cb6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	7afa      	ldrb	r2, [r7, #11]
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	4798      	blx	r3
 8009ca8:	4603      	mov	r3, r0
 8009caa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009cac:	7dfb      	ldrb	r3, [r7, #23]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009cb2:	7dfb      	ldrb	r3, [r7, #23]
 8009cb4:	e000      	b.n	8009cb8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	607a      	str	r2, [r7, #4]
 8009ccc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009cce:	7afb      	ldrb	r3, [r7, #11]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d16b      	bne.n	8009dac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	3314      	adds	r3, #20
 8009cd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d156      	bne.n	8009d92 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	689a      	ldr	r2, [r3, #8]
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d914      	bls.n	8009d1a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	689a      	ldr	r2, [r3, #8]
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	1ad2      	subs	r2, r2, r3
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	461a      	mov	r2, r3
 8009d04:	6879      	ldr	r1, [r7, #4]
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f000 ff84 	bl	800ac14 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	2200      	movs	r2, #0
 8009d10:	2100      	movs	r1, #0
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f001 fc8a 	bl	800b62c <USBD_LL_PrepareReceive>
 8009d18:	e03b      	b.n	8009d92 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	68da      	ldr	r2, [r3, #12]
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d11c      	bne.n	8009d60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d316      	bcc.n	8009d60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d20f      	bcs.n	8009d60 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009d40:	2200      	movs	r2, #0
 8009d42:	2100      	movs	r1, #0
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f000 ff65 	bl	800ac14 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d52:	2300      	movs	r3, #0
 8009d54:	2200      	movs	r2, #0
 8009d56:	2100      	movs	r1, #0
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f001 fc67 	bl	800b62c <USBD_LL_PrepareReceive>
 8009d5e:	e018      	b.n	8009d92 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b03      	cmp	r3, #3
 8009d6a:	d10b      	bne.n	8009d84 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d005      	beq.n	8009d84 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d84:	2180      	movs	r1, #128	; 0x80
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	f001 fba6 	bl	800b4d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f000 ff93 	bl	800acb8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d122      	bne.n	8009de2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f7ff fe98 	bl	8009ad2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009daa:	e01a      	b.n	8009de2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2b03      	cmp	r3, #3
 8009db6:	d114      	bne.n	8009de2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00e      	beq.n	8009de2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dca:	695b      	ldr	r3, [r3, #20]
 8009dcc:	7afa      	ldrb	r2, [r7, #11]
 8009dce:	4611      	mov	r1, r2
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	4798      	blx	r3
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009dd8:	7dfb      	ldrb	r3, [r7, #23]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009dde:	7dfb      	ldrb	r3, [r7, #23]
 8009de0:	e000      	b.n	8009de4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3718      	adds	r7, #24
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d101      	bne.n	8009e20 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e02f      	b.n	8009e80 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00f      	beq.n	8009e4a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d009      	beq.n	8009e4a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	6852      	ldr	r2, [r2, #4]
 8009e42:	b2d2      	uxtb	r2, r2
 8009e44:	4611      	mov	r1, r2
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e4a:	2340      	movs	r3, #64	; 0x40
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2100      	movs	r1, #0
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f001 fafc 	bl	800b44e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2240      	movs	r2, #64	; 0x40
 8009e62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e66:	2340      	movs	r3, #64	; 0x40
 8009e68:	2200      	movs	r2, #0
 8009e6a:	2180      	movs	r1, #128	; 0x80
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f001 faee 	bl	800b44e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2240      	movs	r2, #64	; 0x40
 8009e7c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	460b      	mov	r3, r1
 8009e92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	78fa      	ldrb	r2, [r7, #3]
 8009e98:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb6:	b2da      	uxtb	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2204      	movs	r2, #4
 8009ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	d106      	bne.n	8009ef6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d101      	bne.n	8009f1a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e012      	b.n	8009f40 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	d10b      	bne.n	8009f3e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d005      	beq.n	8009f3e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f38:	69db      	ldr	r3, [r3, #28]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	460b      	mov	r3, r1
 8009f52:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	e014      	b.n	8009f8c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b03      	cmp	r3, #3
 8009f6c:	d10d      	bne.n	8009f8a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f74:	6a1b      	ldr	r3, [r3, #32]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d007      	beq.n	8009f8a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f80:	6a1b      	ldr	r3, [r3, #32]
 8009f82:	78fa      	ldrb	r2, [r7, #3]
 8009f84:	4611      	mov	r1, r2
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d101      	bne.n	8009fae <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e014      	b.n	8009fd8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	d10d      	bne.n	8009fd6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d007      	beq.n	8009fd6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	78fa      	ldrb	r2, [r7, #3]
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	370c      	adds	r7, #12
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d009      	beq.n	800a024 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	6852      	ldr	r2, [r2, #4]
 800a01c:	b2d2      	uxtb	r2, r2
 800a01e:	4611      	mov	r1, r2
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	4798      	blx	r3
  }

  return USBD_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a02e:	b480      	push	{r7}
 800a030:	b087      	sub	sp, #28
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	3301      	adds	r3, #1
 800a044:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a04c:	8a3b      	ldrh	r3, [r7, #16]
 800a04e:	021b      	lsls	r3, r3, #8
 800a050:	b21a      	sxth	r2, r3
 800a052:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a056:	4313      	orrs	r3, r2
 800a058:	b21b      	sxth	r3, r3
 800a05a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a05c:	89fb      	ldrh	r3, [r7, #14]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	371c      	adds	r7, #28
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
	...

0800a06c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a082:	2b40      	cmp	r3, #64	; 0x40
 800a084:	d005      	beq.n	800a092 <USBD_StdDevReq+0x26>
 800a086:	2b40      	cmp	r3, #64	; 0x40
 800a088:	d853      	bhi.n	800a132 <USBD_StdDevReq+0xc6>
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00b      	beq.n	800a0a6 <USBD_StdDevReq+0x3a>
 800a08e:	2b20      	cmp	r3, #32
 800a090:	d14f      	bne.n	800a132 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	4798      	blx	r3
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a0a4:	e04a      	b.n	800a13c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	785b      	ldrb	r3, [r3, #1]
 800a0aa:	2b09      	cmp	r3, #9
 800a0ac:	d83b      	bhi.n	800a126 <USBD_StdDevReq+0xba>
 800a0ae:	a201      	add	r2, pc, #4	; (adr r2, 800a0b4 <USBD_StdDevReq+0x48>)
 800a0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b4:	0800a109 	.word	0x0800a109
 800a0b8:	0800a11d 	.word	0x0800a11d
 800a0bc:	0800a127 	.word	0x0800a127
 800a0c0:	0800a113 	.word	0x0800a113
 800a0c4:	0800a127 	.word	0x0800a127
 800a0c8:	0800a0e7 	.word	0x0800a0e7
 800a0cc:	0800a0dd 	.word	0x0800a0dd
 800a0d0:	0800a127 	.word	0x0800a127
 800a0d4:	0800a0ff 	.word	0x0800a0ff
 800a0d8:	0800a0f1 	.word	0x0800a0f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f9de 	bl	800a4a0 <USBD_GetDescriptor>
          break;
 800a0e4:	e024      	b.n	800a130 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a0e6:	6839      	ldr	r1, [r7, #0]
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fb43 	bl	800a774 <USBD_SetAddress>
          break;
 800a0ee:	e01f      	b.n	800a130 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fb82 	bl	800a7fc <USBD_SetConfig>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	73fb      	strb	r3, [r7, #15]
          break;
 800a0fc:	e018      	b.n	800a130 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a0fe:	6839      	ldr	r1, [r7, #0]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fc21 	bl	800a948 <USBD_GetConfig>
          break;
 800a106:	e013      	b.n	800a130 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 fc52 	bl	800a9b4 <USBD_GetStatus>
          break;
 800a110:	e00e      	b.n	800a130 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fc81 	bl	800aa1c <USBD_SetFeature>
          break;
 800a11a:	e009      	b.n	800a130 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fc90 	bl	800aa44 <USBD_ClrFeature>
          break;
 800a124:	e004      	b.n	800a130 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a126:	6839      	ldr	r1, [r7, #0]
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 fce7 	bl	800aafc <USBD_CtlError>
          break;
 800a12e:	bf00      	nop
      }
      break;
 800a130:	e004      	b.n	800a13c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fce1 	bl	800aafc <USBD_CtlError>
      break;
 800a13a:	bf00      	nop
  }

  return ret;
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop

0800a148 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a15e:	2b40      	cmp	r3, #64	; 0x40
 800a160:	d005      	beq.n	800a16e <USBD_StdItfReq+0x26>
 800a162:	2b40      	cmp	r3, #64	; 0x40
 800a164:	d82f      	bhi.n	800a1c6 <USBD_StdItfReq+0x7e>
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <USBD_StdItfReq+0x26>
 800a16a:	2b20      	cmp	r3, #32
 800a16c:	d12b      	bne.n	800a1c6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a174:	b2db      	uxtb	r3, r3
 800a176:	3b01      	subs	r3, #1
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d81d      	bhi.n	800a1b8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	889b      	ldrh	r3, [r3, #4]
 800a180:	b2db      	uxtb	r3, r3
 800a182:	2b01      	cmp	r3, #1
 800a184:	d813      	bhi.n	800a1ae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	4798      	blx	r3
 800a194:	4603      	mov	r3, r0
 800a196:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	88db      	ldrh	r3, [r3, #6]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d110      	bne.n	800a1c2 <USBD_StdItfReq+0x7a>
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10d      	bne.n	800a1c2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fd73 	bl	800ac92 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a1ac:	e009      	b.n	800a1c2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fca3 	bl	800aafc <USBD_CtlError>
          break;
 800a1b6:	e004      	b.n	800a1c2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fc9e 	bl	800aafc <USBD_CtlError>
          break;
 800a1c0:	e000      	b.n	800a1c4 <USBD_StdItfReq+0x7c>
          break;
 800a1c2:	bf00      	nop
      }
      break;
 800a1c4:	e004      	b.n	800a1d0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fc97 	bl	800aafc <USBD_CtlError>
      break;
 800a1ce:	bf00      	nop
  }

  return ret;
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b084      	sub	sp, #16
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	889b      	ldrh	r3, [r3, #4]
 800a1ec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1f6:	2b40      	cmp	r3, #64	; 0x40
 800a1f8:	d007      	beq.n	800a20a <USBD_StdEPReq+0x30>
 800a1fa:	2b40      	cmp	r3, #64	; 0x40
 800a1fc:	f200 8145 	bhi.w	800a48a <USBD_StdEPReq+0x2b0>
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00c      	beq.n	800a21e <USBD_StdEPReq+0x44>
 800a204:	2b20      	cmp	r3, #32
 800a206:	f040 8140 	bne.w	800a48a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	4798      	blx	r3
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]
      break;
 800a21c:	e13a      	b.n	800a494 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	785b      	ldrb	r3, [r3, #1]
 800a222:	2b03      	cmp	r3, #3
 800a224:	d007      	beq.n	800a236 <USBD_StdEPReq+0x5c>
 800a226:	2b03      	cmp	r3, #3
 800a228:	f300 8129 	bgt.w	800a47e <USBD_StdEPReq+0x2a4>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d07f      	beq.n	800a330 <USBD_StdEPReq+0x156>
 800a230:	2b01      	cmp	r3, #1
 800a232:	d03c      	beq.n	800a2ae <USBD_StdEPReq+0xd4>
 800a234:	e123      	b.n	800a47e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d002      	beq.n	800a248 <USBD_StdEPReq+0x6e>
 800a242:	2b03      	cmp	r3, #3
 800a244:	d016      	beq.n	800a274 <USBD_StdEPReq+0x9a>
 800a246:	e02c      	b.n	800a2a2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a248:	7bbb      	ldrb	r3, [r7, #14]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00d      	beq.n	800a26a <USBD_StdEPReq+0x90>
 800a24e:	7bbb      	ldrb	r3, [r7, #14]
 800a250:	2b80      	cmp	r3, #128	; 0x80
 800a252:	d00a      	beq.n	800a26a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a254:	7bbb      	ldrb	r3, [r7, #14]
 800a256:	4619      	mov	r1, r3
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f001 f93d 	bl	800b4d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a25e:	2180      	movs	r1, #128	; 0x80
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f001 f939 	bl	800b4d8 <USBD_LL_StallEP>
 800a266:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a268:	e020      	b.n	800a2ac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fc45 	bl	800aafc <USBD_CtlError>
              break;
 800a272:	e01b      	b.n	800a2ac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	885b      	ldrh	r3, [r3, #2]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10e      	bne.n	800a29a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a27c:	7bbb      	ldrb	r3, [r7, #14]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00b      	beq.n	800a29a <USBD_StdEPReq+0xc0>
 800a282:	7bbb      	ldrb	r3, [r7, #14]
 800a284:	2b80      	cmp	r3, #128	; 0x80
 800a286:	d008      	beq.n	800a29a <USBD_StdEPReq+0xc0>
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	88db      	ldrh	r3, [r3, #6]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d104      	bne.n	800a29a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a290:	7bbb      	ldrb	r3, [r7, #14]
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f001 f91f 	bl	800b4d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fcf9 	bl	800ac92 <USBD_CtlSendStatus>

              break;
 800a2a0:	e004      	b.n	800a2ac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fc29 	bl	800aafc <USBD_CtlError>
              break;
 800a2aa:	bf00      	nop
          }
          break;
 800a2ac:	e0ec      	b.n	800a488 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d002      	beq.n	800a2c0 <USBD_StdEPReq+0xe6>
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d016      	beq.n	800a2ec <USBD_StdEPReq+0x112>
 800a2be:	e030      	b.n	800a322 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2c0:	7bbb      	ldrb	r3, [r7, #14]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00d      	beq.n	800a2e2 <USBD_StdEPReq+0x108>
 800a2c6:	7bbb      	ldrb	r3, [r7, #14]
 800a2c8:	2b80      	cmp	r3, #128	; 0x80
 800a2ca:	d00a      	beq.n	800a2e2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f001 f901 	bl	800b4d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2d6:	2180      	movs	r1, #128	; 0x80
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f001 f8fd 	bl	800b4d8 <USBD_LL_StallEP>
 800a2de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a2e0:	e025      	b.n	800a32e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a2e2:	6839      	ldr	r1, [r7, #0]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fc09 	bl	800aafc <USBD_CtlError>
              break;
 800a2ea:	e020      	b.n	800a32e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	885b      	ldrh	r3, [r3, #2]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d11b      	bne.n	800a32c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a2f4:	7bbb      	ldrb	r3, [r7, #14]
 800a2f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d004      	beq.n	800a308 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a2fe:	7bbb      	ldrb	r3, [r7, #14]
 800a300:	4619      	mov	r1, r3
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f001 f907 	bl	800b516 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 fcc2 	bl	800ac92 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	4798      	blx	r3
 800a31c:	4603      	mov	r3, r0
 800a31e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a320:	e004      	b.n	800a32c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a322:	6839      	ldr	r1, [r7, #0]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 fbe9 	bl	800aafc <USBD_CtlError>
              break;
 800a32a:	e000      	b.n	800a32e <USBD_StdEPReq+0x154>
              break;
 800a32c:	bf00      	nop
          }
          break;
 800a32e:	e0ab      	b.n	800a488 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a336:	b2db      	uxtb	r3, r3
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d002      	beq.n	800a342 <USBD_StdEPReq+0x168>
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	d032      	beq.n	800a3a6 <USBD_StdEPReq+0x1cc>
 800a340:	e097      	b.n	800a472 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d007      	beq.n	800a358 <USBD_StdEPReq+0x17e>
 800a348:	7bbb      	ldrb	r3, [r7, #14]
 800a34a:	2b80      	cmp	r3, #128	; 0x80
 800a34c:	d004      	beq.n	800a358 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fbd3 	bl	800aafc <USBD_CtlError>
                break;
 800a356:	e091      	b.n	800a47c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	da0b      	bge.n	800a378 <USBD_StdEPReq+0x19e>
 800a360:	7bbb      	ldrb	r3, [r7, #14]
 800a362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a366:	4613      	mov	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4413      	add	r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	3310      	adds	r3, #16
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	4413      	add	r3, r2
 800a374:	3304      	adds	r3, #4
 800a376:	e00b      	b.n	800a390 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a378:	7bbb      	ldrb	r3, [r7, #14]
 800a37a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a37e:	4613      	mov	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	4413      	add	r3, r2
 800a38e:	3304      	adds	r3, #4
 800a390:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	2200      	movs	r2, #0
 800a396:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2202      	movs	r2, #2
 800a39c:	4619      	mov	r1, r3
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fc1d 	bl	800abde <USBD_CtlSendData>
              break;
 800a3a4:	e06a      	b.n	800a47c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a3a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	da11      	bge.n	800a3d2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a3ae:	7bbb      	ldrb	r3, [r7, #14]
 800a3b0:	f003 020f 	and.w	r2, r3, #15
 800a3b4:	6879      	ldr	r1, [r7, #4]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	440b      	add	r3, r1
 800a3c0:	3324      	adds	r3, #36	; 0x24
 800a3c2:	881b      	ldrh	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d117      	bne.n	800a3f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a3c8:	6839      	ldr	r1, [r7, #0]
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fb96 	bl	800aafc <USBD_CtlError>
                  break;
 800a3d0:	e054      	b.n	800a47c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
 800a3d4:	f003 020f 	and.w	r2, r3, #15
 800a3d8:	6879      	ldr	r1, [r7, #4]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4413      	add	r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	440b      	add	r3, r1
 800a3e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a3e8:	881b      	ldrh	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d104      	bne.n	800a3f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 fb83 	bl	800aafc <USBD_CtlError>
                  break;
 800a3f6:	e041      	b.n	800a47c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	da0b      	bge.n	800a418 <USBD_StdEPReq+0x23e>
 800a400:	7bbb      	ldrb	r3, [r7, #14]
 800a402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a406:	4613      	mov	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4413      	add	r3, r2
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	3310      	adds	r3, #16
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	4413      	add	r3, r2
 800a414:	3304      	adds	r3, #4
 800a416:	e00b      	b.n	800a430 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a418:	7bbb      	ldrb	r3, [r7, #14]
 800a41a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a41e:	4613      	mov	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	4413      	add	r3, r2
 800a42e:	3304      	adds	r3, #4
 800a430:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a432:	7bbb      	ldrb	r3, [r7, #14]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <USBD_StdEPReq+0x264>
 800a438:	7bbb      	ldrb	r3, [r7, #14]
 800a43a:	2b80      	cmp	r3, #128	; 0x80
 800a43c:	d103      	bne.n	800a446 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	2200      	movs	r2, #0
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	e00e      	b.n	800a464 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a446:	7bbb      	ldrb	r3, [r7, #14]
 800a448:	4619      	mov	r1, r3
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f001 f882 	bl	800b554 <USBD_LL_IsStallEP>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d003      	beq.n	800a45e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2201      	movs	r2, #1
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	e002      	b.n	800a464 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	2200      	movs	r2, #0
 800a462:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2202      	movs	r2, #2
 800a468:	4619      	mov	r1, r3
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 fbb7 	bl	800abde <USBD_CtlSendData>
              break;
 800a470:	e004      	b.n	800a47c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a472:	6839      	ldr	r1, [r7, #0]
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fb41 	bl	800aafc <USBD_CtlError>
              break;
 800a47a:	bf00      	nop
          }
          break;
 800a47c:	e004      	b.n	800a488 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 fb3b 	bl	800aafc <USBD_CtlError>
          break;
 800a486:	bf00      	nop
      }
      break;
 800a488:	e004      	b.n	800a494 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 fb35 	bl	800aafc <USBD_CtlError>
      break;
 800a492:	bf00      	nop
  }

  return ret;
 800a494:	7bfb      	ldrb	r3, [r7, #15]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
	...

0800a4a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	885b      	ldrh	r3, [r3, #2]
 800a4ba:	0a1b      	lsrs	r3, r3, #8
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	2b06      	cmp	r3, #6
 800a4c2:	f200 8128 	bhi.w	800a716 <USBD_GetDescriptor+0x276>
 800a4c6:	a201      	add	r2, pc, #4	; (adr r2, 800a4cc <USBD_GetDescriptor+0x2c>)
 800a4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4cc:	0800a4e9 	.word	0x0800a4e9
 800a4d0:	0800a501 	.word	0x0800a501
 800a4d4:	0800a541 	.word	0x0800a541
 800a4d8:	0800a717 	.word	0x0800a717
 800a4dc:	0800a717 	.word	0x0800a717
 800a4e0:	0800a6b7 	.word	0x0800a6b7
 800a4e4:	0800a6e3 	.word	0x0800a6e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	7c12      	ldrb	r2, [r2, #16]
 800a4f4:	f107 0108 	add.w	r1, r7, #8
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	4798      	blx	r3
 800a4fc:	60f8      	str	r0, [r7, #12]
      break;
 800a4fe:	e112      	b.n	800a726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	7c1b      	ldrb	r3, [r3, #16]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10d      	bne.n	800a524 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a510:	f107 0208 	add.w	r2, r7, #8
 800a514:	4610      	mov	r0, r2
 800a516:	4798      	blx	r3
 800a518:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3301      	adds	r3, #1
 800a51e:	2202      	movs	r2, #2
 800a520:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a522:	e100      	b.n	800a726 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52c:	f107 0208 	add.w	r2, r7, #8
 800a530:	4610      	mov	r0, r2
 800a532:	4798      	blx	r3
 800a534:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	3301      	adds	r3, #1
 800a53a:	2202      	movs	r2, #2
 800a53c:	701a      	strb	r2, [r3, #0]
      break;
 800a53e:	e0f2      	b.n	800a726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	885b      	ldrh	r3, [r3, #2]
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b05      	cmp	r3, #5
 800a548:	f200 80ac 	bhi.w	800a6a4 <USBD_GetDescriptor+0x204>
 800a54c:	a201      	add	r2, pc, #4	; (adr r2, 800a554 <USBD_GetDescriptor+0xb4>)
 800a54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a552:	bf00      	nop
 800a554:	0800a56d 	.word	0x0800a56d
 800a558:	0800a5a1 	.word	0x0800a5a1
 800a55c:	0800a5d5 	.word	0x0800a5d5
 800a560:	0800a609 	.word	0x0800a609
 800a564:	0800a63d 	.word	0x0800a63d
 800a568:	0800a671 	.word	0x0800a671
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00b      	beq.n	800a590 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	7c12      	ldrb	r2, [r2, #16]
 800a584:	f107 0108 	add.w	r1, r7, #8
 800a588:	4610      	mov	r0, r2
 800a58a:	4798      	blx	r3
 800a58c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a58e:	e091      	b.n	800a6b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a590:	6839      	ldr	r1, [r7, #0]
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fab2 	bl	800aafc <USBD_CtlError>
            err++;
 800a598:	7afb      	ldrb	r3, [r7, #11]
 800a59a:	3301      	adds	r3, #1
 800a59c:	72fb      	strb	r3, [r7, #11]
          break;
 800a59e:	e089      	b.n	800a6b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00b      	beq.n	800a5c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	7c12      	ldrb	r2, [r2, #16]
 800a5b8:	f107 0108 	add.w	r1, r7, #8
 800a5bc:	4610      	mov	r0, r2
 800a5be:	4798      	blx	r3
 800a5c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5c2:	e077      	b.n	800a6b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5c4:	6839      	ldr	r1, [r7, #0]
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fa98 	bl	800aafc <USBD_CtlError>
            err++;
 800a5cc:	7afb      	ldrb	r3, [r7, #11]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5d2:	e06f      	b.n	800a6b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00b      	beq.n	800a5f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	7c12      	ldrb	r2, [r2, #16]
 800a5ec:	f107 0108 	add.w	r1, r7, #8
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	4798      	blx	r3
 800a5f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5f6:	e05d      	b.n	800a6b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fa7e 	bl	800aafc <USBD_CtlError>
            err++;
 800a600:	7afb      	ldrb	r3, [r7, #11]
 800a602:	3301      	adds	r3, #1
 800a604:	72fb      	strb	r3, [r7, #11]
          break;
 800a606:	e055      	b.n	800a6b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00b      	beq.n	800a62c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a61a:	691b      	ldr	r3, [r3, #16]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	7c12      	ldrb	r2, [r2, #16]
 800a620:	f107 0108 	add.w	r1, r7, #8
 800a624:	4610      	mov	r0, r2
 800a626:	4798      	blx	r3
 800a628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a62a:	e043      	b.n	800a6b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a62c:	6839      	ldr	r1, [r7, #0]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fa64 	bl	800aafc <USBD_CtlError>
            err++;
 800a634:	7afb      	ldrb	r3, [r7, #11]
 800a636:	3301      	adds	r3, #1
 800a638:	72fb      	strb	r3, [r7, #11]
          break;
 800a63a:	e03b      	b.n	800a6b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00b      	beq.n	800a660 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a64e:	695b      	ldr	r3, [r3, #20]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	7c12      	ldrb	r2, [r2, #16]
 800a654:	f107 0108 	add.w	r1, r7, #8
 800a658:	4610      	mov	r0, r2
 800a65a:	4798      	blx	r3
 800a65c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a65e:	e029      	b.n	800a6b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a660:	6839      	ldr	r1, [r7, #0]
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fa4a 	bl	800aafc <USBD_CtlError>
            err++;
 800a668:	7afb      	ldrb	r3, [r7, #11]
 800a66a:	3301      	adds	r3, #1
 800a66c:	72fb      	strb	r3, [r7, #11]
          break;
 800a66e:	e021      	b.n	800a6b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00b      	beq.n	800a694 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	7c12      	ldrb	r2, [r2, #16]
 800a688:	f107 0108 	add.w	r1, r7, #8
 800a68c:	4610      	mov	r0, r2
 800a68e:	4798      	blx	r3
 800a690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a692:	e00f      	b.n	800a6b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fa30 	bl	800aafc <USBD_CtlError>
            err++;
 800a69c:	7afb      	ldrb	r3, [r7, #11]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a6a2:	e007      	b.n	800a6b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fa28 	bl	800aafc <USBD_CtlError>
          err++;
 800a6ac:	7afb      	ldrb	r3, [r7, #11]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a6b2:	bf00      	nop
      }
      break;
 800a6b4:	e037      	b.n	800a726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	7c1b      	ldrb	r3, [r3, #16]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d109      	bne.n	800a6d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c6:	f107 0208 	add.w	r2, r7, #8
 800a6ca:	4610      	mov	r0, r2
 800a6cc:	4798      	blx	r3
 800a6ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6d0:	e029      	b.n	800a726 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fa11 	bl	800aafc <USBD_CtlError>
        err++;
 800a6da:	7afb      	ldrb	r3, [r7, #11]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	72fb      	strb	r3, [r7, #11]
      break;
 800a6e0:	e021      	b.n	800a726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	7c1b      	ldrb	r3, [r3, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10d      	bne.n	800a706 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f2:	f107 0208 	add.w	r2, r7, #8
 800a6f6:	4610      	mov	r0, r2
 800a6f8:	4798      	blx	r3
 800a6fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	3301      	adds	r3, #1
 800a700:	2207      	movs	r2, #7
 800a702:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a704:	e00f      	b.n	800a726 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a706:	6839      	ldr	r1, [r7, #0]
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 f9f7 	bl	800aafc <USBD_CtlError>
        err++;
 800a70e:	7afb      	ldrb	r3, [r7, #11]
 800a710:	3301      	adds	r3, #1
 800a712:	72fb      	strb	r3, [r7, #11]
      break;
 800a714:	e007      	b.n	800a726 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 f9ef 	bl	800aafc <USBD_CtlError>
      err++;
 800a71e:	7afb      	ldrb	r3, [r7, #11]
 800a720:	3301      	adds	r3, #1
 800a722:	72fb      	strb	r3, [r7, #11]
      break;
 800a724:	bf00      	nop
  }

  if (err != 0U)
 800a726:	7afb      	ldrb	r3, [r7, #11]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d11e      	bne.n	800a76a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	88db      	ldrh	r3, [r3, #6]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d016      	beq.n	800a762 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a734:	893b      	ldrh	r3, [r7, #8]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00e      	beq.n	800a758 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	88da      	ldrh	r2, [r3, #6]
 800a73e:	893b      	ldrh	r3, [r7, #8]
 800a740:	4293      	cmp	r3, r2
 800a742:	bf28      	it	cs
 800a744:	4613      	movcs	r3, r2
 800a746:	b29b      	uxth	r3, r3
 800a748:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a74a:	893b      	ldrh	r3, [r7, #8]
 800a74c:	461a      	mov	r2, r3
 800a74e:	68f9      	ldr	r1, [r7, #12]
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fa44 	bl	800abde <USBD_CtlSendData>
 800a756:	e009      	b.n	800a76c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 f9ce 	bl	800aafc <USBD_CtlError>
 800a760:	e004      	b.n	800a76c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fa95 	bl	800ac92 <USBD_CtlSendStatus>
 800a768:	e000      	b.n	800a76c <USBD_GetDescriptor+0x2cc>
    return;
 800a76a:	bf00      	nop
  }
}
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop

0800a774 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	889b      	ldrh	r3, [r3, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d131      	bne.n	800a7ea <USBD_SetAddress+0x76>
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	88db      	ldrh	r3, [r3, #6]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d12d      	bne.n	800a7ea <USBD_SetAddress+0x76>
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	885b      	ldrh	r3, [r3, #2]
 800a792:	2b7f      	cmp	r3, #127	; 0x7f
 800a794:	d829      	bhi.n	800a7ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	885b      	ldrh	r3, [r3, #2]
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	d104      	bne.n	800a7b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a7ae:	6839      	ldr	r1, [r7, #0]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 f9a3 	bl	800aafc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7b6:	e01d      	b.n	800a7f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	7bfa      	ldrb	r2, [r7, #15]
 800a7bc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a7c0:	7bfb      	ldrb	r3, [r7, #15]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fef1 	bl	800b5ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fa61 	bl	800ac92 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d004      	beq.n	800a7e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2202      	movs	r2, #2
 800a7da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7de:	e009      	b.n	800a7f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7e8:	e004      	b.n	800a7f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f985 	bl	800aafc <USBD_CtlError>
  }
}
 800a7f2:	bf00      	nop
 800a7f4:	bf00      	nop
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	885b      	ldrh	r3, [r3, #2]
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	4b4c      	ldr	r3, [pc, #304]	; (800a944 <USBD_SetConfig+0x148>)
 800a812:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a814:	4b4b      	ldr	r3, [pc, #300]	; (800a944 <USBD_SetConfig+0x148>)
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d905      	bls.n	800a828 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f96c 	bl	800aafc <USBD_CtlError>
    return USBD_FAIL;
 800a824:	2303      	movs	r3, #3
 800a826:	e088      	b.n	800a93a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	2b02      	cmp	r3, #2
 800a832:	d002      	beq.n	800a83a <USBD_SetConfig+0x3e>
 800a834:	2b03      	cmp	r3, #3
 800a836:	d025      	beq.n	800a884 <USBD_SetConfig+0x88>
 800a838:	e071      	b.n	800a91e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a83a:	4b42      	ldr	r3, [pc, #264]	; (800a944 <USBD_SetConfig+0x148>)
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d01c      	beq.n	800a87c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a842:	4b40      	ldr	r3, [pc, #256]	; (800a944 <USBD_SetConfig+0x148>)
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	461a      	mov	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a84c:	4b3d      	ldr	r3, [pc, #244]	; (800a944 <USBD_SetConfig+0x148>)
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	4619      	mov	r1, r3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7ff f948 	bl	8009ae8 <USBD_SetClassConfig>
 800a858:	4603      	mov	r3, r0
 800a85a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a85c:	7bfb      	ldrb	r3, [r7, #15]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d004      	beq.n	800a86c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 f949 	bl	800aafc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a86a:	e065      	b.n	800a938 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fa10 	bl	800ac92 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2203      	movs	r2, #3
 800a876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a87a:	e05d      	b.n	800a938 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fa08 	bl	800ac92 <USBD_CtlSendStatus>
      break;
 800a882:	e059      	b.n	800a938 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a884:	4b2f      	ldr	r3, [pc, #188]	; (800a944 <USBD_SetConfig+0x148>)
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d112      	bne.n	800a8b2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2202      	movs	r2, #2
 800a890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a894:	4b2b      	ldr	r3, [pc, #172]	; (800a944 <USBD_SetConfig+0x148>)
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	461a      	mov	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a89e:	4b29      	ldr	r3, [pc, #164]	; (800a944 <USBD_SetConfig+0x148>)
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff f93b 	bl	8009b20 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f9f1 	bl	800ac92 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a8b0:	e042      	b.n	800a938 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a8b2:	4b24      	ldr	r3, [pc, #144]	; (800a944 <USBD_SetConfig+0x148>)
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d02a      	beq.n	800a916 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7ff f929 	bl	8009b20 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a8ce:	4b1d      	ldr	r3, [pc, #116]	; (800a944 <USBD_SetConfig+0x148>)
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a8d8:	4b1a      	ldr	r3, [pc, #104]	; (800a944 <USBD_SetConfig+0x148>)
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f7ff f902 	bl	8009ae8 <USBD_SetClassConfig>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a8e8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00f      	beq.n	800a90e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a8ee:	6839      	ldr	r1, [r7, #0]
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 f903 	bl	800aafc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f7ff f90e 	bl	8009b20 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2202      	movs	r2, #2
 800a908:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a90c:	e014      	b.n	800a938 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f9bf 	bl	800ac92 <USBD_CtlSendStatus>
      break;
 800a914:	e010      	b.n	800a938 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f9bb 	bl	800ac92 <USBD_CtlSendStatus>
      break;
 800a91c:	e00c      	b.n	800a938 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 f8eb 	bl	800aafc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a926:	4b07      	ldr	r3, [pc, #28]	; (800a944 <USBD_SetConfig+0x148>)
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	4619      	mov	r1, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff f8f7 	bl	8009b20 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a932:	2303      	movs	r3, #3
 800a934:	73fb      	strb	r3, [r7, #15]
      break;
 800a936:	bf00      	nop
  }

  return ret;
 800a938:	7bfb      	ldrb	r3, [r7, #15]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	20000224 	.word	0x20000224

0800a948 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	88db      	ldrh	r3, [r3, #6]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d004      	beq.n	800a964 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f8cd 	bl	800aafc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a962:	e023      	b.n	800a9ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	dc02      	bgt.n	800a976 <USBD_GetConfig+0x2e>
 800a970:	2b00      	cmp	r3, #0
 800a972:	dc03      	bgt.n	800a97c <USBD_GetConfig+0x34>
 800a974:	e015      	b.n	800a9a2 <USBD_GetConfig+0x5a>
 800a976:	2b03      	cmp	r3, #3
 800a978:	d00b      	beq.n	800a992 <USBD_GetConfig+0x4a>
 800a97a:	e012      	b.n	800a9a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	3308      	adds	r3, #8
 800a986:	2201      	movs	r2, #1
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 f927 	bl	800abde <USBD_CtlSendData>
        break;
 800a990:	e00c      	b.n	800a9ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	3304      	adds	r3, #4
 800a996:	2201      	movs	r2, #1
 800a998:	4619      	mov	r1, r3
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f91f 	bl	800abde <USBD_CtlSendData>
        break;
 800a9a0:	e004      	b.n	800a9ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 f8a9 	bl	800aafc <USBD_CtlError>
        break;
 800a9aa:	bf00      	nop
}
 800a9ac:	bf00      	nop
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d81e      	bhi.n	800aa0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	88db      	ldrh	r3, [r3, #6]
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d004      	beq.n	800a9de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f890 	bl	800aafc <USBD_CtlError>
        break;
 800a9dc:	e01a      	b.n	800aa14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d005      	beq.n	800a9fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	f043 0202 	orr.w	r2, r3, #2
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	330c      	adds	r3, #12
 800a9fe:	2202      	movs	r2, #2
 800aa00:	4619      	mov	r1, r3
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f8eb 	bl	800abde <USBD_CtlSendData>
      break;
 800aa08:	e004      	b.n	800aa14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f875 	bl	800aafc <USBD_CtlError>
      break;
 800aa12:	bf00      	nop
  }
}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	885b      	ldrh	r3, [r3, #2]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d106      	bne.n	800aa3c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f92b 	bl	800ac92 <USBD_CtlSendStatus>
  }
}
 800aa3c:	bf00      	nop
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	3b01      	subs	r3, #1
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d80b      	bhi.n	800aa74 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	885b      	ldrh	r3, [r3, #2]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d10c      	bne.n	800aa7e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f910 	bl	800ac92 <USBD_CtlSendStatus>
      }
      break;
 800aa72:	e004      	b.n	800aa7e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f840 	bl	800aafc <USBD_CtlError>
      break;
 800aa7c:	e000      	b.n	800aa80 <USBD_ClrFeature+0x3c>
      break;
 800aa7e:	bf00      	nop
  }
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	781a      	ldrb	r2, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	781a      	ldrb	r2, [r3, #0]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	3301      	adds	r3, #1
 800aab0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f7ff fabb 	bl	800a02e <SWAPBYTE>
 800aab8:	4603      	mov	r3, r0
 800aaba:	461a      	mov	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	3301      	adds	r3, #1
 800aac4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3301      	adds	r3, #1
 800aaca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f7ff faae 	bl	800a02e <SWAPBYTE>
 800aad2:	4603      	mov	r3, r0
 800aad4:	461a      	mov	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	3301      	adds	r3, #1
 800aade:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	3301      	adds	r3, #1
 800aae4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f7ff faa1 	bl	800a02e <SWAPBYTE>
 800aaec:	4603      	mov	r3, r0
 800aaee:	461a      	mov	r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	80da      	strh	r2, [r3, #6]
}
 800aaf4:	bf00      	nop
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab06:	2180      	movs	r1, #128	; 0x80
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fce5 	bl	800b4d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ab0e:	2100      	movs	r1, #0
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fce1 	bl	800b4d8 <USBD_LL_StallEP>
}
 800ab16:	bf00      	nop
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b086      	sub	sp, #24
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	60b9      	str	r1, [r7, #8]
 800ab28:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d036      	beq.n	800aba2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ab38:	6938      	ldr	r0, [r7, #16]
 800ab3a:	f000 f836 	bl	800abaa <USBD_GetLen>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	3301      	adds	r3, #1
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	005b      	lsls	r3, r3, #1
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	68ba      	ldr	r2, [r7, #8]
 800ab50:	4413      	add	r3, r2
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	7812      	ldrb	r2, [r2, #0]
 800ab56:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab58:	7dfb      	ldrb	r3, [r7, #23]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	4413      	add	r3, r2
 800ab64:	2203      	movs	r2, #3
 800ab66:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab68:	7dfb      	ldrb	r3, [r7, #23]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ab6e:	e013      	b.n	800ab98 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ab70:	7dfb      	ldrb	r3, [r7, #23]
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	4413      	add	r3, r2
 800ab76:	693a      	ldr	r2, [r7, #16]
 800ab78:	7812      	ldrb	r2, [r2, #0]
 800ab7a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	613b      	str	r3, [r7, #16]
    idx++;
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
 800ab84:	3301      	adds	r3, #1
 800ab86:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ab88:	7dfb      	ldrb	r3, [r7, #23]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	2200      	movs	r2, #0
 800ab90:	701a      	strb	r2, [r3, #0]
    idx++;
 800ab92:	7dfb      	ldrb	r3, [r7, #23]
 800ab94:	3301      	adds	r3, #1
 800ab96:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1e7      	bne.n	800ab70 <USBD_GetString+0x52>
 800aba0:	e000      	b.n	800aba4 <USBD_GetString+0x86>
    return;
 800aba2:	bf00      	nop
  }
}
 800aba4:	3718      	adds	r7, #24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800abaa:	b480      	push	{r7}
 800abac:	b085      	sub	sp, #20
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800abb2:	2300      	movs	r3, #0
 800abb4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800abba:	e005      	b.n	800abc8 <USBD_GetLen+0x1e>
  {
    len++;
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
 800abbe:	3301      	adds	r3, #1
 800abc0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	3301      	adds	r3, #1
 800abc6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1f5      	bne.n	800abbc <USBD_GetLen+0x12>
  }

  return len;
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	60f8      	str	r0, [r7, #12]
 800abe6:	60b9      	str	r1, [r7, #8]
 800abe8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2202      	movs	r2, #2
 800abee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	2100      	movs	r1, #0
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 fcf0 	bl	800b5ea <USBD_LL_Transmit>

  return USBD_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	68ba      	ldr	r2, [r7, #8]
 800ac24:	2100      	movs	r1, #0
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f000 fcdf 	bl	800b5ea <USBD_LL_Transmit>

  return USBD_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b084      	sub	sp, #16
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	60f8      	str	r0, [r7, #12]
 800ac3e:	60b9      	str	r1, [r7, #8]
 800ac40:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2203      	movs	r2, #3
 800ac46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	68ba      	ldr	r2, [r7, #8]
 800ac5e:	2100      	movs	r1, #0
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f000 fce3 	bl	800b62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	2100      	movs	r1, #0
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f000 fcd2 	bl	800b62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b082      	sub	sp, #8
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2204      	movs	r2, #4
 800ac9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aca2:	2300      	movs	r3, #0
 800aca4:	2200      	movs	r2, #0
 800aca6:	2100      	movs	r1, #0
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fc9e 	bl	800b5ea <USBD_LL_Transmit>

  return USBD_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2205      	movs	r2, #5
 800acc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acc8:	2300      	movs	r3, #0
 800acca:	2200      	movs	r2, #0
 800accc:	2100      	movs	r1, #0
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fcac 	bl	800b62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
	...

0800ace0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ace4:	2200      	movs	r2, #0
 800ace6:	4912      	ldr	r1, [pc, #72]	; (800ad30 <MX_USB_DEVICE_Init+0x50>)
 800ace8:	4812      	ldr	r0, [pc, #72]	; (800ad34 <MX_USB_DEVICE_Init+0x54>)
 800acea:	f7fe fe8f 	bl	8009a0c <USBD_Init>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d001      	beq.n	800acf8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800acf4:	f7f8 fc46 	bl	8003584 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800acf8:	490f      	ldr	r1, [pc, #60]	; (800ad38 <MX_USB_DEVICE_Init+0x58>)
 800acfa:	480e      	ldr	r0, [pc, #56]	; (800ad34 <MX_USB_DEVICE_Init+0x54>)
 800acfc:	f7fe feb6 	bl	8009a6c <USBD_RegisterClass>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ad06:	f7f8 fc3d 	bl	8003584 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ad0a:	490c      	ldr	r1, [pc, #48]	; (800ad3c <MX_USB_DEVICE_Init+0x5c>)
 800ad0c:	4809      	ldr	r0, [pc, #36]	; (800ad34 <MX_USB_DEVICE_Init+0x54>)
 800ad0e:	f7fe fdd7 	bl	80098c0 <USBD_CDC_RegisterInterface>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ad18:	f7f8 fc34 	bl	8003584 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ad1c:	4805      	ldr	r0, [pc, #20]	; (800ad34 <MX_USB_DEVICE_Init+0x54>)
 800ad1e:	f7fe fecc 	bl	8009aba <USBD_Start>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d001      	beq.n	800ad2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ad28:	f7f8 fc2c 	bl	8003584 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad2c:	bf00      	nop
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	20000138 	.word	0x20000138
 800ad34:	20000b70 	.word	0x20000b70
 800ad38:	20000020 	.word	0x20000020
 800ad3c:	20000124 	.word	0x20000124

0800ad40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ad44:	2200      	movs	r2, #0
 800ad46:	4905      	ldr	r1, [pc, #20]	; (800ad5c <CDC_Init_FS+0x1c>)
 800ad48:	4805      	ldr	r0, [pc, #20]	; (800ad60 <CDC_Init_FS+0x20>)
 800ad4a:	f7fe fdce 	bl	80098ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ad4e:	4905      	ldr	r1, [pc, #20]	; (800ad64 <CDC_Init_FS+0x24>)
 800ad50:	4803      	ldr	r0, [pc, #12]	; (800ad60 <CDC_Init_FS+0x20>)
 800ad52:	f7fe fde8 	bl	8009926 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ad56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	20001640 	.word	0x20001640
 800ad60:	20000b70 	.word	0x20000b70
 800ad64:	20000e40 	.word	0x20000e40

0800ad68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ad6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	6039      	str	r1, [r7, #0]
 800ad82:	71fb      	strb	r3, [r7, #7]
 800ad84:	4613      	mov	r3, r2
 800ad86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ad88:	79fb      	ldrb	r3, [r7, #7]
 800ad8a:	2b23      	cmp	r3, #35	; 0x23
 800ad8c:	d84a      	bhi.n	800ae24 <CDC_Control_FS+0xac>
 800ad8e:	a201      	add	r2, pc, #4	; (adr r2, 800ad94 <CDC_Control_FS+0x1c>)
 800ad90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad94:	0800ae25 	.word	0x0800ae25
 800ad98:	0800ae25 	.word	0x0800ae25
 800ad9c:	0800ae25 	.word	0x0800ae25
 800ada0:	0800ae25 	.word	0x0800ae25
 800ada4:	0800ae25 	.word	0x0800ae25
 800ada8:	0800ae25 	.word	0x0800ae25
 800adac:	0800ae25 	.word	0x0800ae25
 800adb0:	0800ae25 	.word	0x0800ae25
 800adb4:	0800ae25 	.word	0x0800ae25
 800adb8:	0800ae25 	.word	0x0800ae25
 800adbc:	0800ae25 	.word	0x0800ae25
 800adc0:	0800ae25 	.word	0x0800ae25
 800adc4:	0800ae25 	.word	0x0800ae25
 800adc8:	0800ae25 	.word	0x0800ae25
 800adcc:	0800ae25 	.word	0x0800ae25
 800add0:	0800ae25 	.word	0x0800ae25
 800add4:	0800ae25 	.word	0x0800ae25
 800add8:	0800ae25 	.word	0x0800ae25
 800addc:	0800ae25 	.word	0x0800ae25
 800ade0:	0800ae25 	.word	0x0800ae25
 800ade4:	0800ae25 	.word	0x0800ae25
 800ade8:	0800ae25 	.word	0x0800ae25
 800adec:	0800ae25 	.word	0x0800ae25
 800adf0:	0800ae25 	.word	0x0800ae25
 800adf4:	0800ae25 	.word	0x0800ae25
 800adf8:	0800ae25 	.word	0x0800ae25
 800adfc:	0800ae25 	.word	0x0800ae25
 800ae00:	0800ae25 	.word	0x0800ae25
 800ae04:	0800ae25 	.word	0x0800ae25
 800ae08:	0800ae25 	.word	0x0800ae25
 800ae0c:	0800ae25 	.word	0x0800ae25
 800ae10:	0800ae25 	.word	0x0800ae25
 800ae14:	0800ae25 	.word	0x0800ae25
 800ae18:	0800ae25 	.word	0x0800ae25
 800ae1c:	0800ae25 	.word	0x0800ae25
 800ae20:	0800ae25 	.word	0x0800ae25
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ae24:	bf00      	nop
  }

  return (USBD_OK);
 800ae26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ae3e:	6879      	ldr	r1, [r7, #4]
 800ae40:	4805      	ldr	r0, [pc, #20]	; (800ae58 <CDC_Receive_FS+0x24>)
 800ae42:	f7fe fd70 	bl	8009926 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ae46:	4804      	ldr	r0, [pc, #16]	; (800ae58 <CDC_Receive_FS+0x24>)
 800ae48:	f7fe fdb6 	bl	80099b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ae4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	20000b70 	.word	0x20000b70

0800ae5c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ae6c:	4b0d      	ldr	r3, [pc, #52]	; (800aea4 <CDC_Transmit_FS+0x48>)
 800ae6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae72:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e00b      	b.n	800ae9a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ae82:	887b      	ldrh	r3, [r7, #2]
 800ae84:	461a      	mov	r2, r3
 800ae86:	6879      	ldr	r1, [r7, #4]
 800ae88:	4806      	ldr	r0, [pc, #24]	; (800aea4 <CDC_Transmit_FS+0x48>)
 800ae8a:	f7fe fd2e 	bl	80098ea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ae8e:	4805      	ldr	r0, [pc, #20]	; (800aea4 <CDC_Transmit_FS+0x48>)
 800ae90:	f7fe fd62 	bl	8009958 <USBD_CDC_TransmitPacket>
 800ae94:	4603      	mov	r3, r0
 800ae96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ae98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	20000b70 	.word	0x20000b70

0800aea8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b087      	sub	sp, #28
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aeba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	371c      	adds	r7, #28
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
	...

0800aecc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	4603      	mov	r3, r0
 800aed4:	6039      	str	r1, [r7, #0]
 800aed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	2212      	movs	r2, #18
 800aedc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aede:	4b03      	ldr	r3, [pc, #12]	; (800aeec <USBD_FS_DeviceDescriptor+0x20>)
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	20000154 	.word	0x20000154

0800aef0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	4603      	mov	r3, r0
 800aef8:	6039      	str	r1, [r7, #0]
 800aefa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2204      	movs	r2, #4
 800af00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800af02:	4b03      	ldr	r3, [pc, #12]	; (800af10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800af04:	4618      	mov	r0, r3
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr
 800af10:	20000168 	.word	0x20000168

0800af14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	4603      	mov	r3, r0
 800af1c:	6039      	str	r1, [r7, #0]
 800af1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af20:	79fb      	ldrb	r3, [r7, #7]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d105      	bne.n	800af32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	4907      	ldr	r1, [pc, #28]	; (800af48 <USBD_FS_ProductStrDescriptor+0x34>)
 800af2a:	4808      	ldr	r0, [pc, #32]	; (800af4c <USBD_FS_ProductStrDescriptor+0x38>)
 800af2c:	f7ff fdf7 	bl	800ab1e <USBD_GetString>
 800af30:	e004      	b.n	800af3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	4904      	ldr	r1, [pc, #16]	; (800af48 <USBD_FS_ProductStrDescriptor+0x34>)
 800af36:	4805      	ldr	r0, [pc, #20]	; (800af4c <USBD_FS_ProductStrDescriptor+0x38>)
 800af38:	f7ff fdf1 	bl	800ab1e <USBD_GetString>
  }
  return USBD_StrDesc;
 800af3c:	4b02      	ldr	r3, [pc, #8]	; (800af48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	20001e40 	.word	0x20001e40
 800af4c:	0800c308 	.word	0x0800c308

0800af50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	4603      	mov	r3, r0
 800af58:	6039      	str	r1, [r7, #0]
 800af5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af5c:	683a      	ldr	r2, [r7, #0]
 800af5e:	4904      	ldr	r1, [pc, #16]	; (800af70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800af60:	4804      	ldr	r0, [pc, #16]	; (800af74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af62:	f7ff fddc 	bl	800ab1e <USBD_GetString>
  return USBD_StrDesc;
 800af66:	4b02      	ldr	r3, [pc, #8]	; (800af70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	20001e40 	.word	0x20001e40
 800af74:	0800c310 	.word	0x0800c310

0800af78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	6039      	str	r1, [r7, #0]
 800af82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	221a      	movs	r2, #26
 800af88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af8a:	f000 f843 	bl	800b014 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800af8e:	4b02      	ldr	r3, [pc, #8]	; (800af98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800af90:	4618      	mov	r0, r3
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	2000016c 	.word	0x2000016c

0800af9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	4603      	mov	r3, r0
 800afa4:	6039      	str	r1, [r7, #0]
 800afa6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800afa8:	79fb      	ldrb	r3, [r7, #7]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d105      	bne.n	800afba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	4907      	ldr	r1, [pc, #28]	; (800afd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800afb2:	4808      	ldr	r0, [pc, #32]	; (800afd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afb4:	f7ff fdb3 	bl	800ab1e <USBD_GetString>
 800afb8:	e004      	b.n	800afc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	4904      	ldr	r1, [pc, #16]	; (800afd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800afbe:	4805      	ldr	r0, [pc, #20]	; (800afd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afc0:	f7ff fdad 	bl	800ab1e <USBD_GetString>
  }
  return USBD_StrDesc;
 800afc4:	4b02      	ldr	r3, [pc, #8]	; (800afd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	20001e40 	.word	0x20001e40
 800afd4:	0800c324 	.word	0x0800c324

0800afd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	4603      	mov	r3, r0
 800afe0:	6039      	str	r1, [r7, #0]
 800afe2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800afe4:	79fb      	ldrb	r3, [r7, #7]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d105      	bne.n	800aff6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	4907      	ldr	r1, [pc, #28]	; (800b00c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800afee:	4808      	ldr	r0, [pc, #32]	; (800b010 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aff0:	f7ff fd95 	bl	800ab1e <USBD_GetString>
 800aff4:	e004      	b.n	800b000 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aff6:	683a      	ldr	r2, [r7, #0]
 800aff8:	4904      	ldr	r1, [pc, #16]	; (800b00c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800affa:	4805      	ldr	r0, [pc, #20]	; (800b010 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800affc:	f7ff fd8f 	bl	800ab1e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b000:	4b02      	ldr	r3, [pc, #8]	; (800b00c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b002:	4618      	mov	r0, r3
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	20001e40 	.word	0x20001e40
 800b010:	0800c330 	.word	0x0800c330

0800b014 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b01a:	4b0f      	ldr	r3, [pc, #60]	; (800b058 <Get_SerialNum+0x44>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b020:	4b0e      	ldr	r3, [pc, #56]	; (800b05c <Get_SerialNum+0x48>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b026:	4b0e      	ldr	r3, [pc, #56]	; (800b060 <Get_SerialNum+0x4c>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4413      	add	r3, r2
 800b032:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d009      	beq.n	800b04e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b03a:	2208      	movs	r2, #8
 800b03c:	4909      	ldr	r1, [pc, #36]	; (800b064 <Get_SerialNum+0x50>)
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f000 f814 	bl	800b06c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b044:	2204      	movs	r2, #4
 800b046:	4908      	ldr	r1, [pc, #32]	; (800b068 <Get_SerialNum+0x54>)
 800b048:	68b8      	ldr	r0, [r7, #8]
 800b04a:	f000 f80f 	bl	800b06c <IntToUnicode>
  }
}
 800b04e:	bf00      	nop
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	1fff7a10 	.word	0x1fff7a10
 800b05c:	1fff7a14 	.word	0x1fff7a14
 800b060:	1fff7a18 	.word	0x1fff7a18
 800b064:	2000016e 	.word	0x2000016e
 800b068:	2000017e 	.word	0x2000017e

0800b06c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b087      	sub	sp, #28
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	4613      	mov	r3, r2
 800b078:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b07a:	2300      	movs	r3, #0
 800b07c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b07e:	2300      	movs	r3, #0
 800b080:	75fb      	strb	r3, [r7, #23]
 800b082:	e027      	b.n	800b0d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	0f1b      	lsrs	r3, r3, #28
 800b088:	2b09      	cmp	r3, #9
 800b08a:	d80b      	bhi.n	800b0a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	0f1b      	lsrs	r3, r3, #28
 800b090:	b2da      	uxtb	r2, r3
 800b092:	7dfb      	ldrb	r3, [r7, #23]
 800b094:	005b      	lsls	r3, r3, #1
 800b096:	4619      	mov	r1, r3
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	440b      	add	r3, r1
 800b09c:	3230      	adds	r2, #48	; 0x30
 800b09e:	b2d2      	uxtb	r2, r2
 800b0a0:	701a      	strb	r2, [r3, #0]
 800b0a2:	e00a      	b.n	800b0ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	0f1b      	lsrs	r3, r3, #28
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	440b      	add	r3, r1
 800b0b4:	3237      	adds	r2, #55	; 0x37
 800b0b6:	b2d2      	uxtb	r2, r2
 800b0b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	011b      	lsls	r3, r3, #4
 800b0be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b0c0:	7dfb      	ldrb	r3, [r7, #23]
 800b0c2:	005b      	lsls	r3, r3, #1
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b0ce:	7dfb      	ldrb	r3, [r7, #23]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	75fb      	strb	r3, [r7, #23]
 800b0d4:	7dfa      	ldrb	r2, [r7, #23]
 800b0d6:	79fb      	ldrb	r3, [r7, #7]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d3d3      	bcc.n	800b084 <IntToUnicode+0x18>
  }
}
 800b0dc:	bf00      	nop
 800b0de:	bf00      	nop
 800b0e0:	371c      	adds	r7, #28
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
	...

0800b0ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b08a      	sub	sp, #40	; 0x28
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0f4:	f107 0314 	add.w	r3, r7, #20
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	601a      	str	r2, [r3, #0]
 800b0fc:	605a      	str	r2, [r3, #4]
 800b0fe:	609a      	str	r2, [r3, #8]
 800b100:	60da      	str	r2, [r3, #12]
 800b102:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b10c:	d147      	bne.n	800b19e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b10e:	2300      	movs	r3, #0
 800b110:	613b      	str	r3, [r7, #16]
 800b112:	4b25      	ldr	r3, [pc, #148]	; (800b1a8 <HAL_PCD_MspInit+0xbc>)
 800b114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b116:	4a24      	ldr	r2, [pc, #144]	; (800b1a8 <HAL_PCD_MspInit+0xbc>)
 800b118:	f043 0301 	orr.w	r3, r3, #1
 800b11c:	6313      	str	r3, [r2, #48]	; 0x30
 800b11e:	4b22      	ldr	r3, [pc, #136]	; (800b1a8 <HAL_PCD_MspInit+0xbc>)
 800b120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b122:	f003 0301 	and.w	r3, r3, #1
 800b126:	613b      	str	r3, [r7, #16]
 800b128:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b12a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b12e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b130:	2300      	movs	r3, #0
 800b132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b134:	2300      	movs	r3, #0
 800b136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b138:	f107 0314 	add.w	r3, r7, #20
 800b13c:	4619      	mov	r1, r3
 800b13e:	481b      	ldr	r0, [pc, #108]	; (800b1ac <HAL_PCD_MspInit+0xc0>)
 800b140:	f7f9 f8c4 	bl	80042cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b144:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b14a:	2302      	movs	r3, #2
 800b14c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b14e:	2300      	movs	r3, #0
 800b150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b152:	2303      	movs	r3, #3
 800b154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b156:	230a      	movs	r3, #10
 800b158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b15a:	f107 0314 	add.w	r3, r7, #20
 800b15e:	4619      	mov	r1, r3
 800b160:	4812      	ldr	r0, [pc, #72]	; (800b1ac <HAL_PCD_MspInit+0xc0>)
 800b162:	f7f9 f8b3 	bl	80042cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b166:	4b10      	ldr	r3, [pc, #64]	; (800b1a8 <HAL_PCD_MspInit+0xbc>)
 800b168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b16a:	4a0f      	ldr	r2, [pc, #60]	; (800b1a8 <HAL_PCD_MspInit+0xbc>)
 800b16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b170:	6353      	str	r3, [r2, #52]	; 0x34
 800b172:	2300      	movs	r3, #0
 800b174:	60fb      	str	r3, [r7, #12]
 800b176:	4b0c      	ldr	r3, [pc, #48]	; (800b1a8 <HAL_PCD_MspInit+0xbc>)
 800b178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b17a:	4a0b      	ldr	r2, [pc, #44]	; (800b1a8 <HAL_PCD_MspInit+0xbc>)
 800b17c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b180:	6453      	str	r3, [r2, #68]	; 0x44
 800b182:	4b09      	ldr	r3, [pc, #36]	; (800b1a8 <HAL_PCD_MspInit+0xbc>)
 800b184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b18a:	60fb      	str	r3, [r7, #12]
 800b18c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b18e:	2200      	movs	r2, #0
 800b190:	2100      	movs	r1, #0
 800b192:	2043      	movs	r0, #67	; 0x43
 800b194:	f7f8 fd79 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b198:	2043      	movs	r0, #67	; 0x43
 800b19a:	f7f8 fd92 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b19e:	bf00      	nop
 800b1a0:	3728      	adds	r7, #40	; 0x28
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	40023800 	.word	0x40023800
 800b1ac:	40020000 	.word	0x40020000

0800b1b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	4610      	mov	r0, r2
 800b1c8:	f7fe fcc2 	bl	8009b50 <USBD_LL_SetupStage>
}
 800b1cc:	bf00      	nop
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b1e6:	78fa      	ldrb	r2, [r7, #3]
 800b1e8:	6879      	ldr	r1, [r7, #4]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	00db      	lsls	r3, r3, #3
 800b1ee:	1a9b      	subs	r3, r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	440b      	add	r3, r1
 800b1f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	78fb      	ldrb	r3, [r7, #3]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	f7fe fcfc 	bl	8009bfa <USBD_LL_DataOutStage>
}
 800b202:	bf00      	nop
 800b204:	3708      	adds	r7, #8
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b082      	sub	sp, #8
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
 800b212:	460b      	mov	r3, r1
 800b214:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b21c:	78fa      	ldrb	r2, [r7, #3]
 800b21e:	6879      	ldr	r1, [r7, #4]
 800b220:	4613      	mov	r3, r2
 800b222:	00db      	lsls	r3, r3, #3
 800b224:	1a9b      	subs	r3, r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	440b      	add	r3, r1
 800b22a:	3348      	adds	r3, #72	; 0x48
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	78fb      	ldrb	r3, [r7, #3]
 800b230:	4619      	mov	r1, r3
 800b232:	f7fe fd45 	bl	8009cc0 <USBD_LL_DataInStage>
}
 800b236:	bf00      	nop
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b082      	sub	sp, #8
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fe fe59 	bl	8009f04 <USBD_LL_SOF>
}
 800b252:	bf00      	nop
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b084      	sub	sp, #16
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b262:	2301      	movs	r3, #1
 800b264:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	2b02      	cmp	r3, #2
 800b26c:	d001      	beq.n	800b272 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b26e:	f7f8 f989 	bl	8003584 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b278:	7bfa      	ldrb	r2, [r7, #15]
 800b27a:	4611      	mov	r1, r2
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fe fe03 	bl	8009e88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b288:	4618      	mov	r0, r3
 800b28a:	f7fe fdaf 	bl	8009dec <USBD_LL_Reset>
}
 800b28e:	bf00      	nop
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
	...

0800b298 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fe fdfe 	bl	8009ea8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	6812      	ldr	r2, [r2, #0]
 800b2ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b2be:	f043 0301 	orr.w	r3, r3, #1
 800b2c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6a1b      	ldr	r3, [r3, #32]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d005      	beq.n	800b2d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2cc:	4b04      	ldr	r3, [pc, #16]	; (800b2e0 <HAL_PCD_SuspendCallback+0x48>)
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	4a03      	ldr	r2, [pc, #12]	; (800b2e0 <HAL_PCD_SuspendCallback+0x48>)
 800b2d2:	f043 0306 	orr.w	r3, r3, #6
 800b2d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b2d8:	bf00      	nop
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	e000ed00 	.word	0xe000ed00

0800b2e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fe fdee 	bl	8009ed4 <USBD_LL_Resume>
}
 800b2f8:	bf00      	nop
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b312:	78fa      	ldrb	r2, [r7, #3]
 800b314:	4611      	mov	r1, r2
 800b316:	4618      	mov	r0, r3
 800b318:	f7fe fe3c 	bl	8009f94 <USBD_LL_IsoOUTIncomplete>
}
 800b31c:	bf00      	nop
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	460b      	mov	r3, r1
 800b32e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b336:	78fa      	ldrb	r2, [r7, #3]
 800b338:	4611      	mov	r1, r2
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fe fe04 	bl	8009f48 <USBD_LL_IsoINIncomplete>
}
 800b340:	bf00      	nop
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b356:	4618      	mov	r0, r3
 800b358:	f7fe fe42 	bl	8009fe0 <USBD_LL_DevConnected>
}
 800b35c:	bf00      	nop
 800b35e:	3708      	adds	r7, #8
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b372:	4618      	mov	r0, r3
 800b374:	f7fe fe3f 	bl	8009ff6 <USBD_LL_DevDisconnected>
}
 800b378:	bf00      	nop
 800b37a:	3708      	adds	r7, #8
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d13c      	bne.n	800b40a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b390:	4a20      	ldr	r2, [pc, #128]	; (800b414 <USBD_LL_Init+0x94>)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a1e      	ldr	r2, [pc, #120]	; (800b414 <USBD_LL_Init+0x94>)
 800b39c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b3a0:	4b1c      	ldr	r3, [pc, #112]	; (800b414 <USBD_LL_Init+0x94>)
 800b3a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b3a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b3a8:	4b1a      	ldr	r3, [pc, #104]	; (800b414 <USBD_LL_Init+0x94>)
 800b3aa:	2204      	movs	r2, #4
 800b3ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b3ae:	4b19      	ldr	r3, [pc, #100]	; (800b414 <USBD_LL_Init+0x94>)
 800b3b0:	2202      	movs	r2, #2
 800b3b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b3b4:	4b17      	ldr	r3, [pc, #92]	; (800b414 <USBD_LL_Init+0x94>)
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b3ba:	4b16      	ldr	r3, [pc, #88]	; (800b414 <USBD_LL_Init+0x94>)
 800b3bc:	2202      	movs	r2, #2
 800b3be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b3c0:	4b14      	ldr	r3, [pc, #80]	; (800b414 <USBD_LL_Init+0x94>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b3c6:	4b13      	ldr	r3, [pc, #76]	; (800b414 <USBD_LL_Init+0x94>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b3cc:	4b11      	ldr	r3, [pc, #68]	; (800b414 <USBD_LL_Init+0x94>)
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b3d2:	4b10      	ldr	r3, [pc, #64]	; (800b414 <USBD_LL_Init+0x94>)
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b3d8:	4b0e      	ldr	r3, [pc, #56]	; (800b414 <USBD_LL_Init+0x94>)
 800b3da:	2200      	movs	r2, #0
 800b3dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b3de:	480d      	ldr	r0, [pc, #52]	; (800b414 <USBD_LL_Init+0x94>)
 800b3e0:	f7fa f8e9 	bl	80055b6 <HAL_PCD_Init>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d001      	beq.n	800b3ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b3ea:	f7f8 f8cb 	bl	8003584 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b3ee:	2180      	movs	r1, #128	; 0x80
 800b3f0:	4808      	ldr	r0, [pc, #32]	; (800b414 <USBD_LL_Init+0x94>)
 800b3f2:	f7fb fa46 	bl	8006882 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b3f6:	2240      	movs	r2, #64	; 0x40
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	4806      	ldr	r0, [pc, #24]	; (800b414 <USBD_LL_Init+0x94>)
 800b3fc:	f7fb f9fa 	bl	80067f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b400:	2280      	movs	r2, #128	; 0x80
 800b402:	2101      	movs	r1, #1
 800b404:	4803      	ldr	r0, [pc, #12]	; (800b414 <USBD_LL_Init+0x94>)
 800b406:	f7fb f9f5 	bl	80067f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	20002040 	.word	0x20002040

0800b418 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b420:	2300      	movs	r3, #0
 800b422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b424:	2300      	movs	r3, #0
 800b426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fa f9de 	bl	80057f0 <HAL_PCD_Start>
 800b434:	4603      	mov	r3, r0
 800b436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b438:	7bfb      	ldrb	r3, [r7, #15]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f000 f942 	bl	800b6c4 <USBD_Get_USB_Status>
 800b440:	4603      	mov	r3, r0
 800b442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b444:	7bbb      	ldrb	r3, [r7, #14]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	4608      	mov	r0, r1
 800b458:	4611      	mov	r1, r2
 800b45a:	461a      	mov	r2, r3
 800b45c:	4603      	mov	r3, r0
 800b45e:	70fb      	strb	r3, [r7, #3]
 800b460:	460b      	mov	r3, r1
 800b462:	70bb      	strb	r3, [r7, #2]
 800b464:	4613      	mov	r3, r2
 800b466:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b468:	2300      	movs	r3, #0
 800b46a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b476:	78bb      	ldrb	r3, [r7, #2]
 800b478:	883a      	ldrh	r2, [r7, #0]
 800b47a:	78f9      	ldrb	r1, [r7, #3]
 800b47c:	f7fa fdc2 	bl	8006004 <HAL_PCD_EP_Open>
 800b480:	4603      	mov	r3, r0
 800b482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b484:	7bfb      	ldrb	r3, [r7, #15]
 800b486:	4618      	mov	r0, r3
 800b488:	f000 f91c 	bl	800b6c4 <USBD_Get_USB_Status>
 800b48c:	4603      	mov	r3, r0
 800b48e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b490:	7bbb      	ldrb	r3, [r7, #14]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b084      	sub	sp, #16
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b4b4:	78fa      	ldrb	r2, [r7, #3]
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fa fe0b 	bl	80060d4 <HAL_PCD_EP_Close>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4c2:	7bfb      	ldrb	r3, [r7, #15]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f000 f8fd 	bl	800b6c4 <USBD_Get_USB_Status>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b4f2:	78fa      	ldrb	r2, [r7, #3]
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7fa fee3 	bl	80062c2 <HAL_PCD_EP_SetStall>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	4618      	mov	r0, r3
 800b504:	f000 f8de 	bl	800b6c4 <USBD_Get_USB_Status>
 800b508:	4603      	mov	r3, r0
 800b50a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b50c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	460b      	mov	r3, r1
 800b520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b522:	2300      	movs	r3, #0
 800b524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b530:	78fa      	ldrb	r2, [r7, #3]
 800b532:	4611      	mov	r1, r2
 800b534:	4618      	mov	r0, r3
 800b536:	f7fa ff28 	bl	800638a <HAL_PCD_EP_ClrStall>
 800b53a:	4603      	mov	r3, r0
 800b53c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
 800b540:	4618      	mov	r0, r3
 800b542:	f000 f8bf 	bl	800b6c4 <USBD_Get_USB_Status>
 800b546:	4603      	mov	r3, r0
 800b548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b54a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	460b      	mov	r3, r1
 800b55e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b566:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	da0b      	bge.n	800b588 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b570:	78fb      	ldrb	r3, [r7, #3]
 800b572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b576:	68f9      	ldr	r1, [r7, #12]
 800b578:	4613      	mov	r3, r2
 800b57a:	00db      	lsls	r3, r3, #3
 800b57c:	1a9b      	subs	r3, r3, r2
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	440b      	add	r3, r1
 800b582:	333e      	adds	r3, #62	; 0x3e
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	e00b      	b.n	800b5a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b588:	78fb      	ldrb	r3, [r7, #3]
 800b58a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b58e:	68f9      	ldr	r1, [r7, #12]
 800b590:	4613      	mov	r3, r2
 800b592:	00db      	lsls	r3, r3, #3
 800b594:	1a9b      	subs	r3, r3, r2
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	440b      	add	r3, r1
 800b59a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b59e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b5c6:	78fa      	ldrb	r2, [r7, #3]
 800b5c8:	4611      	mov	r1, r2
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fa fcf5 	bl	8005fba <HAL_PCD_SetAddress>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f000 f874 	bl	800b6c4 <USBD_Get_USB_Status>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b086      	sub	sp, #24
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	60f8      	str	r0, [r7, #12]
 800b5f2:	607a      	str	r2, [r7, #4]
 800b5f4:	603b      	str	r3, [r7, #0]
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5fe:	2300      	movs	r3, #0
 800b600:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b608:	7af9      	ldrb	r1, [r7, #11]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	f7fa fe0e 	bl	800622e <HAL_PCD_EP_Transmit>
 800b612:	4603      	mov	r3, r0
 800b614:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b616:	7dfb      	ldrb	r3, [r7, #23]
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 f853 	bl	800b6c4 <USBD_Get_USB_Status>
 800b61e:	4603      	mov	r3, r0
 800b620:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b622:	7dbb      	ldrb	r3, [r7, #22]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3718      	adds	r7, #24
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	607a      	str	r2, [r7, #4]
 800b636:	603b      	str	r3, [r7, #0]
 800b638:	460b      	mov	r3, r1
 800b63a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b64a:	7af9      	ldrb	r1, [r7, #11]
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	f7fa fd8a 	bl	8006168 <HAL_PCD_EP_Receive>
 800b654:	4603      	mov	r3, r0
 800b656:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b658:	7dfb      	ldrb	r3, [r7, #23]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 f832 	bl	800b6c4 <USBD_Get_USB_Status>
 800b660:	4603      	mov	r3, r0
 800b662:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b664:	7dbb      	ldrb	r3, [r7, #22]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3718      	adds	r7, #24
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b082      	sub	sp, #8
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	460b      	mov	r3, r1
 800b678:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b680:	78fa      	ldrb	r2, [r7, #3]
 800b682:	4611      	mov	r1, r2
 800b684:	4618      	mov	r0, r3
 800b686:	f7fa fdba 	bl	80061fe <HAL_PCD_EP_GetRxCount>
 800b68a:	4603      	mov	r3, r0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b69c:	4b03      	ldr	r3, [pc, #12]	; (800b6ac <USBD_static_malloc+0x18>)
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	370c      	adds	r7, #12
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	20000228 	.word	0x20000228

0800b6b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]

}
 800b6b8:	bf00      	nop
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b6d2:	79fb      	ldrb	r3, [r7, #7]
 800b6d4:	2b03      	cmp	r3, #3
 800b6d6:	d817      	bhi.n	800b708 <USBD_Get_USB_Status+0x44>
 800b6d8:	a201      	add	r2, pc, #4	; (adr r2, 800b6e0 <USBD_Get_USB_Status+0x1c>)
 800b6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6de:	bf00      	nop
 800b6e0:	0800b6f1 	.word	0x0800b6f1
 800b6e4:	0800b6f7 	.word	0x0800b6f7
 800b6e8:	0800b6fd 	.word	0x0800b6fd
 800b6ec:	0800b703 	.word	0x0800b703
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b6f4:	e00b      	b.n	800b70e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b6f6:	2303      	movs	r3, #3
 800b6f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b6fa:	e008      	b.n	800b70e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b700:	e005      	b.n	800b70e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b702:	2303      	movs	r3, #3
 800b704:	73fb      	strb	r3, [r7, #15]
    break;
 800b706:	e002      	b.n	800b70e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b708:	2303      	movs	r3, #3
 800b70a:	73fb      	strb	r3, [r7, #15]
    break;
 800b70c:	bf00      	nop
  }
  return usb_status;
 800b70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3714      	adds	r7, #20
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <__errno>:
 800b71c:	4b01      	ldr	r3, [pc, #4]	; (800b724 <__errno+0x8>)
 800b71e:	6818      	ldr	r0, [r3, #0]
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	20000188 	.word	0x20000188

0800b728 <__libc_init_array>:
 800b728:	b570      	push	{r4, r5, r6, lr}
 800b72a:	4d0d      	ldr	r5, [pc, #52]	; (800b760 <__libc_init_array+0x38>)
 800b72c:	4c0d      	ldr	r4, [pc, #52]	; (800b764 <__libc_init_array+0x3c>)
 800b72e:	1b64      	subs	r4, r4, r5
 800b730:	10a4      	asrs	r4, r4, #2
 800b732:	2600      	movs	r6, #0
 800b734:	42a6      	cmp	r6, r4
 800b736:	d109      	bne.n	800b74c <__libc_init_array+0x24>
 800b738:	4d0b      	ldr	r5, [pc, #44]	; (800b768 <__libc_init_array+0x40>)
 800b73a:	4c0c      	ldr	r4, [pc, #48]	; (800b76c <__libc_init_array+0x44>)
 800b73c:	f000 fdd8 	bl	800c2f0 <_init>
 800b740:	1b64      	subs	r4, r4, r5
 800b742:	10a4      	asrs	r4, r4, #2
 800b744:	2600      	movs	r6, #0
 800b746:	42a6      	cmp	r6, r4
 800b748:	d105      	bne.n	800b756 <__libc_init_array+0x2e>
 800b74a:	bd70      	pop	{r4, r5, r6, pc}
 800b74c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b750:	4798      	blx	r3
 800b752:	3601      	adds	r6, #1
 800b754:	e7ee      	b.n	800b734 <__libc_init_array+0xc>
 800b756:	f855 3b04 	ldr.w	r3, [r5], #4
 800b75a:	4798      	blx	r3
 800b75c:	3601      	adds	r6, #1
 800b75e:	e7f2      	b.n	800b746 <__libc_init_array+0x1e>
 800b760:	0800c3e0 	.word	0x0800c3e0
 800b764:	0800c3e0 	.word	0x0800c3e0
 800b768:	0800c3e0 	.word	0x0800c3e0
 800b76c:	0800c3e4 	.word	0x0800c3e4

0800b770 <memset>:
 800b770:	4402      	add	r2, r0
 800b772:	4603      	mov	r3, r0
 800b774:	4293      	cmp	r3, r2
 800b776:	d100      	bne.n	800b77a <memset+0xa>
 800b778:	4770      	bx	lr
 800b77a:	f803 1b01 	strb.w	r1, [r3], #1
 800b77e:	e7f9      	b.n	800b774 <memset+0x4>

0800b780 <asin>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	ed2d 8b02 	vpush	{d8}
 800b786:	ec55 4b10 	vmov	r4, r5, d0
 800b78a:	f000 f869 	bl	800b860 <__ieee754_asin>
 800b78e:	4b16      	ldr	r3, [pc, #88]	; (800b7e8 <asin+0x68>)
 800b790:	eeb0 8a40 	vmov.f32	s16, s0
 800b794:	eef0 8a60 	vmov.f32	s17, s1
 800b798:	f993 3000 	ldrsb.w	r3, [r3]
 800b79c:	3301      	adds	r3, #1
 800b79e:	d01c      	beq.n	800b7da <asin+0x5a>
 800b7a0:	4622      	mov	r2, r4
 800b7a2:	462b      	mov	r3, r5
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	f7f5 f96c 	bl	8000a84 <__aeabi_dcmpun>
 800b7ac:	b9a8      	cbnz	r0, 800b7da <asin+0x5a>
 800b7ae:	ec45 4b10 	vmov	d0, r4, r5
 800b7b2:	f000 fd89 	bl	800c2c8 <fabs>
 800b7b6:	4b0d      	ldr	r3, [pc, #52]	; (800b7ec <asin+0x6c>)
 800b7b8:	ec51 0b10 	vmov	r0, r1, d0
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f7f5 f957 	bl	8000a70 <__aeabi_dcmpgt>
 800b7c2:	b150      	cbz	r0, 800b7da <asin+0x5a>
 800b7c4:	f7ff ffaa 	bl	800b71c <__errno>
 800b7c8:	ecbd 8b02 	vpop	{d8}
 800b7cc:	2321      	movs	r3, #33	; 0x21
 800b7ce:	6003      	str	r3, [r0, #0]
 800b7d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7d4:	4806      	ldr	r0, [pc, #24]	; (800b7f0 <asin+0x70>)
 800b7d6:	f000 bd83 	b.w	800c2e0 <nan>
 800b7da:	eeb0 0a48 	vmov.f32	s0, s16
 800b7de:	eef0 0a68 	vmov.f32	s1, s17
 800b7e2:	ecbd 8b02 	vpop	{d8}
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	200001ec 	.word	0x200001ec
 800b7ec:	3ff00000 	.word	0x3ff00000
 800b7f0:	0800c360 	.word	0x0800c360

0800b7f4 <atan2>:
 800b7f4:	f000 ba48 	b.w	800bc88 <__ieee754_atan2>

0800b7f8 <sqrt>:
 800b7f8:	b538      	push	{r3, r4, r5, lr}
 800b7fa:	ed2d 8b02 	vpush	{d8}
 800b7fe:	ec55 4b10 	vmov	r4, r5, d0
 800b802:	f000 fb0b 	bl	800be1c <__ieee754_sqrt>
 800b806:	4b15      	ldr	r3, [pc, #84]	; (800b85c <sqrt+0x64>)
 800b808:	eeb0 8a40 	vmov.f32	s16, s0
 800b80c:	eef0 8a60 	vmov.f32	s17, s1
 800b810:	f993 3000 	ldrsb.w	r3, [r3]
 800b814:	3301      	adds	r3, #1
 800b816:	d019      	beq.n	800b84c <sqrt+0x54>
 800b818:	4622      	mov	r2, r4
 800b81a:	462b      	mov	r3, r5
 800b81c:	4620      	mov	r0, r4
 800b81e:	4629      	mov	r1, r5
 800b820:	f7f5 f930 	bl	8000a84 <__aeabi_dcmpun>
 800b824:	b990      	cbnz	r0, 800b84c <sqrt+0x54>
 800b826:	2200      	movs	r2, #0
 800b828:	2300      	movs	r3, #0
 800b82a:	4620      	mov	r0, r4
 800b82c:	4629      	mov	r1, r5
 800b82e:	f7f5 f901 	bl	8000a34 <__aeabi_dcmplt>
 800b832:	b158      	cbz	r0, 800b84c <sqrt+0x54>
 800b834:	f7ff ff72 	bl	800b71c <__errno>
 800b838:	2321      	movs	r3, #33	; 0x21
 800b83a:	6003      	str	r3, [r0, #0]
 800b83c:	2200      	movs	r2, #0
 800b83e:	2300      	movs	r3, #0
 800b840:	4610      	mov	r0, r2
 800b842:	4619      	mov	r1, r3
 800b844:	f7f4 ffae 	bl	80007a4 <__aeabi_ddiv>
 800b848:	ec41 0b18 	vmov	d8, r0, r1
 800b84c:	eeb0 0a48 	vmov.f32	s0, s16
 800b850:	eef0 0a68 	vmov.f32	s1, s17
 800b854:	ecbd 8b02 	vpop	{d8}
 800b858:	bd38      	pop	{r3, r4, r5, pc}
 800b85a:	bf00      	nop
 800b85c:	200001ec 	.word	0x200001ec

0800b860 <__ieee754_asin>:
 800b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b864:	ed2d 8b04 	vpush	{d8-d9}
 800b868:	ec55 4b10 	vmov	r4, r5, d0
 800b86c:	4bcc      	ldr	r3, [pc, #816]	; (800bba0 <__ieee754_asin+0x340>)
 800b86e:	b083      	sub	sp, #12
 800b870:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b874:	4598      	cmp	r8, r3
 800b876:	9501      	str	r5, [sp, #4]
 800b878:	dd35      	ble.n	800b8e6 <__ieee754_asin+0x86>
 800b87a:	ee10 3a10 	vmov	r3, s0
 800b87e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800b882:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800b886:	ea58 0303 	orrs.w	r3, r8, r3
 800b88a:	d117      	bne.n	800b8bc <__ieee754_asin+0x5c>
 800b88c:	a3aa      	add	r3, pc, #680	; (adr r3, 800bb38 <__ieee754_asin+0x2d8>)
 800b88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b892:	ee10 0a10 	vmov	r0, s0
 800b896:	4629      	mov	r1, r5
 800b898:	f7f4 fe5a 	bl	8000550 <__aeabi_dmul>
 800b89c:	a3a8      	add	r3, pc, #672	; (adr r3, 800bb40 <__ieee754_asin+0x2e0>)
 800b89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	460f      	mov	r7, r1
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	f7f4 fe51 	bl	8000550 <__aeabi_dmul>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	4639      	mov	r1, r7
 800b8b6:	f7f4 fc95 	bl	80001e4 <__adddf3>
 800b8ba:	e00b      	b.n	800b8d4 <__ieee754_asin+0x74>
 800b8bc:	ee10 2a10 	vmov	r2, s0
 800b8c0:	462b      	mov	r3, r5
 800b8c2:	ee10 0a10 	vmov	r0, s0
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	f7f4 fc8a 	bl	80001e0 <__aeabi_dsub>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	f7f4 ff68 	bl	80007a4 <__aeabi_ddiv>
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	460d      	mov	r5, r1
 800b8d8:	ec45 4b10 	vmov	d0, r4, r5
 800b8dc:	b003      	add	sp, #12
 800b8de:	ecbd 8b04 	vpop	{d8-d9}
 800b8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e6:	4baf      	ldr	r3, [pc, #700]	; (800bba4 <__ieee754_asin+0x344>)
 800b8e8:	4598      	cmp	r8, r3
 800b8ea:	dc11      	bgt.n	800b910 <__ieee754_asin+0xb0>
 800b8ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b8f0:	f280 80ae 	bge.w	800ba50 <__ieee754_asin+0x1f0>
 800b8f4:	a394      	add	r3, pc, #592	; (adr r3, 800bb48 <__ieee754_asin+0x2e8>)
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	ee10 0a10 	vmov	r0, s0
 800b8fe:	4629      	mov	r1, r5
 800b900:	f7f4 fc70 	bl	80001e4 <__adddf3>
 800b904:	4ba8      	ldr	r3, [pc, #672]	; (800bba8 <__ieee754_asin+0x348>)
 800b906:	2200      	movs	r2, #0
 800b908:	f7f5 f8b2 	bl	8000a70 <__aeabi_dcmpgt>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d1e3      	bne.n	800b8d8 <__ieee754_asin+0x78>
 800b910:	ec45 4b10 	vmov	d0, r4, r5
 800b914:	f000 fcd8 	bl	800c2c8 <fabs>
 800b918:	49a3      	ldr	r1, [pc, #652]	; (800bba8 <__ieee754_asin+0x348>)
 800b91a:	ec53 2b10 	vmov	r2, r3, d0
 800b91e:	2000      	movs	r0, #0
 800b920:	f7f4 fc5e 	bl	80001e0 <__aeabi_dsub>
 800b924:	4ba1      	ldr	r3, [pc, #644]	; (800bbac <__ieee754_asin+0x34c>)
 800b926:	2200      	movs	r2, #0
 800b928:	f7f4 fe12 	bl	8000550 <__aeabi_dmul>
 800b92c:	a388      	add	r3, pc, #544	; (adr r3, 800bb50 <__ieee754_asin+0x2f0>)
 800b92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b932:	4604      	mov	r4, r0
 800b934:	460d      	mov	r5, r1
 800b936:	f7f4 fe0b 	bl	8000550 <__aeabi_dmul>
 800b93a:	a387      	add	r3, pc, #540	; (adr r3, 800bb58 <__ieee754_asin+0x2f8>)
 800b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b940:	f7f4 fc50 	bl	80001e4 <__adddf3>
 800b944:	4622      	mov	r2, r4
 800b946:	462b      	mov	r3, r5
 800b948:	f7f4 fe02 	bl	8000550 <__aeabi_dmul>
 800b94c:	a384      	add	r3, pc, #528	; (adr r3, 800bb60 <__ieee754_asin+0x300>)
 800b94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b952:	f7f4 fc45 	bl	80001e0 <__aeabi_dsub>
 800b956:	4622      	mov	r2, r4
 800b958:	462b      	mov	r3, r5
 800b95a:	f7f4 fdf9 	bl	8000550 <__aeabi_dmul>
 800b95e:	a382      	add	r3, pc, #520	; (adr r3, 800bb68 <__ieee754_asin+0x308>)
 800b960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b964:	f7f4 fc3e 	bl	80001e4 <__adddf3>
 800b968:	4622      	mov	r2, r4
 800b96a:	462b      	mov	r3, r5
 800b96c:	f7f4 fdf0 	bl	8000550 <__aeabi_dmul>
 800b970:	a37f      	add	r3, pc, #508	; (adr r3, 800bb70 <__ieee754_asin+0x310>)
 800b972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b976:	f7f4 fc33 	bl	80001e0 <__aeabi_dsub>
 800b97a:	4622      	mov	r2, r4
 800b97c:	462b      	mov	r3, r5
 800b97e:	f7f4 fde7 	bl	8000550 <__aeabi_dmul>
 800b982:	a37d      	add	r3, pc, #500	; (adr r3, 800bb78 <__ieee754_asin+0x318>)
 800b984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b988:	f7f4 fc2c 	bl	80001e4 <__adddf3>
 800b98c:	4622      	mov	r2, r4
 800b98e:	462b      	mov	r3, r5
 800b990:	f7f4 fdde 	bl	8000550 <__aeabi_dmul>
 800b994:	a37a      	add	r3, pc, #488	; (adr r3, 800bb80 <__ieee754_asin+0x320>)
 800b996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99a:	ec41 0b18 	vmov	d8, r0, r1
 800b99e:	4620      	mov	r0, r4
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	f7f4 fdd5 	bl	8000550 <__aeabi_dmul>
 800b9a6:	a378      	add	r3, pc, #480	; (adr r3, 800bb88 <__ieee754_asin+0x328>)
 800b9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ac:	f7f4 fc18 	bl	80001e0 <__aeabi_dsub>
 800b9b0:	4622      	mov	r2, r4
 800b9b2:	462b      	mov	r3, r5
 800b9b4:	f7f4 fdcc 	bl	8000550 <__aeabi_dmul>
 800b9b8:	a375      	add	r3, pc, #468	; (adr r3, 800bb90 <__ieee754_asin+0x330>)
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	f7f4 fc11 	bl	80001e4 <__adddf3>
 800b9c2:	4622      	mov	r2, r4
 800b9c4:	462b      	mov	r3, r5
 800b9c6:	f7f4 fdc3 	bl	8000550 <__aeabi_dmul>
 800b9ca:	a373      	add	r3, pc, #460	; (adr r3, 800bb98 <__ieee754_asin+0x338>)
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	f7f4 fc06 	bl	80001e0 <__aeabi_dsub>
 800b9d4:	4622      	mov	r2, r4
 800b9d6:	462b      	mov	r3, r5
 800b9d8:	f7f4 fdba 	bl	8000550 <__aeabi_dmul>
 800b9dc:	4b72      	ldr	r3, [pc, #456]	; (800bba8 <__ieee754_asin+0x348>)
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f7f4 fc00 	bl	80001e4 <__adddf3>
 800b9e4:	ec45 4b10 	vmov	d0, r4, r5
 800b9e8:	4606      	mov	r6, r0
 800b9ea:	460f      	mov	r7, r1
 800b9ec:	f000 fa16 	bl	800be1c <__ieee754_sqrt>
 800b9f0:	4b6f      	ldr	r3, [pc, #444]	; (800bbb0 <__ieee754_asin+0x350>)
 800b9f2:	4598      	cmp	r8, r3
 800b9f4:	ec5b ab10 	vmov	sl, fp, d0
 800b9f8:	f340 80dc 	ble.w	800bbb4 <__ieee754_asin+0x354>
 800b9fc:	4632      	mov	r2, r6
 800b9fe:	463b      	mov	r3, r7
 800ba00:	ec51 0b18 	vmov	r0, r1, d8
 800ba04:	f7f4 fece 	bl	80007a4 <__aeabi_ddiv>
 800ba08:	4652      	mov	r2, sl
 800ba0a:	465b      	mov	r3, fp
 800ba0c:	f7f4 fda0 	bl	8000550 <__aeabi_dmul>
 800ba10:	4652      	mov	r2, sl
 800ba12:	465b      	mov	r3, fp
 800ba14:	f7f4 fbe6 	bl	80001e4 <__adddf3>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	f7f4 fbe2 	bl	80001e4 <__adddf3>
 800ba20:	a347      	add	r3, pc, #284	; (adr r3, 800bb40 <__ieee754_asin+0x2e0>)
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	f7f4 fbdb 	bl	80001e0 <__aeabi_dsub>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	a142      	add	r1, pc, #264	; (adr r1, 800bb38 <__ieee754_asin+0x2d8>)
 800ba30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba34:	f7f4 fbd4 	bl	80001e0 <__aeabi_dsub>
 800ba38:	9b01      	ldr	r3, [sp, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	bfdc      	itt	le
 800ba3e:	4602      	movle	r2, r0
 800ba40:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800ba44:	4604      	mov	r4, r0
 800ba46:	460d      	mov	r5, r1
 800ba48:	bfdc      	itt	le
 800ba4a:	4614      	movle	r4, r2
 800ba4c:	461d      	movle	r5, r3
 800ba4e:	e743      	b.n	800b8d8 <__ieee754_asin+0x78>
 800ba50:	ee10 2a10 	vmov	r2, s0
 800ba54:	ee10 0a10 	vmov	r0, s0
 800ba58:	462b      	mov	r3, r5
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	f7f4 fd78 	bl	8000550 <__aeabi_dmul>
 800ba60:	a33b      	add	r3, pc, #236	; (adr r3, 800bb50 <__ieee754_asin+0x2f0>)
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	4606      	mov	r6, r0
 800ba68:	460f      	mov	r7, r1
 800ba6a:	f7f4 fd71 	bl	8000550 <__aeabi_dmul>
 800ba6e:	a33a      	add	r3, pc, #232	; (adr r3, 800bb58 <__ieee754_asin+0x2f8>)
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	f7f4 fbb6 	bl	80001e4 <__adddf3>
 800ba78:	4632      	mov	r2, r6
 800ba7a:	463b      	mov	r3, r7
 800ba7c:	f7f4 fd68 	bl	8000550 <__aeabi_dmul>
 800ba80:	a337      	add	r3, pc, #220	; (adr r3, 800bb60 <__ieee754_asin+0x300>)
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	f7f4 fbab 	bl	80001e0 <__aeabi_dsub>
 800ba8a:	4632      	mov	r2, r6
 800ba8c:	463b      	mov	r3, r7
 800ba8e:	f7f4 fd5f 	bl	8000550 <__aeabi_dmul>
 800ba92:	a335      	add	r3, pc, #212	; (adr r3, 800bb68 <__ieee754_asin+0x308>)
 800ba94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba98:	f7f4 fba4 	bl	80001e4 <__adddf3>
 800ba9c:	4632      	mov	r2, r6
 800ba9e:	463b      	mov	r3, r7
 800baa0:	f7f4 fd56 	bl	8000550 <__aeabi_dmul>
 800baa4:	a332      	add	r3, pc, #200	; (adr r3, 800bb70 <__ieee754_asin+0x310>)
 800baa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baaa:	f7f4 fb99 	bl	80001e0 <__aeabi_dsub>
 800baae:	4632      	mov	r2, r6
 800bab0:	463b      	mov	r3, r7
 800bab2:	f7f4 fd4d 	bl	8000550 <__aeabi_dmul>
 800bab6:	a330      	add	r3, pc, #192	; (adr r3, 800bb78 <__ieee754_asin+0x318>)
 800bab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babc:	f7f4 fb92 	bl	80001e4 <__adddf3>
 800bac0:	4632      	mov	r2, r6
 800bac2:	463b      	mov	r3, r7
 800bac4:	f7f4 fd44 	bl	8000550 <__aeabi_dmul>
 800bac8:	a32d      	add	r3, pc, #180	; (adr r3, 800bb80 <__ieee754_asin+0x320>)
 800baca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bace:	4680      	mov	r8, r0
 800bad0:	4689      	mov	r9, r1
 800bad2:	4630      	mov	r0, r6
 800bad4:	4639      	mov	r1, r7
 800bad6:	f7f4 fd3b 	bl	8000550 <__aeabi_dmul>
 800bada:	a32b      	add	r3, pc, #172	; (adr r3, 800bb88 <__ieee754_asin+0x328>)
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	f7f4 fb7e 	bl	80001e0 <__aeabi_dsub>
 800bae4:	4632      	mov	r2, r6
 800bae6:	463b      	mov	r3, r7
 800bae8:	f7f4 fd32 	bl	8000550 <__aeabi_dmul>
 800baec:	a328      	add	r3, pc, #160	; (adr r3, 800bb90 <__ieee754_asin+0x330>)
 800baee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf2:	f7f4 fb77 	bl	80001e4 <__adddf3>
 800baf6:	4632      	mov	r2, r6
 800baf8:	463b      	mov	r3, r7
 800bafa:	f7f4 fd29 	bl	8000550 <__aeabi_dmul>
 800bafe:	a326      	add	r3, pc, #152	; (adr r3, 800bb98 <__ieee754_asin+0x338>)
 800bb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb04:	f7f4 fb6c 	bl	80001e0 <__aeabi_dsub>
 800bb08:	4632      	mov	r2, r6
 800bb0a:	463b      	mov	r3, r7
 800bb0c:	f7f4 fd20 	bl	8000550 <__aeabi_dmul>
 800bb10:	4b25      	ldr	r3, [pc, #148]	; (800bba8 <__ieee754_asin+0x348>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	f7f4 fb66 	bl	80001e4 <__adddf3>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	4649      	mov	r1, r9
 800bb20:	f7f4 fe40 	bl	80007a4 <__aeabi_ddiv>
 800bb24:	4622      	mov	r2, r4
 800bb26:	462b      	mov	r3, r5
 800bb28:	f7f4 fd12 	bl	8000550 <__aeabi_dmul>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	460b      	mov	r3, r1
 800bb30:	4620      	mov	r0, r4
 800bb32:	4629      	mov	r1, r5
 800bb34:	e6bf      	b.n	800b8b6 <__ieee754_asin+0x56>
 800bb36:	bf00      	nop
 800bb38:	54442d18 	.word	0x54442d18
 800bb3c:	3ff921fb 	.word	0x3ff921fb
 800bb40:	33145c07 	.word	0x33145c07
 800bb44:	3c91a626 	.word	0x3c91a626
 800bb48:	8800759c 	.word	0x8800759c
 800bb4c:	7e37e43c 	.word	0x7e37e43c
 800bb50:	0dfdf709 	.word	0x0dfdf709
 800bb54:	3f023de1 	.word	0x3f023de1
 800bb58:	7501b288 	.word	0x7501b288
 800bb5c:	3f49efe0 	.word	0x3f49efe0
 800bb60:	b5688f3b 	.word	0xb5688f3b
 800bb64:	3fa48228 	.word	0x3fa48228
 800bb68:	0e884455 	.word	0x0e884455
 800bb6c:	3fc9c155 	.word	0x3fc9c155
 800bb70:	03eb6f7d 	.word	0x03eb6f7d
 800bb74:	3fd4d612 	.word	0x3fd4d612
 800bb78:	55555555 	.word	0x55555555
 800bb7c:	3fc55555 	.word	0x3fc55555
 800bb80:	b12e9282 	.word	0xb12e9282
 800bb84:	3fb3b8c5 	.word	0x3fb3b8c5
 800bb88:	1b8d0159 	.word	0x1b8d0159
 800bb8c:	3fe6066c 	.word	0x3fe6066c
 800bb90:	9c598ac8 	.word	0x9c598ac8
 800bb94:	40002ae5 	.word	0x40002ae5
 800bb98:	1c8a2d4b 	.word	0x1c8a2d4b
 800bb9c:	40033a27 	.word	0x40033a27
 800bba0:	3fefffff 	.word	0x3fefffff
 800bba4:	3fdfffff 	.word	0x3fdfffff
 800bba8:	3ff00000 	.word	0x3ff00000
 800bbac:	3fe00000 	.word	0x3fe00000
 800bbb0:	3fef3332 	.word	0x3fef3332
 800bbb4:	ee10 2a10 	vmov	r2, s0
 800bbb8:	ee10 0a10 	vmov	r0, s0
 800bbbc:	465b      	mov	r3, fp
 800bbbe:	4659      	mov	r1, fp
 800bbc0:	f7f4 fb10 	bl	80001e4 <__adddf3>
 800bbc4:	4632      	mov	r2, r6
 800bbc6:	463b      	mov	r3, r7
 800bbc8:	ec41 0b19 	vmov	d9, r0, r1
 800bbcc:	ec51 0b18 	vmov	r0, r1, d8
 800bbd0:	f7f4 fde8 	bl	80007a4 <__aeabi_ddiv>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	ec51 0b19 	vmov	r0, r1, d9
 800bbdc:	f7f4 fcb8 	bl	8000550 <__aeabi_dmul>
 800bbe0:	f04f 0800 	mov.w	r8, #0
 800bbe4:	4606      	mov	r6, r0
 800bbe6:	460f      	mov	r7, r1
 800bbe8:	4642      	mov	r2, r8
 800bbea:	465b      	mov	r3, fp
 800bbec:	4640      	mov	r0, r8
 800bbee:	4659      	mov	r1, fp
 800bbf0:	f7f4 fcae 	bl	8000550 <__aeabi_dmul>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	4629      	mov	r1, r5
 800bbfc:	f7f4 faf0 	bl	80001e0 <__aeabi_dsub>
 800bc00:	4642      	mov	r2, r8
 800bc02:	4604      	mov	r4, r0
 800bc04:	460d      	mov	r5, r1
 800bc06:	465b      	mov	r3, fp
 800bc08:	4650      	mov	r0, sl
 800bc0a:	4659      	mov	r1, fp
 800bc0c:	f7f4 faea 	bl	80001e4 <__adddf3>
 800bc10:	4602      	mov	r2, r0
 800bc12:	460b      	mov	r3, r1
 800bc14:	4620      	mov	r0, r4
 800bc16:	4629      	mov	r1, r5
 800bc18:	f7f4 fdc4 	bl	80007a4 <__aeabi_ddiv>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	460b      	mov	r3, r1
 800bc20:	f7f4 fae0 	bl	80001e4 <__adddf3>
 800bc24:	4602      	mov	r2, r0
 800bc26:	460b      	mov	r3, r1
 800bc28:	a113      	add	r1, pc, #76	; (adr r1, 800bc78 <__ieee754_asin+0x418>)
 800bc2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc2e:	f7f4 fad7 	bl	80001e0 <__aeabi_dsub>
 800bc32:	4602      	mov	r2, r0
 800bc34:	460b      	mov	r3, r1
 800bc36:	4630      	mov	r0, r6
 800bc38:	4639      	mov	r1, r7
 800bc3a:	f7f4 fad1 	bl	80001e0 <__aeabi_dsub>
 800bc3e:	4642      	mov	r2, r8
 800bc40:	4604      	mov	r4, r0
 800bc42:	460d      	mov	r5, r1
 800bc44:	465b      	mov	r3, fp
 800bc46:	4640      	mov	r0, r8
 800bc48:	4659      	mov	r1, fp
 800bc4a:	f7f4 facb 	bl	80001e4 <__adddf3>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	460b      	mov	r3, r1
 800bc52:	a10b      	add	r1, pc, #44	; (adr r1, 800bc80 <__ieee754_asin+0x420>)
 800bc54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc58:	f7f4 fac2 	bl	80001e0 <__aeabi_dsub>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	460b      	mov	r3, r1
 800bc60:	4620      	mov	r0, r4
 800bc62:	4629      	mov	r1, r5
 800bc64:	f7f4 fabc 	bl	80001e0 <__aeabi_dsub>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	a104      	add	r1, pc, #16	; (adr r1, 800bc80 <__ieee754_asin+0x420>)
 800bc6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc72:	e6df      	b.n	800ba34 <__ieee754_asin+0x1d4>
 800bc74:	f3af 8000 	nop.w
 800bc78:	33145c07 	.word	0x33145c07
 800bc7c:	3c91a626 	.word	0x3c91a626
 800bc80:	54442d18 	.word	0x54442d18
 800bc84:	3fe921fb 	.word	0x3fe921fb

0800bc88 <__ieee754_atan2>:
 800bc88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc8c:	ec57 6b11 	vmov	r6, r7, d1
 800bc90:	4273      	negs	r3, r6
 800bc92:	f8df e184 	ldr.w	lr, [pc, #388]	; 800be18 <__ieee754_atan2+0x190>
 800bc96:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bc9a:	4333      	orrs	r3, r6
 800bc9c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bca0:	4573      	cmp	r3, lr
 800bca2:	ec51 0b10 	vmov	r0, r1, d0
 800bca6:	ee11 8a10 	vmov	r8, s2
 800bcaa:	d80a      	bhi.n	800bcc2 <__ieee754_atan2+0x3a>
 800bcac:	4244      	negs	r4, r0
 800bcae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bcb2:	4304      	orrs	r4, r0
 800bcb4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bcb8:	4574      	cmp	r4, lr
 800bcba:	ee10 9a10 	vmov	r9, s0
 800bcbe:	468c      	mov	ip, r1
 800bcc0:	d907      	bls.n	800bcd2 <__ieee754_atan2+0x4a>
 800bcc2:	4632      	mov	r2, r6
 800bcc4:	463b      	mov	r3, r7
 800bcc6:	f7f4 fa8d 	bl	80001e4 <__adddf3>
 800bcca:	ec41 0b10 	vmov	d0, r0, r1
 800bcce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcd2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bcd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bcda:	4334      	orrs	r4, r6
 800bcdc:	d103      	bne.n	800bce6 <__ieee754_atan2+0x5e>
 800bcde:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce2:	f000 b951 	b.w	800bf88 <atan>
 800bce6:	17bc      	asrs	r4, r7, #30
 800bce8:	f004 0402 	and.w	r4, r4, #2
 800bcec:	ea53 0909 	orrs.w	r9, r3, r9
 800bcf0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bcf4:	d107      	bne.n	800bd06 <__ieee754_atan2+0x7e>
 800bcf6:	2c02      	cmp	r4, #2
 800bcf8:	d060      	beq.n	800bdbc <__ieee754_atan2+0x134>
 800bcfa:	2c03      	cmp	r4, #3
 800bcfc:	d1e5      	bne.n	800bcca <__ieee754_atan2+0x42>
 800bcfe:	a142      	add	r1, pc, #264	; (adr r1, 800be08 <__ieee754_atan2+0x180>)
 800bd00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd04:	e7e1      	b.n	800bcca <__ieee754_atan2+0x42>
 800bd06:	ea52 0808 	orrs.w	r8, r2, r8
 800bd0a:	d106      	bne.n	800bd1a <__ieee754_atan2+0x92>
 800bd0c:	f1bc 0f00 	cmp.w	ip, #0
 800bd10:	da5f      	bge.n	800bdd2 <__ieee754_atan2+0x14a>
 800bd12:	a13f      	add	r1, pc, #252	; (adr r1, 800be10 <__ieee754_atan2+0x188>)
 800bd14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd18:	e7d7      	b.n	800bcca <__ieee754_atan2+0x42>
 800bd1a:	4572      	cmp	r2, lr
 800bd1c:	d10f      	bne.n	800bd3e <__ieee754_atan2+0xb6>
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	f104 34ff 	add.w	r4, r4, #4294967295
 800bd24:	d107      	bne.n	800bd36 <__ieee754_atan2+0xae>
 800bd26:	2c02      	cmp	r4, #2
 800bd28:	d84c      	bhi.n	800bdc4 <__ieee754_atan2+0x13c>
 800bd2a:	4b35      	ldr	r3, [pc, #212]	; (800be00 <__ieee754_atan2+0x178>)
 800bd2c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bd30:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bd34:	e7c9      	b.n	800bcca <__ieee754_atan2+0x42>
 800bd36:	2c02      	cmp	r4, #2
 800bd38:	d848      	bhi.n	800bdcc <__ieee754_atan2+0x144>
 800bd3a:	4b32      	ldr	r3, [pc, #200]	; (800be04 <__ieee754_atan2+0x17c>)
 800bd3c:	e7f6      	b.n	800bd2c <__ieee754_atan2+0xa4>
 800bd3e:	4573      	cmp	r3, lr
 800bd40:	d0e4      	beq.n	800bd0c <__ieee754_atan2+0x84>
 800bd42:	1a9b      	subs	r3, r3, r2
 800bd44:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bd48:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bd4c:	da1e      	bge.n	800bd8c <__ieee754_atan2+0x104>
 800bd4e:	2f00      	cmp	r7, #0
 800bd50:	da01      	bge.n	800bd56 <__ieee754_atan2+0xce>
 800bd52:	323c      	adds	r2, #60	; 0x3c
 800bd54:	db1e      	blt.n	800bd94 <__ieee754_atan2+0x10c>
 800bd56:	4632      	mov	r2, r6
 800bd58:	463b      	mov	r3, r7
 800bd5a:	f7f4 fd23 	bl	80007a4 <__aeabi_ddiv>
 800bd5e:	ec41 0b10 	vmov	d0, r0, r1
 800bd62:	f000 fab1 	bl	800c2c8 <fabs>
 800bd66:	f000 f90f 	bl	800bf88 <atan>
 800bd6a:	ec51 0b10 	vmov	r0, r1, d0
 800bd6e:	2c01      	cmp	r4, #1
 800bd70:	d013      	beq.n	800bd9a <__ieee754_atan2+0x112>
 800bd72:	2c02      	cmp	r4, #2
 800bd74:	d015      	beq.n	800bda2 <__ieee754_atan2+0x11a>
 800bd76:	2c00      	cmp	r4, #0
 800bd78:	d0a7      	beq.n	800bcca <__ieee754_atan2+0x42>
 800bd7a:	a319      	add	r3, pc, #100	; (adr r3, 800bde0 <__ieee754_atan2+0x158>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f7f4 fa2e 	bl	80001e0 <__aeabi_dsub>
 800bd84:	a318      	add	r3, pc, #96	; (adr r3, 800bde8 <__ieee754_atan2+0x160>)
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	e014      	b.n	800bdb6 <__ieee754_atan2+0x12e>
 800bd8c:	a118      	add	r1, pc, #96	; (adr r1, 800bdf0 <__ieee754_atan2+0x168>)
 800bd8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd92:	e7ec      	b.n	800bd6e <__ieee754_atan2+0xe6>
 800bd94:	2000      	movs	r0, #0
 800bd96:	2100      	movs	r1, #0
 800bd98:	e7e9      	b.n	800bd6e <__ieee754_atan2+0xe6>
 800bd9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd9e:	4619      	mov	r1, r3
 800bda0:	e793      	b.n	800bcca <__ieee754_atan2+0x42>
 800bda2:	a30f      	add	r3, pc, #60	; (adr r3, 800bde0 <__ieee754_atan2+0x158>)
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	f7f4 fa1a 	bl	80001e0 <__aeabi_dsub>
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	a10d      	add	r1, pc, #52	; (adr r1, 800bde8 <__ieee754_atan2+0x160>)
 800bdb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdb6:	f7f4 fa13 	bl	80001e0 <__aeabi_dsub>
 800bdba:	e786      	b.n	800bcca <__ieee754_atan2+0x42>
 800bdbc:	a10a      	add	r1, pc, #40	; (adr r1, 800bde8 <__ieee754_atan2+0x160>)
 800bdbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdc2:	e782      	b.n	800bcca <__ieee754_atan2+0x42>
 800bdc4:	a10c      	add	r1, pc, #48	; (adr r1, 800bdf8 <__ieee754_atan2+0x170>)
 800bdc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdca:	e77e      	b.n	800bcca <__ieee754_atan2+0x42>
 800bdcc:	2000      	movs	r0, #0
 800bdce:	2100      	movs	r1, #0
 800bdd0:	e77b      	b.n	800bcca <__ieee754_atan2+0x42>
 800bdd2:	a107      	add	r1, pc, #28	; (adr r1, 800bdf0 <__ieee754_atan2+0x168>)
 800bdd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdd8:	e777      	b.n	800bcca <__ieee754_atan2+0x42>
 800bdda:	bf00      	nop
 800bddc:	f3af 8000 	nop.w
 800bde0:	33145c07 	.word	0x33145c07
 800bde4:	3ca1a626 	.word	0x3ca1a626
 800bde8:	54442d18 	.word	0x54442d18
 800bdec:	400921fb 	.word	0x400921fb
 800bdf0:	54442d18 	.word	0x54442d18
 800bdf4:	3ff921fb 	.word	0x3ff921fb
 800bdf8:	54442d18 	.word	0x54442d18
 800bdfc:	3fe921fb 	.word	0x3fe921fb
 800be00:	0800c368 	.word	0x0800c368
 800be04:	0800c380 	.word	0x0800c380
 800be08:	54442d18 	.word	0x54442d18
 800be0c:	c00921fb 	.word	0xc00921fb
 800be10:	54442d18 	.word	0x54442d18
 800be14:	bff921fb 	.word	0xbff921fb
 800be18:	7ff00000 	.word	0x7ff00000

0800be1c <__ieee754_sqrt>:
 800be1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be20:	ec55 4b10 	vmov	r4, r5, d0
 800be24:	4e56      	ldr	r6, [pc, #344]	; (800bf80 <__ieee754_sqrt+0x164>)
 800be26:	43ae      	bics	r6, r5
 800be28:	ee10 0a10 	vmov	r0, s0
 800be2c:	ee10 3a10 	vmov	r3, s0
 800be30:	4629      	mov	r1, r5
 800be32:	462a      	mov	r2, r5
 800be34:	d110      	bne.n	800be58 <__ieee754_sqrt+0x3c>
 800be36:	ee10 2a10 	vmov	r2, s0
 800be3a:	462b      	mov	r3, r5
 800be3c:	f7f4 fb88 	bl	8000550 <__aeabi_dmul>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4620      	mov	r0, r4
 800be46:	4629      	mov	r1, r5
 800be48:	f7f4 f9cc 	bl	80001e4 <__adddf3>
 800be4c:	4604      	mov	r4, r0
 800be4e:	460d      	mov	r5, r1
 800be50:	ec45 4b10 	vmov	d0, r4, r5
 800be54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be58:	2d00      	cmp	r5, #0
 800be5a:	dc10      	bgt.n	800be7e <__ieee754_sqrt+0x62>
 800be5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800be60:	4330      	orrs	r0, r6
 800be62:	d0f5      	beq.n	800be50 <__ieee754_sqrt+0x34>
 800be64:	b15d      	cbz	r5, 800be7e <__ieee754_sqrt+0x62>
 800be66:	ee10 2a10 	vmov	r2, s0
 800be6a:	462b      	mov	r3, r5
 800be6c:	ee10 0a10 	vmov	r0, s0
 800be70:	f7f4 f9b6 	bl	80001e0 <__aeabi_dsub>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	f7f4 fc94 	bl	80007a4 <__aeabi_ddiv>
 800be7c:	e7e6      	b.n	800be4c <__ieee754_sqrt+0x30>
 800be7e:	1509      	asrs	r1, r1, #20
 800be80:	d076      	beq.n	800bf70 <__ieee754_sqrt+0x154>
 800be82:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800be86:	07ce      	lsls	r6, r1, #31
 800be88:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800be8c:	bf5e      	ittt	pl
 800be8e:	0fda      	lsrpl	r2, r3, #31
 800be90:	005b      	lslpl	r3, r3, #1
 800be92:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800be96:	0fda      	lsrs	r2, r3, #31
 800be98:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800be9c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800bea0:	2000      	movs	r0, #0
 800bea2:	106d      	asrs	r5, r5, #1
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	f04f 0e16 	mov.w	lr, #22
 800beaa:	4684      	mov	ip, r0
 800beac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800beb0:	eb0c 0401 	add.w	r4, ip, r1
 800beb4:	4294      	cmp	r4, r2
 800beb6:	bfde      	ittt	le
 800beb8:	1b12      	suble	r2, r2, r4
 800beba:	eb04 0c01 	addle.w	ip, r4, r1
 800bebe:	1840      	addle	r0, r0, r1
 800bec0:	0052      	lsls	r2, r2, #1
 800bec2:	f1be 0e01 	subs.w	lr, lr, #1
 800bec6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800beca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bece:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bed2:	d1ed      	bne.n	800beb0 <__ieee754_sqrt+0x94>
 800bed4:	4671      	mov	r1, lr
 800bed6:	2720      	movs	r7, #32
 800bed8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bedc:	4562      	cmp	r2, ip
 800bede:	eb04 060e 	add.w	r6, r4, lr
 800bee2:	dc02      	bgt.n	800beea <__ieee754_sqrt+0xce>
 800bee4:	d113      	bne.n	800bf0e <__ieee754_sqrt+0xf2>
 800bee6:	429e      	cmp	r6, r3
 800bee8:	d811      	bhi.n	800bf0e <__ieee754_sqrt+0xf2>
 800beea:	2e00      	cmp	r6, #0
 800beec:	eb06 0e04 	add.w	lr, r6, r4
 800bef0:	da43      	bge.n	800bf7a <__ieee754_sqrt+0x15e>
 800bef2:	f1be 0f00 	cmp.w	lr, #0
 800bef6:	db40      	blt.n	800bf7a <__ieee754_sqrt+0x15e>
 800bef8:	f10c 0801 	add.w	r8, ip, #1
 800befc:	eba2 020c 	sub.w	r2, r2, ip
 800bf00:	429e      	cmp	r6, r3
 800bf02:	bf88      	it	hi
 800bf04:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bf08:	1b9b      	subs	r3, r3, r6
 800bf0a:	4421      	add	r1, r4
 800bf0c:	46c4      	mov	ip, r8
 800bf0e:	0052      	lsls	r2, r2, #1
 800bf10:	3f01      	subs	r7, #1
 800bf12:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bf16:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bf1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bf1e:	d1dd      	bne.n	800bedc <__ieee754_sqrt+0xc0>
 800bf20:	4313      	orrs	r3, r2
 800bf22:	d006      	beq.n	800bf32 <__ieee754_sqrt+0x116>
 800bf24:	1c4c      	adds	r4, r1, #1
 800bf26:	bf13      	iteet	ne
 800bf28:	3101      	addne	r1, #1
 800bf2a:	3001      	addeq	r0, #1
 800bf2c:	4639      	moveq	r1, r7
 800bf2e:	f021 0101 	bicne.w	r1, r1, #1
 800bf32:	1043      	asrs	r3, r0, #1
 800bf34:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bf38:	0849      	lsrs	r1, r1, #1
 800bf3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bf3e:	07c2      	lsls	r2, r0, #31
 800bf40:	bf48      	it	mi
 800bf42:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bf46:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800bf4a:	460c      	mov	r4, r1
 800bf4c:	463d      	mov	r5, r7
 800bf4e:	e77f      	b.n	800be50 <__ieee754_sqrt+0x34>
 800bf50:	0ada      	lsrs	r2, r3, #11
 800bf52:	3815      	subs	r0, #21
 800bf54:	055b      	lsls	r3, r3, #21
 800bf56:	2a00      	cmp	r2, #0
 800bf58:	d0fa      	beq.n	800bf50 <__ieee754_sqrt+0x134>
 800bf5a:	02d7      	lsls	r7, r2, #11
 800bf5c:	d50a      	bpl.n	800bf74 <__ieee754_sqrt+0x158>
 800bf5e:	f1c1 0420 	rsb	r4, r1, #32
 800bf62:	fa23 f404 	lsr.w	r4, r3, r4
 800bf66:	1e4d      	subs	r5, r1, #1
 800bf68:	408b      	lsls	r3, r1
 800bf6a:	4322      	orrs	r2, r4
 800bf6c:	1b41      	subs	r1, r0, r5
 800bf6e:	e788      	b.n	800be82 <__ieee754_sqrt+0x66>
 800bf70:	4608      	mov	r0, r1
 800bf72:	e7f0      	b.n	800bf56 <__ieee754_sqrt+0x13a>
 800bf74:	0052      	lsls	r2, r2, #1
 800bf76:	3101      	adds	r1, #1
 800bf78:	e7ef      	b.n	800bf5a <__ieee754_sqrt+0x13e>
 800bf7a:	46e0      	mov	r8, ip
 800bf7c:	e7be      	b.n	800befc <__ieee754_sqrt+0xe0>
 800bf7e:	bf00      	nop
 800bf80:	7ff00000 	.word	0x7ff00000
 800bf84:	00000000 	.word	0x00000000

0800bf88 <atan>:
 800bf88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8c:	ec55 4b10 	vmov	r4, r5, d0
 800bf90:	4bc3      	ldr	r3, [pc, #780]	; (800c2a0 <atan+0x318>)
 800bf92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bf96:	429e      	cmp	r6, r3
 800bf98:	46ab      	mov	fp, r5
 800bf9a:	dd18      	ble.n	800bfce <atan+0x46>
 800bf9c:	4bc1      	ldr	r3, [pc, #772]	; (800c2a4 <atan+0x31c>)
 800bf9e:	429e      	cmp	r6, r3
 800bfa0:	dc01      	bgt.n	800bfa6 <atan+0x1e>
 800bfa2:	d109      	bne.n	800bfb8 <atan+0x30>
 800bfa4:	b144      	cbz	r4, 800bfb8 <atan+0x30>
 800bfa6:	4622      	mov	r2, r4
 800bfa8:	462b      	mov	r3, r5
 800bfaa:	4620      	mov	r0, r4
 800bfac:	4629      	mov	r1, r5
 800bfae:	f7f4 f919 	bl	80001e4 <__adddf3>
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	460d      	mov	r5, r1
 800bfb6:	e006      	b.n	800bfc6 <atan+0x3e>
 800bfb8:	f1bb 0f00 	cmp.w	fp, #0
 800bfbc:	f300 8131 	bgt.w	800c222 <atan+0x29a>
 800bfc0:	a59b      	add	r5, pc, #620	; (adr r5, 800c230 <atan+0x2a8>)
 800bfc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bfc6:	ec45 4b10 	vmov	d0, r4, r5
 800bfca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfce:	4bb6      	ldr	r3, [pc, #728]	; (800c2a8 <atan+0x320>)
 800bfd0:	429e      	cmp	r6, r3
 800bfd2:	dc14      	bgt.n	800bffe <atan+0x76>
 800bfd4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bfd8:	429e      	cmp	r6, r3
 800bfda:	dc0d      	bgt.n	800bff8 <atan+0x70>
 800bfdc:	a396      	add	r3, pc, #600	; (adr r3, 800c238 <atan+0x2b0>)
 800bfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe2:	ee10 0a10 	vmov	r0, s0
 800bfe6:	4629      	mov	r1, r5
 800bfe8:	f7f4 f8fc 	bl	80001e4 <__adddf3>
 800bfec:	4baf      	ldr	r3, [pc, #700]	; (800c2ac <atan+0x324>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	f7f4 fd3e 	bl	8000a70 <__aeabi_dcmpgt>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d1e6      	bne.n	800bfc6 <atan+0x3e>
 800bff8:	f04f 3aff 	mov.w	sl, #4294967295
 800bffc:	e02b      	b.n	800c056 <atan+0xce>
 800bffe:	f000 f963 	bl	800c2c8 <fabs>
 800c002:	4bab      	ldr	r3, [pc, #684]	; (800c2b0 <atan+0x328>)
 800c004:	429e      	cmp	r6, r3
 800c006:	ec55 4b10 	vmov	r4, r5, d0
 800c00a:	f300 80bf 	bgt.w	800c18c <atan+0x204>
 800c00e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c012:	429e      	cmp	r6, r3
 800c014:	f300 80a0 	bgt.w	800c158 <atan+0x1d0>
 800c018:	ee10 2a10 	vmov	r2, s0
 800c01c:	ee10 0a10 	vmov	r0, s0
 800c020:	462b      	mov	r3, r5
 800c022:	4629      	mov	r1, r5
 800c024:	f7f4 f8de 	bl	80001e4 <__adddf3>
 800c028:	4ba0      	ldr	r3, [pc, #640]	; (800c2ac <atan+0x324>)
 800c02a:	2200      	movs	r2, #0
 800c02c:	f7f4 f8d8 	bl	80001e0 <__aeabi_dsub>
 800c030:	2200      	movs	r2, #0
 800c032:	4606      	mov	r6, r0
 800c034:	460f      	mov	r7, r1
 800c036:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c03a:	4620      	mov	r0, r4
 800c03c:	4629      	mov	r1, r5
 800c03e:	f7f4 f8d1 	bl	80001e4 <__adddf3>
 800c042:	4602      	mov	r2, r0
 800c044:	460b      	mov	r3, r1
 800c046:	4630      	mov	r0, r6
 800c048:	4639      	mov	r1, r7
 800c04a:	f7f4 fbab 	bl	80007a4 <__aeabi_ddiv>
 800c04e:	f04f 0a00 	mov.w	sl, #0
 800c052:	4604      	mov	r4, r0
 800c054:	460d      	mov	r5, r1
 800c056:	4622      	mov	r2, r4
 800c058:	462b      	mov	r3, r5
 800c05a:	4620      	mov	r0, r4
 800c05c:	4629      	mov	r1, r5
 800c05e:	f7f4 fa77 	bl	8000550 <__aeabi_dmul>
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	4680      	mov	r8, r0
 800c068:	4689      	mov	r9, r1
 800c06a:	f7f4 fa71 	bl	8000550 <__aeabi_dmul>
 800c06e:	a374      	add	r3, pc, #464	; (adr r3, 800c240 <atan+0x2b8>)
 800c070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c074:	4606      	mov	r6, r0
 800c076:	460f      	mov	r7, r1
 800c078:	f7f4 fa6a 	bl	8000550 <__aeabi_dmul>
 800c07c:	a372      	add	r3, pc, #456	; (adr r3, 800c248 <atan+0x2c0>)
 800c07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c082:	f7f4 f8af 	bl	80001e4 <__adddf3>
 800c086:	4632      	mov	r2, r6
 800c088:	463b      	mov	r3, r7
 800c08a:	f7f4 fa61 	bl	8000550 <__aeabi_dmul>
 800c08e:	a370      	add	r3, pc, #448	; (adr r3, 800c250 <atan+0x2c8>)
 800c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c094:	f7f4 f8a6 	bl	80001e4 <__adddf3>
 800c098:	4632      	mov	r2, r6
 800c09a:	463b      	mov	r3, r7
 800c09c:	f7f4 fa58 	bl	8000550 <__aeabi_dmul>
 800c0a0:	a36d      	add	r3, pc, #436	; (adr r3, 800c258 <atan+0x2d0>)
 800c0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a6:	f7f4 f89d 	bl	80001e4 <__adddf3>
 800c0aa:	4632      	mov	r2, r6
 800c0ac:	463b      	mov	r3, r7
 800c0ae:	f7f4 fa4f 	bl	8000550 <__aeabi_dmul>
 800c0b2:	a36b      	add	r3, pc, #428	; (adr r3, 800c260 <atan+0x2d8>)
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	f7f4 f894 	bl	80001e4 <__adddf3>
 800c0bc:	4632      	mov	r2, r6
 800c0be:	463b      	mov	r3, r7
 800c0c0:	f7f4 fa46 	bl	8000550 <__aeabi_dmul>
 800c0c4:	a368      	add	r3, pc, #416	; (adr r3, 800c268 <atan+0x2e0>)
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	f7f4 f88b 	bl	80001e4 <__adddf3>
 800c0ce:	4642      	mov	r2, r8
 800c0d0:	464b      	mov	r3, r9
 800c0d2:	f7f4 fa3d 	bl	8000550 <__aeabi_dmul>
 800c0d6:	a366      	add	r3, pc, #408	; (adr r3, 800c270 <atan+0x2e8>)
 800c0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0dc:	4680      	mov	r8, r0
 800c0de:	4689      	mov	r9, r1
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	4639      	mov	r1, r7
 800c0e4:	f7f4 fa34 	bl	8000550 <__aeabi_dmul>
 800c0e8:	a363      	add	r3, pc, #396	; (adr r3, 800c278 <atan+0x2f0>)
 800c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ee:	f7f4 f877 	bl	80001e0 <__aeabi_dsub>
 800c0f2:	4632      	mov	r2, r6
 800c0f4:	463b      	mov	r3, r7
 800c0f6:	f7f4 fa2b 	bl	8000550 <__aeabi_dmul>
 800c0fa:	a361      	add	r3, pc, #388	; (adr r3, 800c280 <atan+0x2f8>)
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	f7f4 f86e 	bl	80001e0 <__aeabi_dsub>
 800c104:	4632      	mov	r2, r6
 800c106:	463b      	mov	r3, r7
 800c108:	f7f4 fa22 	bl	8000550 <__aeabi_dmul>
 800c10c:	a35e      	add	r3, pc, #376	; (adr r3, 800c288 <atan+0x300>)
 800c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c112:	f7f4 f865 	bl	80001e0 <__aeabi_dsub>
 800c116:	4632      	mov	r2, r6
 800c118:	463b      	mov	r3, r7
 800c11a:	f7f4 fa19 	bl	8000550 <__aeabi_dmul>
 800c11e:	a35c      	add	r3, pc, #368	; (adr r3, 800c290 <atan+0x308>)
 800c120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c124:	f7f4 f85c 	bl	80001e0 <__aeabi_dsub>
 800c128:	4632      	mov	r2, r6
 800c12a:	463b      	mov	r3, r7
 800c12c:	f7f4 fa10 	bl	8000550 <__aeabi_dmul>
 800c130:	4602      	mov	r2, r0
 800c132:	460b      	mov	r3, r1
 800c134:	4640      	mov	r0, r8
 800c136:	4649      	mov	r1, r9
 800c138:	f7f4 f854 	bl	80001e4 <__adddf3>
 800c13c:	4622      	mov	r2, r4
 800c13e:	462b      	mov	r3, r5
 800c140:	f7f4 fa06 	bl	8000550 <__aeabi_dmul>
 800c144:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c148:	4602      	mov	r2, r0
 800c14a:	460b      	mov	r3, r1
 800c14c:	d14b      	bne.n	800c1e6 <atan+0x25e>
 800c14e:	4620      	mov	r0, r4
 800c150:	4629      	mov	r1, r5
 800c152:	f7f4 f845 	bl	80001e0 <__aeabi_dsub>
 800c156:	e72c      	b.n	800bfb2 <atan+0x2a>
 800c158:	ee10 0a10 	vmov	r0, s0
 800c15c:	4b53      	ldr	r3, [pc, #332]	; (800c2ac <atan+0x324>)
 800c15e:	2200      	movs	r2, #0
 800c160:	4629      	mov	r1, r5
 800c162:	f7f4 f83d 	bl	80001e0 <__aeabi_dsub>
 800c166:	4b51      	ldr	r3, [pc, #324]	; (800c2ac <atan+0x324>)
 800c168:	4606      	mov	r6, r0
 800c16a:	460f      	mov	r7, r1
 800c16c:	2200      	movs	r2, #0
 800c16e:	4620      	mov	r0, r4
 800c170:	4629      	mov	r1, r5
 800c172:	f7f4 f837 	bl	80001e4 <__adddf3>
 800c176:	4602      	mov	r2, r0
 800c178:	460b      	mov	r3, r1
 800c17a:	4630      	mov	r0, r6
 800c17c:	4639      	mov	r1, r7
 800c17e:	f7f4 fb11 	bl	80007a4 <__aeabi_ddiv>
 800c182:	f04f 0a01 	mov.w	sl, #1
 800c186:	4604      	mov	r4, r0
 800c188:	460d      	mov	r5, r1
 800c18a:	e764      	b.n	800c056 <atan+0xce>
 800c18c:	4b49      	ldr	r3, [pc, #292]	; (800c2b4 <atan+0x32c>)
 800c18e:	429e      	cmp	r6, r3
 800c190:	da1d      	bge.n	800c1ce <atan+0x246>
 800c192:	ee10 0a10 	vmov	r0, s0
 800c196:	4b48      	ldr	r3, [pc, #288]	; (800c2b8 <atan+0x330>)
 800c198:	2200      	movs	r2, #0
 800c19a:	4629      	mov	r1, r5
 800c19c:	f7f4 f820 	bl	80001e0 <__aeabi_dsub>
 800c1a0:	4b45      	ldr	r3, [pc, #276]	; (800c2b8 <atan+0x330>)
 800c1a2:	4606      	mov	r6, r0
 800c1a4:	460f      	mov	r7, r1
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	f7f4 f9d0 	bl	8000550 <__aeabi_dmul>
 800c1b0:	4b3e      	ldr	r3, [pc, #248]	; (800c2ac <atan+0x324>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f7f4 f816 	bl	80001e4 <__adddf3>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4630      	mov	r0, r6
 800c1be:	4639      	mov	r1, r7
 800c1c0:	f7f4 faf0 	bl	80007a4 <__aeabi_ddiv>
 800c1c4:	f04f 0a02 	mov.w	sl, #2
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	460d      	mov	r5, r1
 800c1cc:	e743      	b.n	800c056 <atan+0xce>
 800c1ce:	462b      	mov	r3, r5
 800c1d0:	ee10 2a10 	vmov	r2, s0
 800c1d4:	4939      	ldr	r1, [pc, #228]	; (800c2bc <atan+0x334>)
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	f7f4 fae4 	bl	80007a4 <__aeabi_ddiv>
 800c1dc:	f04f 0a03 	mov.w	sl, #3
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	460d      	mov	r5, r1
 800c1e4:	e737      	b.n	800c056 <atan+0xce>
 800c1e6:	4b36      	ldr	r3, [pc, #216]	; (800c2c0 <atan+0x338>)
 800c1e8:	4e36      	ldr	r6, [pc, #216]	; (800c2c4 <atan+0x33c>)
 800c1ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c1ee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c1f2:	e9da 2300 	ldrd	r2, r3, [sl]
 800c1f6:	f7f3 fff3 	bl	80001e0 <__aeabi_dsub>
 800c1fa:	4622      	mov	r2, r4
 800c1fc:	462b      	mov	r3, r5
 800c1fe:	f7f3 ffef 	bl	80001e0 <__aeabi_dsub>
 800c202:	4602      	mov	r2, r0
 800c204:	460b      	mov	r3, r1
 800c206:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c20a:	f7f3 ffe9 	bl	80001e0 <__aeabi_dsub>
 800c20e:	f1bb 0f00 	cmp.w	fp, #0
 800c212:	4604      	mov	r4, r0
 800c214:	460d      	mov	r5, r1
 800c216:	f6bf aed6 	bge.w	800bfc6 <atan+0x3e>
 800c21a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c21e:	461d      	mov	r5, r3
 800c220:	e6d1      	b.n	800bfc6 <atan+0x3e>
 800c222:	a51d      	add	r5, pc, #116	; (adr r5, 800c298 <atan+0x310>)
 800c224:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c228:	e6cd      	b.n	800bfc6 <atan+0x3e>
 800c22a:	bf00      	nop
 800c22c:	f3af 8000 	nop.w
 800c230:	54442d18 	.word	0x54442d18
 800c234:	bff921fb 	.word	0xbff921fb
 800c238:	8800759c 	.word	0x8800759c
 800c23c:	7e37e43c 	.word	0x7e37e43c
 800c240:	e322da11 	.word	0xe322da11
 800c244:	3f90ad3a 	.word	0x3f90ad3a
 800c248:	24760deb 	.word	0x24760deb
 800c24c:	3fa97b4b 	.word	0x3fa97b4b
 800c250:	a0d03d51 	.word	0xa0d03d51
 800c254:	3fb10d66 	.word	0x3fb10d66
 800c258:	c54c206e 	.word	0xc54c206e
 800c25c:	3fb745cd 	.word	0x3fb745cd
 800c260:	920083ff 	.word	0x920083ff
 800c264:	3fc24924 	.word	0x3fc24924
 800c268:	5555550d 	.word	0x5555550d
 800c26c:	3fd55555 	.word	0x3fd55555
 800c270:	2c6a6c2f 	.word	0x2c6a6c2f
 800c274:	bfa2b444 	.word	0xbfa2b444
 800c278:	52defd9a 	.word	0x52defd9a
 800c27c:	3fadde2d 	.word	0x3fadde2d
 800c280:	af749a6d 	.word	0xaf749a6d
 800c284:	3fb3b0f2 	.word	0x3fb3b0f2
 800c288:	fe231671 	.word	0xfe231671
 800c28c:	3fbc71c6 	.word	0x3fbc71c6
 800c290:	9998ebc4 	.word	0x9998ebc4
 800c294:	3fc99999 	.word	0x3fc99999
 800c298:	54442d18 	.word	0x54442d18
 800c29c:	3ff921fb 	.word	0x3ff921fb
 800c2a0:	440fffff 	.word	0x440fffff
 800c2a4:	7ff00000 	.word	0x7ff00000
 800c2a8:	3fdbffff 	.word	0x3fdbffff
 800c2ac:	3ff00000 	.word	0x3ff00000
 800c2b0:	3ff2ffff 	.word	0x3ff2ffff
 800c2b4:	40038000 	.word	0x40038000
 800c2b8:	3ff80000 	.word	0x3ff80000
 800c2bc:	bff00000 	.word	0xbff00000
 800c2c0:	0800c3b8 	.word	0x0800c3b8
 800c2c4:	0800c398 	.word	0x0800c398

0800c2c8 <fabs>:
 800c2c8:	ec51 0b10 	vmov	r0, r1, d0
 800c2cc:	ee10 2a10 	vmov	r2, s0
 800c2d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c2d4:	ec43 2b10 	vmov	d0, r2, r3
 800c2d8:	4770      	bx	lr
 800c2da:	0000      	movs	r0, r0
 800c2dc:	0000      	movs	r0, r0
	...

0800c2e0 <nan>:
 800c2e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c2e8 <nan+0x8>
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	00000000 	.word	0x00000000
 800c2ec:	7ff80000 	.word	0x7ff80000

0800c2f0 <_init>:
 800c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f2:	bf00      	nop
 800c2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2f6:	bc08      	pop	{r3}
 800c2f8:	469e      	mov	lr, r3
 800c2fa:	4770      	bx	lr

0800c2fc <_fini>:
 800c2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2fe:	bf00      	nop
 800c300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c302:	bc08      	pop	{r3}
 800c304:	469e      	mov	lr, r3
 800c306:	4770      	bx	lr
